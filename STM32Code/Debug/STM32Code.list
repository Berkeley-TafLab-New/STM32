
STM32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c844  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800cb18  0800cb18  0000db18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d224  0800d224  0000e224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d22c  0800d22c  0000e22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d230  0800d230  0000e230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  0800d234  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005dc  240001e0  0800d414  0000f1e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240007bc  0800d414  0000f7bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a611  00000000  00000000  0000f20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003102  00000000  00000000  0002981f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001580  00000000  00000000  0002c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010e1  00000000  00000000  0002dea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034e69  00000000  00000000  0002ef89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d663  00000000  00000000  00063df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151c43  00000000  00000000  00081455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d3098  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006af8  00000000  00000000  001d30dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001d9bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cafc 	.word	0x0800cafc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0800cafc 	.word	0x0800cafc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <AS5600_read_angle>:
 */

#include "AS5600.h"
#include "stdint.h"

HAL_StatusTypeDef AS5600_read_angle(I2C_HandleTypeDef *hi2c, float *angle){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
    
    HAL_StatusTypeDef ret ;
    uint8_t angle_buff[2]; // hold the 2 bits from the Raw Angle 
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG, I2C_MEMADD_SIZE_8BIT,angle_buff,2,HAL_MAX_DELAY);//HAL_MAX_DELAY is blockling 
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2302      	movs	r3, #2
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	220c      	movs	r2, #12
 800070a:	216c      	movs	r1, #108	@ 0x6c
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f002 feb5 	bl	800347c <HAL_I2C_Mem_Read>
 8000712:	4603      	mov	r3, r0
 8000714:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK){
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <AS5600_read_angle+0x38>
    	handle_error(ret);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f826 	bl	8000770 <handle_error>
    }
    uint16_t raw_angle = (((angle_buff[0]<<8)|angle_buff[1])&0x0FFF);
 8000724:	7a3b      	ldrb	r3, [r7, #8]
 8000726:	b21b      	sxth	r3, r3
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21a      	sxth	r2, r3
 800072c:	7a7b      	ldrb	r3, [r7, #9]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b21b      	sxth	r3, r3
 8000734:	b29b      	uxth	r3, r3
 8000736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073a:	81bb      	strh	r3, [r7, #12]

    *angle = 360.0f*((float)raw_angle/4096.0f);
 800073c:	89bb      	ldrh	r3, [r7, #12]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000746:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000768 <AS5600_read_angle+0x7c>
 800074a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800076c <AS5600_read_angle+0x80>
 8000752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	45800000 	.word	0x45800000
 800076c:	43b40000 	.word	0x43b40000

08000770 <handle_error>:
        printf("No magnet detected or improper alignment\n");
        return 0; // Magnet is not detected
    }
}

void handle_error(HAL_StatusTypeDef status) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d004      	beq.n	800078a <handle_error+0x1a>
        // Implement error handling logic (e.g., log error or reset I²C bus)
        printf("I2C Error: %d\n", status);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4619      	mov	r1, r3
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <handle_error+0x24>)
 8000786:	f00a fa13 	bl	800abb0 <iprintf>
    }
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	0800cb5c 	.word	0x0800cb5c

08000798 <__io_putchar>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum);//wit end
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2201      	movs	r2, #1
 80007a8:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <__io_putchar+0x20>)
 80007aa:	f006 ff91 	bl	80076d0 <HAL_UART_Transmit>
    return ch;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	24000330 	.word	0x24000330

080007bc <HAL_UART_RxCpltCallback>:
uint8_t ucRxData = 0;
/* this the receive function The UART receive callback is automatically called whenever data is received
 through any UART that has been configured for interrupt-driven reception*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a09      	ldr	r2, [pc, #36]	@ (80007f0 <HAL_UART_RxCpltCallback+0x34>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d10c      	bne.n	80007e8 <HAL_UART_RxCpltCallback+0x2c>
  {
      WitSerialDataIn(ucRxData);
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_UART_RxCpltCallback+0x38>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f9b6 	bl	8001b44 <WitSerialDataIn>
      UART_Start_Receive_IT(huart, &ucRxData, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	4906      	ldr	r1, [pc, #24]	@ (80007f4 <HAL_UART_RxCpltCallback+0x38>)
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f008 fce9 	bl	80091b4 <UART_Start_Receive_IT>
      printf("recieved something");
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <HAL_UART_RxCpltCallback+0x3c>)
 80007e4:	f00a f9e4 	bl	800abb0 <iprintf>
      //HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
  }
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40004400 	.word	0x40004400
 80007f4:	240003c5 	.word	0x240003c5
 80007f8:	0800cb6c 	.word	0x0800cb6c

080007fc <set_servo_angle>:

void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle){
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	4613      	mov	r3, r2
 8000808:	71fb      	strb	r3, [r7, #7]
  /*set a servo angle by taking the channel angle and tim 
   the maths maybe works like 1.5 ms pulse width is neutral with .5 and 2.5 being either end
   so we have a 1us count so 500us/1ms -> 500 counts and 2500us -> 2500 counts*/
   uint32_t pulse_length = 500 +(angle*((2500-500)/180));
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800081a:	617b      	str	r3, [r7, #20]
  __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <set_servo_angle+0x30>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800082a:	e023      	b.n	8000874 <set_servo_angle+0x78>
  __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	2b04      	cmp	r3, #4
 8000830:	d104      	bne.n	800083c <set_servo_angle+0x40>
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800083a:	e01b      	b.n	8000874 <set_servo_angle+0x78>
  __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d104      	bne.n	800084c <set_servo_angle+0x50>
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800084a:	e013      	b.n	8000874 <set_servo_angle+0x78>
  __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	2b0c      	cmp	r3, #12
 8000850:	d104      	bne.n	800085c <set_servo_angle+0x60>
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800085a:	e00b      	b.n	8000874 <set_servo_angle+0x78>
  __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2b10      	cmp	r3, #16
 8000860:	d104      	bne.n	800086c <set_servo_angle+0x70>
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800086a:	e003      	b.n	8000874 <set_servo_angle+0x78>
  __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000874:	bf00      	nop
 8000876:	371c      	adds	r7, #28
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0d6      	sub	sp, #344	@ 0x158
 8000884:	af06      	add	r7, sp, #24
    int i;
    ring_buffer big_buff;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000886:	f000 fca3 	bl	80011d0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088a:	f001 fbf7 	bl	800207c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f985 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 fb51 	bl	8000f38 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000896:	f000 fa1f 	bl	8000cd8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800089a:	f000 fb01 	bl	8000ea0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800089e:	f000 faab 	bl	8000df8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008a2:	f000 f9d9 	bl	8000c58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008a6:	2100      	movs	r1, #0
 80008a8:	48ac      	ldr	r0, [pc, #688]	@ (8000b5c <main+0x2dc>)
 80008aa:	f005 ffc1 	bl	8006830 <HAL_TIM_PWM_Start>

  WitInit(WIT_PROTOCOL_NORMAL, 0x50); // wit initialisation
 80008ae:	2150      	movs	r1, #80	@ 0x50
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 fb95 	bl	8001fe0 <WitInit>
  WitSerialWriteRegister(SensorUartSend);
 80008b6:	48aa      	ldr	r0, [pc, #680]	@ (8000b60 <main+0x2e0>)
 80008b8:	f001 f888 	bl	80019cc <WitSerialWriteRegister>
  WitRegisterCallBack(CopeSensorData);
 80008bc:	48a9      	ldr	r0, [pc, #676]	@ (8000b64 <main+0x2e4>)
 80008be:	f001 fa6f 	bl	8001da0 <WitRegisterCallBack>
  AutoScanSensor();
 80008c2:	f000 fc2d 	bl	8001120 <AutoScanSensor>
	  //printf("hello");
	  //check_magnet_presence(&hi2c1);
	  //status  = HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, HAL_MAX_DELAY);
	  //if (status != HAL_OK)
	 //HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
	  HAL_StatusTypeDef ret = HAL_UART_Receive(&huart2, rx_buffer, sizeof(rx_buffer), 1000); // Timeout: 1000ms
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	2264      	movs	r2, #100	@ 0x64
 80008cc:	49a6      	ldr	r1, [pc, #664]	@ (8000b68 <main+0x2e8>)
 80008ce:	48a7      	ldr	r0, [pc, #668]	@ (8000b6c <main+0x2ec>)
 80008d0:	f006 ff8c 	bl	80077ec <HAL_UART_Receive>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
	 // if (ret == HAL_OK) {
	 //     printf("Received Data: %s\n", rx_buffer); // Process received data
	  //} else {
	   //   printf("UART Receive Error\n");
	  HAL_Delay(500);
 80008da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008de:	f001 fc5f 	bl	80021a0 <HAL_Delay>
	  HAL_StatusTypeDef i2c_status = AS5600_read_angle(&hi2c1, &angle);
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	48a1      	ldr	r0, [pc, #644]	@ (8000b70 <main+0x2f0>)
 80008ea:	f7ff feff 	bl	80006ec <AS5600_read_angle>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
	  if (i2c_status== HAL_OK){
 80008f4:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 812c 	beq.w	8000b56 <main+0x2d6>
		  continue;//printf("the angle is %f", angle);
	  }

	  set_servo_angle(&htim1,TIM_CHANNEL_1, angle); // debug
 80008fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000902:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800090e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000912:	793b      	ldrb	r3, [r7, #4]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	4890      	ldr	r0, [pc, #576]	@ (8000b5c <main+0x2dc>)
 800091c:	f7ff ff6e 	bl	80007fc <set_servo_angle>
	  if (i2c_status != HAL_OK) {
 8000920:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8000924:	2b00      	cmp	r3, #0
 8000926:	d003      	beq.n	8000930 <main+0xb0>
	      printf("Error reading angle from AS5600\n");
 8000928:	4892      	ldr	r0, [pc, #584]	@ (8000b74 <main+0x2f4>)
 800092a:	f00a f9b1 	bl	800ac90 <puts>
	      continue; // Skip to the next iteration
 800092e:	e113      	b.n	8000b58 <main+0x2d8>
	  }
	  HAL_Delay(500);
 8000930:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000934:	f001 fc34 	bl	80021a0 <HAL_Delay>

	printf("2");
 8000938:	2032      	movs	r0, #50	@ 0x32
 800093a:	f00a f94b 	bl	800abd4 <putchar>
    	HAL_Delay(500);   //����ˢ��̫��۲첻���
 800093e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000942:	f001 fc2d 	bl	80021a0 <HAL_Delay>
	if(s_cDataUpdate)
 8000946:	4b8c      	ldr	r3, [pc, #560]	@ (8000b78 <main+0x2f8>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0bb      	beq.n	80008c6 <main+0x46>
		{
			printf("3");
 800094e:	2033      	movs	r0, #51	@ 0x33
 8000950:	f00a f940 	bl	800abd4 <putchar>
			for(i = 0; i < 3; i++)
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800095a:	e05b      	b.n	8000a14 <main+0x194>
			{
				fAcc[i] = sReg[AX+i] / 32768.0f * 16.0f;
 800095c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000960:	3334      	adds	r3, #52	@ 0x34
 8000962:	4a86      	ldr	r2, [pc, #536]	@ (8000b7c <main+0x2fc>)
 8000964:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000970:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8000b80 <main+0x300>
 8000974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000978:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800097c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000980:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800098a:	f107 0208 	add.w	r2, r7, #8
 800098e:	4413      	add	r3, r2
 8000990:	3b18      	subs	r3, #24
 8000992:	edc3 7a00 	vstr	s15, [r3]
				fGyro[i] = sReg[GX+i] / 32768.0f * 2000.0f;
 8000996:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800099a:	3337      	adds	r3, #55	@ 0x37
 800099c:	4a77      	ldr	r2, [pc, #476]	@ (8000b7c <main+0x2fc>)
 800099e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009aa:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8000b80 <main+0x300>
 80009ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009b2:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8000b84 <main+0x304>
 80009b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80009c4:	f107 0208 	add.w	r2, r7, #8
 80009c8:	4413      	add	r3, r2
 80009ca:	3b24      	subs	r3, #36	@ 0x24
 80009cc:	edc3 7a00 	vstr	s15, [r3]
				fAngle[i] = sReg[Roll+i] / 32768.0f * 180.0f;
 80009d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80009d4:	333d      	adds	r3, #61	@ 0x3d
 80009d6:	4a69      	ldr	r2, [pc, #420]	@ (8000b7c <main+0x2fc>)
 80009d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009dc:	ee07 3a90 	vmov	s15, r3
 80009e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009e4:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8000b80 <main+0x300>
 80009e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ec:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8000b88 <main+0x308>
 80009f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80009fe:	f107 0208 	add.w	r2, r7, #8
 8000a02:	4413      	add	r3, r2
 8000a04:	3b30      	subs	r3, #48	@ 0x30
 8000a06:	edc3 7a00 	vstr	s15, [r3]
			for(i = 0; i < 3; i++)
 8000a0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000a0e:	3301      	adds	r3, #1
 8000a10:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000a14:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	dd9f      	ble.n	800095c <main+0xdc>
			}
			if(s_cDataUpdate & ACC_UPDATE)
 8000a1c:	4b56      	ldr	r3, [pc, #344]	@ (8000b78 <main+0x2f8>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01b      	beq.n	8000a60 <main+0x1e0>
			{
				printf("acc:%.3f %.3f %.3f\r\n", fAcc[0], fAcc[1], fAcc[2]);
 8000a28:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8000a2c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a30:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8000a34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a38:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8000a3c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a40:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a44:	ed8d 7b00 	vstr	d7, [sp]
 8000a48:	ec53 2b15 	vmov	r2, r3, d5
 8000a4c:	484f      	ldr	r0, [pc, #316]	@ (8000b8c <main+0x30c>)
 8000a4e:	f00a f8af 	bl	800abb0 <iprintf>
				s_cDataUpdate &= ~ACC_UPDATE;
 8000a52:	4b49      	ldr	r3, [pc, #292]	@ (8000b78 <main+0x2f8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	f023 0301 	bic.w	r3, r3, #1
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b46      	ldr	r3, [pc, #280]	@ (8000b78 <main+0x2f8>)
 8000a5e:	701a      	strb	r2, [r3, #0]
			}
			if(s_cDataUpdate & GYRO_UPDATE)
 8000a60:	4b45      	ldr	r3, [pc, #276]	@ (8000b78 <main+0x2f8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d01b      	beq.n	8000aa4 <main+0x224>
			{
				printf("gyro:%.3f %.3f %.3f\r\n", fGyro[0], fGyro[1], fGyro[2]);
 8000a6c:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8000a70:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a74:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8000a78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a7c:	edd7 6a49 	vldr	s13, [r7, #292]	@ 0x124
 8000a80:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a88:	ed8d 7b00 	vstr	d7, [sp]
 8000a8c:	ec53 2b15 	vmov	r2, r3, d5
 8000a90:	483f      	ldr	r0, [pc, #252]	@ (8000b90 <main+0x310>)
 8000a92:	f00a f88d 	bl	800abb0 <iprintf>
				s_cDataUpdate &= ~GYRO_UPDATE;
 8000a96:	4b38      	ldr	r3, [pc, #224]	@ (8000b78 <main+0x2f8>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f023 0302 	bic.w	r3, r3, #2
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b35      	ldr	r3, [pc, #212]	@ (8000b78 <main+0x2f8>)
 8000aa2:	701a      	strb	r2, [r3, #0]
			}
			if(s_cDataUpdate & ANGLE_UPDATE)
 8000aa4:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <main+0x2f8>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d033      	beq.n	8000b18 <main+0x298>
			{
              fYaw = (float)((unsigned short)sReg[Yaw]) / 32768 * 180.0;
 8000ab0:	4b32      	ldr	r3, [pc, #200]	@ (8000b7c <main+0x2fc>)
 8000ab2:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	@ 0x7e
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ac0:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000b80 <main+0x300>
 8000ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ac8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000b88 <main+0x308>
 8000acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad0:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
				printf("angle:%.3f %.3f %.3f(%.3f)\r\n", fAngle[0], fAngle[1], fAngle[2], fYaw);
 8000ad4:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8000ad8:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000adc:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8000ae0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae4:	edd7 6a46 	vldr	s13, [r7, #280]	@ 0x118
 8000ae8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000aec:	edd7 5a4d 	vldr	s11, [r7, #308]	@ 0x134
 8000af0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000af4:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000af8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000afc:	ed8d 7b00 	vstr	d7, [sp]
 8000b00:	ec53 2b14 	vmov	r2, r3, d4
 8000b04:	4823      	ldr	r0, [pc, #140]	@ (8000b94 <main+0x314>)
 8000b06:	f00a f853 	bl	800abb0 <iprintf>
				s_cDataUpdate &= ~ANGLE_UPDATE;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <main+0x2f8>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f023 0304 	bic.w	r3, r3, #4
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <main+0x2f8>)
 8000b16:	701a      	strb	r2, [r3, #0]
			}
			if(s_cDataUpdate & MAG_UPDATE)
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <main+0x2f8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d014      	beq.n	8000b4e <main+0x2ce>
			{
				printf("mag:%d %d %d\r\n", sReg[HX], sReg[HY], sReg[HZ]);
 8000b24:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <main+0x2fc>)
 8000b26:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <main+0x2fc>)
 8000b2e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <main+0x2fc>)
 8000b36:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 8000b3a:	4817      	ldr	r0, [pc, #92]	@ (8000b98 <main+0x318>)
 8000b3c:	f00a f838 	bl	800abb0 <iprintf>
				s_cDataUpdate &= ~MAG_UPDATE;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <main+0x2f8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	f023 0308 	bic.w	r3, r3, #8
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <main+0x2f8>)
 8000b4c:	701a      	strb	r2, [r3, #0]
			}
          s_cDataUpdate = 0;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <main+0x2f8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e6b7      	b.n	80008c6 <main+0x46>
		  continue;//printf("the angle is %f", angle);
 8000b56:	bf00      	nop
  {
 8000b58:	e6b5      	b.n	80008c6 <main+0x46>
 8000b5a:	bf00      	nop
 8000b5c:	24000250 	.word	0x24000250
 8000b60:	08001039 	.word	0x08001039
 8000b64:	08001061 	.word	0x08001061
 8000b68:	240003c8 	.word	0x240003c8
 8000b6c:	2400029c 	.word	0x2400029c
 8000b70:	240001fc 	.word	0x240001fc
 8000b74:	0800cb80 	.word	0x0800cb80
 8000b78:	240003c4 	.word	0x240003c4
 8000b7c:	2400054c 	.word	0x2400054c
 8000b80:	47000000 	.word	0x47000000
 8000b84:	44fa0000 	.word	0x44fa0000
 8000b88:	43340000 	.word	0x43340000
 8000b8c:	0800cba0 	.word	0x0800cba0
 8000b90:	0800cbb8 	.word	0x0800cbb8
 8000b94:	0800cbd0 	.word	0x0800cbd0
 8000b98:	0800cbf0 	.word	0x0800cbf0

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09c      	sub	sp, #112	@ 0x70
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	224c      	movs	r2, #76	@ 0x4c
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00a f950 	bl	800ae50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00a f94a 	bl	800ae50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f003 f87d 	bl	8003cbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bce:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd4:	6193      	str	r3, [r2, #24]
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000be2:	bf00      	nop
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <SystemClock_Config+0xb8>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bf0:	d1f8      	bne.n	8000be4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000bfa:	2340      	movs	r3, #64	@ 0x40
 8000bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 f892 	bl	8003d30 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c12:	f000 fb09 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	233f      	movs	r3, #63	@ 0x3f
 8000c18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c2a:	2340      	movs	r3, #64	@ 0x40
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fc51 	bl	80044e4 <HAL_RCC_ClockConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c48:	f000 faee 	bl	8001228 <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3770      	adds	r7, #112	@ 0x70
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	58024800 	.word	0x58024800

08000c58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <MX_I2C1_Init+0x78>)
 8000c60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c64:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd4 <MX_I2C1_Init+0x7c>)
 8000c66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c92:	480e      	ldr	r0, [pc, #56]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000c94:	f002 fb56 	bl	8003344 <HAL_I2C_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c9e:	f000 fac3 	bl	8001228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4809      	ldr	r0, [pc, #36]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000ca6:	f002 ff71 	bl	8003b8c <HAL_I2CEx_ConfigAnalogFilter>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cb0:	f000 faba 	bl	8001228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_I2C1_Init+0x74>)
 8000cb8:	f002 ffb3 	bl	8003c22 <HAL_I2CEx_ConfigDigitalFilter>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cc2:	f000 fab1 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	240001fc 	.word	0x240001fc
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	00707cbb 	.word	0x00707cbb

08000cd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b098      	sub	sp, #96	@ 0x60
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2234      	movs	r2, #52	@ 0x34
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f00a f8a3 	bl	800ae50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d0a:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d0c:	4a39      	ldr	r2, [pc, #228]	@ (8000df4 <MX_TIM1_Init+0x11c>)
 8000d0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000d10:	4b37      	ldr	r3, [pc, #220]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d12:	223f      	movs	r2, #63	@ 0x3f
 8000d14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000d1c:	4b34      	ldr	r3, [pc, #208]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d1e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b32      	ldr	r3, [pc, #200]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d36:	482e      	ldr	r0, [pc, #184]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d38:	f005 fd22 	bl	8006780 <HAL_TIM_PWM_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fa71 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d56:	4619      	mov	r1, r3
 8000d58:	4825      	ldr	r0, [pc, #148]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d5a:	f006 fb41 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d64:	f000 fa60 	bl	8001228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d68:	2360      	movs	r3, #96	@ 0x60
 8000d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000d6c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d72:	2300      	movs	r3, #0
 8000d74:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d76:	2300      	movs	r3, #0
 8000d78:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4818      	ldr	r0, [pc, #96]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000d90:	f005 fe6a 	bl	8006a68 <HAL_TIM_PWM_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000d9a:	f000 fa45 	bl	8001228 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000dd4:	f006 fba0 	bl	8007518 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000dde:	f000 fa23 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000de2:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <MX_TIM1_Init+0x118>)
 8000de4:	f000 facc 	bl	8001380 <HAL_TIM_MspPostInit>

}
 8000de8:	bf00      	nop
 8000dea:	3760      	adds	r7, #96	@ 0x60
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000250 	.word	0x24000250
 8000df4:	40010000 	.word	0x40010000

08000df8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000dfe:	4a26      	ldr	r2, [pc, #152]	@ (8000e98 <MX_USART2_UART_Init+0xa0>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e02:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e40:	4814      	ldr	r0, [pc, #80]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e42:	f006 fbf5 	bl	8007630 <HAL_UART_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e4c:	f000 f9ec 	bl	8001228 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e50:	2100      	movs	r1, #0
 8000e52:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e54:	f009 f8eb 	bl	800a02e <HAL_UARTEx_SetTxFifoThreshold>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e5e:	f000 f9e3 	bl	8001228 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e66:	f009 f920 	bl	800a0aa <HAL_UARTEx_SetRxFifoThreshold>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e70:	f000 f9da 	bl	8001228 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e74:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e76:	f009 f8a1 	bl	8009fbc <HAL_UARTEx_DisableFifoMode>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e80:	f000 f9d2 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  	  UART_Start_Receive_IT(&huart2, &ucRxData, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	4905      	ldr	r1, [pc, #20]	@ (8000e9c <MX_USART2_UART_Init+0xa4>)
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <MX_USART2_UART_Init+0x9c>)
 8000e8a:	f008 f993 	bl	80091b4 <UART_Start_Receive_IT>
      //HAL_UART_Receive_IT(&huart2, &ucRxData, 1);

  /* USER CODE END USART2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2400029c 	.word	0x2400029c
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	240003c5 	.word	0x240003c5

08000ea0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000ea6:	4a23      	ldr	r2, [pc, #140]	@ (8000f34 <MX_USART3_UART_Init+0x94>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ee8:	4811      	ldr	r0, [pc, #68]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000eea:	f006 fba1 	bl	8007630 <HAL_UART_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ef4:	f000 f998 	bl	8001228 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000efc:	f009 f897 	bl	800a02e <HAL_UARTEx_SetTxFifoThreshold>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f06:	f000 f98f 	bl	8001228 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000f0e:	f009 f8cc 	bl	800a0aa <HAL_UARTEx_SetRxFifoThreshold>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f18:	f000 f986 	bl	8001228 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <MX_USART3_UART_Init+0x90>)
 8000f1e:	f009 f84d 	bl	8009fbc <HAL_UARTEx_DisableFifoMode>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f28:	f000 f97e 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	24000330 	.word	0x24000330
 8000f34:	40004800 	.word	0x40004800

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	@ 0x30
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	4b38      	ldr	r3, [pc, #224]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f54:	4a36      	ldr	r2, [pc, #216]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5e:	4b34      	ldr	r3, [pc, #208]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f72:	4a2f      	ldr	r2, [pc, #188]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9a:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	4a20      	ldr	r2, [pc, #128]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	4a18      	ldr	r2, [pc, #96]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd6:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	4a11      	ldr	r2, [pc, #68]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_GPIO_Init+0xf8>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	480b      	ldr	r0, [pc, #44]	@ (8001034 <MX_GPIO_Init+0xfc>)
 8001008:	f002 f982 	bl	8003310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_GPIO_Init+0xfc>)
 8001024:	f001 ffcc 	bl	8002fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	@ 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400
 8001034:	58021800 	.word	0x58021800

08001038 <SensorUartSend>:

/* USER CODE BEGIN 4 */

static void SensorUartSend(uint8_t *p_data, uint32_t uiSize)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart2, p_data, uiSize, uiSize*4);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b29a      	uxth	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4803      	ldr	r0, [pc, #12]	@ (800105c <SensorUartSend+0x24>)
 800104e:	f006 fb3f 	bl	80076d0 <HAL_UART_Transmit>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2400029c 	.word	0x2400029c

08001060 <CopeSensorData>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	int i;
    for(i = 0; i < uiRegNum; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e049      	b.n	8001104 <CopeSensorData+0xa4>
    {
        switch(uiReg)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b36      	subs	r3, #54	@ 0x36
 8001074:	2b09      	cmp	r3, #9
 8001076:	d837      	bhi.n	80010e8 <CopeSensorData+0x88>
 8001078:	a201      	add	r2, pc, #4	@ (adr r2, 8001080 <CopeSensorData+0x20>)
 800107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107e:	bf00      	nop
 8001080:	080010a9 	.word	0x080010a9
 8001084:	080010e9 	.word	0x080010e9
 8001088:	080010e9 	.word	0x080010e9
 800108c:	080010b9 	.word	0x080010b9
 8001090:	080010e9 	.word	0x080010e9
 8001094:	080010e9 	.word	0x080010e9
 8001098:	080010c9 	.word	0x080010c9
 800109c:	080010e9 	.word	0x080010e9
 80010a0:	080010e9 	.word	0x080010e9
 80010a4:	080010d9 	.word	0x080010d9
        {
            case AZ:
				s_cDataUpdate |= ACC_UPDATE;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <CopeSensorData+0xbc>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <CopeSensorData+0xbc>)
 80010b4:	701a      	strb	r2, [r3, #0]
            break;
 80010b6:	e01f      	b.n	80010f8 <CopeSensorData+0x98>
            case GZ:
				s_cDataUpdate |= GYRO_UPDATE;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <CopeSensorData+0xbc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <CopeSensorData+0xbc>)
 80010c4:	701a      	strb	r2, [r3, #0]
            break;
 80010c6:	e017      	b.n	80010f8 <CopeSensorData+0x98>
            case HZ:
				s_cDataUpdate |= MAG_UPDATE;
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <CopeSensorData+0xbc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <CopeSensorData+0xbc>)
 80010d4:	701a      	strb	r2, [r3, #0]
            break;
 80010d6:	e00f      	b.n	80010f8 <CopeSensorData+0x98>
            case Yaw:
				s_cDataUpdate |= ANGLE_UPDATE;
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <CopeSensorData+0xbc>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <CopeSensorData+0xbc>)
 80010e4:	701a      	strb	r2, [r3, #0]
            break;
 80010e6:	e007      	b.n	80010f8 <CopeSensorData+0x98>
            default:
				s_cDataUpdate |= READ_UPDATE;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <CopeSensorData+0xbc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <CopeSensorData+0xbc>)
 80010f4:	701a      	strb	r2, [r3, #0]
			break;
 80010f6:	bf00      	nop
        }
		uiReg++;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3301      	adds	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
    for(i = 0; i < uiRegNum; i++)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8b1      	bhi.n	8001070 <CopeSensorData+0x10>
    }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	240003c4 	.word	0x240003c4

08001120 <AutoScanSensor>:

static void AutoScanSensor(void)
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0
	const uint32_t c_uiBaud[9] = {4800, 9600, 19200, 38400, 57600, 115200, 230400, 460800, 921600};
 8001126:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <AutoScanSensor+0x98>)
 8001128:	1d3c      	adds	r4, r7, #4
 800112a:	461d      	mov	r5, r3
 800112c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001134:	682b      	ldr	r3, [r5, #0]
 8001136:	6023      	str	r3, [r4, #0]
	int i, iRetry;
	
	for(i = 0; i < 9; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800113c:	e030      	b.n	80011a0 <AutoScanSensor+0x80>
	{
        uiBuad = c_uiBaud[i];
 800113e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	3330      	adds	r3, #48	@ 0x30
 8001144:	443b      	add	r3, r7
 8001146:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800114a:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <AutoScanSensor+0x9c>)
 800114c:	6013      	str	r3, [r2, #0]
        MX_USART2_UART_Init();
 800114e:	f7ff fe53 	bl	8000df8 <MX_USART2_UART_Init>
        HAL_Delay(250); // Settling time
 8001152:	20fa      	movs	r0, #250	@ 0xfa
 8001154:	f001 f824 	bl	80021a0 <HAL_Delay>
		iRetry = 2;
 8001158:	2302      	movs	r3, #2
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
		do
		{
			s_cDataUpdate = 0;
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <AutoScanSensor+0xa0>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
			WitReadReg(AX, 3);
 8001162:	2103      	movs	r1, #3
 8001164:	2034      	movs	r0, #52	@ 0x34
 8001166:	f000 fe31 	bl	8001dcc <WitReadReg>
			HAL_Delay(200);
 800116a:	20c8      	movs	r0, #200	@ 0xc8
 800116c:	f001 f818 	bl	80021a0 <HAL_Delay>
			if(s_cDataUpdate != 0)
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <AutoScanSensor+0xa0>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00a      	beq.n	800118e <AutoScanSensor+0x6e>
			{
				printf("%lu baud find sensor\r\n\r\n", c_uiBaud[i]);
 8001178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	3330      	adds	r3, #48	@ 0x30
 800117e:	443b      	add	r3, r7
 8001180:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001184:	4619      	mov	r1, r3
 8001186:	480f      	ldr	r0, [pc, #60]	@ (80011c4 <AutoScanSensor+0xa4>)
 8001188:	f009 fd12 	bl	800abb0 <iprintf>
 800118c:	e011      	b.n	80011b2 <AutoScanSensor+0x92>
				return ;
			}
			iRetry--;
 800118e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001190:	3b01      	subs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
		}while(iRetry);		
 8001194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e0      	bne.n	800115c <AutoScanSensor+0x3c>
	for(i = 0; i < 9; i++)
 800119a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800119c:	3301      	adds	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	ddcb      	ble.n	800113e <AutoScanSensor+0x1e>
	}
	printf("can not find sensor\r\n");
 80011a6:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <AutoScanSensor+0xa8>)
 80011a8:	f009 fd72 	bl	800ac90 <puts>
	printf("please check your connection\r\n");
 80011ac:	4807      	ldr	r0, [pc, #28]	@ (80011cc <AutoScanSensor+0xac>)
 80011ae:	f009 fd6f 	bl	800ac90 <puts>
}
 80011b2:	3730      	adds	r7, #48	@ 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bdb0      	pop	{r4, r5, r7, pc}
 80011b8:	0800cc54 	.word	0x0800cc54
 80011bc:	24000000 	.word	0x24000000
 80011c0:	240003c4 	.word	0x240003c4
 80011c4:	0800cc00 	.word	0x0800cc00
 80011c8:	0800cc1c 	.word	0x0800cc1c
 80011cc:	0800cc34 	.word	0x0800cc34

080011d0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011e2:	f001 f911 	bl	8002408 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011e6:	2301      	movs	r3, #1
 80011e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011f2:	231f      	movs	r3, #31
 80011f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011f6:	2387      	movs	r3, #135	@ 0x87
 80011f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011fe:	2300      	movs	r3, #0
 8001200:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001202:	2301      	movs	r3, #1
 8001204:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001206:	2301      	movs	r3, #1
 8001208:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001212:	463b      	mov	r3, r7
 8001214:	4618      	mov	r0, r3
 8001216:	f001 f92f 	bl	8002478 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800121a:	2004      	movs	r0, #4
 800121c:	f001 f90c 	bl	8002438 <HAL_MPU_Enable>

}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <Error_Handler+0x8>

08001234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_MspInit+0x30>)
 800123c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001240:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <HAL_MspInit+0x30>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_MspInit+0x30>)
 800124c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	58024400 	.word	0x58024400

08001268 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0b8      	sub	sp, #224	@ 0xe0
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	22b8      	movs	r2, #184	@ 0xb8
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f009 fde1 	bl	800ae50 <memset>
  if(hi2c->Instance==I2C1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <HAL_I2C_MspInit+0xc8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d146      	bne.n	8001326 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001298:	f04f 0208 	mov.w	r2, #8
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fca4 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80012ba:	f7ff ffb5 	bl	8001228 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <HAL_I2C_MspInit+0xcc>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001334 <HAL_I2C_MspInit+0xcc>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <HAL_I2C_MspInit+0xcc>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e4:	2312      	movs	r3, #18
 80012e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f6:	2304      	movs	r3, #4
 80012f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001300:	4619      	mov	r1, r3
 8001302:	480d      	ldr	r0, [pc, #52]	@ (8001338 <HAL_I2C_MspInit+0xd0>)
 8001304:	f001 fe5c 	bl	8002fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_I2C_MspInit+0xcc>)
 800130a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800130e:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <HAL_I2C_MspInit+0xcc>)
 8001310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001314:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_I2C_MspInit+0xcc>)
 800131a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800131e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001326:	bf00      	nop
 8001328:	37e0      	adds	r7, #224	@ 0xe0
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40005400 	.word	0x40005400
 8001334:	58024400 	.word	0x58024400
 8001338:	58020400 	.word	0x58020400

0800133c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_TIM_PWM_MspInit+0x3c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10e      	bne.n	800136c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_TIM_PWM_MspInit+0x40>)
 8001350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001354:	4a09      	ldr	r2, [pc, #36]	@ (800137c <HAL_TIM_PWM_MspInit+0x40>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <HAL_TIM_PWM_MspInit+0x40>)
 8001360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40010000 	.word	0x40010000
 800137c:	58024400 	.word	0x58024400

08001380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a13      	ldr	r2, [pc, #76]	@ (80013ec <HAL_TIM_MspPostInit+0x6c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d11f      	bne.n	80013e2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a2:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <HAL_TIM_MspPostInit+0x70>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a8:	4a11      	ldr	r2, [pc, #68]	@ (80013f0 <HAL_TIM_MspPostInit+0x70>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <HAL_TIM_MspPostInit+0x70>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <HAL_TIM_MspPostInit+0x74>)
 80013de:	f001 fdef 	bl	8002fc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010000 	.word	0x40010000
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58021000 	.word	0x58021000

080013f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0bc      	sub	sp, #240	@ 0xf0
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001410:	f107 0320 	add.w	r3, r7, #32
 8001414:	22b8      	movs	r2, #184	@ 0xb8
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f009 fd19 	bl	800ae50 <memset>
  if(huart->Instance==USART2)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a63      	ldr	r2, [pc, #396]	@ (80015b0 <HAL_UART_MspInit+0x1b8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d172      	bne.n	800150e <HAL_UART_MspInit+0x116>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001428:	f04f 0202 	mov.w	r2, #2
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fbdc 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800144a:	f7ff feed 	bl	8001228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800144e:	4b59      	ldr	r3, [pc, #356]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001454:	4a57      	ldr	r2, [pc, #348]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800145e:	4b55      	ldr	r3, [pc, #340]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b51      	ldr	r3, [pc, #324]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	4a50      	ldr	r2, [pc, #320]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147c:	4b4d      	ldr	r3, [pc, #308]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	4b4a      	ldr	r3, [pc, #296]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001490:	4a48      	ldr	r2, [pc, #288]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800149a:	4b46      	ldr	r3, [pc, #280]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a8:	2308      	movs	r3, #8
 80014aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c0:	2307      	movs	r3, #7
 80014c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014ca:	4619      	mov	r1, r3
 80014cc:	483a      	ldr	r0, [pc, #232]	@ (80015b8 <HAL_UART_MspInit+0x1c0>)
 80014ce:	f001 fd77 	bl	8002fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014d2:	2320      	movs	r3, #32
 80014d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ea:	2307      	movs	r3, #7
 80014ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014f4:	4619      	mov	r1, r3
 80014f6:	4831      	ldr	r0, [pc, #196]	@ (80015bc <HAL_UART_MspInit+0x1c4>)
 80014f8:	f001 fd62 	bl	8002fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2026      	movs	r0, #38	@ 0x26
 8001502:	f000 ff4c 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001506:	2026      	movs	r0, #38	@ 0x26
 8001508:	f000 ff63 	bl	80023d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800150c:	e04b      	b.n	80015a6 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a2b      	ldr	r2, [pc, #172]	@ (80015c0 <HAL_UART_MspInit+0x1c8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d146      	bne.n	80015a6 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001518:	f04f 0202 	mov.w	r2, #2
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fb64 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_UART_MspInit+0x146>
      Error_Handler();
 800153a:	f7ff fe75 	bl	8001228 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800153e:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001544:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001546:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <HAL_UART_MspInit+0x1bc>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800157a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800157e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001594:	2307      	movs	r3, #7
 8001596:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800159e:	4619      	mov	r1, r3
 80015a0:	4806      	ldr	r0, [pc, #24]	@ (80015bc <HAL_UART_MspInit+0x1c4>)
 80015a2:	f001 fd0d 	bl	8002fc0 <HAL_GPIO_Init>
}
 80015a6:	bf00      	nop
 80015a8:	37f0      	adds	r7, #240	@ 0xf0
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40004400 	.word	0x40004400
 80015b4:	58024400 	.word	0x58024400
 80015b8:	58020000 	.word	0x58020000
 80015bc:	58020c00 	.word	0x58020c00
 80015c0:	40004800 	.word	0x40004800

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <NMI_Handler+0x4>

080015cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <MemManage_Handler+0x4>

080015dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161a:	f000 fda1 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <USART2_IRQHandler+0x10>)
 800162a:	f006 f9a7 	bl	800797c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2400029c 	.word	0x2400029c

08001638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_kill>:

int _kill(int pid, int sig)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001652:	f009 fc4f 	bl	800aef4 <__errno>
 8001656:	4603      	mov	r3, r0
 8001658:	2216      	movs	r2, #22
 800165a:	601a      	str	r2, [r3, #0]
  return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_exit>:

void _exit (int status)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ffe7 	bl	8001648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800167a:	bf00      	nop
 800167c:	e7fd      	b.n	800167a <_exit+0x12>

0800167e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e00a      	b.n	80016a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001690:	f3af 8000 	nop.w
 8001694:	4601      	mov	r1, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	b2ca      	uxtb	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	dbf0      	blt.n	8001690 <_read+0x12>
  }

  return len;
 80016ae:	687b      	ldr	r3, [r7, #4]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e009      	b.n	80016de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	60ba      	str	r2, [r7, #8]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f860 	bl	8000798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbf1      	blt.n	80016ca <_write+0x12>
  }
  return len;
 80016e6:	687b      	ldr	r3, [r7, #4]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_close>:

int _close(int file)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001718:	605a      	str	r2, [r3, #4]
  return 0;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_isatty>:

int _isatty(int file)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001730:	2301      	movs	r3, #1
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	@ (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f009 fbb4 	bl	800aef4 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	24050000 	.word	0x24050000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	2400042c 	.word	0x2400042c
 80017c0:	240007c0 	.word	0x240007c0

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c8:	4b3e      	ldr	r3, [pc, #248]	@ (80018c4 <SystemInit+0x100>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ce:	4a3d      	ldr	r2, [pc, #244]	@ (80018c4 <SystemInit+0x100>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017d8:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <SystemInit+0x104>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	2b06      	cmp	r3, #6
 80017e2:	d807      	bhi.n	80017f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017e4:	4b38      	ldr	r3, [pc, #224]	@ (80018c8 <SystemInit+0x104>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 030f 	bic.w	r3, r3, #15
 80017ec:	4a36      	ldr	r2, [pc, #216]	@ (80018c8 <SystemInit+0x104>)
 80017ee:	f043 0307 	orr.w	r3, r3, #7
 80017f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017f4:	4b35      	ldr	r3, [pc, #212]	@ (80018cc <SystemInit+0x108>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a34      	ldr	r2, [pc, #208]	@ (80018cc <SystemInit+0x108>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001800:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <SystemInit+0x108>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001806:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <SystemInit+0x108>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4930      	ldr	r1, [pc, #192]	@ (80018cc <SystemInit+0x108>)
 800180c:	4b30      	ldr	r3, [pc, #192]	@ (80018d0 <SystemInit+0x10c>)
 800180e:	4013      	ands	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001812:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <SystemInit+0x104>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <SystemInit+0x104>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 030f 	bic.w	r3, r3, #15
 8001826:	4a28      	ldr	r2, [pc, #160]	@ (80018c8 <SystemInit+0x104>)
 8001828:	f043 0307 	orr.w	r3, r3, #7
 800182c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800182e:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <SystemInit+0x108>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001834:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <SystemInit+0x108>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800183a:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <SystemInit+0x108>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001840:	4b22      	ldr	r3, [pc, #136]	@ (80018cc <SystemInit+0x108>)
 8001842:	4a24      	ldr	r2, [pc, #144]	@ (80018d4 <SystemInit+0x110>)
 8001844:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001846:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <SystemInit+0x108>)
 8001848:	4a23      	ldr	r2, [pc, #140]	@ (80018d8 <SystemInit+0x114>)
 800184a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800184c:	4b1f      	ldr	r3, [pc, #124]	@ (80018cc <SystemInit+0x108>)
 800184e:	4a23      	ldr	r2, [pc, #140]	@ (80018dc <SystemInit+0x118>)
 8001850:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001852:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <SystemInit+0x108>)
 8001854:	2200      	movs	r2, #0
 8001856:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001858:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <SystemInit+0x108>)
 800185a:	4a20      	ldr	r2, [pc, #128]	@ (80018dc <SystemInit+0x118>)
 800185c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <SystemInit+0x108>)
 8001860:	2200      	movs	r2, #0
 8001862:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <SystemInit+0x108>)
 8001866:	4a1d      	ldr	r2, [pc, #116]	@ (80018dc <SystemInit+0x118>)
 8001868:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <SystemInit+0x108>)
 800186c:	2200      	movs	r2, #0
 800186e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <SystemInit+0x108>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a15      	ldr	r2, [pc, #84]	@ (80018cc <SystemInit+0x108>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800187c:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <SystemInit+0x108>)
 800187e:	2200      	movs	r2, #0
 8001880:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <SystemInit+0x108>)
 8001884:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d113      	bne.n	80018b8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001890:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <SystemInit+0x108>)
 8001892:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001896:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <SystemInit+0x108>)
 8001898:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800189c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <SystemInit+0x11c>)
 80018a2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018a6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <SystemInit+0x108>)
 80018aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018ae:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <SystemInit+0x108>)
 80018b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00
 80018c8:	52002000 	.word	0x52002000
 80018cc:	58024400 	.word	0x58024400
 80018d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80018d4:	02020200 	.word	0x02020200
 80018d8:	01ff0000 	.word	0x01ff0000
 80018dc:	01010280 	.word	0x01010280
 80018e0:	52004000 	.word	0x52004000

080018e4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <ExitRun0Mode+0x2c>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <ExitRun0Mode+0x2c>)
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80018f4:	bf00      	nop
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <ExitRun0Mode+0x2c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f9      	beq.n	80018f6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	58024800 	.word	0x58024800

08001914 <__CRC16>:
    0x40
};


static uint16_t __CRC16(uint8_t *puchMsg, uint16_t usDataLen)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
    uint8_t uchCRCHi = 0xFF;
 8001920:	23ff      	movs	r3, #255	@ 0xff
 8001922:	75fb      	strb	r3, [r7, #23]
    uint8_t uchCRCLo = 0xFF;
 8001924:	23ff      	movs	r3, #255	@ 0xff
 8001926:	75bb      	strb	r3, [r7, #22]
    uint8_t uIndex;
    int i = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
    uchCRCHi = 0xFF;
 800192c:	23ff      	movs	r3, #255	@ 0xff
 800192e:	75fb      	strb	r3, [r7, #23]
    uchCRCLo = 0xFF;
 8001930:	23ff      	movs	r3, #255	@ 0xff
 8001932:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 8001934:	e013      	b.n	800195e <__CRC16+0x4a>
    {
        uIndex = uchCRCHi ^ puchMsg[i];
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	4053      	eors	r3, r2
 8001942:	73fb      	strb	r3, [r7, #15]
        uchCRCHi = uchCRCLo ^ __auchCRCHi[uIndex];
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <__CRC16+0x70>)
 8001948:	5cd2      	ldrb	r2, [r2, r3]
 800194a:	7dbb      	ldrb	r3, [r7, #22]
 800194c:	4053      	eors	r3, r2
 800194e:	75fb      	strb	r3, [r7, #23]
        uchCRCLo = __auchCRCLo[uIndex] ;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <__CRC16+0x74>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3301      	adds	r3, #1
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	429a      	cmp	r2, r3
 8001964:	dbe7      	blt.n	8001936 <__CRC16+0x22>
    }
    return (uint16_t)(((uint16_t)uchCRCHi << 8) | (uint16_t)uchCRCLo) ;
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	b21b      	sxth	r3, r3
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b21a      	sxth	r2, r3
 800196e:	7dbb      	ldrb	r3, [r7, #22]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21b      	sxth	r3, r3
 8001976:	b29b      	uxth	r3, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	0800cc88 	.word	0x0800cc88
 8001988:	0800cd88 	.word	0x0800cd88

0800198c <__CaliSum>:
static uint8_t __CaliSum(uint8_t *data, uint32_t len)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint8_t ucCheck = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	72fb      	strb	r3, [r7, #11]
    for(i=0; i<len; i++) ucCheck += *(data + i);
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e009      	b.n	80019b4 <__CaliSum+0x28>
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	7afb      	ldrb	r3, [r7, #11]
 80019aa:	4413      	add	r3, r2
 80019ac:	72fb      	strb	r3, [r7, #11]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d3f1      	bcc.n	80019a0 <__CaliSum+0x14>
    return ucCheck;
 80019bc:	7afb      	ldrb	r3, [r7, #11]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <WitSerialWriteRegister>:
int32_t WitSerialWriteRegister(SerialWrite Write_func)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    if(!Write_func)return WIT_HAL_INVAL;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <WitSerialWriteRegister+0x14>
 80019da:	f06f 0305 	mvn.w	r3, #5
 80019de:	e003      	b.n	80019e8 <WitSerialWriteRegister+0x1c>
    p_WitSerialWriteFunc = Write_func;
 80019e0:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <WitSerialWriteRegister+0x28>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	24000430 	.word	0x24000430

080019f8 <CopeWitData>:
static void CopeWitData(uint8_t ucIndex, uint16_t *p_data, uint32_t uiLen)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	73fb      	strb	r3, [r7, #15]
    uint32_t uiReg1 = 0, uiReg2 = 0, uiReg1Len = 0, uiReg2Len = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
    uint16_t *p_usReg1Val = p_data;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	617b      	str	r3, [r7, #20]
    uint16_t *p_usReg2Val = p_data+3;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3306      	adds	r3, #6
 8001a1e:	613b      	str	r3, [r7, #16]
    
    uiReg1Len = 4;
 8001a20:	2304      	movs	r3, #4
 8001a22:	61fb      	str	r3, [r7, #28]
    switch(ucIndex)
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	3b50      	subs	r3, #80	@ 0x50
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	f200 8080 	bhi.w	8001b2e <CopeWitData+0x136>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <CopeWitData+0x3c>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a99 	.word	0x08001a99
 8001a38:	08001a75 	.word	0x08001a75
 8001a3c:	08001a9f 	.word	0x08001a9f
 8001a40:	08001a87 	.word	0x08001a87
 8001a44:	08001aa5 	.word	0x08001aa5
 8001a48:	08001aab 	.word	0x08001aab
 8001a4c:	08001ab1 	.word	0x08001ab1
 8001a50:	08001ab7 	.word	0x08001ab7
 8001a54:	08001abd 	.word	0x08001abd
 8001a58:	08001ac3 	.word	0x08001ac3
 8001a5c:	08001ac9 	.word	0x08001ac9
 8001a60:	08001b2f 	.word	0x08001b2f
 8001a64:	08001b2f 	.word	0x08001b2f
 8001a68:	08001b2f 	.word	0x08001b2f
 8001a6c:	08001b2f 	.word	0x08001b2f
 8001a70:	08001acf 	.word	0x08001acf
    {
        case WIT_ACC:   uiReg1 = AX;    uiReg1Len = 3;  uiReg2 = TEMP;  uiReg2Len = 1;  break;
 8001a74:	2334      	movs	r3, #52	@ 0x34
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a78:	2303      	movs	r3, #3
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	2340      	movs	r3, #64	@ 0x40
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	2301      	movs	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	e027      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_ANGLE: uiReg1 = Roll;  uiReg1Len = 3;  uiReg2 = VERSION;  uiReg2Len = 1;  break;
 8001a86:	233d      	movs	r3, #61	@ 0x3d
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	232e      	movs	r3, #46	@ 0x2e
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	2301      	movs	r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	e01e      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_TIME:  uiReg1 = YYMM;	break;
 8001a98:	2330      	movs	r3, #48	@ 0x30
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9c:	e01b      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_GYRO:  uiReg1 = GX;  break;
 8001a9e:	2337      	movs	r3, #55	@ 0x37
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa2:	e018      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_MAGNETIC: uiReg1 = HX;  break;
 8001aa4:	233a      	movs	r3, #58	@ 0x3a
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	e015      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_DPORT: uiReg1 = D0Status;  break;
 8001aaa:	2341      	movs	r3, #65	@ 0x41
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aae:	e012      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_PRESS: uiReg1 = PressureL;  break;
 8001ab0:	2345      	movs	r3, #69	@ 0x45
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab4:	e00f      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_GPS:   uiReg1 = LonL;  break;
 8001ab6:	2349      	movs	r3, #73	@ 0x49
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aba:	e00c      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_VELOCITY: uiReg1 = GPSHeight;  break;
 8001abc:	234d      	movs	r3, #77	@ 0x4d
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac0:	e009      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_QUATER:    uiReg1 = q0;  break;
 8001ac2:	2351      	movs	r3, #81	@ 0x51
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac6:	e006      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_GSA:   uiReg1 = SVNUM;  break;
 8001ac8:	2355      	movs	r3, #85	@ 0x55
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	e003      	b.n	8001ad6 <CopeWitData+0xde>
        case WIT_REGVALUE:  uiReg1 = s_uiReadRegIndex;  break;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <CopeWitData+0x140>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad4:	bf00      	nop
		default:
			return ;

    }
    if(uiLen == 3)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d103      	bne.n	8001ae4 <CopeWitData+0xec>
    {
        uiReg1Len = 3;
 8001adc:	2303      	movs	r3, #3
 8001ade:	61fb      	str	r3, [r7, #28]
        uiReg2Len = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
    }
    if(uiReg1Len)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00e      	beq.n	8001b08 <CopeWitData+0x110>
	{
		memcpy(&sReg[uiReg1], p_usReg1Val, uiReg1Len<<1);
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4a13      	ldr	r2, [pc, #76]	@ (8001b3c <CopeWitData+0x144>)
 8001af0:	1898      	adds	r0, r3, r2
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	461a      	mov	r2, r3
 8001af8:	6979      	ldr	r1, [r7, #20]
 8001afa:	f009 fa28 	bl	800af4e <memcpy>
		p_WitRegUpdateCbFunc(uiReg1, uiReg1Len);
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <CopeWitData+0x148>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	69f9      	ldr	r1, [r7, #28]
 8001b04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b06:	4798      	blx	r3
	}
    if(uiReg2Len)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d010      	beq.n	8001b30 <CopeWitData+0x138>
	{
		memcpy(&sReg[uiReg2], p_usReg2Val, uiReg2Len<<1);
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <CopeWitData+0x144>)
 8001b14:	1898      	adds	r0, r3, r2
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6939      	ldr	r1, [r7, #16]
 8001b1e:	f009 fa16 	bl	800af4e <memcpy>
		p_WitRegUpdateCbFunc(uiReg2, uiReg2Len);
 8001b22:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <CopeWitData+0x148>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69b9      	ldr	r1, [r7, #24]
 8001b28:	6a38      	ldr	r0, [r7, #32]
 8001b2a:	4798      	blx	r3
 8001b2c:	e000      	b.n	8001b30 <CopeWitData+0x138>
			return ;
 8001b2e:	bf00      	nop
	}
}
 8001b30:	3728      	adds	r7, #40	@ 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	24000548 	.word	0x24000548
 8001b3c:	2400054c 	.word	0x2400054c
 8001b40:	2400043c 	.word	0x2400043c

08001b44 <WitSerialDataIn>:

void WitSerialDataIn(uint8_t ucData)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
    uint16_t usCRC16, usTemp, i, usData[4];
    uint8_t ucSum;

    if(p_WitRegUpdateCbFunc == NULL)return ;
 8001b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8001d84 <WitSerialDataIn+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 810f 	beq.w	8001d76 <WitSerialDataIn+0x232>
    s_ucWitDataBuff[s_uiWitDataCnt++] = ucData;
 8001b58:	4b8b      	ldr	r3, [pc, #556]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	498a      	ldr	r1, [pc, #552]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001b60:	600a      	str	r2, [r1, #0]
 8001b62:	498a      	ldr	r1, [pc, #552]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001b64:	79fa      	ldrb	r2, [r7, #7]
 8001b66:	54ca      	strb	r2, [r1, r3]
    switch(s_uiProtoclo)
 8001b68:	4b89      	ldr	r3, [pc, #548]	@ (8001d90 <WitSerialDataIn+0x24c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	f200 80f9 	bhi.w	8001d64 <WitSerialDataIn+0x220>
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	f080 80ef 	bcs.w	8001d56 <WitSerialDataIn+0x212>
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <WitSerialDataIn+0x3e>
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d06f      	beq.n	8001c60 <WitSerialDataIn+0x11c>
 8001b80:	e0f0      	b.n	8001d64 <WitSerialDataIn+0x220>
    {
        case WIT_PROTOCOL_NORMAL:
            if(s_ucWitDataBuff[0] != 0x55)
 8001b82:	4b82      	ldr	r3, [pc, #520]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b55      	cmp	r3, #85	@ 0x55
 8001b88:	d00c      	beq.n	8001ba4 <WitSerialDataIn+0x60>
            {
                s_uiWitDataCnt--;
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	4a7d      	ldr	r2, [pc, #500]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001b92:	6013      	str	r3, [r2, #0]
                memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8001b94:	4b7c      	ldr	r3, [pc, #496]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	497e      	ldr	r1, [pc, #504]	@ (8001d94 <WitSerialDataIn+0x250>)
 8001b9c:	487b      	ldr	r0, [pc, #492]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001b9e:	f009 f9d6 	bl	800af4e <memcpy>
                return ;
 8001ba2:	e0eb      	b.n	8001d7c <WitSerialDataIn+0x238>
            }
            if(s_uiWitDataCnt >= 11)
 8001ba4:	4b78      	ldr	r3, [pc, #480]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b0a      	cmp	r3, #10
 8001baa:	f240 80d8 	bls.w	8001d5e <WitSerialDataIn+0x21a>
            {
                ucSum = __CaliSum(s_ucWitDataBuff, 10);
 8001bae:	210a      	movs	r1, #10
 8001bb0:	4876      	ldr	r0, [pc, #472]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001bb2:	f7ff feeb 	bl	800198c <__CaliSum>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]
                if(ucSum != s_ucWitDataBuff[10])
 8001bba:	4b74      	ldr	r3, [pc, #464]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001bbc:	7a9b      	ldrb	r3, [r3, #10]
 8001bbe:	7c7a      	ldrb	r2, [r7, #17]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d00c      	beq.n	8001bde <WitSerialDataIn+0x9a>
                {
                    s_uiWitDataCnt--;
 8001bc4:	4b70      	ldr	r3, [pc, #448]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	4a6f      	ldr	r2, [pc, #444]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001bcc:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8001bce:	4b6e      	ldr	r3, [pc, #440]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	496f      	ldr	r1, [pc, #444]	@ (8001d94 <WitSerialDataIn+0x250>)
 8001bd6:	486d      	ldr	r0, [pc, #436]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001bd8:	f009 f9b9 	bl	800af4e <memcpy>
                    return ;
 8001bdc:	e0ce      	b.n	8001d7c <WitSerialDataIn+0x238>
                }
                usData[0] = ((uint16_t)s_ucWitDataBuff[3] << 8) | s_ucWitDataBuff[2];
 8001bde:	4b6b      	ldr	r3, [pc, #428]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001be0:	78db      	ldrb	r3, [r3, #3]
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b68      	ldr	r3, [pc, #416]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001bea:	789b      	ldrb	r3, [r3, #2]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	813b      	strh	r3, [r7, #8]
                usData[1] = ((uint16_t)s_ucWitDataBuff[5] << 8) | s_ucWitDataBuff[4];
 8001bf6:	4b65      	ldr	r3, [pc, #404]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	4b62      	ldr	r3, [pc, #392]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001c02:	791b      	ldrb	r3, [r3, #4]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	817b      	strh	r3, [r7, #10]
                usData[2] = ((uint16_t)s_ucWitDataBuff[7] << 8) | s_ucWitDataBuff[6];
 8001c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001c10:	79db      	ldrb	r3, [r3, #7]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	4b5c      	ldr	r3, [pc, #368]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001c1a:	799b      	ldrb	r3, [r3, #6]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	81bb      	strh	r3, [r7, #12]
                usData[3] = ((uint16_t)s_ucWitDataBuff[9] << 8) | s_ucWitDataBuff[8];
 8001c26:	4b59      	ldr	r3, [pc, #356]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001c28:	7a5b      	ldrb	r3, [r3, #9]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	4b56      	ldr	r3, [pc, #344]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001c32:	7a1b      	ldrb	r3, [r3, #8]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	81fb      	strh	r3, [r7, #14]
                CopeWitData(s_ucWitDataBuff[1], usData, 4);
 8001c3e:	4b53      	ldr	r3, [pc, #332]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001c40:	785b      	ldrb	r3, [r3, #1]
 8001c42:	f107 0108 	add.w	r1, r7, #8
 8001c46:	2204      	movs	r2, #4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fed5 	bl	80019f8 <CopeWitData>
                printf(usData);
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	4618      	mov	r0, r3
 8001c54:	f008 ffac 	bl	800abb0 <iprintf>
                s_uiWitDataCnt = 0;
 8001c58:	4b4b      	ldr	r3, [pc, #300]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
            }
        break;
 8001c5e:	e07e      	b.n	8001d5e <WitSerialDataIn+0x21a>
        case WIT_PROTOCOL_MODBUS:
            if(s_uiWitDataCnt > 2)
 8001c60:	4b49      	ldr	r3, [pc, #292]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d97c      	bls.n	8001d62 <WitSerialDataIn+0x21e>
            {
                if(s_ucWitDataBuff[1] != FuncR)
 8001c68:	4b48      	ldr	r3, [pc, #288]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001c6a:	785b      	ldrb	r3, [r3, #1]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d00c      	beq.n	8001c8a <WitSerialDataIn+0x146>
                {
                    s_uiWitDataCnt--;
 8001c70:	4b45      	ldr	r3, [pc, #276]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	4a44      	ldr	r2, [pc, #272]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001c78:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8001c7a:	4b43      	ldr	r3, [pc, #268]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4944      	ldr	r1, [pc, #272]	@ (8001d94 <WitSerialDataIn+0x250>)
 8001c82:	4842      	ldr	r0, [pc, #264]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001c84:	f009 f963 	bl	800af4e <memcpy>
                    return ;
 8001c88:	e078      	b.n	8001d7c <WitSerialDataIn+0x238>
                }
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 8001c8a:	4b40      	ldr	r3, [pc, #256]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001c8c:	789b      	ldrb	r3, [r3, #2]
 8001c8e:	3305      	adds	r3, #5
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b3d      	ldr	r3, [pc, #244]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d86f      	bhi.n	8001d7a <WitSerialDataIn+0x236>
                usTemp = ((uint16_t)s_ucWitDataBuff[s_uiWitDataCnt-2] << 8) | s_ucWitDataBuff[s_uiWitDataCnt-1];
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3b02      	subs	r3, #2
 8001ca0:	4a3a      	ldr	r2, [pc, #232]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	4936      	ldr	r1, [pc, #216]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	82bb      	strh	r3, [r7, #20]
                usCRC16 = __CRC16(s_ucWitDataBuff, s_uiWitDataCnt-2);
 8001cbc:	4b32      	ldr	r3, [pc, #200]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b02      	subs	r3, #2
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4830      	ldr	r0, [pc, #192]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001cca:	f7ff fe23 	bl	8001914 <__CRC16>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	827b      	strh	r3, [r7, #18]
                if(usTemp != usCRC16)
 8001cd2:	8aba      	ldrh	r2, [r7, #20]
 8001cd4:	8a7b      	ldrh	r3, [r7, #18]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d00c      	beq.n	8001cf4 <WitSerialDataIn+0x1b0>
                {
                    s_uiWitDataCnt--;
 8001cda:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	4a29      	ldr	r2, [pc, #164]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001ce2:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8001ce4:	4b28      	ldr	r3, [pc, #160]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	492a      	ldr	r1, [pc, #168]	@ (8001d94 <WitSerialDataIn+0x250>)
 8001cec:	4827      	ldr	r0, [pc, #156]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001cee:	f009 f92e 	bl	800af4e <memcpy>
                    return ;
 8001cf2:	e043      	b.n	8001d7c <WitSerialDataIn+0x238>
                }
                usTemp = s_ucWitDataBuff[2] >> 1;
 8001cf4:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	82bb      	strh	r3, [r7, #20]
                for(i = 0; i < usTemp; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	82fb      	strh	r3, [r7, #22]
 8001d02:	e019      	b.n	8001d38 <WitSerialDataIn+0x1f4>
                {
                    sReg[i+s_uiReadRegIndex] = ((uint16_t)s_ucWitDataBuff[(i<<1)+3] << 8) | s_ucWitDataBuff[(i<<1)+4];
 8001d04:	8afb      	ldrh	r3, [r7, #22]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	3303      	adds	r3, #3
 8001d0a:	4a20      	ldr	r2, [pc, #128]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001d0c:	5cd3      	ldrb	r3, [r2, r3]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b219      	sxth	r1, r3
 8001d14:	8afb      	ldrh	r3, [r7, #22]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	3304      	adds	r3, #4
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d8c <WitSerialDataIn+0x248>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	8af8      	ldrh	r0, [r7, #22]
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <WitSerialDataIn+0x254>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4403      	add	r3, r0
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	b211      	sxth	r1, r2
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <WitSerialDataIn+0x258>)
 8001d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < usTemp; i++)
 8001d32:	8afb      	ldrh	r3, [r7, #22]
 8001d34:	3301      	adds	r3, #1
 8001d36:	82fb      	strh	r3, [r7, #22]
 8001d38:	8afa      	ldrh	r2, [r7, #22]
 8001d3a:	8abb      	ldrh	r3, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3e1      	bcc.n	8001d04 <WitSerialDataIn+0x1c0>
                }
                p_WitRegUpdateCbFunc(s_uiReadRegIndex, usTemp);
 8001d40:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <WitSerialDataIn+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <WitSerialDataIn+0x254>)
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	8ab9      	ldrh	r1, [r7, #20]
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4798      	blx	r3
                s_uiWitDataCnt = 0;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
            }
        break;
 8001d54:	e005      	b.n	8001d62 <WitSerialDataIn+0x21e>
        case WIT_PROTOCOL_CAN:
        case WIT_PROTOCOL_I2C:
        s_uiWitDataCnt = 0;
 8001d56:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
        break;
 8001d5c:	e002      	b.n	8001d64 <WitSerialDataIn+0x220>
        break;
 8001d5e:	bf00      	nop
 8001d60:	e000      	b.n	8001d64 <WitSerialDataIn+0x220>
        break;
 8001d62:	bf00      	nop
    }
    if(s_uiWitDataCnt == WIT_DATA_BUFF_SIZE)s_uiWitDataCnt = 0;
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d6c:	d106      	bne.n	8001d7c <WitSerialDataIn+0x238>
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <WitSerialDataIn+0x244>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	e002      	b.n	8001d7c <WitSerialDataIn+0x238>
    if(p_WitRegUpdateCbFunc == NULL)return ;
 8001d76:	bf00      	nop
 8001d78:	e000      	b.n	8001d7c <WitSerialDataIn+0x238>
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 8001d7a:	bf00      	nop
}
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2400043c 	.word	0x2400043c
 8001d88:	24000540 	.word	0x24000540
 8001d8c:	24000440 	.word	0x24000440
 8001d90:	24000544 	.word	0x24000544
 8001d94:	24000441 	.word	0x24000441
 8001d98:	24000548 	.word	0x24000548
 8001d9c:	2400054c 	.word	0x2400054c

08001da0 <WitRegisterCallBack>:
        case WIT_PROTOCOL_I2C:
            break;
    }
}
int32_t WitRegisterCallBack(RegUpdateCb update_func)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    if(!update_func)return WIT_HAL_INVAL;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <WitRegisterCallBack+0x14>
 8001dae:	f06f 0305 	mvn.w	r3, #5
 8001db2:	e003      	b.n	8001dbc <WitRegisterCallBack+0x1c>
    p_WitRegUpdateCbFunc = update_func;
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <WitRegisterCallBack+0x28>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	2400043c 	.word	0x2400043c

08001dcc <WitReadReg>:
            return WIT_HAL_INVAL;        
    }
    return WIT_HAL_OK;
}
int32_t WitReadReg(uint32_t uiReg, uint32_t uiReadNum)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
    uint16_t usTemp, i;
    uint8_t ucBuff[8];
    if((uiReg + uiReadNum) >= REGSIZE)return WIT_HAL_INVAL;
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	2b8f      	cmp	r3, #143	@ 0x8f
 8001dde:	d902      	bls.n	8001de6 <WitReadReg+0x1a>
 8001de0:	f06f 0305 	mvn.w	r3, #5
 8001de4:	e0e5      	b.n	8001fb2 <WitReadReg+0x1e6>
    switch(s_uiProtoclo)
 8001de6:	4b75      	ldr	r3, [pc, #468]	@ (8001fbc <WitReadReg+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	f200 80d9 	bhi.w	8001fa2 <WitReadReg+0x1d6>
 8001df0:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <WitReadReg+0x2c>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e09 	.word	0x08001e09
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001ec5 	.word	0x08001ec5
 8001e04:	08001f0b 	.word	0x08001f0b
    {
        case WIT_PROTOCOL_NORMAL:
            if(uiReadNum > 4)return WIT_HAL_INVAL;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d902      	bls.n	8001e14 <WitReadReg+0x48>
 8001e0e:	f06f 0305 	mvn.w	r3, #5
 8001e12:	e0ce      	b.n	8001fb2 <WitReadReg+0x1e6>
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8001e14:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc0 <WitReadReg+0x1f4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <WitReadReg+0x56>
 8001e1c:	f06f 0304 	mvn.w	r3, #4
 8001e20:	e0c7      	b.n	8001fb2 <WitReadReg+0x1e6>
            ucBuff[0] = 0xFF;
 8001e22:	23ff      	movs	r3, #255	@ 0xff
 8001e24:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8001e26:	23aa      	movs	r3, #170	@ 0xaa
 8001e28:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8001e2a:	2327      	movs	r3, #39	@ 0x27
 8001e2c:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	743b      	strb	r3, [r7, #16]
            p_WitSerialWriteFunc(ucBuff, 5);
 8001e3c:	4b60      	ldr	r3, [pc, #384]	@ (8001fc0 <WitReadReg+0x1f4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f107 020c 	add.w	r2, r7, #12
 8001e44:	2105      	movs	r1, #5
 8001e46:	4610      	mov	r0, r2
 8001e48:	4798      	blx	r3
            break;
 8001e4a:	e0ae      	b.n	8001faa <WitReadReg+0x1de>
        case WIT_PROTOCOL_MODBUS:
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8001e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc0 <WitReadReg+0x1f4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <WitReadReg+0x8e>
 8001e54:	f06f 0304 	mvn.w	r3, #4
 8001e58:	e0ab      	b.n	8001fb2 <WitReadReg+0x1e6>
            usTemp = uiReadNum << 1;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	82bb      	strh	r3, [r7, #20]
            if((usTemp + 5) > WIT_DATA_BUFF_SIZE)return WIT_HAL_NOMEM;
 8001e62:	8abb      	ldrh	r3, [r7, #20]
 8001e64:	2bfb      	cmp	r3, #251	@ 0xfb
 8001e66:	d902      	bls.n	8001e6e <WitReadReg+0xa2>
 8001e68:	f06f 0303 	mvn.w	r3, #3
 8001e6c:	e0a1      	b.n	8001fb2 <WitReadReg+0x1e6>
            ucBuff[0] = s_ucAddr;
 8001e6e:	4b55      	ldr	r3, [pc, #340]	@ (8001fc4 <WitReadReg+0x1f8>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = FuncR;
 8001e74:	2303      	movs	r3, #3
 8001e76:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = uiReg >> 8;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xFF;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReadNum >> 8;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	743b      	strb	r3, [r7, #16]
            ucBuff[5] = uiReadNum & 0xff;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	747b      	strb	r3, [r7, #17]
            usTemp = __CRC16(ucBuff, 6);
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	2106      	movs	r1, #6
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fd3a 	bl	8001914 <__CRC16>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	82bb      	strh	r3, [r7, #20]
            ucBuff[6] = usTemp >> 8;
 8001ea4:	8abb      	ldrh	r3, [r7, #20]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	74bb      	strb	r3, [r7, #18]
            ucBuff[7] = usTemp & 0xff;
 8001eae:	8abb      	ldrh	r3, [r7, #20]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	74fb      	strb	r3, [r7, #19]
            p_WitSerialWriteFunc(ucBuff, 8);
 8001eb4:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <WitReadReg+0x1f4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f107 020c 	add.w	r2, r7, #12
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4798      	blx	r3
            break;
 8001ec2:	e072      	b.n	8001faa <WitReadReg+0x1de>
        case WIT_PROTOCOL_CAN:
            if(uiReadNum > 3)return WIT_HAL_INVAL;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d902      	bls.n	8001ed0 <WitReadReg+0x104>
 8001eca:	f06f 0305 	mvn.w	r3, #5
 8001ece:	e070      	b.n	8001fb2 <WitReadReg+0x1e6>
            if(p_WitCanWriteFunc == NULL)return WIT_HAL_EMPTY;
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc8 <WitReadReg+0x1fc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <WitReadReg+0x112>
 8001ed8:	f06f 0304 	mvn.w	r3, #4
 8001edc:	e069      	b.n	8001fb2 <WitReadReg+0x1e6>
            ucBuff[0] = 0xFF;
 8001ede:	23ff      	movs	r3, #255	@ 0xff
 8001ee0:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8001ee2:	23aa      	movs	r3, #170	@ 0xaa
 8001ee4:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8001ee6:	2327      	movs	r3, #39	@ 0x27
 8001ee8:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	743b      	strb	r3, [r7, #16]
            p_WitCanWriteFunc(s_ucAddr, ucBuff, 5);
 8001ef8:	4b33      	ldr	r3, [pc, #204]	@ (8001fc8 <WitReadReg+0x1fc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a31      	ldr	r2, [pc, #196]	@ (8001fc4 <WitReadReg+0x1f8>)
 8001efe:	7810      	ldrb	r0, [r2, #0]
 8001f00:	f107 010c 	add.w	r1, r7, #12
 8001f04:	2205      	movs	r2, #5
 8001f06:	4798      	blx	r3
            break;
 8001f08:	e04f      	b.n	8001faa <WitReadReg+0x1de>
        case WIT_PROTOCOL_I2C:
            if(p_WitI2cReadFunc == NULL)return WIT_HAL_EMPTY;
 8001f0a:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <WitReadReg+0x200>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <WitReadReg+0x14c>
 8001f12:	f06f 0304 	mvn.w	r3, #4
 8001f16:	e04c      	b.n	8001fb2 <WitReadReg+0x1e6>
            usTemp = uiReadNum << 1;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	82bb      	strh	r3, [r7, #20]
            if(WIT_DATA_BUFF_SIZE < usTemp)return WIT_HAL_NOMEM;
 8001f20:	8abb      	ldrh	r3, [r7, #20]
 8001f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f26:	d902      	bls.n	8001f2e <WitReadReg+0x162>
 8001f28:	f06f 0303 	mvn.w	r3, #3
 8001f2c:	e041      	b.n	8001fb2 <WitReadReg+0x1e6>
            if(p_WitI2cReadFunc(s_ucAddr << 1, uiReg, s_ucWitDataBuff, usTemp) == 1)
 8001f2e:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <WitReadReg+0x200>)
 8001f30:	681c      	ldr	r4, [r3, #0]
 8001f32:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <WitReadReg+0x1f8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	b2d8      	uxtb	r0, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	b2d9      	uxtb	r1, r3
 8001f3e:	8abb      	ldrh	r3, [r7, #20]
 8001f40:	4a23      	ldr	r2, [pc, #140]	@ (8001fd0 <WitReadReg+0x204>)
 8001f42:	47a0      	blx	r4
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d12e      	bne.n	8001fa8 <WitReadReg+0x1dc>
            {
                if(p_WitRegUpdateCbFunc == NULL)return WIT_HAL_EMPTY;
 8001f4a:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <WitReadReg+0x208>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <WitReadReg+0x18c>
 8001f52:	f06f 0304 	mvn.w	r3, #4
 8001f56:	e02c      	b.n	8001fb2 <WitReadReg+0x1e6>
                for(i = 0; i < uiReadNum; i++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	82fb      	strh	r3, [r7, #22]
 8001f5c:	e017      	b.n	8001f8e <WitReadReg+0x1c2>
                {
                    sReg[i+uiReg] = ((uint16_t)s_ucWitDataBuff[(i<<1)+1] << 8) | s_ucWitDataBuff[i<<1];
 8001f5e:	8afb      	ldrh	r3, [r7, #22]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd0 <WitReadReg+0x204>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b219      	sxth	r1, r3
 8001f6e:	8afb      	ldrh	r3, [r7, #22]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <WitReadReg+0x204>)
 8001f74:	5cd3      	ldrb	r3, [r2, r3]
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	8af8      	ldrh	r0, [r7, #22]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4403      	add	r3, r0
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	b211      	sxth	r1, r2
 8001f82:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <WitReadReg+0x20c>)
 8001f84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < uiReadNum; i++)
 8001f88:	8afb      	ldrh	r3, [r7, #22]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	82fb      	strh	r3, [r7, #22]
 8001f8e:	8afb      	ldrh	r3, [r7, #22]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d8e3      	bhi.n	8001f5e <WitReadReg+0x192>
                }
                p_WitRegUpdateCbFunc(uiReg, uiReadNum);
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <WitReadReg+0x208>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	4798      	blx	r3
            }
			
            break;
 8001fa0:	e002      	b.n	8001fa8 <WitReadReg+0x1dc>
		default: 
            return WIT_HAL_INVAL;
 8001fa2:	f06f 0305 	mvn.w	r3, #5
 8001fa6:	e004      	b.n	8001fb2 <WitReadReg+0x1e6>
            break;
 8001fa8:	bf00      	nop
    }
    s_uiReadRegIndex = uiReg;
 8001faa:	4a0c      	ldr	r2, [pc, #48]	@ (8001fdc <WitReadReg+0x210>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6013      	str	r3, [r2, #0]

    return WIT_HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	24000544 	.word	0x24000544
 8001fc0:	24000430 	.word	0x24000430
 8001fc4:	2400000c 	.word	0x2400000c
 8001fc8:	24000438 	.word	0x24000438
 8001fcc:	24000434 	.word	0x24000434
 8001fd0:	24000440 	.word	0x24000440
 8001fd4:	2400043c 	.word	0x2400043c
 8001fd8:	2400054c 	.word	0x2400054c
 8001fdc:	24000548 	.word	0x24000548

08001fe0 <WitInit>:
int32_t WitInit(uint32_t uiProtocol, uint8_t ucAddr)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
	if(uiProtocol > WIT_PROTOCOL_I2C)return WIT_HAL_INVAL;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d902      	bls.n	8001ff8 <WitInit+0x18>
 8001ff2:	f06f 0305 	mvn.w	r3, #5
 8001ff6:	e009      	b.n	800200c <WitInit+0x2c>
    s_uiProtoclo = uiProtocol;
 8001ff8:	4a07      	ldr	r2, [pc, #28]	@ (8002018 <WitInit+0x38>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6013      	str	r3, [r2, #0]
    s_ucAddr = ucAddr;
 8001ffe:	4a07      	ldr	r2, [pc, #28]	@ (800201c <WitInit+0x3c>)
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	7013      	strb	r3, [r2, #0]
    s_uiWitDataCnt = 0;
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <WitInit+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    return WIT_HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	24000544 	.word	0x24000544
 800201c:	2400000c 	.word	0x2400000c
 8002020:	24000540 	.word	0x24000540

08002024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002024:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002060 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002028:	f7ff fc5c 	bl	80018e4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800202c:	f7ff fbca 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002030:	480c      	ldr	r0, [pc, #48]	@ (8002064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002032:	490d      	ldr	r1, [pc, #52]	@ (8002068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002034:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002038:	e002      	b.n	8002040 <LoopCopyDataInit>

0800203a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800203c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203e:	3304      	adds	r3, #4

08002040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002044:	d3f9      	bcc.n	800203a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002048:	4c0a      	ldr	r4, [pc, #40]	@ (8002074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800204c:	e001      	b.n	8002052 <LoopFillZerobss>

0800204e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002050:	3204      	adds	r2, #4

08002052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002054:	d3fb      	bcc.n	800204e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002056:	f008 ff53 	bl	800af00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7fe fc11 	bl	8000880 <main>
  bx  lr
 800205e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002060:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002064:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002068:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800206c:	0800d234 	.word	0x0800d234
  ldr r2, =_sbss
 8002070:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002074:	240007bc 	.word	0x240007bc

08002078 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC3_IRQHandler>
	...

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002082:	2003      	movs	r0, #3
 8002084:	f000 f980 	bl	8002388 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002088:	f002 fbe2 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_Init+0x68>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	4913      	ldr	r1, [pc, #76]	@ (80020e8 <HAL_Init+0x6c>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020a6:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <HAL_Init+0x68>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_Init+0x6c>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
 80020bc:	4a0b      	ldr	r2, [pc, #44]	@ (80020ec <HAL_Init+0x70>)
 80020be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020c0:	4a0b      	ldr	r2, [pc, #44]	@ (80020f0 <HAL_Init+0x74>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020c6:	200f      	movs	r0, #15
 80020c8:	f000 f814 	bl	80020f4 <HAL_InitTick>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e002      	b.n	80020dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020d6:	f7ff f8ad 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	58024400 	.word	0x58024400
 80020e8:	0800cc78 	.word	0x0800cc78
 80020ec:	24000008 	.word	0x24000008
 80020f0:	24000004 	.word	0x24000004

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020fc:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_InitTick+0x60>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e021      	b.n	800214c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <HAL_InitTick+0x64>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_InitTick+0x60>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002116:	fbb3 f3f1 	udiv	r3, r3, r1
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f965 	bl	80023ee <HAL_SYSTICK_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00e      	b.n	800214c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d80a      	bhi.n	800214a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f000 f92f 	bl	800239e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002140:	4a06      	ldr	r2, [pc, #24]	@ (800215c <HAL_InitTick+0x68>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	24000014 	.word	0x24000014
 8002158:	24000004 	.word	0x24000004
 800215c:	24000010 	.word	0x24000010

08002160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_IncTick+0x20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_IncTick+0x24>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <HAL_IncTick+0x24>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	24000014 	.word	0x24000014
 8002184:	2400066c 	.word	0x2400066c

08002188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b03      	ldr	r3, [pc, #12]	@ (800219c <HAL_GetTick+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	2400066c 	.word	0x2400066c

080021a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff ffee 	bl	8002188 <HAL_GetTick>
 80021ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d005      	beq.n	80021c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ba:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_Delay+0x44>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021c6:	bf00      	nop
 80021c8:	f7ff ffde 	bl	8002188 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d8f7      	bhi.n	80021c8 <HAL_Delay+0x28>
  {
  }
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	24000014 	.word	0x24000014

080021e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <__NVIC_SetPriorityGrouping+0x40>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002204:	4013      	ands	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	4313      	orrs	r3, r2
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <__NVIC_SetPriorityGrouping+0x40>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00
 800222c:	05fa0000 	.word	0x05fa0000

08002230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002234:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <__NVIC_GetPriorityGrouping+0x18>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0307 	and.w	r3, r3, #7
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db0b      	blt.n	8002276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4907      	ldr	r1, [pc, #28]	@ (8002284 <__NVIC_EnableIRQ+0x38>)
 8002266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2001      	movs	r0, #1
 800226e:	fa00 f202 	lsl.w	r2, r0, r2
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	@ (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	@ (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	@ 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002354:	d301      	bcc.n	800235a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002356:	2301      	movs	r3, #1
 8002358:	e00f      	b.n	800237a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235a:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <SysTick_Config+0x40>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002362:	210f      	movs	r1, #15
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	f7ff ff8e 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <SysTick_Config+0x40>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002372:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <SysTick_Config+0x40>)
 8002374:	2207      	movs	r2, #7
 8002376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	e000e010 	.word	0xe000e010

08002388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff29 	bl	80021e8 <__NVIC_SetPriorityGrouping>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff40 	bl	8002230 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff90 	bl	80022dc <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5f 	bl	8002288 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff33 	bl	800224c <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa4 	bl	8002344 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800240c:	f3bf 8f5f 	dmb	sy
}
 8002410:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002412:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <HAL_MPU_Disable+0x28>)
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	4a06      	ldr	r2, [pc, #24]	@ (8002430 <HAL_MPU_Disable+0x28>)
 8002418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800241e:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <HAL_MPU_Disable+0x2c>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00
 8002434:	e000ed90 	.word	0xe000ed90

08002438 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002440:	4a0b      	ldr	r2, [pc, #44]	@ (8002470 <HAL_MPU_Enable+0x38>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800244a:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_MPU_Enable+0x3c>)
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	4a09      	ldr	r2, [pc, #36]	@ (8002474 <HAL_MPU_Enable+0x3c>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002456:	f3bf 8f4f 	dsb	sy
}
 800245a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800245c:	f3bf 8f6f 	isb	sy
}
 8002460:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed90 	.word	0xe000ed90
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	785a      	ldrb	r2, [r3, #1]
 8002484:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <HAL_MPU_ConfigRegion+0x7c>)
 8002486:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002488:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <HAL_MPU_ConfigRegion+0x7c>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	4a19      	ldr	r2, [pc, #100]	@ (80024f4 <HAL_MPU_ConfigRegion+0x7c>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002494:	4a17      	ldr	r2, [pc, #92]	@ (80024f4 <HAL_MPU_ConfigRegion+0x7c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7b1b      	ldrb	r3, [r3, #12]
 80024a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7adb      	ldrb	r3, [r3, #11]
 80024a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7a9b      	ldrb	r3, [r3, #10]
 80024ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7b5b      	ldrb	r3, [r3, #13]
 80024b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7b9b      	ldrb	r3, [r3, #14]
 80024be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7bdb      	ldrb	r3, [r3, #15]
 80024c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7a5b      	ldrb	r3, [r3, #9]
 80024ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7a1b      	ldrb	r3, [r3, #8]
 80024d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024e0:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024e4:	6113      	str	r3, [r2, #16]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000ed90 	.word	0xe000ed90

080024f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff fe42 	bl	8002188 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e2dc      	b.n	8002aca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d008      	beq.n	800252e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e2cd      	b.n	8002aca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a76      	ldr	r2, [pc, #472]	@ (800270c <HAL_DMA_Abort+0x214>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d04a      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a74      	ldr	r2, [pc, #464]	@ (8002710 <HAL_DMA_Abort+0x218>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d045      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a73      	ldr	r2, [pc, #460]	@ (8002714 <HAL_DMA_Abort+0x21c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d040      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a71      	ldr	r2, [pc, #452]	@ (8002718 <HAL_DMA_Abort+0x220>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d03b      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a70      	ldr	r2, [pc, #448]	@ (800271c <HAL_DMA_Abort+0x224>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d036      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6e      	ldr	r2, [pc, #440]	@ (8002720 <HAL_DMA_Abort+0x228>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d031      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6d      	ldr	r2, [pc, #436]	@ (8002724 <HAL_DMA_Abort+0x22c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d02c      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6b      	ldr	r2, [pc, #428]	@ (8002728 <HAL_DMA_Abort+0x230>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d027      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6a      	ldr	r2, [pc, #424]	@ (800272c <HAL_DMA_Abort+0x234>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d022      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a68      	ldr	r2, [pc, #416]	@ (8002730 <HAL_DMA_Abort+0x238>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01d      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a67      	ldr	r2, [pc, #412]	@ (8002734 <HAL_DMA_Abort+0x23c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d018      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a65      	ldr	r2, [pc, #404]	@ (8002738 <HAL_DMA_Abort+0x240>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a64      	ldr	r2, [pc, #400]	@ (800273c <HAL_DMA_Abort+0x244>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00e      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a62      	ldr	r2, [pc, #392]	@ (8002740 <HAL_DMA_Abort+0x248>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d009      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a61      	ldr	r2, [pc, #388]	@ (8002744 <HAL_DMA_Abort+0x24c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_DMA_Abort+0xd6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a5f      	ldr	r2, [pc, #380]	@ (8002748 <HAL_DMA_Abort+0x250>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Abort+0xda>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_DMA_Abort+0xdc>
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 021e 	bic.w	r2, r2, #30
 80025e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e00a      	b.n	8002616 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 020e 	bic.w	r2, r2, #14
 800260e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a3c      	ldr	r2, [pc, #240]	@ (800270c <HAL_DMA_Abort+0x214>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d072      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3a      	ldr	r2, [pc, #232]	@ (8002710 <HAL_DMA_Abort+0x218>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d06d      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a39      	ldr	r2, [pc, #228]	@ (8002714 <HAL_DMA_Abort+0x21c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d068      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a37      	ldr	r2, [pc, #220]	@ (8002718 <HAL_DMA_Abort+0x220>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d063      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a36      	ldr	r2, [pc, #216]	@ (800271c <HAL_DMA_Abort+0x224>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d05e      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a34      	ldr	r2, [pc, #208]	@ (8002720 <HAL_DMA_Abort+0x228>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d059      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a33      	ldr	r2, [pc, #204]	@ (8002724 <HAL_DMA_Abort+0x22c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d054      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a31      	ldr	r2, [pc, #196]	@ (8002728 <HAL_DMA_Abort+0x230>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d04f      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a30      	ldr	r2, [pc, #192]	@ (800272c <HAL_DMA_Abort+0x234>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04a      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a2e      	ldr	r2, [pc, #184]	@ (8002730 <HAL_DMA_Abort+0x238>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d045      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2d      	ldr	r2, [pc, #180]	@ (8002734 <HAL_DMA_Abort+0x23c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d040      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2b      	ldr	r2, [pc, #172]	@ (8002738 <HAL_DMA_Abort+0x240>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d03b      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2a      	ldr	r2, [pc, #168]	@ (800273c <HAL_DMA_Abort+0x244>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d036      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a28      	ldr	r2, [pc, #160]	@ (8002740 <HAL_DMA_Abort+0x248>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d031      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a27      	ldr	r2, [pc, #156]	@ (8002744 <HAL_DMA_Abort+0x24c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d02c      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a25      	ldr	r2, [pc, #148]	@ (8002748 <HAL_DMA_Abort+0x250>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d027      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a24      	ldr	r2, [pc, #144]	@ (800274c <HAL_DMA_Abort+0x254>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a22      	ldr	r2, [pc, #136]	@ (8002750 <HAL_DMA_Abort+0x258>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01d      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a21      	ldr	r2, [pc, #132]	@ (8002754 <HAL_DMA_Abort+0x25c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d018      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002758 <HAL_DMA_Abort+0x260>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1e      	ldr	r2, [pc, #120]	@ (800275c <HAL_DMA_Abort+0x264>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00e      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <HAL_DMA_Abort+0x268>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002764 <HAL_DMA_Abort+0x26c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_DMA_Abort+0x20e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a19      	ldr	r2, [pc, #100]	@ (8002768 <HAL_DMA_Abort+0x270>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d132      	bne.n	800276c <HAL_DMA_Abort+0x274>
 8002706:	2301      	movs	r3, #1
 8002708:	e031      	b.n	800276e <HAL_DMA_Abort+0x276>
 800270a:	bf00      	nop
 800270c:	40020010 	.word	0x40020010
 8002710:	40020028 	.word	0x40020028
 8002714:	40020040 	.word	0x40020040
 8002718:	40020058 	.word	0x40020058
 800271c:	40020070 	.word	0x40020070
 8002720:	40020088 	.word	0x40020088
 8002724:	400200a0 	.word	0x400200a0
 8002728:	400200b8 	.word	0x400200b8
 800272c:	40020410 	.word	0x40020410
 8002730:	40020428 	.word	0x40020428
 8002734:	40020440 	.word	0x40020440
 8002738:	40020458 	.word	0x40020458
 800273c:	40020470 	.word	0x40020470
 8002740:	40020488 	.word	0x40020488
 8002744:	400204a0 	.word	0x400204a0
 8002748:	400204b8 	.word	0x400204b8
 800274c:	58025408 	.word	0x58025408
 8002750:	5802541c 	.word	0x5802541c
 8002754:	58025430 	.word	0x58025430
 8002758:	58025444 	.word	0x58025444
 800275c:	58025458 	.word	0x58025458
 8002760:	5802546c 	.word	0x5802546c
 8002764:	58025480 	.word	0x58025480
 8002768:	58025494 	.word	0x58025494
 800276c:	2300      	movs	r3, #0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002780:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6d      	ldr	r2, [pc, #436]	@ (800293c <HAL_DMA_Abort+0x444>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d04a      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a6b      	ldr	r2, [pc, #428]	@ (8002940 <HAL_DMA_Abort+0x448>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d045      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6a      	ldr	r2, [pc, #424]	@ (8002944 <HAL_DMA_Abort+0x44c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d040      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a68      	ldr	r2, [pc, #416]	@ (8002948 <HAL_DMA_Abort+0x450>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d03b      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a67      	ldr	r2, [pc, #412]	@ (800294c <HAL_DMA_Abort+0x454>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d036      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a65      	ldr	r2, [pc, #404]	@ (8002950 <HAL_DMA_Abort+0x458>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d031      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a64      	ldr	r2, [pc, #400]	@ (8002954 <HAL_DMA_Abort+0x45c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d02c      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a62      	ldr	r2, [pc, #392]	@ (8002958 <HAL_DMA_Abort+0x460>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d027      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a61      	ldr	r2, [pc, #388]	@ (800295c <HAL_DMA_Abort+0x464>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5f      	ldr	r2, [pc, #380]	@ (8002960 <HAL_DMA_Abort+0x468>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01d      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002964 <HAL_DMA_Abort+0x46c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d018      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5c      	ldr	r2, [pc, #368]	@ (8002968 <HAL_DMA_Abort+0x470>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5b      	ldr	r2, [pc, #364]	@ (800296c <HAL_DMA_Abort+0x474>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00e      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a59      	ldr	r2, [pc, #356]	@ (8002970 <HAL_DMA_Abort+0x478>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a58      	ldr	r2, [pc, #352]	@ (8002974 <HAL_DMA_Abort+0x47c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_DMA_Abort+0x32a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a56      	ldr	r2, [pc, #344]	@ (8002978 <HAL_DMA_Abort+0x480>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d108      	bne.n	8002834 <HAL_DMA_Abort+0x33c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e007      	b.n	8002844 <HAL_DMA_Abort+0x34c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002844:	e013      	b.n	800286e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002846:	f7ff fc9f 	bl	8002188 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b05      	cmp	r3, #5
 8002852:	d90c      	bls.n	800286e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2203      	movs	r2, #3
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e12d      	b.n	8002aca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e5      	bne.n	8002846 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2f      	ldr	r2, [pc, #188]	@ (800293c <HAL_DMA_Abort+0x444>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d04a      	beq.n	800291a <HAL_DMA_Abort+0x422>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2d      	ldr	r2, [pc, #180]	@ (8002940 <HAL_DMA_Abort+0x448>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d045      	beq.n	800291a <HAL_DMA_Abort+0x422>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2c      	ldr	r2, [pc, #176]	@ (8002944 <HAL_DMA_Abort+0x44c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d040      	beq.n	800291a <HAL_DMA_Abort+0x422>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2a      	ldr	r2, [pc, #168]	@ (8002948 <HAL_DMA_Abort+0x450>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d03b      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a29      	ldr	r2, [pc, #164]	@ (800294c <HAL_DMA_Abort+0x454>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d036      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a27      	ldr	r2, [pc, #156]	@ (8002950 <HAL_DMA_Abort+0x458>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d031      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a26      	ldr	r2, [pc, #152]	@ (8002954 <HAL_DMA_Abort+0x45c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d02c      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a24      	ldr	r2, [pc, #144]	@ (8002958 <HAL_DMA_Abort+0x460>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d027      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a23      	ldr	r2, [pc, #140]	@ (800295c <HAL_DMA_Abort+0x464>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d022      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a21      	ldr	r2, [pc, #132]	@ (8002960 <HAL_DMA_Abort+0x468>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01d      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a20      	ldr	r2, [pc, #128]	@ (8002964 <HAL_DMA_Abort+0x46c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d018      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002968 <HAL_DMA_Abort+0x470>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <HAL_DMA_Abort+0x474>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00e      	beq.n	800291a <HAL_DMA_Abort+0x422>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1b      	ldr	r2, [pc, #108]	@ (8002970 <HAL_DMA_Abort+0x478>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_DMA_Abort+0x422>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1a      	ldr	r2, [pc, #104]	@ (8002974 <HAL_DMA_Abort+0x47c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_DMA_Abort+0x422>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_DMA_Abort+0x480>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_DMA_Abort+0x426>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_DMA_Abort+0x428>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d02b      	beq.n	800297c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	223f      	movs	r2, #63	@ 0x3f
 8002934:	409a      	lsls	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	e02a      	b.n	8002992 <HAL_DMA_Abort+0x49a>
 800293c:	40020010 	.word	0x40020010
 8002940:	40020028 	.word	0x40020028
 8002944:	40020040 	.word	0x40020040
 8002948:	40020058 	.word	0x40020058
 800294c:	40020070 	.word	0x40020070
 8002950:	40020088 	.word	0x40020088
 8002954:	400200a0 	.word	0x400200a0
 8002958:	400200b8 	.word	0x400200b8
 800295c:	40020410 	.word	0x40020410
 8002960:	40020428 	.word	0x40020428
 8002964:	40020440 	.word	0x40020440
 8002968:	40020458 	.word	0x40020458
 800296c:	40020470 	.word	0x40020470
 8002970:	40020488 	.word	0x40020488
 8002974:	400204a0 	.word	0x400204a0
 8002978:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2201      	movs	r2, #1
 800298c:	409a      	lsls	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a4f      	ldr	r2, [pc, #316]	@ (8002ad4 <HAL_DMA_Abort+0x5dc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d072      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad8 <HAL_DMA_Abort+0x5e0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d06d      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a4c      	ldr	r2, [pc, #304]	@ (8002adc <HAL_DMA_Abort+0x5e4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d068      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae0 <HAL_DMA_Abort+0x5e8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d063      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a49      	ldr	r2, [pc, #292]	@ (8002ae4 <HAL_DMA_Abort+0x5ec>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d05e      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a47      	ldr	r2, [pc, #284]	@ (8002ae8 <HAL_DMA_Abort+0x5f0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d059      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a46      	ldr	r2, [pc, #280]	@ (8002aec <HAL_DMA_Abort+0x5f4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d054      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a44      	ldr	r2, [pc, #272]	@ (8002af0 <HAL_DMA_Abort+0x5f8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d04f      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a43      	ldr	r2, [pc, #268]	@ (8002af4 <HAL_DMA_Abort+0x5fc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d04a      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a41      	ldr	r2, [pc, #260]	@ (8002af8 <HAL_DMA_Abort+0x600>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d045      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a40      	ldr	r2, [pc, #256]	@ (8002afc <HAL_DMA_Abort+0x604>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d040      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3e      	ldr	r2, [pc, #248]	@ (8002b00 <HAL_DMA_Abort+0x608>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d03b      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b04 <HAL_DMA_Abort+0x60c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d036      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3b      	ldr	r2, [pc, #236]	@ (8002b08 <HAL_DMA_Abort+0x610>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d031      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a3a      	ldr	r2, [pc, #232]	@ (8002b0c <HAL_DMA_Abort+0x614>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d02c      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a38      	ldr	r2, [pc, #224]	@ (8002b10 <HAL_DMA_Abort+0x618>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d027      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a37      	ldr	r2, [pc, #220]	@ (8002b14 <HAL_DMA_Abort+0x61c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d022      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a35      	ldr	r2, [pc, #212]	@ (8002b18 <HAL_DMA_Abort+0x620>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a34      	ldr	r2, [pc, #208]	@ (8002b1c <HAL_DMA_Abort+0x624>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d018      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a32      	ldr	r2, [pc, #200]	@ (8002b20 <HAL_DMA_Abort+0x628>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a31      	ldr	r2, [pc, #196]	@ (8002b24 <HAL_DMA_Abort+0x62c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00e      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2f      	ldr	r2, [pc, #188]	@ (8002b28 <HAL_DMA_Abort+0x630>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2e      	ldr	r2, [pc, #184]	@ (8002b2c <HAL_DMA_Abort+0x634>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_DMA_Abort+0x58a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b30 <HAL_DMA_Abort+0x638>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_DMA_Abort+0x58e>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_Abort+0x590>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a94:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ab6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40020010 	.word	0x40020010
 8002ad8:	40020028 	.word	0x40020028
 8002adc:	40020040 	.word	0x40020040
 8002ae0:	40020058 	.word	0x40020058
 8002ae4:	40020070 	.word	0x40020070
 8002ae8:	40020088 	.word	0x40020088
 8002aec:	400200a0 	.word	0x400200a0
 8002af0:	400200b8 	.word	0x400200b8
 8002af4:	40020410 	.word	0x40020410
 8002af8:	40020428 	.word	0x40020428
 8002afc:	40020440 	.word	0x40020440
 8002b00:	40020458 	.word	0x40020458
 8002b04:	40020470 	.word	0x40020470
 8002b08:	40020488 	.word	0x40020488
 8002b0c:	400204a0 	.word	0x400204a0
 8002b10:	400204b8 	.word	0x400204b8
 8002b14:	58025408 	.word	0x58025408
 8002b18:	5802541c 	.word	0x5802541c
 8002b1c:	58025430 	.word	0x58025430
 8002b20:	58025444 	.word	0x58025444
 8002b24:	58025458 	.word	0x58025458
 8002b28:	5802546c 	.word	0x5802546c
 8002b2c:	58025480 	.word	0x58025480
 8002b30:	58025494 	.word	0x58025494

08002b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e237      	b.n	8002fb6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d004      	beq.n	8002b5c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2280      	movs	r2, #128	@ 0x80
 8002b56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e22c      	b.n	8002fb6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5c      	ldr	r2, [pc, #368]	@ (8002cd4 <HAL_DMA_Abort_IT+0x1a0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d04a      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cd8 <HAL_DMA_Abort_IT+0x1a4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d045      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a59      	ldr	r2, [pc, #356]	@ (8002cdc <HAL_DMA_Abort_IT+0x1a8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d040      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a58      	ldr	r2, [pc, #352]	@ (8002ce0 <HAL_DMA_Abort_IT+0x1ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d03b      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a56      	ldr	r2, [pc, #344]	@ (8002ce4 <HAL_DMA_Abort_IT+0x1b0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d036      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a55      	ldr	r2, [pc, #340]	@ (8002ce8 <HAL_DMA_Abort_IT+0x1b4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d031      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a53      	ldr	r2, [pc, #332]	@ (8002cec <HAL_DMA_Abort_IT+0x1b8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02c      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a52      	ldr	r2, [pc, #328]	@ (8002cf0 <HAL_DMA_Abort_IT+0x1bc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d027      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a50      	ldr	r2, [pc, #320]	@ (8002cf4 <HAL_DMA_Abort_IT+0x1c0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d022      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a4f      	ldr	r2, [pc, #316]	@ (8002cf8 <HAL_DMA_Abort_IT+0x1c4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d01d      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	@ (8002cfc <HAL_DMA_Abort_IT+0x1c8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4c      	ldr	r2, [pc, #304]	@ (8002d00 <HAL_DMA_Abort_IT+0x1cc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002d04 <HAL_DMA_Abort_IT+0x1d0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a49      	ldr	r2, [pc, #292]	@ (8002d08 <HAL_DMA_Abort_IT+0x1d4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a47      	ldr	r2, [pc, #284]	@ (8002d0c <HAL_DMA_Abort_IT+0x1d8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_Abort_IT+0xc8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a46      	ldr	r2, [pc, #280]	@ (8002d10 <HAL_DMA_Abort_IT+0x1dc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d101      	bne.n	8002c00 <HAL_DMA_Abort_IT+0xcc>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_DMA_Abort_IT+0xce>
 8002c00:	2300      	movs	r3, #0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8086 	beq.w	8002d14 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd4 <HAL_DMA_Abort_IT+0x1a0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d04a      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002cd8 <HAL_DMA_Abort_IT+0x1a4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d045      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2c      	ldr	r2, [pc, #176]	@ (8002cdc <HAL_DMA_Abort_IT+0x1a8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d040      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce0 <HAL_DMA_Abort_IT+0x1ac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d03b      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ce4 <HAL_DMA_Abort_IT+0x1b0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d036      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a28      	ldr	r2, [pc, #160]	@ (8002ce8 <HAL_DMA_Abort_IT+0x1b4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d031      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a26      	ldr	r2, [pc, #152]	@ (8002cec <HAL_DMA_Abort_IT+0x1b8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02c      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a25      	ldr	r2, [pc, #148]	@ (8002cf0 <HAL_DMA_Abort_IT+0x1bc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d027      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a23      	ldr	r2, [pc, #140]	@ (8002cf4 <HAL_DMA_Abort_IT+0x1c0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d022      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a22      	ldr	r2, [pc, #136]	@ (8002cf8 <HAL_DMA_Abort_IT+0x1c4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d01d      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a20      	ldr	r2, [pc, #128]	@ (8002cfc <HAL_DMA_Abort_IT+0x1c8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d018      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1f      	ldr	r2, [pc, #124]	@ (8002d00 <HAL_DMA_Abort_IT+0x1cc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <HAL_DMA_Abort_IT+0x1d0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00e      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1c      	ldr	r2, [pc, #112]	@ (8002d08 <HAL_DMA_Abort_IT+0x1d4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d009      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d0c <HAL_DMA_Abort_IT+0x1d8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x17c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <HAL_DMA_Abort_IT+0x1dc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d108      	bne.n	8002cc2 <HAL_DMA_Abort_IT+0x18e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e178      	b.n	8002fb4 <HAL_DMA_Abort_IT+0x480>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e16f      	b.n	8002fb4 <HAL_DMA_Abort_IT+0x480>
 8002cd4:	40020010 	.word	0x40020010
 8002cd8:	40020028 	.word	0x40020028
 8002cdc:	40020040 	.word	0x40020040
 8002ce0:	40020058 	.word	0x40020058
 8002ce4:	40020070 	.word	0x40020070
 8002ce8:	40020088 	.word	0x40020088
 8002cec:	400200a0 	.word	0x400200a0
 8002cf0:	400200b8 	.word	0x400200b8
 8002cf4:	40020410 	.word	0x40020410
 8002cf8:	40020428 	.word	0x40020428
 8002cfc:	40020440 	.word	0x40020440
 8002d00:	40020458 	.word	0x40020458
 8002d04:	40020470 	.word	0x40020470
 8002d08:	40020488 	.word	0x40020488
 8002d0c:	400204a0 	.word	0x400204a0
 8002d10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 020e 	bic.w	r2, r2, #14
 8002d22:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6c      	ldr	r2, [pc, #432]	@ (8002edc <HAL_DMA_Abort_IT+0x3a8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d04a      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6b      	ldr	r2, [pc, #428]	@ (8002ee0 <HAL_DMA_Abort_IT+0x3ac>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d045      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a69      	ldr	r2, [pc, #420]	@ (8002ee4 <HAL_DMA_Abort_IT+0x3b0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d040      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a68      	ldr	r2, [pc, #416]	@ (8002ee8 <HAL_DMA_Abort_IT+0x3b4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d03b      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a66      	ldr	r2, [pc, #408]	@ (8002eec <HAL_DMA_Abort_IT+0x3b8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d036      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a65      	ldr	r2, [pc, #404]	@ (8002ef0 <HAL_DMA_Abort_IT+0x3bc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d031      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a63      	ldr	r2, [pc, #396]	@ (8002ef4 <HAL_DMA_Abort_IT+0x3c0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02c      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a62      	ldr	r2, [pc, #392]	@ (8002ef8 <HAL_DMA_Abort_IT+0x3c4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d027      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a60      	ldr	r2, [pc, #384]	@ (8002efc <HAL_DMA_Abort_IT+0x3c8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d022      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5f      	ldr	r2, [pc, #380]	@ (8002f00 <HAL_DMA_Abort_IT+0x3cc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01d      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f04 <HAL_DMA_Abort_IT+0x3d0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5c      	ldr	r2, [pc, #368]	@ (8002f08 <HAL_DMA_Abort_IT+0x3d4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f0c <HAL_DMA_Abort_IT+0x3d8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00e      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a59      	ldr	r2, [pc, #356]	@ (8002f10 <HAL_DMA_Abort_IT+0x3dc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a57      	ldr	r2, [pc, #348]	@ (8002f14 <HAL_DMA_Abort_IT+0x3e0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x290>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a56      	ldr	r2, [pc, #344]	@ (8002f18 <HAL_DMA_Abort_IT+0x3e4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <HAL_DMA_Abort_IT+0x2a2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <HAL_DMA_Abort_IT+0x2b2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3c      	ldr	r2, [pc, #240]	@ (8002edc <HAL_DMA_Abort_IT+0x3a8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d072      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee0 <HAL_DMA_Abort_IT+0x3ac>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d06d      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a39      	ldr	r2, [pc, #228]	@ (8002ee4 <HAL_DMA_Abort_IT+0x3b0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d068      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a37      	ldr	r2, [pc, #220]	@ (8002ee8 <HAL_DMA_Abort_IT+0x3b4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d063      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a36      	ldr	r2, [pc, #216]	@ (8002eec <HAL_DMA_Abort_IT+0x3b8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d05e      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a34      	ldr	r2, [pc, #208]	@ (8002ef0 <HAL_DMA_Abort_IT+0x3bc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d059      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a33      	ldr	r2, [pc, #204]	@ (8002ef4 <HAL_DMA_Abort_IT+0x3c0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d054      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a31      	ldr	r2, [pc, #196]	@ (8002ef8 <HAL_DMA_Abort_IT+0x3c4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d04f      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a30      	ldr	r2, [pc, #192]	@ (8002efc <HAL_DMA_Abort_IT+0x3c8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04a      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <HAL_DMA_Abort_IT+0x3cc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d045      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8002f04 <HAL_DMA_Abort_IT+0x3d0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d040      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2b      	ldr	r2, [pc, #172]	@ (8002f08 <HAL_DMA_Abort_IT+0x3d4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03b      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2a      	ldr	r2, [pc, #168]	@ (8002f0c <HAL_DMA_Abort_IT+0x3d8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d036      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a28      	ldr	r2, [pc, #160]	@ (8002f10 <HAL_DMA_Abort_IT+0x3dc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d031      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a27      	ldr	r2, [pc, #156]	@ (8002f14 <HAL_DMA_Abort_IT+0x3e0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a25      	ldr	r2, [pc, #148]	@ (8002f18 <HAL_DMA_Abort_IT+0x3e4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d027      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a24      	ldr	r2, [pc, #144]	@ (8002f1c <HAL_DMA_Abort_IT+0x3e8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d022      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a22      	ldr	r2, [pc, #136]	@ (8002f20 <HAL_DMA_Abort_IT+0x3ec>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a21      	ldr	r2, [pc, #132]	@ (8002f24 <HAL_DMA_Abort_IT+0x3f0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f28 <HAL_DMA_Abort_IT+0x3f4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f2c <HAL_DMA_Abort_IT+0x3f8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f30 <HAL_DMA_Abort_IT+0x3fc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f34 <HAL_DMA_Abort_IT+0x400>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x3a2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <HAL_DMA_Abort_IT+0x404>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d132      	bne.n	8002f3c <HAL_DMA_Abort_IT+0x408>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e031      	b.n	8002f3e <HAL_DMA_Abort_IT+0x40a>
 8002eda:	bf00      	nop
 8002edc:	40020010 	.word	0x40020010
 8002ee0:	40020028 	.word	0x40020028
 8002ee4:	40020040 	.word	0x40020040
 8002ee8:	40020058 	.word	0x40020058
 8002eec:	40020070 	.word	0x40020070
 8002ef0:	40020088 	.word	0x40020088
 8002ef4:	400200a0 	.word	0x400200a0
 8002ef8:	400200b8 	.word	0x400200b8
 8002efc:	40020410 	.word	0x40020410
 8002f00:	40020428 	.word	0x40020428
 8002f04:	40020440 	.word	0x40020440
 8002f08:	40020458 	.word	0x40020458
 8002f0c:	40020470 	.word	0x40020470
 8002f10:	40020488 	.word	0x40020488
 8002f14:	400204a0 	.word	0x400204a0
 8002f18:	400204b8 	.word	0x400204b8
 8002f1c:	58025408 	.word	0x58025408
 8002f20:	5802541c 	.word	0x5802541c
 8002f24:	58025430 	.word	0x58025430
 8002f28:	58025444 	.word	0x58025444
 8002f2c:	58025458 	.word	0x58025458
 8002f30:	5802546c 	.word	0x5802546c
 8002f34:	58025480 	.word	0x58025480
 8002f38:	58025494 	.word	0x58025494
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d028      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	2201      	movs	r2, #1
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00c      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop

08002fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	@ 0x24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fce:	4b86      	ldr	r3, [pc, #536]	@ (80031e8 <HAL_GPIO_Init+0x228>)
 8002fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fd2:	e18c      	b.n	80032ee <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	2101      	movs	r1, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 817e 	beq.w	80032e8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d005      	beq.n	8003004 <HAL_GPIO_Init+0x44>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d130      	bne.n	8003066 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800303a:	2201      	movs	r2, #1
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 0201 	and.w	r2, r3, #1
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b03      	cmp	r3, #3
 8003070:	d017      	beq.n	80030a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	2203      	movs	r2, #3
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d123      	bne.n	80030f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	08da      	lsrs	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3208      	adds	r2, #8
 80030b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	08da      	lsrs	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3208      	adds	r2, #8
 80030f0:	69b9      	ldr	r1, [r7, #24]
 80030f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2203      	movs	r2, #3
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0203 	and.w	r2, r3, #3
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80d8 	beq.w	80032e8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003138:	4b2c      	ldr	r3, [pc, #176]	@ (80031ec <HAL_GPIO_Init+0x22c>)
 800313a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800313e:	4a2b      	ldr	r2, [pc, #172]	@ (80031ec <HAL_GPIO_Init+0x22c>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003148:	4b28      	ldr	r3, [pc, #160]	@ (80031ec <HAL_GPIO_Init+0x22c>)
 800314a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003156:	4a26      	ldr	r2, [pc, #152]	@ (80031f0 <HAL_GPIO_Init+0x230>)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1d      	ldr	r2, [pc, #116]	@ (80031f4 <HAL_GPIO_Init+0x234>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d04a      	beq.n	8003218 <HAL_GPIO_Init+0x258>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1c      	ldr	r2, [pc, #112]	@ (80031f8 <HAL_GPIO_Init+0x238>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d02b      	beq.n	80031e2 <HAL_GPIO_Init+0x222>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1b      	ldr	r2, [pc, #108]	@ (80031fc <HAL_GPIO_Init+0x23c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d025      	beq.n	80031de <HAL_GPIO_Init+0x21e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1a      	ldr	r2, [pc, #104]	@ (8003200 <HAL_GPIO_Init+0x240>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01f      	beq.n	80031da <HAL_GPIO_Init+0x21a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_GPIO_Init+0x244>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d019      	beq.n	80031d6 <HAL_GPIO_Init+0x216>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a18      	ldr	r2, [pc, #96]	@ (8003208 <HAL_GPIO_Init+0x248>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_GPIO_Init+0x212>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a17      	ldr	r2, [pc, #92]	@ (800320c <HAL_GPIO_Init+0x24c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00d      	beq.n	80031ce <HAL_GPIO_Init+0x20e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a16      	ldr	r2, [pc, #88]	@ (8003210 <HAL_GPIO_Init+0x250>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d007      	beq.n	80031ca <HAL_GPIO_Init+0x20a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <HAL_GPIO_Init+0x254>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <HAL_GPIO_Init+0x206>
 80031c2:	2309      	movs	r3, #9
 80031c4:	e029      	b.n	800321a <HAL_GPIO_Init+0x25a>
 80031c6:	230a      	movs	r3, #10
 80031c8:	e027      	b.n	800321a <HAL_GPIO_Init+0x25a>
 80031ca:	2307      	movs	r3, #7
 80031cc:	e025      	b.n	800321a <HAL_GPIO_Init+0x25a>
 80031ce:	2306      	movs	r3, #6
 80031d0:	e023      	b.n	800321a <HAL_GPIO_Init+0x25a>
 80031d2:	2305      	movs	r3, #5
 80031d4:	e021      	b.n	800321a <HAL_GPIO_Init+0x25a>
 80031d6:	2304      	movs	r3, #4
 80031d8:	e01f      	b.n	800321a <HAL_GPIO_Init+0x25a>
 80031da:	2303      	movs	r3, #3
 80031dc:	e01d      	b.n	800321a <HAL_GPIO_Init+0x25a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e01b      	b.n	800321a <HAL_GPIO_Init+0x25a>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e019      	b.n	800321a <HAL_GPIO_Init+0x25a>
 80031e6:	bf00      	nop
 80031e8:	58000080 	.word	0x58000080
 80031ec:	58024400 	.word	0x58024400
 80031f0:	58000400 	.word	0x58000400
 80031f4:	58020000 	.word	0x58020000
 80031f8:	58020400 	.word	0x58020400
 80031fc:	58020800 	.word	0x58020800
 8003200:	58020c00 	.word	0x58020c00
 8003204:	58021000 	.word	0x58021000
 8003208:	58021400 	.word	0x58021400
 800320c:	58021800 	.word	0x58021800
 8003210:	58021c00 	.word	0x58021c00
 8003214:	58022400 	.word	0x58022400
 8003218:	2300      	movs	r3, #0
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	f002 0203 	and.w	r2, r2, #3
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	4093      	lsls	r3, r2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322a:	4938      	ldr	r1, [pc, #224]	@ (800330c <HAL_GPIO_Init+0x34c>)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800325e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800328c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	3301      	adds	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f ae6b 	bne.w	8002fd4 <HAL_GPIO_Init+0x14>
  }
}
 80032fe:	bf00      	nop
 8003300:	bf00      	nop
 8003302:	3724      	adds	r7, #36	@ 0x24
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	58000400 	.word	0x58000400

08003310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
 800331c:	4613      	mov	r3, r2
 800331e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003320:	787b      	ldrb	r3, [r7, #1]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800332c:	e003      	b.n	8003336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	041a      	lsls	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	619a      	str	r2, [r3, #24]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e08b      	b.n	800346e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd ff7c 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	@ 0x24
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003394:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	e006      	b.n	80033cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d108      	bne.n	80033e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	e007      	b.n	80033f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_I2C_Init+0x134>)
 8003402:	430b      	orrs	r3, r1
 8003404:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003414:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69d9      	ldr	r1, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	02008000 	.word	0x02008000

0800347c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b20      	cmp	r3, #32
 80034a0:	f040 80fd 	bne.w	800369e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_I2C_Mem_Read+0x34>
 80034aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0f1      	b.n	80036a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Mem_Read+0x4e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0ea      	b.n	80036a0 <HAL_I2C_Mem_Read+0x224>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034d2:	f7fe fe59 	bl	8002188 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2319      	movs	r3, #25
 80034de:	2201      	movs	r2, #1
 80034e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f95b 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0d5      	b.n	80036a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2222      	movs	r2, #34	@ 0x22
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2240      	movs	r2, #64	@ 0x40
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800351c:	88f8      	ldrh	r0, [r7, #6]
 800351e:	893a      	ldrh	r2, [r7, #8]
 8003520:	8979      	ldrh	r1, [r7, #10]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4603      	mov	r3, r0
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f8bf 	bl	80036b0 <I2C_RequestMemoryRead>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0ad      	b.n	80036a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2bff      	cmp	r3, #255	@ 0xff
 800354c:	d90e      	bls.n	800356c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	22ff      	movs	r2, #255	@ 0xff
 8003552:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003558:	b2da      	uxtb	r2, r3
 800355a:	8979      	ldrh	r1, [r7, #10]
 800355c:	4b52      	ldr	r3, [pc, #328]	@ (80036a8 <HAL_I2C_Mem_Read+0x22c>)
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fadf 	bl	8003b28 <I2C_TransferConfig>
 800356a:	e00f      	b.n	800358c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357a:	b2da      	uxtb	r2, r3
 800357c:	8979      	ldrh	r1, [r7, #10]
 800357e:	4b4a      	ldr	r3, [pc, #296]	@ (80036a8 <HAL_I2C_Mem_Read+0x22c>)
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 face 	bl	8003b28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003592:	2200      	movs	r2, #0
 8003594:	2104      	movs	r1, #4
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f902 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07c      	b.n	80036a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d034      	beq.n	800364c <HAL_I2C_Mem_Read+0x1d0>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d130      	bne.n	800364c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f0:	2200      	movs	r2, #0
 80035f2:	2180      	movs	r1, #128	@ 0x80
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f8d3 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e04d      	b.n	80036a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2bff      	cmp	r3, #255	@ 0xff
 800360c:	d90e      	bls.n	800362c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	22ff      	movs	r2, #255	@ 0xff
 8003612:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003618:	b2da      	uxtb	r2, r3
 800361a:	8979      	ldrh	r1, [r7, #10]
 800361c:	2300      	movs	r3, #0
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fa7f 	bl	8003b28 <I2C_TransferConfig>
 800362a:	e00f      	b.n	800364c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363a:	b2da      	uxtb	r2, r3
 800363c:	8979      	ldrh	r1, [r7, #10]
 800363e:	2300      	movs	r3, #0
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fa6e 	bl	8003b28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d19a      	bne.n	800358c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f940 	bl	80038e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e01a      	b.n	80036a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2220      	movs	r2, #32
 8003670:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <HAL_I2C_Mem_Read+0x230>)
 800367e:	400b      	ands	r3, r1
 8003680:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800369e:	2302      	movs	r3, #2
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	80002400 	.word	0x80002400
 80036ac:	fe00e800 	.word	0xfe00e800

080036b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	817b      	strh	r3, [r7, #10]
 80036c2:	460b      	mov	r3, r1
 80036c4:	813b      	strh	r3, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	8979      	ldrh	r1, [r7, #10]
 80036d0:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <I2C_RequestMemoryRead+0xa4>)
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fa26 	bl	8003b28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	69b9      	ldr	r1, [r7, #24]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f8b6 	bl	8003852 <I2C_WaitOnTXISFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e02c      	b.n	800374a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d105      	bne.n	8003702 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036f6:	893b      	ldrh	r3, [r7, #8]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003700:	e015      	b.n	800372e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003702:	893b      	ldrh	r3, [r7, #8]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	b29b      	uxth	r3, r3
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f89c 	bl	8003852 <I2C_WaitOnTXISFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e012      	b.n	800374a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2200      	movs	r2, #0
 8003736:	2140      	movs	r1, #64	@ 0x40
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f831 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	80002000 	.word	0x80002000

08003758 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d103      	bne.n	8003776 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2200      	movs	r2, #0
 8003774:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d007      	beq.n	8003794 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	619a      	str	r2, [r3, #24]
  }
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b0:	e03b      	b.n	800382a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	6839      	ldr	r1, [r7, #0]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f8d6 	bl	8003968 <I2C_IsErrorOccurred>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e041      	b.n	800384a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d02d      	beq.n	800382a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fe fcdb 	bl	8002188 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d122      	bne.n	800382a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4013      	ands	r3, r2
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d113      	bne.n	800382a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e00f      	b.n	800384a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	429a      	cmp	r2, r3
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	429a      	cmp	r2, r3
 8003846:	d0b4      	beq.n	80037b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800385e:	e033      	b.n	80038c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f87f 	bl	8003968 <I2C_IsErrorOccurred>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e031      	b.n	80038d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	d025      	beq.n	80038c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387c:	f7fe fc84 	bl	8002188 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	429a      	cmp	r2, r3
 800388a:	d302      	bcc.n	8003892 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d11a      	bne.n	80038c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b02      	cmp	r3, #2
 800389e:	d013      	beq.n	80038c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a4:	f043 0220 	orr.w	r2, r3, #32
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e007      	b.n	80038d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d1c4      	bne.n	8003860 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ec:	e02f      	b.n	800394e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f838 	bl	8003968 <I2C_IsErrorOccurred>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e02d      	b.n	800395e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003902:	f7fe fc41 	bl	8002188 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d11a      	bne.n	800394e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	d013      	beq.n	800394e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e007      	b.n	800395e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b20      	cmp	r3, #32
 800395a:	d1c8      	bne.n	80038ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	@ 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	d068      	beq.n	8003a66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2210      	movs	r2, #16
 800399a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800399c:	e049      	b.n	8003a32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d045      	beq.n	8003a32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fe fbef 	bl	8002188 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <I2C_IsErrorOccurred+0x54>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d13a      	bne.n	8003a32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039de:	d121      	bne.n	8003a24 <I2C_IsErrorOccurred+0xbc>
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039e6:	d01d      	beq.n	8003a24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d01a      	beq.n	8003a24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039fe:	f7fe fbc3 	bl	8002188 <HAL_GetTick>
 8003a02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a04:	e00e      	b.n	8003a24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a06:	f7fe fbbf 	bl	8002188 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b19      	cmp	r3, #25
 8003a12:	d907      	bls.n	8003a24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f043 0320 	orr.w	r3, r3, #32
 8003a1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a22:	e006      	b.n	8003a32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d1e9      	bne.n	8003a06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d003      	beq.n	8003a48 <I2C_IsErrorOccurred+0xe0>
 8003a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0aa      	beq.n	800399e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d103      	bne.n	8003a58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2220      	movs	r2, #32
 8003a56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f043 0304 	orr.w	r3, r3, #4
 8003a5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f043 0308 	orr.w	r3, r3, #8
 8003aa0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003acc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01c      	beq.n	8003b16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7ff fe3b 	bl	8003758 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <I2C_IsErrorOccurred+0x1bc>)
 8003aee:	400b      	ands	r3, r1
 8003af0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3728      	adds	r7, #40	@ 0x28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	fe00e800 	.word	0xfe00e800

08003b28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	817b      	strh	r3, [r7, #10]
 8003b36:	4613      	mov	r3, r2
 8003b38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b3a:	897b      	ldrh	r3, [r7, #10]
 8003b3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b40:	7a7b      	ldrb	r3, [r7, #9]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b48:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b56:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	0d5b      	lsrs	r3, r3, #21
 8003b62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b66:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <I2C_TransferConfig+0x60>)
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	ea02 0103 	and.w	r1, r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	03ff63ff 	.word	0x03ff63ff

08003b8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d138      	bne.n	8003c14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e032      	b.n	8003c16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	@ 0x24
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6819      	ldr	r1, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d139      	bne.n	8003cac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e033      	b.n	8003cae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2224      	movs	r2, #36	@ 0x24
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003cc4:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <HAL_PWREx_ConfigSupply+0x70>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d00a      	beq.n	8003ce6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cd0:	4b16      	ldr	r3, [pc, #88]	@ (8003d2c <HAL_PWREx_ConfigSupply+0x70>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d001      	beq.n	8003ce2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e01f      	b.n	8003d22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e01d      	b.n	8003d22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ce6:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <HAL_PWREx_ConfigSupply+0x70>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f023 0207 	bic.w	r2, r3, #7
 8003cee:	490f      	ldr	r1, [pc, #60]	@ (8003d2c <HAL_PWREx_ConfigSupply+0x70>)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003cf6:	f7fe fa47 	bl	8002188 <HAL_GetTick>
 8003cfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cfc:	e009      	b.n	8003d12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cfe:	f7fe fa43 	bl	8002188 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d0c:	d901      	bls.n	8003d12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e007      	b.n	8003d22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <HAL_PWREx_ConfigSupply+0x70>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d1e:	d1ee      	bne.n	8003cfe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	58024800 	.word	0x58024800

08003d30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	@ 0x30
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e3c8      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8087 	beq.w	8003e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d50:	4b88      	ldr	r3, [pc, #544]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d5a:	4b86      	ldr	r3, [pc, #536]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d007      	beq.n	8003d76 <HAL_RCC_OscConfig+0x46>
 8003d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d68:	2b18      	cmp	r3, #24
 8003d6a:	d110      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5e>
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d10b      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d76:	4b7f      	ldr	r3, [pc, #508]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d06c      	beq.n	8003e5c <HAL_RCC_OscConfig+0x12c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d168      	bne.n	8003e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e3a2      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x76>
 8003d98:	4b76      	ldr	r3, [pc, #472]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a75      	ldr	r2, [pc, #468]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e02e      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x98>
 8003dae:	4b71      	ldr	r3, [pc, #452]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a70      	ldr	r2, [pc, #448]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b6e      	ldr	r3, [pc, #440]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6d      	ldr	r2, [pc, #436]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003dc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e01d      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0xbc>
 8003dd2:	4b68      	ldr	r3, [pc, #416]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a67      	ldr	r2, [pc, #412]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b65      	ldr	r3, [pc, #404]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a64      	ldr	r2, [pc, #400]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003dec:	4b61      	ldr	r3, [pc, #388]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a60      	ldr	r2, [pc, #384]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe f9bc 	bl	8002188 <HAL_GetTick>
 8003e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe f9b8 	bl	8002188 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	@ 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e356      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e26:	4b53      	ldr	r3, [pc, #332]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0xe4>
 8003e32:	e014      	b.n	8003e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe f9a8 	bl	8002188 <HAL_GetTick>
 8003e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe f9a4 	bl	8002188 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	@ 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e342      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e4e:	4b49      	ldr	r3, [pc, #292]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x10c>
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 808c 	beq.w	8003f84 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6c:	4b41      	ldr	r3, [pc, #260]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e76:	4b3f      	ldr	r3, [pc, #252]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <HAL_RCC_OscConfig+0x162>
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	2b18      	cmp	r3, #24
 8003e86:	d137      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1c8>
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d132      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e92:	4b38      	ldr	r3, [pc, #224]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_RCC_OscConfig+0x17a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e314      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eaa:	4b32      	ldr	r3, [pc, #200]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 0219 	bic.w	r2, r3, #25
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	492f      	ldr	r1, [pc, #188]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fe f964 	bl	8002188 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec4:	f7fe f960 	bl	8002188 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e2fe      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed6:	4b27      	ldr	r3, [pc, #156]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee2:	4b24      	ldr	r3, [pc, #144]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	4920      	ldr	r1, [pc, #128]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef6:	e045      	b.n	8003f84 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d026      	beq.n	8003f4e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f00:	4b1c      	ldr	r3, [pc, #112]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 0219 	bic.w	r2, r3, #25
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4919      	ldr	r1, [pc, #100]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fe f939 	bl	8002188 <HAL_GetTick>
 8003f16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fe f935 	bl	8002188 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e2d3      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f2c:	4b11      	ldr	r3, [pc, #68]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	490b      	ldr	r1, [pc, #44]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	e01a      	b.n	8003f84 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a08      	ldr	r2, [pc, #32]	@ (8003f74 <HAL_RCC_OscConfig+0x244>)
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fe f915 	bl	8002188 <HAL_GetTick>
 8003f5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fe f911 	bl	8002188 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d903      	bls.n	8003f78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e2af      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
 8003f74:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f78:	4b96      	ldr	r3, [pc, #600]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d06a      	beq.n	8004066 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f90:	4b90      	ldr	r3, [pc, #576]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f98:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f9a:	4b8e      	ldr	r3, [pc, #568]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d007      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x286>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b18      	cmp	r3, #24
 8003faa:	d11b      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2b4>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d116      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fb6:	4b87      	ldr	r3, [pc, #540]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_RCC_OscConfig+0x29e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	2b80      	cmp	r3, #128	@ 0x80
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e282      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fce:	4b81      	ldr	r3, [pc, #516]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	497d      	ldr	r1, [pc, #500]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fe2:	e040      	b.n	8004066 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d023      	beq.n	8004034 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003fec:	4b79      	ldr	r3, [pc, #484]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a78      	ldr	r2, [pc, #480]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8003ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe f8c6 	bl	8002188 <HAL_GetTick>
 8003ffc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004000:	f7fe f8c2 	bl	8002188 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e260      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004012:	4b70      	ldr	r3, [pc, #448]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800401e:	4b6d      	ldr	r3, [pc, #436]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	4969      	ldr	r1, [pc, #420]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	60cb      	str	r3, [r1, #12]
 8004032:	e018      	b.n	8004066 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004034:	4b67      	ldr	r3, [pc, #412]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a66      	ldr	r2, [pc, #408]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 800403a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe f8a2 	bl	8002188 <HAL_GetTick>
 8004044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004048:	f7fe f89e 	bl	8002188 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e23c      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800405a:	4b5e      	ldr	r3, [pc, #376]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d036      	beq.n	80040e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d019      	beq.n	80040ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407a:	4b56      	ldr	r3, [pc, #344]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 800407c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407e:	4a55      	ldr	r2, [pc, #340]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fe f87f 	bl	8002188 <HAL_GetTick>
 800408a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408e:	f7fe f87b 	bl	8002188 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e219      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040a0:	4b4c      	ldr	r3, [pc, #304]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80040a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x35e>
 80040ac:	e018      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ae:	4b49      	ldr	r3, [pc, #292]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80040b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b2:	4a48      	ldr	r2, [pc, #288]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ba:	f7fe f865 	bl	8002188 <HAL_GetTick>
 80040be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c2:	f7fe f861 	bl	8002188 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e1ff      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040d4:	4b3f      	ldr	r3, [pc, #252]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80040d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d036      	beq.n	800415a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d019      	beq.n	8004128 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040f4:	4b37      	ldr	r3, [pc, #220]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a36      	ldr	r2, [pc, #216]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80040fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004100:	f7fe f842 	bl	8002188 <HAL_GetTick>
 8004104:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004108:	f7fe f83e 	bl	8002188 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1dc      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800411a:	4b2e      	ldr	r3, [pc, #184]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x3d8>
 8004126:	e018      	b.n	800415a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004128:	4b2a      	ldr	r3, [pc, #168]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a29      	ldr	r2, [pc, #164]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 800412e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004132:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004134:	f7fe f828 	bl	8002188 <HAL_GetTick>
 8004138:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800413c:	f7fe f824 	bl	8002188 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e1c2      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800414e:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8086 	beq.w	8004274 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCC_OscConfig+0x4a8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1a      	ldr	r2, [pc, #104]	@ (80041d8 <HAL_RCC_OscConfig+0x4a8>)
 800416e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004174:	f7fe f808 	bl	8002188 <HAL_GetTick>
 8004178:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417c:	f7fe f804 	bl	8002188 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	@ 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1a2      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <HAL_RCC_OscConfig+0x4a8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x480>
 80041a2:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	4a0b      	ldr	r2, [pc, #44]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ae:	e032      	b.n	8004216 <HAL_RCC_OscConfig+0x4e6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d111      	bne.n	80041dc <HAL_RCC_OscConfig+0x4ac>
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041bc:	4a05      	ldr	r2, [pc, #20]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c4:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c8:	4a02      	ldr	r2, [pc, #8]	@ (80041d4 <HAL_RCC_OscConfig+0x4a4>)
 80041ca:	f023 0304 	bic.w	r3, r3, #4
 80041ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d0:	e021      	b.n	8004216 <HAL_RCC_OscConfig+0x4e6>
 80041d2:	bf00      	nop
 80041d4:	58024400 	.word	0x58024400
 80041d8:	58024800 	.word	0x58024800
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x4ce>
 80041e4:	4b83      	ldr	r3, [pc, #524]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e8:	4a82      	ldr	r2, [pc, #520]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80041f0:	4b80      	ldr	r3, [pc, #512]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f4:	4a7f      	ldr	r2, [pc, #508]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fc:	e00b      	b.n	8004216 <HAL_RCC_OscConfig+0x4e6>
 80041fe:	4b7d      	ldr	r3, [pc, #500]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004202:	4a7c      	ldr	r2, [pc, #496]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	6713      	str	r3, [r2, #112]	@ 0x70
 800420a:	4b7a      	ldr	r3, [pc, #488]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420e:	4a79      	ldr	r2, [pc, #484]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d015      	beq.n	800424a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fd ffb3 	bl	8002188 <HAL_GetTick>
 8004222:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fd ffaf 	bl	8002188 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e14b      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800423c:	4b6d      	ldr	r3, [pc, #436]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ee      	beq.n	8004226 <HAL_RCC_OscConfig+0x4f6>
 8004248:	e014      	b.n	8004274 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fd ff9d 	bl	8002188 <HAL_GetTick>
 800424e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fd ff99 	bl	8002188 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e135      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004268:	4b62      	ldr	r3, [pc, #392]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ee      	bne.n	8004252 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 812a 	beq.w	80044d2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800427e:	4b5d      	ldr	r3, [pc, #372]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004286:	2b18      	cmp	r3, #24
 8004288:	f000 80ba 	beq.w	8004400 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	2b02      	cmp	r3, #2
 8004292:	f040 8095 	bne.w	80043c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004296:	4b57      	ldr	r3, [pc, #348]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a56      	ldr	r2, [pc, #344]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800429c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd ff71 	bl	8002188 <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042aa:	f7fd ff6d 	bl	8002188 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e10b      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042bc:	4b4d      	ldr	r3, [pc, #308]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c8:	4b4a      	ldr	r3, [pc, #296]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80042ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042cc:	4b4a      	ldr	r3, [pc, #296]	@ (80043f8 <HAL_RCC_OscConfig+0x6c8>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	430a      	orrs	r2, r1
 80042dc:	4945      	ldr	r1, [pc, #276]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	628b      	str	r3, [r1, #40]	@ 0x28
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	3b01      	subs	r3, #1
 80042e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f0:	3b01      	subs	r3, #1
 80042f2:	025b      	lsls	r3, r3, #9
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	3b01      	subs	r3, #1
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430a:	3b01      	subs	r3, #1
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004312:	4938      	ldr	r1, [pc, #224]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004314:	4313      	orrs	r3, r2
 8004316:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004318:	4b36      	ldr	r3, [pc, #216]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	4a35      	ldr	r2, [pc, #212]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004324:	4b33      	ldr	r3, [pc, #204]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004328:	4b34      	ldr	r3, [pc, #208]	@ (80043fc <HAL_RCC_OscConfig+0x6cc>)
 800432a:	4013      	ands	r3, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004330:	00d2      	lsls	r2, r2, #3
 8004332:	4930      	ldr	r1, [pc, #192]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004334:	4313      	orrs	r3, r2
 8004336:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004338:	4b2e      	ldr	r3, [pc, #184]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	f023 020c 	bic.w	r2, r3, #12
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	492b      	ldr	r1, [pc, #172]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004346:	4313      	orrs	r3, r2
 8004348:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800434a:	4b2a      	ldr	r3, [pc, #168]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	f023 0202 	bic.w	r2, r3, #2
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	4927      	ldr	r1, [pc, #156]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004358:	4313      	orrs	r3, r2
 800435a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800435c:	4b25      	ldr	r3, [pc, #148]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	4a24      	ldr	r2, [pc, #144]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004368:	4b22      	ldr	r3, [pc, #136]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	4a21      	ldr	r2, [pc, #132]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800436e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004374:	4b1f      	ldr	r3, [pc, #124]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	4a1e      	ldr	r2, [pc, #120]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800437a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800437e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004380:	4b1c      	ldr	r3, [pc, #112]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	4a1b      	ldr	r2, [pc, #108]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438c:	4b19      	ldr	r3, [pc, #100]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a18      	ldr	r2, [pc, #96]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd fef6 	bl	8002188 <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fef2 	bl	8002188 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e090      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043b2:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x670>
 80043be:	e088      	b.n	80044d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c0:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0b      	ldr	r2, [pc, #44]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd fedc 	bl	8002188 <HAL_GetTick>
 80043d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd fed8 	bl	8002188 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e076      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043e6:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <HAL_RCC_OscConfig+0x6c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x6a4>
 80043f2:	e06e      	b.n	80044d2 <HAL_RCC_OscConfig+0x7a2>
 80043f4:	58024400 	.word	0x58024400
 80043f8:	fffffc0c 	.word	0xfffffc0c
 80043fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004400:	4b36      	ldr	r3, [pc, #216]	@ (80044dc <HAL_RCC_OscConfig+0x7ac>)
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004406:	4b35      	ldr	r3, [pc, #212]	@ (80044dc <HAL_RCC_OscConfig+0x7ac>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	2b01      	cmp	r3, #1
 8004412:	d031      	beq.n	8004478 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f003 0203 	and.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d12a      	bne.n	8004478 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d122      	bne.n	8004478 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d11a      	bne.n	8004478 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	0a5b      	lsrs	r3, r3, #9
 8004446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d111      	bne.n	8004478 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	0c1b      	lsrs	r3, r3, #16
 8004458:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d108      	bne.n	8004478 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	0e1b      	lsrs	r3, r3, #24
 800446a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004472:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e02b      	b.n	80044d4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800447c:	4b17      	ldr	r3, [pc, #92]	@ (80044dc <HAL_RCC_OscConfig+0x7ac>)
 800447e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004480:	08db      	lsrs	r3, r3, #3
 8004482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004486:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	429a      	cmp	r2, r3
 8004490:	d01f      	beq.n	80044d2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004492:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <HAL_RCC_OscConfig+0x7ac>)
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	4a11      	ldr	r2, [pc, #68]	@ (80044dc <HAL_RCC_OscConfig+0x7ac>)
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800449e:	f7fd fe73 	bl	8002188 <HAL_GetTick>
 80044a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80044a4:	bf00      	nop
 80044a6:	f7fd fe6f 	bl	8002188 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d0f9      	beq.n	80044a6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_RCC_OscConfig+0x7ac>)
 80044b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044b6:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <HAL_RCC_OscConfig+0x7b0>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044be:	00d2      	lsls	r2, r2, #3
 80044c0:	4906      	ldr	r1, [pc, #24]	@ (80044dc <HAL_RCC_OscConfig+0x7ac>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80044c6:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <HAL_RCC_OscConfig+0x7ac>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	4a04      	ldr	r2, [pc, #16]	@ (80044dc <HAL_RCC_OscConfig+0x7ac>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3730      	adds	r7, #48	@ 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	58024400 	.word	0x58024400
 80044e0:	ffff0007 	.word	0xffff0007

080044e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e19c      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b8a      	ldr	r3, [pc, #552]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d910      	bls.n	8004528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b87      	ldr	r3, [pc, #540]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 020f 	bic.w	r2, r3, #15
 800450e:	4985      	ldr	r1, [pc, #532]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b83      	ldr	r3, [pc, #524]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e184      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	4b7b      	ldr	r3, [pc, #492]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004540:	429a      	cmp	r2, r3
 8004542:	d908      	bls.n	8004556 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004544:	4b78      	ldr	r3, [pc, #480]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	4975      	ldr	r1, [pc, #468]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004552:	4313      	orrs	r3, r2
 8004554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	4b70      	ldr	r3, [pc, #448]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800456e:	429a      	cmp	r2, r3
 8004570:	d908      	bls.n	8004584 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004572:	4b6d      	ldr	r3, [pc, #436]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	496a      	ldr	r1, [pc, #424]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004580:	4313      	orrs	r3, r2
 8004582:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	d010      	beq.n	80045b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	4b64      	ldr	r3, [pc, #400]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800459c:	429a      	cmp	r2, r3
 800459e:	d908      	bls.n	80045b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045a0:	4b61      	ldr	r3, [pc, #388]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	495e      	ldr	r1, [pc, #376]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	4b59      	ldr	r3, [pc, #356]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d908      	bls.n	80045e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045ce:	4b56      	ldr	r3, [pc, #344]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	4953      	ldr	r1, [pc, #332]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d908      	bls.n	800460e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f023 020f 	bic.w	r2, r3, #15
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4947      	ldr	r1, [pc, #284]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 800460a:	4313      	orrs	r3, r2
 800460c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d055      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800461a:	4b43      	ldr	r3, [pc, #268]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	4940      	ldr	r1, [pc, #256]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004628:	4313      	orrs	r3, r2
 800462a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d107      	bne.n	8004644 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004634:	4b3c      	ldr	r3, [pc, #240]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d121      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0f6      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d107      	bne.n	800465c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800464c:	4b36      	ldr	r3, [pc, #216]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d115      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0ea      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d107      	bne.n	8004674 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004664:	4b30      	ldr	r3, [pc, #192]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d109      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0de      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004674:	4b2c      	ldr	r3, [pc, #176]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0d6      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004684:	4b28      	ldr	r3, [pc, #160]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f023 0207 	bic.w	r2, r3, #7
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4925      	ldr	r1, [pc, #148]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004692:	4313      	orrs	r3, r2
 8004694:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fd fd77 	bl	8002188 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469e:	f7fd fd73 	bl	8002188 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0be      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d1eb      	bne.n	800469e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d010      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	4b14      	ldr	r3, [pc, #80]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	429a      	cmp	r2, r3
 80046e0:	d208      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e2:	4b11      	ldr	r3, [pc, #68]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f023 020f 	bic.w	r2, r3, #15
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	490e      	ldr	r1, [pc, #56]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d214      	bcs.n	800472c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b08      	ldr	r3, [pc, #32]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 020f 	bic.w	r2, r3, #15
 800470a:	4906      	ldr	r1, [pc, #24]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	4b04      	ldr	r3, [pc, #16]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d005      	beq.n	800472c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e086      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
 8004724:	52002000 	.word	0x52002000
 8004728:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d010      	beq.n	800475a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	4b3f      	ldr	r3, [pc, #252]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004744:	429a      	cmp	r2, r3
 8004746:	d208      	bcs.n	800475a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004748:	4b3c      	ldr	r3, [pc, #240]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	4939      	ldr	r1, [pc, #228]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 8004756:	4313      	orrs	r3, r2
 8004758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	4b34      	ldr	r3, [pc, #208]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004772:	429a      	cmp	r2, r3
 8004774:	d208      	bcs.n	8004788 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004776:	4b31      	ldr	r3, [pc, #196]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	492e      	ldr	r1, [pc, #184]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 8004784:	4313      	orrs	r3, r2
 8004786:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	4b28      	ldr	r3, [pc, #160]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d208      	bcs.n	80047b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047a4:	4b25      	ldr	r3, [pc, #148]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	4922      	ldr	r1, [pc, #136]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	4b1d      	ldr	r3, [pc, #116]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d208      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047d2:	4b1a      	ldr	r3, [pc, #104]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4917      	ldr	r1, [pc, #92]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047e4:	f000 f834 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b14      	ldr	r3, [pc, #80]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	4912      	ldr	r1, [pc, #72]	@ (8004840 <HAL_RCC_ClockConfig+0x35c>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	4a0d      	ldr	r2, [pc, #52]	@ (8004840 <HAL_RCC_ClockConfig+0x35c>)
 800480c:	5cd3      	ldrb	r3, [r2, r3]
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
 8004818:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <HAL_RCC_ClockConfig+0x360>)
 800481a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800481c:	4a0a      	ldr	r2, [pc, #40]	@ (8004848 <HAL_RCC_ClockConfig+0x364>)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004822:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <HAL_RCC_ClockConfig+0x368>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fc64 	bl	80020f4 <HAL_InitTick>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	58024400 	.word	0x58024400
 8004840:	0800cc78 	.word	0x0800cc78
 8004844:	24000008 	.word	0x24000008
 8004848:	24000004 	.word	0x24000004
 800484c:	24000010 	.word	0x24000010

08004850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	@ 0x24
 8004854:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004856:	4bb3      	ldr	r3, [pc, #716]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800485e:	2b18      	cmp	r3, #24
 8004860:	f200 8155 	bhi.w	8004b0e <HAL_RCC_GetSysClockFreq+0x2be>
 8004864:	a201      	add	r2, pc, #4	@ (adr r2, 800486c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	080048d1 	.word	0x080048d1
 8004870:	08004b0f 	.word	0x08004b0f
 8004874:	08004b0f 	.word	0x08004b0f
 8004878:	08004b0f 	.word	0x08004b0f
 800487c:	08004b0f 	.word	0x08004b0f
 8004880:	08004b0f 	.word	0x08004b0f
 8004884:	08004b0f 	.word	0x08004b0f
 8004888:	08004b0f 	.word	0x08004b0f
 800488c:	080048f7 	.word	0x080048f7
 8004890:	08004b0f 	.word	0x08004b0f
 8004894:	08004b0f 	.word	0x08004b0f
 8004898:	08004b0f 	.word	0x08004b0f
 800489c:	08004b0f 	.word	0x08004b0f
 80048a0:	08004b0f 	.word	0x08004b0f
 80048a4:	08004b0f 	.word	0x08004b0f
 80048a8:	08004b0f 	.word	0x08004b0f
 80048ac:	080048fd 	.word	0x080048fd
 80048b0:	08004b0f 	.word	0x08004b0f
 80048b4:	08004b0f 	.word	0x08004b0f
 80048b8:	08004b0f 	.word	0x08004b0f
 80048bc:	08004b0f 	.word	0x08004b0f
 80048c0:	08004b0f 	.word	0x08004b0f
 80048c4:	08004b0f 	.word	0x08004b0f
 80048c8:	08004b0f 	.word	0x08004b0f
 80048cc:	08004903 	.word	0x08004903
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048d0:	4b94      	ldr	r3, [pc, #592]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048dc:	4b91      	ldr	r3, [pc, #580]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	08db      	lsrs	r3, r3, #3
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	4a90      	ldr	r2, [pc, #576]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80048ee:	e111      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048f0:	4b8d      	ldr	r3, [pc, #564]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048f2:	61bb      	str	r3, [r7, #24]
      break;
 80048f4:	e10e      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80048f6:	4b8d      	ldr	r3, [pc, #564]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048f8:	61bb      	str	r3, [r7, #24]
      break;
 80048fa:	e10b      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80048fc:	4b8c      	ldr	r3, [pc, #560]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048fe:	61bb      	str	r3, [r7, #24]
      break;
 8004900:	e108      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004902:	4b88      	ldr	r3, [pc, #544]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800490c:	4b85      	ldr	r3, [pc, #532]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004916:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004918:	4b82      	ldr	r3, [pc, #520]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004922:	4b80      	ldr	r3, [pc, #512]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004926:	08db      	lsrs	r3, r3, #3
 8004928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80e1 	beq.w	8004b08 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b02      	cmp	r3, #2
 800494a:	f000 8083 	beq.w	8004a54 <HAL_RCC_GetSysClockFreq+0x204>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b02      	cmp	r3, #2
 8004952:	f200 80a1 	bhi.w	8004a98 <HAL_RCC_GetSysClockFreq+0x248>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x114>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d056      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004962:	e099      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004964:	4b6f      	ldr	r3, [pc, #444]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02d      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004970:	4b6c      	ldr	r3, [pc, #432]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	08db      	lsrs	r3, r3, #3
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	4a6b      	ldr	r2, [pc, #428]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499a:	4b62      	ldr	r3, [pc, #392]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80049ca:	e087      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004b38 <HAL_RCC_GetSysClockFreq+0x2e8>
 80049da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049de:	4b51      	ldr	r3, [pc, #324]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80049f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a0e:	e065      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a22:	4b40      	ldr	r3, [pc, #256]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a52:	e043      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004b40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a96:	e021      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004abe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ada:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae0:	0a5b      	lsrs	r3, r3, #9
 8004ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b00:	ee17 3a90 	vmov	r3, s15
 8004b04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004b06:	e005      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
      break;
 8004b0c:	e002      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004b0e:	4b07      	ldr	r3, [pc, #28]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b10:	61bb      	str	r3, [r7, #24]
      break;
 8004b12:	bf00      	nop
  }

  return sysclockfreq;
 8004b14:	69bb      	ldr	r3, [r7, #24]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	@ 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
 8004b28:	03d09000 	.word	0x03d09000
 8004b2c:	003d0900 	.word	0x003d0900
 8004b30:	017d7840 	.word	0x017d7840
 8004b34:	46000000 	.word	0x46000000
 8004b38:	4c742400 	.word	0x4c742400
 8004b3c:	4a742400 	.word	0x4a742400
 8004b40:	4bbebc20 	.word	0x4bbebc20

08004b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b4a:	f7ff fe81 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	490f      	ldr	r1, [pc, #60]	@ (8004b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b5c:	5ccb      	ldrb	r3, [r1, r3]
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	fa22 f303 	lsr.w	r3, r2, r3
 8004b66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b68:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	4a09      	ldr	r2, [pc, #36]	@ (8004b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b72:	5cd3      	ldrb	r3, [r2, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	4a07      	ldr	r2, [pc, #28]	@ (8004b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8004b80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b82:	4a07      	ldr	r2, [pc, #28]	@ (8004ba0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b88:	4b04      	ldr	r3, [pc, #16]	@ (8004b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	58024400 	.word	0x58024400
 8004b98:	0800cc78 	.word	0x0800cc78
 8004b9c:	24000008 	.word	0x24000008
 8004ba0:	24000004 	.word	0x24000004

08004ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ba8:	f7ff ffcc 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4904      	ldr	r1, [pc, #16]	@ (8004bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	0800cc78 	.word	0x0800cc78

08004bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004bd4:	f7ff ffb6 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	4904      	ldr	r1, [pc, #16]	@ (8004bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	58024400 	.word	0x58024400
 8004bf8:	0800cc78 	.word	0x0800cc78

08004bfc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c00:	b0c6      	sub	sp, #280	@ 0x118
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004c20:	2500      	movs	r5, #0
 8004c22:	ea54 0305 	orrs.w	r3, r4, r5
 8004c26:	d049      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c32:	d02f      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004c34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c38:	d828      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c3e:	d01a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c44:	d822      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c4e:	d007      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c50:	e01c      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c52:	4bab      	ldr	r3, [pc, #684]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	4aaa      	ldr	r2, [pc, #680]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c5e:	e01a      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c64:	3308      	adds	r3, #8
 8004c66:	2102      	movs	r1, #2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fc25 	bl	80064b8 <RCCEx_PLL2_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c74:	e00f      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7a:	3328      	adds	r3, #40	@ 0x28
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 fccc 	bl	800661c <RCCEx_PLL3_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c8a:	e004      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c9e:	4b98      	ldr	r3, [pc, #608]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cac:	4a94      	ldr	r2, [pc, #592]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004cc8:	f04f 0900 	mov.w	r9, #0
 8004ccc:	ea58 0309 	orrs.w	r3, r8, r9
 8004cd0:	d047      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d82a      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004cf9 	.word	0x08004cf9
 8004ce8:	08004d07 	.word	0x08004d07
 8004cec:	08004d1d 	.word	0x08004d1d
 8004cf0:	08004d3b 	.word	0x08004d3b
 8004cf4:	08004d3b 	.word	0x08004d3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf8:	4b81      	ldr	r3, [pc, #516]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	4a80      	ldr	r2, [pc, #512]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d04:	e01a      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 fbd2 	bl	80064b8 <RCCEx_PLL2_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d1a:	e00f      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d20:	3328      	adds	r3, #40	@ 0x28
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 fc79 	bl	800661c <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d30:	e004      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d38:	e000      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d44:	4b6e      	ldr	r3, [pc, #440]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d48:	f023 0107 	bic.w	r1, r3, #7
 8004d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d52:	4a6b      	ldr	r2, [pc, #428]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d58:	e003      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004d6e:	f04f 0b00 	mov.w	fp, #0
 8004d72:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d76:	d05b      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d80:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004d84:	d03b      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004d86:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004d8a:	d834      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004d8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d90:	d037      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004d92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d96:	d82e      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004d98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004d9c:	d033      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004d9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004da2:	d828      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004da4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da8:	d01a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004daa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dae:	d822      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004db4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004db8:	d007      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004dba:	e01c      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dbc:	4b50      	ldr	r3, [pc, #320]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dc8:	e01e      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dce:	3308      	adds	r3, #8
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 fb70 	bl	80064b8 <RCCEx_PLL2_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004dde:	e013      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de4:	3328      	adds	r3, #40	@ 0x28
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 fc17 	bl	800661c <RCCEx_PLL3_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004df4:	e008      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dfc:	e004      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e10:	4b3b      	ldr	r3, [pc, #236]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e20:	4a37      	ldr	r2, [pc, #220]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e22:	430b      	orrs	r3, r1
 8004e24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e26:	e003      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	d05d      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e58:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004e5c:	d03b      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004e5e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004e62:	d834      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004e64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e68:	d037      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004e6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e6e:	d82e      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004e70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e74:	d033      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004e76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e7a:	d828      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e80:	d01a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e86:	d822      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e90:	d007      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004e92:	e01c      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e94:	4b1a      	ldr	r3, [pc, #104]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	4a19      	ldr	r2, [pc, #100]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ea0:	e01e      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 fb04 	bl	80064b8 <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e013      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ebc:	3328      	adds	r3, #40	@ 0x28
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fbab 	bl	800661c <RCCEx_PLL3_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ed4:	e004      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e002      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004eda:	bf00      	nop
 8004edc:	e000      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ef8:	4a01      	ldr	r2, [pc, #4]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004efa:	430b      	orrs	r3, r1
 8004efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004efe:	e005      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f22:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	d03a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f32:	2b30      	cmp	r3, #48	@ 0x30
 8004f34:	d01f      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004f36:	2b30      	cmp	r3, #48	@ 0x30
 8004f38:	d819      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d00c      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d815      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d019      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d111      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f4a:	4baa      	ldr	r3, [pc, #680]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	4aa9      	ldr	r2, [pc, #676]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004f56:	e011      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	2102      	movs	r1, #2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f001 faa9 	bl	80064b8 <RCCEx_PLL2_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004f6c:	e006      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f74:	e002      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004f76:	bf00      	nop
 8004f78:	e000      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f84:	4b9b      	ldr	r3, [pc, #620]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f88:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f92:	4a98      	ldr	r2, [pc, #608]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f94:	430b      	orrs	r3, r1
 8004f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004fae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004fb8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	d051      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fcc:	d035      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004fce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fd2:	d82e      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004fd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fd8:	d031      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004fda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fde:	d828      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe4:	d01a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fea:	d822      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff4:	d007      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004ff6:	e01c      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	4a7d      	ldr	r2, [pc, #500]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005004:	e01c      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500a:	3308      	adds	r3, #8
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f001 fa52 	bl	80064b8 <RCCEx_PLL2_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800501a:	e011      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800501c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005020:	3328      	adds	r3, #40	@ 0x28
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f001 faf9 	bl	800661c <RCCEx_PLL3_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005030:	e006      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005038:	e002      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800503a:	bf00      	nop
 800503c:	e000      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800503e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005048:	4b6a      	ldr	r3, [pc, #424]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800504a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005056:	4a67      	ldr	r2, [pc, #412]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005058:	430b      	orrs	r3, r1
 800505a:	6513      	str	r3, [r2, #80]	@ 0x50
 800505c:	e003      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005062:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005072:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800507c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005080:	460b      	mov	r3, r1
 8005082:	4313      	orrs	r3, r2
 8005084:	d053      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005090:	d033      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005092:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005096:	d82c      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005098:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800509c:	d02f      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800509e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050a2:	d826      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80050a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050a8:	d02b      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80050aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050ae:	d820      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80050b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050b4:	d012      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80050b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050ba:	d81a      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d022      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c4:	d115      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ca:	3308      	adds	r3, #8
 80050cc:	2101      	movs	r1, #1
 80050ce:	4618      	mov	r0, r3
 80050d0:	f001 f9f2 	bl	80064b8 <RCCEx_PLL2_Config>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050da:	e015      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e0:	3328      	adds	r3, #40	@ 0x28
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 fa99 	bl	800661c <RCCEx_PLL3_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050f0:	e00a      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050f8:	e006      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80050fa:	bf00      	nop
 80050fc:	e004      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80050fe:	bf00      	nop
 8005100:	e002      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005102:	bf00      	nop
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005108:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005110:	4b38      	ldr	r3, [pc, #224]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005114:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511e:	4a35      	ldr	r2, [pc, #212]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005120:	430b      	orrs	r3, r1
 8005122:	6513      	str	r3, [r2, #80]	@ 0x50
 8005124:	e003      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005126:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800512a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800512e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800513a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800513e:	2300      	movs	r3, #0
 8005140:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005144:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005148:	460b      	mov	r3, r1
 800514a:	4313      	orrs	r3, r2
 800514c:	d058      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800515a:	d033      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800515c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005160:	d82c      	bhi.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005166:	d02f      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516c:	d826      	bhi.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800516e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005172:	d02b      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005174:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005178:	d820      	bhi.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800517a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800517e:	d012      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005184:	d81a      	bhi.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d022      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800518a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800518e:	d115      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005194:	3308      	adds	r3, #8
 8005196:	2101      	movs	r1, #1
 8005198:	4618      	mov	r0, r3
 800519a:	f001 f98d 	bl	80064b8 <RCCEx_PLL2_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051a4:	e015      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051aa:	3328      	adds	r3, #40	@ 0x28
 80051ac:	2101      	movs	r1, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f001 fa34 	bl	800661c <RCCEx_PLL3_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051ba:	e00a      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051c2:	e006      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80051c4:	bf00      	nop
 80051c6:	e004      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80051c8:	bf00      	nop
 80051ca:	e002      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80051cc:	bf00      	nop
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80051d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10e      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051da:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80051e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80051ea:	4a02      	ldr	r2, [pc, #8]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80051f0:	e006      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80051f2:	bf00      	nop
 80051f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800520c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005210:	2300      	movs	r3, #0
 8005212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005216:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800521a:	460b      	mov	r3, r1
 800521c:	4313      	orrs	r3, r2
 800521e:	d037      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800522a:	d00e      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800522c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005230:	d816      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d018      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005236:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800523a:	d111      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800523c:	4bc4      	ldr	r3, [pc, #784]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	4ac3      	ldr	r2, [pc, #780]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005248:	e00f      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800524a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524e:	3308      	adds	r3, #8
 8005250:	2101      	movs	r1, #1
 8005252:	4618      	mov	r0, r3
 8005254:	f001 f930 	bl	80064b8 <RCCEx_PLL2_Config>
 8005258:	4603      	mov	r3, r0
 800525a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800525e:	e004      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005266:	e000      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800526a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005272:	4bb7      	ldr	r3, [pc, #732]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005276:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800527a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005280:	4ab3      	ldr	r2, [pc, #716]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005282:	430b      	orrs	r3, r1
 8005284:	6513      	str	r3, [r2, #80]	@ 0x50
 8005286:	e003      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800528c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800529c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052a0:	2300      	movs	r3, #0
 80052a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80052aa:	460b      	mov	r3, r1
 80052ac:	4313      	orrs	r3, r2
 80052ae:	d039      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d81c      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80052ba:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052fd 	.word	0x080052fd
 80052c4:	080052d1 	.word	0x080052d1
 80052c8:	080052df 	.word	0x080052df
 80052cc:	080052fd 	.word	0x080052fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d0:	4b9f      	ldr	r3, [pc, #636]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d4:	4a9e      	ldr	r2, [pc, #632]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80052dc:	e00f      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e2:	3308      	adds	r3, #8
 80052e4:	2102      	movs	r1, #2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 f8e6 	bl	80064b8 <RCCEx_PLL2_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80052f2:	e004      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052fa:	e000      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80052fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005306:	4b92      	ldr	r3, [pc, #584]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530a:	f023 0103 	bic.w	r1, r3, #3
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005314:	4a8e      	ldr	r2, [pc, #568]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005316:	430b      	orrs	r3, r1
 8005318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800531a:	e003      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005320:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005330:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005334:	2300      	movs	r3, #0
 8005336:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800533a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800533e:	460b      	mov	r3, r1
 8005340:	4313      	orrs	r3, r2
 8005342:	f000 8099 	beq.w	8005478 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005346:	4b83      	ldr	r3, [pc, #524]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a82      	ldr	r2, [pc, #520]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800534c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005350:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005352:	f7fc ff19 	bl	8002188 <HAL_GetTick>
 8005356:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800535a:	e00b      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800535c:	f7fc ff14 	bl	8002188 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b64      	cmp	r3, #100	@ 0x64
 800536a:	d903      	bls.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005372:	e005      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005374:	4b77      	ldr	r3, [pc, #476]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0ed      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005384:	2b00      	cmp	r3, #0
 8005386:	d173      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005388:	4b71      	ldr	r3, [pc, #452]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800538a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005390:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005394:	4053      	eors	r3, r2
 8005396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d015      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800539e:	4b6c      	ldr	r3, [pc, #432]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053aa:	4b69      	ldr	r3, [pc, #420]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ae:	4a68      	ldr	r2, [pc, #416]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053b6:	4b66      	ldr	r3, [pc, #408]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ba:	4a65      	ldr	r2, [pc, #404]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80053c2:	4a63      	ldr	r2, [pc, #396]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80053ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d6:	d118      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fc fed6 	bl	8002188 <HAL_GetTick>
 80053dc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053e0:	e00d      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fc fed1 	bl	8002188 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80053ec:	1ad2      	subs	r2, r2, r3
 80053ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d903      	bls.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80053fc:	e005      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053fe:	4b54      	ldr	r3, [pc, #336]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0eb      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800540a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800540e:	2b00      	cmp	r3, #0
 8005410:	d129      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005416:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800541a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800541e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005422:	d10e      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005424:	4b4a      	ldr	r3, [pc, #296]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005434:	091a      	lsrs	r2, r3, #4
 8005436:	4b48      	ldr	r3, [pc, #288]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005438:	4013      	ands	r3, r2
 800543a:	4a45      	ldr	r2, [pc, #276]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800543c:	430b      	orrs	r3, r1
 800543e:	6113      	str	r3, [r2, #16]
 8005440:	e005      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005442:	4b43      	ldr	r3, [pc, #268]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	4a42      	ldr	r2, [pc, #264]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005448:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800544c:	6113      	str	r3, [r2, #16]
 800544e:	4b40      	ldr	r3, [pc, #256]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005450:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800545a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800545e:	4a3c      	ldr	r2, [pc, #240]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005460:	430b      	orrs	r3, r1
 8005462:	6713      	str	r3, [r2, #112]	@ 0x70
 8005464:	e008      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800546a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005474:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f002 0301 	and.w	r3, r2, #1
 8005484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800548e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005492:	460b      	mov	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	f000 808f 	beq.w	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054a0:	2b28      	cmp	r3, #40	@ 0x28
 80054a2:	d871      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80054a4:	a201      	add	r2, pc, #4	@ (adr r2, 80054ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	08005591 	.word	0x08005591
 80054b0:	08005589 	.word	0x08005589
 80054b4:	08005589 	.word	0x08005589
 80054b8:	08005589 	.word	0x08005589
 80054bc:	08005589 	.word	0x08005589
 80054c0:	08005589 	.word	0x08005589
 80054c4:	08005589 	.word	0x08005589
 80054c8:	08005589 	.word	0x08005589
 80054cc:	0800555d 	.word	0x0800555d
 80054d0:	08005589 	.word	0x08005589
 80054d4:	08005589 	.word	0x08005589
 80054d8:	08005589 	.word	0x08005589
 80054dc:	08005589 	.word	0x08005589
 80054e0:	08005589 	.word	0x08005589
 80054e4:	08005589 	.word	0x08005589
 80054e8:	08005589 	.word	0x08005589
 80054ec:	08005573 	.word	0x08005573
 80054f0:	08005589 	.word	0x08005589
 80054f4:	08005589 	.word	0x08005589
 80054f8:	08005589 	.word	0x08005589
 80054fc:	08005589 	.word	0x08005589
 8005500:	08005589 	.word	0x08005589
 8005504:	08005589 	.word	0x08005589
 8005508:	08005589 	.word	0x08005589
 800550c:	08005591 	.word	0x08005591
 8005510:	08005589 	.word	0x08005589
 8005514:	08005589 	.word	0x08005589
 8005518:	08005589 	.word	0x08005589
 800551c:	08005589 	.word	0x08005589
 8005520:	08005589 	.word	0x08005589
 8005524:	08005589 	.word	0x08005589
 8005528:	08005589 	.word	0x08005589
 800552c:	08005591 	.word	0x08005591
 8005530:	08005589 	.word	0x08005589
 8005534:	08005589 	.word	0x08005589
 8005538:	08005589 	.word	0x08005589
 800553c:	08005589 	.word	0x08005589
 8005540:	08005589 	.word	0x08005589
 8005544:	08005589 	.word	0x08005589
 8005548:	08005589 	.word	0x08005589
 800554c:	08005591 	.word	0x08005591
 8005550:	58024400 	.word	0x58024400
 8005554:	58024800 	.word	0x58024800
 8005558:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005560:	3308      	adds	r3, #8
 8005562:	2101      	movs	r1, #1
 8005564:	4618      	mov	r0, r3
 8005566:	f000 ffa7 	bl	80064b8 <RCCEx_PLL2_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005570:	e00f      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005576:	3328      	adds	r3, #40	@ 0x28
 8005578:	2101      	movs	r1, #1
 800557a:	4618      	mov	r0, r3
 800557c:	f001 f84e 	bl	800661c <RCCEx_PLL3_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005586:	e004      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800558e:	e000      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005592:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800559a:	4bbf      	ldr	r3, [pc, #764]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800559c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80055a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055a8:	4abb      	ldr	r2, [pc, #748]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80055aa:	430b      	orrs	r3, r1
 80055ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80055ae:	e003      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 0302 	and.w	r3, r2, #2
 80055c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4313      	orrs	r3, r2
 80055d6:	d041      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80055d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d824      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80055e2:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	08005635 	.word	0x08005635
 80055ec:	08005601 	.word	0x08005601
 80055f0:	08005617 	.word	0x08005617
 80055f4:	08005635 	.word	0x08005635
 80055f8:	08005635 	.word	0x08005635
 80055fc:	08005635 	.word	0x08005635
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005604:	3308      	adds	r3, #8
 8005606:	2101      	movs	r1, #1
 8005608:	4618      	mov	r0, r3
 800560a:	f000 ff55 	bl	80064b8 <RCCEx_PLL2_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005614:	e00f      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561a:	3328      	adds	r3, #40	@ 0x28
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fffc 	bl	800661c <RCCEx_PLL3_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800562a:	e004      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005632:	e000      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800563e:	4b96      	ldr	r3, [pc, #600]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005642:	f023 0107 	bic.w	r1, r3, #7
 8005646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564c:	4a92      	ldr	r2, [pc, #584]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800564e:	430b      	orrs	r3, r1
 8005650:	6553      	str	r3, [r2, #84]	@ 0x54
 8005652:	e003      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005658:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f002 0304 	and.w	r3, r2, #4
 8005668:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800566c:	2300      	movs	r3, #0
 800566e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005672:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005676:	460b      	mov	r3, r1
 8005678:	4313      	orrs	r3, r2
 800567a:	d044      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800567c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005684:	2b05      	cmp	r3, #5
 8005686:	d825      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005688:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056dd 	.word	0x080056dd
 8005694:	080056a9 	.word	0x080056a9
 8005698:	080056bf 	.word	0x080056bf
 800569c:	080056dd 	.word	0x080056dd
 80056a0:	080056dd 	.word	0x080056dd
 80056a4:	080056dd 	.word	0x080056dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ac:	3308      	adds	r3, #8
 80056ae:	2101      	movs	r1, #1
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 ff01 	bl	80064b8 <RCCEx_PLL2_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056bc:	e00f      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c2:	3328      	adds	r3, #40	@ 0x28
 80056c4:	2101      	movs	r1, #1
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 ffa8 	bl	800661c <RCCEx_PLL3_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056d2:	e004      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056da:	e000      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80056dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056e6:	4b6c      	ldr	r3, [pc, #432]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80056e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ea:	f023 0107 	bic.w	r1, r3, #7
 80056ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f6:	4a68      	ldr	r2, [pc, #416]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80056fc:	e003      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005702:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f002 0320 	and.w	r3, r2, #32
 8005712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005716:	2300      	movs	r3, #0
 8005718:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800571c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005720:	460b      	mov	r3, r1
 8005722:	4313      	orrs	r3, r2
 8005724:	d055      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800572e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005732:	d033      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005738:	d82c      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573e:	d02f      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005744:	d826      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005746:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800574a:	d02b      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800574c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005750:	d820      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005756:	d012      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800575c:	d81a      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d022      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005766:	d115      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576c:	3308      	adds	r3, #8
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fea1 	bl	80064b8 <RCCEx_PLL2_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800577c:	e015      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800577e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005782:	3328      	adds	r3, #40	@ 0x28
 8005784:	2102      	movs	r1, #2
 8005786:	4618      	mov	r0, r3
 8005788:	f000 ff48 	bl	800661c <RCCEx_PLL3_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005792:	e00a      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800579a:	e006      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800579c:	bf00      	nop
 800579e:	e004      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80057a0:	bf00      	nop
 80057a2:	e002      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80057a4:	bf00      	nop
 80057a6:	e000      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80057a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057b2:	4b39      	ldr	r3, [pc, #228]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80057ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057c2:	4a35      	ldr	r2, [pc, #212]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80057c8:	e003      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80057de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057e8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80057ec:	460b      	mov	r3, r1
 80057ee:	4313      	orrs	r3, r2
 80057f0:	d058      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80057f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80057fe:	d033      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005800:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005804:	d82c      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800580a:	d02f      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800580c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005810:	d826      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005812:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005816:	d02b      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005818:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800581c:	d820      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800581e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005822:	d012      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005828:	d81a      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800582a:	2b00      	cmp	r3, #0
 800582c:	d022      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005832:	d115      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005838:	3308      	adds	r3, #8
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fe3b 	bl	80064b8 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005848:	e015      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584e:	3328      	adds	r3, #40	@ 0x28
 8005850:	2102      	movs	r1, #2
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fee2 	bl	800661c <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800585e:	e00a      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005866:	e006      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005868:	bf00      	nop
 800586a:	e004      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800586c:	bf00      	nop
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10e      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800587e:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005882:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800588e:	4a02      	ldr	r2, [pc, #8]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005890:	430b      	orrs	r3, r1
 8005892:	6593      	str	r3, [r2, #88]	@ 0x58
 8005894:	e006      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80058b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058b4:	2300      	movs	r3, #0
 80058b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80058be:	460b      	mov	r3, r1
 80058c0:	4313      	orrs	r3, r2
 80058c2:	d055      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80058c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058d0:	d033      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80058d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058d6:	d82c      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80058d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058dc:	d02f      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80058de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058e2:	d826      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80058e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80058e8:	d02b      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80058ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80058ee:	d820      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80058f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058f4:	d012      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80058f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058fa:	d81a      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d022      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005904:	d115      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590a:	3308      	adds	r3, #8
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fdd2 	bl	80064b8 <RCCEx_PLL2_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800591a:	e015      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005920:	3328      	adds	r3, #40	@ 0x28
 8005922:	2102      	movs	r1, #2
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fe79 	bl	800661c <RCCEx_PLL3_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005930:	e00a      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005938:	e006      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800593a:	bf00      	nop
 800593c:	e004      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800593e:	bf00      	nop
 8005940:	e002      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005942:	bf00      	nop
 8005944:	e000      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005948:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005950:	4ba0      	ldr	r3, [pc, #640]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005954:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005960:	4a9c      	ldr	r2, [pc, #624]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005962:	430b      	orrs	r3, r1
 8005964:	6593      	str	r3, [r2, #88]	@ 0x58
 8005966:	e003      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800596c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f002 0308 	and.w	r3, r2, #8
 800597c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005986:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800598a:	460b      	mov	r3, r1
 800598c:	4313      	orrs	r3, r2
 800598e:	d01e      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800599c:	d10c      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800599e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a2:	3328      	adds	r3, #40	@ 0x28
 80059a4:	2102      	movs	r1, #2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fe38 	bl	800661c <RCCEx_PLL3_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80059b8:	4b86      	ldr	r3, [pc, #536]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c8:	4a82      	ldr	r2, [pc, #520]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059ca:	430b      	orrs	r3, r1
 80059cc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f002 0310 	and.w	r3, r2, #16
 80059da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059de:	2300      	movs	r3, #0
 80059e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80059e8:	460b      	mov	r3, r1
 80059ea:	4313      	orrs	r3, r2
 80059ec:	d01e      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80059ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059fa:	d10c      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a00:	3328      	adds	r3, #40	@ 0x28
 8005a02:	2102      	movs	r1, #2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fe09 	bl	800661c <RCCEx_PLL3_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a16:	4b6f      	ldr	r3, [pc, #444]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a26:	4a6b      	ldr	r2, [pc, #428]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005a38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a3e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005a42:	460b      	mov	r3, r1
 8005a44:	4313      	orrs	r3, r2
 8005a46:	d03e      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a54:	d022      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a5a:	d81b      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a64:	d00b      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005a66:	e015      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fd21 	bl	80064b8 <RCCEx_PLL2_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00f      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a82:	3328      	adds	r3, #40	@ 0x28
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fdc8 	bl	800661c <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a92:	e004      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aaa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ab6:	4a47      	ldr	r2, [pc, #284]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6593      	str	r3, [r2, #88]	@ 0x58
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005ad2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ad8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005adc:	460b      	mov	r3, r1
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	d03b      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aee:	d01f      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005af0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005af4:	d818      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afa:	d003      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005afc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b00:	d007      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005b02:	e011      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b04:	4b33      	ldr	r3, [pc, #204]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	4a32      	ldr	r2, [pc, #200]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b10:	e00f      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b16:	3328      	adds	r3, #40	@ 0x28
 8005b18:	2101      	movs	r1, #1
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fd7e 	bl	800661c <RCCEx_PLL3_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b26:	e004      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b2e:	e000      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b3a:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b4a:	4a22      	ldr	r2, [pc, #136]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b50:	e003      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b68:	2300      	movs	r3, #0
 8005b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b6c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005b70:	460b      	mov	r3, r1
 8005b72:	4313      	orrs	r3, r2
 8005b74:	d034      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b84:	d007      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005b86:	e011      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b88:	4b12      	ldr	r3, [pc, #72]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	4a11      	ldr	r2, [pc, #68]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b94:	e00e      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	2102      	movs	r1, #2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fc8a 	bl	80064b8 <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005baa:	e003      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10d      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005bbc:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bc0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bca:	4a02      	ldr	r2, [pc, #8]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bd0:	e006      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005bec:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bee:	2300      	movs	r3, #0
 8005bf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bf2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	d00c      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	3328      	adds	r3, #40	@ 0x28
 8005c02:	2102      	movs	r1, #2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fd09 	bl	800661c <RCCEx_PLL3_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005c22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c24:	2300      	movs	r3, #0
 8005c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c28:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	d036      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c3c:	d018      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c42:	d811      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c48:	d014      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c4e:	d80b      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d011      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c58:	d106      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c5a:	4bb7      	ldr	r3, [pc, #732]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5e:	4ab6      	ldr	r2, [pc, #728]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005c66:	e008      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c6e:	e004      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005c70:	bf00      	nop
 8005c72:	e002      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005c74:	bf00      	nop
 8005c76:	e000      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c82:	4bad      	ldr	r3, [pc, #692]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c90:	4aa9      	ldr	r2, [pc, #676]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c92:	430b      	orrs	r3, r1
 8005c94:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c96:	e003      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005cac:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cae:	2300      	movs	r3, #0
 8005cb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cbc:	4b9e      	ldr	r3, [pc, #632]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cca:	4a9b      	ldr	r2, [pc, #620]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cde:	2300      	movs	r3, #0
 8005ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ce2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	d009      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cec:	4b92      	ldr	r3, [pc, #584]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cfa:	4a8f      	ldr	r2, [pc, #572]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d0e:	2300      	movs	r3, #0
 8005d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005d16:	460b      	mov	r3, r1
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d1c:	4b86      	ldr	r3, [pc, #536]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	4a85      	ldr	r2, [pc, #532]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d26:	6113      	str	r3, [r2, #16]
 8005d28:	4b83      	ldr	r3, [pc, #524]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d2a:	6919      	ldr	r1, [r3, #16]
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d34:	4a80      	ldr	r2, [pc, #512]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d36:	430b      	orrs	r3, r1
 8005d38:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d48:	2300      	movs	r3, #0
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005d50:	460b      	mov	r3, r1
 8005d52:	4313      	orrs	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d56:	4b78      	ldr	r3, [pc, #480]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d64:	4a74      	ldr	r2, [pc, #464]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d66:	430b      	orrs	r3, r1
 8005d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d78:	2300      	movs	r3, #0
 8005d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d80:	460b      	mov	r3, r1
 8005d82:	4313      	orrs	r3, r2
 8005d84:	d00a      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d86:	4b6c      	ldr	r3, [pc, #432]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d96:	4a68      	ldr	r2, [pc, #416]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	2100      	movs	r1, #0
 8005da6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005db2:	460b      	mov	r3, r1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	d011      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fb79 	bl	80064b8 <RCCEx_PLL2_Config>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	2100      	movs	r1, #0
 8005de6:	6239      	str	r1, [r7, #32]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d011      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	2101      	movs	r1, #1
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fb59 	bl	80064b8 <RCCEx_PLL2_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	2100      	movs	r1, #0
 8005e26:	61b9      	str	r1, [r7, #24]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e32:	460b      	mov	r3, r1
 8005e34:	4313      	orrs	r3, r2
 8005e36:	d011      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	2102      	movs	r1, #2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fb39 	bl	80064b8 <RCCEx_PLL2_Config>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	2100      	movs	r1, #0
 8005e66:	6139      	str	r1, [r7, #16]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e72:	460b      	mov	r3, r1
 8005e74:	4313      	orrs	r3, r2
 8005e76:	d011      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7c:	3328      	adds	r3, #40	@ 0x28
 8005e7e:	2100      	movs	r1, #0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fbcb 	bl	800661c <RCCEx_PLL3_Config>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	d011      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebc:	3328      	adds	r3, #40	@ 0x28
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fbab 	bl	800661c <RCCEx_PLL3_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	6039      	str	r1, [r7, #0]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	607b      	str	r3, [r7, #4]
 8005eee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	d011      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efc:	3328      	adds	r3, #40	@ 0x28
 8005efe:	2102      	movs	r1, #2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fb8b 	bl	800661c <RCCEx_PLL3_Config>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005f1c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e000      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005f30:	46bd      	mov	sp, r7
 8005f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f36:	bf00      	nop
 8005f38:	58024400 	.word	0x58024400

08005f3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f40:	f7fe fe00 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	4904      	ldr	r1, [pc, #16]	@ (8005f64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f52:	5ccb      	ldrb	r3, [r1, r3]
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	58024400 	.word	0x58024400
 8005f64:	0800cc78 	.word	0x0800cc78

08005f68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b089      	sub	sp, #36	@ 0x24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f70:	4ba1      	ldr	r3, [pc, #644]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005f7a:	4b9f      	ldr	r3, [pc, #636]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	0b1b      	lsrs	r3, r3, #12
 8005f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f86:	4b9c      	ldr	r3, [pc, #624]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8a:	091b      	lsrs	r3, r3, #4
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005f92:	4b99      	ldr	r3, [pc, #612]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f96:	08db      	lsrs	r3, r3, #3
 8005f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8111 	beq.w	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	f000 8083 	beq.w	80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	f200 80a1 	bhi.w	8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d056      	beq.n	8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005fd2:	e099      	b.n	8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fd4:	4b88      	ldr	r3, [pc, #544]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d02d      	beq.n	800603c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fe0:	4b85      	ldr	r3, [pc, #532]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	08db      	lsrs	r3, r3, #3
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	4a84      	ldr	r2, [pc, #528]	@ (80061fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005fec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600a:	4b7b      	ldr	r3, [pc, #492]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800600c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601a:	ed97 6a03 	vldr	s12, [r7, #12]
 800601e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800602e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006036:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800603a:	e087      	b.n	800614c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800604a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604e:	4b6a      	ldr	r3, [pc, #424]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006062:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800607e:	e065      	b.n	800614c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800608e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006092:	4b59      	ldr	r3, [pc, #356]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c2:	e043      	b.n	800614c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80060d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d6:	4b48      	ldr	r3, [pc, #288]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006106:	e021      	b.n	800614c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006112:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611a:	4b37      	ldr	r3, [pc, #220]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800611c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612a:	ed97 6a03 	vldr	s12, [r7, #12]
 800612e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800613e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800614a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800614c:	4b2a      	ldr	r3, [pc, #168]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800614e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006150:	0a5b      	lsrs	r3, r3, #9
 8006152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006166:	edd7 6a07 	vldr	s13, [r7, #28]
 800616a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800616e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006172:	ee17 2a90 	vmov	r2, s15
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800617a:	4b1f      	ldr	r3, [pc, #124]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800617c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617e:	0c1b      	lsrs	r3, r3, #16
 8006180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006194:	edd7 6a07 	vldr	s13, [r7, #28]
 8006198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a0:	ee17 2a90 	vmov	r2, s15
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061a8:	4b13      	ldr	r3, [pc, #76]	@ (80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	0e1b      	lsrs	r3, r3, #24
 80061ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ce:	ee17 2a90 	vmov	r2, s15
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061d6:	e008      	b.n	80061ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	609a      	str	r2, [r3, #8]
}
 80061ea:	bf00      	nop
 80061ec:	3724      	adds	r7, #36	@ 0x24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
 80061fc:	03d09000 	.word	0x03d09000
 8006200:	46000000 	.word	0x46000000
 8006204:	4c742400 	.word	0x4c742400
 8006208:	4a742400 	.word	0x4a742400
 800620c:	4bbebc20 	.word	0x4bbebc20

08006210 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006210:	b480      	push	{r7}
 8006212:	b089      	sub	sp, #36	@ 0x24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006218:	4ba1      	ldr	r3, [pc, #644]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006222:	4b9f      	ldr	r3, [pc, #636]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006226:	0d1b      	lsrs	r3, r3, #20
 8006228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800622c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800622e:	4b9c      	ldr	r3, [pc, #624]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800623a:	4b99      	ldr	r3, [pc, #612]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800623c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623e:	08db      	lsrs	r3, r3, #3
 8006240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006252:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8111 	beq.w	8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b02      	cmp	r3, #2
 8006262:	f000 8083 	beq.w	800636c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b02      	cmp	r3, #2
 800626a:	f200 80a1 	bhi.w	80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d056      	beq.n	8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800627a:	e099      	b.n	80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800627c:	4b88      	ldr	r3, [pc, #544]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0320 	and.w	r3, r3, #32
 8006284:	2b00      	cmp	r3, #0
 8006286:	d02d      	beq.n	80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006288:	4b85      	ldr	r3, [pc, #532]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	08db      	lsrs	r3, r3, #3
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	4a84      	ldr	r2, [pc, #528]	@ (80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
 8006298:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b2:	4b7b      	ldr	r3, [pc, #492]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062e2:	e087      	b.n	80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80064ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80062f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f6:	4b6a      	ldr	r3, [pc, #424]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006306:	ed97 6a03 	vldr	s12, [r7, #12]
 800630a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800630e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800631a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006326:	e065      	b.n	80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633a:	4b59      	ldr	r3, [pc, #356]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634a:	ed97 6a03 	vldr	s12, [r7, #12]
 800634e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800635e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800636a:	e043      	b.n	80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006376:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80064b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800637a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637e:	4b48      	ldr	r3, [pc, #288]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006392:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ae:	e021      	b.n	80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c2:	4b37      	ldr	r3, [pc, #220]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80063f4:	4b2a      	ldr	r3, [pc, #168]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	0a5b      	lsrs	r3, r3, #9
 80063fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800640a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800640e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641a:	ee17 2a90 	vmov	r2, s15
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006422:	4b1f      	ldr	r3, [pc, #124]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	0c1b      	lsrs	r3, r3, #16
 8006428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800642c:	ee07 3a90 	vmov	s15, r3
 8006430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006434:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006438:	ee37 7a87 	vadd.f32	s14, s15, s14
 800643c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006448:	ee17 2a90 	vmov	r2, s15
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006450:	4b13      	ldr	r3, [pc, #76]	@ (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006454:	0e1b      	lsrs	r3, r3, #24
 8006456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800646a:	edd7 6a07 	vldr	s13, [r7, #28]
 800646e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006476:	ee17 2a90 	vmov	r2, s15
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800647e:	e008      	b.n	8006492 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	609a      	str	r2, [r3, #8]
}
 8006492:	bf00      	nop
 8006494:	3724      	adds	r7, #36	@ 0x24
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	58024400 	.word	0x58024400
 80064a4:	03d09000 	.word	0x03d09000
 80064a8:	46000000 	.word	0x46000000
 80064ac:	4c742400 	.word	0x4c742400
 80064b0:	4a742400 	.word	0x4a742400
 80064b4:	4bbebc20 	.word	0x4bbebc20

080064b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064c6:	4b53      	ldr	r3, [pc, #332]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80064c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d101      	bne.n	80064d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e099      	b.n	800660a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a4e      	ldr	r2, [pc, #312]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80064dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e2:	f7fb fe51 	bl	8002188 <HAL_GetTick>
 80064e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064e8:	e008      	b.n	80064fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064ea:	f7fb fe4d 	bl	8002188 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e086      	b.n	800660a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064fc:	4b45      	ldr	r3, [pc, #276]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f0      	bne.n	80064ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006508:	4b42      	ldr	r3, [pc, #264]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	031b      	lsls	r3, r3, #12
 8006516:	493f      	ldr	r1, [pc, #252]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006518:	4313      	orrs	r3, r2
 800651a:	628b      	str	r3, [r1, #40]	@ 0x28
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	3b01      	subs	r3, #1
 8006522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	3b01      	subs	r3, #1
 800652c:	025b      	lsls	r3, r3, #9
 800652e:	b29b      	uxth	r3, r3
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	3b01      	subs	r3, #1
 8006538:	041b      	lsls	r3, r3, #16
 800653a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	3b01      	subs	r3, #1
 8006546:	061b      	lsls	r3, r3, #24
 8006548:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800654c:	4931      	ldr	r1, [pc, #196]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 800654e:	4313      	orrs	r3, r2
 8006550:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006552:	4b30      	ldr	r3, [pc, #192]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006556:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	492d      	ldr	r1, [pc, #180]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006560:	4313      	orrs	r3, r2
 8006562:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006564:	4b2b      	ldr	r3, [pc, #172]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006568:	f023 0220 	bic.w	r2, r3, #32
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	4928      	ldr	r1, [pc, #160]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006572:	4313      	orrs	r3, r2
 8006574:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006576:	4b27      	ldr	r3, [pc, #156]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	4a26      	ldr	r2, [pc, #152]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 800657c:	f023 0310 	bic.w	r3, r3, #16
 8006580:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006582:	4b24      	ldr	r3, [pc, #144]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006584:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006586:	4b24      	ldr	r3, [pc, #144]	@ (8006618 <RCCEx_PLL2_Config+0x160>)
 8006588:	4013      	ands	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	69d2      	ldr	r2, [r2, #28]
 800658e:	00d2      	lsls	r2, r2, #3
 8006590:	4920      	ldr	r1, [pc, #128]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006592:	4313      	orrs	r3, r2
 8006594:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006596:	4b1f      	ldr	r3, [pc, #124]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659a:	4a1e      	ldr	r2, [pc, #120]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 800659c:	f043 0310 	orr.w	r3, r3, #16
 80065a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ac:	4a19      	ldr	r2, [pc, #100]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065b4:	e00f      	b.n	80065d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d106      	bne.n	80065ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065bc:	4b15      	ldr	r3, [pc, #84]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c0:	4a14      	ldr	r2, [pc, #80]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065c8:	e005      	b.n	80065d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065ca:	4b12      	ldr	r3, [pc, #72]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ce:	4a11      	ldr	r2, [pc, #68]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a0e      	ldr	r2, [pc, #56]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e2:	f7fb fdd1 	bl	8002188 <HAL_GetTick>
 80065e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065e8:	e008      	b.n	80065fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065ea:	f7fb fdcd 	bl	8002188 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e006      	b.n	800660a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065fc:	4b05      	ldr	r3, [pc, #20]	@ (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	58024400 	.word	0x58024400
 8006618:	ffff0007 	.word	0xffff0007

0800661c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800662a:	4b53      	ldr	r3, [pc, #332]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 800662c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	2b03      	cmp	r3, #3
 8006634:	d101      	bne.n	800663a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e099      	b.n	800676e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800663a:	4b4f      	ldr	r3, [pc, #316]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a4e      	ldr	r2, [pc, #312]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006646:	f7fb fd9f 	bl	8002188 <HAL_GetTick>
 800664a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800664c:	e008      	b.n	8006660 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800664e:	f7fb fd9b 	bl	8002188 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e086      	b.n	800676e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006660:	4b45      	ldr	r3, [pc, #276]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f0      	bne.n	800664e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800666c:	4b42      	ldr	r3, [pc, #264]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 800666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006670:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	051b      	lsls	r3, r3, #20
 800667a:	493f      	ldr	r1, [pc, #252]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 800667c:	4313      	orrs	r3, r2
 800667e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	3b01      	subs	r3, #1
 8006686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	3b01      	subs	r3, #1
 8006690:	025b      	lsls	r3, r3, #9
 8006692:	b29b      	uxth	r3, r3
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	3b01      	subs	r3, #1
 800669c:	041b      	lsls	r3, r3, #16
 800669e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	061b      	lsls	r3, r3, #24
 80066ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80066b0:	4931      	ldr	r1, [pc, #196]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066b6:	4b30      	ldr	r3, [pc, #192]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	492d      	ldr	r1, [pc, #180]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	4928      	ldr	r1, [pc, #160]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066da:	4b27      	ldr	r3, [pc, #156]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	4a26      	ldr	r2, [pc, #152]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066e6:	4b24      	ldr	r3, [pc, #144]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ea:	4b24      	ldr	r3, [pc, #144]	@ (800677c <RCCEx_PLL3_Config+0x160>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	69d2      	ldr	r2, [r2, #28]
 80066f2:	00d2      	lsls	r2, r2, #3
 80066f4:	4920      	ldr	r1, [pc, #128]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006704:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d106      	bne.n	800671a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800670c:	4b1a      	ldr	r3, [pc, #104]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	4a19      	ldr	r2, [pc, #100]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006712:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006716:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006718:	e00f      	b.n	800673a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d106      	bne.n	800672e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006720:	4b15      	ldr	r3, [pc, #84]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006724:	4a14      	ldr	r2, [pc, #80]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006726:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800672a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800672c:	e005      	b.n	800673a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800672e:	4b12      	ldr	r3, [pc, #72]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	4a11      	ldr	r2, [pc, #68]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006734:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006738:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800673a:	4b0f      	ldr	r3, [pc, #60]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a0e      	ldr	r2, [pc, #56]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006746:	f7fb fd1f 	bl	8002188 <HAL_GetTick>
 800674a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800674c:	e008      	b.n	8006760 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800674e:	f7fb fd1b 	bl	8002188 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d901      	bls.n	8006760 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e006      	b.n	800676e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006760:	4b05      	ldr	r3, [pc, #20]	@ (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0f0      	beq.n	800674e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	58024400 	.word	0x58024400
 800677c:	ffff0007 	.word	0xffff0007

08006780 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e049      	b.n	8006826 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fa fdc8 	bl	800133c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f000 fa66 	bl	8006c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <HAL_TIM_PWM_Start+0x24>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	bf14      	ite	ne
 800684c:	2301      	movne	r3, #1
 800684e:	2300      	moveq	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	e03c      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b04      	cmp	r3, #4
 8006858:	d109      	bne.n	800686e <HAL_TIM_PWM_Start+0x3e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b01      	cmp	r3, #1
 8006864:	bf14      	ite	ne
 8006866:	2301      	movne	r3, #1
 8006868:	2300      	moveq	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	e02f      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d109      	bne.n	8006888 <HAL_TIM_PWM_Start+0x58>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b01      	cmp	r3, #1
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e022      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b0c      	cmp	r3, #12
 800688c:	d109      	bne.n	80068a2 <HAL_TIM_PWM_Start+0x72>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b01      	cmp	r3, #1
 8006898:	bf14      	ite	ne
 800689a:	2301      	movne	r3, #1
 800689c:	2300      	moveq	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e015      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d109      	bne.n	80068bc <HAL_TIM_PWM_Start+0x8c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e008      	b.n	80068ce <HAL_TIM_PWM_Start+0x9e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	bf14      	ite	ne
 80068c8:	2301      	movne	r3, #1
 80068ca:	2300      	moveq	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e0ab      	b.n	8006a2e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <HAL_TIM_PWM_Start+0xb6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068e4:	e023      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d104      	bne.n	80068f6 <HAL_TIM_PWM_Start+0xc6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068f4:	e01b      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d104      	bne.n	8006906 <HAL_TIM_PWM_Start+0xd6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006904:	e013      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b0c      	cmp	r3, #12
 800690a:	d104      	bne.n	8006916 <HAL_TIM_PWM_Start+0xe6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006914:	e00b      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b10      	cmp	r3, #16
 800691a:	d104      	bne.n	8006926 <HAL_TIM_PWM_Start+0xf6>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006924:	e003      	b.n	800692e <HAL_TIM_PWM_Start+0xfe>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2202      	movs	r2, #2
 800692a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2201      	movs	r2, #1
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fd2c 	bl	8007394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a3d      	ldr	r2, [pc, #244]	@ (8006a38 <HAL_TIM_PWM_Start+0x208>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <HAL_TIM_PWM_Start+0x13e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a3c      	ldr	r2, [pc, #240]	@ (8006a3c <HAL_TIM_PWM_Start+0x20c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00e      	beq.n	800696e <HAL_TIM_PWM_Start+0x13e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a3a      	ldr	r2, [pc, #232]	@ (8006a40 <HAL_TIM_PWM_Start+0x210>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d009      	beq.n	800696e <HAL_TIM_PWM_Start+0x13e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a39      	ldr	r2, [pc, #228]	@ (8006a44 <HAL_TIM_PWM_Start+0x214>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <HAL_TIM_PWM_Start+0x13e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a37      	ldr	r2, [pc, #220]	@ (8006a48 <HAL_TIM_PWM_Start+0x218>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d101      	bne.n	8006972 <HAL_TIM_PWM_Start+0x142>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <HAL_TIM_PWM_Start+0x144>
 8006972:	2300      	movs	r3, #0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006986:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a2a      	ldr	r2, [pc, #168]	@ (8006a38 <HAL_TIM_PWM_Start+0x208>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d02c      	beq.n	80069ec <HAL_TIM_PWM_Start+0x1bc>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800699a:	d027      	beq.n	80069ec <HAL_TIM_PWM_Start+0x1bc>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a4c <HAL_TIM_PWM_Start+0x21c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d022      	beq.n	80069ec <HAL_TIM_PWM_Start+0x1bc>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a29      	ldr	r2, [pc, #164]	@ (8006a50 <HAL_TIM_PWM_Start+0x220>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d01d      	beq.n	80069ec <HAL_TIM_PWM_Start+0x1bc>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a27      	ldr	r2, [pc, #156]	@ (8006a54 <HAL_TIM_PWM_Start+0x224>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d018      	beq.n	80069ec <HAL_TIM_PWM_Start+0x1bc>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1f      	ldr	r2, [pc, #124]	@ (8006a3c <HAL_TIM_PWM_Start+0x20c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <HAL_TIM_PWM_Start+0x1bc>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a23      	ldr	r2, [pc, #140]	@ (8006a58 <HAL_TIM_PWM_Start+0x228>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <HAL_TIM_PWM_Start+0x1bc>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006a40 <HAL_TIM_PWM_Start+0x210>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <HAL_TIM_PWM_Start+0x1bc>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1f      	ldr	r2, [pc, #124]	@ (8006a5c <HAL_TIM_PWM_Start+0x22c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_TIM_PWM_Start+0x1bc>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006a60 <HAL_TIM_PWM_Start+0x230>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d115      	bne.n	8006a18 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006a64 <HAL_TIM_PWM_Start+0x234>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b06      	cmp	r3, #6
 80069fc:	d015      	beq.n	8006a2a <HAL_TIM_PWM_Start+0x1fa>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a04:	d011      	beq.n	8006a2a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a16:	e008      	b.n	8006a2a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	e000      	b.n	8006a2c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40010400 	.word	0x40010400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	40014400 	.word	0x40014400
 8006a48:	40014800 	.word	0x40014800
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40001800 	.word	0x40001800
 8006a5c:	4000e000 	.word	0x4000e000
 8006a60:	4000e400 	.word	0x4000e400
 8006a64:	00010007 	.word	0x00010007

08006a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e0ff      	b.n	8006c86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b14      	cmp	r3, #20
 8006a92:	f200 80f0 	bhi.w	8006c76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a96:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006af1 	.word	0x08006af1
 8006aa0:	08006c77 	.word	0x08006c77
 8006aa4:	08006c77 	.word	0x08006c77
 8006aa8:	08006c77 	.word	0x08006c77
 8006aac:	08006b31 	.word	0x08006b31
 8006ab0:	08006c77 	.word	0x08006c77
 8006ab4:	08006c77 	.word	0x08006c77
 8006ab8:	08006c77 	.word	0x08006c77
 8006abc:	08006b73 	.word	0x08006b73
 8006ac0:	08006c77 	.word	0x08006c77
 8006ac4:	08006c77 	.word	0x08006c77
 8006ac8:	08006c77 	.word	0x08006c77
 8006acc:	08006bb3 	.word	0x08006bb3
 8006ad0:	08006c77 	.word	0x08006c77
 8006ad4:	08006c77 	.word	0x08006c77
 8006ad8:	08006c77 	.word	0x08006c77
 8006adc:	08006bf5 	.word	0x08006bf5
 8006ae0:	08006c77 	.word	0x08006c77
 8006ae4:	08006c77 	.word	0x08006c77
 8006ae8:	08006c77 	.word	0x08006c77
 8006aec:	08006c35 	.word	0x08006c35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f976 	bl	8006de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0208 	orr.w	r2, r2, #8
 8006b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0204 	bic.w	r2, r2, #4
 8006b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6999      	ldr	r1, [r3, #24]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	619a      	str	r2, [r3, #24]
      break;
 8006b2e:	e0a5      	b.n	8006c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 f9e6 	bl	8006f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6999      	ldr	r1, [r3, #24]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	021a      	lsls	r2, r3, #8
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	619a      	str	r2, [r3, #24]
      break;
 8006b70:	e084      	b.n	8006c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fa4f 	bl	800701c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69da      	ldr	r2, [r3, #28]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0208 	orr.w	r2, r2, #8
 8006b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0204 	bic.w	r2, r2, #4
 8006b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69d9      	ldr	r1, [r3, #28]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	61da      	str	r2, [r3, #28]
      break;
 8006bb0:	e064      	b.n	8006c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fab7 	bl	800712c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69d9      	ldr	r1, [r3, #28]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	021a      	lsls	r2, r3, #8
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	61da      	str	r2, [r3, #28]
      break;
 8006bf2:	e043      	b.n	8006c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fb00 	bl	8007200 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0208 	orr.w	r2, r2, #8
 8006c0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0204 	bic.w	r2, r2, #4
 8006c1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c32:	e023      	b.n	8006c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fb44 	bl	80072c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	021a      	lsls	r2, r3, #8
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c74:	e002      	b.n	8006c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop

08006c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a47      	ldr	r2, [pc, #284]	@ (8006dc0 <TIM_Base_SetConfig+0x130>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cae:	d00f      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a44      	ldr	r2, [pc, #272]	@ (8006dc4 <TIM_Base_SetConfig+0x134>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00b      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a43      	ldr	r2, [pc, #268]	@ (8006dc8 <TIM_Base_SetConfig+0x138>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d007      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a42      	ldr	r2, [pc, #264]	@ (8006dcc <TIM_Base_SetConfig+0x13c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a41      	ldr	r2, [pc, #260]	@ (8006dd0 <TIM_Base_SetConfig+0x140>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d108      	bne.n	8006ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a36      	ldr	r2, [pc, #216]	@ (8006dc0 <TIM_Base_SetConfig+0x130>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d027      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf0:	d023      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a33      	ldr	r2, [pc, #204]	@ (8006dc4 <TIM_Base_SetConfig+0x134>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01f      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a32      	ldr	r2, [pc, #200]	@ (8006dc8 <TIM_Base_SetConfig+0x138>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01b      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a31      	ldr	r2, [pc, #196]	@ (8006dcc <TIM_Base_SetConfig+0x13c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d017      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a30      	ldr	r2, [pc, #192]	@ (8006dd0 <TIM_Base_SetConfig+0x140>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a2f      	ldr	r2, [pc, #188]	@ (8006dd4 <TIM_Base_SetConfig+0x144>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00f      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8006dd8 <TIM_Base_SetConfig+0x148>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2d      	ldr	r2, [pc, #180]	@ (8006ddc <TIM_Base_SetConfig+0x14c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006de0 <TIM_Base_SetConfig+0x150>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_Base_SetConfig+0xaa>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a2b      	ldr	r2, [pc, #172]	@ (8006de4 <TIM_Base_SetConfig+0x154>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d108      	bne.n	8006d4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a14      	ldr	r2, [pc, #80]	@ (8006dc0 <TIM_Base_SetConfig+0x130>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00f      	beq.n	8006d92 <TIM_Base_SetConfig+0x102>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a16      	ldr	r2, [pc, #88]	@ (8006dd0 <TIM_Base_SetConfig+0x140>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00b      	beq.n	8006d92 <TIM_Base_SetConfig+0x102>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a15      	ldr	r2, [pc, #84]	@ (8006dd4 <TIM_Base_SetConfig+0x144>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d007      	beq.n	8006d92 <TIM_Base_SetConfig+0x102>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a14      	ldr	r2, [pc, #80]	@ (8006dd8 <TIM_Base_SetConfig+0x148>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <TIM_Base_SetConfig+0x102>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a13      	ldr	r2, [pc, #76]	@ (8006ddc <TIM_Base_SetConfig+0x14c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d103      	bne.n	8006d9a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f043 0204 	orr.w	r2, r3, #4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	601a      	str	r2, [r3, #0]
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40010000 	.word	0x40010000
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	40010400 	.word	0x40010400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800
 8006de0:	4000e000 	.word	0x4000e000
 8006de4:	4000e400 	.word	0x4000e400

08006de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	f023 0201 	bic.w	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4b37      	ldr	r3, [pc, #220]	@ (8006ef0 <TIM_OC1_SetConfig+0x108>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0303 	bic.w	r3, r3, #3
 8006e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f023 0302 	bic.w	r3, r3, #2
 8006e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef4 <TIM_OC1_SetConfig+0x10c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00f      	beq.n	8006e64 <TIM_OC1_SetConfig+0x7c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a2c      	ldr	r2, [pc, #176]	@ (8006ef8 <TIM_OC1_SetConfig+0x110>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00b      	beq.n	8006e64 <TIM_OC1_SetConfig+0x7c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8006efc <TIM_OC1_SetConfig+0x114>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d007      	beq.n	8006e64 <TIM_OC1_SetConfig+0x7c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a2a      	ldr	r2, [pc, #168]	@ (8006f00 <TIM_OC1_SetConfig+0x118>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_OC1_SetConfig+0x7c>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a29      	ldr	r2, [pc, #164]	@ (8006f04 <TIM_OC1_SetConfig+0x11c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d10c      	bne.n	8006e7e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0308 	bic.w	r3, r3, #8
 8006e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f023 0304 	bic.w	r3, r3, #4
 8006e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef4 <TIM_OC1_SetConfig+0x10c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_OC1_SetConfig+0xbe>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef8 <TIM_OC1_SetConfig+0x110>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_OC1_SetConfig+0xbe>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1a      	ldr	r2, [pc, #104]	@ (8006efc <TIM_OC1_SetConfig+0x114>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_OC1_SetConfig+0xbe>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a19      	ldr	r2, [pc, #100]	@ (8006f00 <TIM_OC1_SetConfig+0x118>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_OC1_SetConfig+0xbe>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a18      	ldr	r2, [pc, #96]	@ (8006f04 <TIM_OC1_SetConfig+0x11c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d111      	bne.n	8006eca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	621a      	str	r2, [r3, #32]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	fffeff8f 	.word	0xfffeff8f
 8006ef4:	40010000 	.word	0x40010000
 8006ef8:	40010400 	.word	0x40010400
 8006efc:	40014000 	.word	0x40014000
 8006f00:	40014400 	.word	0x40014400
 8006f04:	40014800 	.word	0x40014800

08006f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f023 0210 	bic.w	r2, r3, #16
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4b34      	ldr	r3, [pc, #208]	@ (8007004 <TIM_OC2_SetConfig+0xfc>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0320 	bic.w	r3, r3, #32
 8006f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a29      	ldr	r2, [pc, #164]	@ (8007008 <TIM_OC2_SetConfig+0x100>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC2_SetConfig+0x68>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a28      	ldr	r2, [pc, #160]	@ (800700c <TIM_OC2_SetConfig+0x104>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10d      	bne.n	8006f8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007008 <TIM_OC2_SetConfig+0x100>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00f      	beq.n	8006fb4 <TIM_OC2_SetConfig+0xac>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a1d      	ldr	r2, [pc, #116]	@ (800700c <TIM_OC2_SetConfig+0x104>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00b      	beq.n	8006fb4 <TIM_OC2_SetConfig+0xac>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8007010 <TIM_OC2_SetConfig+0x108>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d007      	beq.n	8006fb4 <TIM_OC2_SetConfig+0xac>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8007014 <TIM_OC2_SetConfig+0x10c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d003      	beq.n	8006fb4 <TIM_OC2_SetConfig+0xac>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1a      	ldr	r2, [pc, #104]	@ (8007018 <TIM_OC2_SetConfig+0x110>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d113      	bne.n	8006fdc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	feff8fff 	.word	0xfeff8fff
 8007008:	40010000 	.word	0x40010000
 800700c:	40010400 	.word	0x40010400
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800

0800701c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4b33      	ldr	r3, [pc, #204]	@ (8007114 <TIM_OC3_SetConfig+0xf8>)
 8007048:	4013      	ands	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	4313      	orrs	r3, r2
 8007070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a28      	ldr	r2, [pc, #160]	@ (8007118 <TIM_OC3_SetConfig+0xfc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_OC3_SetConfig+0x66>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a27      	ldr	r2, [pc, #156]	@ (800711c <TIM_OC3_SetConfig+0x100>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d10d      	bne.n	800709e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800709c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007118 <TIM_OC3_SetConfig+0xfc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00f      	beq.n	80070c6 <TIM_OC3_SetConfig+0xaa>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a1c      	ldr	r2, [pc, #112]	@ (800711c <TIM_OC3_SetConfig+0x100>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00b      	beq.n	80070c6 <TIM_OC3_SetConfig+0xaa>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007120 <TIM_OC3_SetConfig+0x104>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d007      	beq.n	80070c6 <TIM_OC3_SetConfig+0xaa>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007124 <TIM_OC3_SetConfig+0x108>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_OC3_SetConfig+0xaa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a19      	ldr	r2, [pc, #100]	@ (8007128 <TIM_OC3_SetConfig+0x10c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d113      	bne.n	80070ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4313      	orrs	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	621a      	str	r2, [r3, #32]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	fffeff8f 	.word	0xfffeff8f
 8007118:	40010000 	.word	0x40010000
 800711c:	40010400 	.word	0x40010400
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800

0800712c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4b24      	ldr	r3, [pc, #144]	@ (80071e8 <TIM_OC4_SetConfig+0xbc>)
 8007158:	4013      	ands	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	031b      	lsls	r3, r3, #12
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a19      	ldr	r2, [pc, #100]	@ (80071ec <TIM_OC4_SetConfig+0xc0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00f      	beq.n	80071ac <TIM_OC4_SetConfig+0x80>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a18      	ldr	r2, [pc, #96]	@ (80071f0 <TIM_OC4_SetConfig+0xc4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00b      	beq.n	80071ac <TIM_OC4_SetConfig+0x80>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a17      	ldr	r2, [pc, #92]	@ (80071f4 <TIM_OC4_SetConfig+0xc8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_OC4_SetConfig+0x80>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a16      	ldr	r2, [pc, #88]	@ (80071f8 <TIM_OC4_SetConfig+0xcc>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_OC4_SetConfig+0x80>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a15      	ldr	r2, [pc, #84]	@ (80071fc <TIM_OC4_SetConfig+0xd0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d109      	bne.n	80071c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	019b      	lsls	r3, r3, #6
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	feff8fff 	.word	0xfeff8fff
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40010400 	.word	0x40010400
 80071f4:	40014000 	.word	0x40014000
 80071f8:	40014400 	.word	0x40014400
 80071fc:	40014800 	.word	0x40014800

08007200 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4b21      	ldr	r3, [pc, #132]	@ (80072b0 <TIM_OC5_SetConfig+0xb0>)
 800722c:	4013      	ands	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007240:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a18      	ldr	r2, [pc, #96]	@ (80072b4 <TIM_OC5_SetConfig+0xb4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00f      	beq.n	8007276 <TIM_OC5_SetConfig+0x76>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a17      	ldr	r2, [pc, #92]	@ (80072b8 <TIM_OC5_SetConfig+0xb8>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d00b      	beq.n	8007276 <TIM_OC5_SetConfig+0x76>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a16      	ldr	r2, [pc, #88]	@ (80072bc <TIM_OC5_SetConfig+0xbc>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d007      	beq.n	8007276 <TIM_OC5_SetConfig+0x76>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a15      	ldr	r2, [pc, #84]	@ (80072c0 <TIM_OC5_SetConfig+0xc0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d003      	beq.n	8007276 <TIM_OC5_SetConfig+0x76>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a14      	ldr	r2, [pc, #80]	@ (80072c4 <TIM_OC5_SetConfig+0xc4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d109      	bne.n	800728a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800727c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	021b      	lsls	r3, r3, #8
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	621a      	str	r2, [r3, #32]
}
 80072a4:	bf00      	nop
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	fffeff8f 	.word	0xfffeff8f
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40010400 	.word	0x40010400
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40014400 	.word	0x40014400
 80072c4:	40014800 	.word	0x40014800

080072c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4b22      	ldr	r3, [pc, #136]	@ (800737c <TIM_OC6_SetConfig+0xb4>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800730a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	051b      	lsls	r3, r3, #20
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a19      	ldr	r2, [pc, #100]	@ (8007380 <TIM_OC6_SetConfig+0xb8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00f      	beq.n	8007340 <TIM_OC6_SetConfig+0x78>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a18      	ldr	r2, [pc, #96]	@ (8007384 <TIM_OC6_SetConfig+0xbc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00b      	beq.n	8007340 <TIM_OC6_SetConfig+0x78>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a17      	ldr	r2, [pc, #92]	@ (8007388 <TIM_OC6_SetConfig+0xc0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d007      	beq.n	8007340 <TIM_OC6_SetConfig+0x78>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a16      	ldr	r2, [pc, #88]	@ (800738c <TIM_OC6_SetConfig+0xc4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_OC6_SetConfig+0x78>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a15      	ldr	r2, [pc, #84]	@ (8007390 <TIM_OC6_SetConfig+0xc8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d109      	bne.n	8007354 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007346:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	029b      	lsls	r3, r3, #10
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	feff8fff 	.word	0xfeff8fff
 8007380:	40010000 	.word	0x40010000
 8007384:	40010400 	.word	0x40010400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	2201      	movs	r2, #1
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1a      	ldr	r2, [r3, #32]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	43db      	mvns	r3, r3
 80073b6:	401a      	ands	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1a      	ldr	r2, [r3, #32]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	431a      	orrs	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e077      	b.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a35      	ldr	r2, [pc, #212]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a34      	ldr	r2, [pc, #208]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d108      	bne.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007432:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007444:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a25      	ldr	r2, [pc, #148]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d02c      	beq.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800746a:	d027      	beq.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a22      	ldr	r2, [pc, #136]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d022      	beq.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a21      	ldr	r2, [pc, #132]	@ (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d01d      	beq.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1f      	ldr	r2, [pc, #124]	@ (8007504 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d018      	beq.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1a      	ldr	r2, [pc, #104]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a1b      	ldr	r2, [pc, #108]	@ (8007508 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00e      	beq.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a1a      	ldr	r2, [pc, #104]	@ (800750c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d009      	beq.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a18      	ldr	r2, [pc, #96]	@ (8007510 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a17      	ldr	r2, [pc, #92]	@ (8007514 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d10c      	bne.n	80074d6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40010400 	.word	0x40010400
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800
 8007504:	40000c00 	.word	0x40000c00
 8007508:	40001800 	.word	0x40001800
 800750c:	40014000 	.word	0x40014000
 8007510:	4000e000 	.word	0x4000e000
 8007514:	4000e400 	.word	0x4000e400

08007518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007530:	2302      	movs	r3, #2
 8007532:	e073      	b.n	800761c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a19      	ldr	r2, [pc, #100]	@ (8007628 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d004      	beq.n	80075d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a18      	ldr	r2, [pc, #96]	@ (800762c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d11c      	bne.n	800760a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075da:	051b      	lsls	r3, r3, #20
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	40010000 	.word	0x40010000
 800762c:	40010400 	.word	0x40010400

08007630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e042      	b.n	80076c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7f9 fecf 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2224      	movs	r2, #36	@ 0x24
 800765e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 fbe0 	bl	8008e40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fd71 	bl	8008168 <UART_SetConfig>
 8007686:	4603      	mov	r3, r0
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e01b      	b.n	80076c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800769e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 fc5f 	bl	8008f84 <UART_CheckIdleState>
 80076c6:	4603      	mov	r3, r0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	@ 0x28
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d17b      	bne.n	80077e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_UART_Transmit+0x26>
 80076f0:	88fb      	ldrh	r3, [r7, #6]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e074      	b.n	80077e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2221      	movs	r2, #33	@ 0x21
 8007706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800770a:	f7fa fd3d 	bl	8002188 <HAL_GetTick>
 800770e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007728:	d108      	bne.n	800773c <HAL_UART_Transmit+0x6c>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	61bb      	str	r3, [r7, #24]
 800773a:	e003      	b.n	8007744 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007744:	e030      	b.n	80077a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2200      	movs	r2, #0
 800774e:	2180      	movs	r1, #128	@ 0x80
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f001 fcc1 	bl	80090d8 <UART_WaitOnFlagUntilTimeout>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e03d      	b.n	80077e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800777c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	3302      	adds	r3, #2
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	e007      	b.n	8007796 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	3301      	adds	r3, #1
 8007794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1c8      	bne.n	8007746 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2140      	movs	r1, #64	@ 0x40
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f001 fc8a 	bl	80090d8 <UART_WaitOnFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e006      	b.n	80077e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	e000      	b.n	80077e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077e2:	2302      	movs	r3, #2
  }
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3720      	adds	r7, #32
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	@ 0x28
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	4613      	mov	r3, r2
 80077fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007802:	2b20      	cmp	r3, #32
 8007804:	f040 80b5 	bne.w	8007972 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_UART_Receive+0x28>
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0ad      	b.n	8007974 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2222      	movs	r2, #34	@ 0x22
 8007824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800782e:	f7fa fcab 	bl	8002188 <HAL_GetTick>
 8007832:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	88fa      	ldrh	r2, [r7, #6]
 8007838:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	88fa      	ldrh	r2, [r7, #6]
 8007840:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800784c:	d10e      	bne.n	800786c <HAL_UART_Receive+0x80>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d105      	bne.n	8007862 <HAL_UART_Receive+0x76>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800785c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007860:	e02d      	b.n	80078be <HAL_UART_Receive+0xd2>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	22ff      	movs	r2, #255	@ 0xff
 8007866:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800786a:	e028      	b.n	80078be <HAL_UART_Receive+0xd2>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10d      	bne.n	8007890 <HAL_UART_Receive+0xa4>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d104      	bne.n	8007886 <HAL_UART_Receive+0x9a>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	22ff      	movs	r2, #255	@ 0xff
 8007880:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007884:	e01b      	b.n	80078be <HAL_UART_Receive+0xd2>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	227f      	movs	r2, #127	@ 0x7f
 800788a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800788e:	e016      	b.n	80078be <HAL_UART_Receive+0xd2>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007898:	d10d      	bne.n	80078b6 <HAL_UART_Receive+0xca>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d104      	bne.n	80078ac <HAL_UART_Receive+0xc0>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	227f      	movs	r2, #127	@ 0x7f
 80078a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078aa:	e008      	b.n	80078be <HAL_UART_Receive+0xd2>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	223f      	movs	r2, #63	@ 0x3f
 80078b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80078b4:	e003      	b.n	80078be <HAL_UART_Receive+0xd2>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078c4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ce:	d108      	bne.n	80078e2 <HAL_UART_Receive+0xf6>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d104      	bne.n	80078e2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	61bb      	str	r3, [r7, #24]
 80078e0:	e003      	b.n	80078ea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80078ea:	e036      	b.n	800795a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2200      	movs	r2, #0
 80078f4:	2120      	movs	r1, #32
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f001 fbee 	bl	80090d8 <UART_WaitOnFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e032      	b.n	8007974 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10c      	bne.n	800792e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791a:	b29a      	uxth	r2, r3
 800791c:	8a7b      	ldrh	r3, [r7, #18]
 800791e:	4013      	ands	r3, r2
 8007920:	b29a      	uxth	r2, r3
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	3302      	adds	r3, #2
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	e00c      	b.n	8007948 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007934:	b2da      	uxtb	r2, r3
 8007936:	8a7b      	ldrh	r3, [r7, #18]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	4013      	ands	r3, r2
 800793c:	b2da      	uxtb	r2, r3
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3301      	adds	r3, #1
 8007946:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800794e:	b29b      	uxth	r3, r3
 8007950:	3b01      	subs	r3, #1
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1c2      	bne.n	80078ec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2220      	movs	r2, #32
 800796a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	e000      	b.n	8007974 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007972:	2302      	movs	r3, #2
  }
}
 8007974:	4618      	mov	r0, r3
 8007976:	3720      	adds	r7, #32
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b0ba      	sub	sp, #232	@ 0xe8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80079a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80079aa:	4013      	ands	r3, r2
 80079ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80079b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d11b      	bne.n	80079f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d015      	beq.n	80079f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c8:	f003 0320 	and.w	r3, r3, #32
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d105      	bne.n	80079dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8393 	beq.w	800810c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
      }
      return;
 80079ee:	e38d      	b.n	800810c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8123 	beq.w	8007c40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80079fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80079fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007c34 <HAL_UART_IRQHandler+0x2b8>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007a0a:	4b8b      	ldr	r3, [pc, #556]	@ (8007c38 <HAL_UART_IRQHandler+0x2bc>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 8116 	beq.w	8007c40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d011      	beq.n	8007a44 <HAL_UART_IRQHandler+0xc8>
 8007a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2201      	movs	r2, #1
 8007a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a3a:	f043 0201 	orr.w	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d011      	beq.n	8007a74 <HAL_UART_IRQHandler+0xf8>
 8007a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2202      	movs	r2, #2
 8007a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d011      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x128>
 8007a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2204      	movs	r2, #4
 8007a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9a:	f043 0202 	orr.w	r2, r3, #2
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa8:	f003 0308 	and.w	r3, r3, #8
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d017      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d105      	bne.n	8007ac8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007abc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8007c34 <HAL_UART_IRQHandler+0x2b8>)
 8007ac2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2208      	movs	r2, #8
 8007ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad6:	f043 0208 	orr.w	r2, r3, #8
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d012      	beq.n	8007b12 <HAL_UART_IRQHandler+0x196>
 8007aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00c      	beq.n	8007b12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b08:	f043 0220 	orr.w	r2, r3, #32
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 82f9 	beq.w	8008110 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d013      	beq.n	8007b52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d105      	bne.n	8007b42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b66:	2b40      	cmp	r3, #64	@ 0x40
 8007b68:	d005      	beq.n	8007b76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d054      	beq.n	8007c20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 fc3e 	bl	80093f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b86:	2b40      	cmp	r3, #64	@ 0x40
 8007b88:	d146      	bne.n	8007c18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3308      	adds	r3, #8
 8007b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1d9      	bne.n	8007b8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d017      	beq.n	8007c10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be6:	4a15      	ldr	r2, [pc, #84]	@ (8007c3c <HAL_UART_IRQHandler+0x2c0>)
 8007be8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fa ff9f 	bl	8002b34 <HAL_DMA_Abort_IT>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d019      	beq.n	8007c30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0e:	e00f      	b.n	8007c30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fa93 	bl	800813c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c16:	e00b      	b.n	8007c30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fa8f 	bl	800813c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c1e:	e007      	b.n	8007c30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fa8b 	bl	800813c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007c2e:	e26f      	b.n	8008110 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c30:	bf00      	nop
    return;
 8007c32:	e26d      	b.n	8008110 <HAL_UART_IRQHandler+0x794>
 8007c34:	10000001 	.word	0x10000001
 8007c38:	04000120 	.word	0x04000120
 8007c3c:	080094c5 	.word	0x080094c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	f040 8203 	bne.w	8008050 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c4e:	f003 0310 	and.w	r3, r3, #16
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 81fc 	beq.w	8008050 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 81f5 	beq.w	8008050 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c78:	2b40      	cmp	r3, #64	@ 0x40
 8007c7a:	f040 816d 	bne.w	8007f58 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4aa4      	ldr	r2, [pc, #656]	@ (8007f18 <HAL_UART_IRQHandler+0x59c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d068      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4aa1      	ldr	r2, [pc, #644]	@ (8007f1c <HAL_UART_IRQHandler+0x5a0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d061      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a9f      	ldr	r2, [pc, #636]	@ (8007f20 <HAL_UART_IRQHandler+0x5a4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d05a      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a9c      	ldr	r2, [pc, #624]	@ (8007f24 <HAL_UART_IRQHandler+0x5a8>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d053      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a9a      	ldr	r2, [pc, #616]	@ (8007f28 <HAL_UART_IRQHandler+0x5ac>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d04c      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a97      	ldr	r2, [pc, #604]	@ (8007f2c <HAL_UART_IRQHandler+0x5b0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d045      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a95      	ldr	r2, [pc, #596]	@ (8007f30 <HAL_UART_IRQHandler+0x5b4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d03e      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a92      	ldr	r2, [pc, #584]	@ (8007f34 <HAL_UART_IRQHandler+0x5b8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d037      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a90      	ldr	r2, [pc, #576]	@ (8007f38 <HAL_UART_IRQHandler+0x5bc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d030      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a8d      	ldr	r2, [pc, #564]	@ (8007f3c <HAL_UART_IRQHandler+0x5c0>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d029      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a8b      	ldr	r2, [pc, #556]	@ (8007f40 <HAL_UART_IRQHandler+0x5c4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d022      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a88      	ldr	r2, [pc, #544]	@ (8007f44 <HAL_UART_IRQHandler+0x5c8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d01b      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a86      	ldr	r2, [pc, #536]	@ (8007f48 <HAL_UART_IRQHandler+0x5cc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d014      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a83      	ldr	r2, [pc, #524]	@ (8007f4c <HAL_UART_IRQHandler+0x5d0>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00d      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a81      	ldr	r2, [pc, #516]	@ (8007f50 <HAL_UART_IRQHandler+0x5d4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d006      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3e2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a7e      	ldr	r2, [pc, #504]	@ (8007f54 <HAL_UART_IRQHandler+0x5d8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d106      	bne.n	8007d6c <HAL_UART_IRQHandler+0x3f0>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	e005      	b.n	8007d78 <HAL_UART_IRQHandler+0x3fc>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80ad 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d90:	429a      	cmp	r2, r3
 8007d92:	f080 80a5 	bcs.w	8007ee0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dac:	f000 8087 	beq.w	8007ebe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007dde:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007de6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1da      	bne.n	8007db0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e1      	bne.n	8007dfa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e3      	bne.n	8007e36 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e8c:	f023 0310 	bic.w	r3, r3, #16
 8007e90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ea0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ea4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e4      	bne.n	8007e7c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fa fb1d 	bl	80024f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f939 	bl	8008150 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007ede:	e119      	b.n	8008114 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007eea:	429a      	cmp	r2, r3
 8007eec:	f040 8112 	bne.w	8008114 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007efc:	f040 810a 	bne.w	8008114 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f91e 	bl	8008150 <HAL_UARTEx_RxEventCallback>
      return;
 8007f14:	e0fe      	b.n	8008114 <HAL_UART_IRQHandler+0x798>
 8007f16:	bf00      	nop
 8007f18:	40020010 	.word	0x40020010
 8007f1c:	40020028 	.word	0x40020028
 8007f20:	40020040 	.word	0x40020040
 8007f24:	40020058 	.word	0x40020058
 8007f28:	40020070 	.word	0x40020070
 8007f2c:	40020088 	.word	0x40020088
 8007f30:	400200a0 	.word	0x400200a0
 8007f34:	400200b8 	.word	0x400200b8
 8007f38:	40020410 	.word	0x40020410
 8007f3c:	40020428 	.word	0x40020428
 8007f40:	40020440 	.word	0x40020440
 8007f44:	40020458 	.word	0x40020458
 8007f48:	40020470 	.word	0x40020470
 8007f4c:	40020488 	.word	0x40020488
 8007f50:	400204a0 	.word	0x400204a0
 8007f54:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80cf 	beq.w	8008118 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007f7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80ca 	beq.w	8008118 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fa8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e4      	bne.n	8007f84 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fca:	6a3a      	ldr	r2, [r7, #32]
 8007fcc:	4b55      	ldr	r3, [pc, #340]	@ (8008124 <HAL_UART_IRQHandler+0x7a8>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fde:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e3      	bne.n	8007fba <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	60fb      	str	r3, [r7, #12]
   return(result);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0310 	bic.w	r3, r3, #16
 800801a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008028:	61fb      	str	r3, [r7, #28]
 800802a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	69b9      	ldr	r1, [r7, #24]
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	617b      	str	r3, [r7, #20]
   return(result);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e4      	bne.n	8008006 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008042:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f881 	bl	8008150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800804e:	e063      	b.n	8008118 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00e      	beq.n	800807a <HAL_UART_IRQHandler+0x6fe>
 800805c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d008      	beq.n	800807a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 ff84 	bl	8009f80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008078:	e051      	b.n	800811e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800807a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800807e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008082:	2b00      	cmp	r3, #0
 8008084:	d014      	beq.n	80080b0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800808a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800808e:	2b00      	cmp	r3, #0
 8008090:	d105      	bne.n	800809e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008096:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d008      	beq.n	80080b0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d03a      	beq.n	800811c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	4798      	blx	r3
    }
    return;
 80080ae:	e035      	b.n	800811c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d009      	beq.n	80080d0 <HAL_UART_IRQHandler+0x754>
 80080bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fa0d 	bl	80094e8 <UART_EndTransmit_IT>
    return;
 80080ce:	e026      	b.n	800811e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d009      	beq.n	80080f0 <HAL_UART_IRQHandler+0x774>
 80080dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 ff5d 	bl	8009fa8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080ee:	e016      	b.n	800811e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d010      	beq.n	800811e <HAL_UART_IRQHandler+0x7a2>
 80080fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008100:	2b00      	cmp	r3, #0
 8008102:	da0c      	bge.n	800811e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 ff45 	bl	8009f94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800810a:	e008      	b.n	800811e <HAL_UART_IRQHandler+0x7a2>
      return;
 800810c:	bf00      	nop
 800810e:	e006      	b.n	800811e <HAL_UART_IRQHandler+0x7a2>
    return;
 8008110:	bf00      	nop
 8008112:	e004      	b.n	800811e <HAL_UART_IRQHandler+0x7a2>
      return;
 8008114:	bf00      	nop
 8008116:	e002      	b.n	800811e <HAL_UART_IRQHandler+0x7a2>
      return;
 8008118:	bf00      	nop
 800811a:	e000      	b.n	800811e <HAL_UART_IRQHandler+0x7a2>
    return;
 800811c:	bf00      	nop
  }
}
 800811e:	37e8      	adds	r7, #232	@ 0xe8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	effffffe 	.word	0xeffffffe

08008128 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800816c:	b092      	sub	sp, #72	@ 0x48
 800816e:	af00      	add	r7, sp, #0
 8008170:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	431a      	orrs	r2, r3
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	431a      	orrs	r2, r3
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	4313      	orrs	r3, r2
 800818e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	4bbe      	ldr	r3, [pc, #760]	@ (8008490 <UART_SetConfig+0x328>)
 8008198:	4013      	ands	r3, r2
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	6812      	ldr	r2, [r2, #0]
 800819e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081a0:	430b      	orrs	r3, r1
 80081a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4ab3      	ldr	r2, [pc, #716]	@ (8008494 <UART_SetConfig+0x32c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d004      	beq.n	80081d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081d0:	4313      	orrs	r3, r2
 80081d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	4baf      	ldr	r3, [pc, #700]	@ (8008498 <UART_SetConfig+0x330>)
 80081dc:	4013      	ands	r3, r2
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	6812      	ldr	r2, [r2, #0]
 80081e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081e4:	430b      	orrs	r3, r1
 80081e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ee:	f023 010f 	bic.w	r1, r3, #15
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4aa6      	ldr	r2, [pc, #664]	@ (800849c <UART_SetConfig+0x334>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d177      	bne.n	80082f8 <UART_SetConfig+0x190>
 8008208:	4ba5      	ldr	r3, [pc, #660]	@ (80084a0 <UART_SetConfig+0x338>)
 800820a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800820c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008210:	2b28      	cmp	r3, #40	@ 0x28
 8008212:	d86d      	bhi.n	80082f0 <UART_SetConfig+0x188>
 8008214:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <UART_SetConfig+0xb4>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	080082c1 	.word	0x080082c1
 8008220:	080082f1 	.word	0x080082f1
 8008224:	080082f1 	.word	0x080082f1
 8008228:	080082f1 	.word	0x080082f1
 800822c:	080082f1 	.word	0x080082f1
 8008230:	080082f1 	.word	0x080082f1
 8008234:	080082f1 	.word	0x080082f1
 8008238:	080082f1 	.word	0x080082f1
 800823c:	080082c9 	.word	0x080082c9
 8008240:	080082f1 	.word	0x080082f1
 8008244:	080082f1 	.word	0x080082f1
 8008248:	080082f1 	.word	0x080082f1
 800824c:	080082f1 	.word	0x080082f1
 8008250:	080082f1 	.word	0x080082f1
 8008254:	080082f1 	.word	0x080082f1
 8008258:	080082f1 	.word	0x080082f1
 800825c:	080082d1 	.word	0x080082d1
 8008260:	080082f1 	.word	0x080082f1
 8008264:	080082f1 	.word	0x080082f1
 8008268:	080082f1 	.word	0x080082f1
 800826c:	080082f1 	.word	0x080082f1
 8008270:	080082f1 	.word	0x080082f1
 8008274:	080082f1 	.word	0x080082f1
 8008278:	080082f1 	.word	0x080082f1
 800827c:	080082d9 	.word	0x080082d9
 8008280:	080082f1 	.word	0x080082f1
 8008284:	080082f1 	.word	0x080082f1
 8008288:	080082f1 	.word	0x080082f1
 800828c:	080082f1 	.word	0x080082f1
 8008290:	080082f1 	.word	0x080082f1
 8008294:	080082f1 	.word	0x080082f1
 8008298:	080082f1 	.word	0x080082f1
 800829c:	080082e1 	.word	0x080082e1
 80082a0:	080082f1 	.word	0x080082f1
 80082a4:	080082f1 	.word	0x080082f1
 80082a8:	080082f1 	.word	0x080082f1
 80082ac:	080082f1 	.word	0x080082f1
 80082b0:	080082f1 	.word	0x080082f1
 80082b4:	080082f1 	.word	0x080082f1
 80082b8:	080082f1 	.word	0x080082f1
 80082bc:	080082e9 	.word	0x080082e9
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e326      	b.n	8008916 <UART_SetConfig+0x7ae>
 80082c8:	2304      	movs	r3, #4
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e322      	b.n	8008916 <UART_SetConfig+0x7ae>
 80082d0:	2308      	movs	r3, #8
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e31e      	b.n	8008916 <UART_SetConfig+0x7ae>
 80082d8:	2310      	movs	r3, #16
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082de:	e31a      	b.n	8008916 <UART_SetConfig+0x7ae>
 80082e0:	2320      	movs	r3, #32
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e6:	e316      	b.n	8008916 <UART_SetConfig+0x7ae>
 80082e8:	2340      	movs	r3, #64	@ 0x40
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ee:	e312      	b.n	8008916 <UART_SetConfig+0x7ae>
 80082f0:	2380      	movs	r3, #128	@ 0x80
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f6:	e30e      	b.n	8008916 <UART_SetConfig+0x7ae>
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a69      	ldr	r2, [pc, #420]	@ (80084a4 <UART_SetConfig+0x33c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d130      	bne.n	8008364 <UART_SetConfig+0x1fc>
 8008302:	4b67      	ldr	r3, [pc, #412]	@ (80084a0 <UART_SetConfig+0x338>)
 8008304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	2b05      	cmp	r3, #5
 800830c:	d826      	bhi.n	800835c <UART_SetConfig+0x1f4>
 800830e:	a201      	add	r2, pc, #4	@ (adr r2, 8008314 <UART_SetConfig+0x1ac>)
 8008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008314:	0800832d 	.word	0x0800832d
 8008318:	08008335 	.word	0x08008335
 800831c:	0800833d 	.word	0x0800833d
 8008320:	08008345 	.word	0x08008345
 8008324:	0800834d 	.word	0x0800834d
 8008328:	08008355 	.word	0x08008355
 800832c:	2300      	movs	r3, #0
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008332:	e2f0      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008334:	2304      	movs	r3, #4
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833a:	e2ec      	b.n	8008916 <UART_SetConfig+0x7ae>
 800833c:	2308      	movs	r3, #8
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008342:	e2e8      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008344:	2310      	movs	r3, #16
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834a:	e2e4      	b.n	8008916 <UART_SetConfig+0x7ae>
 800834c:	2320      	movs	r3, #32
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008352:	e2e0      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008354:	2340      	movs	r3, #64	@ 0x40
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835a:	e2dc      	b.n	8008916 <UART_SetConfig+0x7ae>
 800835c:	2380      	movs	r3, #128	@ 0x80
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008362:	e2d8      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a4f      	ldr	r2, [pc, #316]	@ (80084a8 <UART_SetConfig+0x340>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d130      	bne.n	80083d0 <UART_SetConfig+0x268>
 800836e:	4b4c      	ldr	r3, [pc, #304]	@ (80084a0 <UART_SetConfig+0x338>)
 8008370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	2b05      	cmp	r3, #5
 8008378:	d826      	bhi.n	80083c8 <UART_SetConfig+0x260>
 800837a:	a201      	add	r2, pc, #4	@ (adr r2, 8008380 <UART_SetConfig+0x218>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	08008399 	.word	0x08008399
 8008384:	080083a1 	.word	0x080083a1
 8008388:	080083a9 	.word	0x080083a9
 800838c:	080083b1 	.word	0x080083b1
 8008390:	080083b9 	.word	0x080083b9
 8008394:	080083c1 	.word	0x080083c1
 8008398:	2300      	movs	r3, #0
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839e:	e2ba      	b.n	8008916 <UART_SetConfig+0x7ae>
 80083a0:	2304      	movs	r3, #4
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a6:	e2b6      	b.n	8008916 <UART_SetConfig+0x7ae>
 80083a8:	2308      	movs	r3, #8
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ae:	e2b2      	b.n	8008916 <UART_SetConfig+0x7ae>
 80083b0:	2310      	movs	r3, #16
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b6:	e2ae      	b.n	8008916 <UART_SetConfig+0x7ae>
 80083b8:	2320      	movs	r3, #32
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083be:	e2aa      	b.n	8008916 <UART_SetConfig+0x7ae>
 80083c0:	2340      	movs	r3, #64	@ 0x40
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c6:	e2a6      	b.n	8008916 <UART_SetConfig+0x7ae>
 80083c8:	2380      	movs	r3, #128	@ 0x80
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ce:	e2a2      	b.n	8008916 <UART_SetConfig+0x7ae>
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a35      	ldr	r2, [pc, #212]	@ (80084ac <UART_SetConfig+0x344>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d130      	bne.n	800843c <UART_SetConfig+0x2d4>
 80083da:	4b31      	ldr	r3, [pc, #196]	@ (80084a0 <UART_SetConfig+0x338>)
 80083dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d826      	bhi.n	8008434 <UART_SetConfig+0x2cc>
 80083e6:	a201      	add	r2, pc, #4	@ (adr r2, 80083ec <UART_SetConfig+0x284>)
 80083e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ec:	08008405 	.word	0x08008405
 80083f0:	0800840d 	.word	0x0800840d
 80083f4:	08008415 	.word	0x08008415
 80083f8:	0800841d 	.word	0x0800841d
 80083fc:	08008425 	.word	0x08008425
 8008400:	0800842d 	.word	0x0800842d
 8008404:	2300      	movs	r3, #0
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840a:	e284      	b.n	8008916 <UART_SetConfig+0x7ae>
 800840c:	2304      	movs	r3, #4
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008412:	e280      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008414:	2308      	movs	r3, #8
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841a:	e27c      	b.n	8008916 <UART_SetConfig+0x7ae>
 800841c:	2310      	movs	r3, #16
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008422:	e278      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008424:	2320      	movs	r3, #32
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842a:	e274      	b.n	8008916 <UART_SetConfig+0x7ae>
 800842c:	2340      	movs	r3, #64	@ 0x40
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008432:	e270      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008434:	2380      	movs	r3, #128	@ 0x80
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843a:	e26c      	b.n	8008916 <UART_SetConfig+0x7ae>
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a1b      	ldr	r2, [pc, #108]	@ (80084b0 <UART_SetConfig+0x348>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d142      	bne.n	80084cc <UART_SetConfig+0x364>
 8008446:	4b16      	ldr	r3, [pc, #88]	@ (80084a0 <UART_SetConfig+0x338>)
 8008448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	2b05      	cmp	r3, #5
 8008450:	d838      	bhi.n	80084c4 <UART_SetConfig+0x35c>
 8008452:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <UART_SetConfig+0x2f0>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	08008471 	.word	0x08008471
 800845c:	08008479 	.word	0x08008479
 8008460:	08008481 	.word	0x08008481
 8008464:	08008489 	.word	0x08008489
 8008468:	080084b5 	.word	0x080084b5
 800846c:	080084bd 	.word	0x080084bd
 8008470:	2300      	movs	r3, #0
 8008472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008476:	e24e      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008478:	2304      	movs	r3, #4
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847e:	e24a      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008480:	2308      	movs	r3, #8
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008486:	e246      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008488:	2310      	movs	r3, #16
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848e:	e242      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008490:	cfff69f3 	.word	0xcfff69f3
 8008494:	58000c00 	.word	0x58000c00
 8008498:	11fff4ff 	.word	0x11fff4ff
 800849c:	40011000 	.word	0x40011000
 80084a0:	58024400 	.word	0x58024400
 80084a4:	40004400 	.word	0x40004400
 80084a8:	40004800 	.word	0x40004800
 80084ac:	40004c00 	.word	0x40004c00
 80084b0:	40005000 	.word	0x40005000
 80084b4:	2320      	movs	r3, #32
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e22c      	b.n	8008916 <UART_SetConfig+0x7ae>
 80084bc:	2340      	movs	r3, #64	@ 0x40
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e228      	b.n	8008916 <UART_SetConfig+0x7ae>
 80084c4:	2380      	movs	r3, #128	@ 0x80
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ca:	e224      	b.n	8008916 <UART_SetConfig+0x7ae>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4ab1      	ldr	r2, [pc, #708]	@ (8008798 <UART_SetConfig+0x630>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d176      	bne.n	80085c4 <UART_SetConfig+0x45c>
 80084d6:	4bb1      	ldr	r3, [pc, #708]	@ (800879c <UART_SetConfig+0x634>)
 80084d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084de:	2b28      	cmp	r3, #40	@ 0x28
 80084e0:	d86c      	bhi.n	80085bc <UART_SetConfig+0x454>
 80084e2:	a201      	add	r2, pc, #4	@ (adr r2, 80084e8 <UART_SetConfig+0x380>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	0800858d 	.word	0x0800858d
 80084ec:	080085bd 	.word	0x080085bd
 80084f0:	080085bd 	.word	0x080085bd
 80084f4:	080085bd 	.word	0x080085bd
 80084f8:	080085bd 	.word	0x080085bd
 80084fc:	080085bd 	.word	0x080085bd
 8008500:	080085bd 	.word	0x080085bd
 8008504:	080085bd 	.word	0x080085bd
 8008508:	08008595 	.word	0x08008595
 800850c:	080085bd 	.word	0x080085bd
 8008510:	080085bd 	.word	0x080085bd
 8008514:	080085bd 	.word	0x080085bd
 8008518:	080085bd 	.word	0x080085bd
 800851c:	080085bd 	.word	0x080085bd
 8008520:	080085bd 	.word	0x080085bd
 8008524:	080085bd 	.word	0x080085bd
 8008528:	0800859d 	.word	0x0800859d
 800852c:	080085bd 	.word	0x080085bd
 8008530:	080085bd 	.word	0x080085bd
 8008534:	080085bd 	.word	0x080085bd
 8008538:	080085bd 	.word	0x080085bd
 800853c:	080085bd 	.word	0x080085bd
 8008540:	080085bd 	.word	0x080085bd
 8008544:	080085bd 	.word	0x080085bd
 8008548:	080085a5 	.word	0x080085a5
 800854c:	080085bd 	.word	0x080085bd
 8008550:	080085bd 	.word	0x080085bd
 8008554:	080085bd 	.word	0x080085bd
 8008558:	080085bd 	.word	0x080085bd
 800855c:	080085bd 	.word	0x080085bd
 8008560:	080085bd 	.word	0x080085bd
 8008564:	080085bd 	.word	0x080085bd
 8008568:	080085ad 	.word	0x080085ad
 800856c:	080085bd 	.word	0x080085bd
 8008570:	080085bd 	.word	0x080085bd
 8008574:	080085bd 	.word	0x080085bd
 8008578:	080085bd 	.word	0x080085bd
 800857c:	080085bd 	.word	0x080085bd
 8008580:	080085bd 	.word	0x080085bd
 8008584:	080085bd 	.word	0x080085bd
 8008588:	080085b5 	.word	0x080085b5
 800858c:	2301      	movs	r3, #1
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e1c0      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008594:	2304      	movs	r3, #4
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e1bc      	b.n	8008916 <UART_SetConfig+0x7ae>
 800859c:	2308      	movs	r3, #8
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e1b8      	b.n	8008916 <UART_SetConfig+0x7ae>
 80085a4:	2310      	movs	r3, #16
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e1b4      	b.n	8008916 <UART_SetConfig+0x7ae>
 80085ac:	2320      	movs	r3, #32
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e1b0      	b.n	8008916 <UART_SetConfig+0x7ae>
 80085b4:	2340      	movs	r3, #64	@ 0x40
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e1ac      	b.n	8008916 <UART_SetConfig+0x7ae>
 80085bc:	2380      	movs	r3, #128	@ 0x80
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c2:	e1a8      	b.n	8008916 <UART_SetConfig+0x7ae>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a75      	ldr	r2, [pc, #468]	@ (80087a0 <UART_SetConfig+0x638>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d130      	bne.n	8008630 <UART_SetConfig+0x4c8>
 80085ce:	4b73      	ldr	r3, [pc, #460]	@ (800879c <UART_SetConfig+0x634>)
 80085d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d826      	bhi.n	8008628 <UART_SetConfig+0x4c0>
 80085da:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <UART_SetConfig+0x478>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	080085f9 	.word	0x080085f9
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008609 	.word	0x08008609
 80085ec:	08008611 	.word	0x08008611
 80085f0:	08008619 	.word	0x08008619
 80085f4:	08008621 	.word	0x08008621
 80085f8:	2300      	movs	r3, #0
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fe:	e18a      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008600:	2304      	movs	r3, #4
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008606:	e186      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008608:	2308      	movs	r3, #8
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860e:	e182      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008610:	2310      	movs	r3, #16
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008616:	e17e      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008618:	2320      	movs	r3, #32
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861e:	e17a      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008620:	2340      	movs	r3, #64	@ 0x40
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008626:	e176      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008628:	2380      	movs	r3, #128	@ 0x80
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862e:	e172      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a5b      	ldr	r2, [pc, #364]	@ (80087a4 <UART_SetConfig+0x63c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d130      	bne.n	800869c <UART_SetConfig+0x534>
 800863a:	4b58      	ldr	r3, [pc, #352]	@ (800879c <UART_SetConfig+0x634>)
 800863c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	2b05      	cmp	r3, #5
 8008644:	d826      	bhi.n	8008694 <UART_SetConfig+0x52c>
 8008646:	a201      	add	r2, pc, #4	@ (adr r2, 800864c <UART_SetConfig+0x4e4>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008665 	.word	0x08008665
 8008650:	0800866d 	.word	0x0800866d
 8008654:	08008675 	.word	0x08008675
 8008658:	0800867d 	.word	0x0800867d
 800865c:	08008685 	.word	0x08008685
 8008660:	0800868d 	.word	0x0800868d
 8008664:	2300      	movs	r3, #0
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866a:	e154      	b.n	8008916 <UART_SetConfig+0x7ae>
 800866c:	2304      	movs	r3, #4
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008672:	e150      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008674:	2308      	movs	r3, #8
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867a:	e14c      	b.n	8008916 <UART_SetConfig+0x7ae>
 800867c:	2310      	movs	r3, #16
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008682:	e148      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008684:	2320      	movs	r3, #32
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868a:	e144      	b.n	8008916 <UART_SetConfig+0x7ae>
 800868c:	2340      	movs	r3, #64	@ 0x40
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008692:	e140      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008694:	2380      	movs	r3, #128	@ 0x80
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e13c      	b.n	8008916 <UART_SetConfig+0x7ae>
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a41      	ldr	r2, [pc, #260]	@ (80087a8 <UART_SetConfig+0x640>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	f040 8082 	bne.w	80087ac <UART_SetConfig+0x644>
 80086a8:	4b3c      	ldr	r3, [pc, #240]	@ (800879c <UART_SetConfig+0x634>)
 80086aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086b0:	2b28      	cmp	r3, #40	@ 0x28
 80086b2:	d86d      	bhi.n	8008790 <UART_SetConfig+0x628>
 80086b4:	a201      	add	r2, pc, #4	@ (adr r2, 80086bc <UART_SetConfig+0x554>)
 80086b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ba:	bf00      	nop
 80086bc:	08008761 	.word	0x08008761
 80086c0:	08008791 	.word	0x08008791
 80086c4:	08008791 	.word	0x08008791
 80086c8:	08008791 	.word	0x08008791
 80086cc:	08008791 	.word	0x08008791
 80086d0:	08008791 	.word	0x08008791
 80086d4:	08008791 	.word	0x08008791
 80086d8:	08008791 	.word	0x08008791
 80086dc:	08008769 	.word	0x08008769
 80086e0:	08008791 	.word	0x08008791
 80086e4:	08008791 	.word	0x08008791
 80086e8:	08008791 	.word	0x08008791
 80086ec:	08008791 	.word	0x08008791
 80086f0:	08008791 	.word	0x08008791
 80086f4:	08008791 	.word	0x08008791
 80086f8:	08008791 	.word	0x08008791
 80086fc:	08008771 	.word	0x08008771
 8008700:	08008791 	.word	0x08008791
 8008704:	08008791 	.word	0x08008791
 8008708:	08008791 	.word	0x08008791
 800870c:	08008791 	.word	0x08008791
 8008710:	08008791 	.word	0x08008791
 8008714:	08008791 	.word	0x08008791
 8008718:	08008791 	.word	0x08008791
 800871c:	08008779 	.word	0x08008779
 8008720:	08008791 	.word	0x08008791
 8008724:	08008791 	.word	0x08008791
 8008728:	08008791 	.word	0x08008791
 800872c:	08008791 	.word	0x08008791
 8008730:	08008791 	.word	0x08008791
 8008734:	08008791 	.word	0x08008791
 8008738:	08008791 	.word	0x08008791
 800873c:	08008781 	.word	0x08008781
 8008740:	08008791 	.word	0x08008791
 8008744:	08008791 	.word	0x08008791
 8008748:	08008791 	.word	0x08008791
 800874c:	08008791 	.word	0x08008791
 8008750:	08008791 	.word	0x08008791
 8008754:	08008791 	.word	0x08008791
 8008758:	08008791 	.word	0x08008791
 800875c:	08008789 	.word	0x08008789
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008766:	e0d6      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008768:	2304      	movs	r3, #4
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876e:	e0d2      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008770:	2308      	movs	r3, #8
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008776:	e0ce      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008778:	2310      	movs	r3, #16
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877e:	e0ca      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008780:	2320      	movs	r3, #32
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008786:	e0c6      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008788:	2340      	movs	r3, #64	@ 0x40
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878e:	e0c2      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008790:	2380      	movs	r3, #128	@ 0x80
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008796:	e0be      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008798:	40011400 	.word	0x40011400
 800879c:	58024400 	.word	0x58024400
 80087a0:	40007800 	.word	0x40007800
 80087a4:	40007c00 	.word	0x40007c00
 80087a8:	40011800 	.word	0x40011800
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4aad      	ldr	r2, [pc, #692]	@ (8008a68 <UART_SetConfig+0x900>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d176      	bne.n	80088a4 <UART_SetConfig+0x73c>
 80087b6:	4bad      	ldr	r3, [pc, #692]	@ (8008a6c <UART_SetConfig+0x904>)
 80087b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087be:	2b28      	cmp	r3, #40	@ 0x28
 80087c0:	d86c      	bhi.n	800889c <UART_SetConfig+0x734>
 80087c2:	a201      	add	r2, pc, #4	@ (adr r2, 80087c8 <UART_SetConfig+0x660>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	0800886d 	.word	0x0800886d
 80087cc:	0800889d 	.word	0x0800889d
 80087d0:	0800889d 	.word	0x0800889d
 80087d4:	0800889d 	.word	0x0800889d
 80087d8:	0800889d 	.word	0x0800889d
 80087dc:	0800889d 	.word	0x0800889d
 80087e0:	0800889d 	.word	0x0800889d
 80087e4:	0800889d 	.word	0x0800889d
 80087e8:	08008875 	.word	0x08008875
 80087ec:	0800889d 	.word	0x0800889d
 80087f0:	0800889d 	.word	0x0800889d
 80087f4:	0800889d 	.word	0x0800889d
 80087f8:	0800889d 	.word	0x0800889d
 80087fc:	0800889d 	.word	0x0800889d
 8008800:	0800889d 	.word	0x0800889d
 8008804:	0800889d 	.word	0x0800889d
 8008808:	0800887d 	.word	0x0800887d
 800880c:	0800889d 	.word	0x0800889d
 8008810:	0800889d 	.word	0x0800889d
 8008814:	0800889d 	.word	0x0800889d
 8008818:	0800889d 	.word	0x0800889d
 800881c:	0800889d 	.word	0x0800889d
 8008820:	0800889d 	.word	0x0800889d
 8008824:	0800889d 	.word	0x0800889d
 8008828:	08008885 	.word	0x08008885
 800882c:	0800889d 	.word	0x0800889d
 8008830:	0800889d 	.word	0x0800889d
 8008834:	0800889d 	.word	0x0800889d
 8008838:	0800889d 	.word	0x0800889d
 800883c:	0800889d 	.word	0x0800889d
 8008840:	0800889d 	.word	0x0800889d
 8008844:	0800889d 	.word	0x0800889d
 8008848:	0800888d 	.word	0x0800888d
 800884c:	0800889d 	.word	0x0800889d
 8008850:	0800889d 	.word	0x0800889d
 8008854:	0800889d 	.word	0x0800889d
 8008858:	0800889d 	.word	0x0800889d
 800885c:	0800889d 	.word	0x0800889d
 8008860:	0800889d 	.word	0x0800889d
 8008864:	0800889d 	.word	0x0800889d
 8008868:	08008895 	.word	0x08008895
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e050      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008874:	2304      	movs	r3, #4
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e04c      	b.n	8008916 <UART_SetConfig+0x7ae>
 800887c:	2308      	movs	r3, #8
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008882:	e048      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008884:	2310      	movs	r3, #16
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888a:	e044      	b.n	8008916 <UART_SetConfig+0x7ae>
 800888c:	2320      	movs	r3, #32
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008892:	e040      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008894:	2340      	movs	r3, #64	@ 0x40
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889a:	e03c      	b.n	8008916 <UART_SetConfig+0x7ae>
 800889c:	2380      	movs	r3, #128	@ 0x80
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a2:	e038      	b.n	8008916 <UART_SetConfig+0x7ae>
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a71      	ldr	r2, [pc, #452]	@ (8008a70 <UART_SetConfig+0x908>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d130      	bne.n	8008910 <UART_SetConfig+0x7a8>
 80088ae:	4b6f      	ldr	r3, [pc, #444]	@ (8008a6c <UART_SetConfig+0x904>)
 80088b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d826      	bhi.n	8008908 <UART_SetConfig+0x7a0>
 80088ba:	a201      	add	r2, pc, #4	@ (adr r2, 80088c0 <UART_SetConfig+0x758>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088d9 	.word	0x080088d9
 80088c4:	080088e1 	.word	0x080088e1
 80088c8:	080088e9 	.word	0x080088e9
 80088cc:	080088f1 	.word	0x080088f1
 80088d0:	080088f9 	.word	0x080088f9
 80088d4:	08008901 	.word	0x08008901
 80088d8:	2302      	movs	r3, #2
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e01a      	b.n	8008916 <UART_SetConfig+0x7ae>
 80088e0:	2304      	movs	r3, #4
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e016      	b.n	8008916 <UART_SetConfig+0x7ae>
 80088e8:	2308      	movs	r3, #8
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e012      	b.n	8008916 <UART_SetConfig+0x7ae>
 80088f0:	2310      	movs	r3, #16
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e00e      	b.n	8008916 <UART_SetConfig+0x7ae>
 80088f8:	2320      	movs	r3, #32
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e00a      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008900:	2340      	movs	r3, #64	@ 0x40
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008906:	e006      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008908:	2380      	movs	r3, #128	@ 0x80
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890e:	e002      	b.n	8008916 <UART_SetConfig+0x7ae>
 8008910:	2380      	movs	r3, #128	@ 0x80
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a55      	ldr	r2, [pc, #340]	@ (8008a70 <UART_SetConfig+0x908>)
 800891c:	4293      	cmp	r3, r2
 800891e:	f040 80f8 	bne.w	8008b12 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008922:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008926:	2b20      	cmp	r3, #32
 8008928:	dc46      	bgt.n	80089b8 <UART_SetConfig+0x850>
 800892a:	2b02      	cmp	r3, #2
 800892c:	db75      	blt.n	8008a1a <UART_SetConfig+0x8b2>
 800892e:	3b02      	subs	r3, #2
 8008930:	2b1e      	cmp	r3, #30
 8008932:	d872      	bhi.n	8008a1a <UART_SetConfig+0x8b2>
 8008934:	a201      	add	r2, pc, #4	@ (adr r2, 800893c <UART_SetConfig+0x7d4>)
 8008936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893a:	bf00      	nop
 800893c:	080089bf 	.word	0x080089bf
 8008940:	08008a1b 	.word	0x08008a1b
 8008944:	080089c7 	.word	0x080089c7
 8008948:	08008a1b 	.word	0x08008a1b
 800894c:	08008a1b 	.word	0x08008a1b
 8008950:	08008a1b 	.word	0x08008a1b
 8008954:	080089d7 	.word	0x080089d7
 8008958:	08008a1b 	.word	0x08008a1b
 800895c:	08008a1b 	.word	0x08008a1b
 8008960:	08008a1b 	.word	0x08008a1b
 8008964:	08008a1b 	.word	0x08008a1b
 8008968:	08008a1b 	.word	0x08008a1b
 800896c:	08008a1b 	.word	0x08008a1b
 8008970:	08008a1b 	.word	0x08008a1b
 8008974:	080089e7 	.word	0x080089e7
 8008978:	08008a1b 	.word	0x08008a1b
 800897c:	08008a1b 	.word	0x08008a1b
 8008980:	08008a1b 	.word	0x08008a1b
 8008984:	08008a1b 	.word	0x08008a1b
 8008988:	08008a1b 	.word	0x08008a1b
 800898c:	08008a1b 	.word	0x08008a1b
 8008990:	08008a1b 	.word	0x08008a1b
 8008994:	08008a1b 	.word	0x08008a1b
 8008998:	08008a1b 	.word	0x08008a1b
 800899c:	08008a1b 	.word	0x08008a1b
 80089a0:	08008a1b 	.word	0x08008a1b
 80089a4:	08008a1b 	.word	0x08008a1b
 80089a8:	08008a1b 	.word	0x08008a1b
 80089ac:	08008a1b 	.word	0x08008a1b
 80089b0:	08008a1b 	.word	0x08008a1b
 80089b4:	08008a0d 	.word	0x08008a0d
 80089b8:	2b40      	cmp	r3, #64	@ 0x40
 80089ba:	d02a      	beq.n	8008a12 <UART_SetConfig+0x8aa>
 80089bc:	e02d      	b.n	8008a1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80089be:	f7fd fabd 	bl	8005f3c <HAL_RCCEx_GetD3PCLK1Freq>
 80089c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089c4:	e02f      	b.n	8008a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fd facc 	bl	8005f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d4:	e027      	b.n	8008a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089d6:	f107 0318 	add.w	r3, r7, #24
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fd fc18 	bl	8006210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e4:	e01f      	b.n	8008a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089e6:	4b21      	ldr	r3, [pc, #132]	@ (8008a6c <UART_SetConfig+0x904>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d009      	beq.n	8008a06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089f2:	4b1e      	ldr	r3, [pc, #120]	@ (8008a6c <UART_SetConfig+0x904>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	08db      	lsrs	r3, r3, #3
 80089f8:	f003 0303 	and.w	r3, r3, #3
 80089fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008a74 <UART_SetConfig+0x90c>)
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a04:	e00f      	b.n	8008a26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a06:	4b1b      	ldr	r3, [pc, #108]	@ (8008a74 <UART_SetConfig+0x90c>)
 8008a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a0a:	e00c      	b.n	8008a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008a78 <UART_SetConfig+0x910>)
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a10:	e009      	b.n	8008a26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a18:	e005      	b.n	8008a26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 81ee 	beq.w	8008e0a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a32:	4a12      	ldr	r2, [pc, #72]	@ (8008a7c <UART_SetConfig+0x914>)
 8008a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a40:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	4413      	add	r3, r2
 8008a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d305      	bcc.n	8008a5e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d910      	bls.n	8008a80 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a64:	e1d1      	b.n	8008e0a <UART_SetConfig+0xca2>
 8008a66:	bf00      	nop
 8008a68:	40011c00 	.word	0x40011c00
 8008a6c:	58024400 	.word	0x58024400
 8008a70:	58000c00 	.word	0x58000c00
 8008a74:	03d09000 	.word	0x03d09000
 8008a78:	003d0900 	.word	0x003d0900
 8008a7c:	0800ce88 	.word	0x0800ce88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a82:	2200      	movs	r2, #0
 8008a84:	60bb      	str	r3, [r7, #8]
 8008a86:	60fa      	str	r2, [r7, #12]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8c:	4ac0      	ldr	r2, [pc, #768]	@ (8008d90 <UART_SetConfig+0xc28>)
 8008a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2200      	movs	r2, #0
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	607a      	str	r2, [r7, #4]
 8008a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aa2:	f7f7 fc8d 	bl	80003c0 <__aeabi_uldivmod>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4610      	mov	r0, r2
 8008aac:	4619      	mov	r1, r3
 8008aae:	f04f 0200 	mov.w	r2, #0
 8008ab2:	f04f 0300 	mov.w	r3, #0
 8008ab6:	020b      	lsls	r3, r1, #8
 8008ab8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008abc:	0202      	lsls	r2, r0, #8
 8008abe:	6979      	ldr	r1, [r7, #20]
 8008ac0:	6849      	ldr	r1, [r1, #4]
 8008ac2:	0849      	lsrs	r1, r1, #1
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	4605      	mov	r5, r0
 8008aca:	eb12 0804 	adds.w	r8, r2, r4
 8008ace:	eb43 0905 	adc.w	r9, r3, r5
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	469a      	mov	sl, r3
 8008ada:	4693      	mov	fp, r2
 8008adc:	4652      	mov	r2, sl
 8008ade:	465b      	mov	r3, fp
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	f7f7 fc6c 	bl	80003c0 <__aeabi_uldivmod>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4613      	mov	r3, r2
 8008aee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008af6:	d308      	bcc.n	8008b0a <UART_SetConfig+0x9a2>
 8008af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008afe:	d204      	bcs.n	8008b0a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b06:	60da      	str	r2, [r3, #12]
 8008b08:	e17f      	b.n	8008e0a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b10:	e17b      	b.n	8008e0a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b1a:	f040 80bd 	bne.w	8008c98 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008b1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	dc48      	bgt.n	8008bb8 <UART_SetConfig+0xa50>
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	db7b      	blt.n	8008c22 <UART_SetConfig+0xaba>
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	d879      	bhi.n	8008c22 <UART_SetConfig+0xaba>
 8008b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b34 <UART_SetConfig+0x9cc>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008bbf 	.word	0x08008bbf
 8008b38:	08008bc7 	.word	0x08008bc7
 8008b3c:	08008c23 	.word	0x08008c23
 8008b40:	08008c23 	.word	0x08008c23
 8008b44:	08008bcf 	.word	0x08008bcf
 8008b48:	08008c23 	.word	0x08008c23
 8008b4c:	08008c23 	.word	0x08008c23
 8008b50:	08008c23 	.word	0x08008c23
 8008b54:	08008bdf 	.word	0x08008bdf
 8008b58:	08008c23 	.word	0x08008c23
 8008b5c:	08008c23 	.word	0x08008c23
 8008b60:	08008c23 	.word	0x08008c23
 8008b64:	08008c23 	.word	0x08008c23
 8008b68:	08008c23 	.word	0x08008c23
 8008b6c:	08008c23 	.word	0x08008c23
 8008b70:	08008c23 	.word	0x08008c23
 8008b74:	08008bef 	.word	0x08008bef
 8008b78:	08008c23 	.word	0x08008c23
 8008b7c:	08008c23 	.word	0x08008c23
 8008b80:	08008c23 	.word	0x08008c23
 8008b84:	08008c23 	.word	0x08008c23
 8008b88:	08008c23 	.word	0x08008c23
 8008b8c:	08008c23 	.word	0x08008c23
 8008b90:	08008c23 	.word	0x08008c23
 8008b94:	08008c23 	.word	0x08008c23
 8008b98:	08008c23 	.word	0x08008c23
 8008b9c:	08008c23 	.word	0x08008c23
 8008ba0:	08008c23 	.word	0x08008c23
 8008ba4:	08008c23 	.word	0x08008c23
 8008ba8:	08008c23 	.word	0x08008c23
 8008bac:	08008c23 	.word	0x08008c23
 8008bb0:	08008c23 	.word	0x08008c23
 8008bb4:	08008c15 	.word	0x08008c15
 8008bb8:	2b40      	cmp	r3, #64	@ 0x40
 8008bba:	d02e      	beq.n	8008c1a <UART_SetConfig+0xab2>
 8008bbc:	e031      	b.n	8008c22 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bbe:	f7fb fff1 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 8008bc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bc4:	e033      	b.n	8008c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bc6:	f7fc f803 	bl	8004bd0 <HAL_RCC_GetPCLK2Freq>
 8008bca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bcc:	e02f      	b.n	8008c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fd f9c8 	bl	8005f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bdc:	e027      	b.n	8008c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bde:	f107 0318 	add.w	r3, r7, #24
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fd fb14 	bl	8006210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bec:	e01f      	b.n	8008c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bee:	4b69      	ldr	r3, [pc, #420]	@ (8008d94 <UART_SetConfig+0xc2c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bfa:	4b66      	ldr	r3, [pc, #408]	@ (8008d94 <UART_SetConfig+0xc2c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	08db      	lsrs	r3, r3, #3
 8008c00:	f003 0303 	and.w	r3, r3, #3
 8008c04:	4a64      	ldr	r2, [pc, #400]	@ (8008d98 <UART_SetConfig+0xc30>)
 8008c06:	fa22 f303 	lsr.w	r3, r2, r3
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c0c:	e00f      	b.n	8008c2e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008c0e:	4b62      	ldr	r3, [pc, #392]	@ (8008d98 <UART_SetConfig+0xc30>)
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c12:	e00c      	b.n	8008c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c14:	4b61      	ldr	r3, [pc, #388]	@ (8008d9c <UART_SetConfig+0xc34>)
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c18:	e009      	b.n	8008c2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c20:	e005      	b.n	8008c2e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 80ea 	beq.w	8008e0a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3a:	4a55      	ldr	r2, [pc, #340]	@ (8008d90 <UART_SetConfig+0xc28>)
 8008c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c40:	461a      	mov	r2, r3
 8008c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c48:	005a      	lsls	r2, r3, #1
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	085b      	lsrs	r3, r3, #1
 8008c50:	441a      	add	r2, r3
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	2b0f      	cmp	r3, #15
 8008c60:	d916      	bls.n	8008c90 <UART_SetConfig+0xb28>
 8008c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c68:	d212      	bcs.n	8008c90 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	f023 030f 	bic.w	r3, r3, #15
 8008c72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c76:	085b      	lsrs	r3, r3, #1
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c82:	4313      	orrs	r3, r2
 8008c84:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008c8c:	60da      	str	r2, [r3, #12]
 8008c8e:	e0bc      	b.n	8008e0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c96:	e0b8      	b.n	8008e0a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	dc4b      	bgt.n	8008d38 <UART_SetConfig+0xbd0>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f2c0 8087 	blt.w	8008db4 <UART_SetConfig+0xc4c>
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	f200 8084 	bhi.w	8008db4 <UART_SetConfig+0xc4c>
 8008cac:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <UART_SetConfig+0xb4c>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008d3f 	.word	0x08008d3f
 8008cb8:	08008d47 	.word	0x08008d47
 8008cbc:	08008db5 	.word	0x08008db5
 8008cc0:	08008db5 	.word	0x08008db5
 8008cc4:	08008d4f 	.word	0x08008d4f
 8008cc8:	08008db5 	.word	0x08008db5
 8008ccc:	08008db5 	.word	0x08008db5
 8008cd0:	08008db5 	.word	0x08008db5
 8008cd4:	08008d5f 	.word	0x08008d5f
 8008cd8:	08008db5 	.word	0x08008db5
 8008cdc:	08008db5 	.word	0x08008db5
 8008ce0:	08008db5 	.word	0x08008db5
 8008ce4:	08008db5 	.word	0x08008db5
 8008ce8:	08008db5 	.word	0x08008db5
 8008cec:	08008db5 	.word	0x08008db5
 8008cf0:	08008db5 	.word	0x08008db5
 8008cf4:	08008d6f 	.word	0x08008d6f
 8008cf8:	08008db5 	.word	0x08008db5
 8008cfc:	08008db5 	.word	0x08008db5
 8008d00:	08008db5 	.word	0x08008db5
 8008d04:	08008db5 	.word	0x08008db5
 8008d08:	08008db5 	.word	0x08008db5
 8008d0c:	08008db5 	.word	0x08008db5
 8008d10:	08008db5 	.word	0x08008db5
 8008d14:	08008db5 	.word	0x08008db5
 8008d18:	08008db5 	.word	0x08008db5
 8008d1c:	08008db5 	.word	0x08008db5
 8008d20:	08008db5 	.word	0x08008db5
 8008d24:	08008db5 	.word	0x08008db5
 8008d28:	08008db5 	.word	0x08008db5
 8008d2c:	08008db5 	.word	0x08008db5
 8008d30:	08008db5 	.word	0x08008db5
 8008d34:	08008da7 	.word	0x08008da7
 8008d38:	2b40      	cmp	r3, #64	@ 0x40
 8008d3a:	d037      	beq.n	8008dac <UART_SetConfig+0xc44>
 8008d3c:	e03a      	b.n	8008db4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d3e:	f7fb ff31 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 8008d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d44:	e03c      	b.n	8008dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d46:	f7fb ff43 	bl	8004bd0 <HAL_RCC_GetPCLK2Freq>
 8008d4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d4c:	e038      	b.n	8008dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fd f908 	bl	8005f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d5c:	e030      	b.n	8008dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d5e:	f107 0318 	add.w	r3, r7, #24
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fd fa54 	bl	8006210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d6c:	e028      	b.n	8008dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d6e:	4b09      	ldr	r3, [pc, #36]	@ (8008d94 <UART_SetConfig+0xc2c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d012      	beq.n	8008da0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d7a:	4b06      	ldr	r3, [pc, #24]	@ (8008d94 <UART_SetConfig+0xc2c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	08db      	lsrs	r3, r3, #3
 8008d80:	f003 0303 	and.w	r3, r3, #3
 8008d84:	4a04      	ldr	r2, [pc, #16]	@ (8008d98 <UART_SetConfig+0xc30>)
 8008d86:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d8c:	e018      	b.n	8008dc0 <UART_SetConfig+0xc58>
 8008d8e:	bf00      	nop
 8008d90:	0800ce88 	.word	0x0800ce88
 8008d94:	58024400 	.word	0x58024400
 8008d98:	03d09000 	.word	0x03d09000
 8008d9c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008da0:	4b24      	ldr	r3, [pc, #144]	@ (8008e34 <UART_SetConfig+0xccc>)
 8008da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da4:	e00c      	b.n	8008dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008da6:	4b24      	ldr	r3, [pc, #144]	@ (8008e38 <UART_SetConfig+0xcd0>)
 8008da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008daa:	e009      	b.n	8008dc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db2:	e005      	b.n	8008dc0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8008dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d021      	beq.n	8008e0a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dca:	4a1c      	ldr	r2, [pc, #112]	@ (8008e3c <UART_SetConfig+0xcd4>)
 8008dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	085b      	lsrs	r3, r3, #1
 8008dde:	441a      	add	r2, r3
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dec:	2b0f      	cmp	r3, #15
 8008dee:	d909      	bls.n	8008e04 <UART_SetConfig+0xc9c>
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008df6:	d205      	bcs.n	8008e04 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	60da      	str	r2, [r3, #12]
 8008e02:	e002      	b.n	8008e0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	2200      	movs	r2, #0
 8008e24:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e26:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3748      	adds	r7, #72	@ 0x48
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e34:	03d09000 	.word	0x03d09000
 8008e38:	003d0900 	.word	0x003d0900
 8008e3c:	0800ce88 	.word	0x0800ce88

08008e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4c:	f003 0308 	and.w	r3, r3, #8
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00a      	beq.n	8008e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00a      	beq.n	8008eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb2:	f003 0304 	and.w	r3, r3, #4
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00a      	beq.n	8008ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00a      	beq.n	8008ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef6:	f003 0320 	and.w	r3, r3, #32
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01a      	beq.n	8008f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f3e:	d10a      	bne.n	8008f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	605a      	str	r2, [r3, #4]
  }
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b098      	sub	sp, #96	@ 0x60
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f94:	f7f9 f8f8 	bl	8002188 <HAL_GetTick>
 8008f98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d12f      	bne.n	8009008 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f88e 	bl	80090d8 <UART_WaitOnFlagUntilTimeout>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d022      	beq.n	8009008 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fca:	e853 3f00 	ldrex	r3, [r3]
 8008fce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fe2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e6      	bne.n	8008fc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e063      	b.n	80090d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0304 	and.w	r3, r3, #4
 8009012:	2b04      	cmp	r3, #4
 8009014:	d149      	bne.n	80090aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009016:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800901e:	2200      	movs	r2, #0
 8009020:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f857 	bl	80090d8 <UART_WaitOnFlagUntilTimeout>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d03c      	beq.n	80090aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	623b      	str	r3, [r7, #32]
   return(result);
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800904e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009050:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e6      	bne.n	8009030 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	60fb      	str	r3, [r7, #12]
   return(result);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009082:	61fa      	str	r2, [r7, #28]
 8009084:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	69b9      	ldr	r1, [r7, #24]
 8009088:	69fa      	ldr	r2, [r7, #28]
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	617b      	str	r3, [r7, #20]
   return(result);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e5      	bne.n	8009062 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2220      	movs	r2, #32
 800909a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e012      	b.n	80090d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2220      	movs	r2, #32
 80090b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3758      	adds	r7, #88	@ 0x58
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	4613      	mov	r3, r2
 80090e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090e8:	e04f      	b.n	800918a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f0:	d04b      	beq.n	800918a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f2:	f7f9 f849 	bl	8002188 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d302      	bcc.n	8009108 <UART_WaitOnFlagUntilTimeout+0x30>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e04e      	b.n	80091aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0304 	and.w	r3, r3, #4
 8009116:	2b00      	cmp	r3, #0
 8009118:	d037      	beq.n	800918a <UART_WaitOnFlagUntilTimeout+0xb2>
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b80      	cmp	r3, #128	@ 0x80
 800911e:	d034      	beq.n	800918a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b40      	cmp	r3, #64	@ 0x40
 8009124:	d031      	beq.n	800918a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	f003 0308 	and.w	r3, r3, #8
 8009130:	2b08      	cmp	r3, #8
 8009132:	d110      	bne.n	8009156 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2208      	movs	r2, #8
 800913a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 f95b 	bl	80093f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2208      	movs	r2, #8
 8009146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e029      	b.n	80091aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009164:	d111      	bne.n	800918a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800916e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f941 	bl	80093f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e00f      	b.n	80091aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69da      	ldr	r2, [r3, #28]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4013      	ands	r3, r2
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	429a      	cmp	r2, r3
 8009198:	bf0c      	ite	eq
 800919a:	2301      	moveq	r3, #1
 800919c:	2300      	movne	r3, #0
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	461a      	mov	r2, r3
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d0a0      	beq.n	80090ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b0a3      	sub	sp, #140	@ 0x8c
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	88fa      	ldrh	r2, [r7, #6]
 80091cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091e6:	d10e      	bne.n	8009206 <UART_Start_Receive_IT+0x52>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d105      	bne.n	80091fc <UART_Start_Receive_IT+0x48>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80091f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091fa:	e02d      	b.n	8009258 <UART_Start_Receive_IT+0xa4>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	22ff      	movs	r2, #255	@ 0xff
 8009200:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009204:	e028      	b.n	8009258 <UART_Start_Receive_IT+0xa4>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10d      	bne.n	800922a <UART_Start_Receive_IT+0x76>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d104      	bne.n	8009220 <UART_Start_Receive_IT+0x6c>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	22ff      	movs	r2, #255	@ 0xff
 800921a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800921e:	e01b      	b.n	8009258 <UART_Start_Receive_IT+0xa4>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	227f      	movs	r2, #127	@ 0x7f
 8009224:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009228:	e016      	b.n	8009258 <UART_Start_Receive_IT+0xa4>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009232:	d10d      	bne.n	8009250 <UART_Start_Receive_IT+0x9c>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <UART_Start_Receive_IT+0x92>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	227f      	movs	r2, #127	@ 0x7f
 8009240:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009244:	e008      	b.n	8009258 <UART_Start_Receive_IT+0xa4>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	223f      	movs	r2, #63	@ 0x3f
 800924a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800924e:	e003      	b.n	8009258 <UART_Start_Receive_IT+0xa4>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2222      	movs	r2, #34	@ 0x22
 8009264:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3308      	adds	r3, #8
 800926e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009278:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800927a:	f043 0301 	orr.w	r3, r3, #1
 800927e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3308      	adds	r3, #8
 8009288:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800928c:	673a      	str	r2, [r7, #112]	@ 0x70
 800928e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009292:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800929a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e3      	bne.n	8009268 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092a8:	d14f      	bne.n	800934a <UART_Start_Receive_IT+0x196>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092b0:	88fa      	ldrh	r2, [r7, #6]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d349      	bcc.n	800934a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092be:	d107      	bne.n	80092d0 <UART_Start_Receive_IT+0x11c>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d103      	bne.n	80092d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4a47      	ldr	r2, [pc, #284]	@ (80093e8 <UART_Start_Receive_IT+0x234>)
 80092cc:	675a      	str	r2, [r3, #116]	@ 0x74
 80092ce:	e002      	b.n	80092d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4a46      	ldr	r2, [pc, #280]	@ (80093ec <UART_Start_Receive_IT+0x238>)
 80092d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d01a      	beq.n	8009314 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092e6:	e853 3f00 	ldrex	r3, [r3]
 80092ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80092ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009302:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009304:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009306:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009308:	e841 2300 	strex	r3, r2, [r1]
 800930c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800930e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e4      	bne.n	80092de <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800932a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3308      	adds	r3, #8
 8009332:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009334:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009336:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800933a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e5      	bne.n	8009314 <UART_Start_Receive_IT+0x160>
 8009348:	e046      	b.n	80093d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009352:	d107      	bne.n	8009364 <UART_Start_Receive_IT+0x1b0>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d103      	bne.n	8009364 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4a24      	ldr	r2, [pc, #144]	@ (80093f0 <UART_Start_Receive_IT+0x23c>)
 8009360:	675a      	str	r2, [r3, #116]	@ 0x74
 8009362:	e002      	b.n	800936a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4a23      	ldr	r2, [pc, #140]	@ (80093f4 <UART_Start_Receive_IT+0x240>)
 8009368:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d019      	beq.n	80093a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009386:	677b      	str	r3, [r7, #116]	@ 0x74
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	461a      	mov	r2, r3
 800938e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009390:	637b      	str	r3, [r7, #52]	@ 0x34
 8009392:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e6      	bne.n	8009372 <UART_Start_Receive_IT+0x1be>
 80093a4:	e018      	b.n	80093d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	613b      	str	r3, [r7, #16]
   return(result);
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f043 0320 	orr.w	r3, r3, #32
 80093ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	461a      	mov	r2, r3
 80093c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093c4:	623b      	str	r3, [r7, #32]
 80093c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	69f9      	ldr	r1, [r7, #28]
 80093ca:	6a3a      	ldr	r2, [r7, #32]
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e6      	bne.n	80093a6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	378c      	adds	r7, #140	@ 0x8c
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	08009c15 	.word	0x08009c15
 80093ec:	080098b1 	.word	0x080098b1
 80093f0:	080096f9 	.word	0x080096f9
 80093f4:	08009541 	.word	0x08009541

080093f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b095      	sub	sp, #84	@ 0x54
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009414:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800941e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009420:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e6      	bne.n	8009400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3308      	adds	r3, #8
 8009438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	61fb      	str	r3, [r7, #28]
   return(result);
 8009442:	69fa      	ldr	r2, [r7, #28]
 8009444:	4b1e      	ldr	r3, [pc, #120]	@ (80094c0 <UART_EndRxTransfer+0xc8>)
 8009446:	4013      	ands	r3, r2
 8009448:	64bb      	str	r3, [r7, #72]	@ 0x48
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3308      	adds	r3, #8
 8009450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009454:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009456:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e5      	bne.n	8009432 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800946a:	2b01      	cmp	r3, #1
 800946c:	d118      	bne.n	80094a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	60bb      	str	r3, [r7, #8]
   return(result);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f023 0310 	bic.w	r3, r3, #16
 8009482:	647b      	str	r3, [r7, #68]	@ 0x44
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800948c:	61bb      	str	r3, [r7, #24]
 800948e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009490:	6979      	ldr	r1, [r7, #20]
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	e841 2300 	strex	r3, r2, [r1]
 8009498:	613b      	str	r3, [r7, #16]
   return(result);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e6      	bne.n	800946e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2220      	movs	r2, #32
 80094a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80094b4:	bf00      	nop
 80094b6:	3754      	adds	r7, #84	@ 0x54
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	effffffe 	.word	0xeffffffe

080094c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7fe fe2e 	bl	800813c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009504:	61fb      	str	r3, [r7, #28]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	61bb      	str	r3, [r7, #24]
 8009510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6979      	ldr	r1, [r7, #20]
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	613b      	str	r3, [r7, #16]
   return(result);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e6      	bne.n	80094f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7fe fdf9 	bl	8008128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009536:	bf00      	nop
 8009538:	3720      	adds	r7, #32
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b09c      	sub	sp, #112	@ 0x70
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800954e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009558:	2b22      	cmp	r3, #34	@ 0x22
 800955a:	f040 80be 	bne.w	80096da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009564:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009568:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800956c:	b2d9      	uxtb	r1, r3
 800956e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009572:	b2da      	uxtb	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009578:	400a      	ands	r2, r1
 800957a:	b2d2      	uxtb	r2, r2
 800957c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800958e:	b29b      	uxth	r3, r3
 8009590:	3b01      	subs	r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 80a1 	bne.w	80096ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095ce:	e841 2300 	strex	r3, r2, [r1]
 80095d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1e6      	bne.n	80095a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3308      	adds	r3, #8
 80095e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ec:	f023 0301 	bic.w	r3, r3, #1
 80095f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80095fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80095fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e5      	bne.n	80095da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2220      	movs	r2, #32
 8009612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a33      	ldr	r2, [pc, #204]	@ (80096f4 <UART_RxISR_8BIT+0x1b4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d01f      	beq.n	800966c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d018      	beq.n	800966c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009642:	e853 3f00 	ldrex	r3, [r3]
 8009646:	623b      	str	r3, [r7, #32]
   return(result);
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800964e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009658:	633b      	str	r3, [r7, #48]	@ 0x30
 800965a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800965e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e6      	bne.n	800963a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009670:	2b01      	cmp	r3, #1
 8009672:	d12e      	bne.n	80096d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	60fb      	str	r3, [r7, #12]
   return(result);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0310 	bic.w	r3, r3, #16
 800968e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009698:	61fb      	str	r3, [r7, #28]
 800969a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	69b9      	ldr	r1, [r7, #24]
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	617b      	str	r3, [r7, #20]
   return(result);
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e6      	bne.n	800967a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f003 0310 	and.w	r3, r3, #16
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d103      	bne.n	80096c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2210      	movs	r2, #16
 80096c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7fe fd40 	bl	8008150 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096d0:	e00b      	b.n	80096ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7f7 f872 	bl	80007bc <HAL_UART_RxCpltCallback>
}
 80096d8:	e007      	b.n	80096ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0208 	orr.w	r2, r2, #8
 80096e8:	619a      	str	r2, [r3, #24]
}
 80096ea:	bf00      	nop
 80096ec:	3770      	adds	r7, #112	@ 0x70
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	58000c00 	.word	0x58000c00

080096f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b09c      	sub	sp, #112	@ 0x70
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009706:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009710:	2b22      	cmp	r3, #34	@ 0x22
 8009712:	f040 80be 	bne.w	8009892 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009724:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009726:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800972a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800972e:	4013      	ands	r3, r2
 8009730:	b29a      	uxth	r2, r3
 8009732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009734:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800973a:	1c9a      	adds	r2, r3, #2
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009746:	b29b      	uxth	r3, r3
 8009748:	3b01      	subs	r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009758:	b29b      	uxth	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	f040 80a1 	bne.w	80098a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800976e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009774:	667b      	str	r3, [r7, #100]	@ 0x64
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800977e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009780:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009784:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800978c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e6      	bne.n	8009760 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800979c:	e853 3f00 	ldrex	r3, [r3]
 80097a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	f023 0301 	bic.w	r3, r3, #1
 80097a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3308      	adds	r3, #8
 80097b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80097b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80097b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097ba:	e841 2300 	strex	r3, r2, [r1]
 80097be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1e5      	bne.n	8009792 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2220      	movs	r2, #32
 80097ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a33      	ldr	r2, [pc, #204]	@ (80098ac <UART_RxISR_16BIT+0x1b4>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d01f      	beq.n	8009824 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d018      	beq.n	8009824 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009806:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009812:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009828:	2b01      	cmp	r3, #1
 800982a:	d12e      	bne.n	800988a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f023 0310 	bic.w	r3, r3, #16
 8009846:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	461a      	mov	r2, r3
 800984e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009850:	61bb      	str	r3, [r7, #24]
 8009852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	6979      	ldr	r1, [r7, #20]
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	e841 2300 	strex	r3, r2, [r1]
 800985c:	613b      	str	r3, [r7, #16]
   return(result);
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e6      	bne.n	8009832 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	f003 0310 	and.w	r3, r3, #16
 800986e:	2b10      	cmp	r3, #16
 8009870:	d103      	bne.n	800987a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2210      	movs	r2, #16
 8009878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7fe fc64 	bl	8008150 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009888:	e00b      	b.n	80098a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7f6 ff96 	bl	80007bc <HAL_UART_RxCpltCallback>
}
 8009890:	e007      	b.n	80098a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	699a      	ldr	r2, [r3, #24]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f042 0208 	orr.w	r2, r2, #8
 80098a0:	619a      	str	r2, [r3, #24]
}
 80098a2:	bf00      	nop
 80098a4:	3770      	adds	r7, #112	@ 0x70
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	58000c00 	.word	0x58000c00

080098b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b0ac      	sub	sp, #176	@ 0xb0
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098be:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098e6:	2b22      	cmp	r3, #34	@ 0x22
 80098e8:	f040 8181 	bne.w	8009bee <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80098f2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098f6:	e124      	b.n	8009b42 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fe:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009902:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009906:	b2d9      	uxtb	r1, r3
 8009908:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800990c:	b2da      	uxtb	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009912:	400a      	ands	r2, r1
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009928:	b29b      	uxth	r3, r3
 800992a:	3b01      	subs	r3, #1
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800993e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009942:	f003 0307 	and.w	r3, r3, #7
 8009946:	2b00      	cmp	r3, #0
 8009948:	d053      	beq.n	80099f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800994a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d011      	beq.n	800997a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800995a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2201      	movs	r2, #1
 8009968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009970:	f043 0201 	orr.w	r2, r3, #1
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800997a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d011      	beq.n	80099aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2202      	movs	r2, #2
 8009998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a0:	f043 0204 	orr.w	r2, r3, #4
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d011      	beq.n	80099da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80099b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00b      	beq.n	80099da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2204      	movs	r2, #4
 80099c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d0:	f043 0202 	orr.w	r2, r3, #2
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d006      	beq.n	80099f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7fe fba9 	bl	800813c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f040 80a1 	bne.w	8009b42 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a08:	e853 3f00 	ldrex	r3, [r3]
 8009a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a24:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009a28:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009a30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e4      	bne.n	8009a00 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a40:	e853 3f00 	ldrex	r3, [r3]
 8009a44:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009a46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a48:	4b6f      	ldr	r3, [pc, #444]	@ (8009c08 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3308      	adds	r3, #8
 8009a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a5a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009a5c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009a60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009a62:	e841 2300 	strex	r3, r2, [r1]
 8009a66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009a68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1e3      	bne.n	8009a36 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a61      	ldr	r2, [pc, #388]	@ (8009c0c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d021      	beq.n	8009ad0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d01a      	beq.n	8009ad0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aa2:	e853 3f00 	ldrex	r3, [r3]
 8009aa6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009abc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009abe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ac2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e4      	bne.n	8009a9a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d130      	bne.n	8009b3a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aee:	f023 0310 	bic.w	r3, r3, #16
 8009af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b08:	e841 2300 	strex	r3, r2, [r1]
 8009b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e4      	bne.n	8009ade <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	f003 0310 	and.w	r3, r3, #16
 8009b1e:	2b10      	cmp	r3, #16
 8009b20:	d103      	bne.n	8009b2a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2210      	movs	r2, #16
 8009b28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7fe fb0c 	bl	8008150 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009b38:	e00e      	b.n	8009b58 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7f6 fe3e 	bl	80007bc <HAL_UART_RxCpltCallback>
        break;
 8009b40:	e00a      	b.n	8009b58 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b42:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d006      	beq.n	8009b58 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8009b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b4e:	f003 0320 	and.w	r3, r3, #32
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f47f aed0 	bne.w	80098f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d049      	beq.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0x34e>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b70:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d242      	bcs.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3308      	adds	r3, #8
 8009b98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009b9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e3      	bne.n	8009b78 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a17      	ldr	r2, [pc, #92]	@ (8009c10 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009bb4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f043 0320 	orr.w	r3, r3, #32
 8009bca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bdc:	6979      	ldr	r1, [r7, #20]
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	e841 2300 	strex	r3, r2, [r1]
 8009be4:	613b      	str	r3, [r7, #16]
   return(result);
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1e4      	bne.n	8009bb6 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bec:	e007      	b.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699a      	ldr	r2, [r3, #24]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0208 	orr.w	r2, r2, #8
 8009bfc:	619a      	str	r2, [r3, #24]
}
 8009bfe:	bf00      	nop
 8009c00:	37b0      	adds	r7, #176	@ 0xb0
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	effffffe 	.word	0xeffffffe
 8009c0c:	58000c00 	.word	0x58000c00
 8009c10:	08009541 	.word	0x08009541

08009c14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b0ae      	sub	sp, #184	@ 0xb8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c22:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c4a:	2b22      	cmp	r3, #34	@ 0x22
 8009c4c:	f040 8185 	bne.w	8009f5a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c56:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c5a:	e128      	b.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c62:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009c6e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009c72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009c76:	4013      	ands	r3, r2
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c84:	1c9a      	adds	r2, r3, #2
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d053      	beq.n	8009d5a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d011      	beq.n	8009ce2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cd8:	f043 0201 	orr.w	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d011      	beq.n	8009d12 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00b      	beq.n	8009d12 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d08:	f043 0204 	orr.w	r2, r3, #4
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d011      	beq.n	8009d42 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2204      	movs	r2, #4
 8009d30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d38:	f043 0202 	orr.w	r2, r3, #2
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7fe f9f5 	bl	800813c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f040 80a3 	bne.w	8009eae <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e2      	bne.n	8009d68 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3308      	adds	r3, #8
 8009da8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009db2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009db4:	4b6f      	ldr	r3, [pc, #444]	@ (8009f74 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009db6:	4013      	ands	r3, r2
 8009db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009dc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009dcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e3      	bne.n	8009da2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a61      	ldr	r2, [pc, #388]	@ (8009f78 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d021      	beq.n	8009e3c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01a      	beq.n	8009e3c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e2a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e30:	e841 2300 	strex	r3, r2, [r1]
 8009e34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e4      	bne.n	8009e06 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d130      	bne.n	8009ea6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e52:	e853 3f00 	ldrex	r3, [r3]
 8009e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5a:	f023 0310 	bic.w	r3, r3, #16
 8009e5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e4      	bne.n	8009e4a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	f003 0310 	and.w	r3, r3, #16
 8009e8a:	2b10      	cmp	r3, #16
 8009e8c:	d103      	bne.n	8009e96 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2210      	movs	r2, #16
 8009e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7fe f956 	bl	8008150 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009ea4:	e00e      	b.n	8009ec4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7f6 fc88 	bl	80007bc <HAL_UART_RxCpltCallback>
        break;
 8009eac:	e00a      	b.n	8009ec4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009eae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d006      	beq.n	8009ec4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8009eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009eba:	f003 0320 	and.w	r3, r3, #32
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f47f aecc 	bne.w	8009c5c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009eca:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ece:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d049      	beq.n	8009f6a <UART_RxISR_16BIT_FIFOEN+0x356>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009edc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d242      	bcs.n	8009f6a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3308      	adds	r3, #8
 8009eea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	e853 3f00 	ldrex	r3, [r3]
 8009ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009efa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3308      	adds	r3, #8
 8009f04:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f08:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f10:	e841 2300 	strex	r3, r2, [r1]
 8009f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1e3      	bne.n	8009ee4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a17      	ldr	r2, [pc, #92]	@ (8009f7c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009f20:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	e853 3f00 	ldrex	r3, [r3]
 8009f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f043 0320 	orr.w	r3, r3, #32
 8009f36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f44:	61fb      	str	r3, [r7, #28]
 8009f46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f48:	69b9      	ldr	r1, [r7, #24]
 8009f4a:	69fa      	ldr	r2, [r7, #28]
 8009f4c:	e841 2300 	strex	r3, r2, [r1]
 8009f50:	617b      	str	r3, [r7, #20]
   return(result);
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1e4      	bne.n	8009f22 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f58:	e007      	b.n	8009f6a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	699a      	ldr	r2, [r3, #24]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f042 0208 	orr.w	r2, r2, #8
 8009f68:	619a      	str	r2, [r3, #24]
}
 8009f6a:	bf00      	nop
 8009f6c:	37b8      	adds	r7, #184	@ 0xb8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	effffffe 	.word	0xeffffffe
 8009f78:	58000c00 	.word	0x58000c00
 8009f7c:	080096f9 	.word	0x080096f9

08009f80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d101      	bne.n	8009fd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009fce:	2302      	movs	r3, #2
 8009fd0:	e027      	b.n	800a022 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2224      	movs	r2, #36	@ 0x24
 8009fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f022 0201 	bic.w	r2, r2, #1
 8009ff8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a000:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2220      	movs	r2, #32
 800a014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d101      	bne.n	800a046 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a042:	2302      	movs	r3, #2
 800a044:	e02d      	b.n	800a0a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2224      	movs	r2, #36	@ 0x24
 800a052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0201 	bic.w	r2, r2, #1
 800a06c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f850 	bl	800a128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d101      	bne.n	800a0c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0be:	2302      	movs	r3, #2
 800a0c0:	e02d      	b.n	800a11e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2224      	movs	r2, #36	@ 0x24
 800a0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 0201 	bic.w	r2, r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f812 	bl	800a128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2220      	movs	r2, #32
 800a110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a134:	2b00      	cmp	r3, #0
 800a136:	d108      	bne.n	800a14a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a148:	e031      	b.n	800a1ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a14a:	2310      	movs	r3, #16
 800a14c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a14e:	2310      	movs	r3, #16
 800a150:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	0e5b      	lsrs	r3, r3, #25
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	f003 0307 	and.w	r3, r3, #7
 800a160:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	0f5b      	lsrs	r3, r3, #29
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	f003 0307 	and.w	r3, r3, #7
 800a170:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a172:	7bbb      	ldrb	r3, [r7, #14]
 800a174:	7b3a      	ldrb	r2, [r7, #12]
 800a176:	4911      	ldr	r1, [pc, #68]	@ (800a1bc <UARTEx_SetNbDataToProcess+0x94>)
 800a178:	5c8a      	ldrb	r2, [r1, r2]
 800a17a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a17e:	7b3a      	ldrb	r2, [r7, #12]
 800a180:	490f      	ldr	r1, [pc, #60]	@ (800a1c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a182:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a184:	fb93 f3f2 	sdiv	r3, r3, r2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	7b7a      	ldrb	r2, [r7, #13]
 800a194:	4909      	ldr	r1, [pc, #36]	@ (800a1bc <UARTEx_SetNbDataToProcess+0x94>)
 800a196:	5c8a      	ldrb	r2, [r1, r2]
 800a198:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a19c:	7b7a      	ldrb	r2, [r7, #13]
 800a19e:	4908      	ldr	r1, [pc, #32]	@ (800a1c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a1a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	0800cea0 	.word	0x0800cea0
 800a1c0:	0800cea8 	.word	0x0800cea8

0800a1c4 <__cvt>:
 800a1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1c6:	ed2d 8b02 	vpush	{d8}
 800a1ca:	eeb0 8b40 	vmov.f64	d8, d0
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	4617      	mov	r7, r2
 800a1d2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a1d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1d6:	ee18 2a90 	vmov	r2, s17
 800a1da:	f025 0520 	bic.w	r5, r5, #32
 800a1de:	2a00      	cmp	r2, #0
 800a1e0:	bfb6      	itet	lt
 800a1e2:	222d      	movlt	r2, #45	@ 0x2d
 800a1e4:	2200      	movge	r2, #0
 800a1e6:	eeb1 8b40 	vneglt.f64	d8, d0
 800a1ea:	2d46      	cmp	r5, #70	@ 0x46
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	d004      	beq.n	800a1fc <__cvt+0x38>
 800a1f2:	2d45      	cmp	r5, #69	@ 0x45
 800a1f4:	d100      	bne.n	800a1f8 <__cvt+0x34>
 800a1f6:	3401      	adds	r4, #1
 800a1f8:	2102      	movs	r1, #2
 800a1fa:	e000      	b.n	800a1fe <__cvt+0x3a>
 800a1fc:	2103      	movs	r1, #3
 800a1fe:	ab03      	add	r3, sp, #12
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	ab02      	add	r3, sp, #8
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	4622      	mov	r2, r4
 800a208:	4633      	mov	r3, r6
 800a20a:	eeb0 0b48 	vmov.f64	d0, d8
 800a20e:	f000 ff37 	bl	800b080 <_dtoa_r>
 800a212:	2d47      	cmp	r5, #71	@ 0x47
 800a214:	d114      	bne.n	800a240 <__cvt+0x7c>
 800a216:	07fb      	lsls	r3, r7, #31
 800a218:	d50a      	bpl.n	800a230 <__cvt+0x6c>
 800a21a:	1902      	adds	r2, r0, r4
 800a21c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a224:	bf08      	it	eq
 800a226:	9203      	streq	r2, [sp, #12]
 800a228:	2130      	movs	r1, #48	@ 0x30
 800a22a:	9b03      	ldr	r3, [sp, #12]
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d319      	bcc.n	800a264 <__cvt+0xa0>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a234:	1a1b      	subs	r3, r3, r0
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	b005      	add	sp, #20
 800a23a:	ecbd 8b02 	vpop	{d8}
 800a23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a240:	2d46      	cmp	r5, #70	@ 0x46
 800a242:	eb00 0204 	add.w	r2, r0, r4
 800a246:	d1e9      	bne.n	800a21c <__cvt+0x58>
 800a248:	7803      	ldrb	r3, [r0, #0]
 800a24a:	2b30      	cmp	r3, #48	@ 0x30
 800a24c:	d107      	bne.n	800a25e <__cvt+0x9a>
 800a24e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a256:	bf1c      	itt	ne
 800a258:	f1c4 0401 	rsbne	r4, r4, #1
 800a25c:	6034      	strne	r4, [r6, #0]
 800a25e:	6833      	ldr	r3, [r6, #0]
 800a260:	441a      	add	r2, r3
 800a262:	e7db      	b.n	800a21c <__cvt+0x58>
 800a264:	1c5c      	adds	r4, r3, #1
 800a266:	9403      	str	r4, [sp, #12]
 800a268:	7019      	strb	r1, [r3, #0]
 800a26a:	e7de      	b.n	800a22a <__cvt+0x66>

0800a26c <__exponent>:
 800a26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a26e:	2900      	cmp	r1, #0
 800a270:	bfba      	itte	lt
 800a272:	4249      	neglt	r1, r1
 800a274:	232d      	movlt	r3, #45	@ 0x2d
 800a276:	232b      	movge	r3, #43	@ 0x2b
 800a278:	2909      	cmp	r1, #9
 800a27a:	7002      	strb	r2, [r0, #0]
 800a27c:	7043      	strb	r3, [r0, #1]
 800a27e:	dd29      	ble.n	800a2d4 <__exponent+0x68>
 800a280:	f10d 0307 	add.w	r3, sp, #7
 800a284:	461d      	mov	r5, r3
 800a286:	270a      	movs	r7, #10
 800a288:	461a      	mov	r2, r3
 800a28a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a28e:	fb07 1416 	mls	r4, r7, r6, r1
 800a292:	3430      	adds	r4, #48	@ 0x30
 800a294:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a298:	460c      	mov	r4, r1
 800a29a:	2c63      	cmp	r4, #99	@ 0x63
 800a29c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	dcf1      	bgt.n	800a288 <__exponent+0x1c>
 800a2a4:	3130      	adds	r1, #48	@ 0x30
 800a2a6:	1e94      	subs	r4, r2, #2
 800a2a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a2ac:	1c41      	adds	r1, r0, #1
 800a2ae:	4623      	mov	r3, r4
 800a2b0:	42ab      	cmp	r3, r5
 800a2b2:	d30a      	bcc.n	800a2ca <__exponent+0x5e>
 800a2b4:	f10d 0309 	add.w	r3, sp, #9
 800a2b8:	1a9b      	subs	r3, r3, r2
 800a2ba:	42ac      	cmp	r4, r5
 800a2bc:	bf88      	it	hi
 800a2be:	2300      	movhi	r3, #0
 800a2c0:	3302      	adds	r3, #2
 800a2c2:	4403      	add	r3, r0
 800a2c4:	1a18      	subs	r0, r3, r0
 800a2c6:	b003      	add	sp, #12
 800a2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a2ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a2d2:	e7ed      	b.n	800a2b0 <__exponent+0x44>
 800a2d4:	2330      	movs	r3, #48	@ 0x30
 800a2d6:	3130      	adds	r1, #48	@ 0x30
 800a2d8:	7083      	strb	r3, [r0, #2]
 800a2da:	70c1      	strb	r1, [r0, #3]
 800a2dc:	1d03      	adds	r3, r0, #4
 800a2de:	e7f1      	b.n	800a2c4 <__exponent+0x58>

0800a2e0 <_printf_float>:
 800a2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e4:	b08d      	sub	sp, #52	@ 0x34
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a2ec:	4616      	mov	r6, r2
 800a2ee:	461f      	mov	r7, r3
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	f000 fdb5 	bl	800ae60 <_localeconv_r>
 800a2f6:	f8d0 b000 	ldr.w	fp, [r0]
 800a2fa:	4658      	mov	r0, fp
 800a2fc:	f7f6 f858 	bl	80003b0 <strlen>
 800a300:	2300      	movs	r3, #0
 800a302:	930a      	str	r3, [sp, #40]	@ 0x28
 800a304:	f8d8 3000 	ldr.w	r3, [r8]
 800a308:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a30c:	6822      	ldr	r2, [r4, #0]
 800a30e:	9005      	str	r0, [sp, #20]
 800a310:	3307      	adds	r3, #7
 800a312:	f023 0307 	bic.w	r3, r3, #7
 800a316:	f103 0108 	add.w	r1, r3, #8
 800a31a:	f8c8 1000 	str.w	r1, [r8]
 800a31e:	ed93 0b00 	vldr	d0, [r3]
 800a322:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a580 <_printf_float+0x2a0>
 800a326:	eeb0 7bc0 	vabs.f64	d7, d0
 800a32a:	eeb4 7b46 	vcmp.f64	d7, d6
 800a32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a332:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a336:	dd24      	ble.n	800a382 <_printf_float+0xa2>
 800a338:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a340:	d502      	bpl.n	800a348 <_printf_float+0x68>
 800a342:	232d      	movs	r3, #45	@ 0x2d
 800a344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a348:	498f      	ldr	r1, [pc, #572]	@ (800a588 <_printf_float+0x2a8>)
 800a34a:	4b90      	ldr	r3, [pc, #576]	@ (800a58c <_printf_float+0x2ac>)
 800a34c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a350:	bf8c      	ite	hi
 800a352:	4688      	movhi	r8, r1
 800a354:	4698      	movls	r8, r3
 800a356:	f022 0204 	bic.w	r2, r2, #4
 800a35a:	2303      	movs	r3, #3
 800a35c:	6123      	str	r3, [r4, #16]
 800a35e:	6022      	str	r2, [r4, #0]
 800a360:	f04f 0a00 	mov.w	sl, #0
 800a364:	9700      	str	r7, [sp, #0]
 800a366:	4633      	mov	r3, r6
 800a368:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a36a:	4621      	mov	r1, r4
 800a36c:	4628      	mov	r0, r5
 800a36e:	f000 f9d1 	bl	800a714 <_printf_common>
 800a372:	3001      	adds	r0, #1
 800a374:	f040 8089 	bne.w	800a48a <_printf_float+0x1aa>
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	b00d      	add	sp, #52	@ 0x34
 800a37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a382:	eeb4 0b40 	vcmp.f64	d0, d0
 800a386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38a:	d709      	bvc.n	800a3a0 <_printf_float+0xc0>
 800a38c:	ee10 3a90 	vmov	r3, s1
 800a390:	2b00      	cmp	r3, #0
 800a392:	bfbc      	itt	lt
 800a394:	232d      	movlt	r3, #45	@ 0x2d
 800a396:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a39a:	497d      	ldr	r1, [pc, #500]	@ (800a590 <_printf_float+0x2b0>)
 800a39c:	4b7d      	ldr	r3, [pc, #500]	@ (800a594 <_printf_float+0x2b4>)
 800a39e:	e7d5      	b.n	800a34c <_printf_float+0x6c>
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	1c59      	adds	r1, r3, #1
 800a3a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a3a8:	d139      	bne.n	800a41e <_printf_float+0x13e>
 800a3aa:	2306      	movs	r3, #6
 800a3ac:	6063      	str	r3, [r4, #4]
 800a3ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6022      	str	r2, [r4, #0]
 800a3b6:	9303      	str	r3, [sp, #12]
 800a3b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a3be:	ab09      	add	r3, sp, #36	@ 0x24
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	6861      	ldr	r1, [r4, #4]
 800a3c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f7ff fefb 	bl	800a1c4 <__cvt>
 800a3ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a3d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	d129      	bne.n	800a42c <_printf_float+0x14c>
 800a3d8:	1cc8      	adds	r0, r1, #3
 800a3da:	db02      	blt.n	800a3e2 <_printf_float+0x102>
 800a3dc:	6863      	ldr	r3, [r4, #4]
 800a3de:	4299      	cmp	r1, r3
 800a3e0:	dd41      	ble.n	800a466 <_printf_float+0x186>
 800a3e2:	f1a9 0902 	sub.w	r9, r9, #2
 800a3e6:	fa5f f989 	uxtb.w	r9, r9
 800a3ea:	3901      	subs	r1, #1
 800a3ec:	464a      	mov	r2, r9
 800a3ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3f4:	f7ff ff3a 	bl	800a26c <__exponent>
 800a3f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3fa:	1813      	adds	r3, r2, r0
 800a3fc:	2a01      	cmp	r2, #1
 800a3fe:	4682      	mov	sl, r0
 800a400:	6123      	str	r3, [r4, #16]
 800a402:	dc02      	bgt.n	800a40a <_printf_float+0x12a>
 800a404:	6822      	ldr	r2, [r4, #0]
 800a406:	07d2      	lsls	r2, r2, #31
 800a408:	d501      	bpl.n	800a40e <_printf_float+0x12e>
 800a40a:	3301      	adds	r3, #1
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0a6      	beq.n	800a364 <_printf_float+0x84>
 800a416:	232d      	movs	r3, #45	@ 0x2d
 800a418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a41c:	e7a2      	b.n	800a364 <_printf_float+0x84>
 800a41e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a422:	d1c4      	bne.n	800a3ae <_printf_float+0xce>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1c2      	bne.n	800a3ae <_printf_float+0xce>
 800a428:	2301      	movs	r3, #1
 800a42a:	e7bf      	b.n	800a3ac <_printf_float+0xcc>
 800a42c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a430:	d9db      	bls.n	800a3ea <_printf_float+0x10a>
 800a432:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a436:	d118      	bne.n	800a46a <_printf_float+0x18a>
 800a438:	2900      	cmp	r1, #0
 800a43a:	6863      	ldr	r3, [r4, #4]
 800a43c:	dd0b      	ble.n	800a456 <_printf_float+0x176>
 800a43e:	6121      	str	r1, [r4, #16]
 800a440:	b913      	cbnz	r3, 800a448 <_printf_float+0x168>
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	07d0      	lsls	r0, r2, #31
 800a446:	d502      	bpl.n	800a44e <_printf_float+0x16e>
 800a448:	3301      	adds	r3, #1
 800a44a:	440b      	add	r3, r1
 800a44c:	6123      	str	r3, [r4, #16]
 800a44e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a450:	f04f 0a00 	mov.w	sl, #0
 800a454:	e7db      	b.n	800a40e <_printf_float+0x12e>
 800a456:	b913      	cbnz	r3, 800a45e <_printf_float+0x17e>
 800a458:	6822      	ldr	r2, [r4, #0]
 800a45a:	07d2      	lsls	r2, r2, #31
 800a45c:	d501      	bpl.n	800a462 <_printf_float+0x182>
 800a45e:	3302      	adds	r3, #2
 800a460:	e7f4      	b.n	800a44c <_printf_float+0x16c>
 800a462:	2301      	movs	r3, #1
 800a464:	e7f2      	b.n	800a44c <_printf_float+0x16c>
 800a466:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a46a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a46c:	4299      	cmp	r1, r3
 800a46e:	db05      	blt.n	800a47c <_printf_float+0x19c>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	6121      	str	r1, [r4, #16]
 800a474:	07d8      	lsls	r0, r3, #31
 800a476:	d5ea      	bpl.n	800a44e <_printf_float+0x16e>
 800a478:	1c4b      	adds	r3, r1, #1
 800a47a:	e7e7      	b.n	800a44c <_printf_float+0x16c>
 800a47c:	2900      	cmp	r1, #0
 800a47e:	bfd4      	ite	le
 800a480:	f1c1 0202 	rsble	r2, r1, #2
 800a484:	2201      	movgt	r2, #1
 800a486:	4413      	add	r3, r2
 800a488:	e7e0      	b.n	800a44c <_printf_float+0x16c>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	055a      	lsls	r2, r3, #21
 800a48e:	d407      	bmi.n	800a4a0 <_printf_float+0x1c0>
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	4642      	mov	r2, r8
 800a494:	4631      	mov	r1, r6
 800a496:	4628      	mov	r0, r5
 800a498:	47b8      	blx	r7
 800a49a:	3001      	adds	r0, #1
 800a49c:	d12a      	bne.n	800a4f4 <_printf_float+0x214>
 800a49e:	e76b      	b.n	800a378 <_printf_float+0x98>
 800a4a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a4a4:	f240 80e0 	bls.w	800a668 <_printf_float+0x388>
 800a4a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a4ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b4:	d133      	bne.n	800a51e <_printf_float+0x23e>
 800a4b6:	4a38      	ldr	r2, [pc, #224]	@ (800a598 <_printf_float+0x2b8>)
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f43f af59 	beq.w	800a378 <_printf_float+0x98>
 800a4c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a4ca:	4543      	cmp	r3, r8
 800a4cc:	db02      	blt.n	800a4d4 <_printf_float+0x1f4>
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	07d8      	lsls	r0, r3, #31
 800a4d2:	d50f      	bpl.n	800a4f4 <_printf_float+0x214>
 800a4d4:	9b05      	ldr	r3, [sp, #20]
 800a4d6:	465a      	mov	r2, fp
 800a4d8:	4631      	mov	r1, r6
 800a4da:	4628      	mov	r0, r5
 800a4dc:	47b8      	blx	r7
 800a4de:	3001      	adds	r0, #1
 800a4e0:	f43f af4a 	beq.w	800a378 <_printf_float+0x98>
 800a4e4:	f04f 0900 	mov.w	r9, #0
 800a4e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4ec:	f104 0a1a 	add.w	sl, r4, #26
 800a4f0:	45c8      	cmp	r8, r9
 800a4f2:	dc09      	bgt.n	800a508 <_printf_float+0x228>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	079b      	lsls	r3, r3, #30
 800a4f8:	f100 8107 	bmi.w	800a70a <_printf_float+0x42a>
 800a4fc:	68e0      	ldr	r0, [r4, #12]
 800a4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a500:	4298      	cmp	r0, r3
 800a502:	bfb8      	it	lt
 800a504:	4618      	movlt	r0, r3
 800a506:	e739      	b.n	800a37c <_printf_float+0x9c>
 800a508:	2301      	movs	r3, #1
 800a50a:	4652      	mov	r2, sl
 800a50c:	4631      	mov	r1, r6
 800a50e:	4628      	mov	r0, r5
 800a510:	47b8      	blx	r7
 800a512:	3001      	adds	r0, #1
 800a514:	f43f af30 	beq.w	800a378 <_printf_float+0x98>
 800a518:	f109 0901 	add.w	r9, r9, #1
 800a51c:	e7e8      	b.n	800a4f0 <_printf_float+0x210>
 800a51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a520:	2b00      	cmp	r3, #0
 800a522:	dc3b      	bgt.n	800a59c <_printf_float+0x2bc>
 800a524:	4a1c      	ldr	r2, [pc, #112]	@ (800a598 <_printf_float+0x2b8>)
 800a526:	2301      	movs	r3, #1
 800a528:	4631      	mov	r1, r6
 800a52a:	4628      	mov	r0, r5
 800a52c:	47b8      	blx	r7
 800a52e:	3001      	adds	r0, #1
 800a530:	f43f af22 	beq.w	800a378 <_printf_float+0x98>
 800a534:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a538:	ea59 0303 	orrs.w	r3, r9, r3
 800a53c:	d102      	bne.n	800a544 <_printf_float+0x264>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	07d9      	lsls	r1, r3, #31
 800a542:	d5d7      	bpl.n	800a4f4 <_printf_float+0x214>
 800a544:	9b05      	ldr	r3, [sp, #20]
 800a546:	465a      	mov	r2, fp
 800a548:	4631      	mov	r1, r6
 800a54a:	4628      	mov	r0, r5
 800a54c:	47b8      	blx	r7
 800a54e:	3001      	adds	r0, #1
 800a550:	f43f af12 	beq.w	800a378 <_printf_float+0x98>
 800a554:	f04f 0a00 	mov.w	sl, #0
 800a558:	f104 0b1a 	add.w	fp, r4, #26
 800a55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a55e:	425b      	negs	r3, r3
 800a560:	4553      	cmp	r3, sl
 800a562:	dc01      	bgt.n	800a568 <_printf_float+0x288>
 800a564:	464b      	mov	r3, r9
 800a566:	e794      	b.n	800a492 <_printf_float+0x1b2>
 800a568:	2301      	movs	r3, #1
 800a56a:	465a      	mov	r2, fp
 800a56c:	4631      	mov	r1, r6
 800a56e:	4628      	mov	r0, r5
 800a570:	47b8      	blx	r7
 800a572:	3001      	adds	r0, #1
 800a574:	f43f af00 	beq.w	800a378 <_printf_float+0x98>
 800a578:	f10a 0a01 	add.w	sl, sl, #1
 800a57c:	e7ee      	b.n	800a55c <_printf_float+0x27c>
 800a57e:	bf00      	nop
 800a580:	ffffffff 	.word	0xffffffff
 800a584:	7fefffff 	.word	0x7fefffff
 800a588:	0800ceb4 	.word	0x0800ceb4
 800a58c:	0800ceb0 	.word	0x0800ceb0
 800a590:	0800cebc 	.word	0x0800cebc
 800a594:	0800ceb8 	.word	0x0800ceb8
 800a598:	0800cec0 	.word	0x0800cec0
 800a59c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a59e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a5a2:	4553      	cmp	r3, sl
 800a5a4:	bfa8      	it	ge
 800a5a6:	4653      	movge	r3, sl
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	4699      	mov	r9, r3
 800a5ac:	dc37      	bgt.n	800a61e <_printf_float+0x33e>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	9307      	str	r3, [sp, #28]
 800a5b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5b6:	f104 021a 	add.w	r2, r4, #26
 800a5ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5bc:	9907      	ldr	r1, [sp, #28]
 800a5be:	9306      	str	r3, [sp, #24]
 800a5c0:	eba3 0309 	sub.w	r3, r3, r9
 800a5c4:	428b      	cmp	r3, r1
 800a5c6:	dc31      	bgt.n	800a62c <_printf_float+0x34c>
 800a5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ca:	459a      	cmp	sl, r3
 800a5cc:	dc3b      	bgt.n	800a646 <_printf_float+0x366>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	07da      	lsls	r2, r3, #31
 800a5d2:	d438      	bmi.n	800a646 <_printf_float+0x366>
 800a5d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5d6:	ebaa 0903 	sub.w	r9, sl, r3
 800a5da:	9b06      	ldr	r3, [sp, #24]
 800a5dc:	ebaa 0303 	sub.w	r3, sl, r3
 800a5e0:	4599      	cmp	r9, r3
 800a5e2:	bfa8      	it	ge
 800a5e4:	4699      	movge	r9, r3
 800a5e6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ea:	dc34      	bgt.n	800a656 <_printf_float+0x376>
 800a5ec:	f04f 0800 	mov.w	r8, #0
 800a5f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5f4:	f104 0b1a 	add.w	fp, r4, #26
 800a5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5fa:	ebaa 0303 	sub.w	r3, sl, r3
 800a5fe:	eba3 0309 	sub.w	r3, r3, r9
 800a602:	4543      	cmp	r3, r8
 800a604:	f77f af76 	ble.w	800a4f4 <_printf_float+0x214>
 800a608:	2301      	movs	r3, #1
 800a60a:	465a      	mov	r2, fp
 800a60c:	4631      	mov	r1, r6
 800a60e:	4628      	mov	r0, r5
 800a610:	47b8      	blx	r7
 800a612:	3001      	adds	r0, #1
 800a614:	f43f aeb0 	beq.w	800a378 <_printf_float+0x98>
 800a618:	f108 0801 	add.w	r8, r8, #1
 800a61c:	e7ec      	b.n	800a5f8 <_printf_float+0x318>
 800a61e:	4642      	mov	r2, r8
 800a620:	4631      	mov	r1, r6
 800a622:	4628      	mov	r0, r5
 800a624:	47b8      	blx	r7
 800a626:	3001      	adds	r0, #1
 800a628:	d1c1      	bne.n	800a5ae <_printf_float+0x2ce>
 800a62a:	e6a5      	b.n	800a378 <_printf_float+0x98>
 800a62c:	2301      	movs	r3, #1
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	9206      	str	r2, [sp, #24]
 800a634:	47b8      	blx	r7
 800a636:	3001      	adds	r0, #1
 800a638:	f43f ae9e 	beq.w	800a378 <_printf_float+0x98>
 800a63c:	9b07      	ldr	r3, [sp, #28]
 800a63e:	9a06      	ldr	r2, [sp, #24]
 800a640:	3301      	adds	r3, #1
 800a642:	9307      	str	r3, [sp, #28]
 800a644:	e7b9      	b.n	800a5ba <_printf_float+0x2da>
 800a646:	9b05      	ldr	r3, [sp, #20]
 800a648:	465a      	mov	r2, fp
 800a64a:	4631      	mov	r1, r6
 800a64c:	4628      	mov	r0, r5
 800a64e:	47b8      	blx	r7
 800a650:	3001      	adds	r0, #1
 800a652:	d1bf      	bne.n	800a5d4 <_printf_float+0x2f4>
 800a654:	e690      	b.n	800a378 <_printf_float+0x98>
 800a656:	9a06      	ldr	r2, [sp, #24]
 800a658:	464b      	mov	r3, r9
 800a65a:	4442      	add	r2, r8
 800a65c:	4631      	mov	r1, r6
 800a65e:	4628      	mov	r0, r5
 800a660:	47b8      	blx	r7
 800a662:	3001      	adds	r0, #1
 800a664:	d1c2      	bne.n	800a5ec <_printf_float+0x30c>
 800a666:	e687      	b.n	800a378 <_printf_float+0x98>
 800a668:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a66c:	f1b9 0f01 	cmp.w	r9, #1
 800a670:	dc01      	bgt.n	800a676 <_printf_float+0x396>
 800a672:	07db      	lsls	r3, r3, #31
 800a674:	d536      	bpl.n	800a6e4 <_printf_float+0x404>
 800a676:	2301      	movs	r3, #1
 800a678:	4642      	mov	r2, r8
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b8      	blx	r7
 800a680:	3001      	adds	r0, #1
 800a682:	f43f ae79 	beq.w	800a378 <_printf_float+0x98>
 800a686:	9b05      	ldr	r3, [sp, #20]
 800a688:	465a      	mov	r2, fp
 800a68a:	4631      	mov	r1, r6
 800a68c:	4628      	mov	r0, r5
 800a68e:	47b8      	blx	r7
 800a690:	3001      	adds	r0, #1
 800a692:	f43f ae71 	beq.w	800a378 <_printf_float+0x98>
 800a696:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a69a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a6a6:	d018      	beq.n	800a6da <_printf_float+0x3fa>
 800a6a8:	464b      	mov	r3, r9
 800a6aa:	f108 0201 	add.w	r2, r8, #1
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d10c      	bne.n	800a6d2 <_printf_float+0x3f2>
 800a6b8:	e65e      	b.n	800a378 <_printf_float+0x98>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	465a      	mov	r2, fp
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	47b8      	blx	r7
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	f43f ae57 	beq.w	800a378 <_printf_float+0x98>
 800a6ca:	f108 0801 	add.w	r8, r8, #1
 800a6ce:	45c8      	cmp	r8, r9
 800a6d0:	dbf3      	blt.n	800a6ba <_printf_float+0x3da>
 800a6d2:	4653      	mov	r3, sl
 800a6d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a6d8:	e6dc      	b.n	800a494 <_printf_float+0x1b4>
 800a6da:	f04f 0800 	mov.w	r8, #0
 800a6de:	f104 0b1a 	add.w	fp, r4, #26
 800a6e2:	e7f4      	b.n	800a6ce <_printf_float+0x3ee>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	e7e1      	b.n	800a6ae <_printf_float+0x3ce>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	464a      	mov	r2, r9
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b8      	blx	r7
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	f43f ae3f 	beq.w	800a378 <_printf_float+0x98>
 800a6fa:	f108 0801 	add.w	r8, r8, #1
 800a6fe:	68e3      	ldr	r3, [r4, #12]
 800a700:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a702:	1a5b      	subs	r3, r3, r1
 800a704:	4543      	cmp	r3, r8
 800a706:	dcf0      	bgt.n	800a6ea <_printf_float+0x40a>
 800a708:	e6f8      	b.n	800a4fc <_printf_float+0x21c>
 800a70a:	f04f 0800 	mov.w	r8, #0
 800a70e:	f104 0919 	add.w	r9, r4, #25
 800a712:	e7f4      	b.n	800a6fe <_printf_float+0x41e>

0800a714 <_printf_common>:
 800a714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a718:	4616      	mov	r6, r2
 800a71a:	4698      	mov	r8, r3
 800a71c:	688a      	ldr	r2, [r1, #8]
 800a71e:	690b      	ldr	r3, [r1, #16]
 800a720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a724:	4293      	cmp	r3, r2
 800a726:	bfb8      	it	lt
 800a728:	4613      	movlt	r3, r2
 800a72a:	6033      	str	r3, [r6, #0]
 800a72c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a730:	4607      	mov	r7, r0
 800a732:	460c      	mov	r4, r1
 800a734:	b10a      	cbz	r2, 800a73a <_printf_common+0x26>
 800a736:	3301      	adds	r3, #1
 800a738:	6033      	str	r3, [r6, #0]
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	0699      	lsls	r1, r3, #26
 800a73e:	bf42      	ittt	mi
 800a740:	6833      	ldrmi	r3, [r6, #0]
 800a742:	3302      	addmi	r3, #2
 800a744:	6033      	strmi	r3, [r6, #0]
 800a746:	6825      	ldr	r5, [r4, #0]
 800a748:	f015 0506 	ands.w	r5, r5, #6
 800a74c:	d106      	bne.n	800a75c <_printf_common+0x48>
 800a74e:	f104 0a19 	add.w	sl, r4, #25
 800a752:	68e3      	ldr	r3, [r4, #12]
 800a754:	6832      	ldr	r2, [r6, #0]
 800a756:	1a9b      	subs	r3, r3, r2
 800a758:	42ab      	cmp	r3, r5
 800a75a:	dc26      	bgt.n	800a7aa <_printf_common+0x96>
 800a75c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a760:	6822      	ldr	r2, [r4, #0]
 800a762:	3b00      	subs	r3, #0
 800a764:	bf18      	it	ne
 800a766:	2301      	movne	r3, #1
 800a768:	0692      	lsls	r2, r2, #26
 800a76a:	d42b      	bmi.n	800a7c4 <_printf_common+0xb0>
 800a76c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a770:	4641      	mov	r1, r8
 800a772:	4638      	mov	r0, r7
 800a774:	47c8      	blx	r9
 800a776:	3001      	adds	r0, #1
 800a778:	d01e      	beq.n	800a7b8 <_printf_common+0xa4>
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	6922      	ldr	r2, [r4, #16]
 800a77e:	f003 0306 	and.w	r3, r3, #6
 800a782:	2b04      	cmp	r3, #4
 800a784:	bf02      	ittt	eq
 800a786:	68e5      	ldreq	r5, [r4, #12]
 800a788:	6833      	ldreq	r3, [r6, #0]
 800a78a:	1aed      	subeq	r5, r5, r3
 800a78c:	68a3      	ldr	r3, [r4, #8]
 800a78e:	bf0c      	ite	eq
 800a790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a794:	2500      	movne	r5, #0
 800a796:	4293      	cmp	r3, r2
 800a798:	bfc4      	itt	gt
 800a79a:	1a9b      	subgt	r3, r3, r2
 800a79c:	18ed      	addgt	r5, r5, r3
 800a79e:	2600      	movs	r6, #0
 800a7a0:	341a      	adds	r4, #26
 800a7a2:	42b5      	cmp	r5, r6
 800a7a4:	d11a      	bne.n	800a7dc <_printf_common+0xc8>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e008      	b.n	800a7bc <_printf_common+0xa8>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4652      	mov	r2, sl
 800a7ae:	4641      	mov	r1, r8
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	47c8      	blx	r9
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d103      	bne.n	800a7c0 <_printf_common+0xac>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c0:	3501      	adds	r5, #1
 800a7c2:	e7c6      	b.n	800a752 <_printf_common+0x3e>
 800a7c4:	18e1      	adds	r1, r4, r3
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	2030      	movs	r0, #48	@ 0x30
 800a7ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7ce:	4422      	add	r2, r4
 800a7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7d8:	3302      	adds	r3, #2
 800a7da:	e7c7      	b.n	800a76c <_printf_common+0x58>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	4622      	mov	r2, r4
 800a7e0:	4641      	mov	r1, r8
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c8      	blx	r9
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d0e6      	beq.n	800a7b8 <_printf_common+0xa4>
 800a7ea:	3601      	adds	r6, #1
 800a7ec:	e7d9      	b.n	800a7a2 <_printf_common+0x8e>
	...

0800a7f0 <_printf_i>:
 800a7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f4:	7e0f      	ldrb	r7, [r1, #24]
 800a7f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7f8:	2f78      	cmp	r7, #120	@ 0x78
 800a7fa:	4691      	mov	r9, r2
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	469a      	mov	sl, r3
 800a802:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a806:	d807      	bhi.n	800a818 <_printf_i+0x28>
 800a808:	2f62      	cmp	r7, #98	@ 0x62
 800a80a:	d80a      	bhi.n	800a822 <_printf_i+0x32>
 800a80c:	2f00      	cmp	r7, #0
 800a80e:	f000 80d1 	beq.w	800a9b4 <_printf_i+0x1c4>
 800a812:	2f58      	cmp	r7, #88	@ 0x58
 800a814:	f000 80b8 	beq.w	800a988 <_printf_i+0x198>
 800a818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a81c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a820:	e03a      	b.n	800a898 <_printf_i+0xa8>
 800a822:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a826:	2b15      	cmp	r3, #21
 800a828:	d8f6      	bhi.n	800a818 <_printf_i+0x28>
 800a82a:	a101      	add	r1, pc, #4	@ (adr r1, 800a830 <_printf_i+0x40>)
 800a82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a830:	0800a889 	.word	0x0800a889
 800a834:	0800a89d 	.word	0x0800a89d
 800a838:	0800a819 	.word	0x0800a819
 800a83c:	0800a819 	.word	0x0800a819
 800a840:	0800a819 	.word	0x0800a819
 800a844:	0800a819 	.word	0x0800a819
 800a848:	0800a89d 	.word	0x0800a89d
 800a84c:	0800a819 	.word	0x0800a819
 800a850:	0800a819 	.word	0x0800a819
 800a854:	0800a819 	.word	0x0800a819
 800a858:	0800a819 	.word	0x0800a819
 800a85c:	0800a99b 	.word	0x0800a99b
 800a860:	0800a8c7 	.word	0x0800a8c7
 800a864:	0800a955 	.word	0x0800a955
 800a868:	0800a819 	.word	0x0800a819
 800a86c:	0800a819 	.word	0x0800a819
 800a870:	0800a9bd 	.word	0x0800a9bd
 800a874:	0800a819 	.word	0x0800a819
 800a878:	0800a8c7 	.word	0x0800a8c7
 800a87c:	0800a819 	.word	0x0800a819
 800a880:	0800a819 	.word	0x0800a819
 800a884:	0800a95d 	.word	0x0800a95d
 800a888:	6833      	ldr	r3, [r6, #0]
 800a88a:	1d1a      	adds	r2, r3, #4
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6032      	str	r2, [r6, #0]
 800a890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a894:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a898:	2301      	movs	r3, #1
 800a89a:	e09c      	b.n	800a9d6 <_printf_i+0x1e6>
 800a89c:	6833      	ldr	r3, [r6, #0]
 800a89e:	6820      	ldr	r0, [r4, #0]
 800a8a0:	1d19      	adds	r1, r3, #4
 800a8a2:	6031      	str	r1, [r6, #0]
 800a8a4:	0606      	lsls	r6, r0, #24
 800a8a6:	d501      	bpl.n	800a8ac <_printf_i+0xbc>
 800a8a8:	681d      	ldr	r5, [r3, #0]
 800a8aa:	e003      	b.n	800a8b4 <_printf_i+0xc4>
 800a8ac:	0645      	lsls	r5, r0, #25
 800a8ae:	d5fb      	bpl.n	800a8a8 <_printf_i+0xb8>
 800a8b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8b4:	2d00      	cmp	r5, #0
 800a8b6:	da03      	bge.n	800a8c0 <_printf_i+0xd0>
 800a8b8:	232d      	movs	r3, #45	@ 0x2d
 800a8ba:	426d      	negs	r5, r5
 800a8bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8c0:	4858      	ldr	r0, [pc, #352]	@ (800aa24 <_printf_i+0x234>)
 800a8c2:	230a      	movs	r3, #10
 800a8c4:	e011      	b.n	800a8ea <_printf_i+0xfa>
 800a8c6:	6821      	ldr	r1, [r4, #0]
 800a8c8:	6833      	ldr	r3, [r6, #0]
 800a8ca:	0608      	lsls	r0, r1, #24
 800a8cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8d0:	d402      	bmi.n	800a8d8 <_printf_i+0xe8>
 800a8d2:	0649      	lsls	r1, r1, #25
 800a8d4:	bf48      	it	mi
 800a8d6:	b2ad      	uxthmi	r5, r5
 800a8d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8da:	4852      	ldr	r0, [pc, #328]	@ (800aa24 <_printf_i+0x234>)
 800a8dc:	6033      	str	r3, [r6, #0]
 800a8de:	bf14      	ite	ne
 800a8e0:	230a      	movne	r3, #10
 800a8e2:	2308      	moveq	r3, #8
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8ea:	6866      	ldr	r6, [r4, #4]
 800a8ec:	60a6      	str	r6, [r4, #8]
 800a8ee:	2e00      	cmp	r6, #0
 800a8f0:	db05      	blt.n	800a8fe <_printf_i+0x10e>
 800a8f2:	6821      	ldr	r1, [r4, #0]
 800a8f4:	432e      	orrs	r6, r5
 800a8f6:	f021 0104 	bic.w	r1, r1, #4
 800a8fa:	6021      	str	r1, [r4, #0]
 800a8fc:	d04b      	beq.n	800a996 <_printf_i+0x1a6>
 800a8fe:	4616      	mov	r6, r2
 800a900:	fbb5 f1f3 	udiv	r1, r5, r3
 800a904:	fb03 5711 	mls	r7, r3, r1, r5
 800a908:	5dc7      	ldrb	r7, [r0, r7]
 800a90a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a90e:	462f      	mov	r7, r5
 800a910:	42bb      	cmp	r3, r7
 800a912:	460d      	mov	r5, r1
 800a914:	d9f4      	bls.n	800a900 <_printf_i+0x110>
 800a916:	2b08      	cmp	r3, #8
 800a918:	d10b      	bne.n	800a932 <_printf_i+0x142>
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	07df      	lsls	r7, r3, #31
 800a91e:	d508      	bpl.n	800a932 <_printf_i+0x142>
 800a920:	6923      	ldr	r3, [r4, #16]
 800a922:	6861      	ldr	r1, [r4, #4]
 800a924:	4299      	cmp	r1, r3
 800a926:	bfde      	ittt	le
 800a928:	2330      	movle	r3, #48	@ 0x30
 800a92a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a92e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a932:	1b92      	subs	r2, r2, r6
 800a934:	6122      	str	r2, [r4, #16]
 800a936:	f8cd a000 	str.w	sl, [sp]
 800a93a:	464b      	mov	r3, r9
 800a93c:	aa03      	add	r2, sp, #12
 800a93e:	4621      	mov	r1, r4
 800a940:	4640      	mov	r0, r8
 800a942:	f7ff fee7 	bl	800a714 <_printf_common>
 800a946:	3001      	adds	r0, #1
 800a948:	d14a      	bne.n	800a9e0 <_printf_i+0x1f0>
 800a94a:	f04f 30ff 	mov.w	r0, #4294967295
 800a94e:	b004      	add	sp, #16
 800a950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	f043 0320 	orr.w	r3, r3, #32
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	4832      	ldr	r0, [pc, #200]	@ (800aa28 <_printf_i+0x238>)
 800a95e:	2778      	movs	r7, #120	@ 0x78
 800a960:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	6831      	ldr	r1, [r6, #0]
 800a968:	061f      	lsls	r7, r3, #24
 800a96a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a96e:	d402      	bmi.n	800a976 <_printf_i+0x186>
 800a970:	065f      	lsls	r7, r3, #25
 800a972:	bf48      	it	mi
 800a974:	b2ad      	uxthmi	r5, r5
 800a976:	6031      	str	r1, [r6, #0]
 800a978:	07d9      	lsls	r1, r3, #31
 800a97a:	bf44      	itt	mi
 800a97c:	f043 0320 	orrmi.w	r3, r3, #32
 800a980:	6023      	strmi	r3, [r4, #0]
 800a982:	b11d      	cbz	r5, 800a98c <_printf_i+0x19c>
 800a984:	2310      	movs	r3, #16
 800a986:	e7ad      	b.n	800a8e4 <_printf_i+0xf4>
 800a988:	4826      	ldr	r0, [pc, #152]	@ (800aa24 <_printf_i+0x234>)
 800a98a:	e7e9      	b.n	800a960 <_printf_i+0x170>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	f023 0320 	bic.w	r3, r3, #32
 800a992:	6023      	str	r3, [r4, #0]
 800a994:	e7f6      	b.n	800a984 <_printf_i+0x194>
 800a996:	4616      	mov	r6, r2
 800a998:	e7bd      	b.n	800a916 <_printf_i+0x126>
 800a99a:	6833      	ldr	r3, [r6, #0]
 800a99c:	6825      	ldr	r5, [r4, #0]
 800a99e:	6961      	ldr	r1, [r4, #20]
 800a9a0:	1d18      	adds	r0, r3, #4
 800a9a2:	6030      	str	r0, [r6, #0]
 800a9a4:	062e      	lsls	r6, r5, #24
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	d501      	bpl.n	800a9ae <_printf_i+0x1be>
 800a9aa:	6019      	str	r1, [r3, #0]
 800a9ac:	e002      	b.n	800a9b4 <_printf_i+0x1c4>
 800a9ae:	0668      	lsls	r0, r5, #25
 800a9b0:	d5fb      	bpl.n	800a9aa <_printf_i+0x1ba>
 800a9b2:	8019      	strh	r1, [r3, #0]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	6123      	str	r3, [r4, #16]
 800a9b8:	4616      	mov	r6, r2
 800a9ba:	e7bc      	b.n	800a936 <_printf_i+0x146>
 800a9bc:	6833      	ldr	r3, [r6, #0]
 800a9be:	1d1a      	adds	r2, r3, #4
 800a9c0:	6032      	str	r2, [r6, #0]
 800a9c2:	681e      	ldr	r6, [r3, #0]
 800a9c4:	6862      	ldr	r2, [r4, #4]
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7f5 fca1 	bl	8000310 <memchr>
 800a9ce:	b108      	cbz	r0, 800a9d4 <_printf_i+0x1e4>
 800a9d0:	1b80      	subs	r0, r0, r6
 800a9d2:	6060      	str	r0, [r4, #4]
 800a9d4:	6863      	ldr	r3, [r4, #4]
 800a9d6:	6123      	str	r3, [r4, #16]
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9de:	e7aa      	b.n	800a936 <_printf_i+0x146>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	4649      	mov	r1, r9
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	47d0      	blx	sl
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	d0ad      	beq.n	800a94a <_printf_i+0x15a>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	079b      	lsls	r3, r3, #30
 800a9f2:	d413      	bmi.n	800aa1c <_printf_i+0x22c>
 800a9f4:	68e0      	ldr	r0, [r4, #12]
 800a9f6:	9b03      	ldr	r3, [sp, #12]
 800a9f8:	4298      	cmp	r0, r3
 800a9fa:	bfb8      	it	lt
 800a9fc:	4618      	movlt	r0, r3
 800a9fe:	e7a6      	b.n	800a94e <_printf_i+0x15e>
 800aa00:	2301      	movs	r3, #1
 800aa02:	4632      	mov	r2, r6
 800aa04:	4649      	mov	r1, r9
 800aa06:	4640      	mov	r0, r8
 800aa08:	47d0      	blx	sl
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d09d      	beq.n	800a94a <_printf_i+0x15a>
 800aa0e:	3501      	adds	r5, #1
 800aa10:	68e3      	ldr	r3, [r4, #12]
 800aa12:	9903      	ldr	r1, [sp, #12]
 800aa14:	1a5b      	subs	r3, r3, r1
 800aa16:	42ab      	cmp	r3, r5
 800aa18:	dcf2      	bgt.n	800aa00 <_printf_i+0x210>
 800aa1a:	e7eb      	b.n	800a9f4 <_printf_i+0x204>
 800aa1c:	2500      	movs	r5, #0
 800aa1e:	f104 0619 	add.w	r6, r4, #25
 800aa22:	e7f5      	b.n	800aa10 <_printf_i+0x220>
 800aa24:	0800cec2 	.word	0x0800cec2
 800aa28:	0800ced3 	.word	0x0800ced3

0800aa2c <std>:
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	b510      	push	{r4, lr}
 800aa30:	4604      	mov	r4, r0
 800aa32:	e9c0 3300 	strd	r3, r3, [r0]
 800aa36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa3a:	6083      	str	r3, [r0, #8]
 800aa3c:	8181      	strh	r1, [r0, #12]
 800aa3e:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa40:	81c2      	strh	r2, [r0, #14]
 800aa42:	6183      	str	r3, [r0, #24]
 800aa44:	4619      	mov	r1, r3
 800aa46:	2208      	movs	r2, #8
 800aa48:	305c      	adds	r0, #92	@ 0x5c
 800aa4a:	f000 fa01 	bl	800ae50 <memset>
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa84 <std+0x58>)
 800aa50:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa52:	4b0d      	ldr	r3, [pc, #52]	@ (800aa88 <std+0x5c>)
 800aa54:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa56:	4b0d      	ldr	r3, [pc, #52]	@ (800aa8c <std+0x60>)
 800aa58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa5a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa90 <std+0x64>)
 800aa5c:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa94 <std+0x68>)
 800aa60:	6224      	str	r4, [r4, #32]
 800aa62:	429c      	cmp	r4, r3
 800aa64:	d006      	beq.n	800aa74 <std+0x48>
 800aa66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa6a:	4294      	cmp	r4, r2
 800aa6c:	d002      	beq.n	800aa74 <std+0x48>
 800aa6e:	33d0      	adds	r3, #208	@ 0xd0
 800aa70:	429c      	cmp	r4, r3
 800aa72:	d105      	bne.n	800aa80 <std+0x54>
 800aa74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa7c:	f000 ba64 	b.w	800af48 <__retarget_lock_init_recursive>
 800aa80:	bd10      	pop	{r4, pc}
 800aa82:	bf00      	nop
 800aa84:	0800aca1 	.word	0x0800aca1
 800aa88:	0800acc3 	.word	0x0800acc3
 800aa8c:	0800acfb 	.word	0x0800acfb
 800aa90:	0800ad1f 	.word	0x0800ad1f
 800aa94:	24000670 	.word	0x24000670

0800aa98 <stdio_exit_handler>:
 800aa98:	4a02      	ldr	r2, [pc, #8]	@ (800aaa4 <stdio_exit_handler+0xc>)
 800aa9a:	4903      	ldr	r1, [pc, #12]	@ (800aaa8 <stdio_exit_handler+0x10>)
 800aa9c:	4803      	ldr	r0, [pc, #12]	@ (800aaac <stdio_exit_handler+0x14>)
 800aa9e:	f000 b869 	b.w	800ab74 <_fwalk_sglue>
 800aaa2:	bf00      	nop
 800aaa4:	24000018 	.word	0x24000018
 800aaa8:	0800c7bd 	.word	0x0800c7bd
 800aaac:	24000028 	.word	0x24000028

0800aab0 <cleanup_stdio>:
 800aab0:	6841      	ldr	r1, [r0, #4]
 800aab2:	4b0c      	ldr	r3, [pc, #48]	@ (800aae4 <cleanup_stdio+0x34>)
 800aab4:	4299      	cmp	r1, r3
 800aab6:	b510      	push	{r4, lr}
 800aab8:	4604      	mov	r4, r0
 800aaba:	d001      	beq.n	800aac0 <cleanup_stdio+0x10>
 800aabc:	f001 fe7e 	bl	800c7bc <_fflush_r>
 800aac0:	68a1      	ldr	r1, [r4, #8]
 800aac2:	4b09      	ldr	r3, [pc, #36]	@ (800aae8 <cleanup_stdio+0x38>)
 800aac4:	4299      	cmp	r1, r3
 800aac6:	d002      	beq.n	800aace <cleanup_stdio+0x1e>
 800aac8:	4620      	mov	r0, r4
 800aaca:	f001 fe77 	bl	800c7bc <_fflush_r>
 800aace:	68e1      	ldr	r1, [r4, #12]
 800aad0:	4b06      	ldr	r3, [pc, #24]	@ (800aaec <cleanup_stdio+0x3c>)
 800aad2:	4299      	cmp	r1, r3
 800aad4:	d004      	beq.n	800aae0 <cleanup_stdio+0x30>
 800aad6:	4620      	mov	r0, r4
 800aad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aadc:	f001 be6e 	b.w	800c7bc <_fflush_r>
 800aae0:	bd10      	pop	{r4, pc}
 800aae2:	bf00      	nop
 800aae4:	24000670 	.word	0x24000670
 800aae8:	240006d8 	.word	0x240006d8
 800aaec:	24000740 	.word	0x24000740

0800aaf0 <global_stdio_init.part.0>:
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ab20 <global_stdio_init.part.0+0x30>)
 800aaf4:	4c0b      	ldr	r4, [pc, #44]	@ (800ab24 <global_stdio_init.part.0+0x34>)
 800aaf6:	4a0c      	ldr	r2, [pc, #48]	@ (800ab28 <global_stdio_init.part.0+0x38>)
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	4620      	mov	r0, r4
 800aafc:	2200      	movs	r2, #0
 800aafe:	2104      	movs	r1, #4
 800ab00:	f7ff ff94 	bl	800aa2c <std>
 800ab04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab08:	2201      	movs	r2, #1
 800ab0a:	2109      	movs	r1, #9
 800ab0c:	f7ff ff8e 	bl	800aa2c <std>
 800ab10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab14:	2202      	movs	r2, #2
 800ab16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab1a:	2112      	movs	r1, #18
 800ab1c:	f7ff bf86 	b.w	800aa2c <std>
 800ab20:	240007a8 	.word	0x240007a8
 800ab24:	24000670 	.word	0x24000670
 800ab28:	0800aa99 	.word	0x0800aa99

0800ab2c <__sfp_lock_acquire>:
 800ab2c:	4801      	ldr	r0, [pc, #4]	@ (800ab34 <__sfp_lock_acquire+0x8>)
 800ab2e:	f000 ba0c 	b.w	800af4a <__retarget_lock_acquire_recursive>
 800ab32:	bf00      	nop
 800ab34:	240007b1 	.word	0x240007b1

0800ab38 <__sfp_lock_release>:
 800ab38:	4801      	ldr	r0, [pc, #4]	@ (800ab40 <__sfp_lock_release+0x8>)
 800ab3a:	f000 ba07 	b.w	800af4c <__retarget_lock_release_recursive>
 800ab3e:	bf00      	nop
 800ab40:	240007b1 	.word	0x240007b1

0800ab44 <__sinit>:
 800ab44:	b510      	push	{r4, lr}
 800ab46:	4604      	mov	r4, r0
 800ab48:	f7ff fff0 	bl	800ab2c <__sfp_lock_acquire>
 800ab4c:	6a23      	ldr	r3, [r4, #32]
 800ab4e:	b11b      	cbz	r3, 800ab58 <__sinit+0x14>
 800ab50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab54:	f7ff bff0 	b.w	800ab38 <__sfp_lock_release>
 800ab58:	4b04      	ldr	r3, [pc, #16]	@ (800ab6c <__sinit+0x28>)
 800ab5a:	6223      	str	r3, [r4, #32]
 800ab5c:	4b04      	ldr	r3, [pc, #16]	@ (800ab70 <__sinit+0x2c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1f5      	bne.n	800ab50 <__sinit+0xc>
 800ab64:	f7ff ffc4 	bl	800aaf0 <global_stdio_init.part.0>
 800ab68:	e7f2      	b.n	800ab50 <__sinit+0xc>
 800ab6a:	bf00      	nop
 800ab6c:	0800aab1 	.word	0x0800aab1
 800ab70:	240007a8 	.word	0x240007a8

0800ab74 <_fwalk_sglue>:
 800ab74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab78:	4607      	mov	r7, r0
 800ab7a:	4688      	mov	r8, r1
 800ab7c:	4614      	mov	r4, r2
 800ab7e:	2600      	movs	r6, #0
 800ab80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab84:	f1b9 0901 	subs.w	r9, r9, #1
 800ab88:	d505      	bpl.n	800ab96 <_fwalk_sglue+0x22>
 800ab8a:	6824      	ldr	r4, [r4, #0]
 800ab8c:	2c00      	cmp	r4, #0
 800ab8e:	d1f7      	bne.n	800ab80 <_fwalk_sglue+0xc>
 800ab90:	4630      	mov	r0, r6
 800ab92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab96:	89ab      	ldrh	r3, [r5, #12]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d907      	bls.n	800abac <_fwalk_sglue+0x38>
 800ab9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aba0:	3301      	adds	r3, #1
 800aba2:	d003      	beq.n	800abac <_fwalk_sglue+0x38>
 800aba4:	4629      	mov	r1, r5
 800aba6:	4638      	mov	r0, r7
 800aba8:	47c0      	blx	r8
 800abaa:	4306      	orrs	r6, r0
 800abac:	3568      	adds	r5, #104	@ 0x68
 800abae:	e7e9      	b.n	800ab84 <_fwalk_sglue+0x10>

0800abb0 <iprintf>:
 800abb0:	b40f      	push	{r0, r1, r2, r3}
 800abb2:	b507      	push	{r0, r1, r2, lr}
 800abb4:	4906      	ldr	r1, [pc, #24]	@ (800abd0 <iprintf+0x20>)
 800abb6:	ab04      	add	r3, sp, #16
 800abb8:	6808      	ldr	r0, [r1, #0]
 800abba:	f853 2b04 	ldr.w	r2, [r3], #4
 800abbe:	6881      	ldr	r1, [r0, #8]
 800abc0:	9301      	str	r3, [sp, #4]
 800abc2:	f001 fc5f 	bl	800c484 <_vfiprintf_r>
 800abc6:	b003      	add	sp, #12
 800abc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abcc:	b004      	add	sp, #16
 800abce:	4770      	bx	lr
 800abd0:	24000024 	.word	0x24000024

0800abd4 <putchar>:
 800abd4:	4b02      	ldr	r3, [pc, #8]	@ (800abe0 <putchar+0xc>)
 800abd6:	4601      	mov	r1, r0
 800abd8:	6818      	ldr	r0, [r3, #0]
 800abda:	6882      	ldr	r2, [r0, #8]
 800abdc:	f001 be78 	b.w	800c8d0 <_putc_r>
 800abe0:	24000024 	.word	0x24000024

0800abe4 <_puts_r>:
 800abe4:	6a03      	ldr	r3, [r0, #32]
 800abe6:	b570      	push	{r4, r5, r6, lr}
 800abe8:	6884      	ldr	r4, [r0, #8]
 800abea:	4605      	mov	r5, r0
 800abec:	460e      	mov	r6, r1
 800abee:	b90b      	cbnz	r3, 800abf4 <_puts_r+0x10>
 800abf0:	f7ff ffa8 	bl	800ab44 <__sinit>
 800abf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abf6:	07db      	lsls	r3, r3, #31
 800abf8:	d405      	bmi.n	800ac06 <_puts_r+0x22>
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	0598      	lsls	r0, r3, #22
 800abfe:	d402      	bmi.n	800ac06 <_puts_r+0x22>
 800ac00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac02:	f000 f9a2 	bl	800af4a <__retarget_lock_acquire_recursive>
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	0719      	lsls	r1, r3, #28
 800ac0a:	d502      	bpl.n	800ac12 <_puts_r+0x2e>
 800ac0c:	6923      	ldr	r3, [r4, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d135      	bne.n	800ac7e <_puts_r+0x9a>
 800ac12:	4621      	mov	r1, r4
 800ac14:	4628      	mov	r0, r5
 800ac16:	f000 f8c5 	bl	800ada4 <__swsetup_r>
 800ac1a:	b380      	cbz	r0, 800ac7e <_puts_r+0x9a>
 800ac1c:	f04f 35ff 	mov.w	r5, #4294967295
 800ac20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac22:	07da      	lsls	r2, r3, #31
 800ac24:	d405      	bmi.n	800ac32 <_puts_r+0x4e>
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	059b      	lsls	r3, r3, #22
 800ac2a:	d402      	bmi.n	800ac32 <_puts_r+0x4e>
 800ac2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac2e:	f000 f98d 	bl	800af4c <__retarget_lock_release_recursive>
 800ac32:	4628      	mov	r0, r5
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	da04      	bge.n	800ac44 <_puts_r+0x60>
 800ac3a:	69a2      	ldr	r2, [r4, #24]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	dc17      	bgt.n	800ac70 <_puts_r+0x8c>
 800ac40:	290a      	cmp	r1, #10
 800ac42:	d015      	beq.n	800ac70 <_puts_r+0x8c>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	6022      	str	r2, [r4, #0]
 800ac4a:	7019      	strb	r1, [r3, #0]
 800ac4c:	68a3      	ldr	r3, [r4, #8]
 800ac4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac52:	3b01      	subs	r3, #1
 800ac54:	60a3      	str	r3, [r4, #8]
 800ac56:	2900      	cmp	r1, #0
 800ac58:	d1ed      	bne.n	800ac36 <_puts_r+0x52>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	da11      	bge.n	800ac82 <_puts_r+0x9e>
 800ac5e:	4622      	mov	r2, r4
 800ac60:	210a      	movs	r1, #10
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 f85f 	bl	800ad26 <__swbuf_r>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d0d7      	beq.n	800ac1c <_puts_r+0x38>
 800ac6c:	250a      	movs	r5, #10
 800ac6e:	e7d7      	b.n	800ac20 <_puts_r+0x3c>
 800ac70:	4622      	mov	r2, r4
 800ac72:	4628      	mov	r0, r5
 800ac74:	f000 f857 	bl	800ad26 <__swbuf_r>
 800ac78:	3001      	adds	r0, #1
 800ac7a:	d1e7      	bne.n	800ac4c <_puts_r+0x68>
 800ac7c:	e7ce      	b.n	800ac1c <_puts_r+0x38>
 800ac7e:	3e01      	subs	r6, #1
 800ac80:	e7e4      	b.n	800ac4c <_puts_r+0x68>
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	1c5a      	adds	r2, r3, #1
 800ac86:	6022      	str	r2, [r4, #0]
 800ac88:	220a      	movs	r2, #10
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	e7ee      	b.n	800ac6c <_puts_r+0x88>
	...

0800ac90 <puts>:
 800ac90:	4b02      	ldr	r3, [pc, #8]	@ (800ac9c <puts+0xc>)
 800ac92:	4601      	mov	r1, r0
 800ac94:	6818      	ldr	r0, [r3, #0]
 800ac96:	f7ff bfa5 	b.w	800abe4 <_puts_r>
 800ac9a:	bf00      	nop
 800ac9c:	24000024 	.word	0x24000024

0800aca0 <__sread>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	460c      	mov	r4, r1
 800aca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca8:	f000 f900 	bl	800aeac <_read_r>
 800acac:	2800      	cmp	r0, #0
 800acae:	bfab      	itete	ge
 800acb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800acb2:	89a3      	ldrhlt	r3, [r4, #12]
 800acb4:	181b      	addge	r3, r3, r0
 800acb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800acba:	bfac      	ite	ge
 800acbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800acbe:	81a3      	strhlt	r3, [r4, #12]
 800acc0:	bd10      	pop	{r4, pc}

0800acc2 <__swrite>:
 800acc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc6:	461f      	mov	r7, r3
 800acc8:	898b      	ldrh	r3, [r1, #12]
 800acca:	05db      	lsls	r3, r3, #23
 800accc:	4605      	mov	r5, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	4616      	mov	r6, r2
 800acd2:	d505      	bpl.n	800ace0 <__swrite+0x1e>
 800acd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd8:	2302      	movs	r3, #2
 800acda:	2200      	movs	r2, #0
 800acdc:	f000 f8d4 	bl	800ae88 <_lseek_r>
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acea:	81a3      	strh	r3, [r4, #12]
 800acec:	4632      	mov	r2, r6
 800acee:	463b      	mov	r3, r7
 800acf0:	4628      	mov	r0, r5
 800acf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf6:	f000 b8eb 	b.w	800aed0 <_write_r>

0800acfa <__sseek>:
 800acfa:	b510      	push	{r4, lr}
 800acfc:	460c      	mov	r4, r1
 800acfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad02:	f000 f8c1 	bl	800ae88 <_lseek_r>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	bf15      	itete	ne
 800ad0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad16:	81a3      	strheq	r3, [r4, #12]
 800ad18:	bf18      	it	ne
 800ad1a:	81a3      	strhne	r3, [r4, #12]
 800ad1c:	bd10      	pop	{r4, pc}

0800ad1e <__sclose>:
 800ad1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad22:	f000 b8a1 	b.w	800ae68 <_close_r>

0800ad26 <__swbuf_r>:
 800ad26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad28:	460e      	mov	r6, r1
 800ad2a:	4614      	mov	r4, r2
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	b118      	cbz	r0, 800ad38 <__swbuf_r+0x12>
 800ad30:	6a03      	ldr	r3, [r0, #32]
 800ad32:	b90b      	cbnz	r3, 800ad38 <__swbuf_r+0x12>
 800ad34:	f7ff ff06 	bl	800ab44 <__sinit>
 800ad38:	69a3      	ldr	r3, [r4, #24]
 800ad3a:	60a3      	str	r3, [r4, #8]
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	071a      	lsls	r2, r3, #28
 800ad40:	d501      	bpl.n	800ad46 <__swbuf_r+0x20>
 800ad42:	6923      	ldr	r3, [r4, #16]
 800ad44:	b943      	cbnz	r3, 800ad58 <__swbuf_r+0x32>
 800ad46:	4621      	mov	r1, r4
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f000 f82b 	bl	800ada4 <__swsetup_r>
 800ad4e:	b118      	cbz	r0, 800ad58 <__swbuf_r+0x32>
 800ad50:	f04f 37ff 	mov.w	r7, #4294967295
 800ad54:	4638      	mov	r0, r7
 800ad56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	6922      	ldr	r2, [r4, #16]
 800ad5c:	1a98      	subs	r0, r3, r2
 800ad5e:	6963      	ldr	r3, [r4, #20]
 800ad60:	b2f6      	uxtb	r6, r6
 800ad62:	4283      	cmp	r3, r0
 800ad64:	4637      	mov	r7, r6
 800ad66:	dc05      	bgt.n	800ad74 <__swbuf_r+0x4e>
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f001 fd26 	bl	800c7bc <_fflush_r>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d1ed      	bne.n	800ad50 <__swbuf_r+0x2a>
 800ad74:	68a3      	ldr	r3, [r4, #8]
 800ad76:	3b01      	subs	r3, #1
 800ad78:	60a3      	str	r3, [r4, #8]
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	6022      	str	r2, [r4, #0]
 800ad80:	701e      	strb	r6, [r3, #0]
 800ad82:	6962      	ldr	r2, [r4, #20]
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d004      	beq.n	800ad94 <__swbuf_r+0x6e>
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	07db      	lsls	r3, r3, #31
 800ad8e:	d5e1      	bpl.n	800ad54 <__swbuf_r+0x2e>
 800ad90:	2e0a      	cmp	r6, #10
 800ad92:	d1df      	bne.n	800ad54 <__swbuf_r+0x2e>
 800ad94:	4621      	mov	r1, r4
 800ad96:	4628      	mov	r0, r5
 800ad98:	f001 fd10 	bl	800c7bc <_fflush_r>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d0d9      	beq.n	800ad54 <__swbuf_r+0x2e>
 800ada0:	e7d6      	b.n	800ad50 <__swbuf_r+0x2a>
	...

0800ada4 <__swsetup_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4b29      	ldr	r3, [pc, #164]	@ (800ae4c <__swsetup_r+0xa8>)
 800ada8:	4605      	mov	r5, r0
 800adaa:	6818      	ldr	r0, [r3, #0]
 800adac:	460c      	mov	r4, r1
 800adae:	b118      	cbz	r0, 800adb8 <__swsetup_r+0x14>
 800adb0:	6a03      	ldr	r3, [r0, #32]
 800adb2:	b90b      	cbnz	r3, 800adb8 <__swsetup_r+0x14>
 800adb4:	f7ff fec6 	bl	800ab44 <__sinit>
 800adb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adbc:	0719      	lsls	r1, r3, #28
 800adbe:	d422      	bmi.n	800ae06 <__swsetup_r+0x62>
 800adc0:	06da      	lsls	r2, r3, #27
 800adc2:	d407      	bmi.n	800add4 <__swsetup_r+0x30>
 800adc4:	2209      	movs	r2, #9
 800adc6:	602a      	str	r2, [r5, #0]
 800adc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adcc:	81a3      	strh	r3, [r4, #12]
 800adce:	f04f 30ff 	mov.w	r0, #4294967295
 800add2:	e033      	b.n	800ae3c <__swsetup_r+0x98>
 800add4:	0758      	lsls	r0, r3, #29
 800add6:	d512      	bpl.n	800adfe <__swsetup_r+0x5a>
 800add8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adda:	b141      	cbz	r1, 800adee <__swsetup_r+0x4a>
 800addc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ade0:	4299      	cmp	r1, r3
 800ade2:	d002      	beq.n	800adea <__swsetup_r+0x46>
 800ade4:	4628      	mov	r0, r5
 800ade6:	f000 fea9 	bl	800bb3c <_free_r>
 800adea:	2300      	movs	r3, #0
 800adec:	6363      	str	r3, [r4, #52]	@ 0x34
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800adf4:	81a3      	strh	r3, [r4, #12]
 800adf6:	2300      	movs	r3, #0
 800adf8:	6063      	str	r3, [r4, #4]
 800adfa:	6923      	ldr	r3, [r4, #16]
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	f043 0308 	orr.w	r3, r3, #8
 800ae04:	81a3      	strh	r3, [r4, #12]
 800ae06:	6923      	ldr	r3, [r4, #16]
 800ae08:	b94b      	cbnz	r3, 800ae1e <__swsetup_r+0x7a>
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae14:	d003      	beq.n	800ae1e <__swsetup_r+0x7a>
 800ae16:	4621      	mov	r1, r4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f001 fd1d 	bl	800c858 <__smakebuf_r>
 800ae1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae22:	f013 0201 	ands.w	r2, r3, #1
 800ae26:	d00a      	beq.n	800ae3e <__swsetup_r+0x9a>
 800ae28:	2200      	movs	r2, #0
 800ae2a:	60a2      	str	r2, [r4, #8]
 800ae2c:	6962      	ldr	r2, [r4, #20]
 800ae2e:	4252      	negs	r2, r2
 800ae30:	61a2      	str	r2, [r4, #24]
 800ae32:	6922      	ldr	r2, [r4, #16]
 800ae34:	b942      	cbnz	r2, 800ae48 <__swsetup_r+0xa4>
 800ae36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae3a:	d1c5      	bne.n	800adc8 <__swsetup_r+0x24>
 800ae3c:	bd38      	pop	{r3, r4, r5, pc}
 800ae3e:	0799      	lsls	r1, r3, #30
 800ae40:	bf58      	it	pl
 800ae42:	6962      	ldrpl	r2, [r4, #20]
 800ae44:	60a2      	str	r2, [r4, #8]
 800ae46:	e7f4      	b.n	800ae32 <__swsetup_r+0x8e>
 800ae48:	2000      	movs	r0, #0
 800ae4a:	e7f7      	b.n	800ae3c <__swsetup_r+0x98>
 800ae4c:	24000024 	.word	0x24000024

0800ae50 <memset>:
 800ae50:	4402      	add	r2, r0
 800ae52:	4603      	mov	r3, r0
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d100      	bne.n	800ae5a <memset+0xa>
 800ae58:	4770      	bx	lr
 800ae5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae5e:	e7f9      	b.n	800ae54 <memset+0x4>

0800ae60 <_localeconv_r>:
 800ae60:	4800      	ldr	r0, [pc, #0]	@ (800ae64 <_localeconv_r+0x4>)
 800ae62:	4770      	bx	lr
 800ae64:	24000164 	.word	0x24000164

0800ae68 <_close_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d06      	ldr	r5, [pc, #24]	@ (800ae84 <_close_r+0x1c>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	f7f6 fc3c 	bl	80016f0 <_close>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_close_r+0x1a>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_close_r+0x1a>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	240007ac 	.word	0x240007ac

0800ae88 <_lseek_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d07      	ldr	r5, [pc, #28]	@ (800aea8 <_lseek_r+0x20>)
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	4608      	mov	r0, r1
 800ae90:	4611      	mov	r1, r2
 800ae92:	2200      	movs	r2, #0
 800ae94:	602a      	str	r2, [r5, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	f7f6 fc51 	bl	800173e <_lseek>
 800ae9c:	1c43      	adds	r3, r0, #1
 800ae9e:	d102      	bne.n	800aea6 <_lseek_r+0x1e>
 800aea0:	682b      	ldr	r3, [r5, #0]
 800aea2:	b103      	cbz	r3, 800aea6 <_lseek_r+0x1e>
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	240007ac 	.word	0x240007ac

0800aeac <_read_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d07      	ldr	r5, [pc, #28]	@ (800aecc <_read_r+0x20>)
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	4608      	mov	r0, r1
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	f7f6 fbdf 	bl	800167e <_read>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_read_r+0x1e>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_read_r+0x1e>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	240007ac 	.word	0x240007ac

0800aed0 <_write_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4d07      	ldr	r5, [pc, #28]	@ (800aef0 <_write_r+0x20>)
 800aed4:	4604      	mov	r4, r0
 800aed6:	4608      	mov	r0, r1
 800aed8:	4611      	mov	r1, r2
 800aeda:	2200      	movs	r2, #0
 800aedc:	602a      	str	r2, [r5, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	f7f6 fbea 	bl	80016b8 <_write>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_write_r+0x1e>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_write_r+0x1e>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	240007ac 	.word	0x240007ac

0800aef4 <__errno>:
 800aef4:	4b01      	ldr	r3, [pc, #4]	@ (800aefc <__errno+0x8>)
 800aef6:	6818      	ldr	r0, [r3, #0]
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	24000024 	.word	0x24000024

0800af00 <__libc_init_array>:
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	4d0d      	ldr	r5, [pc, #52]	@ (800af38 <__libc_init_array+0x38>)
 800af04:	4c0d      	ldr	r4, [pc, #52]	@ (800af3c <__libc_init_array+0x3c>)
 800af06:	1b64      	subs	r4, r4, r5
 800af08:	10a4      	asrs	r4, r4, #2
 800af0a:	2600      	movs	r6, #0
 800af0c:	42a6      	cmp	r6, r4
 800af0e:	d109      	bne.n	800af24 <__libc_init_array+0x24>
 800af10:	4d0b      	ldr	r5, [pc, #44]	@ (800af40 <__libc_init_array+0x40>)
 800af12:	4c0c      	ldr	r4, [pc, #48]	@ (800af44 <__libc_init_array+0x44>)
 800af14:	f001 fdf2 	bl	800cafc <_init>
 800af18:	1b64      	subs	r4, r4, r5
 800af1a:	10a4      	asrs	r4, r4, #2
 800af1c:	2600      	movs	r6, #0
 800af1e:	42a6      	cmp	r6, r4
 800af20:	d105      	bne.n	800af2e <__libc_init_array+0x2e>
 800af22:	bd70      	pop	{r4, r5, r6, pc}
 800af24:	f855 3b04 	ldr.w	r3, [r5], #4
 800af28:	4798      	blx	r3
 800af2a:	3601      	adds	r6, #1
 800af2c:	e7ee      	b.n	800af0c <__libc_init_array+0xc>
 800af2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af32:	4798      	blx	r3
 800af34:	3601      	adds	r6, #1
 800af36:	e7f2      	b.n	800af1e <__libc_init_array+0x1e>
 800af38:	0800d22c 	.word	0x0800d22c
 800af3c:	0800d22c 	.word	0x0800d22c
 800af40:	0800d22c 	.word	0x0800d22c
 800af44:	0800d230 	.word	0x0800d230

0800af48 <__retarget_lock_init_recursive>:
 800af48:	4770      	bx	lr

0800af4a <__retarget_lock_acquire_recursive>:
 800af4a:	4770      	bx	lr

0800af4c <__retarget_lock_release_recursive>:
 800af4c:	4770      	bx	lr

0800af4e <memcpy>:
 800af4e:	440a      	add	r2, r1
 800af50:	4291      	cmp	r1, r2
 800af52:	f100 33ff 	add.w	r3, r0, #4294967295
 800af56:	d100      	bne.n	800af5a <memcpy+0xc>
 800af58:	4770      	bx	lr
 800af5a:	b510      	push	{r4, lr}
 800af5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af64:	4291      	cmp	r1, r2
 800af66:	d1f9      	bne.n	800af5c <memcpy+0xe>
 800af68:	bd10      	pop	{r4, pc}

0800af6a <quorem>:
 800af6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6e:	6903      	ldr	r3, [r0, #16]
 800af70:	690c      	ldr	r4, [r1, #16]
 800af72:	42a3      	cmp	r3, r4
 800af74:	4607      	mov	r7, r0
 800af76:	db7e      	blt.n	800b076 <quorem+0x10c>
 800af78:	3c01      	subs	r4, #1
 800af7a:	f101 0814 	add.w	r8, r1, #20
 800af7e:	00a3      	lsls	r3, r4, #2
 800af80:	f100 0514 	add.w	r5, r0, #20
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af8a:	9301      	str	r3, [sp, #4]
 800af8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af94:	3301      	adds	r3, #1
 800af96:	429a      	cmp	r2, r3
 800af98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800afa0:	d32e      	bcc.n	800b000 <quorem+0x96>
 800afa2:	f04f 0a00 	mov.w	sl, #0
 800afa6:	46c4      	mov	ip, r8
 800afa8:	46ae      	mov	lr, r5
 800afaa:	46d3      	mov	fp, sl
 800afac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afb0:	b298      	uxth	r0, r3
 800afb2:	fb06 a000 	mla	r0, r6, r0, sl
 800afb6:	0c02      	lsrs	r2, r0, #16
 800afb8:	0c1b      	lsrs	r3, r3, #16
 800afba:	fb06 2303 	mla	r3, r6, r3, r2
 800afbe:	f8de 2000 	ldr.w	r2, [lr]
 800afc2:	b280      	uxth	r0, r0
 800afc4:	b292      	uxth	r2, r2
 800afc6:	1a12      	subs	r2, r2, r0
 800afc8:	445a      	add	r2, fp
 800afca:	f8de 0000 	ldr.w	r0, [lr]
 800afce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800afd8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800afdc:	b292      	uxth	r2, r2
 800afde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800afe2:	45e1      	cmp	r9, ip
 800afe4:	f84e 2b04 	str.w	r2, [lr], #4
 800afe8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800afec:	d2de      	bcs.n	800afac <quorem+0x42>
 800afee:	9b00      	ldr	r3, [sp, #0]
 800aff0:	58eb      	ldr	r3, [r5, r3]
 800aff2:	b92b      	cbnz	r3, 800b000 <quorem+0x96>
 800aff4:	9b01      	ldr	r3, [sp, #4]
 800aff6:	3b04      	subs	r3, #4
 800aff8:	429d      	cmp	r5, r3
 800affa:	461a      	mov	r2, r3
 800affc:	d32f      	bcc.n	800b05e <quorem+0xf4>
 800affe:	613c      	str	r4, [r7, #16]
 800b000:	4638      	mov	r0, r7
 800b002:	f001 f90d 	bl	800c220 <__mcmp>
 800b006:	2800      	cmp	r0, #0
 800b008:	db25      	blt.n	800b056 <quorem+0xec>
 800b00a:	4629      	mov	r1, r5
 800b00c:	2000      	movs	r0, #0
 800b00e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b012:	f8d1 c000 	ldr.w	ip, [r1]
 800b016:	fa1f fe82 	uxth.w	lr, r2
 800b01a:	fa1f f38c 	uxth.w	r3, ip
 800b01e:	eba3 030e 	sub.w	r3, r3, lr
 800b022:	4403      	add	r3, r0
 800b024:	0c12      	lsrs	r2, r2, #16
 800b026:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b02a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b02e:	b29b      	uxth	r3, r3
 800b030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b034:	45c1      	cmp	r9, r8
 800b036:	f841 3b04 	str.w	r3, [r1], #4
 800b03a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b03e:	d2e6      	bcs.n	800b00e <quorem+0xa4>
 800b040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b048:	b922      	cbnz	r2, 800b054 <quorem+0xea>
 800b04a:	3b04      	subs	r3, #4
 800b04c:	429d      	cmp	r5, r3
 800b04e:	461a      	mov	r2, r3
 800b050:	d30b      	bcc.n	800b06a <quorem+0x100>
 800b052:	613c      	str	r4, [r7, #16]
 800b054:	3601      	adds	r6, #1
 800b056:	4630      	mov	r0, r6
 800b058:	b003      	add	sp, #12
 800b05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05e:	6812      	ldr	r2, [r2, #0]
 800b060:	3b04      	subs	r3, #4
 800b062:	2a00      	cmp	r2, #0
 800b064:	d1cb      	bne.n	800affe <quorem+0x94>
 800b066:	3c01      	subs	r4, #1
 800b068:	e7c6      	b.n	800aff8 <quorem+0x8e>
 800b06a:	6812      	ldr	r2, [r2, #0]
 800b06c:	3b04      	subs	r3, #4
 800b06e:	2a00      	cmp	r2, #0
 800b070:	d1ef      	bne.n	800b052 <quorem+0xe8>
 800b072:	3c01      	subs	r4, #1
 800b074:	e7ea      	b.n	800b04c <quorem+0xe2>
 800b076:	2000      	movs	r0, #0
 800b078:	e7ee      	b.n	800b058 <quorem+0xee>
 800b07a:	0000      	movs	r0, r0
 800b07c:	0000      	movs	r0, r0
	...

0800b080 <_dtoa_r>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	ed2d 8b02 	vpush	{d8}
 800b088:	69c7      	ldr	r7, [r0, #28]
 800b08a:	b091      	sub	sp, #68	@ 0x44
 800b08c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b090:	ec55 4b10 	vmov	r4, r5, d0
 800b094:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b096:	9107      	str	r1, [sp, #28]
 800b098:	4681      	mov	r9, r0
 800b09a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b09c:	930d      	str	r3, [sp, #52]	@ 0x34
 800b09e:	b97f      	cbnz	r7, 800b0c0 <_dtoa_r+0x40>
 800b0a0:	2010      	movs	r0, #16
 800b0a2:	f000 fd95 	bl	800bbd0 <malloc>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	f8c9 001c 	str.w	r0, [r9, #28]
 800b0ac:	b920      	cbnz	r0, 800b0b8 <_dtoa_r+0x38>
 800b0ae:	4ba0      	ldr	r3, [pc, #640]	@ (800b330 <_dtoa_r+0x2b0>)
 800b0b0:	21ef      	movs	r1, #239	@ 0xef
 800b0b2:	48a0      	ldr	r0, [pc, #640]	@ (800b334 <_dtoa_r+0x2b4>)
 800b0b4:	f001 fc72 	bl	800c99c <__assert_func>
 800b0b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b0bc:	6007      	str	r7, [r0, #0]
 800b0be:	60c7      	str	r7, [r0, #12]
 800b0c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b0c4:	6819      	ldr	r1, [r3, #0]
 800b0c6:	b159      	cbz	r1, 800b0e0 <_dtoa_r+0x60>
 800b0c8:	685a      	ldr	r2, [r3, #4]
 800b0ca:	604a      	str	r2, [r1, #4]
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	4093      	lsls	r3, r2
 800b0d0:	608b      	str	r3, [r1, #8]
 800b0d2:	4648      	mov	r0, r9
 800b0d4:	f000 fe72 	bl	800bdbc <_Bfree>
 800b0d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	1e2b      	subs	r3, r5, #0
 800b0e2:	bfbb      	ittet	lt
 800b0e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b0e8:	9303      	strlt	r3, [sp, #12]
 800b0ea:	2300      	movge	r3, #0
 800b0ec:	2201      	movlt	r2, #1
 800b0ee:	bfac      	ite	ge
 800b0f0:	6033      	strge	r3, [r6, #0]
 800b0f2:	6032      	strlt	r2, [r6, #0]
 800b0f4:	4b90      	ldr	r3, [pc, #576]	@ (800b338 <_dtoa_r+0x2b8>)
 800b0f6:	9e03      	ldr	r6, [sp, #12]
 800b0f8:	43b3      	bics	r3, r6
 800b0fa:	d110      	bne.n	800b11e <_dtoa_r+0x9e>
 800b0fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b0fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b108:	4323      	orrs	r3, r4
 800b10a:	f000 84e6 	beq.w	800bada <_dtoa_r+0xa5a>
 800b10e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b110:	4f8a      	ldr	r7, [pc, #552]	@ (800b33c <_dtoa_r+0x2bc>)
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 84e8 	beq.w	800bae8 <_dtoa_r+0xa68>
 800b118:	1cfb      	adds	r3, r7, #3
 800b11a:	f000 bce3 	b.w	800bae4 <_dtoa_r+0xa64>
 800b11e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b122:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12a:	d10a      	bne.n	800b142 <_dtoa_r+0xc2>
 800b12c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b12e:	2301      	movs	r3, #1
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b134:	b113      	cbz	r3, 800b13c <_dtoa_r+0xbc>
 800b136:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b138:	4b81      	ldr	r3, [pc, #516]	@ (800b340 <_dtoa_r+0x2c0>)
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	4f81      	ldr	r7, [pc, #516]	@ (800b344 <_dtoa_r+0x2c4>)
 800b13e:	f000 bcd3 	b.w	800bae8 <_dtoa_r+0xa68>
 800b142:	aa0e      	add	r2, sp, #56	@ 0x38
 800b144:	a90f      	add	r1, sp, #60	@ 0x3c
 800b146:	4648      	mov	r0, r9
 800b148:	eeb0 0b48 	vmov.f64	d0, d8
 800b14c:	f001 f918 	bl	800c380 <__d2b>
 800b150:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b154:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b156:	9001      	str	r0, [sp, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d045      	beq.n	800b1e8 <_dtoa_r+0x168>
 800b15c:	eeb0 7b48 	vmov.f64	d7, d8
 800b160:	ee18 1a90 	vmov	r1, s17
 800b164:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b168:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b16c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b170:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b174:	2500      	movs	r5, #0
 800b176:	ee07 1a90 	vmov	s15, r1
 800b17a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b17e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b318 <_dtoa_r+0x298>
 800b182:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b186:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b320 <_dtoa_r+0x2a0>
 800b18a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b18e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b328 <_dtoa_r+0x2a8>
 800b192:	ee07 3a90 	vmov	s15, r3
 800b196:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b19a:	eeb0 7b46 	vmov.f64	d7, d6
 800b19e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b1a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b1a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ae:	ee16 8a90 	vmov	r8, s13
 800b1b2:	d508      	bpl.n	800b1c6 <_dtoa_r+0x146>
 800b1b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b1b8:	eeb4 6b47 	vcmp.f64	d6, d7
 800b1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c0:	bf18      	it	ne
 800b1c2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b1c6:	f1b8 0f16 	cmp.w	r8, #22
 800b1ca:	d82b      	bhi.n	800b224 <_dtoa_r+0x1a4>
 800b1cc:	495e      	ldr	r1, [pc, #376]	@ (800b348 <_dtoa_r+0x2c8>)
 800b1ce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b1d2:	ed91 7b00 	vldr	d7, [r1]
 800b1d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1de:	d501      	bpl.n	800b1e4 <_dtoa_r+0x164>
 800b1e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	e01e      	b.n	800b226 <_dtoa_r+0x1a6>
 800b1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b1f0:	2920      	cmp	r1, #32
 800b1f2:	bfc1      	itttt	gt
 800b1f4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b1f8:	408e      	lslgt	r6, r1
 800b1fa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b1fe:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b202:	bfd6      	itet	le
 800b204:	f1c1 0120 	rsble	r1, r1, #32
 800b208:	4331      	orrgt	r1, r6
 800b20a:	fa04 f101 	lslle.w	r1, r4, r1
 800b20e:	ee07 1a90 	vmov	s15, r1
 800b212:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b216:	3b01      	subs	r3, #1
 800b218:	ee17 1a90 	vmov	r1, s15
 800b21c:	2501      	movs	r5, #1
 800b21e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b222:	e7a8      	b.n	800b176 <_dtoa_r+0xf6>
 800b224:	2101      	movs	r1, #1
 800b226:	1ad2      	subs	r2, r2, r3
 800b228:	1e53      	subs	r3, r2, #1
 800b22a:	9306      	str	r3, [sp, #24]
 800b22c:	bf45      	ittet	mi
 800b22e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b232:	9304      	strmi	r3, [sp, #16]
 800b234:	2300      	movpl	r3, #0
 800b236:	2300      	movmi	r3, #0
 800b238:	bf4c      	ite	mi
 800b23a:	9306      	strmi	r3, [sp, #24]
 800b23c:	9304      	strpl	r3, [sp, #16]
 800b23e:	f1b8 0f00 	cmp.w	r8, #0
 800b242:	910c      	str	r1, [sp, #48]	@ 0x30
 800b244:	db18      	blt.n	800b278 <_dtoa_r+0x1f8>
 800b246:	9b06      	ldr	r3, [sp, #24]
 800b248:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b24c:	4443      	add	r3, r8
 800b24e:	9306      	str	r3, [sp, #24]
 800b250:	2300      	movs	r3, #0
 800b252:	9a07      	ldr	r2, [sp, #28]
 800b254:	2a09      	cmp	r2, #9
 800b256:	d845      	bhi.n	800b2e4 <_dtoa_r+0x264>
 800b258:	2a05      	cmp	r2, #5
 800b25a:	bfc4      	itt	gt
 800b25c:	3a04      	subgt	r2, #4
 800b25e:	9207      	strgt	r2, [sp, #28]
 800b260:	9a07      	ldr	r2, [sp, #28]
 800b262:	f1a2 0202 	sub.w	r2, r2, #2
 800b266:	bfcc      	ite	gt
 800b268:	2400      	movgt	r4, #0
 800b26a:	2401      	movle	r4, #1
 800b26c:	2a03      	cmp	r2, #3
 800b26e:	d844      	bhi.n	800b2fa <_dtoa_r+0x27a>
 800b270:	e8df f002 	tbb	[pc, r2]
 800b274:	0b173634 	.word	0x0b173634
 800b278:	9b04      	ldr	r3, [sp, #16]
 800b27a:	2200      	movs	r2, #0
 800b27c:	eba3 0308 	sub.w	r3, r3, r8
 800b280:	9304      	str	r3, [sp, #16]
 800b282:	920a      	str	r2, [sp, #40]	@ 0x28
 800b284:	f1c8 0300 	rsb	r3, r8, #0
 800b288:	e7e3      	b.n	800b252 <_dtoa_r+0x1d2>
 800b28a:	2201      	movs	r2, #1
 800b28c:	9208      	str	r2, [sp, #32]
 800b28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b290:	eb08 0b02 	add.w	fp, r8, r2
 800b294:	f10b 0a01 	add.w	sl, fp, #1
 800b298:	4652      	mov	r2, sl
 800b29a:	2a01      	cmp	r2, #1
 800b29c:	bfb8      	it	lt
 800b29e:	2201      	movlt	r2, #1
 800b2a0:	e006      	b.n	800b2b0 <_dtoa_r+0x230>
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	9208      	str	r2, [sp, #32]
 800b2a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2a8:	2a00      	cmp	r2, #0
 800b2aa:	dd29      	ble.n	800b300 <_dtoa_r+0x280>
 800b2ac:	4693      	mov	fp, r2
 800b2ae:	4692      	mov	sl, r2
 800b2b0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	2004      	movs	r0, #4
 800b2b8:	f100 0614 	add.w	r6, r0, #20
 800b2bc:	4296      	cmp	r6, r2
 800b2be:	d926      	bls.n	800b30e <_dtoa_r+0x28e>
 800b2c0:	6079      	str	r1, [r7, #4]
 800b2c2:	4648      	mov	r0, r9
 800b2c4:	9305      	str	r3, [sp, #20]
 800b2c6:	f000 fd39 	bl	800bd3c <_Balloc>
 800b2ca:	9b05      	ldr	r3, [sp, #20]
 800b2cc:	4607      	mov	r7, r0
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d13e      	bne.n	800b350 <_dtoa_r+0x2d0>
 800b2d2:	4b1e      	ldr	r3, [pc, #120]	@ (800b34c <_dtoa_r+0x2cc>)
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b2da:	e6ea      	b.n	800b0b2 <_dtoa_r+0x32>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	e7e1      	b.n	800b2a4 <_dtoa_r+0x224>
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	e7d3      	b.n	800b28c <_dtoa_r+0x20c>
 800b2e4:	2401      	movs	r4, #1
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b2ec:	f04f 3bff 	mov.w	fp, #4294967295
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	46da      	mov	sl, fp
 800b2f4:	2212      	movs	r2, #18
 800b2f6:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2f8:	e7da      	b.n	800b2b0 <_dtoa_r+0x230>
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	9208      	str	r2, [sp, #32]
 800b2fe:	e7f5      	b.n	800b2ec <_dtoa_r+0x26c>
 800b300:	f04f 0b01 	mov.w	fp, #1
 800b304:	46da      	mov	sl, fp
 800b306:	465a      	mov	r2, fp
 800b308:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b30c:	e7d0      	b.n	800b2b0 <_dtoa_r+0x230>
 800b30e:	3101      	adds	r1, #1
 800b310:	0040      	lsls	r0, r0, #1
 800b312:	e7d1      	b.n	800b2b8 <_dtoa_r+0x238>
 800b314:	f3af 8000 	nop.w
 800b318:	636f4361 	.word	0x636f4361
 800b31c:	3fd287a7 	.word	0x3fd287a7
 800b320:	8b60c8b3 	.word	0x8b60c8b3
 800b324:	3fc68a28 	.word	0x3fc68a28
 800b328:	509f79fb 	.word	0x509f79fb
 800b32c:	3fd34413 	.word	0x3fd34413
 800b330:	0800cef1 	.word	0x0800cef1
 800b334:	0800cf08 	.word	0x0800cf08
 800b338:	7ff00000 	.word	0x7ff00000
 800b33c:	0800ceed 	.word	0x0800ceed
 800b340:	0800cec1 	.word	0x0800cec1
 800b344:	0800cec0 	.word	0x0800cec0
 800b348:	0800d058 	.word	0x0800d058
 800b34c:	0800cf60 	.word	0x0800cf60
 800b350:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b354:	f1ba 0f0e 	cmp.w	sl, #14
 800b358:	6010      	str	r0, [r2, #0]
 800b35a:	d86e      	bhi.n	800b43a <_dtoa_r+0x3ba>
 800b35c:	2c00      	cmp	r4, #0
 800b35e:	d06c      	beq.n	800b43a <_dtoa_r+0x3ba>
 800b360:	f1b8 0f00 	cmp.w	r8, #0
 800b364:	f340 80b4 	ble.w	800b4d0 <_dtoa_r+0x450>
 800b368:	4ac8      	ldr	r2, [pc, #800]	@ (800b68c <_dtoa_r+0x60c>)
 800b36a:	f008 010f 	and.w	r1, r8, #15
 800b36e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b372:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b376:	ed92 7b00 	vldr	d7, [r2]
 800b37a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b37e:	f000 809b 	beq.w	800b4b8 <_dtoa_r+0x438>
 800b382:	4ac3      	ldr	r2, [pc, #780]	@ (800b690 <_dtoa_r+0x610>)
 800b384:	ed92 6b08 	vldr	d6, [r2, #32]
 800b388:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b38c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b390:	f001 010f 	and.w	r1, r1, #15
 800b394:	2203      	movs	r2, #3
 800b396:	48be      	ldr	r0, [pc, #760]	@ (800b690 <_dtoa_r+0x610>)
 800b398:	2900      	cmp	r1, #0
 800b39a:	f040 808f 	bne.w	800b4bc <_dtoa_r+0x43c>
 800b39e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b3a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b3a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b3aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b3ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3b0:	2900      	cmp	r1, #0
 800b3b2:	f000 80b3 	beq.w	800b51c <_dtoa_r+0x49c>
 800b3b6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b3ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c2:	f140 80ab 	bpl.w	800b51c <_dtoa_r+0x49c>
 800b3c6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ca:	f000 80a7 	beq.w	800b51c <_dtoa_r+0x49c>
 800b3ce:	f1bb 0f00 	cmp.w	fp, #0
 800b3d2:	dd30      	ble.n	800b436 <_dtoa_r+0x3b6>
 800b3d4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b3d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b3e0:	f108 31ff 	add.w	r1, r8, #4294967295
 800b3e4:	9105      	str	r1, [sp, #20]
 800b3e6:	3201      	adds	r2, #1
 800b3e8:	465c      	mov	r4, fp
 800b3ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b3ee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b3f2:	ee07 2a90 	vmov	s15, r2
 800b3f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b3fa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b3fe:	ee15 2a90 	vmov	r2, s11
 800b402:	ec51 0b15 	vmov	r0, r1, d5
 800b406:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b40a:	2c00      	cmp	r4, #0
 800b40c:	f040 808a 	bne.w	800b524 <_dtoa_r+0x4a4>
 800b410:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b414:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b418:	ec41 0b17 	vmov	d7, r0, r1
 800b41c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b424:	f300 826a 	bgt.w	800b8fc <_dtoa_r+0x87c>
 800b428:	eeb1 7b47 	vneg.f64	d7, d7
 800b42c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b434:	d423      	bmi.n	800b47e <_dtoa_r+0x3fe>
 800b436:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b43a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b43c:	2a00      	cmp	r2, #0
 800b43e:	f2c0 8129 	blt.w	800b694 <_dtoa_r+0x614>
 800b442:	f1b8 0f0e 	cmp.w	r8, #14
 800b446:	f300 8125 	bgt.w	800b694 <_dtoa_r+0x614>
 800b44a:	4b90      	ldr	r3, [pc, #576]	@ (800b68c <_dtoa_r+0x60c>)
 800b44c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b450:	ed93 6b00 	vldr	d6, [r3]
 800b454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b456:	2b00      	cmp	r3, #0
 800b458:	f280 80c8 	bge.w	800b5ec <_dtoa_r+0x56c>
 800b45c:	f1ba 0f00 	cmp.w	sl, #0
 800b460:	f300 80c4 	bgt.w	800b5ec <_dtoa_r+0x56c>
 800b464:	d10b      	bne.n	800b47e <_dtoa_r+0x3fe>
 800b466:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b46a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b46e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b472:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47a:	f2c0 823c 	blt.w	800b8f6 <_dtoa_r+0x876>
 800b47e:	2400      	movs	r4, #0
 800b480:	4625      	mov	r5, r4
 800b482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b484:	43db      	mvns	r3, r3
 800b486:	9305      	str	r3, [sp, #20]
 800b488:	463e      	mov	r6, r7
 800b48a:	f04f 0800 	mov.w	r8, #0
 800b48e:	4621      	mov	r1, r4
 800b490:	4648      	mov	r0, r9
 800b492:	f000 fc93 	bl	800bdbc <_Bfree>
 800b496:	2d00      	cmp	r5, #0
 800b498:	f000 80a2 	beq.w	800b5e0 <_dtoa_r+0x560>
 800b49c:	f1b8 0f00 	cmp.w	r8, #0
 800b4a0:	d005      	beq.n	800b4ae <_dtoa_r+0x42e>
 800b4a2:	45a8      	cmp	r8, r5
 800b4a4:	d003      	beq.n	800b4ae <_dtoa_r+0x42e>
 800b4a6:	4641      	mov	r1, r8
 800b4a8:	4648      	mov	r0, r9
 800b4aa:	f000 fc87 	bl	800bdbc <_Bfree>
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4648      	mov	r0, r9
 800b4b2:	f000 fc83 	bl	800bdbc <_Bfree>
 800b4b6:	e093      	b.n	800b5e0 <_dtoa_r+0x560>
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	e76c      	b.n	800b396 <_dtoa_r+0x316>
 800b4bc:	07cc      	lsls	r4, r1, #31
 800b4be:	d504      	bpl.n	800b4ca <_dtoa_r+0x44a>
 800b4c0:	ed90 6b00 	vldr	d6, [r0]
 800b4c4:	3201      	adds	r2, #1
 800b4c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4ca:	1049      	asrs	r1, r1, #1
 800b4cc:	3008      	adds	r0, #8
 800b4ce:	e763      	b.n	800b398 <_dtoa_r+0x318>
 800b4d0:	d022      	beq.n	800b518 <_dtoa_r+0x498>
 800b4d2:	f1c8 0100 	rsb	r1, r8, #0
 800b4d6:	4a6d      	ldr	r2, [pc, #436]	@ (800b68c <_dtoa_r+0x60c>)
 800b4d8:	f001 000f 	and.w	r0, r1, #15
 800b4dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b4e0:	ed92 7b00 	vldr	d7, [r2]
 800b4e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b4e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4ec:	4868      	ldr	r0, [pc, #416]	@ (800b690 <_dtoa_r+0x610>)
 800b4ee:	1109      	asrs	r1, r1, #4
 800b4f0:	2400      	movs	r4, #0
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	b929      	cbnz	r1, 800b502 <_dtoa_r+0x482>
 800b4f6:	2c00      	cmp	r4, #0
 800b4f8:	f43f af57 	beq.w	800b3aa <_dtoa_r+0x32a>
 800b4fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b500:	e753      	b.n	800b3aa <_dtoa_r+0x32a>
 800b502:	07ce      	lsls	r6, r1, #31
 800b504:	d505      	bpl.n	800b512 <_dtoa_r+0x492>
 800b506:	ed90 6b00 	vldr	d6, [r0]
 800b50a:	3201      	adds	r2, #1
 800b50c:	2401      	movs	r4, #1
 800b50e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b512:	1049      	asrs	r1, r1, #1
 800b514:	3008      	adds	r0, #8
 800b516:	e7ed      	b.n	800b4f4 <_dtoa_r+0x474>
 800b518:	2202      	movs	r2, #2
 800b51a:	e746      	b.n	800b3aa <_dtoa_r+0x32a>
 800b51c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b520:	4654      	mov	r4, sl
 800b522:	e762      	b.n	800b3ea <_dtoa_r+0x36a>
 800b524:	4a59      	ldr	r2, [pc, #356]	@ (800b68c <_dtoa_r+0x60c>)
 800b526:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b52a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b52e:	9a08      	ldr	r2, [sp, #32]
 800b530:	ec41 0b17 	vmov	d7, r0, r1
 800b534:	443c      	add	r4, r7
 800b536:	b34a      	cbz	r2, 800b58c <_dtoa_r+0x50c>
 800b538:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b53c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b540:	463e      	mov	r6, r7
 800b542:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b546:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b54a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b54e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b552:	ee14 2a90 	vmov	r2, s9
 800b556:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b55a:	3230      	adds	r2, #48	@ 0x30
 800b55c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b560:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b568:	f806 2b01 	strb.w	r2, [r6], #1
 800b56c:	d438      	bmi.n	800b5e0 <_dtoa_r+0x560>
 800b56e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b572:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57a:	d46e      	bmi.n	800b65a <_dtoa_r+0x5da>
 800b57c:	42a6      	cmp	r6, r4
 800b57e:	f43f af5a 	beq.w	800b436 <_dtoa_r+0x3b6>
 800b582:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b586:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b58a:	e7e0      	b.n	800b54e <_dtoa_r+0x4ce>
 800b58c:	4621      	mov	r1, r4
 800b58e:	463e      	mov	r6, r7
 800b590:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b594:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b598:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b59c:	ee14 2a90 	vmov	r2, s9
 800b5a0:	3230      	adds	r2, #48	@ 0x30
 800b5a2:	f806 2b01 	strb.w	r2, [r6], #1
 800b5a6:	42a6      	cmp	r6, r4
 800b5a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b5ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b5b0:	d119      	bne.n	800b5e6 <_dtoa_r+0x566>
 800b5b2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b5b6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b5ba:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c2:	dc4a      	bgt.n	800b65a <_dtoa_r+0x5da>
 800b5c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b5c8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d0:	f57f af31 	bpl.w	800b436 <_dtoa_r+0x3b6>
 800b5d4:	460e      	mov	r6, r1
 800b5d6:	3901      	subs	r1, #1
 800b5d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5dc:	2b30      	cmp	r3, #48	@ 0x30
 800b5de:	d0f9      	beq.n	800b5d4 <_dtoa_r+0x554>
 800b5e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b5e4:	e027      	b.n	800b636 <_dtoa_r+0x5b6>
 800b5e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b5ea:	e7d5      	b.n	800b598 <_dtoa_r+0x518>
 800b5ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5f0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b5f4:	463e      	mov	r6, r7
 800b5f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b5fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b5fe:	ee15 3a10 	vmov	r3, s10
 800b602:	3330      	adds	r3, #48	@ 0x30
 800b604:	f806 3b01 	strb.w	r3, [r6], #1
 800b608:	1bf3      	subs	r3, r6, r7
 800b60a:	459a      	cmp	sl, r3
 800b60c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b610:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b614:	d132      	bne.n	800b67c <_dtoa_r+0x5fc>
 800b616:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b61a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b622:	dc18      	bgt.n	800b656 <_dtoa_r+0x5d6>
 800b624:	eeb4 7b46 	vcmp.f64	d7, d6
 800b628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62c:	d103      	bne.n	800b636 <_dtoa_r+0x5b6>
 800b62e:	ee15 3a10 	vmov	r3, s10
 800b632:	07db      	lsls	r3, r3, #31
 800b634:	d40f      	bmi.n	800b656 <_dtoa_r+0x5d6>
 800b636:	9901      	ldr	r1, [sp, #4]
 800b638:	4648      	mov	r0, r9
 800b63a:	f000 fbbf 	bl	800bdbc <_Bfree>
 800b63e:	2300      	movs	r3, #0
 800b640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b642:	7033      	strb	r3, [r6, #0]
 800b644:	f108 0301 	add.w	r3, r8, #1
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 824b 	beq.w	800bae8 <_dtoa_r+0xa68>
 800b652:	601e      	str	r6, [r3, #0]
 800b654:	e248      	b.n	800bae8 <_dtoa_r+0xa68>
 800b656:	f8cd 8014 	str.w	r8, [sp, #20]
 800b65a:	4633      	mov	r3, r6
 800b65c:	461e      	mov	r6, r3
 800b65e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b662:	2a39      	cmp	r2, #57	@ 0x39
 800b664:	d106      	bne.n	800b674 <_dtoa_r+0x5f4>
 800b666:	429f      	cmp	r7, r3
 800b668:	d1f8      	bne.n	800b65c <_dtoa_r+0x5dc>
 800b66a:	9a05      	ldr	r2, [sp, #20]
 800b66c:	3201      	adds	r2, #1
 800b66e:	9205      	str	r2, [sp, #20]
 800b670:	2230      	movs	r2, #48	@ 0x30
 800b672:	703a      	strb	r2, [r7, #0]
 800b674:	781a      	ldrb	r2, [r3, #0]
 800b676:	3201      	adds	r2, #1
 800b678:	701a      	strb	r2, [r3, #0]
 800b67a:	e7b1      	b.n	800b5e0 <_dtoa_r+0x560>
 800b67c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b680:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	d1b5      	bne.n	800b5f6 <_dtoa_r+0x576>
 800b68a:	e7d4      	b.n	800b636 <_dtoa_r+0x5b6>
 800b68c:	0800d058 	.word	0x0800d058
 800b690:	0800d030 	.word	0x0800d030
 800b694:	9908      	ldr	r1, [sp, #32]
 800b696:	2900      	cmp	r1, #0
 800b698:	f000 80e9 	beq.w	800b86e <_dtoa_r+0x7ee>
 800b69c:	9907      	ldr	r1, [sp, #28]
 800b69e:	2901      	cmp	r1, #1
 800b6a0:	f300 80cb 	bgt.w	800b83a <_dtoa_r+0x7ba>
 800b6a4:	2d00      	cmp	r5, #0
 800b6a6:	f000 80c4 	beq.w	800b832 <_dtoa_r+0x7b2>
 800b6aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b6ae:	9e04      	ldr	r6, [sp, #16]
 800b6b0:	461c      	mov	r4, r3
 800b6b2:	9305      	str	r3, [sp, #20]
 800b6b4:	9b04      	ldr	r3, [sp, #16]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	9304      	str	r3, [sp, #16]
 800b6ba:	9b06      	ldr	r3, [sp, #24]
 800b6bc:	2101      	movs	r1, #1
 800b6be:	4413      	add	r3, r2
 800b6c0:	4648      	mov	r0, r9
 800b6c2:	9306      	str	r3, [sp, #24]
 800b6c4:	f000 fc2e 	bl	800bf24 <__i2b>
 800b6c8:	9b05      	ldr	r3, [sp, #20]
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	b166      	cbz	r6, 800b6e8 <_dtoa_r+0x668>
 800b6ce:	9a06      	ldr	r2, [sp, #24]
 800b6d0:	2a00      	cmp	r2, #0
 800b6d2:	dd09      	ble.n	800b6e8 <_dtoa_r+0x668>
 800b6d4:	42b2      	cmp	r2, r6
 800b6d6:	9904      	ldr	r1, [sp, #16]
 800b6d8:	bfa8      	it	ge
 800b6da:	4632      	movge	r2, r6
 800b6dc:	1a89      	subs	r1, r1, r2
 800b6de:	9104      	str	r1, [sp, #16]
 800b6e0:	9906      	ldr	r1, [sp, #24]
 800b6e2:	1ab6      	subs	r6, r6, r2
 800b6e4:	1a8a      	subs	r2, r1, r2
 800b6e6:	9206      	str	r2, [sp, #24]
 800b6e8:	b30b      	cbz	r3, 800b72e <_dtoa_r+0x6ae>
 800b6ea:	9a08      	ldr	r2, [sp, #32]
 800b6ec:	2a00      	cmp	r2, #0
 800b6ee:	f000 80c5 	beq.w	800b87c <_dtoa_r+0x7fc>
 800b6f2:	2c00      	cmp	r4, #0
 800b6f4:	f000 80bf 	beq.w	800b876 <_dtoa_r+0x7f6>
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	4622      	mov	r2, r4
 800b6fc:	4648      	mov	r0, r9
 800b6fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b700:	f000 fcc8 	bl	800c094 <__pow5mult>
 800b704:	9a01      	ldr	r2, [sp, #4]
 800b706:	4601      	mov	r1, r0
 800b708:	4605      	mov	r5, r0
 800b70a:	4648      	mov	r0, r9
 800b70c:	f000 fc20 	bl	800bf50 <__multiply>
 800b710:	9901      	ldr	r1, [sp, #4]
 800b712:	9005      	str	r0, [sp, #20]
 800b714:	4648      	mov	r0, r9
 800b716:	f000 fb51 	bl	800bdbc <_Bfree>
 800b71a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b71c:	1b1b      	subs	r3, r3, r4
 800b71e:	f000 80b0 	beq.w	800b882 <_dtoa_r+0x802>
 800b722:	9905      	ldr	r1, [sp, #20]
 800b724:	461a      	mov	r2, r3
 800b726:	4648      	mov	r0, r9
 800b728:	f000 fcb4 	bl	800c094 <__pow5mult>
 800b72c:	9001      	str	r0, [sp, #4]
 800b72e:	2101      	movs	r1, #1
 800b730:	4648      	mov	r0, r9
 800b732:	f000 fbf7 	bl	800bf24 <__i2b>
 800b736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b738:	4604      	mov	r4, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 81da 	beq.w	800baf4 <_dtoa_r+0xa74>
 800b740:	461a      	mov	r2, r3
 800b742:	4601      	mov	r1, r0
 800b744:	4648      	mov	r0, r9
 800b746:	f000 fca5 	bl	800c094 <__pow5mult>
 800b74a:	9b07      	ldr	r3, [sp, #28]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	4604      	mov	r4, r0
 800b750:	f300 80a0 	bgt.w	800b894 <_dtoa_r+0x814>
 800b754:	9b02      	ldr	r3, [sp, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	f040 8096 	bne.w	800b888 <_dtoa_r+0x808>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b762:	2a00      	cmp	r2, #0
 800b764:	f040 8092 	bne.w	800b88c <_dtoa_r+0x80c>
 800b768:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b76c:	0d12      	lsrs	r2, r2, #20
 800b76e:	0512      	lsls	r2, r2, #20
 800b770:	2a00      	cmp	r2, #0
 800b772:	f000 808d 	beq.w	800b890 <_dtoa_r+0x810>
 800b776:	9b04      	ldr	r3, [sp, #16]
 800b778:	3301      	adds	r3, #1
 800b77a:	9304      	str	r3, [sp, #16]
 800b77c:	9b06      	ldr	r3, [sp, #24]
 800b77e:	3301      	adds	r3, #1
 800b780:	9306      	str	r3, [sp, #24]
 800b782:	2301      	movs	r3, #1
 800b784:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b786:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 81b9 	beq.w	800bb00 <_dtoa_r+0xa80>
 800b78e:	6922      	ldr	r2, [r4, #16]
 800b790:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b794:	6910      	ldr	r0, [r2, #16]
 800b796:	f000 fb79 	bl	800be8c <__hi0bits>
 800b79a:	f1c0 0020 	rsb	r0, r0, #32
 800b79e:	9b06      	ldr	r3, [sp, #24]
 800b7a0:	4418      	add	r0, r3
 800b7a2:	f010 001f 	ands.w	r0, r0, #31
 800b7a6:	f000 8081 	beq.w	800b8ac <_dtoa_r+0x82c>
 800b7aa:	f1c0 0220 	rsb	r2, r0, #32
 800b7ae:	2a04      	cmp	r2, #4
 800b7b0:	dd73      	ble.n	800b89a <_dtoa_r+0x81a>
 800b7b2:	9b04      	ldr	r3, [sp, #16]
 800b7b4:	f1c0 001c 	rsb	r0, r0, #28
 800b7b8:	4403      	add	r3, r0
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	9b06      	ldr	r3, [sp, #24]
 800b7be:	4406      	add	r6, r0
 800b7c0:	4403      	add	r3, r0
 800b7c2:	9306      	str	r3, [sp, #24]
 800b7c4:	9b04      	ldr	r3, [sp, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	dd05      	ble.n	800b7d6 <_dtoa_r+0x756>
 800b7ca:	9901      	ldr	r1, [sp, #4]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	4648      	mov	r0, r9
 800b7d0:	f000 fcba 	bl	800c148 <__lshift>
 800b7d4:	9001      	str	r0, [sp, #4]
 800b7d6:	9b06      	ldr	r3, [sp, #24]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	dd05      	ble.n	800b7e8 <_dtoa_r+0x768>
 800b7dc:	4621      	mov	r1, r4
 800b7de:	461a      	mov	r2, r3
 800b7e0:	4648      	mov	r0, r9
 800b7e2:	f000 fcb1 	bl	800c148 <__lshift>
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d060      	beq.n	800b8b0 <_dtoa_r+0x830>
 800b7ee:	9801      	ldr	r0, [sp, #4]
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	f000 fd15 	bl	800c220 <__mcmp>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	da5a      	bge.n	800b8b0 <_dtoa_r+0x830>
 800b7fa:	f108 33ff 	add.w	r3, r8, #4294967295
 800b7fe:	9305      	str	r3, [sp, #20]
 800b800:	9901      	ldr	r1, [sp, #4]
 800b802:	2300      	movs	r3, #0
 800b804:	220a      	movs	r2, #10
 800b806:	4648      	mov	r0, r9
 800b808:	f000 fafa 	bl	800be00 <__multadd>
 800b80c:	9b08      	ldr	r3, [sp, #32]
 800b80e:	9001      	str	r0, [sp, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 8177 	beq.w	800bb04 <_dtoa_r+0xa84>
 800b816:	4629      	mov	r1, r5
 800b818:	2300      	movs	r3, #0
 800b81a:	220a      	movs	r2, #10
 800b81c:	4648      	mov	r0, r9
 800b81e:	f000 faef 	bl	800be00 <__multadd>
 800b822:	f1bb 0f00 	cmp.w	fp, #0
 800b826:	4605      	mov	r5, r0
 800b828:	dc6e      	bgt.n	800b908 <_dtoa_r+0x888>
 800b82a:	9b07      	ldr	r3, [sp, #28]
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	dc48      	bgt.n	800b8c2 <_dtoa_r+0x842>
 800b830:	e06a      	b.n	800b908 <_dtoa_r+0x888>
 800b832:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b834:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b838:	e739      	b.n	800b6ae <_dtoa_r+0x62e>
 800b83a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b83e:	42a3      	cmp	r3, r4
 800b840:	db07      	blt.n	800b852 <_dtoa_r+0x7d2>
 800b842:	f1ba 0f00 	cmp.w	sl, #0
 800b846:	eba3 0404 	sub.w	r4, r3, r4
 800b84a:	db0b      	blt.n	800b864 <_dtoa_r+0x7e4>
 800b84c:	9e04      	ldr	r6, [sp, #16]
 800b84e:	4652      	mov	r2, sl
 800b850:	e72f      	b.n	800b6b2 <_dtoa_r+0x632>
 800b852:	1ae2      	subs	r2, r4, r3
 800b854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b856:	9e04      	ldr	r6, [sp, #16]
 800b858:	4413      	add	r3, r2
 800b85a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b85c:	4652      	mov	r2, sl
 800b85e:	4623      	mov	r3, r4
 800b860:	2400      	movs	r4, #0
 800b862:	e726      	b.n	800b6b2 <_dtoa_r+0x632>
 800b864:	9a04      	ldr	r2, [sp, #16]
 800b866:	eba2 060a 	sub.w	r6, r2, sl
 800b86a:	2200      	movs	r2, #0
 800b86c:	e721      	b.n	800b6b2 <_dtoa_r+0x632>
 800b86e:	9e04      	ldr	r6, [sp, #16]
 800b870:	9d08      	ldr	r5, [sp, #32]
 800b872:	461c      	mov	r4, r3
 800b874:	e72a      	b.n	800b6cc <_dtoa_r+0x64c>
 800b876:	9a01      	ldr	r2, [sp, #4]
 800b878:	9205      	str	r2, [sp, #20]
 800b87a:	e752      	b.n	800b722 <_dtoa_r+0x6a2>
 800b87c:	9901      	ldr	r1, [sp, #4]
 800b87e:	461a      	mov	r2, r3
 800b880:	e751      	b.n	800b726 <_dtoa_r+0x6a6>
 800b882:	9b05      	ldr	r3, [sp, #20]
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	e752      	b.n	800b72e <_dtoa_r+0x6ae>
 800b888:	2300      	movs	r3, #0
 800b88a:	e77b      	b.n	800b784 <_dtoa_r+0x704>
 800b88c:	9b02      	ldr	r3, [sp, #8]
 800b88e:	e779      	b.n	800b784 <_dtoa_r+0x704>
 800b890:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b892:	e778      	b.n	800b786 <_dtoa_r+0x706>
 800b894:	2300      	movs	r3, #0
 800b896:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b898:	e779      	b.n	800b78e <_dtoa_r+0x70e>
 800b89a:	d093      	beq.n	800b7c4 <_dtoa_r+0x744>
 800b89c:	9b04      	ldr	r3, [sp, #16]
 800b89e:	321c      	adds	r2, #28
 800b8a0:	4413      	add	r3, r2
 800b8a2:	9304      	str	r3, [sp, #16]
 800b8a4:	9b06      	ldr	r3, [sp, #24]
 800b8a6:	4416      	add	r6, r2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	e78a      	b.n	800b7c2 <_dtoa_r+0x742>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	e7f5      	b.n	800b89c <_dtoa_r+0x81c>
 800b8b0:	f1ba 0f00 	cmp.w	sl, #0
 800b8b4:	f8cd 8014 	str.w	r8, [sp, #20]
 800b8b8:	46d3      	mov	fp, sl
 800b8ba:	dc21      	bgt.n	800b900 <_dtoa_r+0x880>
 800b8bc:	9b07      	ldr	r3, [sp, #28]
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	dd1e      	ble.n	800b900 <_dtoa_r+0x880>
 800b8c2:	f1bb 0f00 	cmp.w	fp, #0
 800b8c6:	f47f addc 	bne.w	800b482 <_dtoa_r+0x402>
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	2205      	movs	r2, #5
 800b8d0:	4648      	mov	r0, r9
 800b8d2:	f000 fa95 	bl	800be00 <__multadd>
 800b8d6:	4601      	mov	r1, r0
 800b8d8:	4604      	mov	r4, r0
 800b8da:	9801      	ldr	r0, [sp, #4]
 800b8dc:	f000 fca0 	bl	800c220 <__mcmp>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	f77f adce 	ble.w	800b482 <_dtoa_r+0x402>
 800b8e6:	463e      	mov	r6, r7
 800b8e8:	2331      	movs	r3, #49	@ 0x31
 800b8ea:	f806 3b01 	strb.w	r3, [r6], #1
 800b8ee:	9b05      	ldr	r3, [sp, #20]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	9305      	str	r3, [sp, #20]
 800b8f4:	e5c9      	b.n	800b48a <_dtoa_r+0x40a>
 800b8f6:	f8cd 8014 	str.w	r8, [sp, #20]
 800b8fa:	4654      	mov	r4, sl
 800b8fc:	4625      	mov	r5, r4
 800b8fe:	e7f2      	b.n	800b8e6 <_dtoa_r+0x866>
 800b900:	9b08      	ldr	r3, [sp, #32]
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 8102 	beq.w	800bb0c <_dtoa_r+0xa8c>
 800b908:	2e00      	cmp	r6, #0
 800b90a:	dd05      	ble.n	800b918 <_dtoa_r+0x898>
 800b90c:	4629      	mov	r1, r5
 800b90e:	4632      	mov	r2, r6
 800b910:	4648      	mov	r0, r9
 800b912:	f000 fc19 	bl	800c148 <__lshift>
 800b916:	4605      	mov	r5, r0
 800b918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d058      	beq.n	800b9d0 <_dtoa_r+0x950>
 800b91e:	6869      	ldr	r1, [r5, #4]
 800b920:	4648      	mov	r0, r9
 800b922:	f000 fa0b 	bl	800bd3c <_Balloc>
 800b926:	4606      	mov	r6, r0
 800b928:	b928      	cbnz	r0, 800b936 <_dtoa_r+0x8b6>
 800b92a:	4b82      	ldr	r3, [pc, #520]	@ (800bb34 <_dtoa_r+0xab4>)
 800b92c:	4602      	mov	r2, r0
 800b92e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b932:	f7ff bbbe 	b.w	800b0b2 <_dtoa_r+0x32>
 800b936:	692a      	ldr	r2, [r5, #16]
 800b938:	3202      	adds	r2, #2
 800b93a:	0092      	lsls	r2, r2, #2
 800b93c:	f105 010c 	add.w	r1, r5, #12
 800b940:	300c      	adds	r0, #12
 800b942:	f7ff fb04 	bl	800af4e <memcpy>
 800b946:	2201      	movs	r2, #1
 800b948:	4631      	mov	r1, r6
 800b94a:	4648      	mov	r0, r9
 800b94c:	f000 fbfc 	bl	800c148 <__lshift>
 800b950:	1c7b      	adds	r3, r7, #1
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	eb07 030b 	add.w	r3, r7, fp
 800b958:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95a:	9b02      	ldr	r3, [sp, #8]
 800b95c:	f003 0301 	and.w	r3, r3, #1
 800b960:	46a8      	mov	r8, r5
 800b962:	9308      	str	r3, [sp, #32]
 800b964:	4605      	mov	r5, r0
 800b966:	9b04      	ldr	r3, [sp, #16]
 800b968:	9801      	ldr	r0, [sp, #4]
 800b96a:	4621      	mov	r1, r4
 800b96c:	f103 3bff 	add.w	fp, r3, #4294967295
 800b970:	f7ff fafb 	bl	800af6a <quorem>
 800b974:	4641      	mov	r1, r8
 800b976:	9002      	str	r0, [sp, #8]
 800b978:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b97c:	9801      	ldr	r0, [sp, #4]
 800b97e:	f000 fc4f 	bl	800c220 <__mcmp>
 800b982:	462a      	mov	r2, r5
 800b984:	9006      	str	r0, [sp, #24]
 800b986:	4621      	mov	r1, r4
 800b988:	4648      	mov	r0, r9
 800b98a:	f000 fc65 	bl	800c258 <__mdiff>
 800b98e:	68c2      	ldr	r2, [r0, #12]
 800b990:	4606      	mov	r6, r0
 800b992:	b9fa      	cbnz	r2, 800b9d4 <_dtoa_r+0x954>
 800b994:	4601      	mov	r1, r0
 800b996:	9801      	ldr	r0, [sp, #4]
 800b998:	f000 fc42 	bl	800c220 <__mcmp>
 800b99c:	4602      	mov	r2, r0
 800b99e:	4631      	mov	r1, r6
 800b9a0:	4648      	mov	r0, r9
 800b9a2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b9a4:	f000 fa0a 	bl	800bdbc <_Bfree>
 800b9a8:	9b07      	ldr	r3, [sp, #28]
 800b9aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9ac:	9e04      	ldr	r6, [sp, #16]
 800b9ae:	ea42 0103 	orr.w	r1, r2, r3
 800b9b2:	9b08      	ldr	r3, [sp, #32]
 800b9b4:	4319      	orrs	r1, r3
 800b9b6:	d10f      	bne.n	800b9d8 <_dtoa_r+0x958>
 800b9b8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b9bc:	d028      	beq.n	800ba10 <_dtoa_r+0x990>
 800b9be:	9b06      	ldr	r3, [sp, #24]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dd02      	ble.n	800b9ca <_dtoa_r+0x94a>
 800b9c4:	9b02      	ldr	r3, [sp, #8]
 800b9c6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b9ca:	f88b a000 	strb.w	sl, [fp]
 800b9ce:	e55e      	b.n	800b48e <_dtoa_r+0x40e>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	e7bd      	b.n	800b950 <_dtoa_r+0x8d0>
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	e7e2      	b.n	800b99e <_dtoa_r+0x91e>
 800b9d8:	9b06      	ldr	r3, [sp, #24]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	db04      	blt.n	800b9e8 <_dtoa_r+0x968>
 800b9de:	9907      	ldr	r1, [sp, #28]
 800b9e0:	430b      	orrs	r3, r1
 800b9e2:	9908      	ldr	r1, [sp, #32]
 800b9e4:	430b      	orrs	r3, r1
 800b9e6:	d120      	bne.n	800ba2a <_dtoa_r+0x9aa>
 800b9e8:	2a00      	cmp	r2, #0
 800b9ea:	ddee      	ble.n	800b9ca <_dtoa_r+0x94a>
 800b9ec:	9901      	ldr	r1, [sp, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	4648      	mov	r0, r9
 800b9f2:	f000 fba9 	bl	800c148 <__lshift>
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	9001      	str	r0, [sp, #4]
 800b9fa:	f000 fc11 	bl	800c220 <__mcmp>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	dc03      	bgt.n	800ba0a <_dtoa_r+0x98a>
 800ba02:	d1e2      	bne.n	800b9ca <_dtoa_r+0x94a>
 800ba04:	f01a 0f01 	tst.w	sl, #1
 800ba08:	d0df      	beq.n	800b9ca <_dtoa_r+0x94a>
 800ba0a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ba0e:	d1d9      	bne.n	800b9c4 <_dtoa_r+0x944>
 800ba10:	2339      	movs	r3, #57	@ 0x39
 800ba12:	f88b 3000 	strb.w	r3, [fp]
 800ba16:	4633      	mov	r3, r6
 800ba18:	461e      	mov	r6, r3
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba20:	2a39      	cmp	r2, #57	@ 0x39
 800ba22:	d052      	beq.n	800baca <_dtoa_r+0xa4a>
 800ba24:	3201      	adds	r2, #1
 800ba26:	701a      	strb	r2, [r3, #0]
 800ba28:	e531      	b.n	800b48e <_dtoa_r+0x40e>
 800ba2a:	2a00      	cmp	r2, #0
 800ba2c:	dd07      	ble.n	800ba3e <_dtoa_r+0x9be>
 800ba2e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ba32:	d0ed      	beq.n	800ba10 <_dtoa_r+0x990>
 800ba34:	f10a 0301 	add.w	r3, sl, #1
 800ba38:	f88b 3000 	strb.w	r3, [fp]
 800ba3c:	e527      	b.n	800b48e <_dtoa_r+0x40e>
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba42:	f803 ac01 	strb.w	sl, [r3, #-1]
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d029      	beq.n	800ba9e <_dtoa_r+0xa1e>
 800ba4a:	9901      	ldr	r1, [sp, #4]
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	220a      	movs	r2, #10
 800ba50:	4648      	mov	r0, r9
 800ba52:	f000 f9d5 	bl	800be00 <__multadd>
 800ba56:	45a8      	cmp	r8, r5
 800ba58:	9001      	str	r0, [sp, #4]
 800ba5a:	f04f 0300 	mov.w	r3, #0
 800ba5e:	f04f 020a 	mov.w	r2, #10
 800ba62:	4641      	mov	r1, r8
 800ba64:	4648      	mov	r0, r9
 800ba66:	d107      	bne.n	800ba78 <_dtoa_r+0x9f8>
 800ba68:	f000 f9ca 	bl	800be00 <__multadd>
 800ba6c:	4680      	mov	r8, r0
 800ba6e:	4605      	mov	r5, r0
 800ba70:	9b04      	ldr	r3, [sp, #16]
 800ba72:	3301      	adds	r3, #1
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	e776      	b.n	800b966 <_dtoa_r+0x8e6>
 800ba78:	f000 f9c2 	bl	800be00 <__multadd>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4680      	mov	r8, r0
 800ba80:	2300      	movs	r3, #0
 800ba82:	220a      	movs	r2, #10
 800ba84:	4648      	mov	r0, r9
 800ba86:	f000 f9bb 	bl	800be00 <__multadd>
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	e7f0      	b.n	800ba70 <_dtoa_r+0x9f0>
 800ba8e:	f1bb 0f00 	cmp.w	fp, #0
 800ba92:	bfcc      	ite	gt
 800ba94:	465e      	movgt	r6, fp
 800ba96:	2601      	movle	r6, #1
 800ba98:	443e      	add	r6, r7
 800ba9a:	f04f 0800 	mov.w	r8, #0
 800ba9e:	9901      	ldr	r1, [sp, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	4648      	mov	r0, r9
 800baa4:	f000 fb50 	bl	800c148 <__lshift>
 800baa8:	4621      	mov	r1, r4
 800baaa:	9001      	str	r0, [sp, #4]
 800baac:	f000 fbb8 	bl	800c220 <__mcmp>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	dcb0      	bgt.n	800ba16 <_dtoa_r+0x996>
 800bab4:	d102      	bne.n	800babc <_dtoa_r+0xa3c>
 800bab6:	f01a 0f01 	tst.w	sl, #1
 800baba:	d1ac      	bne.n	800ba16 <_dtoa_r+0x996>
 800babc:	4633      	mov	r3, r6
 800babe:	461e      	mov	r6, r3
 800bac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bac4:	2a30      	cmp	r2, #48	@ 0x30
 800bac6:	d0fa      	beq.n	800babe <_dtoa_r+0xa3e>
 800bac8:	e4e1      	b.n	800b48e <_dtoa_r+0x40e>
 800baca:	429f      	cmp	r7, r3
 800bacc:	d1a4      	bne.n	800ba18 <_dtoa_r+0x998>
 800bace:	9b05      	ldr	r3, [sp, #20]
 800bad0:	3301      	adds	r3, #1
 800bad2:	9305      	str	r3, [sp, #20]
 800bad4:	2331      	movs	r3, #49	@ 0x31
 800bad6:	703b      	strb	r3, [r7, #0]
 800bad8:	e4d9      	b.n	800b48e <_dtoa_r+0x40e>
 800bada:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800badc:	4f16      	ldr	r7, [pc, #88]	@ (800bb38 <_dtoa_r+0xab8>)
 800bade:	b11b      	cbz	r3, 800bae8 <_dtoa_r+0xa68>
 800bae0:	f107 0308 	add.w	r3, r7, #8
 800bae4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	4638      	mov	r0, r7
 800baea:	b011      	add	sp, #68	@ 0x44
 800baec:	ecbd 8b02 	vpop	{d8}
 800baf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf4:	9b07      	ldr	r3, [sp, #28]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	f77f ae2c 	ble.w	800b754 <_dtoa_r+0x6d4>
 800bafc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bafe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb00:	2001      	movs	r0, #1
 800bb02:	e64c      	b.n	800b79e <_dtoa_r+0x71e>
 800bb04:	f1bb 0f00 	cmp.w	fp, #0
 800bb08:	f77f aed8 	ble.w	800b8bc <_dtoa_r+0x83c>
 800bb0c:	463e      	mov	r6, r7
 800bb0e:	9801      	ldr	r0, [sp, #4]
 800bb10:	4621      	mov	r1, r4
 800bb12:	f7ff fa2a 	bl	800af6a <quorem>
 800bb16:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bb1a:	f806 ab01 	strb.w	sl, [r6], #1
 800bb1e:	1bf2      	subs	r2, r6, r7
 800bb20:	4593      	cmp	fp, r2
 800bb22:	ddb4      	ble.n	800ba8e <_dtoa_r+0xa0e>
 800bb24:	9901      	ldr	r1, [sp, #4]
 800bb26:	2300      	movs	r3, #0
 800bb28:	220a      	movs	r2, #10
 800bb2a:	4648      	mov	r0, r9
 800bb2c:	f000 f968 	bl	800be00 <__multadd>
 800bb30:	9001      	str	r0, [sp, #4]
 800bb32:	e7ec      	b.n	800bb0e <_dtoa_r+0xa8e>
 800bb34:	0800cf60 	.word	0x0800cf60
 800bb38:	0800cee4 	.word	0x0800cee4

0800bb3c <_free_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4605      	mov	r5, r0
 800bb40:	2900      	cmp	r1, #0
 800bb42:	d041      	beq.n	800bbc8 <_free_r+0x8c>
 800bb44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb48:	1f0c      	subs	r4, r1, #4
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	bfb8      	it	lt
 800bb4e:	18e4      	addlt	r4, r4, r3
 800bb50:	f000 f8e8 	bl	800bd24 <__malloc_lock>
 800bb54:	4a1d      	ldr	r2, [pc, #116]	@ (800bbcc <_free_r+0x90>)
 800bb56:	6813      	ldr	r3, [r2, #0]
 800bb58:	b933      	cbnz	r3, 800bb68 <_free_r+0x2c>
 800bb5a:	6063      	str	r3, [r4, #4]
 800bb5c:	6014      	str	r4, [r2, #0]
 800bb5e:	4628      	mov	r0, r5
 800bb60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb64:	f000 b8e4 	b.w	800bd30 <__malloc_unlock>
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	d908      	bls.n	800bb7e <_free_r+0x42>
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	1821      	adds	r1, r4, r0
 800bb70:	428b      	cmp	r3, r1
 800bb72:	bf01      	itttt	eq
 800bb74:	6819      	ldreq	r1, [r3, #0]
 800bb76:	685b      	ldreq	r3, [r3, #4]
 800bb78:	1809      	addeq	r1, r1, r0
 800bb7a:	6021      	streq	r1, [r4, #0]
 800bb7c:	e7ed      	b.n	800bb5a <_free_r+0x1e>
 800bb7e:	461a      	mov	r2, r3
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	b10b      	cbz	r3, 800bb88 <_free_r+0x4c>
 800bb84:	42a3      	cmp	r3, r4
 800bb86:	d9fa      	bls.n	800bb7e <_free_r+0x42>
 800bb88:	6811      	ldr	r1, [r2, #0]
 800bb8a:	1850      	adds	r0, r2, r1
 800bb8c:	42a0      	cmp	r0, r4
 800bb8e:	d10b      	bne.n	800bba8 <_free_r+0x6c>
 800bb90:	6820      	ldr	r0, [r4, #0]
 800bb92:	4401      	add	r1, r0
 800bb94:	1850      	adds	r0, r2, r1
 800bb96:	4283      	cmp	r3, r0
 800bb98:	6011      	str	r1, [r2, #0]
 800bb9a:	d1e0      	bne.n	800bb5e <_free_r+0x22>
 800bb9c:	6818      	ldr	r0, [r3, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	6053      	str	r3, [r2, #4]
 800bba2:	4408      	add	r0, r1
 800bba4:	6010      	str	r0, [r2, #0]
 800bba6:	e7da      	b.n	800bb5e <_free_r+0x22>
 800bba8:	d902      	bls.n	800bbb0 <_free_r+0x74>
 800bbaa:	230c      	movs	r3, #12
 800bbac:	602b      	str	r3, [r5, #0]
 800bbae:	e7d6      	b.n	800bb5e <_free_r+0x22>
 800bbb0:	6820      	ldr	r0, [r4, #0]
 800bbb2:	1821      	adds	r1, r4, r0
 800bbb4:	428b      	cmp	r3, r1
 800bbb6:	bf04      	itt	eq
 800bbb8:	6819      	ldreq	r1, [r3, #0]
 800bbba:	685b      	ldreq	r3, [r3, #4]
 800bbbc:	6063      	str	r3, [r4, #4]
 800bbbe:	bf04      	itt	eq
 800bbc0:	1809      	addeq	r1, r1, r0
 800bbc2:	6021      	streq	r1, [r4, #0]
 800bbc4:	6054      	str	r4, [r2, #4]
 800bbc6:	e7ca      	b.n	800bb5e <_free_r+0x22>
 800bbc8:	bd38      	pop	{r3, r4, r5, pc}
 800bbca:	bf00      	nop
 800bbcc:	240007b8 	.word	0x240007b8

0800bbd0 <malloc>:
 800bbd0:	4b02      	ldr	r3, [pc, #8]	@ (800bbdc <malloc+0xc>)
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	6818      	ldr	r0, [r3, #0]
 800bbd6:	f000 b825 	b.w	800bc24 <_malloc_r>
 800bbda:	bf00      	nop
 800bbdc:	24000024 	.word	0x24000024

0800bbe0 <sbrk_aligned>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	4e0f      	ldr	r6, [pc, #60]	@ (800bc20 <sbrk_aligned+0x40>)
 800bbe4:	460c      	mov	r4, r1
 800bbe6:	6831      	ldr	r1, [r6, #0]
 800bbe8:	4605      	mov	r5, r0
 800bbea:	b911      	cbnz	r1, 800bbf2 <sbrk_aligned+0x12>
 800bbec:	f000 fec6 	bl	800c97c <_sbrk_r>
 800bbf0:	6030      	str	r0, [r6, #0]
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	f000 fec1 	bl	800c97c <_sbrk_r>
 800bbfa:	1c43      	adds	r3, r0, #1
 800bbfc:	d103      	bne.n	800bc06 <sbrk_aligned+0x26>
 800bbfe:	f04f 34ff 	mov.w	r4, #4294967295
 800bc02:	4620      	mov	r0, r4
 800bc04:	bd70      	pop	{r4, r5, r6, pc}
 800bc06:	1cc4      	adds	r4, r0, #3
 800bc08:	f024 0403 	bic.w	r4, r4, #3
 800bc0c:	42a0      	cmp	r0, r4
 800bc0e:	d0f8      	beq.n	800bc02 <sbrk_aligned+0x22>
 800bc10:	1a21      	subs	r1, r4, r0
 800bc12:	4628      	mov	r0, r5
 800bc14:	f000 feb2 	bl	800c97c <_sbrk_r>
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d1f2      	bne.n	800bc02 <sbrk_aligned+0x22>
 800bc1c:	e7ef      	b.n	800bbfe <sbrk_aligned+0x1e>
 800bc1e:	bf00      	nop
 800bc20:	240007b4 	.word	0x240007b4

0800bc24 <_malloc_r>:
 800bc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc28:	1ccd      	adds	r5, r1, #3
 800bc2a:	f025 0503 	bic.w	r5, r5, #3
 800bc2e:	3508      	adds	r5, #8
 800bc30:	2d0c      	cmp	r5, #12
 800bc32:	bf38      	it	cc
 800bc34:	250c      	movcc	r5, #12
 800bc36:	2d00      	cmp	r5, #0
 800bc38:	4606      	mov	r6, r0
 800bc3a:	db01      	blt.n	800bc40 <_malloc_r+0x1c>
 800bc3c:	42a9      	cmp	r1, r5
 800bc3e:	d904      	bls.n	800bc4a <_malloc_r+0x26>
 800bc40:	230c      	movs	r3, #12
 800bc42:	6033      	str	r3, [r6, #0]
 800bc44:	2000      	movs	r0, #0
 800bc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd20 <_malloc_r+0xfc>
 800bc4e:	f000 f869 	bl	800bd24 <__malloc_lock>
 800bc52:	f8d8 3000 	ldr.w	r3, [r8]
 800bc56:	461c      	mov	r4, r3
 800bc58:	bb44      	cbnz	r4, 800bcac <_malloc_r+0x88>
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7ff ffbf 	bl	800bbe0 <sbrk_aligned>
 800bc62:	1c43      	adds	r3, r0, #1
 800bc64:	4604      	mov	r4, r0
 800bc66:	d158      	bne.n	800bd1a <_malloc_r+0xf6>
 800bc68:	f8d8 4000 	ldr.w	r4, [r8]
 800bc6c:	4627      	mov	r7, r4
 800bc6e:	2f00      	cmp	r7, #0
 800bc70:	d143      	bne.n	800bcfa <_malloc_r+0xd6>
 800bc72:	2c00      	cmp	r4, #0
 800bc74:	d04b      	beq.n	800bd0e <_malloc_r+0xea>
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	4639      	mov	r1, r7
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	eb04 0903 	add.w	r9, r4, r3
 800bc80:	f000 fe7c 	bl	800c97c <_sbrk_r>
 800bc84:	4581      	cmp	r9, r0
 800bc86:	d142      	bne.n	800bd0e <_malloc_r+0xea>
 800bc88:	6821      	ldr	r1, [r4, #0]
 800bc8a:	1a6d      	subs	r5, r5, r1
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4630      	mov	r0, r6
 800bc90:	f7ff ffa6 	bl	800bbe0 <sbrk_aligned>
 800bc94:	3001      	adds	r0, #1
 800bc96:	d03a      	beq.n	800bd0e <_malloc_r+0xea>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	442b      	add	r3, r5
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	f8d8 3000 	ldr.w	r3, [r8]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	bb62      	cbnz	r2, 800bd00 <_malloc_r+0xdc>
 800bca6:	f8c8 7000 	str.w	r7, [r8]
 800bcaa:	e00f      	b.n	800bccc <_malloc_r+0xa8>
 800bcac:	6822      	ldr	r2, [r4, #0]
 800bcae:	1b52      	subs	r2, r2, r5
 800bcb0:	d420      	bmi.n	800bcf4 <_malloc_r+0xd0>
 800bcb2:	2a0b      	cmp	r2, #11
 800bcb4:	d917      	bls.n	800bce6 <_malloc_r+0xc2>
 800bcb6:	1961      	adds	r1, r4, r5
 800bcb8:	42a3      	cmp	r3, r4
 800bcba:	6025      	str	r5, [r4, #0]
 800bcbc:	bf18      	it	ne
 800bcbe:	6059      	strne	r1, [r3, #4]
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	bf08      	it	eq
 800bcc4:	f8c8 1000 	streq.w	r1, [r8]
 800bcc8:	5162      	str	r2, [r4, r5]
 800bcca:	604b      	str	r3, [r1, #4]
 800bccc:	4630      	mov	r0, r6
 800bcce:	f000 f82f 	bl	800bd30 <__malloc_unlock>
 800bcd2:	f104 000b 	add.w	r0, r4, #11
 800bcd6:	1d23      	adds	r3, r4, #4
 800bcd8:	f020 0007 	bic.w	r0, r0, #7
 800bcdc:	1ac2      	subs	r2, r0, r3
 800bcde:	bf1c      	itt	ne
 800bce0:	1a1b      	subne	r3, r3, r0
 800bce2:	50a3      	strne	r3, [r4, r2]
 800bce4:	e7af      	b.n	800bc46 <_malloc_r+0x22>
 800bce6:	6862      	ldr	r2, [r4, #4]
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	bf0c      	ite	eq
 800bcec:	f8c8 2000 	streq.w	r2, [r8]
 800bcf0:	605a      	strne	r2, [r3, #4]
 800bcf2:	e7eb      	b.n	800bccc <_malloc_r+0xa8>
 800bcf4:	4623      	mov	r3, r4
 800bcf6:	6864      	ldr	r4, [r4, #4]
 800bcf8:	e7ae      	b.n	800bc58 <_malloc_r+0x34>
 800bcfa:	463c      	mov	r4, r7
 800bcfc:	687f      	ldr	r7, [r7, #4]
 800bcfe:	e7b6      	b.n	800bc6e <_malloc_r+0x4a>
 800bd00:	461a      	mov	r2, r3
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	42a3      	cmp	r3, r4
 800bd06:	d1fb      	bne.n	800bd00 <_malloc_r+0xdc>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	6053      	str	r3, [r2, #4]
 800bd0c:	e7de      	b.n	800bccc <_malloc_r+0xa8>
 800bd0e:	230c      	movs	r3, #12
 800bd10:	6033      	str	r3, [r6, #0]
 800bd12:	4630      	mov	r0, r6
 800bd14:	f000 f80c 	bl	800bd30 <__malloc_unlock>
 800bd18:	e794      	b.n	800bc44 <_malloc_r+0x20>
 800bd1a:	6005      	str	r5, [r0, #0]
 800bd1c:	e7d6      	b.n	800bccc <_malloc_r+0xa8>
 800bd1e:	bf00      	nop
 800bd20:	240007b8 	.word	0x240007b8

0800bd24 <__malloc_lock>:
 800bd24:	4801      	ldr	r0, [pc, #4]	@ (800bd2c <__malloc_lock+0x8>)
 800bd26:	f7ff b910 	b.w	800af4a <__retarget_lock_acquire_recursive>
 800bd2a:	bf00      	nop
 800bd2c:	240007b0 	.word	0x240007b0

0800bd30 <__malloc_unlock>:
 800bd30:	4801      	ldr	r0, [pc, #4]	@ (800bd38 <__malloc_unlock+0x8>)
 800bd32:	f7ff b90b 	b.w	800af4c <__retarget_lock_release_recursive>
 800bd36:	bf00      	nop
 800bd38:	240007b0 	.word	0x240007b0

0800bd3c <_Balloc>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	69c6      	ldr	r6, [r0, #28]
 800bd40:	4604      	mov	r4, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	b976      	cbnz	r6, 800bd64 <_Balloc+0x28>
 800bd46:	2010      	movs	r0, #16
 800bd48:	f7ff ff42 	bl	800bbd0 <malloc>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	61e0      	str	r0, [r4, #28]
 800bd50:	b920      	cbnz	r0, 800bd5c <_Balloc+0x20>
 800bd52:	4b18      	ldr	r3, [pc, #96]	@ (800bdb4 <_Balloc+0x78>)
 800bd54:	4818      	ldr	r0, [pc, #96]	@ (800bdb8 <_Balloc+0x7c>)
 800bd56:	216b      	movs	r1, #107	@ 0x6b
 800bd58:	f000 fe20 	bl	800c99c <__assert_func>
 800bd5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd60:	6006      	str	r6, [r0, #0]
 800bd62:	60c6      	str	r6, [r0, #12]
 800bd64:	69e6      	ldr	r6, [r4, #28]
 800bd66:	68f3      	ldr	r3, [r6, #12]
 800bd68:	b183      	cbz	r3, 800bd8c <_Balloc+0x50>
 800bd6a:	69e3      	ldr	r3, [r4, #28]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd72:	b9b8      	cbnz	r0, 800bda4 <_Balloc+0x68>
 800bd74:	2101      	movs	r1, #1
 800bd76:	fa01 f605 	lsl.w	r6, r1, r5
 800bd7a:	1d72      	adds	r2, r6, #5
 800bd7c:	0092      	lsls	r2, r2, #2
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 fe2a 	bl	800c9d8 <_calloc_r>
 800bd84:	b160      	cbz	r0, 800bda0 <_Balloc+0x64>
 800bd86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd8a:	e00e      	b.n	800bdaa <_Balloc+0x6e>
 800bd8c:	2221      	movs	r2, #33	@ 0x21
 800bd8e:	2104      	movs	r1, #4
 800bd90:	4620      	mov	r0, r4
 800bd92:	f000 fe21 	bl	800c9d8 <_calloc_r>
 800bd96:	69e3      	ldr	r3, [r4, #28]
 800bd98:	60f0      	str	r0, [r6, #12]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e4      	bne.n	800bd6a <_Balloc+0x2e>
 800bda0:	2000      	movs	r0, #0
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	6802      	ldr	r2, [r0, #0]
 800bda6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdb0:	e7f7      	b.n	800bda2 <_Balloc+0x66>
 800bdb2:	bf00      	nop
 800bdb4:	0800cef1 	.word	0x0800cef1
 800bdb8:	0800cf71 	.word	0x0800cf71

0800bdbc <_Bfree>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	69c6      	ldr	r6, [r0, #28]
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	b976      	cbnz	r6, 800bde4 <_Bfree+0x28>
 800bdc6:	2010      	movs	r0, #16
 800bdc8:	f7ff ff02 	bl	800bbd0 <malloc>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	61e8      	str	r0, [r5, #28]
 800bdd0:	b920      	cbnz	r0, 800bddc <_Bfree+0x20>
 800bdd2:	4b09      	ldr	r3, [pc, #36]	@ (800bdf8 <_Bfree+0x3c>)
 800bdd4:	4809      	ldr	r0, [pc, #36]	@ (800bdfc <_Bfree+0x40>)
 800bdd6:	218f      	movs	r1, #143	@ 0x8f
 800bdd8:	f000 fde0 	bl	800c99c <__assert_func>
 800bddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bde0:	6006      	str	r6, [r0, #0]
 800bde2:	60c6      	str	r6, [r0, #12]
 800bde4:	b13c      	cbz	r4, 800bdf6 <_Bfree+0x3a>
 800bde6:	69eb      	ldr	r3, [r5, #28]
 800bde8:	6862      	ldr	r2, [r4, #4]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdf0:	6021      	str	r1, [r4, #0]
 800bdf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	0800cef1 	.word	0x0800cef1
 800bdfc:	0800cf71 	.word	0x0800cf71

0800be00 <__multadd>:
 800be00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be04:	690d      	ldr	r5, [r1, #16]
 800be06:	4607      	mov	r7, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	461e      	mov	r6, r3
 800be0c:	f101 0c14 	add.w	ip, r1, #20
 800be10:	2000      	movs	r0, #0
 800be12:	f8dc 3000 	ldr.w	r3, [ip]
 800be16:	b299      	uxth	r1, r3
 800be18:	fb02 6101 	mla	r1, r2, r1, r6
 800be1c:	0c1e      	lsrs	r6, r3, #16
 800be1e:	0c0b      	lsrs	r3, r1, #16
 800be20:	fb02 3306 	mla	r3, r2, r6, r3
 800be24:	b289      	uxth	r1, r1
 800be26:	3001      	adds	r0, #1
 800be28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be2c:	4285      	cmp	r5, r0
 800be2e:	f84c 1b04 	str.w	r1, [ip], #4
 800be32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be36:	dcec      	bgt.n	800be12 <__multadd+0x12>
 800be38:	b30e      	cbz	r6, 800be7e <__multadd+0x7e>
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	42ab      	cmp	r3, r5
 800be3e:	dc19      	bgt.n	800be74 <__multadd+0x74>
 800be40:	6861      	ldr	r1, [r4, #4]
 800be42:	4638      	mov	r0, r7
 800be44:	3101      	adds	r1, #1
 800be46:	f7ff ff79 	bl	800bd3c <_Balloc>
 800be4a:	4680      	mov	r8, r0
 800be4c:	b928      	cbnz	r0, 800be5a <__multadd+0x5a>
 800be4e:	4602      	mov	r2, r0
 800be50:	4b0c      	ldr	r3, [pc, #48]	@ (800be84 <__multadd+0x84>)
 800be52:	480d      	ldr	r0, [pc, #52]	@ (800be88 <__multadd+0x88>)
 800be54:	21ba      	movs	r1, #186	@ 0xba
 800be56:	f000 fda1 	bl	800c99c <__assert_func>
 800be5a:	6922      	ldr	r2, [r4, #16]
 800be5c:	3202      	adds	r2, #2
 800be5e:	f104 010c 	add.w	r1, r4, #12
 800be62:	0092      	lsls	r2, r2, #2
 800be64:	300c      	adds	r0, #12
 800be66:	f7ff f872 	bl	800af4e <memcpy>
 800be6a:	4621      	mov	r1, r4
 800be6c:	4638      	mov	r0, r7
 800be6e:	f7ff ffa5 	bl	800bdbc <_Bfree>
 800be72:	4644      	mov	r4, r8
 800be74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be78:	3501      	adds	r5, #1
 800be7a:	615e      	str	r6, [r3, #20]
 800be7c:	6125      	str	r5, [r4, #16]
 800be7e:	4620      	mov	r0, r4
 800be80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be84:	0800cf60 	.word	0x0800cf60
 800be88:	0800cf71 	.word	0x0800cf71

0800be8c <__hi0bits>:
 800be8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be90:	4603      	mov	r3, r0
 800be92:	bf36      	itet	cc
 800be94:	0403      	lslcc	r3, r0, #16
 800be96:	2000      	movcs	r0, #0
 800be98:	2010      	movcc	r0, #16
 800be9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be9e:	bf3c      	itt	cc
 800bea0:	021b      	lslcc	r3, r3, #8
 800bea2:	3008      	addcc	r0, #8
 800bea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bea8:	bf3c      	itt	cc
 800beaa:	011b      	lslcc	r3, r3, #4
 800beac:	3004      	addcc	r0, #4
 800beae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800beb2:	bf3c      	itt	cc
 800beb4:	009b      	lslcc	r3, r3, #2
 800beb6:	3002      	addcc	r0, #2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	db05      	blt.n	800bec8 <__hi0bits+0x3c>
 800bebc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bec0:	f100 0001 	add.w	r0, r0, #1
 800bec4:	bf08      	it	eq
 800bec6:	2020      	moveq	r0, #32
 800bec8:	4770      	bx	lr

0800beca <__lo0bits>:
 800beca:	6803      	ldr	r3, [r0, #0]
 800becc:	4602      	mov	r2, r0
 800bece:	f013 0007 	ands.w	r0, r3, #7
 800bed2:	d00b      	beq.n	800beec <__lo0bits+0x22>
 800bed4:	07d9      	lsls	r1, r3, #31
 800bed6:	d421      	bmi.n	800bf1c <__lo0bits+0x52>
 800bed8:	0798      	lsls	r0, r3, #30
 800beda:	bf49      	itett	mi
 800bedc:	085b      	lsrmi	r3, r3, #1
 800bede:	089b      	lsrpl	r3, r3, #2
 800bee0:	2001      	movmi	r0, #1
 800bee2:	6013      	strmi	r3, [r2, #0]
 800bee4:	bf5c      	itt	pl
 800bee6:	6013      	strpl	r3, [r2, #0]
 800bee8:	2002      	movpl	r0, #2
 800beea:	4770      	bx	lr
 800beec:	b299      	uxth	r1, r3
 800beee:	b909      	cbnz	r1, 800bef4 <__lo0bits+0x2a>
 800bef0:	0c1b      	lsrs	r3, r3, #16
 800bef2:	2010      	movs	r0, #16
 800bef4:	b2d9      	uxtb	r1, r3
 800bef6:	b909      	cbnz	r1, 800befc <__lo0bits+0x32>
 800bef8:	3008      	adds	r0, #8
 800befa:	0a1b      	lsrs	r3, r3, #8
 800befc:	0719      	lsls	r1, r3, #28
 800befe:	bf04      	itt	eq
 800bf00:	091b      	lsreq	r3, r3, #4
 800bf02:	3004      	addeq	r0, #4
 800bf04:	0799      	lsls	r1, r3, #30
 800bf06:	bf04      	itt	eq
 800bf08:	089b      	lsreq	r3, r3, #2
 800bf0a:	3002      	addeq	r0, #2
 800bf0c:	07d9      	lsls	r1, r3, #31
 800bf0e:	d403      	bmi.n	800bf18 <__lo0bits+0x4e>
 800bf10:	085b      	lsrs	r3, r3, #1
 800bf12:	f100 0001 	add.w	r0, r0, #1
 800bf16:	d003      	beq.n	800bf20 <__lo0bits+0x56>
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	4770      	bx	lr
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	4770      	bx	lr
 800bf20:	2020      	movs	r0, #32
 800bf22:	4770      	bx	lr

0800bf24 <__i2b>:
 800bf24:	b510      	push	{r4, lr}
 800bf26:	460c      	mov	r4, r1
 800bf28:	2101      	movs	r1, #1
 800bf2a:	f7ff ff07 	bl	800bd3c <_Balloc>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	b928      	cbnz	r0, 800bf3e <__i2b+0x1a>
 800bf32:	4b05      	ldr	r3, [pc, #20]	@ (800bf48 <__i2b+0x24>)
 800bf34:	4805      	ldr	r0, [pc, #20]	@ (800bf4c <__i2b+0x28>)
 800bf36:	f240 1145 	movw	r1, #325	@ 0x145
 800bf3a:	f000 fd2f 	bl	800c99c <__assert_func>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	6144      	str	r4, [r0, #20]
 800bf42:	6103      	str	r3, [r0, #16]
 800bf44:	bd10      	pop	{r4, pc}
 800bf46:	bf00      	nop
 800bf48:	0800cf60 	.word	0x0800cf60
 800bf4c:	0800cf71 	.word	0x0800cf71

0800bf50 <__multiply>:
 800bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf54:	4617      	mov	r7, r2
 800bf56:	690a      	ldr	r2, [r1, #16]
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	bfa8      	it	ge
 800bf5e:	463b      	movge	r3, r7
 800bf60:	4689      	mov	r9, r1
 800bf62:	bfa4      	itt	ge
 800bf64:	460f      	movge	r7, r1
 800bf66:	4699      	movge	r9, r3
 800bf68:	693d      	ldr	r5, [r7, #16]
 800bf6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	6879      	ldr	r1, [r7, #4]
 800bf72:	eb05 060a 	add.w	r6, r5, sl
 800bf76:	42b3      	cmp	r3, r6
 800bf78:	b085      	sub	sp, #20
 800bf7a:	bfb8      	it	lt
 800bf7c:	3101      	addlt	r1, #1
 800bf7e:	f7ff fedd 	bl	800bd3c <_Balloc>
 800bf82:	b930      	cbnz	r0, 800bf92 <__multiply+0x42>
 800bf84:	4602      	mov	r2, r0
 800bf86:	4b41      	ldr	r3, [pc, #260]	@ (800c08c <__multiply+0x13c>)
 800bf88:	4841      	ldr	r0, [pc, #260]	@ (800c090 <__multiply+0x140>)
 800bf8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf8e:	f000 fd05 	bl	800c99c <__assert_func>
 800bf92:	f100 0414 	add.w	r4, r0, #20
 800bf96:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bf9a:	4623      	mov	r3, r4
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4573      	cmp	r3, lr
 800bfa0:	d320      	bcc.n	800bfe4 <__multiply+0x94>
 800bfa2:	f107 0814 	add.w	r8, r7, #20
 800bfa6:	f109 0114 	add.w	r1, r9, #20
 800bfaa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bfae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bfb2:	9302      	str	r3, [sp, #8]
 800bfb4:	1beb      	subs	r3, r5, r7
 800bfb6:	3b15      	subs	r3, #21
 800bfb8:	f023 0303 	bic.w	r3, r3, #3
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	3715      	adds	r7, #21
 800bfc0:	42bd      	cmp	r5, r7
 800bfc2:	bf38      	it	cc
 800bfc4:	2304      	movcc	r3, #4
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	9b02      	ldr	r3, [sp, #8]
 800bfca:	9103      	str	r1, [sp, #12]
 800bfcc:	428b      	cmp	r3, r1
 800bfce:	d80c      	bhi.n	800bfea <__multiply+0x9a>
 800bfd0:	2e00      	cmp	r6, #0
 800bfd2:	dd03      	ble.n	800bfdc <__multiply+0x8c>
 800bfd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d055      	beq.n	800c088 <__multiply+0x138>
 800bfdc:	6106      	str	r6, [r0, #16]
 800bfde:	b005      	add	sp, #20
 800bfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe4:	f843 2b04 	str.w	r2, [r3], #4
 800bfe8:	e7d9      	b.n	800bf9e <__multiply+0x4e>
 800bfea:	f8b1 a000 	ldrh.w	sl, [r1]
 800bfee:	f1ba 0f00 	cmp.w	sl, #0
 800bff2:	d01f      	beq.n	800c034 <__multiply+0xe4>
 800bff4:	46c4      	mov	ip, r8
 800bff6:	46a1      	mov	r9, r4
 800bff8:	2700      	movs	r7, #0
 800bffa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bffe:	f8d9 3000 	ldr.w	r3, [r9]
 800c002:	fa1f fb82 	uxth.w	fp, r2
 800c006:	b29b      	uxth	r3, r3
 800c008:	fb0a 330b 	mla	r3, sl, fp, r3
 800c00c:	443b      	add	r3, r7
 800c00e:	f8d9 7000 	ldr.w	r7, [r9]
 800c012:	0c12      	lsrs	r2, r2, #16
 800c014:	0c3f      	lsrs	r7, r7, #16
 800c016:	fb0a 7202 	mla	r2, sl, r2, r7
 800c01a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c01e:	b29b      	uxth	r3, r3
 800c020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c024:	4565      	cmp	r5, ip
 800c026:	f849 3b04 	str.w	r3, [r9], #4
 800c02a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c02e:	d8e4      	bhi.n	800bffa <__multiply+0xaa>
 800c030:	9b01      	ldr	r3, [sp, #4]
 800c032:	50e7      	str	r7, [r4, r3]
 800c034:	9b03      	ldr	r3, [sp, #12]
 800c036:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c03a:	3104      	adds	r1, #4
 800c03c:	f1b9 0f00 	cmp.w	r9, #0
 800c040:	d020      	beq.n	800c084 <__multiply+0x134>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	4647      	mov	r7, r8
 800c046:	46a4      	mov	ip, r4
 800c048:	f04f 0a00 	mov.w	sl, #0
 800c04c:	f8b7 b000 	ldrh.w	fp, [r7]
 800c050:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c054:	fb09 220b 	mla	r2, r9, fp, r2
 800c058:	4452      	add	r2, sl
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c060:	f84c 3b04 	str.w	r3, [ip], #4
 800c064:	f857 3b04 	ldr.w	r3, [r7], #4
 800c068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c06c:	f8bc 3000 	ldrh.w	r3, [ip]
 800c070:	fb09 330a 	mla	r3, r9, sl, r3
 800c074:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c078:	42bd      	cmp	r5, r7
 800c07a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c07e:	d8e5      	bhi.n	800c04c <__multiply+0xfc>
 800c080:	9a01      	ldr	r2, [sp, #4]
 800c082:	50a3      	str	r3, [r4, r2]
 800c084:	3404      	adds	r4, #4
 800c086:	e79f      	b.n	800bfc8 <__multiply+0x78>
 800c088:	3e01      	subs	r6, #1
 800c08a:	e7a1      	b.n	800bfd0 <__multiply+0x80>
 800c08c:	0800cf60 	.word	0x0800cf60
 800c090:	0800cf71 	.word	0x0800cf71

0800c094 <__pow5mult>:
 800c094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c098:	4615      	mov	r5, r2
 800c09a:	f012 0203 	ands.w	r2, r2, #3
 800c09e:	4607      	mov	r7, r0
 800c0a0:	460e      	mov	r6, r1
 800c0a2:	d007      	beq.n	800c0b4 <__pow5mult+0x20>
 800c0a4:	4c25      	ldr	r4, [pc, #148]	@ (800c13c <__pow5mult+0xa8>)
 800c0a6:	3a01      	subs	r2, #1
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0ae:	f7ff fea7 	bl	800be00 <__multadd>
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	10ad      	asrs	r5, r5, #2
 800c0b6:	d03d      	beq.n	800c134 <__pow5mult+0xa0>
 800c0b8:	69fc      	ldr	r4, [r7, #28]
 800c0ba:	b97c      	cbnz	r4, 800c0dc <__pow5mult+0x48>
 800c0bc:	2010      	movs	r0, #16
 800c0be:	f7ff fd87 	bl	800bbd0 <malloc>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	61f8      	str	r0, [r7, #28]
 800c0c6:	b928      	cbnz	r0, 800c0d4 <__pow5mult+0x40>
 800c0c8:	4b1d      	ldr	r3, [pc, #116]	@ (800c140 <__pow5mult+0xac>)
 800c0ca:	481e      	ldr	r0, [pc, #120]	@ (800c144 <__pow5mult+0xb0>)
 800c0cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c0d0:	f000 fc64 	bl	800c99c <__assert_func>
 800c0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0d8:	6004      	str	r4, [r0, #0]
 800c0da:	60c4      	str	r4, [r0, #12]
 800c0dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0e4:	b94c      	cbnz	r4, 800c0fa <__pow5mult+0x66>
 800c0e6:	f240 2171 	movw	r1, #625	@ 0x271
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	f7ff ff1a 	bl	800bf24 <__i2b>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	6003      	str	r3, [r0, #0]
 800c0fa:	f04f 0900 	mov.w	r9, #0
 800c0fe:	07eb      	lsls	r3, r5, #31
 800c100:	d50a      	bpl.n	800c118 <__pow5mult+0x84>
 800c102:	4631      	mov	r1, r6
 800c104:	4622      	mov	r2, r4
 800c106:	4638      	mov	r0, r7
 800c108:	f7ff ff22 	bl	800bf50 <__multiply>
 800c10c:	4631      	mov	r1, r6
 800c10e:	4680      	mov	r8, r0
 800c110:	4638      	mov	r0, r7
 800c112:	f7ff fe53 	bl	800bdbc <_Bfree>
 800c116:	4646      	mov	r6, r8
 800c118:	106d      	asrs	r5, r5, #1
 800c11a:	d00b      	beq.n	800c134 <__pow5mult+0xa0>
 800c11c:	6820      	ldr	r0, [r4, #0]
 800c11e:	b938      	cbnz	r0, 800c130 <__pow5mult+0x9c>
 800c120:	4622      	mov	r2, r4
 800c122:	4621      	mov	r1, r4
 800c124:	4638      	mov	r0, r7
 800c126:	f7ff ff13 	bl	800bf50 <__multiply>
 800c12a:	6020      	str	r0, [r4, #0]
 800c12c:	f8c0 9000 	str.w	r9, [r0]
 800c130:	4604      	mov	r4, r0
 800c132:	e7e4      	b.n	800c0fe <__pow5mult+0x6a>
 800c134:	4630      	mov	r0, r6
 800c136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c13a:	bf00      	nop
 800c13c:	0800d024 	.word	0x0800d024
 800c140:	0800cef1 	.word	0x0800cef1
 800c144:	0800cf71 	.word	0x0800cf71

0800c148 <__lshift>:
 800c148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c14c:	460c      	mov	r4, r1
 800c14e:	6849      	ldr	r1, [r1, #4]
 800c150:	6923      	ldr	r3, [r4, #16]
 800c152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c156:	68a3      	ldr	r3, [r4, #8]
 800c158:	4607      	mov	r7, r0
 800c15a:	4691      	mov	r9, r2
 800c15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c160:	f108 0601 	add.w	r6, r8, #1
 800c164:	42b3      	cmp	r3, r6
 800c166:	db0b      	blt.n	800c180 <__lshift+0x38>
 800c168:	4638      	mov	r0, r7
 800c16a:	f7ff fde7 	bl	800bd3c <_Balloc>
 800c16e:	4605      	mov	r5, r0
 800c170:	b948      	cbnz	r0, 800c186 <__lshift+0x3e>
 800c172:	4602      	mov	r2, r0
 800c174:	4b28      	ldr	r3, [pc, #160]	@ (800c218 <__lshift+0xd0>)
 800c176:	4829      	ldr	r0, [pc, #164]	@ (800c21c <__lshift+0xd4>)
 800c178:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c17c:	f000 fc0e 	bl	800c99c <__assert_func>
 800c180:	3101      	adds	r1, #1
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	e7ee      	b.n	800c164 <__lshift+0x1c>
 800c186:	2300      	movs	r3, #0
 800c188:	f100 0114 	add.w	r1, r0, #20
 800c18c:	f100 0210 	add.w	r2, r0, #16
 800c190:	4618      	mov	r0, r3
 800c192:	4553      	cmp	r3, sl
 800c194:	db33      	blt.n	800c1fe <__lshift+0xb6>
 800c196:	6920      	ldr	r0, [r4, #16]
 800c198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c19c:	f104 0314 	add.w	r3, r4, #20
 800c1a0:	f019 091f 	ands.w	r9, r9, #31
 800c1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1ac:	d02b      	beq.n	800c206 <__lshift+0xbe>
 800c1ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c1b2:	468a      	mov	sl, r1
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	fa00 f009 	lsl.w	r0, r0, r9
 800c1bc:	4310      	orrs	r0, r2
 800c1be:	f84a 0b04 	str.w	r0, [sl], #4
 800c1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c6:	459c      	cmp	ip, r3
 800c1c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1cc:	d8f3      	bhi.n	800c1b6 <__lshift+0x6e>
 800c1ce:	ebac 0304 	sub.w	r3, ip, r4
 800c1d2:	3b15      	subs	r3, #21
 800c1d4:	f023 0303 	bic.w	r3, r3, #3
 800c1d8:	3304      	adds	r3, #4
 800c1da:	f104 0015 	add.w	r0, r4, #21
 800c1de:	4560      	cmp	r0, ip
 800c1e0:	bf88      	it	hi
 800c1e2:	2304      	movhi	r3, #4
 800c1e4:	50ca      	str	r2, [r1, r3]
 800c1e6:	b10a      	cbz	r2, 800c1ec <__lshift+0xa4>
 800c1e8:	f108 0602 	add.w	r6, r8, #2
 800c1ec:	3e01      	subs	r6, #1
 800c1ee:	4638      	mov	r0, r7
 800c1f0:	612e      	str	r6, [r5, #16]
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	f7ff fde2 	bl	800bdbc <_Bfree>
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c202:	3301      	adds	r3, #1
 800c204:	e7c5      	b.n	800c192 <__lshift+0x4a>
 800c206:	3904      	subs	r1, #4
 800c208:	f853 2b04 	ldr.w	r2, [r3], #4
 800c20c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c210:	459c      	cmp	ip, r3
 800c212:	d8f9      	bhi.n	800c208 <__lshift+0xc0>
 800c214:	e7ea      	b.n	800c1ec <__lshift+0xa4>
 800c216:	bf00      	nop
 800c218:	0800cf60 	.word	0x0800cf60
 800c21c:	0800cf71 	.word	0x0800cf71

0800c220 <__mcmp>:
 800c220:	690a      	ldr	r2, [r1, #16]
 800c222:	4603      	mov	r3, r0
 800c224:	6900      	ldr	r0, [r0, #16]
 800c226:	1a80      	subs	r0, r0, r2
 800c228:	b530      	push	{r4, r5, lr}
 800c22a:	d10e      	bne.n	800c24a <__mcmp+0x2a>
 800c22c:	3314      	adds	r3, #20
 800c22e:	3114      	adds	r1, #20
 800c230:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c23c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c240:	4295      	cmp	r5, r2
 800c242:	d003      	beq.n	800c24c <__mcmp+0x2c>
 800c244:	d205      	bcs.n	800c252 <__mcmp+0x32>
 800c246:	f04f 30ff 	mov.w	r0, #4294967295
 800c24a:	bd30      	pop	{r4, r5, pc}
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	d3f3      	bcc.n	800c238 <__mcmp+0x18>
 800c250:	e7fb      	b.n	800c24a <__mcmp+0x2a>
 800c252:	2001      	movs	r0, #1
 800c254:	e7f9      	b.n	800c24a <__mcmp+0x2a>
	...

0800c258 <__mdiff>:
 800c258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25c:	4689      	mov	r9, r1
 800c25e:	4606      	mov	r6, r0
 800c260:	4611      	mov	r1, r2
 800c262:	4648      	mov	r0, r9
 800c264:	4614      	mov	r4, r2
 800c266:	f7ff ffdb 	bl	800c220 <__mcmp>
 800c26a:	1e05      	subs	r5, r0, #0
 800c26c:	d112      	bne.n	800c294 <__mdiff+0x3c>
 800c26e:	4629      	mov	r1, r5
 800c270:	4630      	mov	r0, r6
 800c272:	f7ff fd63 	bl	800bd3c <_Balloc>
 800c276:	4602      	mov	r2, r0
 800c278:	b928      	cbnz	r0, 800c286 <__mdiff+0x2e>
 800c27a:	4b3f      	ldr	r3, [pc, #252]	@ (800c378 <__mdiff+0x120>)
 800c27c:	f240 2137 	movw	r1, #567	@ 0x237
 800c280:	483e      	ldr	r0, [pc, #248]	@ (800c37c <__mdiff+0x124>)
 800c282:	f000 fb8b 	bl	800c99c <__assert_func>
 800c286:	2301      	movs	r3, #1
 800c288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c28c:	4610      	mov	r0, r2
 800c28e:	b003      	add	sp, #12
 800c290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c294:	bfbc      	itt	lt
 800c296:	464b      	movlt	r3, r9
 800c298:	46a1      	movlt	r9, r4
 800c29a:	4630      	mov	r0, r6
 800c29c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c2a0:	bfba      	itte	lt
 800c2a2:	461c      	movlt	r4, r3
 800c2a4:	2501      	movlt	r5, #1
 800c2a6:	2500      	movge	r5, #0
 800c2a8:	f7ff fd48 	bl	800bd3c <_Balloc>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	b918      	cbnz	r0, 800c2b8 <__mdiff+0x60>
 800c2b0:	4b31      	ldr	r3, [pc, #196]	@ (800c378 <__mdiff+0x120>)
 800c2b2:	f240 2145 	movw	r1, #581	@ 0x245
 800c2b6:	e7e3      	b.n	800c280 <__mdiff+0x28>
 800c2b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c2bc:	6926      	ldr	r6, [r4, #16]
 800c2be:	60c5      	str	r5, [r0, #12]
 800c2c0:	f109 0310 	add.w	r3, r9, #16
 800c2c4:	f109 0514 	add.w	r5, r9, #20
 800c2c8:	f104 0e14 	add.w	lr, r4, #20
 800c2cc:	f100 0b14 	add.w	fp, r0, #20
 800c2d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c2d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	46d9      	mov	r9, fp
 800c2dc:	f04f 0c00 	mov.w	ip, #0
 800c2e0:	9b01      	ldr	r3, [sp, #4]
 800c2e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c2e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	fa1f f38a 	uxth.w	r3, sl
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	b283      	uxth	r3, r0
 800c2f4:	1acb      	subs	r3, r1, r3
 800c2f6:	0c00      	lsrs	r0, r0, #16
 800c2f8:	4463      	add	r3, ip
 800c2fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c2fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c302:	b29b      	uxth	r3, r3
 800c304:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c308:	4576      	cmp	r6, lr
 800c30a:	f849 3b04 	str.w	r3, [r9], #4
 800c30e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c312:	d8e5      	bhi.n	800c2e0 <__mdiff+0x88>
 800c314:	1b33      	subs	r3, r6, r4
 800c316:	3b15      	subs	r3, #21
 800c318:	f023 0303 	bic.w	r3, r3, #3
 800c31c:	3415      	adds	r4, #21
 800c31e:	3304      	adds	r3, #4
 800c320:	42a6      	cmp	r6, r4
 800c322:	bf38      	it	cc
 800c324:	2304      	movcc	r3, #4
 800c326:	441d      	add	r5, r3
 800c328:	445b      	add	r3, fp
 800c32a:	461e      	mov	r6, r3
 800c32c:	462c      	mov	r4, r5
 800c32e:	4544      	cmp	r4, r8
 800c330:	d30e      	bcc.n	800c350 <__mdiff+0xf8>
 800c332:	f108 0103 	add.w	r1, r8, #3
 800c336:	1b49      	subs	r1, r1, r5
 800c338:	f021 0103 	bic.w	r1, r1, #3
 800c33c:	3d03      	subs	r5, #3
 800c33e:	45a8      	cmp	r8, r5
 800c340:	bf38      	it	cc
 800c342:	2100      	movcc	r1, #0
 800c344:	440b      	add	r3, r1
 800c346:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c34a:	b191      	cbz	r1, 800c372 <__mdiff+0x11a>
 800c34c:	6117      	str	r7, [r2, #16]
 800c34e:	e79d      	b.n	800c28c <__mdiff+0x34>
 800c350:	f854 1b04 	ldr.w	r1, [r4], #4
 800c354:	46e6      	mov	lr, ip
 800c356:	0c08      	lsrs	r0, r1, #16
 800c358:	fa1c fc81 	uxtah	ip, ip, r1
 800c35c:	4471      	add	r1, lr
 800c35e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c362:	b289      	uxth	r1, r1
 800c364:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c368:	f846 1b04 	str.w	r1, [r6], #4
 800c36c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c370:	e7dd      	b.n	800c32e <__mdiff+0xd6>
 800c372:	3f01      	subs	r7, #1
 800c374:	e7e7      	b.n	800c346 <__mdiff+0xee>
 800c376:	bf00      	nop
 800c378:	0800cf60 	.word	0x0800cf60
 800c37c:	0800cf71 	.word	0x0800cf71

0800c380 <__d2b>:
 800c380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c384:	460f      	mov	r7, r1
 800c386:	2101      	movs	r1, #1
 800c388:	ec59 8b10 	vmov	r8, r9, d0
 800c38c:	4616      	mov	r6, r2
 800c38e:	f7ff fcd5 	bl	800bd3c <_Balloc>
 800c392:	4604      	mov	r4, r0
 800c394:	b930      	cbnz	r0, 800c3a4 <__d2b+0x24>
 800c396:	4602      	mov	r2, r0
 800c398:	4b23      	ldr	r3, [pc, #140]	@ (800c428 <__d2b+0xa8>)
 800c39a:	4824      	ldr	r0, [pc, #144]	@ (800c42c <__d2b+0xac>)
 800c39c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c3a0:	f000 fafc 	bl	800c99c <__assert_func>
 800c3a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3ac:	b10d      	cbz	r5, 800c3b2 <__d2b+0x32>
 800c3ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3b2:	9301      	str	r3, [sp, #4]
 800c3b4:	f1b8 0300 	subs.w	r3, r8, #0
 800c3b8:	d023      	beq.n	800c402 <__d2b+0x82>
 800c3ba:	4668      	mov	r0, sp
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	f7ff fd84 	bl	800beca <__lo0bits>
 800c3c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c3c6:	b1d0      	cbz	r0, 800c3fe <__d2b+0x7e>
 800c3c8:	f1c0 0320 	rsb	r3, r0, #32
 800c3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d0:	430b      	orrs	r3, r1
 800c3d2:	40c2      	lsrs	r2, r0
 800c3d4:	6163      	str	r3, [r4, #20]
 800c3d6:	9201      	str	r2, [sp, #4]
 800c3d8:	9b01      	ldr	r3, [sp, #4]
 800c3da:	61a3      	str	r3, [r4, #24]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	bf0c      	ite	eq
 800c3e0:	2201      	moveq	r2, #1
 800c3e2:	2202      	movne	r2, #2
 800c3e4:	6122      	str	r2, [r4, #16]
 800c3e6:	b1a5      	cbz	r5, 800c412 <__d2b+0x92>
 800c3e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3ec:	4405      	add	r5, r0
 800c3ee:	603d      	str	r5, [r7, #0]
 800c3f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c3f4:	6030      	str	r0, [r6, #0]
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	b003      	add	sp, #12
 800c3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3fe:	6161      	str	r1, [r4, #20]
 800c400:	e7ea      	b.n	800c3d8 <__d2b+0x58>
 800c402:	a801      	add	r0, sp, #4
 800c404:	f7ff fd61 	bl	800beca <__lo0bits>
 800c408:	9b01      	ldr	r3, [sp, #4]
 800c40a:	6163      	str	r3, [r4, #20]
 800c40c:	3020      	adds	r0, #32
 800c40e:	2201      	movs	r2, #1
 800c410:	e7e8      	b.n	800c3e4 <__d2b+0x64>
 800c412:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c416:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c41a:	6038      	str	r0, [r7, #0]
 800c41c:	6918      	ldr	r0, [r3, #16]
 800c41e:	f7ff fd35 	bl	800be8c <__hi0bits>
 800c422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c426:	e7e5      	b.n	800c3f4 <__d2b+0x74>
 800c428:	0800cf60 	.word	0x0800cf60
 800c42c:	0800cf71 	.word	0x0800cf71

0800c430 <__sfputc_r>:
 800c430:	6893      	ldr	r3, [r2, #8]
 800c432:	3b01      	subs	r3, #1
 800c434:	2b00      	cmp	r3, #0
 800c436:	b410      	push	{r4}
 800c438:	6093      	str	r3, [r2, #8]
 800c43a:	da08      	bge.n	800c44e <__sfputc_r+0x1e>
 800c43c:	6994      	ldr	r4, [r2, #24]
 800c43e:	42a3      	cmp	r3, r4
 800c440:	db01      	blt.n	800c446 <__sfputc_r+0x16>
 800c442:	290a      	cmp	r1, #10
 800c444:	d103      	bne.n	800c44e <__sfputc_r+0x1e>
 800c446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c44a:	f7fe bc6c 	b.w	800ad26 <__swbuf_r>
 800c44e:	6813      	ldr	r3, [r2, #0]
 800c450:	1c58      	adds	r0, r3, #1
 800c452:	6010      	str	r0, [r2, #0]
 800c454:	7019      	strb	r1, [r3, #0]
 800c456:	4608      	mov	r0, r1
 800c458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <__sfputs_r>:
 800c45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	4614      	mov	r4, r2
 800c466:	18d5      	adds	r5, r2, r3
 800c468:	42ac      	cmp	r4, r5
 800c46a:	d101      	bne.n	800c470 <__sfputs_r+0x12>
 800c46c:	2000      	movs	r0, #0
 800c46e:	e007      	b.n	800c480 <__sfputs_r+0x22>
 800c470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c474:	463a      	mov	r2, r7
 800c476:	4630      	mov	r0, r6
 800c478:	f7ff ffda 	bl	800c430 <__sfputc_r>
 800c47c:	1c43      	adds	r3, r0, #1
 800c47e:	d1f3      	bne.n	800c468 <__sfputs_r+0xa>
 800c480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c484 <_vfiprintf_r>:
 800c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	460d      	mov	r5, r1
 800c48a:	b09d      	sub	sp, #116	@ 0x74
 800c48c:	4614      	mov	r4, r2
 800c48e:	4698      	mov	r8, r3
 800c490:	4606      	mov	r6, r0
 800c492:	b118      	cbz	r0, 800c49c <_vfiprintf_r+0x18>
 800c494:	6a03      	ldr	r3, [r0, #32]
 800c496:	b90b      	cbnz	r3, 800c49c <_vfiprintf_r+0x18>
 800c498:	f7fe fb54 	bl	800ab44 <__sinit>
 800c49c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c49e:	07d9      	lsls	r1, r3, #31
 800c4a0:	d405      	bmi.n	800c4ae <_vfiprintf_r+0x2a>
 800c4a2:	89ab      	ldrh	r3, [r5, #12]
 800c4a4:	059a      	lsls	r2, r3, #22
 800c4a6:	d402      	bmi.n	800c4ae <_vfiprintf_r+0x2a>
 800c4a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4aa:	f7fe fd4e 	bl	800af4a <__retarget_lock_acquire_recursive>
 800c4ae:	89ab      	ldrh	r3, [r5, #12]
 800c4b0:	071b      	lsls	r3, r3, #28
 800c4b2:	d501      	bpl.n	800c4b8 <_vfiprintf_r+0x34>
 800c4b4:	692b      	ldr	r3, [r5, #16]
 800c4b6:	b99b      	cbnz	r3, 800c4e0 <_vfiprintf_r+0x5c>
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7fe fc72 	bl	800ada4 <__swsetup_r>
 800c4c0:	b170      	cbz	r0, 800c4e0 <_vfiprintf_r+0x5c>
 800c4c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4c4:	07dc      	lsls	r4, r3, #31
 800c4c6:	d504      	bpl.n	800c4d2 <_vfiprintf_r+0x4e>
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4cc:	b01d      	add	sp, #116	@ 0x74
 800c4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d2:	89ab      	ldrh	r3, [r5, #12]
 800c4d4:	0598      	lsls	r0, r3, #22
 800c4d6:	d4f7      	bmi.n	800c4c8 <_vfiprintf_r+0x44>
 800c4d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4da:	f7fe fd37 	bl	800af4c <__retarget_lock_release_recursive>
 800c4de:	e7f3      	b.n	800c4c8 <_vfiprintf_r+0x44>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4e4:	2320      	movs	r3, #32
 800c4e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4ee:	2330      	movs	r3, #48	@ 0x30
 800c4f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c6a0 <_vfiprintf_r+0x21c>
 800c4f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4f8:	f04f 0901 	mov.w	r9, #1
 800c4fc:	4623      	mov	r3, r4
 800c4fe:	469a      	mov	sl, r3
 800c500:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c504:	b10a      	cbz	r2, 800c50a <_vfiprintf_r+0x86>
 800c506:	2a25      	cmp	r2, #37	@ 0x25
 800c508:	d1f9      	bne.n	800c4fe <_vfiprintf_r+0x7a>
 800c50a:	ebba 0b04 	subs.w	fp, sl, r4
 800c50e:	d00b      	beq.n	800c528 <_vfiprintf_r+0xa4>
 800c510:	465b      	mov	r3, fp
 800c512:	4622      	mov	r2, r4
 800c514:	4629      	mov	r1, r5
 800c516:	4630      	mov	r0, r6
 800c518:	f7ff ffa1 	bl	800c45e <__sfputs_r>
 800c51c:	3001      	adds	r0, #1
 800c51e:	f000 80a7 	beq.w	800c670 <_vfiprintf_r+0x1ec>
 800c522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c524:	445a      	add	r2, fp
 800c526:	9209      	str	r2, [sp, #36]	@ 0x24
 800c528:	f89a 3000 	ldrb.w	r3, [sl]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 809f 	beq.w	800c670 <_vfiprintf_r+0x1ec>
 800c532:	2300      	movs	r3, #0
 800c534:	f04f 32ff 	mov.w	r2, #4294967295
 800c538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c53c:	f10a 0a01 	add.w	sl, sl, #1
 800c540:	9304      	str	r3, [sp, #16]
 800c542:	9307      	str	r3, [sp, #28]
 800c544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c548:	931a      	str	r3, [sp, #104]	@ 0x68
 800c54a:	4654      	mov	r4, sl
 800c54c:	2205      	movs	r2, #5
 800c54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c552:	4853      	ldr	r0, [pc, #332]	@ (800c6a0 <_vfiprintf_r+0x21c>)
 800c554:	f7f3 fedc 	bl	8000310 <memchr>
 800c558:	9a04      	ldr	r2, [sp, #16]
 800c55a:	b9d8      	cbnz	r0, 800c594 <_vfiprintf_r+0x110>
 800c55c:	06d1      	lsls	r1, r2, #27
 800c55e:	bf44      	itt	mi
 800c560:	2320      	movmi	r3, #32
 800c562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c566:	0713      	lsls	r3, r2, #28
 800c568:	bf44      	itt	mi
 800c56a:	232b      	movmi	r3, #43	@ 0x2b
 800c56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c570:	f89a 3000 	ldrb.w	r3, [sl]
 800c574:	2b2a      	cmp	r3, #42	@ 0x2a
 800c576:	d015      	beq.n	800c5a4 <_vfiprintf_r+0x120>
 800c578:	9a07      	ldr	r2, [sp, #28]
 800c57a:	4654      	mov	r4, sl
 800c57c:	2000      	movs	r0, #0
 800c57e:	f04f 0c0a 	mov.w	ip, #10
 800c582:	4621      	mov	r1, r4
 800c584:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c588:	3b30      	subs	r3, #48	@ 0x30
 800c58a:	2b09      	cmp	r3, #9
 800c58c:	d94b      	bls.n	800c626 <_vfiprintf_r+0x1a2>
 800c58e:	b1b0      	cbz	r0, 800c5be <_vfiprintf_r+0x13a>
 800c590:	9207      	str	r2, [sp, #28]
 800c592:	e014      	b.n	800c5be <_vfiprintf_r+0x13a>
 800c594:	eba0 0308 	sub.w	r3, r0, r8
 800c598:	fa09 f303 	lsl.w	r3, r9, r3
 800c59c:	4313      	orrs	r3, r2
 800c59e:	9304      	str	r3, [sp, #16]
 800c5a0:	46a2      	mov	sl, r4
 800c5a2:	e7d2      	b.n	800c54a <_vfiprintf_r+0xc6>
 800c5a4:	9b03      	ldr	r3, [sp, #12]
 800c5a6:	1d19      	adds	r1, r3, #4
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	9103      	str	r1, [sp, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	bfbb      	ittet	lt
 800c5b0:	425b      	neglt	r3, r3
 800c5b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5b6:	9307      	strge	r3, [sp, #28]
 800c5b8:	9307      	strlt	r3, [sp, #28]
 800c5ba:	bfb8      	it	lt
 800c5bc:	9204      	strlt	r2, [sp, #16]
 800c5be:	7823      	ldrb	r3, [r4, #0]
 800c5c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5c2:	d10a      	bne.n	800c5da <_vfiprintf_r+0x156>
 800c5c4:	7863      	ldrb	r3, [r4, #1]
 800c5c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5c8:	d132      	bne.n	800c630 <_vfiprintf_r+0x1ac>
 800c5ca:	9b03      	ldr	r3, [sp, #12]
 800c5cc:	1d1a      	adds	r2, r3, #4
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	9203      	str	r2, [sp, #12]
 800c5d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5d6:	3402      	adds	r4, #2
 800c5d8:	9305      	str	r3, [sp, #20]
 800c5da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c6b0 <_vfiprintf_r+0x22c>
 800c5de:	7821      	ldrb	r1, [r4, #0]
 800c5e0:	2203      	movs	r2, #3
 800c5e2:	4650      	mov	r0, sl
 800c5e4:	f7f3 fe94 	bl	8000310 <memchr>
 800c5e8:	b138      	cbz	r0, 800c5fa <_vfiprintf_r+0x176>
 800c5ea:	9b04      	ldr	r3, [sp, #16]
 800c5ec:	eba0 000a 	sub.w	r0, r0, sl
 800c5f0:	2240      	movs	r2, #64	@ 0x40
 800c5f2:	4082      	lsls	r2, r0
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	3401      	adds	r4, #1
 800c5f8:	9304      	str	r3, [sp, #16]
 800c5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5fe:	4829      	ldr	r0, [pc, #164]	@ (800c6a4 <_vfiprintf_r+0x220>)
 800c600:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c604:	2206      	movs	r2, #6
 800c606:	f7f3 fe83 	bl	8000310 <memchr>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d03f      	beq.n	800c68e <_vfiprintf_r+0x20a>
 800c60e:	4b26      	ldr	r3, [pc, #152]	@ (800c6a8 <_vfiprintf_r+0x224>)
 800c610:	bb1b      	cbnz	r3, 800c65a <_vfiprintf_r+0x1d6>
 800c612:	9b03      	ldr	r3, [sp, #12]
 800c614:	3307      	adds	r3, #7
 800c616:	f023 0307 	bic.w	r3, r3, #7
 800c61a:	3308      	adds	r3, #8
 800c61c:	9303      	str	r3, [sp, #12]
 800c61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c620:	443b      	add	r3, r7
 800c622:	9309      	str	r3, [sp, #36]	@ 0x24
 800c624:	e76a      	b.n	800c4fc <_vfiprintf_r+0x78>
 800c626:	fb0c 3202 	mla	r2, ip, r2, r3
 800c62a:	460c      	mov	r4, r1
 800c62c:	2001      	movs	r0, #1
 800c62e:	e7a8      	b.n	800c582 <_vfiprintf_r+0xfe>
 800c630:	2300      	movs	r3, #0
 800c632:	3401      	adds	r4, #1
 800c634:	9305      	str	r3, [sp, #20]
 800c636:	4619      	mov	r1, r3
 800c638:	f04f 0c0a 	mov.w	ip, #10
 800c63c:	4620      	mov	r0, r4
 800c63e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c642:	3a30      	subs	r2, #48	@ 0x30
 800c644:	2a09      	cmp	r2, #9
 800c646:	d903      	bls.n	800c650 <_vfiprintf_r+0x1cc>
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d0c6      	beq.n	800c5da <_vfiprintf_r+0x156>
 800c64c:	9105      	str	r1, [sp, #20]
 800c64e:	e7c4      	b.n	800c5da <_vfiprintf_r+0x156>
 800c650:	fb0c 2101 	mla	r1, ip, r1, r2
 800c654:	4604      	mov	r4, r0
 800c656:	2301      	movs	r3, #1
 800c658:	e7f0      	b.n	800c63c <_vfiprintf_r+0x1b8>
 800c65a:	ab03      	add	r3, sp, #12
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	462a      	mov	r2, r5
 800c660:	4b12      	ldr	r3, [pc, #72]	@ (800c6ac <_vfiprintf_r+0x228>)
 800c662:	a904      	add	r1, sp, #16
 800c664:	4630      	mov	r0, r6
 800c666:	f7fd fe3b 	bl	800a2e0 <_printf_float>
 800c66a:	4607      	mov	r7, r0
 800c66c:	1c78      	adds	r0, r7, #1
 800c66e:	d1d6      	bne.n	800c61e <_vfiprintf_r+0x19a>
 800c670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c672:	07d9      	lsls	r1, r3, #31
 800c674:	d405      	bmi.n	800c682 <_vfiprintf_r+0x1fe>
 800c676:	89ab      	ldrh	r3, [r5, #12]
 800c678:	059a      	lsls	r2, r3, #22
 800c67a:	d402      	bmi.n	800c682 <_vfiprintf_r+0x1fe>
 800c67c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c67e:	f7fe fc65 	bl	800af4c <__retarget_lock_release_recursive>
 800c682:	89ab      	ldrh	r3, [r5, #12]
 800c684:	065b      	lsls	r3, r3, #25
 800c686:	f53f af1f 	bmi.w	800c4c8 <_vfiprintf_r+0x44>
 800c68a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c68c:	e71e      	b.n	800c4cc <_vfiprintf_r+0x48>
 800c68e:	ab03      	add	r3, sp, #12
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	462a      	mov	r2, r5
 800c694:	4b05      	ldr	r3, [pc, #20]	@ (800c6ac <_vfiprintf_r+0x228>)
 800c696:	a904      	add	r1, sp, #16
 800c698:	4630      	mov	r0, r6
 800c69a:	f7fe f8a9 	bl	800a7f0 <_printf_i>
 800c69e:	e7e4      	b.n	800c66a <_vfiprintf_r+0x1e6>
 800c6a0:	0800cfca 	.word	0x0800cfca
 800c6a4:	0800cfd4 	.word	0x0800cfd4
 800c6a8:	0800a2e1 	.word	0x0800a2e1
 800c6ac:	0800c45f 	.word	0x0800c45f
 800c6b0:	0800cfd0 	.word	0x0800cfd0

0800c6b4 <__sflush_r>:
 800c6b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6bc:	0716      	lsls	r6, r2, #28
 800c6be:	4605      	mov	r5, r0
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	d454      	bmi.n	800c76e <__sflush_r+0xba>
 800c6c4:	684b      	ldr	r3, [r1, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	dc02      	bgt.n	800c6d0 <__sflush_r+0x1c>
 800c6ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dd48      	ble.n	800c762 <__sflush_r+0xae>
 800c6d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6d2:	2e00      	cmp	r6, #0
 800c6d4:	d045      	beq.n	800c762 <__sflush_r+0xae>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6dc:	682f      	ldr	r7, [r5, #0]
 800c6de:	6a21      	ldr	r1, [r4, #32]
 800c6e0:	602b      	str	r3, [r5, #0]
 800c6e2:	d030      	beq.n	800c746 <__sflush_r+0x92>
 800c6e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6e6:	89a3      	ldrh	r3, [r4, #12]
 800c6e8:	0759      	lsls	r1, r3, #29
 800c6ea:	d505      	bpl.n	800c6f8 <__sflush_r+0x44>
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	1ad2      	subs	r2, r2, r3
 800c6f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6f2:	b10b      	cbz	r3, 800c6f8 <__sflush_r+0x44>
 800c6f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6f6:	1ad2      	subs	r2, r2, r3
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6fc:	6a21      	ldr	r1, [r4, #32]
 800c6fe:	4628      	mov	r0, r5
 800c700:	47b0      	blx	r6
 800c702:	1c43      	adds	r3, r0, #1
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	d106      	bne.n	800c716 <__sflush_r+0x62>
 800c708:	6829      	ldr	r1, [r5, #0]
 800c70a:	291d      	cmp	r1, #29
 800c70c:	d82b      	bhi.n	800c766 <__sflush_r+0xb2>
 800c70e:	4a2a      	ldr	r2, [pc, #168]	@ (800c7b8 <__sflush_r+0x104>)
 800c710:	40ca      	lsrs	r2, r1
 800c712:	07d6      	lsls	r6, r2, #31
 800c714:	d527      	bpl.n	800c766 <__sflush_r+0xb2>
 800c716:	2200      	movs	r2, #0
 800c718:	6062      	str	r2, [r4, #4]
 800c71a:	04d9      	lsls	r1, r3, #19
 800c71c:	6922      	ldr	r2, [r4, #16]
 800c71e:	6022      	str	r2, [r4, #0]
 800c720:	d504      	bpl.n	800c72c <__sflush_r+0x78>
 800c722:	1c42      	adds	r2, r0, #1
 800c724:	d101      	bne.n	800c72a <__sflush_r+0x76>
 800c726:	682b      	ldr	r3, [r5, #0]
 800c728:	b903      	cbnz	r3, 800c72c <__sflush_r+0x78>
 800c72a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c72e:	602f      	str	r7, [r5, #0]
 800c730:	b1b9      	cbz	r1, 800c762 <__sflush_r+0xae>
 800c732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c736:	4299      	cmp	r1, r3
 800c738:	d002      	beq.n	800c740 <__sflush_r+0x8c>
 800c73a:	4628      	mov	r0, r5
 800c73c:	f7ff f9fe 	bl	800bb3c <_free_r>
 800c740:	2300      	movs	r3, #0
 800c742:	6363      	str	r3, [r4, #52]	@ 0x34
 800c744:	e00d      	b.n	800c762 <__sflush_r+0xae>
 800c746:	2301      	movs	r3, #1
 800c748:	4628      	mov	r0, r5
 800c74a:	47b0      	blx	r6
 800c74c:	4602      	mov	r2, r0
 800c74e:	1c50      	adds	r0, r2, #1
 800c750:	d1c9      	bne.n	800c6e6 <__sflush_r+0x32>
 800c752:	682b      	ldr	r3, [r5, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d0c6      	beq.n	800c6e6 <__sflush_r+0x32>
 800c758:	2b1d      	cmp	r3, #29
 800c75a:	d001      	beq.n	800c760 <__sflush_r+0xac>
 800c75c:	2b16      	cmp	r3, #22
 800c75e:	d11e      	bne.n	800c79e <__sflush_r+0xea>
 800c760:	602f      	str	r7, [r5, #0]
 800c762:	2000      	movs	r0, #0
 800c764:	e022      	b.n	800c7ac <__sflush_r+0xf8>
 800c766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c76a:	b21b      	sxth	r3, r3
 800c76c:	e01b      	b.n	800c7a6 <__sflush_r+0xf2>
 800c76e:	690f      	ldr	r7, [r1, #16]
 800c770:	2f00      	cmp	r7, #0
 800c772:	d0f6      	beq.n	800c762 <__sflush_r+0xae>
 800c774:	0793      	lsls	r3, r2, #30
 800c776:	680e      	ldr	r6, [r1, #0]
 800c778:	bf08      	it	eq
 800c77a:	694b      	ldreq	r3, [r1, #20]
 800c77c:	600f      	str	r7, [r1, #0]
 800c77e:	bf18      	it	ne
 800c780:	2300      	movne	r3, #0
 800c782:	eba6 0807 	sub.w	r8, r6, r7
 800c786:	608b      	str	r3, [r1, #8]
 800c788:	f1b8 0f00 	cmp.w	r8, #0
 800c78c:	dde9      	ble.n	800c762 <__sflush_r+0xae>
 800c78e:	6a21      	ldr	r1, [r4, #32]
 800c790:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c792:	4643      	mov	r3, r8
 800c794:	463a      	mov	r2, r7
 800c796:	4628      	mov	r0, r5
 800c798:	47b0      	blx	r6
 800c79a:	2800      	cmp	r0, #0
 800c79c:	dc08      	bgt.n	800c7b0 <__sflush_r+0xfc>
 800c79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7a6:	81a3      	strh	r3, [r4, #12]
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b0:	4407      	add	r7, r0
 800c7b2:	eba8 0800 	sub.w	r8, r8, r0
 800c7b6:	e7e7      	b.n	800c788 <__sflush_r+0xd4>
 800c7b8:	20400001 	.word	0x20400001

0800c7bc <_fflush_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	690b      	ldr	r3, [r1, #16]
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	b913      	cbnz	r3, 800c7cc <_fflush_r+0x10>
 800c7c6:	2500      	movs	r5, #0
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	b118      	cbz	r0, 800c7d6 <_fflush_r+0x1a>
 800c7ce:	6a03      	ldr	r3, [r0, #32]
 800c7d0:	b90b      	cbnz	r3, 800c7d6 <_fflush_r+0x1a>
 800c7d2:	f7fe f9b7 	bl	800ab44 <__sinit>
 800c7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d0f3      	beq.n	800c7c6 <_fflush_r+0xa>
 800c7de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7e0:	07d0      	lsls	r0, r2, #31
 800c7e2:	d404      	bmi.n	800c7ee <_fflush_r+0x32>
 800c7e4:	0599      	lsls	r1, r3, #22
 800c7e6:	d402      	bmi.n	800c7ee <_fflush_r+0x32>
 800c7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7ea:	f7fe fbae 	bl	800af4a <__retarget_lock_acquire_recursive>
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	f7ff ff5f 	bl	800c6b4 <__sflush_r>
 800c7f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7f8:	07da      	lsls	r2, r3, #31
 800c7fa:	4605      	mov	r5, r0
 800c7fc:	d4e4      	bmi.n	800c7c8 <_fflush_r+0xc>
 800c7fe:	89a3      	ldrh	r3, [r4, #12]
 800c800:	059b      	lsls	r3, r3, #22
 800c802:	d4e1      	bmi.n	800c7c8 <_fflush_r+0xc>
 800c804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c806:	f7fe fba1 	bl	800af4c <__retarget_lock_release_recursive>
 800c80a:	e7dd      	b.n	800c7c8 <_fflush_r+0xc>

0800c80c <__swhatbuf_r>:
 800c80c:	b570      	push	{r4, r5, r6, lr}
 800c80e:	460c      	mov	r4, r1
 800c810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c814:	2900      	cmp	r1, #0
 800c816:	b096      	sub	sp, #88	@ 0x58
 800c818:	4615      	mov	r5, r2
 800c81a:	461e      	mov	r6, r3
 800c81c:	da0d      	bge.n	800c83a <__swhatbuf_r+0x2e>
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c824:	f04f 0100 	mov.w	r1, #0
 800c828:	bf14      	ite	ne
 800c82a:	2340      	movne	r3, #64	@ 0x40
 800c82c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c830:	2000      	movs	r0, #0
 800c832:	6031      	str	r1, [r6, #0]
 800c834:	602b      	str	r3, [r5, #0]
 800c836:	b016      	add	sp, #88	@ 0x58
 800c838:	bd70      	pop	{r4, r5, r6, pc}
 800c83a:	466a      	mov	r2, sp
 800c83c:	f000 f87c 	bl	800c938 <_fstat_r>
 800c840:	2800      	cmp	r0, #0
 800c842:	dbec      	blt.n	800c81e <__swhatbuf_r+0x12>
 800c844:	9901      	ldr	r1, [sp, #4]
 800c846:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c84a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c84e:	4259      	negs	r1, r3
 800c850:	4159      	adcs	r1, r3
 800c852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c856:	e7eb      	b.n	800c830 <__swhatbuf_r+0x24>

0800c858 <__smakebuf_r>:
 800c858:	898b      	ldrh	r3, [r1, #12]
 800c85a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c85c:	079d      	lsls	r5, r3, #30
 800c85e:	4606      	mov	r6, r0
 800c860:	460c      	mov	r4, r1
 800c862:	d507      	bpl.n	800c874 <__smakebuf_r+0x1c>
 800c864:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	6123      	str	r3, [r4, #16]
 800c86c:	2301      	movs	r3, #1
 800c86e:	6163      	str	r3, [r4, #20]
 800c870:	b003      	add	sp, #12
 800c872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c874:	ab01      	add	r3, sp, #4
 800c876:	466a      	mov	r2, sp
 800c878:	f7ff ffc8 	bl	800c80c <__swhatbuf_r>
 800c87c:	9f00      	ldr	r7, [sp, #0]
 800c87e:	4605      	mov	r5, r0
 800c880:	4639      	mov	r1, r7
 800c882:	4630      	mov	r0, r6
 800c884:	f7ff f9ce 	bl	800bc24 <_malloc_r>
 800c888:	b948      	cbnz	r0, 800c89e <__smakebuf_r+0x46>
 800c88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c88e:	059a      	lsls	r2, r3, #22
 800c890:	d4ee      	bmi.n	800c870 <__smakebuf_r+0x18>
 800c892:	f023 0303 	bic.w	r3, r3, #3
 800c896:	f043 0302 	orr.w	r3, r3, #2
 800c89a:	81a3      	strh	r3, [r4, #12]
 800c89c:	e7e2      	b.n	800c864 <__smakebuf_r+0xc>
 800c89e:	89a3      	ldrh	r3, [r4, #12]
 800c8a0:	6020      	str	r0, [r4, #0]
 800c8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8a6:	81a3      	strh	r3, [r4, #12]
 800c8a8:	9b01      	ldr	r3, [sp, #4]
 800c8aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c8ae:	b15b      	cbz	r3, 800c8c8 <__smakebuf_r+0x70>
 800c8b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f000 f851 	bl	800c95c <_isatty_r>
 800c8ba:	b128      	cbz	r0, 800c8c8 <__smakebuf_r+0x70>
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	f023 0303 	bic.w	r3, r3, #3
 800c8c2:	f043 0301 	orr.w	r3, r3, #1
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	89a3      	ldrh	r3, [r4, #12]
 800c8ca:	431d      	orrs	r5, r3
 800c8cc:	81a5      	strh	r5, [r4, #12]
 800c8ce:	e7cf      	b.n	800c870 <__smakebuf_r+0x18>

0800c8d0 <_putc_r>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	460d      	mov	r5, r1
 800c8d4:	4614      	mov	r4, r2
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	b118      	cbz	r0, 800c8e2 <_putc_r+0x12>
 800c8da:	6a03      	ldr	r3, [r0, #32]
 800c8dc:	b90b      	cbnz	r3, 800c8e2 <_putc_r+0x12>
 800c8de:	f7fe f931 	bl	800ab44 <__sinit>
 800c8e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8e4:	07d8      	lsls	r0, r3, #31
 800c8e6:	d405      	bmi.n	800c8f4 <_putc_r+0x24>
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	0599      	lsls	r1, r3, #22
 800c8ec:	d402      	bmi.n	800c8f4 <_putc_r+0x24>
 800c8ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8f0:	f7fe fb2b 	bl	800af4a <__retarget_lock_acquire_recursive>
 800c8f4:	68a3      	ldr	r3, [r4, #8]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	60a3      	str	r3, [r4, #8]
 800c8fc:	da05      	bge.n	800c90a <_putc_r+0x3a>
 800c8fe:	69a2      	ldr	r2, [r4, #24]
 800c900:	4293      	cmp	r3, r2
 800c902:	db12      	blt.n	800c92a <_putc_r+0x5a>
 800c904:	b2eb      	uxtb	r3, r5
 800c906:	2b0a      	cmp	r3, #10
 800c908:	d00f      	beq.n	800c92a <_putc_r+0x5a>
 800c90a:	6823      	ldr	r3, [r4, #0]
 800c90c:	1c5a      	adds	r2, r3, #1
 800c90e:	6022      	str	r2, [r4, #0]
 800c910:	701d      	strb	r5, [r3, #0]
 800c912:	b2ed      	uxtb	r5, r5
 800c914:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c916:	07da      	lsls	r2, r3, #31
 800c918:	d405      	bmi.n	800c926 <_putc_r+0x56>
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	059b      	lsls	r3, r3, #22
 800c91e:	d402      	bmi.n	800c926 <_putc_r+0x56>
 800c920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c922:	f7fe fb13 	bl	800af4c <__retarget_lock_release_recursive>
 800c926:	4628      	mov	r0, r5
 800c928:	bd70      	pop	{r4, r5, r6, pc}
 800c92a:	4629      	mov	r1, r5
 800c92c:	4622      	mov	r2, r4
 800c92e:	4630      	mov	r0, r6
 800c930:	f7fe f9f9 	bl	800ad26 <__swbuf_r>
 800c934:	4605      	mov	r5, r0
 800c936:	e7ed      	b.n	800c914 <_putc_r+0x44>

0800c938 <_fstat_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4d07      	ldr	r5, [pc, #28]	@ (800c958 <_fstat_r+0x20>)
 800c93c:	2300      	movs	r3, #0
 800c93e:	4604      	mov	r4, r0
 800c940:	4608      	mov	r0, r1
 800c942:	4611      	mov	r1, r2
 800c944:	602b      	str	r3, [r5, #0]
 800c946:	f7f4 fedf 	bl	8001708 <_fstat>
 800c94a:	1c43      	adds	r3, r0, #1
 800c94c:	d102      	bne.n	800c954 <_fstat_r+0x1c>
 800c94e:	682b      	ldr	r3, [r5, #0]
 800c950:	b103      	cbz	r3, 800c954 <_fstat_r+0x1c>
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	bd38      	pop	{r3, r4, r5, pc}
 800c956:	bf00      	nop
 800c958:	240007ac 	.word	0x240007ac

0800c95c <_isatty_r>:
 800c95c:	b538      	push	{r3, r4, r5, lr}
 800c95e:	4d06      	ldr	r5, [pc, #24]	@ (800c978 <_isatty_r+0x1c>)
 800c960:	2300      	movs	r3, #0
 800c962:	4604      	mov	r4, r0
 800c964:	4608      	mov	r0, r1
 800c966:	602b      	str	r3, [r5, #0]
 800c968:	f7f4 fede 	bl	8001728 <_isatty>
 800c96c:	1c43      	adds	r3, r0, #1
 800c96e:	d102      	bne.n	800c976 <_isatty_r+0x1a>
 800c970:	682b      	ldr	r3, [r5, #0]
 800c972:	b103      	cbz	r3, 800c976 <_isatty_r+0x1a>
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	240007ac 	.word	0x240007ac

0800c97c <_sbrk_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4d06      	ldr	r5, [pc, #24]	@ (800c998 <_sbrk_r+0x1c>)
 800c980:	2300      	movs	r3, #0
 800c982:	4604      	mov	r4, r0
 800c984:	4608      	mov	r0, r1
 800c986:	602b      	str	r3, [r5, #0]
 800c988:	f7f4 fee6 	bl	8001758 <_sbrk>
 800c98c:	1c43      	adds	r3, r0, #1
 800c98e:	d102      	bne.n	800c996 <_sbrk_r+0x1a>
 800c990:	682b      	ldr	r3, [r5, #0]
 800c992:	b103      	cbz	r3, 800c996 <_sbrk_r+0x1a>
 800c994:	6023      	str	r3, [r4, #0]
 800c996:	bd38      	pop	{r3, r4, r5, pc}
 800c998:	240007ac 	.word	0x240007ac

0800c99c <__assert_func>:
 800c99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c99e:	4614      	mov	r4, r2
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	4b09      	ldr	r3, [pc, #36]	@ (800c9c8 <__assert_func+0x2c>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	68d8      	ldr	r0, [r3, #12]
 800c9aa:	b14c      	cbz	r4, 800c9c0 <__assert_func+0x24>
 800c9ac:	4b07      	ldr	r3, [pc, #28]	@ (800c9cc <__assert_func+0x30>)
 800c9ae:	9100      	str	r1, [sp, #0]
 800c9b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9b4:	4906      	ldr	r1, [pc, #24]	@ (800c9d0 <__assert_func+0x34>)
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	f000 f842 	bl	800ca40 <fiprintf>
 800c9bc:	f000 f852 	bl	800ca64 <abort>
 800c9c0:	4b04      	ldr	r3, [pc, #16]	@ (800c9d4 <__assert_func+0x38>)
 800c9c2:	461c      	mov	r4, r3
 800c9c4:	e7f3      	b.n	800c9ae <__assert_func+0x12>
 800c9c6:	bf00      	nop
 800c9c8:	24000024 	.word	0x24000024
 800c9cc:	0800cfe5 	.word	0x0800cfe5
 800c9d0:	0800cff2 	.word	0x0800cff2
 800c9d4:	0800d020 	.word	0x0800d020

0800c9d8 <_calloc_r>:
 800c9d8:	b570      	push	{r4, r5, r6, lr}
 800c9da:	fba1 5402 	umull	r5, r4, r1, r2
 800c9de:	b934      	cbnz	r4, 800c9ee <_calloc_r+0x16>
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	f7ff f91f 	bl	800bc24 <_malloc_r>
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	b928      	cbnz	r0, 800c9f6 <_calloc_r+0x1e>
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	bd70      	pop	{r4, r5, r6, pc}
 800c9ee:	220c      	movs	r2, #12
 800c9f0:	6002      	str	r2, [r0, #0]
 800c9f2:	2600      	movs	r6, #0
 800c9f4:	e7f9      	b.n	800c9ea <_calloc_r+0x12>
 800c9f6:	462a      	mov	r2, r5
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	f7fe fa29 	bl	800ae50 <memset>
 800c9fe:	e7f4      	b.n	800c9ea <_calloc_r+0x12>

0800ca00 <__ascii_mbtowc>:
 800ca00:	b082      	sub	sp, #8
 800ca02:	b901      	cbnz	r1, 800ca06 <__ascii_mbtowc+0x6>
 800ca04:	a901      	add	r1, sp, #4
 800ca06:	b142      	cbz	r2, 800ca1a <__ascii_mbtowc+0x1a>
 800ca08:	b14b      	cbz	r3, 800ca1e <__ascii_mbtowc+0x1e>
 800ca0a:	7813      	ldrb	r3, [r2, #0]
 800ca0c:	600b      	str	r3, [r1, #0]
 800ca0e:	7812      	ldrb	r2, [r2, #0]
 800ca10:	1e10      	subs	r0, r2, #0
 800ca12:	bf18      	it	ne
 800ca14:	2001      	movne	r0, #1
 800ca16:	b002      	add	sp, #8
 800ca18:	4770      	bx	lr
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	e7fb      	b.n	800ca16 <__ascii_mbtowc+0x16>
 800ca1e:	f06f 0001 	mvn.w	r0, #1
 800ca22:	e7f8      	b.n	800ca16 <__ascii_mbtowc+0x16>

0800ca24 <__ascii_wctomb>:
 800ca24:	4603      	mov	r3, r0
 800ca26:	4608      	mov	r0, r1
 800ca28:	b141      	cbz	r1, 800ca3c <__ascii_wctomb+0x18>
 800ca2a:	2aff      	cmp	r2, #255	@ 0xff
 800ca2c:	d904      	bls.n	800ca38 <__ascii_wctomb+0x14>
 800ca2e:	228a      	movs	r2, #138	@ 0x8a
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	f04f 30ff 	mov.w	r0, #4294967295
 800ca36:	4770      	bx	lr
 800ca38:	700a      	strb	r2, [r1, #0]
 800ca3a:	2001      	movs	r0, #1
 800ca3c:	4770      	bx	lr
	...

0800ca40 <fiprintf>:
 800ca40:	b40e      	push	{r1, r2, r3}
 800ca42:	b503      	push	{r0, r1, lr}
 800ca44:	4601      	mov	r1, r0
 800ca46:	ab03      	add	r3, sp, #12
 800ca48:	4805      	ldr	r0, [pc, #20]	@ (800ca60 <fiprintf+0x20>)
 800ca4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca4e:	6800      	ldr	r0, [r0, #0]
 800ca50:	9301      	str	r3, [sp, #4]
 800ca52:	f7ff fd17 	bl	800c484 <_vfiprintf_r>
 800ca56:	b002      	add	sp, #8
 800ca58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca5c:	b003      	add	sp, #12
 800ca5e:	4770      	bx	lr
 800ca60:	24000024 	.word	0x24000024

0800ca64 <abort>:
 800ca64:	b508      	push	{r3, lr}
 800ca66:	2006      	movs	r0, #6
 800ca68:	f000 f82c 	bl	800cac4 <raise>
 800ca6c:	2001      	movs	r0, #1
 800ca6e:	f7f4 fdfb 	bl	8001668 <_exit>

0800ca72 <_raise_r>:
 800ca72:	291f      	cmp	r1, #31
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4605      	mov	r5, r0
 800ca78:	460c      	mov	r4, r1
 800ca7a:	d904      	bls.n	800ca86 <_raise_r+0x14>
 800ca7c:	2316      	movs	r3, #22
 800ca7e:	6003      	str	r3, [r0, #0]
 800ca80:	f04f 30ff 	mov.w	r0, #4294967295
 800ca84:	bd38      	pop	{r3, r4, r5, pc}
 800ca86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca88:	b112      	cbz	r2, 800ca90 <_raise_r+0x1e>
 800ca8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca8e:	b94b      	cbnz	r3, 800caa4 <_raise_r+0x32>
 800ca90:	4628      	mov	r0, r5
 800ca92:	f000 f831 	bl	800caf8 <_getpid_r>
 800ca96:	4622      	mov	r2, r4
 800ca98:	4601      	mov	r1, r0
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caa0:	f000 b818 	b.w	800cad4 <_kill_r>
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d00a      	beq.n	800cabe <_raise_r+0x4c>
 800caa8:	1c59      	adds	r1, r3, #1
 800caaa:	d103      	bne.n	800cab4 <_raise_r+0x42>
 800caac:	2316      	movs	r3, #22
 800caae:	6003      	str	r3, [r0, #0]
 800cab0:	2001      	movs	r0, #1
 800cab2:	e7e7      	b.n	800ca84 <_raise_r+0x12>
 800cab4:	2100      	movs	r1, #0
 800cab6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800caba:	4620      	mov	r0, r4
 800cabc:	4798      	blx	r3
 800cabe:	2000      	movs	r0, #0
 800cac0:	e7e0      	b.n	800ca84 <_raise_r+0x12>
	...

0800cac4 <raise>:
 800cac4:	4b02      	ldr	r3, [pc, #8]	@ (800cad0 <raise+0xc>)
 800cac6:	4601      	mov	r1, r0
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	f7ff bfd2 	b.w	800ca72 <_raise_r>
 800cace:	bf00      	nop
 800cad0:	24000024 	.word	0x24000024

0800cad4 <_kill_r>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4d07      	ldr	r5, [pc, #28]	@ (800caf4 <_kill_r+0x20>)
 800cad8:	2300      	movs	r3, #0
 800cada:	4604      	mov	r4, r0
 800cadc:	4608      	mov	r0, r1
 800cade:	4611      	mov	r1, r2
 800cae0:	602b      	str	r3, [r5, #0]
 800cae2:	f7f4 fdb1 	bl	8001648 <_kill>
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	d102      	bne.n	800caf0 <_kill_r+0x1c>
 800caea:	682b      	ldr	r3, [r5, #0]
 800caec:	b103      	cbz	r3, 800caf0 <_kill_r+0x1c>
 800caee:	6023      	str	r3, [r4, #0]
 800caf0:	bd38      	pop	{r3, r4, r5, pc}
 800caf2:	bf00      	nop
 800caf4:	240007ac 	.word	0x240007ac

0800caf8 <_getpid_r>:
 800caf8:	f7f4 bd9e 	b.w	8001638 <_getpid>

0800cafc <_init>:
 800cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafe:	bf00      	nop
 800cb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb02:	bc08      	pop	{r3}
 800cb04:	469e      	mov	lr, r3
 800cb06:	4770      	bx	lr

0800cb08 <_fini>:
 800cb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0a:	bf00      	nop
 800cb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb0e:	bc08      	pop	{r3}
 800cb10:	469e      	mov	lr, r3
 800cb12:	4770      	bx	lr
