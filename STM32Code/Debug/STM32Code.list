
STM32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b094  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800b368  0800b368  0000c368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b7bc  0800b7bc  0000c7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b7c4  0800b7c4  0000c7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b7c8  0800b7c8  0000c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800b7cc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000338  240001d8  0800b9a4  0000d1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000510  0800b9a4  0000d510  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a256  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fa2  00000000  00000000  0002745c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  0002a400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000103f  00000000  00000000  0002b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034f73  00000000  00000000  0002c8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d0a5  00000000  00000000  00061862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151805  00000000  00000000  0007e907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d010c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066d4  00000000  00000000  001d0150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001d6824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b34c 	.word	0x0800b34c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800b34c 	.word	0x0800b34c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <AS5600_read_angle>:
 */

#include "AS5600.h"
#include "stdint.h"

HAL_StatusTypeDef AS5600_read_angle(I2C_HandleTypeDef *hi2c, float *angle){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
    
    HAL_StatusTypeDef ret ;
    uint8_t angle_buff[2]; // hold the 2 bits from the Raw Angle 
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG, I2C_MEMADD_SIZE_8BIT,angle_buff,2,HAL_MAX_DELAY);//HAL_MAX_DELAY is blockling 
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2302      	movs	r3, #2
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	220c      	movs	r2, #12
 800070a:	216c      	movs	r1, #108	@ 0x6c
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f002 fa23 	bl	8002b58 <HAL_I2C_Mem_Read>
 8000712:	4603      	mov	r3, r0
 8000714:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK){
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <AS5600_read_angle+0x38>
    	handle_error(ret);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f826 	bl	8000770 <handle_error>
    }
    uint16_t raw_angle = (((angle_buff[0]<<8)|angle_buff[1])&0x0FFF);
 8000724:	7a3b      	ldrb	r3, [r7, #8]
 8000726:	b21b      	sxth	r3, r3
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21a      	sxth	r2, r3
 800072c:	7a7b      	ldrb	r3, [r7, #9]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b21b      	sxth	r3, r3
 8000734:	b29b      	uxth	r3, r3
 8000736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073a:	81bb      	strh	r3, [r7, #12]

    *angle = 360.0f*((float)raw_angle/4096.0f);
 800073c:	89bb      	ldrh	r3, [r7, #12]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000746:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000768 <AS5600_read_angle+0x7c>
 800074a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800076c <AS5600_read_angle+0x80>
 8000752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	45800000 	.word	0x45800000
 800076c:	43b40000 	.word	0x43b40000

08000770 <handle_error>:
        printf("No magnet detected or improper alignment\n");
        return 0; // Magnet is not detected
    }
}

void handle_error(HAL_StatusTypeDef status) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d004      	beq.n	800078a <handle_error+0x1a>
        // Implement error handling logic (e.g., log error or reset I²C bus)
        printf("I2C Error: %d\n", status);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4619      	mov	r1, r3
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <handle_error+0x24>)
 8000786:	f008 fe77 	bl	8009478 <iprintf>
    }
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	0800b3ac 	.word	0x0800b3ac

08000798 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2201      	movs	r2, #1
 80007a8:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <__io_putchar+0x20>)
 80007aa:	f006 faff 	bl	8006dac <HAL_UART_Transmit>
    return ch;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	24000328 	.word	0x24000328

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007c2:	f000 faab 	bl	8000d1c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 ffc7 	bl	8001758 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f851 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 fa25 	bl	8000c1c <MX_GPIO_Init>
  MX_TIM1_Init();
 80007d2:	f000 f8eb 	bl	80009ac <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80007d6:	f000 f9d5 	bl	8000b84 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80007da:	f000 f987 	bl	8000aec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007de:	f000 f8a5 	bl	800092c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007e2:	2100      	movs	r1, #0
 80007e4:	4819      	ldr	r0, [pc, #100]	@ (800084c <main+0x90>)
 80007e6:	f005 fb91 	bl	8005f0c <HAL_TIM_PWM_Start>

 volatile float angle;
 printf("turning");
 80007ea:	4819      	ldr	r0, [pc, #100]	@ (8000850 <main+0x94>)
 80007ec:	f008 fe44 	bl	8009478 <iprintf>
 set_servo_angle(&htim1,TIM_CHANNEL_1, 180); // debug
 80007f0:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8000854 <main+0x98>
 80007f4:	2100      	movs	r1, #0
 80007f6:	4815      	ldr	r0, [pc, #84]	@ (800084c <main+0x90>)
 80007f8:	f000 fac2 	bl	8000d80 <set_servo_angle>
 printf("turned now once more");
 80007fc:	4816      	ldr	r0, [pc, #88]	@ (8000858 <main+0x9c>)
 80007fe:	f008 fe3b 	bl	8009478 <iprintf>
 set_servo_angle_gradual(&htim1, TIM_CHANNEL_1,0);
 8000802:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800085c <main+0xa0>
 8000806:	2100      	movs	r1, #0
 8000808:	4810      	ldr	r0, [pc, #64]	@ (800084c <main+0x90>)
 800080a:	f000 fb03 	bl	8000e14 <set_servo_angle_gradual>
 printf("done");
 800080e:	4814      	ldr	r0, [pc, #80]	@ (8000860 <main+0xa4>)
 8000810:	f008 fe32 	bl	8009478 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("hello");
 8000814:	4813      	ldr	r0, [pc, #76]	@ (8000864 <main+0xa8>)
 8000816:	f008 fe2f 	bl	8009478 <iprintf>

	  HAL_StatusTypeDef i2c_status = AS5600_read_angle(&hi2c1, &angle);
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	4812      	ldr	r0, [pc, #72]	@ (8000868 <main+0xac>)
 8000820:	f7ff ff64 	bl	80006ec <AS5600_read_angle>
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
	  if (i2c_status== HAL_OK){
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00b      	beq.n	8000846 <main+0x8a>
		  continue;//printf("the angle is %f", angle);
	  }

	  
    
	  if (i2c_status != HAL_OK) {
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d003      	beq.n	800083c <main+0x80>
	      printf("Error reading angle from AS5600\n");
 8000834:	480d      	ldr	r0, [pc, #52]	@ (800086c <main+0xb0>)
 8000836:	f008 fe87 	bl	8009548 <puts>
	      continue; // Skip to the next iteration
 800083a:	e005      	b.n	8000848 <main+0x8c>
	  }
	  HAL_Delay(500);
 800083c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000840:	f001 f81c 	bl	800187c <HAL_Delay>
 8000844:	e7e6      	b.n	8000814 <main+0x58>
		  continue;//printf("the angle is %f", angle);
 8000846:	bf00      	nop
  {
 8000848:	e7e4      	b.n	8000814 <main+0x58>
 800084a:	bf00      	nop
 800084c:	24000248 	.word	0x24000248
 8000850:	0800b3bc 	.word	0x0800b3bc
 8000854:	43340000 	.word	0x43340000
 8000858:	0800b3c4 	.word	0x0800b3c4
 800085c:	00000000 	.word	0x00000000
 8000860:	0800b3dc 	.word	0x0800b3dc
 8000864:	0800b3e4 	.word	0x0800b3e4
 8000868:	240001f4 	.word	0x240001f4
 800086c:	0800b3ec 	.word	0x0800b3ec

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	@ 0x70
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087a:	224c      	movs	r2, #76	@ 0x4c
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f008 ff42 	bl	8009708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f008 ff3c 	bl	8009708 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000890:	2002      	movs	r0, #2
 8000892:	f002 fd81 	bl	8003398 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <SystemClock_Config+0xb8>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008a2:	4a21      	ldr	r2, [pc, #132]	@ (8000928 <SystemClock_Config+0xb8>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <SystemClock_Config+0xb8>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b6:	bf00      	nop
 80008b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <SystemClock_Config+0xb8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008c4:	d1f8      	bne.n	80008b8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c6:	2302      	movs	r3, #2
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008ce:	2340      	movs	r3, #64	@ 0x40
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fd96 	bl	800340c <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008e6:	f000 fa45 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	233f      	movs	r3, #63	@ 0x3f
 80008ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008fe:	2340      	movs	r3, #64	@ 0x40
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000902:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2101      	movs	r1, #1
 8000910:	4618      	mov	r0, r3
 8000912:	f003 f955 	bl	8003bc0 <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800091c:	f000 fa2a 	bl	8000d74 <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	3770      	adds	r7, #112	@ 0x70
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	58024800 	.word	0x58024800

0800092c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_I2C1_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000938:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <MX_I2C1_Init+0x7c>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000944:	2201      	movs	r2, #1
 8000946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000968:	f002 f85a 	bl	8002a20 <HAL_I2C_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000972:	f000 f9ff 	bl	8000d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800097a:	f002 fc75 	bl	8003268 <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000984:	f000 f9f6 	bl	8000d74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800098c:	f002 fcb7 	bl	80032fe <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f9ed 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	240001f4 	.word	0x240001f4
 80009a4:	40005400 	.word	0x40005400
 80009a8:	00707cbb 	.word	0x00707cbb

080009ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b098      	sub	sp, #96	@ 0x60
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2234      	movs	r2, #52	@ 0x34
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f008 fe95 	bl	8009708 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009de:	4b41      	ldr	r3, [pc, #260]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 80009e0:	4a41      	ldr	r2, [pc, #260]	@ (8000ae8 <MX_TIM1_Init+0x13c>)
 80009e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80009e4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 80009e6:	223f      	movs	r2, #63	@ 0x3f
 80009e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80009f0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 80009f2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fe:	4b39      	ldr	r3, [pc, #228]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b37      	ldr	r3, [pc, #220]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a0a:	4836      	ldr	r0, [pc, #216]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 8000a0c:	f005 fa26 	bl	8005e5c <HAL_TIM_PWM_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f9ad 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	482d      	ldr	r0, [pc, #180]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 8000a2e:	f006 f845 	bl	8006abc <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a38:	f000 f99c 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3c:	2360      	movs	r3, #96	@ 0x60
 8000a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000a40:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a46:	2300      	movs	r3, #0
 8000a48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	4820      	ldr	r0, [pc, #128]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 8000a64:	f005 fb6e 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a6e:	f000 f981 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 8000a72:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4818      	ldr	r0, [pc, #96]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 8000a82:	f005 fb5f 	bl	8006144 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a8c:	f000 f972 	bl	8000d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 8000ac6:	f006 f895 	bl	8006bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ad0:	f000 f950 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad4:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <MX_TIM1_Init+0x138>)
 8000ad6:	f000 fb49 	bl	800116c <HAL_TIM_MspPostInit>

}
 8000ada:	bf00      	nop
 8000adc:	3760      	adds	r7, #96	@ 0x60
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000248 	.word	0x24000248
 8000ae8:	40010000 	.word	0x40010000

08000aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af0:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000af2:	4a23      	ldr	r2, [pc, #140]	@ (8000b80 <MX_USART2_UART_Init+0x94>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000af6:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000af8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b34:	4811      	ldr	r0, [pc, #68]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b36:	f006 f8e9 	bl	8006d0c <HAL_UART_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b40:	f000 f918 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b48:	f007 fed4 	bl	80088f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b52:	f000 f90f 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4808      	ldr	r0, [pc, #32]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b5a:	f007 ff09 	bl	8008970 <HAL_UARTEx_SetRxFifoThreshold>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b64:	f000 f906 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_USART2_UART_Init+0x90>)
 8000b6a:	f007 fe8a 	bl	8008882 <HAL_UARTEx_DisableFifoMode>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b74:	f000 f8fe 	bl	8000d74 <Error_Handler>
  	  //UART_Start_Receive_IT(&huart2, &ucRxData, 1);
      //HAL_UART_Receive_IT(&huart2, &ucRxData, 1);

  /* USER CODE END USART2_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24000294 	.word	0x24000294
 8000b80:	40004400 	.word	0x40004400

08000b84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000b8a:	4a23      	ldr	r2, [pc, #140]	@ (8000c18 <MX_USART3_UART_Init+0x94>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bcc:	4811      	ldr	r0, [pc, #68]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000bce:	f006 f89d 	bl	8006d0c <HAL_UART_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bd8:	f000 f8cc 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000be0:	f007 fe88 	bl	80088f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bea:	f000 f8c3 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4808      	ldr	r0, [pc, #32]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000bf2:	f007 febd 	bl	8008970 <HAL_UARTEx_SetRxFifoThreshold>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bfc:	f000 f8ba 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <MX_USART3_UART_Init+0x90>)
 8000c02:	f007 fe3e 	bl	8008882 <HAL_UARTEx_DisableFifoMode>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c0c:	f000 f8b2 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	24000328 	.word	0x24000328
 8000c18:	40004800 	.word	0x40004800

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08c      	sub	sp, #48	@ 0x30
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	4b38      	ldr	r3, [pc, #224]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c38:	4a36      	ldr	r2, [pc, #216]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c42:	4b34      	ldr	r3, [pc, #208]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b30      	ldr	r3, [pc, #192]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c56:	4a2f      	ldr	r2, [pc, #188]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c60:	4b2c      	ldr	r3, [pc, #176]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6e:	4b29      	ldr	r3, [pc, #164]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7e:	4b25      	ldr	r3, [pc, #148]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8c:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	4a20      	ldr	r2, [pc, #128]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000caa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_GPIO_Init+0xf8>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2180      	movs	r1, #128	@ 0x80
 8000cea:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <MX_GPIO_Init+0xfc>)
 8000cec:	f001 fe7e 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <MX_GPIO_Init+0xfc>)
 8000d08:	f001 fcc8 	bl	800269c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3730      	adds	r7, #48	@ 0x30
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58021800 	.word	0x58021800

08000d1c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d2e:	f000 fed9 	bl	8001ae4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d32:	2301      	movs	r3, #1
 8000d34:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d3e:	231f      	movs	r3, #31
 8000d40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d42:	2387      	movs	r3, #135	@ 0x87
 8000d44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fef7 	bl	8001b54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d66:	2004      	movs	r0, #4
 8000d68:	f000 fed4 	bl	8001b14 <HAL_MPU_Enable>

}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <Error_Handler+0x8>

08000d80 <set_servo_angle>:
 */

#include "servo_controls.h"
#include "stdint.h"

 void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim 
     the maths maybe works like 1.5 ms pulse width is neutral with .5 and 2.5 being either end
     so we have a 1us count so 500us/1ms -> 500 counts and 2500us -> 2500 counts*/
     uint32_t pulse_width = 500 +(angle*((2500-500)/180));
 8000d8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d92:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8000d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000e10 <set_servo_angle+0x90>
 8000d9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000da6:	ee17 3a90 	vmov	r3, s15
 8000daa:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d104      	bne.n	8000dbc <set_servo_angle+0x3c>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	635a      	str	r2, [r3, #52]	@ 0x34
  
  }
 8000dba:	e023      	b.n	8000e04 <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d104      	bne.n	8000dcc <set_servo_angle+0x4c>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	6393      	str	r3, [r2, #56]	@ 0x38
  }
 8000dca:	e01b      	b.n	8000e04 <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b08      	cmp	r3, #8
 8000dd0:	d104      	bne.n	8000ddc <set_servo_angle+0x5c>
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	63d3      	str	r3, [r2, #60]	@ 0x3c
  }
 8000dda:	e013      	b.n	8000e04 <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	2b0c      	cmp	r3, #12
 8000de0:	d104      	bne.n	8000dec <set_servo_angle+0x6c>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 8000dea:	e00b      	b.n	8000e04 <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b10      	cmp	r3, #16
 8000df0:	d104      	bne.n	8000dfc <set_servo_angle+0x7c>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
 8000dfa:	e003      	b.n	8000e04 <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	65d3      	str	r3, [r2, #92]	@ 0x5c
  }
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	43fa0000 	.word	0x43fa0000

08000e14 <set_servo_angle_gradual>:
  void set_servo_angle_gradual(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim and the channel*/
     uint32_t current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); // returns current pulse width(between 500 and 2500)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d103      	bne.n	8000e30 <set_servo_angle_gradual+0x1c>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e2e:	e01e      	b.n	8000e6e <set_servo_angle_gradual+0x5a>
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d103      	bne.n	8000e3e <set_servo_angle_gradual+0x2a>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e3c:	e017      	b.n	8000e6e <set_servo_angle_gradual+0x5a>
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d103      	bne.n	8000e4c <set_servo_angle_gradual+0x38>
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e4a:	e010      	b.n	8000e6e <set_servo_angle_gradual+0x5a>
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b0c      	cmp	r3, #12
 8000e50:	d103      	bne.n	8000e5a <set_servo_angle_gradual+0x46>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	e009      	b.n	8000e6e <set_servo_angle_gradual+0x5a>
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	d103      	bne.n	8000e68 <set_servo_angle_gradual+0x54>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	e002      	b.n	8000e6e <set_servo_angle_gradual+0x5a>
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e6e:	617b      	str	r3, [r7, #20]
     uint32_t desired_pulse_width = 500 +(angle*((2500-500)/180));
 8000e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e74:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8000e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800101c <set_servo_angle_gradual+0x208>
 8000e80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e88:	ee17 3a90 	vmov	r3, s15
 8000e8c:	613b      	str	r3, [r7, #16]
     while (desired_pulse_width != current_pulse_width){
 8000e8e:	e0ba      	b.n	8001006 <set_servo_angle_gradual+0x1f2>
        if (desired_pulse_width > current_pulse_width){
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d959      	bls.n	8000f4c <set_servo_angle_gradual+0x138>
            current_pulse_width++; 
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
            __HAL_TIM_SET_COMPARE(htim, channel, current_pulse_width);
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d104      	bne.n	8000eae <set_servo_angle_gradual+0x9a>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eac:	e023      	b.n	8000ef6 <set_servo_angle_gradual+0xe2>
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d104      	bne.n	8000ebe <set_servo_angle_gradual+0xaa>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ebc:	e01b      	b.n	8000ef6 <set_servo_angle_gradual+0xe2>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d104      	bne.n	8000ece <set_servo_angle_gradual+0xba>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ecc:	e013      	b.n	8000ef6 <set_servo_angle_gradual+0xe2>
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2b0c      	cmp	r3, #12
 8000ed2:	d104      	bne.n	8000ede <set_servo_angle_gradual+0xca>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000edc:	e00b      	b.n	8000ef6 <set_servo_angle_gradual+0xe2>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b10      	cmp	r3, #16
 8000ee2:	d104      	bne.n	8000eee <set_servo_angle_gradual+0xda>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eec:	e003      	b.n	8000ef6 <set_servo_angle_gradual+0xe2>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	65d3      	str	r3, [r2, #92]	@ 0x5c
            HAL_Delay(10);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f000 fcc0 	bl	800187c <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel);
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d103      	bne.n	8000f0a <set_servo_angle_gradual+0xf6>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f08:	e01e      	b.n	8000f48 <set_servo_angle_gradual+0x134>
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d103      	bne.n	8000f18 <set_servo_angle_gradual+0x104>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f16:	e017      	b.n	8000f48 <set_servo_angle_gradual+0x134>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d103      	bne.n	8000f26 <set_servo_angle_gradual+0x112>
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f24:	e010      	b.n	8000f48 <set_servo_angle_gradual+0x134>
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	2b0c      	cmp	r3, #12
 8000f2a:	d103      	bne.n	8000f34 <set_servo_angle_gradual+0x120>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	e009      	b.n	8000f48 <set_servo_angle_gradual+0x134>
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d103      	bne.n	8000f42 <set_servo_angle_gradual+0x12e>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f40:	e002      	b.n	8000f48 <set_servo_angle_gradual+0x134>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e05c      	b.n	8001006 <set_servo_angle_gradual+0x1f2>

        }
        else if (desired_pulse_width < current_pulse_width)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d258      	bcs.n	8001006 <set_servo_angle_gradual+0x1f2>
        {
            current_pulse_width--; 
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
            __HAL_TIM_SET_COMPARE(htim, channel, current_pulse_width);
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d104      	bne.n	8000f6a <set_servo_angle_gradual+0x156>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f68:	e023      	b.n	8000fb2 <set_servo_angle_gradual+0x19e>
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d104      	bne.n	8000f7a <set_servo_angle_gradual+0x166>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f78:	e01b      	b.n	8000fb2 <set_servo_angle_gradual+0x19e>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d104      	bne.n	8000f8a <set_servo_angle_gradual+0x176>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f88:	e013      	b.n	8000fb2 <set_servo_angle_gradual+0x19e>
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b0c      	cmp	r3, #12
 8000f8e:	d104      	bne.n	8000f9a <set_servo_angle_gradual+0x186>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	e00b      	b.n	8000fb2 <set_servo_angle_gradual+0x19e>
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	d104      	bne.n	8000faa <set_servo_angle_gradual+0x196>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa8:	e003      	b.n	8000fb2 <set_servo_angle_gradual+0x19e>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	65d3      	str	r3, [r2, #92]	@ 0x5c

            HAL_Delay(10);
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f000 fc62 	bl	800187c <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); 
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d103      	bne.n	8000fc6 <set_servo_angle_gradual+0x1b2>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fc4:	e01e      	b.n	8001004 <set_servo_angle_gradual+0x1f0>
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d103      	bne.n	8000fd4 <set_servo_angle_gradual+0x1c0>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd2:	e017      	b.n	8001004 <set_servo_angle_gradual+0x1f0>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d103      	bne.n	8000fe2 <set_servo_angle_gradual+0x1ce>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fe0:	e010      	b.n	8001004 <set_servo_angle_gradual+0x1f0>
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b0c      	cmp	r3, #12
 8000fe6:	d103      	bne.n	8000ff0 <set_servo_angle_gradual+0x1dc>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	e009      	b.n	8001004 <set_servo_angle_gradual+0x1f0>
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	d103      	bne.n	8000ffe <set_servo_angle_gradual+0x1ea>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffc:	e002      	b.n	8001004 <set_servo_angle_gradual+0x1f0>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001004:	617b      	str	r3, [r7, #20]
     while (desired_pulse_width != current_pulse_width){
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	429a      	cmp	r2, r3
 800100c:	f47f af40 	bne.w	8000e90 <set_servo_angle_gradual+0x7c>
        }
      
    }
  }
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	43fa0000 	.word	0x43fa0000

08001020 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_MspInit+0x30>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800102c:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <HAL_MspInit+0x30>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_MspInit+0x30>)
 8001038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	58024400 	.word	0x58024400

08001054 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0b8      	sub	sp, #224	@ 0xe0
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	22b8      	movs	r2, #184	@ 0xb8
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f008 fb47 	bl	8009708 <memset>
  if(hi2c->Instance==I2C1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a27      	ldr	r2, [pc, #156]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d146      	bne.n	8001112 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001084:	f04f 0208 	mov.w	r2, #8
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f91c 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010a6:	f7ff fe65 	bl	8000d74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <HAL_I2C_MspInit+0xcc>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <HAL_I2C_MspInit+0xcc>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <HAL_I2C_MspInit+0xcc>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d0:	2312      	movs	r3, #18
 80010d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e2:	2304      	movs	r3, #4
 80010e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80010ec:	4619      	mov	r1, r3
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <HAL_I2C_MspInit+0xd0>)
 80010f0:	f001 fad4 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_I2C_MspInit+0xcc>)
 80010f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010fa:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <HAL_I2C_MspInit+0xcc>)
 80010fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001100:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_I2C_MspInit+0xcc>)
 8001106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800110a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001112:	bf00      	nop
 8001114:	37e0      	adds	r7, #224	@ 0xe0
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40005400 	.word	0x40005400
 8001120:	58024400 	.word	0x58024400
 8001124:	58020400 	.word	0x58020400

08001128 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <HAL_TIM_PWM_MspInit+0x3c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10e      	bne.n	8001158 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_TIM_PWM_MspInit+0x40>)
 800113c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001140:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <HAL_TIM_PWM_MspInit+0x40>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <HAL_TIM_PWM_MspInit+0x40>)
 800114c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40010000 	.word	0x40010000
 8001168:	58024400 	.word	0x58024400

0800116c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a13      	ldr	r2, [pc, #76]	@ (80011d8 <HAL_TIM_MspPostInit+0x6c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d11f      	bne.n	80011ce <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <HAL_TIM_MspPostInit+0x70>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001194:	4a11      	ldr	r2, [pc, #68]	@ (80011dc <HAL_TIM_MspPostInit+0x70>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <HAL_TIM_MspPostInit+0x70>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80011ac:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80011b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011be:	2301      	movs	r3, #1
 80011c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <HAL_TIM_MspPostInit+0x74>)
 80011ca:	f001 fa67 	bl	800269c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40010000 	.word	0x40010000
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58021000 	.word	0x58021000

080011e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0bc      	sub	sp, #240	@ 0xf0
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	22b8      	movs	r2, #184	@ 0xb8
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f008 fa7f 	bl	8009708 <memset>
  if(huart->Instance==USART2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a63      	ldr	r2, [pc, #396]	@ (800139c <HAL_UART_MspInit+0x1b8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d172      	bne.n	80012fa <HAL_UART_MspInit+0x116>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001214:	f04f 0202 	mov.w	r2, #2
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	4618      	mov	r0, r3
 800122c:	f003 f854 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001236:	f7ff fd9d 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123a:	4b59      	ldr	r3, [pc, #356]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 800123c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001240:	4a57      	ldr	r2, [pc, #348]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 8001242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001246:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800124a:	4b55      	ldr	r3, [pc, #340]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 800124c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b51      	ldr	r3, [pc, #324]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125e:	4a50      	ldr	r2, [pc, #320]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001268:	4b4d      	ldr	r3, [pc, #308]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	4b4a      	ldr	r3, [pc, #296]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	4a48      	ldr	r2, [pc, #288]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001286:	4b46      	ldr	r3, [pc, #280]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001294:	2308      	movs	r3, #8
 8001296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ac:	2307      	movs	r3, #7
 80012ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012b6:	4619      	mov	r1, r3
 80012b8:	483a      	ldr	r0, [pc, #232]	@ (80013a4 <HAL_UART_MspInit+0x1c0>)
 80012ba:	f001 f9ef 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012be:	2320      	movs	r3, #32
 80012c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d6:	2307      	movs	r3, #7
 80012d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012e0:	4619      	mov	r1, r3
 80012e2:	4831      	ldr	r0, [pc, #196]	@ (80013a8 <HAL_UART_MspInit+0x1c4>)
 80012e4:	f001 f9da 	bl	800269c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2026      	movs	r0, #38	@ 0x26
 80012ee:	f000 fbc4 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012f2:	2026      	movs	r0, #38	@ 0x26
 80012f4:	f000 fbdb 	bl	8001aae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80012f8:	e04b      	b.n	8001392 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2b      	ldr	r2, [pc, #172]	@ (80013ac <HAL_UART_MspInit+0x1c8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d146      	bne.n	8001392 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001304:	f04f 0202 	mov.w	r2, #2
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	4618      	mov	r0, r3
 800131c:	f002 ffdc 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_UART_MspInit+0x146>
      Error_Handler();
 8001326:	f7ff fd25 	bl	8000d74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800132a:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 800132c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001330:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 8001332:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001336:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 800133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134e:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_UART_MspInit+0x1bc>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001366:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800136a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001380:	2307      	movs	r3, #7
 8001382:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001386:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800138a:	4619      	mov	r1, r3
 800138c:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <HAL_UART_MspInit+0x1c4>)
 800138e:	f001 f985 	bl	800269c <HAL_GPIO_Init>
}
 8001392:	bf00      	nop
 8001394:	37f0      	adds	r7, #240	@ 0xf0
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40004400 	.word	0x40004400
 80013a0:	58024400 	.word	0x58024400
 80013a4:	58020000 	.word	0x58020000
 80013a8:	58020c00 	.word	0x58020c00
 80013ac:	40004800 	.word	0x40004800

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <NMI_Handler+0x4>

080013b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <MemManage_Handler+0x4>

080013c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001406:	f000 fa19 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <USART2_IRQHandler+0x10>)
 8001416:	f005 fd57 	bl	8006ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24000294 	.word	0x24000294

08001424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return 1;
 8001428:	2301      	movs	r3, #1
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_kill>:

int _kill(int pid, int sig)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800143e:	f008 f9b5 	bl	80097ac <__errno>
 8001442:	4603      	mov	r3, r0
 8001444:	2216      	movs	r2, #22
 8001446:	601a      	str	r2, [r3, #0]
  return -1;
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_exit>:

void _exit (int status)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ffe7 	bl	8001434 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001466:	bf00      	nop
 8001468:	e7fd      	b.n	8001466 <_exit+0x12>

0800146a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e00a      	b.n	8001492 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800147c:	f3af 8000 	nop.w
 8001480:	4601      	mov	r1, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	60ba      	str	r2, [r7, #8]
 8001488:	b2ca      	uxtb	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbf0      	blt.n	800147c <_read+0x12>
  }

  return len;
 800149a:	687b      	ldr	r3, [r7, #4]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e009      	b.n	80014ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	60ba      	str	r2, [r7, #8]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f96a 	bl	8000798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dbf1      	blt.n	80014b6 <_write+0x12>
  }
  return len;
 80014d2:	687b      	ldr	r3, [r7, #4]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_close>:

int _close(int file)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001504:	605a      	str	r2, [r3, #4]
  return 0;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_isatty>:

int _isatty(int file)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800151c:	2301      	movs	r3, #1
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800154c:	4a14      	ldr	r2, [pc, #80]	@ (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001574:	f008 f91a 	bl	80097ac <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	@ (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24050000 	.word	0x24050000
 80015a4:	00000400 	.word	0x00000400
 80015a8:	240003bc 	.word	0x240003bc
 80015ac:	24000510 	.word	0x24000510

080015b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015b4:	4b3e      	ldr	r3, [pc, #248]	@ (80016b0 <SystemInit+0x100>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ba:	4a3d      	ldr	r2, [pc, #244]	@ (80016b0 <SystemInit+0x100>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015c4:	4b3b      	ldr	r3, [pc, #236]	@ (80016b4 <SystemInit+0x104>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	d807      	bhi.n	80015e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015d0:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <SystemInit+0x104>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 030f 	bic.w	r3, r3, #15
 80015d8:	4a36      	ldr	r2, [pc, #216]	@ (80016b4 <SystemInit+0x104>)
 80015da:	f043 0307 	orr.w	r3, r3, #7
 80015de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015e0:	4b35      	ldr	r3, [pc, #212]	@ (80016b8 <SystemInit+0x108>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a34      	ldr	r2, [pc, #208]	@ (80016b8 <SystemInit+0x108>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ec:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <SystemInit+0x108>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015f2:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <SystemInit+0x108>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4930      	ldr	r1, [pc, #192]	@ (80016b8 <SystemInit+0x108>)
 80015f8:	4b30      	ldr	r3, [pc, #192]	@ (80016bc <SystemInit+0x10c>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015fe:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <SystemInit+0x104>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800160a:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <SystemInit+0x104>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 030f 	bic.w	r3, r3, #15
 8001612:	4a28      	ldr	r2, [pc, #160]	@ (80016b4 <SystemInit+0x104>)
 8001614:	f043 0307 	orr.w	r3, r3, #7
 8001618:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800161a:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <SystemInit+0x108>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <SystemInit+0x108>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <SystemInit+0x108>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800162c:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <SystemInit+0x108>)
 800162e:	4a24      	ldr	r2, [pc, #144]	@ (80016c0 <SystemInit+0x110>)
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001632:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <SystemInit+0x108>)
 8001634:	4a23      	ldr	r2, [pc, #140]	@ (80016c4 <SystemInit+0x114>)
 8001636:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001638:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <SystemInit+0x108>)
 800163a:	4a23      	ldr	r2, [pc, #140]	@ (80016c8 <SystemInit+0x118>)
 800163c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800163e:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <SystemInit+0x108>)
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001644:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <SystemInit+0x108>)
 8001646:	4a20      	ldr	r2, [pc, #128]	@ (80016c8 <SystemInit+0x118>)
 8001648:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <SystemInit+0x108>)
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001650:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <SystemInit+0x108>)
 8001652:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <SystemInit+0x118>)
 8001654:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <SystemInit+0x108>)
 8001658:	2200      	movs	r2, #0
 800165a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800165c:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <SystemInit+0x108>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a15      	ldr	r2, [pc, #84]	@ (80016b8 <SystemInit+0x108>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001666:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <SystemInit+0x108>)
 800166a:	2200      	movs	r2, #0
 800166c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <SystemInit+0x108>)
 8001670:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d113      	bne.n	80016a4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <SystemInit+0x108>)
 800167e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001682:	4a0d      	ldr	r2, [pc, #52]	@ (80016b8 <SystemInit+0x108>)
 8001684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001688:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <SystemInit+0x11c>)
 800168e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001692:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <SystemInit+0x108>)
 8001696:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800169a:	4a07      	ldr	r2, [pc, #28]	@ (80016b8 <SystemInit+0x108>)
 800169c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016a0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00
 80016b4:	52002000 	.word	0x52002000
 80016b8:	58024400 	.word	0x58024400
 80016bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80016c0:	02020200 	.word	0x02020200
 80016c4:	01ff0000 	.word	0x01ff0000
 80016c8:	01010280 	.word	0x01010280
 80016cc:	52004000 	.word	0x52004000

080016d0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <ExitRun0Mode+0x2c>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <ExitRun0Mode+0x2c>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80016e0:	bf00      	nop
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <ExitRun0Mode+0x2c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f9      	beq.n	80016e2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	58024800 	.word	0x58024800

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800173c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001704:	f7ff ffe4 	bl	80016d0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001708:	f7ff ff52 	bl	80015b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800170c:	480c      	ldr	r0, [pc, #48]	@ (8001740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170e:	490d      	ldr	r1, [pc, #52]	@ (8001744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001724:	4c0a      	ldr	r4, [pc, #40]	@ (8001750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001732:	f008 f841 	bl	80097b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001736:	f7ff f841 	bl	80007bc <main>
  bx  lr
 800173a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800173c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001740:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001744:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001748:	0800b7cc 	.word	0x0800b7cc
  ldr r2, =_sbss
 800174c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001750:	24000510 	.word	0x24000510

08001754 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC3_IRQHandler>
	...

08001758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175e:	2003      	movs	r0, #3
 8001760:	f000 f980 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001764:	f002 fbe2 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8001768:	4602      	mov	r2, r0
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_Init+0x68>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	4913      	ldr	r1, [pc, #76]	@ (80017c4 <HAL_Init+0x6c>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
 8001780:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001782:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <HAL_Init+0x68>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_Init+0x6c>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	4a0b      	ldr	r2, [pc, #44]	@ (80017c8 <HAL_Init+0x70>)
 800179a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800179c:	4a0b      	ldr	r2, [pc, #44]	@ (80017cc <HAL_Init+0x74>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a2:	200f      	movs	r0, #15
 80017a4:	f000 f814 	bl	80017d0 <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e002      	b.n	80017b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017b2:	f7ff fc35 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	58024400 	.word	0x58024400
 80017c4:	0800b40c 	.word	0x0800b40c
 80017c8:	24000004 	.word	0x24000004
 80017cc:	24000000 	.word	0x24000000

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017d8:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <HAL_InitTick+0x60>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e021      	b.n	8001828 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017e4:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <HAL_InitTick+0x64>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_InitTick+0x60>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f965 	bl	8001aca <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00e      	b.n	8001828 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d80a      	bhi.n	8001826 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f000 f92f 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4a06      	ldr	r2, [pc, #24]	@ (8001838 <HAL_InitTick+0x68>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2400000c 	.word	0x2400000c
 8001834:	24000000 	.word	0x24000000
 8001838:	24000008 	.word	0x24000008

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	2400000c 	.word	0x2400000c
 8001860:	240003c0 	.word	0x240003c0

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	240003c0 	.word	0x240003c0

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2400000c 	.word	0x2400000c

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <__NVIC_SetPriorityGrouping+0x40>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <__NVIC_SetPriorityGrouping+0x40>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00
 8001908:	05fa0000 	.word	0x05fa0000

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	@ (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	@ (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	@ (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	@ 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	@ 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff29 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff40 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff90 	bl	80019b8 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5f 	bl	8001964 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff33 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa4 	bl	8001a20 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ae8:	f3bf 8f5f 	dmb	sy
}
 8001aec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <HAL_MPU_Disable+0x28>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	4a06      	ldr	r2, [pc, #24]	@ (8001b0c <HAL_MPU_Disable+0x28>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001afa:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_MPU_Disable+0x2c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00
 8001b10:	e000ed90 	.word	0xe000ed90

08001b14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b4c <HAL_MPU_Enable+0x38>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_MPU_Enable+0x3c>)
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	4a09      	ldr	r2, [pc, #36]	@ (8001b50 <HAL_MPU_Enable+0x3c>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b30:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b32:	f3bf 8f4f 	dsb	sy
}
 8001b36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b38:	f3bf 8f6f 	isb	sy
}
 8001b3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed90 	.word	0xe000ed90
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	785a      	ldrb	r2, [r3, #1]
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b62:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b64:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	4a19      	ldr	r2, [pc, #100]	@ (8001bd0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b70:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <HAL_MPU_ConfigRegion+0x7c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7b1b      	ldrb	r3, [r3, #12]
 8001b7c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7adb      	ldrb	r3, [r3, #11]
 8001b82:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7a9b      	ldrb	r3, [r3, #10]
 8001b8a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7b5b      	ldrb	r3, [r3, #13]
 8001b92:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7b9b      	ldrb	r3, [r3, #14]
 8001b9a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7bdb      	ldrb	r3, [r3, #15]
 8001ba2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ba4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7a5b      	ldrb	r3, [r3, #9]
 8001baa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7a1b      	ldrb	r3, [r3, #8]
 8001bb2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bb4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bbe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bc0:	6113      	str	r3, [r2, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed90 	.word	0xe000ed90

08001bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff fe42 	bl	8001864 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e2dc      	b.n	80021a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d008      	beq.n	8001c0a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2280      	movs	r2, #128	@ 0x80
 8001bfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e2cd      	b.n	80021a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a76      	ldr	r2, [pc, #472]	@ (8001de8 <HAL_DMA_Abort+0x214>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04a      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a74      	ldr	r2, [pc, #464]	@ (8001dec <HAL_DMA_Abort+0x218>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d045      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a73      	ldr	r2, [pc, #460]	@ (8001df0 <HAL_DMA_Abort+0x21c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d040      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a71      	ldr	r2, [pc, #452]	@ (8001df4 <HAL_DMA_Abort+0x220>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03b      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a70      	ldr	r2, [pc, #448]	@ (8001df8 <HAL_DMA_Abort+0x224>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d036      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a6e      	ldr	r2, [pc, #440]	@ (8001dfc <HAL_DMA_Abort+0x228>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6d      	ldr	r2, [pc, #436]	@ (8001e00 <HAL_DMA_Abort+0x22c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d02c      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6b      	ldr	r2, [pc, #428]	@ (8001e04 <HAL_DMA_Abort+0x230>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d027      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6a      	ldr	r2, [pc, #424]	@ (8001e08 <HAL_DMA_Abort+0x234>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a68      	ldr	r2, [pc, #416]	@ (8001e0c <HAL_DMA_Abort+0x238>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a67      	ldr	r2, [pc, #412]	@ (8001e10 <HAL_DMA_Abort+0x23c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a65      	ldr	r2, [pc, #404]	@ (8001e14 <HAL_DMA_Abort+0x240>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a64      	ldr	r2, [pc, #400]	@ (8001e18 <HAL_DMA_Abort+0x244>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a62      	ldr	r2, [pc, #392]	@ (8001e1c <HAL_DMA_Abort+0x248>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a61      	ldr	r2, [pc, #388]	@ (8001e20 <HAL_DMA_Abort+0x24c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_Abort+0xd6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8001e24 <HAL_DMA_Abort+0x250>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_DMA_Abort+0xda>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_DMA_Abort+0xdc>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 021e 	bic.w	r2, r2, #30
 8001cc2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cd2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e00a      	b.n	8001cf2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 020e 	bic.w	r2, r2, #14
 8001cea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8001de8 <HAL_DMA_Abort+0x214>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d072      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a3a      	ldr	r2, [pc, #232]	@ (8001dec <HAL_DMA_Abort+0x218>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d06d      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a39      	ldr	r2, [pc, #228]	@ (8001df0 <HAL_DMA_Abort+0x21c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d068      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a37      	ldr	r2, [pc, #220]	@ (8001df4 <HAL_DMA_Abort+0x220>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d063      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a36      	ldr	r2, [pc, #216]	@ (8001df8 <HAL_DMA_Abort+0x224>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d05e      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a34      	ldr	r2, [pc, #208]	@ (8001dfc <HAL_DMA_Abort+0x228>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d059      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a33      	ldr	r2, [pc, #204]	@ (8001e00 <HAL_DMA_Abort+0x22c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d054      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a31      	ldr	r2, [pc, #196]	@ (8001e04 <HAL_DMA_Abort+0x230>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d04f      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a30      	ldr	r2, [pc, #192]	@ (8001e08 <HAL_DMA_Abort+0x234>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d04a      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2e      	ldr	r2, [pc, #184]	@ (8001e0c <HAL_DMA_Abort+0x238>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d045      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e10 <HAL_DMA_Abort+0x23c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d040      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <HAL_DMA_Abort+0x240>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d03b      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001e18 <HAL_DMA_Abort+0x244>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d036      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a28      	ldr	r2, [pc, #160]	@ (8001e1c <HAL_DMA_Abort+0x248>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d031      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a27      	ldr	r2, [pc, #156]	@ (8001e20 <HAL_DMA_Abort+0x24c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d02c      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a25      	ldr	r2, [pc, #148]	@ (8001e24 <HAL_DMA_Abort+0x250>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d027      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a24      	ldr	r2, [pc, #144]	@ (8001e28 <HAL_DMA_Abort+0x254>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a22      	ldr	r2, [pc, #136]	@ (8001e2c <HAL_DMA_Abort+0x258>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01d      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a21      	ldr	r2, [pc, #132]	@ (8001e30 <HAL_DMA_Abort+0x25c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d018      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e34 <HAL_DMA_Abort+0x260>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001e38 <HAL_DMA_Abort+0x264>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00e      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e3c <HAL_DMA_Abort+0x268>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d009      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e40 <HAL_DMA_Abort+0x26c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d004      	beq.n	8001de2 <HAL_DMA_Abort+0x20e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_DMA_Abort+0x270>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d132      	bne.n	8001e48 <HAL_DMA_Abort+0x274>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e031      	b.n	8001e4a <HAL_DMA_Abort+0x276>
 8001de6:	bf00      	nop
 8001de8:	40020010 	.word	0x40020010
 8001dec:	40020028 	.word	0x40020028
 8001df0:	40020040 	.word	0x40020040
 8001df4:	40020058 	.word	0x40020058
 8001df8:	40020070 	.word	0x40020070
 8001dfc:	40020088 	.word	0x40020088
 8001e00:	400200a0 	.word	0x400200a0
 8001e04:	400200b8 	.word	0x400200b8
 8001e08:	40020410 	.word	0x40020410
 8001e0c:	40020428 	.word	0x40020428
 8001e10:	40020440 	.word	0x40020440
 8001e14:	40020458 	.word	0x40020458
 8001e18:	40020470 	.word	0x40020470
 8001e1c:	40020488 	.word	0x40020488
 8001e20:	400204a0 	.word	0x400204a0
 8001e24:	400204b8 	.word	0x400204b8
 8001e28:	58025408 	.word	0x58025408
 8001e2c:	5802541c 	.word	0x5802541c
 8001e30:	58025430 	.word	0x58025430
 8001e34:	58025444 	.word	0x58025444
 8001e38:	58025458 	.word	0x58025458
 8001e3c:	5802546c 	.word	0x5802546c
 8001e40:	58025480 	.word	0x58025480
 8001e44:	58025494 	.word	0x58025494
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6d      	ldr	r2, [pc, #436]	@ (8002018 <HAL_DMA_Abort+0x444>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d04a      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6b      	ldr	r2, [pc, #428]	@ (800201c <HAL_DMA_Abort+0x448>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d045      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6a      	ldr	r2, [pc, #424]	@ (8002020 <HAL_DMA_Abort+0x44c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d040      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a68      	ldr	r2, [pc, #416]	@ (8002024 <HAL_DMA_Abort+0x450>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d03b      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a67      	ldr	r2, [pc, #412]	@ (8002028 <HAL_DMA_Abort+0x454>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d036      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a65      	ldr	r2, [pc, #404]	@ (800202c <HAL_DMA_Abort+0x458>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d031      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a64      	ldr	r2, [pc, #400]	@ (8002030 <HAL_DMA_Abort+0x45c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d02c      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a62      	ldr	r2, [pc, #392]	@ (8002034 <HAL_DMA_Abort+0x460>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d027      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a61      	ldr	r2, [pc, #388]	@ (8002038 <HAL_DMA_Abort+0x464>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d022      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5f      	ldr	r2, [pc, #380]	@ (800203c <HAL_DMA_Abort+0x468>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d01d      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8002040 <HAL_DMA_Abort+0x46c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d018      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5c      	ldr	r2, [pc, #368]	@ (8002044 <HAL_DMA_Abort+0x470>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5b      	ldr	r2, [pc, #364]	@ (8002048 <HAL_DMA_Abort+0x474>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00e      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a59      	ldr	r2, [pc, #356]	@ (800204c <HAL_DMA_Abort+0x478>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d009      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a58      	ldr	r2, [pc, #352]	@ (8002050 <HAL_DMA_Abort+0x47c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d004      	beq.n	8001efe <HAL_DMA_Abort+0x32a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a56      	ldr	r2, [pc, #344]	@ (8002054 <HAL_DMA_Abort+0x480>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d108      	bne.n	8001f10 <HAL_DMA_Abort+0x33c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e007      	b.n	8001f20 <HAL_DMA_Abort+0x34c>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f20:	e013      	b.n	8001f4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f22:	f7ff fc9f 	bl	8001864 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d90c      	bls.n	8001f4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e12d      	b.n	80021a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1e5      	bne.n	8001f22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002018 <HAL_DMA_Abort+0x444>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d04a      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <HAL_DMA_Abort+0x448>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d045      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002020 <HAL_DMA_Abort+0x44c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d040      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2a      	ldr	r2, [pc, #168]	@ (8002024 <HAL_DMA_Abort+0x450>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03b      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a29      	ldr	r2, [pc, #164]	@ (8002028 <HAL_DMA_Abort+0x454>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d036      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a27      	ldr	r2, [pc, #156]	@ (800202c <HAL_DMA_Abort+0x458>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d031      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a26      	ldr	r2, [pc, #152]	@ (8002030 <HAL_DMA_Abort+0x45c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d02c      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a24      	ldr	r2, [pc, #144]	@ (8002034 <HAL_DMA_Abort+0x460>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <HAL_DMA_Abort+0x464>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a21      	ldr	r2, [pc, #132]	@ (800203c <HAL_DMA_Abort+0x468>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a20      	ldr	r2, [pc, #128]	@ (8002040 <HAL_DMA_Abort+0x46c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002044 <HAL_DMA_Abort+0x470>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002048 <HAL_DMA_Abort+0x474>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00e      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800204c <HAL_DMA_Abort+0x478>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8002050 <HAL_DMA_Abort+0x47c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_Abort+0x422>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a18      	ldr	r2, [pc, #96]	@ (8002054 <HAL_DMA_Abort+0x480>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_DMA_Abort+0x426>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_DMA_Abort+0x428>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d02b      	beq.n	8002058 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002004:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	223f      	movs	r2, #63	@ 0x3f
 8002010:	409a      	lsls	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	e02a      	b.n	800206e <HAL_DMA_Abort+0x49a>
 8002018:	40020010 	.word	0x40020010
 800201c:	40020028 	.word	0x40020028
 8002020:	40020040 	.word	0x40020040
 8002024:	40020058 	.word	0x40020058
 8002028:	40020070 	.word	0x40020070
 800202c:	40020088 	.word	0x40020088
 8002030:	400200a0 	.word	0x400200a0
 8002034:	400200b8 	.word	0x400200b8
 8002038:	40020410 	.word	0x40020410
 800203c:	40020428 	.word	0x40020428
 8002040:	40020440 	.word	0x40020440
 8002044:	40020458 	.word	0x40020458
 8002048:	40020470 	.word	0x40020470
 800204c:	40020488 	.word	0x40020488
 8002050:	400204a0 	.word	0x400204a0
 8002054:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2201      	movs	r2, #1
 8002068:	409a      	lsls	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a4f      	ldr	r2, [pc, #316]	@ (80021b0 <HAL_DMA_Abort+0x5dc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d072      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a4d      	ldr	r2, [pc, #308]	@ (80021b4 <HAL_DMA_Abort+0x5e0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d06d      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a4c      	ldr	r2, [pc, #304]	@ (80021b8 <HAL_DMA_Abort+0x5e4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d068      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a4a      	ldr	r2, [pc, #296]	@ (80021bc <HAL_DMA_Abort+0x5e8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d063      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a49      	ldr	r2, [pc, #292]	@ (80021c0 <HAL_DMA_Abort+0x5ec>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d05e      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a47      	ldr	r2, [pc, #284]	@ (80021c4 <HAL_DMA_Abort+0x5f0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d059      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a46      	ldr	r2, [pc, #280]	@ (80021c8 <HAL_DMA_Abort+0x5f4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d054      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a44      	ldr	r2, [pc, #272]	@ (80021cc <HAL_DMA_Abort+0x5f8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d04f      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a43      	ldr	r2, [pc, #268]	@ (80021d0 <HAL_DMA_Abort+0x5fc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04a      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a41      	ldr	r2, [pc, #260]	@ (80021d4 <HAL_DMA_Abort+0x600>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d045      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a40      	ldr	r2, [pc, #256]	@ (80021d8 <HAL_DMA_Abort+0x604>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d040      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3e      	ldr	r2, [pc, #248]	@ (80021dc <HAL_DMA_Abort+0x608>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d03b      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a3d      	ldr	r2, [pc, #244]	@ (80021e0 <HAL_DMA_Abort+0x60c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d036      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a3b      	ldr	r2, [pc, #236]	@ (80021e4 <HAL_DMA_Abort+0x610>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d031      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a3a      	ldr	r2, [pc, #232]	@ (80021e8 <HAL_DMA_Abort+0x614>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d02c      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a38      	ldr	r2, [pc, #224]	@ (80021ec <HAL_DMA_Abort+0x618>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d027      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a37      	ldr	r2, [pc, #220]	@ (80021f0 <HAL_DMA_Abort+0x61c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d022      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a35      	ldr	r2, [pc, #212]	@ (80021f4 <HAL_DMA_Abort+0x620>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01d      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a34      	ldr	r2, [pc, #208]	@ (80021f8 <HAL_DMA_Abort+0x624>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d018      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a32      	ldr	r2, [pc, #200]	@ (80021fc <HAL_DMA_Abort+0x628>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a31      	ldr	r2, [pc, #196]	@ (8002200 <HAL_DMA_Abort+0x62c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00e      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <HAL_DMA_Abort+0x630>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2e      	ldr	r2, [pc, #184]	@ (8002208 <HAL_DMA_Abort+0x634>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d004      	beq.n	800215e <HAL_DMA_Abort+0x58a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2c      	ldr	r2, [pc, #176]	@ (800220c <HAL_DMA_Abort+0x638>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_DMA_Abort+0x58e>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_DMA_Abort+0x590>
 8002162:	2300      	movs	r3, #0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002170:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002188:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002192:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40020010 	.word	0x40020010
 80021b4:	40020028 	.word	0x40020028
 80021b8:	40020040 	.word	0x40020040
 80021bc:	40020058 	.word	0x40020058
 80021c0:	40020070 	.word	0x40020070
 80021c4:	40020088 	.word	0x40020088
 80021c8:	400200a0 	.word	0x400200a0
 80021cc:	400200b8 	.word	0x400200b8
 80021d0:	40020410 	.word	0x40020410
 80021d4:	40020428 	.word	0x40020428
 80021d8:	40020440 	.word	0x40020440
 80021dc:	40020458 	.word	0x40020458
 80021e0:	40020470 	.word	0x40020470
 80021e4:	40020488 	.word	0x40020488
 80021e8:	400204a0 	.word	0x400204a0
 80021ec:	400204b8 	.word	0x400204b8
 80021f0:	58025408 	.word	0x58025408
 80021f4:	5802541c 	.word	0x5802541c
 80021f8:	58025430 	.word	0x58025430
 80021fc:	58025444 	.word	0x58025444
 8002200:	58025458 	.word	0x58025458
 8002204:	5802546c 	.word	0x5802546c
 8002208:	58025480 	.word	0x58025480
 800220c:	58025494 	.word	0x58025494

08002210 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e237      	b.n	8002692 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d004      	beq.n	8002238 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e22c      	b.n	8002692 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a5c      	ldr	r2, [pc, #368]	@ (80023b0 <HAL_DMA_Abort_IT+0x1a0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d04a      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5b      	ldr	r2, [pc, #364]	@ (80023b4 <HAL_DMA_Abort_IT+0x1a4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d045      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a59      	ldr	r2, [pc, #356]	@ (80023b8 <HAL_DMA_Abort_IT+0x1a8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d040      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a58      	ldr	r2, [pc, #352]	@ (80023bc <HAL_DMA_Abort_IT+0x1ac>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d03b      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a56      	ldr	r2, [pc, #344]	@ (80023c0 <HAL_DMA_Abort_IT+0x1b0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d036      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a55      	ldr	r2, [pc, #340]	@ (80023c4 <HAL_DMA_Abort_IT+0x1b4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d031      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a53      	ldr	r2, [pc, #332]	@ (80023c8 <HAL_DMA_Abort_IT+0x1b8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02c      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a52      	ldr	r2, [pc, #328]	@ (80023cc <HAL_DMA_Abort_IT+0x1bc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d027      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a50      	ldr	r2, [pc, #320]	@ (80023d0 <HAL_DMA_Abort_IT+0x1c0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d022      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a4f      	ldr	r2, [pc, #316]	@ (80023d4 <HAL_DMA_Abort_IT+0x1c4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d01d      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a4d      	ldr	r2, [pc, #308]	@ (80023d8 <HAL_DMA_Abort_IT+0x1c8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a4c      	ldr	r2, [pc, #304]	@ (80023dc <HAL_DMA_Abort_IT+0x1cc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a4a      	ldr	r2, [pc, #296]	@ (80023e0 <HAL_DMA_Abort_IT+0x1d0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a49      	ldr	r2, [pc, #292]	@ (80023e4 <HAL_DMA_Abort_IT+0x1d4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a47      	ldr	r2, [pc, #284]	@ (80023e8 <HAL_DMA_Abort_IT+0x1d8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_Abort_IT+0xc8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a46      	ldr	r2, [pc, #280]	@ (80023ec <HAL_DMA_Abort_IT+0x1dc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_DMA_Abort_IT+0xcc>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_DMA_Abort_IT+0xce>
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8086 	beq.w	80023f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2204      	movs	r2, #4
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a2f      	ldr	r2, [pc, #188]	@ (80023b0 <HAL_DMA_Abort_IT+0x1a0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d04a      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2e      	ldr	r2, [pc, #184]	@ (80023b4 <HAL_DMA_Abort_IT+0x1a4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d045      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a2c      	ldr	r2, [pc, #176]	@ (80023b8 <HAL_DMA_Abort_IT+0x1a8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d040      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2b      	ldr	r2, [pc, #172]	@ (80023bc <HAL_DMA_Abort_IT+0x1ac>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d03b      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a29      	ldr	r2, [pc, #164]	@ (80023c0 <HAL_DMA_Abort_IT+0x1b0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d036      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a28      	ldr	r2, [pc, #160]	@ (80023c4 <HAL_DMA_Abort_IT+0x1b4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d031      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a26      	ldr	r2, [pc, #152]	@ (80023c8 <HAL_DMA_Abort_IT+0x1b8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02c      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a25      	ldr	r2, [pc, #148]	@ (80023cc <HAL_DMA_Abort_IT+0x1bc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d027      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <HAL_DMA_Abort_IT+0x1c0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d022      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <HAL_DMA_Abort_IT+0x1c4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01d      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a20      	ldr	r2, [pc, #128]	@ (80023d8 <HAL_DMA_Abort_IT+0x1c8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d018      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1f      	ldr	r2, [pc, #124]	@ (80023dc <HAL_DMA_Abort_IT+0x1cc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1d      	ldr	r2, [pc, #116]	@ (80023e0 <HAL_DMA_Abort_IT+0x1d0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00e      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1c      	ldr	r2, [pc, #112]	@ (80023e4 <HAL_DMA_Abort_IT+0x1d4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d009      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1a      	ldr	r2, [pc, #104]	@ (80023e8 <HAL_DMA_Abort_IT+0x1d8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <HAL_DMA_Abort_IT+0x17c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a19      	ldr	r2, [pc, #100]	@ (80023ec <HAL_DMA_Abort_IT+0x1dc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d108      	bne.n	800239e <HAL_DMA_Abort_IT+0x18e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e178      	b.n	8002690 <HAL_DMA_Abort_IT+0x480>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e16f      	b.n	8002690 <HAL_DMA_Abort_IT+0x480>
 80023b0:	40020010 	.word	0x40020010
 80023b4:	40020028 	.word	0x40020028
 80023b8:	40020040 	.word	0x40020040
 80023bc:	40020058 	.word	0x40020058
 80023c0:	40020070 	.word	0x40020070
 80023c4:	40020088 	.word	0x40020088
 80023c8:	400200a0 	.word	0x400200a0
 80023cc:	400200b8 	.word	0x400200b8
 80023d0:	40020410 	.word	0x40020410
 80023d4:	40020428 	.word	0x40020428
 80023d8:	40020440 	.word	0x40020440
 80023dc:	40020458 	.word	0x40020458
 80023e0:	40020470 	.word	0x40020470
 80023e4:	40020488 	.word	0x40020488
 80023e8:	400204a0 	.word	0x400204a0
 80023ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 020e 	bic.w	r2, r2, #14
 80023fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6c      	ldr	r2, [pc, #432]	@ (80025b8 <HAL_DMA_Abort_IT+0x3a8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d04a      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6b      	ldr	r2, [pc, #428]	@ (80025bc <HAL_DMA_Abort_IT+0x3ac>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d045      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a69      	ldr	r2, [pc, #420]	@ (80025c0 <HAL_DMA_Abort_IT+0x3b0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d040      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a68      	ldr	r2, [pc, #416]	@ (80025c4 <HAL_DMA_Abort_IT+0x3b4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d03b      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a66      	ldr	r2, [pc, #408]	@ (80025c8 <HAL_DMA_Abort_IT+0x3b8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d036      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a65      	ldr	r2, [pc, #404]	@ (80025cc <HAL_DMA_Abort_IT+0x3bc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d031      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a63      	ldr	r2, [pc, #396]	@ (80025d0 <HAL_DMA_Abort_IT+0x3c0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d02c      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a62      	ldr	r2, [pc, #392]	@ (80025d4 <HAL_DMA_Abort_IT+0x3c4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d027      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a60      	ldr	r2, [pc, #384]	@ (80025d8 <HAL_DMA_Abort_IT+0x3c8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d022      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5f      	ldr	r2, [pc, #380]	@ (80025dc <HAL_DMA_Abort_IT+0x3cc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d01d      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a5d      	ldr	r2, [pc, #372]	@ (80025e0 <HAL_DMA_Abort_IT+0x3d0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d018      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a5c      	ldr	r2, [pc, #368]	@ (80025e4 <HAL_DMA_Abort_IT+0x3d4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d013      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5a      	ldr	r2, [pc, #360]	@ (80025e8 <HAL_DMA_Abort_IT+0x3d8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00e      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a59      	ldr	r2, [pc, #356]	@ (80025ec <HAL_DMA_Abort_IT+0x3dc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d009      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_DMA_Abort_IT+0x3e0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d004      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x290>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a56      	ldr	r2, [pc, #344]	@ (80025f4 <HAL_DMA_Abort_IT+0x3e4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d108      	bne.n	80024b2 <HAL_DMA_Abort_IT+0x2a2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e007      	b.n	80024c2 <HAL_DMA_Abort_IT+0x2b2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a3c      	ldr	r2, [pc, #240]	@ (80025b8 <HAL_DMA_Abort_IT+0x3a8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d072      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a3a      	ldr	r2, [pc, #232]	@ (80025bc <HAL_DMA_Abort_IT+0x3ac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d06d      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a39      	ldr	r2, [pc, #228]	@ (80025c0 <HAL_DMA_Abort_IT+0x3b0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d068      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a37      	ldr	r2, [pc, #220]	@ (80025c4 <HAL_DMA_Abort_IT+0x3b4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d063      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a36      	ldr	r2, [pc, #216]	@ (80025c8 <HAL_DMA_Abort_IT+0x3b8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d05e      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a34      	ldr	r2, [pc, #208]	@ (80025cc <HAL_DMA_Abort_IT+0x3bc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d059      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a33      	ldr	r2, [pc, #204]	@ (80025d0 <HAL_DMA_Abort_IT+0x3c0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d054      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a31      	ldr	r2, [pc, #196]	@ (80025d4 <HAL_DMA_Abort_IT+0x3c4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04f      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a30      	ldr	r2, [pc, #192]	@ (80025d8 <HAL_DMA_Abort_IT+0x3c8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04a      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2e      	ldr	r2, [pc, #184]	@ (80025dc <HAL_DMA_Abort_IT+0x3cc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d045      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2d      	ldr	r2, [pc, #180]	@ (80025e0 <HAL_DMA_Abort_IT+0x3d0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d040      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2b      	ldr	r2, [pc, #172]	@ (80025e4 <HAL_DMA_Abort_IT+0x3d4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d03b      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a2a      	ldr	r2, [pc, #168]	@ (80025e8 <HAL_DMA_Abort_IT+0x3d8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d036      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a28      	ldr	r2, [pc, #160]	@ (80025ec <HAL_DMA_Abort_IT+0x3dc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a27      	ldr	r2, [pc, #156]	@ (80025f0 <HAL_DMA_Abort_IT+0x3e0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d02c      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a25      	ldr	r2, [pc, #148]	@ (80025f4 <HAL_DMA_Abort_IT+0x3e4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d027      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a24      	ldr	r2, [pc, #144]	@ (80025f8 <HAL_DMA_Abort_IT+0x3e8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a22      	ldr	r2, [pc, #136]	@ (80025fc <HAL_DMA_Abort_IT+0x3ec>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01d      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_DMA_Abort_IT+0x3f0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1f      	ldr	r2, [pc, #124]	@ (8002604 <HAL_DMA_Abort_IT+0x3f4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1e      	ldr	r2, [pc, #120]	@ (8002608 <HAL_DMA_Abort_IT+0x3f8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <HAL_DMA_Abort_IT+0x3fc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002610 <HAL_DMA_Abort_IT+0x400>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x3a2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	@ (8002614 <HAL_DMA_Abort_IT+0x404>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d132      	bne.n	8002618 <HAL_DMA_Abort_IT+0x408>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e031      	b.n	800261a <HAL_DMA_Abort_IT+0x40a>
 80025b6:	bf00      	nop
 80025b8:	40020010 	.word	0x40020010
 80025bc:	40020028 	.word	0x40020028
 80025c0:	40020040 	.word	0x40020040
 80025c4:	40020058 	.word	0x40020058
 80025c8:	40020070 	.word	0x40020070
 80025cc:	40020088 	.word	0x40020088
 80025d0:	400200a0 	.word	0x400200a0
 80025d4:	400200b8 	.word	0x400200b8
 80025d8:	40020410 	.word	0x40020410
 80025dc:	40020428 	.word	0x40020428
 80025e0:	40020440 	.word	0x40020440
 80025e4:	40020458 	.word	0x40020458
 80025e8:	40020470 	.word	0x40020470
 80025ec:	40020488 	.word	0x40020488
 80025f0:	400204a0 	.word	0x400204a0
 80025f4:	400204b8 	.word	0x400204b8
 80025f8:	58025408 	.word	0x58025408
 80025fc:	5802541c 	.word	0x5802541c
 8002600:	58025430 	.word	0x58025430
 8002604:	58025444 	.word	0x58025444
 8002608:	58025458 	.word	0x58025458
 800260c:	5802546c 	.word	0x5802546c
 8002610:	58025480 	.word	0x58025480
 8002614:	58025494 	.word	0x58025494
 8002618:	2300      	movs	r3, #0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d028      	beq.n	8002670 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800262c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2201      	movs	r2, #1
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800264c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00c      	beq.n	8002670 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002664:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800266e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	@ 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026aa:	4b86      	ldr	r3, [pc, #536]	@ (80028c4 <HAL_GPIO_Init+0x228>)
 80026ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026ae:	e18c      	b.n	80029ca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 817e 	beq.w	80029c4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d005      	beq.n	80026e0 <HAL_GPIO_Init+0x44>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d130      	bne.n	8002742 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002716:	2201      	movs	r2, #1
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 0201 	and.w	r2, r3, #1
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b03      	cmp	r3, #3
 800274c:	d017      	beq.n	800277e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d123      	bne.n	80027d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	69b9      	ldr	r1, [r7, #24]
 80027ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	2203      	movs	r2, #3
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0203 	and.w	r2, r3, #3
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80d8 	beq.w	80029c4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002814:	4b2c      	ldr	r3, [pc, #176]	@ (80028c8 <HAL_GPIO_Init+0x22c>)
 8002816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800281a:	4a2b      	ldr	r2, [pc, #172]	@ (80028c8 <HAL_GPIO_Init+0x22c>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002824:	4b28      	ldr	r3, [pc, #160]	@ (80028c8 <HAL_GPIO_Init+0x22c>)
 8002826:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002832:	4a26      	ldr	r2, [pc, #152]	@ (80028cc <HAL_GPIO_Init+0x230>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1d      	ldr	r2, [pc, #116]	@ (80028d0 <HAL_GPIO_Init+0x234>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d04a      	beq.n	80028f4 <HAL_GPIO_Init+0x258>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1c      	ldr	r2, [pc, #112]	@ (80028d4 <HAL_GPIO_Init+0x238>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02b      	beq.n	80028be <HAL_GPIO_Init+0x222>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1b      	ldr	r2, [pc, #108]	@ (80028d8 <HAL_GPIO_Init+0x23c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d025      	beq.n	80028ba <HAL_GPIO_Init+0x21e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1a      	ldr	r2, [pc, #104]	@ (80028dc <HAL_GPIO_Init+0x240>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01f      	beq.n	80028b6 <HAL_GPIO_Init+0x21a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a19      	ldr	r2, [pc, #100]	@ (80028e0 <HAL_GPIO_Init+0x244>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d019      	beq.n	80028b2 <HAL_GPIO_Init+0x216>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a18      	ldr	r2, [pc, #96]	@ (80028e4 <HAL_GPIO_Init+0x248>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_GPIO_Init+0x212>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a17      	ldr	r2, [pc, #92]	@ (80028e8 <HAL_GPIO_Init+0x24c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00d      	beq.n	80028aa <HAL_GPIO_Init+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a16      	ldr	r2, [pc, #88]	@ (80028ec <HAL_GPIO_Init+0x250>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <HAL_GPIO_Init+0x20a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a15      	ldr	r2, [pc, #84]	@ (80028f0 <HAL_GPIO_Init+0x254>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_GPIO_Init+0x206>
 800289e:	2309      	movs	r3, #9
 80028a0:	e029      	b.n	80028f6 <HAL_GPIO_Init+0x25a>
 80028a2:	230a      	movs	r3, #10
 80028a4:	e027      	b.n	80028f6 <HAL_GPIO_Init+0x25a>
 80028a6:	2307      	movs	r3, #7
 80028a8:	e025      	b.n	80028f6 <HAL_GPIO_Init+0x25a>
 80028aa:	2306      	movs	r3, #6
 80028ac:	e023      	b.n	80028f6 <HAL_GPIO_Init+0x25a>
 80028ae:	2305      	movs	r3, #5
 80028b0:	e021      	b.n	80028f6 <HAL_GPIO_Init+0x25a>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e01f      	b.n	80028f6 <HAL_GPIO_Init+0x25a>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e01d      	b.n	80028f6 <HAL_GPIO_Init+0x25a>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e01b      	b.n	80028f6 <HAL_GPIO_Init+0x25a>
 80028be:	2301      	movs	r3, #1
 80028c0:	e019      	b.n	80028f6 <HAL_GPIO_Init+0x25a>
 80028c2:	bf00      	nop
 80028c4:	58000080 	.word	0x58000080
 80028c8:	58024400 	.word	0x58024400
 80028cc:	58000400 	.word	0x58000400
 80028d0:	58020000 	.word	0x58020000
 80028d4:	58020400 	.word	0x58020400
 80028d8:	58020800 	.word	0x58020800
 80028dc:	58020c00 	.word	0x58020c00
 80028e0:	58021000 	.word	0x58021000
 80028e4:	58021400 	.word	0x58021400
 80028e8:	58021800 	.word	0x58021800
 80028ec:	58021c00 	.word	0x58021c00
 80028f0:	58022400 	.word	0x58022400
 80028f4:	2300      	movs	r3, #0
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f002 0203 	and.w	r2, r2, #3
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4093      	lsls	r3, r2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002906:	4938      	ldr	r1, [pc, #224]	@ (80029e8 <HAL_GPIO_Init+0x34c>)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800293a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	3301      	adds	r3, #1
 80029c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f47f ae6b 	bne.w	80026b0 <HAL_GPIO_Init+0x14>
  }
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	3724      	adds	r7, #36	@ 0x24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	58000400 	.word	0x58000400

080029ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
 80029f8:	4613      	mov	r3, r2
 80029fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029fc:	787b      	ldrb	r3, [r7, #1]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a08:	e003      	b.n	8002a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a0a:	887b      	ldrh	r3, [r7, #2]
 8002a0c:	041a      	lsls	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	619a      	str	r2, [r3, #24]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e08b      	b.n	8002b4a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe fb04 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2224      	movs	r2, #36	@ 0x24
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d107      	bne.n	8002a9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	e006      	b.n	8002aa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002aa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d108      	bne.n	8002ac2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	e007      	b.n	8002ad2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_I2C_Init+0x134>)
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002af0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69d9      	ldr	r1, [r3, #28]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	02008000 	.word	0x02008000

08002b58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	817b      	strh	r3, [r7, #10]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	813b      	strh	r3, [r7, #8]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	f040 80fd 	bne.w	8002d7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_I2C_Mem_Read+0x34>
 8002b86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0f1      	b.n	8002d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Mem_Read+0x4e>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0ea      	b.n	8002d7c <HAL_I2C_Mem_Read+0x224>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bae:	f7fe fe59 	bl	8001864 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2319      	movs	r3, #25
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f95b 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0d5      	b.n	8002d7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2222      	movs	r2, #34	@ 0x22
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2240      	movs	r2, #64	@ 0x40
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf8:	88f8      	ldrh	r0, [r7, #6]
 8002bfa:	893a      	ldrh	r2, [r7, #8]
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	4603      	mov	r3, r0
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f8bf 	bl	8002d8c <I2C_RequestMemoryRead>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0ad      	b.n	8002d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2bff      	cmp	r3, #255	@ 0xff
 8002c28:	d90e      	bls.n	8002c48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	22ff      	movs	r2, #255	@ 0xff
 8002c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	8979      	ldrh	r1, [r7, #10]
 8002c38:	4b52      	ldr	r3, [pc, #328]	@ (8002d84 <HAL_I2C_Mem_Read+0x22c>)
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fadf 	bl	8003204 <I2C_TransferConfig>
 8002c46:	e00f      	b.n	8002c68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	8979      	ldrh	r1, [r7, #10]
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d84 <HAL_I2C_Mem_Read+0x22c>)
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 face 	bl	8003204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2104      	movs	r1, #4
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f902 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07c      	b.n	8002d7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d034      	beq.n	8002d28 <HAL_I2C_Mem_Read+0x1d0>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d130      	bne.n	8002d28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2180      	movs	r1, #128	@ 0x80
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f8d3 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e04d      	b.n	8002d7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2bff      	cmp	r3, #255	@ 0xff
 8002ce8:	d90e      	bls.n	8002d08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	22ff      	movs	r2, #255	@ 0xff
 8002cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fa7f 	bl	8003204 <I2C_TransferConfig>
 8002d06:	e00f      	b.n	8002d28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fa6e 	bl	8003204 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d19a      	bne.n	8002c68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f940 	bl	8002fbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e01a      	b.n	8002d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <HAL_I2C_Mem_Read+0x230>)
 8002d5a:	400b      	ands	r3, r1
 8002d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
  }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	80002400 	.word	0x80002400
 8002d88:	fe00e800 	.word	0xfe00e800

08002d8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	813b      	strh	r3, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	4b20      	ldr	r3, [pc, #128]	@ (8002e30 <I2C_RequestMemoryRead+0xa4>)
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2300      	movs	r3, #0
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fa26 	bl	8003204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f8b6 	bl	8002f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e02c      	b.n	8002e26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d105      	bne.n	8002dde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd2:	893b      	ldrh	r3, [r7, #8]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ddc:	e015      	b.n	8002e0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dde:	893b      	ldrh	r3, [r7, #8]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	69b9      	ldr	r1, [r7, #24]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f89c 	bl	8002f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e012      	b.n	8002e26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e00:	893b      	ldrh	r3, [r7, #8]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2200      	movs	r2, #0
 8002e12:	2140      	movs	r1, #64	@ 0x40
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f831 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	80002000 	.word	0x80002000

08002e34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d103      	bne.n	8002e52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d007      	beq.n	8002e70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	619a      	str	r2, [r3, #24]
  }
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	e03b      	b.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f8d6 	bl	8003044 <I2C_IsErrorOccurred>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e041      	b.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d02d      	beq.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eaa:	f7fe fcdb 	bl	8001864 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d122      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d113      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d0b4      	beq.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f3a:	e033      	b.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f87f 	bl	8003044 <I2C_IsErrorOccurred>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e031      	b.n	8002fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d025      	beq.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f58:	f7fe fc84 	bl	8001864 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11a      	bne.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d013      	beq.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e007      	b.n	8002fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d1c4      	bne.n	8002f3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc8:	e02f      	b.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f838 	bl	8003044 <I2C_IsErrorOccurred>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e02d      	b.n	800303a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7fe fc41 	bl	8001864 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d11a      	bne.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d013      	beq.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e007      	b.n	800303a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b20      	cmp	r3, #32
 8003036:	d1c8      	bne.n	8002fca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	@ 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d068      	beq.n	8003142 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2210      	movs	r2, #16
 8003076:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003078:	e049      	b.n	800310e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d045      	beq.n	800310e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fe fbef 	bl	8001864 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_IsErrorOccurred+0x54>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d13a      	bne.n	800310e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ba:	d121      	bne.n	8003100 <I2C_IsErrorOccurred+0xbc>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030c2:	d01d      	beq.n	8003100 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d01a      	beq.n	8003100 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030da:	f7fe fbc3 	bl	8001864 <HAL_GetTick>
 80030de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e0:	e00e      	b.n	8003100 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030e2:	f7fe fbbf 	bl	8001864 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b19      	cmp	r3, #25
 80030ee:	d907      	bls.n	8003100 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	f043 0320 	orr.w	r3, r3, #32
 80030f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030fe:	e006      	b.n	800310e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b20      	cmp	r3, #32
 800310c:	d1e9      	bne.n	80030e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d003      	beq.n	8003124 <I2C_IsErrorOccurred+0xe0>
 800311c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0aa      	beq.n	800307a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2220      	movs	r2, #32
 8003132:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003186:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01c      	beq.n	80031f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff fe3b 	bl	8002e34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <I2C_IsErrorOccurred+0x1bc>)
 80031ca:	400b      	ands	r3, r1
 80031cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3728      	adds	r7, #40	@ 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	fe00e800 	.word	0xfe00e800

08003204 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	817b      	strh	r3, [r7, #10]
 8003212:	4613      	mov	r3, r2
 8003214:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003216:	897b      	ldrh	r3, [r7, #10]
 8003218:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800321c:	7a7b      	ldrb	r3, [r7, #9]
 800321e:	041b      	lsls	r3, r3, #16
 8003220:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003224:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	4313      	orrs	r3, r2
 800322e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003232:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	0d5b      	lsrs	r3, r3, #21
 800323e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003242:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <I2C_TransferConfig+0x60>)
 8003244:	430b      	orrs	r3, r1
 8003246:	43db      	mvns	r3, r3
 8003248:	ea02 0103 	and.w	r1, r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	03ff63ff 	.word	0x03ff63ff

08003268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b20      	cmp	r3, #32
 800327c:	d138      	bne.n	80032f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003288:	2302      	movs	r3, #2
 800328a:	e032      	b.n	80032f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	d139      	bne.n	8003388 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800331e:	2302      	movs	r3, #2
 8003320:	e033      	b.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2224      	movs	r2, #36	@ 0x24
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003350:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2302      	movs	r3, #2
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80033a0:	4b19      	ldr	r3, [pc, #100]	@ (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d00a      	beq.n	80033c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033ac:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d001      	beq.n	80033be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e01f      	b.n	80033fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e01d      	b.n	80033fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80033c2:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 0207 	bic.w	r2, r3, #7
 80033ca:	490f      	ldr	r1, [pc, #60]	@ (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80033d2:	f7fe fa47 	bl	8001864 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033d8:	e009      	b.n	80033ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80033da:	f7fe fa43 	bl	8001864 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033e8:	d901      	bls.n	80033ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033ee:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033fa:	d1ee      	bne.n	80033da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	58024800 	.word	0x58024800

0800340c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08c      	sub	sp, #48	@ 0x30
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e3c8      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8087 	beq.w	800353a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342c:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003436:	4b86      	ldr	r3, [pc, #536]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800343c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343e:	2b10      	cmp	r3, #16
 8003440:	d007      	beq.n	8003452 <HAL_RCC_OscConfig+0x46>
 8003442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003444:	2b18      	cmp	r3, #24
 8003446:	d110      	bne.n	800346a <HAL_RCC_OscConfig+0x5e>
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d10b      	bne.n	800346a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003452:	4b7f      	ldr	r3, [pc, #508]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d06c      	beq.n	8003538 <HAL_RCC_OscConfig+0x12c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d168      	bne.n	8003538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e3a2      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x76>
 8003474:	4b76      	ldr	r3, [pc, #472]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a75      	ldr	r2, [pc, #468]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e02e      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x98>
 800348a:	4b71      	ldr	r3, [pc, #452]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a70      	ldr	r2, [pc, #448]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b6e      	ldr	r3, [pc, #440]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6d      	ldr	r2, [pc, #436]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 800349c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0xbc>
 80034ae:	4b68      	ldr	r3, [pc, #416]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a67      	ldr	r2, [pc, #412]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b65      	ldr	r3, [pc, #404]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a64      	ldr	r2, [pc, #400]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 80034c8:	4b61      	ldr	r3, [pc, #388]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a60      	ldr	r2, [pc, #384]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe f9bc 	bl	8001864 <HAL_GetTick>
 80034ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe f9b8 	bl	8001864 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	@ 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e356      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003502:	4b53      	ldr	r3, [pc, #332]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xe4>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe f9a8 	bl	8001864 <HAL_GetTick>
 8003514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7fe f9a4 	bl	8001864 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	@ 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e342      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800352a:	4b49      	ldr	r3, [pc, #292]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x10c>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 808c 	beq.w	8003660 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003548:	4b41      	ldr	r3, [pc, #260]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003550:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003552:	4b3f      	ldr	r3, [pc, #252]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003556:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_RCC_OscConfig+0x162>
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2b18      	cmp	r3, #24
 8003562:	d137      	bne.n	80035d4 <HAL_RCC_OscConfig+0x1c8>
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d132      	bne.n	80035d4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800356e:	4b38      	ldr	r3, [pc, #224]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x17a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e314      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003586:	4b32      	ldr	r3, [pc, #200]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 0219 	bic.w	r2, r3, #25
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	492f      	ldr	r1, [pc, #188]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe f964 	bl	8001864 <HAL_GetTick>
 800359c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe f960 	bl	8001864 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e2fe      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b2:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	061b      	lsls	r3, r3, #24
 80035cc:	4920      	ldr	r1, [pc, #128]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d2:	e045      	b.n	8003660 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d026      	beq.n	800362a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 0219 	bic.w	r2, r3, #25
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4919      	ldr	r1, [pc, #100]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fe f939 	bl	8001864 <HAL_GetTick>
 80035f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f6:	f7fe f935 	bl	8001864 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e2d3      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003614:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	490b      	ldr	r1, [pc, #44]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
 8003628:	e01a      	b.n	8003660 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362a:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a08      	ldr	r2, [pc, #32]	@ (8003650 <HAL_RCC_OscConfig+0x244>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fe f915 	bl	8001864 <HAL_GetTick>
 800363a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363e:	f7fe f911 	bl	8001864 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d903      	bls.n	8003654 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e2af      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
 8003650:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003654:	4b96      	ldr	r3, [pc, #600]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ee      	bne.n	800363e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	d06a      	beq.n	8003742 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366c:	4b90      	ldr	r3, [pc, #576]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003674:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003676:	4b8e      	ldr	r3, [pc, #568]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d007      	beq.n	8003692 <HAL_RCC_OscConfig+0x286>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b18      	cmp	r3, #24
 8003686:	d11b      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2b4>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d116      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003692:	4b87      	ldr	r3, [pc, #540]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x29e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	2b80      	cmp	r3, #128	@ 0x80
 80036a4:	d001      	beq.n	80036aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e282      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036aa:	4b81      	ldr	r3, [pc, #516]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	061b      	lsls	r3, r3, #24
 80036b8:	497d      	ldr	r1, [pc, #500]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036be:	e040      	b.n	8003742 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d023      	beq.n	8003710 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036c8:	4b79      	ldr	r3, [pc, #484]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a78      	ldr	r2, [pc, #480]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80036ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe f8c6 	bl	8001864 <HAL_GetTick>
 80036d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036dc:	f7fe f8c2 	bl	8001864 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e260      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036ee:	4b70      	ldr	r3, [pc, #448]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036fa:	4b6d      	ldr	r3, [pc, #436]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	4969      	ldr	r1, [pc, #420]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	60cb      	str	r3, [r1, #12]
 800370e:	e018      	b.n	8003742 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003710:	4b67      	ldr	r3, [pc, #412]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a66      	ldr	r2, [pc, #408]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800371a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe f8a2 	bl	8001864 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003724:	f7fe f89e 	bl	8001864 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e23c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003736:	4b5e      	ldr	r3, [pc, #376]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d036      	beq.n	80037bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d019      	beq.n	800378a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003756:	4b56      	ldr	r3, [pc, #344]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375a:	4a55      	ldr	r2, [pc, #340]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fe f87f 	bl	8001864 <HAL_GetTick>
 8003766:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376a:	f7fe f87b 	bl	8001864 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e219      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800377c:	4b4c      	ldr	r3, [pc, #304]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 800377e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x35e>
 8003788:	e018      	b.n	80037bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378a:	4b49      	ldr	r3, [pc, #292]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 800378c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378e:	4a48      	ldr	r2, [pc, #288]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fe f865 	bl	8001864 <HAL_GetTick>
 800379a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379e:	f7fe f861 	bl	8001864 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e1ff      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037b0:	4b3f      	ldr	r3, [pc, #252]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f0      	bne.n	800379e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d036      	beq.n	8003836 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d019      	beq.n	8003804 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037d0:	4b37      	ldr	r3, [pc, #220]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a36      	ldr	r2, [pc, #216]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80037d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037dc:	f7fe f842 	bl	8001864 <HAL_GetTick>
 80037e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037e4:	f7fe f83e 	bl	8001864 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1dc      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037f6:	4b2e      	ldr	r3, [pc, #184]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x3d8>
 8003802:	e018      	b.n	8003836 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003804:	4b2a      	ldr	r3, [pc, #168]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a29      	ldr	r2, [pc, #164]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 800380a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800380e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003810:	f7fe f828 	bl	8001864 <HAL_GetTick>
 8003814:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003818:	f7fe f824 	bl	8001864 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e1c2      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800382a:	4b21      	ldr	r3, [pc, #132]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8086 	beq.w	8003950 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003844:	4b1b      	ldr	r3, [pc, #108]	@ (80038b4 <HAL_RCC_OscConfig+0x4a8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1a      	ldr	r2, [pc, #104]	@ (80038b4 <HAL_RCC_OscConfig+0x4a8>)
 800384a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800384e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003850:	f7fe f808 	bl	8001864 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003858:	f7fe f804 	bl	8001864 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	@ 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e1a2      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800386a:	4b12      	ldr	r3, [pc, #72]	@ (80038b4 <HAL_RCC_OscConfig+0x4a8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d106      	bne.n	800388c <HAL_RCC_OscConfig+0x480>
 800387e:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	4a0b      	ldr	r2, [pc, #44]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	@ 0x70
 800388a:	e032      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d111      	bne.n	80038b8 <HAL_RCC_OscConfig+0x4ac>
 8003894:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003898:	4a05      	ldr	r2, [pc, #20]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a0:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a4:	4a02      	ldr	r2, [pc, #8]	@ (80038b0 <HAL_RCC_OscConfig+0x4a4>)
 80038a6:	f023 0304 	bic.w	r3, r3, #4
 80038aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ac:	e021      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e6>
 80038ae:	bf00      	nop
 80038b0:	58024400 	.word	0x58024400
 80038b4:	58024800 	.word	0x58024800
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b05      	cmp	r3, #5
 80038be:	d10c      	bne.n	80038da <HAL_RCC_OscConfig+0x4ce>
 80038c0:	4b83      	ldr	r3, [pc, #524]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c4:	4a82      	ldr	r2, [pc, #520]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80038cc:	4b80      	ldr	r3, [pc, #512]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d8:	e00b      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e6>
 80038da:	4b7d      	ldr	r3, [pc, #500]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	4a7c      	ldr	r2, [pc, #496]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	4a79      	ldr	r2, [pc, #484]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d015      	beq.n	8003926 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fa:	f7fd ffb3 	bl	8001864 <HAL_GetTick>
 80038fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003900:	e00a      	b.n	8003918 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fd ffaf 	bl	8001864 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e14b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003918:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ee      	beq.n	8003902 <HAL_RCC_OscConfig+0x4f6>
 8003924:	e014      	b.n	8003950 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fd ff9d 	bl	8001864 <HAL_GetTick>
 800392a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fd ff99 	bl	8001864 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e135      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003944:	4b62      	ldr	r3, [pc, #392]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ee      	bne.n	800392e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 812a 	beq.w	8003bae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800395a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003962:	2b18      	cmp	r3, #24
 8003964:	f000 80ba 	beq.w	8003adc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	2b02      	cmp	r3, #2
 800396e:	f040 8095 	bne.w	8003a9c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	4b57      	ldr	r3, [pc, #348]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a56      	ldr	r2, [pc, #344]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003978:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800397c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fd ff71 	bl	8001864 <HAL_GetTick>
 8003982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003986:	f7fd ff6d 	bl	8001864 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e10b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003998:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f0      	bne.n	8003986 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80039a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039a8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <HAL_RCC_OscConfig+0x6c8>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	430a      	orrs	r2, r1
 80039b8:	4945      	ldr	r1, [pc, #276]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	3b01      	subs	r3, #1
 80039c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039cc:	3b01      	subs	r3, #1
 80039ce:	025b      	lsls	r3, r3, #9
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d8:	3b01      	subs	r3, #1
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e6:	3b01      	subs	r3, #1
 80039e8:	061b      	lsls	r3, r3, #24
 80039ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80039ee:	4938      	ldr	r1, [pc, #224]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80039f4:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	4a35      	ldr	r2, [pc, #212]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a00:	4b33      	ldr	r3, [pc, #204]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a04:	4b34      	ldr	r3, [pc, #208]	@ (8003ad8 <HAL_RCC_OscConfig+0x6cc>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a0c:	00d2      	lsls	r2, r2, #3
 8003a0e:	4930      	ldr	r1, [pc, #192]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a14:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	f023 020c 	bic.w	r2, r3, #12
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	492b      	ldr	r1, [pc, #172]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a26:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2a:	f023 0202 	bic.w	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a32:	4927      	ldr	r1, [pc, #156]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a38:	4b25      	ldr	r3, [pc, #148]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	4a24      	ldr	r2, [pc, #144]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b22      	ldr	r3, [pc, #136]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	4a21      	ldr	r2, [pc, #132]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd fef6 	bl	8001864 <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fd fef2 	bl	8001864 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e090      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x670>
 8003a9a:	e088      	b.n	8003bae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fedc 	bl	8001864 <HAL_GetTick>
 8003aac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fed8 	bl	8001864 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e076      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ac2:	4b03      	ldr	r3, [pc, #12]	@ (8003ad0 <HAL_RCC_OscConfig+0x6c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x6a4>
 8003ace:	e06e      	b.n	8003bae <HAL_RCC_OscConfig+0x7a2>
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	fffffc0c 	.word	0xfffffc0c
 8003ad8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003adc:	4b36      	ldr	r3, [pc, #216]	@ (8003bb8 <HAL_RCC_OscConfig+0x7ac>)
 8003ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ae2:	4b35      	ldr	r3, [pc, #212]	@ (8003bb8 <HAL_RCC_OscConfig+0x7ac>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d031      	beq.n	8003b54 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f003 0203 	and.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d12a      	bne.n	8003b54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d122      	bne.n	8003b54 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d11a      	bne.n	8003b54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	0a5b      	lsrs	r3, r3, #9
 8003b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d111      	bne.n	8003b54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d108      	bne.n	8003b54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	0e1b      	lsrs	r3, r3, #24
 8003b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e02b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003b58:	4b17      	ldr	r3, [pc, #92]	@ (8003bb8 <HAL_RCC_OscConfig+0x7ac>)
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5c:	08db      	lsrs	r3, r3, #3
 8003b5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d01f      	beq.n	8003bae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003b6e:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <HAL_RCC_OscConfig+0x7ac>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	4a11      	ldr	r2, [pc, #68]	@ (8003bb8 <HAL_RCC_OscConfig+0x7ac>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b7a:	f7fd fe73 	bl	8001864 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003b80:	bf00      	nop
 8003b82:	f7fd fe6f 	bl	8001864 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d0f9      	beq.n	8003b82 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <HAL_RCC_OscConfig+0x7ac>)
 8003b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b92:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <HAL_RCC_OscConfig+0x7b0>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b9a:	00d2      	lsls	r2, r2, #3
 8003b9c:	4906      	ldr	r1, [pc, #24]	@ (8003bb8 <HAL_RCC_OscConfig+0x7ac>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ba2:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <HAL_RCC_OscConfig+0x7ac>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	4a04      	ldr	r2, [pc, #16]	@ (8003bb8 <HAL_RCC_OscConfig+0x7ac>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3730      	adds	r7, #48	@ 0x30
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	58024400 	.word	0x58024400
 8003bbc:	ffff0007 	.word	0xffff0007

08003bc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e19c      	b.n	8003f0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b8a      	ldr	r3, [pc, #552]	@ (8003e00 <HAL_RCC_ClockConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d910      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b87      	ldr	r3, [pc, #540]	@ (8003e00 <HAL_RCC_ClockConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 020f 	bic.w	r2, r3, #15
 8003bea:	4985      	ldr	r1, [pc, #532]	@ (8003e00 <HAL_RCC_ClockConfig+0x240>)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b83      	ldr	r3, [pc, #524]	@ (8003e00 <HAL_RCC_ClockConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e184      	b.n	8003f0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d010      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	4b7b      	ldr	r3, [pc, #492]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d908      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c20:	4b78      	ldr	r3, [pc, #480]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	4975      	ldr	r1, [pc, #468]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d010      	beq.n	8003c60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	4b70      	ldr	r3, [pc, #448]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d908      	bls.n	8003c60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	496a      	ldr	r1, [pc, #424]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	4b64      	ldr	r3, [pc, #400]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d908      	bls.n	8003c8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c7c:	4b61      	ldr	r3, [pc, #388]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	495e      	ldr	r1, [pc, #376]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d010      	beq.n	8003cbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	4b59      	ldr	r3, [pc, #356]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d908      	bls.n	8003cbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003caa:	4b56      	ldr	r3, [pc, #344]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	4953      	ldr	r1, [pc, #332]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d010      	beq.n	8003cea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d908      	bls.n	8003cea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f023 020f 	bic.w	r2, r3, #15
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4947      	ldr	r1, [pc, #284]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d055      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cf6:	4b43      	ldr	r3, [pc, #268]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	4940      	ldr	r1, [pc, #256]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d10:	4b3c      	ldr	r3, [pc, #240]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d121      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0f6      	b.n	8003f0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d28:	4b36      	ldr	r3, [pc, #216]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d115      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0ea      	b.n	8003f0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d40:	4b30      	ldr	r3, [pc, #192]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0de      	b.n	8003f0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d50:	4b2c      	ldr	r3, [pc, #176]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0d6      	b.n	8003f0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d60:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f023 0207 	bic.w	r2, r3, #7
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4925      	ldr	r1, [pc, #148]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d72:	f7fd fd77 	bl	8001864 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7a:	f7fd fd73 	bl	8001864 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0be      	b.n	8003f0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d90:	4b1c      	ldr	r3, [pc, #112]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d1eb      	bne.n	8003d7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d010      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	4b14      	ldr	r3, [pc, #80]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d208      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbe:	4b11      	ldr	r3, [pc, #68]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f023 020f 	bic.w	r2, r3, #15
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	490e      	ldr	r1, [pc, #56]	@ (8003e04 <HAL_RCC_ClockConfig+0x244>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <HAL_RCC_ClockConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d214      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <HAL_RCC_ClockConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 020f 	bic.w	r2, r3, #15
 8003de6:	4906      	ldr	r1, [pc, #24]	@ (8003e00 <HAL_RCC_ClockConfig+0x240>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <HAL_RCC_ClockConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e086      	b.n	8003f0e <HAL_RCC_ClockConfig+0x34e>
 8003e00:	52002000 	.word	0x52002000
 8003e04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	4b3f      	ldr	r3, [pc, #252]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d208      	bcs.n	8003e36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e24:	4b3c      	ldr	r3, [pc, #240]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4939      	ldr	r1, [pc, #228]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d010      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	4b34      	ldr	r3, [pc, #208]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d208      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e52:	4b31      	ldr	r3, [pc, #196]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	492e      	ldr	r1, [pc, #184]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	4b28      	ldr	r3, [pc, #160]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d208      	bcs.n	8003e92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e80:	4b25      	ldr	r3, [pc, #148]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4922      	ldr	r1, [pc, #136]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d010      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d208      	bcs.n	8003ec0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003eae:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4917      	ldr	r1, [pc, #92]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ec0:	f000 f834 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b14      	ldr	r3, [pc, #80]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	4912      	ldr	r1, [pc, #72]	@ (8003f1c <HAL_RCC_ClockConfig+0x35c>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8003edc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ede:	4b0e      	ldr	r3, [pc, #56]	@ (8003f18 <HAL_RCC_ClockConfig+0x358>)
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8003f1c <HAL_RCC_ClockConfig+0x35c>)
 8003ee8:	5cd3      	ldrb	r3, [r2, r3]
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f20 <HAL_RCC_ClockConfig+0x360>)
 8003ef6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f24 <HAL_RCC_ClockConfig+0x364>)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003efe:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <HAL_RCC_ClockConfig+0x368>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd fc64 	bl	80017d0 <HAL_InitTick>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	58024400 	.word	0x58024400
 8003f1c:	0800b40c 	.word	0x0800b40c
 8003f20:	24000004 	.word	0x24000004
 8003f24:	24000000 	.word	0x24000000
 8003f28:	24000008 	.word	0x24000008

08003f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	@ 0x24
 8003f30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f32:	4bb3      	ldr	r3, [pc, #716]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f3a:	2b18      	cmp	r3, #24
 8003f3c:	f200 8155 	bhi.w	80041ea <HAL_RCC_GetSysClockFreq+0x2be>
 8003f40:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003fad 	.word	0x08003fad
 8003f4c:	080041eb 	.word	0x080041eb
 8003f50:	080041eb 	.word	0x080041eb
 8003f54:	080041eb 	.word	0x080041eb
 8003f58:	080041eb 	.word	0x080041eb
 8003f5c:	080041eb 	.word	0x080041eb
 8003f60:	080041eb 	.word	0x080041eb
 8003f64:	080041eb 	.word	0x080041eb
 8003f68:	08003fd3 	.word	0x08003fd3
 8003f6c:	080041eb 	.word	0x080041eb
 8003f70:	080041eb 	.word	0x080041eb
 8003f74:	080041eb 	.word	0x080041eb
 8003f78:	080041eb 	.word	0x080041eb
 8003f7c:	080041eb 	.word	0x080041eb
 8003f80:	080041eb 	.word	0x080041eb
 8003f84:	080041eb 	.word	0x080041eb
 8003f88:	08003fd9 	.word	0x08003fd9
 8003f8c:	080041eb 	.word	0x080041eb
 8003f90:	080041eb 	.word	0x080041eb
 8003f94:	080041eb 	.word	0x080041eb
 8003f98:	080041eb 	.word	0x080041eb
 8003f9c:	080041eb 	.word	0x080041eb
 8003fa0:	080041eb 	.word	0x080041eb
 8003fa4:	080041eb 	.word	0x080041eb
 8003fa8:	08003fdf 	.word	0x08003fdf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fac:	4b94      	ldr	r3, [pc, #592]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fb8:	4b91      	ldr	r3, [pc, #580]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	08db      	lsrs	r3, r3, #3
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	4a90      	ldr	r2, [pc, #576]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003fca:	e111      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fcc:	4b8d      	ldr	r3, [pc, #564]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fce:	61bb      	str	r3, [r7, #24]
      break;
 8003fd0:	e10e      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003fd2:	4b8d      	ldr	r3, [pc, #564]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fd4:	61bb      	str	r3, [r7, #24]
      break;
 8003fd6:	e10b      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003fd8:	4b8c      	ldr	r3, [pc, #560]	@ (800420c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fda:	61bb      	str	r3, [r7, #24]
      break;
 8003fdc:	e108      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fde:	4b88      	ldr	r3, [pc, #544]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003fe8:	4b85      	ldr	r3, [pc, #532]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ff2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ff4:	4b82      	ldr	r3, [pc, #520]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ffe:	4b80      	ldr	r3, [pc, #512]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004002:	08db      	lsrs	r3, r3, #3
 8004004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004016:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80e1 	beq.w	80041e4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b02      	cmp	r3, #2
 8004026:	f000 8083 	beq.w	8004130 <HAL_RCC_GetSysClockFreq+0x204>
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b02      	cmp	r3, #2
 800402e:	f200 80a1 	bhi.w	8004174 <HAL_RCC_GetSysClockFreq+0x248>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x114>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d056      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800403e:	e099      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004040:	4b6f      	ldr	r3, [pc, #444]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02d      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800404c:	4b6c      	ldr	r3, [pc, #432]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	08db      	lsrs	r3, r3, #3
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	4a6b      	ldr	r2, [pc, #428]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004076:	4b62      	ldr	r3, [pc, #392]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004086:	ed97 6a02 	vldr	s12, [r7, #8]
 800408a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800408e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800409a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80040a6:	e087      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004214 <HAL_RCC_GetSysClockFreq+0x2e8>
 80040b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ba:	4b51      	ldr	r3, [pc, #324]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004210 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040ea:	e065      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004218 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fe:	4b40      	ldr	r3, [pc, #256]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004112:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004210 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800412e:	e043      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800421c <HAL_RCC_GetSysClockFreq+0x2f0>
 800413e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004142:	4b2f      	ldr	r3, [pc, #188]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004152:	ed97 6a02 	vldr	s12, [r7, #8]
 8004156:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800415a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800415e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004172:	e021      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004218 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004186:	4b1e      	ldr	r3, [pc, #120]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004196:	ed97 6a02 	vldr	s12, [r7, #8]
 800419a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800419e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80041b8:	4b11      	ldr	r3, [pc, #68]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	0a5b      	lsrs	r3, r3, #9
 80041be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c2:	3301      	adds	r3, #1
 80041c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	ee07 3a90 	vmov	s15, r3
 80041cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80041d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041dc:	ee17 3a90 	vmov	r3, s15
 80041e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80041e2:	e005      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61bb      	str	r3, [r7, #24]
      break;
 80041e8:	e002      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80041ea:	4b07      	ldr	r3, [pc, #28]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041ec:	61bb      	str	r3, [r7, #24]
      break;
 80041ee:	bf00      	nop
  }

  return sysclockfreq;
 80041f0:	69bb      	ldr	r3, [r7, #24]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3724      	adds	r7, #36	@ 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400
 8004204:	03d09000 	.word	0x03d09000
 8004208:	003d0900 	.word	0x003d0900
 800420c:	017d7840 	.word	0x017d7840
 8004210:	46000000 	.word	0x46000000
 8004214:	4c742400 	.word	0x4c742400
 8004218:	4a742400 	.word	0x4a742400
 800421c:	4bbebc20 	.word	0x4bbebc20

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004226:	f7ff fe81 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <HAL_RCC_GetHCLKFreq+0x50>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	490f      	ldr	r1, [pc, #60]	@ (8004274 <HAL_RCC_GetHCLKFreq+0x54>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	fa22 f303 	lsr.w	r3, r2, r3
 8004242:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004244:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <HAL_RCC_GetHCLKFreq+0x50>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	4a09      	ldr	r2, [pc, #36]	@ (8004274 <HAL_RCC_GetHCLKFreq+0x54>)
 800424e:	5cd3      	ldrb	r3, [r2, r3]
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	fa22 f303 	lsr.w	r3, r2, r3
 800425a:	4a07      	ldr	r2, [pc, #28]	@ (8004278 <HAL_RCC_GetHCLKFreq+0x58>)
 800425c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800425e:	4a07      	ldr	r2, [pc, #28]	@ (800427c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004264:	4b04      	ldr	r3, [pc, #16]	@ (8004278 <HAL_RCC_GetHCLKFreq+0x58>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	58024400 	.word	0x58024400
 8004274:	0800b40c 	.word	0x0800b40c
 8004278:	24000004 	.word	0x24000004
 800427c:	24000000 	.word	0x24000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004284:	f7ff ffcc 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	091b      	lsrs	r3, r3, #4
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4904      	ldr	r1, [pc, #16]	@ (80042a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	58024400 	.word	0x58024400
 80042a8:	0800b40c 	.word	0x0800b40c

080042ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80042b0:	f7ff ffb6 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4904      	ldr	r1, [pc, #16]	@ (80042d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	58024400 	.word	0x58024400
 80042d4:	0800b40c 	.word	0x0800b40c

080042d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b0c6      	sub	sp, #280	@ 0x118
 80042de:	af00      	add	r7, sp, #0
 80042e0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042e4:	2300      	movs	r3, #0
 80042e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80042fc:	2500      	movs	r5, #0
 80042fe:	ea54 0305 	orrs.w	r3, r4, r5
 8004302:	d049      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800430a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800430e:	d02f      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004310:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004314:	d828      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800431a:	d01a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800431c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004320:	d822      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800432a:	d007      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800432c:	e01c      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432e:	4bab      	ldr	r3, [pc, #684]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	4aaa      	ldr	r2, [pc, #680]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004338:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800433a:	e01a      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004340:	3308      	adds	r3, #8
 8004342:	2102      	movs	r1, #2
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fc25 	bl	8005b94 <RCCEx_PLL2_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004350:	e00f      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004356:	3328      	adds	r3, #40	@ 0x28
 8004358:	2102      	movs	r1, #2
 800435a:	4618      	mov	r0, r3
 800435c:	f001 fccc 	bl	8005cf8 <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004366:	e004      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004372:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800437a:	4b98      	ldr	r3, [pc, #608]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800437c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004388:	4a94      	ldr	r2, [pc, #592]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800438a:	430b      	orrs	r3, r1
 800438c:	6513      	str	r3, [r2, #80]	@ 0x50
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004394:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80043a4:	f04f 0900 	mov.w	r9, #0
 80043a8:	ea58 0309 	orrs.w	r3, r8, r9
 80043ac:	d047      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80043ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d82a      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80043b8:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043d5 	.word	0x080043d5
 80043c4:	080043e3 	.word	0x080043e3
 80043c8:	080043f9 	.word	0x080043f9
 80043cc:	08004417 	.word	0x08004417
 80043d0:	08004417 	.word	0x08004417
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d4:	4b81      	ldr	r3, [pc, #516]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	4a80      	ldr	r2, [pc, #512]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043e0:	e01a      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e6:	3308      	adds	r3, #8
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 fbd2 	bl	8005b94 <RCCEx_PLL2_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043f6:	e00f      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fc:	3328      	adds	r3, #40	@ 0x28
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f001 fc79 	bl	8005cf8 <RCCEx_PLL3_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800440c:	e004      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004414:	e000      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004420:	4b6e      	ldr	r3, [pc, #440]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004424:	f023 0107 	bic.w	r1, r3, #7
 8004428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	4a6b      	ldr	r2, [pc, #428]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004430:	430b      	orrs	r3, r1
 8004432:	6513      	str	r3, [r2, #80]	@ 0x50
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800443a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800444a:	f04f 0b00 	mov.w	fp, #0
 800444e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004452:	d05b      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004458:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800445c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004460:	d03b      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004462:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004466:	d834      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004468:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800446c:	d037      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x206>
 800446e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004472:	d82e      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004474:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004478:	d033      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800447a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800447e:	d828      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004484:	d01a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800448a:	d822      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004490:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004494:	d007      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004496:	e01c      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004498:	4b50      	ldr	r3, [pc, #320]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800449a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449c:	4a4f      	ldr	r2, [pc, #316]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800449e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044a4:	e01e      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044aa:	3308      	adds	r3, #8
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fb70 	bl	8005b94 <RCCEx_PLL2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80044ba:	e013      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c0:	3328      	adds	r3, #40	@ 0x28
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f001 fc17 	bl	8005cf8 <RCCEx_PLL3_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044d0:	e008      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044d8:	e004      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80044da:	bf00      	nop
 80044dc:	e002      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80044e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80044ec:	4b3b      	ldr	r3, [pc, #236]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80044f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044fc:	4a37      	ldr	r2, [pc, #220]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044fe:	430b      	orrs	r3, r1
 8004500:	6593      	str	r3, [r2, #88]	@ 0x58
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004518:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004522:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d05d      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800452c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004530:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004534:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004538:	d03b      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800453a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800453e:	d834      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004544:	d037      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004546:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800454a:	d82e      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800454c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004550:	d033      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004552:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004556:	d828      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004558:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800455c:	d01a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800455e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004562:	d822      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800456c:	d007      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800456e:	e01c      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004570:	4b1a      	ldr	r3, [pc, #104]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	4a19      	ldr	r2, [pc, #100]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800457a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800457c:	e01e      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800457e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004582:	3308      	adds	r3, #8
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f001 fb04 	bl	8005b94 <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004592:	e013      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004598:	3328      	adds	r3, #40	@ 0x28
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f001 fbab 	bl	8005cf8 <RCCEx_PLL3_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045a8:	e008      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045b0:	e004      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80045b2:	bf00      	nop
 80045b4:	e002      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80045b6:	bf00      	nop
 80045b8:	e000      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80045ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10d      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80045c4:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80045cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80045d4:	4a01      	ldr	r2, [pc, #4]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045d6:	430b      	orrs	r3, r1
 80045d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80045da:	e005      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80045dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80045e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80045f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80045fe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004602:	460b      	mov	r3, r1
 8004604:	4313      	orrs	r3, r2
 8004606:	d03a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460e:	2b30      	cmp	r3, #48	@ 0x30
 8004610:	d01f      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004612:	2b30      	cmp	r3, #48	@ 0x30
 8004614:	d819      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004616:	2b20      	cmp	r3, #32
 8004618:	d00c      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800461a:	2b20      	cmp	r3, #32
 800461c:	d815      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d019      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004622:	2b10      	cmp	r3, #16
 8004624:	d111      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004626:	4baa      	ldr	r3, [pc, #680]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	4aa9      	ldr	r2, [pc, #676]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800462c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004632:	e011      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004638:	3308      	adds	r3, #8
 800463a:	2102      	movs	r1, #2
 800463c:	4618      	mov	r0, r3
 800463e:	f001 faa9 	bl	8005b94 <RCCEx_PLL2_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004648:	e006      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004650:	e002      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004660:	4b9b      	ldr	r3, [pc, #620]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004664:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	4a98      	ldr	r2, [pc, #608]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004670:	430b      	orrs	r3, r1
 8004672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800467a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800467e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800468a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004694:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004698:	460b      	mov	r3, r1
 800469a:	4313      	orrs	r3, r2
 800469c:	d051      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800469e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046a8:	d035      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80046aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046ae:	d82e      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80046b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046b4:	d031      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80046b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046ba:	d828      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80046bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046c0:	d01a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046c6:	d822      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80046cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d0:	d007      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80046d2:	e01c      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d4:	4b7e      	ldr	r3, [pc, #504]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	4a7d      	ldr	r2, [pc, #500]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046e0:	e01c      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e6:	3308      	adds	r3, #8
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 fa52 	bl	8005b94 <RCCEx_PLL2_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046f6:	e011      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fc:	3328      	adds	r3, #40	@ 0x28
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f001 faf9 	bl	8005cf8 <RCCEx_PLL3_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800470c:	e006      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004714:	e002      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004716:	bf00      	nop
 8004718:	e000      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800471a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004724:	4b6a      	ldr	r3, [pc, #424]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004728:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800472c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004732:	4a67      	ldr	r2, [pc, #412]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004734:	430b      	orrs	r3, r1
 8004736:	6513      	str	r3, [r2, #80]	@ 0x50
 8004738:	e003      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800473e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800474e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004752:	2300      	movs	r3, #0
 8004754:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004758:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800475c:	460b      	mov	r3, r1
 800475e:	4313      	orrs	r3, r2
 8004760:	d053      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800476c:	d033      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800476e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004772:	d82c      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004774:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004778:	d02f      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x502>
 800477a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800477e:	d826      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004780:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004784:	d02b      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004786:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800478a:	d820      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800478c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004790:	d012      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004796:	d81a      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d022      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a0:	d115      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a6:	3308      	adds	r3, #8
 80047a8:	2101      	movs	r1, #1
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 f9f2 	bl	8005b94 <RCCEx_PLL2_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80047b6:	e015      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047bc:	3328      	adds	r3, #40	@ 0x28
 80047be:	2101      	movs	r1, #1
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fa99 	bl	8005cf8 <RCCEx_PLL3_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80047cc:	e00a      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047d4:	e006      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80047d6:	bf00      	nop
 80047d8:	e004      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80047e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80047ec:	4b38      	ldr	r3, [pc, #224]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80047f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fa:	4a35      	ldr	r2, [pc, #212]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047fc:	430b      	orrs	r3, r1
 80047fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004800:	e003      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004802:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004806:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800480a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004820:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004824:	460b      	mov	r3, r1
 8004826:	4313      	orrs	r3, r2
 8004828:	d058      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800482a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800482e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004836:	d033      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800483c:	d82c      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004842:	d02f      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004848:	d826      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800484a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800484e:	d02b      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004850:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004854:	d820      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800485a:	d012      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800485c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004860:	d81a      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d022      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800486a:	d115      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004870:	3308      	adds	r3, #8
 8004872:	2101      	movs	r1, #1
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f98d 	bl	8005b94 <RCCEx_PLL2_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004880:	e015      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004886:	3328      	adds	r3, #40	@ 0x28
 8004888:	2101      	movs	r1, #1
 800488a:	4618      	mov	r0, r3
 800488c:	f001 fa34 	bl	8005cf8 <RCCEx_PLL3_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004896:	e00a      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800489e:	e006      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80048a0:	bf00      	nop
 80048a2:	e004      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80048a4:	bf00      	nop
 80048a6:	e002      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80048a8:	bf00      	nop
 80048aa:	e000      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80048ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10e      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80048b6:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80048be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048c6:	4a02      	ldr	r2, [pc, #8]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80048cc:	e006      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80048e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048ec:	2300      	movs	r3, #0
 80048ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80048f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	d037      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80048fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004906:	d00e      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800490c:	d816      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d018      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004916:	d111      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004918:	4bc4      	ldr	r3, [pc, #784]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	4ac3      	ldr	r2, [pc, #780]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800491e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004924:	e00f      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492a:	3308      	adds	r3, #8
 800492c:	2101      	movs	r1, #1
 800492e:	4618      	mov	r0, r3
 8004930:	f001 f930 	bl	8005b94 <RCCEx_PLL2_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800493a:	e004      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004942:	e000      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800494e:	4bb7      	ldr	r3, [pc, #732]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004952:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800495c:	4ab3      	ldr	r2, [pc, #716]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800495e:	430b      	orrs	r3, r1
 8004960:	6513      	str	r3, [r2, #80]	@ 0x50
 8004962:	e003      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004968:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800496c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004978:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800497c:	2300      	movs	r3, #0
 800497e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004982:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004986:	460b      	mov	r3, r1
 8004988:	4313      	orrs	r3, r2
 800498a:	d039      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004992:	2b03      	cmp	r3, #3
 8004994:	d81c      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004996:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049d9 	.word	0x080049d9
 80049a0:	080049ad 	.word	0x080049ad
 80049a4:	080049bb 	.word	0x080049bb
 80049a8:	080049d9 	.word	0x080049d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ac:	4b9f      	ldr	r3, [pc, #636]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	4a9e      	ldr	r2, [pc, #632]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80049b8:	e00f      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049be:	3308      	adds	r3, #8
 80049c0:	2102      	movs	r1, #2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f001 f8e6 	bl	8005b94 <RCCEx_PLL2_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80049ce:	e004      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049d6:	e000      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80049d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049e2:	4b92      	ldr	r3, [pc, #584]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	f023 0103 	bic.w	r1, r3, #3
 80049ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f0:	4a8e      	ldr	r2, [pc, #568]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f000 8099 	beq.w	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a22:	4b83      	ldr	r3, [pc, #524]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a82      	ldr	r2, [pc, #520]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a2e:	f7fc ff19 	bl	8001864 <HAL_GetTick>
 8004a32:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a36:	e00b      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a38:	f7fc ff14 	bl	8001864 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	@ 0x64
 8004a46:	d903      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a4e:	e005      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a50:	4b77      	ldr	r3, [pc, #476]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ed      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d173      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a64:	4b71      	ldr	r3, [pc, #452]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a70:	4053      	eors	r3, r2
 8004a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d015      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a7a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a86:	4b69      	ldr	r3, [pc, #420]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8a:	4a68      	ldr	r2, [pc, #416]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a92:	4b66      	ldr	r3, [pc, #408]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	4a65      	ldr	r2, [pc, #404]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a9e:	4a63      	ldr	r2, [pc, #396]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aa4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab2:	d118      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fc fed6 	bl	8001864 <HAL_GetTick>
 8004ab8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004abc:	e00d      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004abe:	f7fc fed1 	bl	8001864 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004ac8:	1ad2      	subs	r2, r2, r3
 8004aca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d903      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004ad8:	e005      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ada:	4b54      	ldr	r3, [pc, #336]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0eb      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d129      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004afe:	d10e      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004b00:	4b4a      	ldr	r3, [pc, #296]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b10:	091a      	lsrs	r2, r3, #4
 8004b12:	4b48      	ldr	r3, [pc, #288]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	4a45      	ldr	r2, [pc, #276]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6113      	str	r3, [r2, #16]
 8004b1c:	e005      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004b1e:	4b43      	ldr	r3, [pc, #268]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	4a42      	ldr	r2, [pc, #264]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b28:	6113      	str	r3, [r2, #16]
 8004b2a:	4b40      	ldr	r3, [pc, #256]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b40:	e008      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004b4a:	e003      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f002 0301 	and.w	r3, r2, #1
 8004b60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b64:	2300      	movs	r3, #0
 8004b66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f000 808f 	beq.w	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b7c:	2b28      	cmp	r3, #40	@ 0x28
 8004b7e:	d871      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004b80:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004c6d 	.word	0x08004c6d
 8004b8c:	08004c65 	.word	0x08004c65
 8004b90:	08004c65 	.word	0x08004c65
 8004b94:	08004c65 	.word	0x08004c65
 8004b98:	08004c65 	.word	0x08004c65
 8004b9c:	08004c65 	.word	0x08004c65
 8004ba0:	08004c65 	.word	0x08004c65
 8004ba4:	08004c65 	.word	0x08004c65
 8004ba8:	08004c39 	.word	0x08004c39
 8004bac:	08004c65 	.word	0x08004c65
 8004bb0:	08004c65 	.word	0x08004c65
 8004bb4:	08004c65 	.word	0x08004c65
 8004bb8:	08004c65 	.word	0x08004c65
 8004bbc:	08004c65 	.word	0x08004c65
 8004bc0:	08004c65 	.word	0x08004c65
 8004bc4:	08004c65 	.word	0x08004c65
 8004bc8:	08004c4f 	.word	0x08004c4f
 8004bcc:	08004c65 	.word	0x08004c65
 8004bd0:	08004c65 	.word	0x08004c65
 8004bd4:	08004c65 	.word	0x08004c65
 8004bd8:	08004c65 	.word	0x08004c65
 8004bdc:	08004c65 	.word	0x08004c65
 8004be0:	08004c65 	.word	0x08004c65
 8004be4:	08004c65 	.word	0x08004c65
 8004be8:	08004c6d 	.word	0x08004c6d
 8004bec:	08004c65 	.word	0x08004c65
 8004bf0:	08004c65 	.word	0x08004c65
 8004bf4:	08004c65 	.word	0x08004c65
 8004bf8:	08004c65 	.word	0x08004c65
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004c65 	.word	0x08004c65
 8004c04:	08004c65 	.word	0x08004c65
 8004c08:	08004c6d 	.word	0x08004c6d
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004c65 	.word	0x08004c65
 8004c1c:	08004c65 	.word	0x08004c65
 8004c20:	08004c65 	.word	0x08004c65
 8004c24:	08004c65 	.word	0x08004c65
 8004c28:	08004c6d 	.word	0x08004c6d
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	58024800 	.word	0x58024800
 8004c34:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 ffa7 	bl	8005b94 <RCCEx_PLL2_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c4c:	e00f      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c52:	3328      	adds	r3, #40	@ 0x28
 8004c54:	2101      	movs	r1, #1
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 f84e 	bl	8005cf8 <RCCEx_PLL3_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c62:	e004      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c6a:	e000      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c76:	4bbf      	ldr	r3, [pc, #764]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c84:	4abb      	ldr	r2, [pc, #748]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c86:	430b      	orrs	r3, r1
 8004c88:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c8a:	e003      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f002 0302 	and.w	r3, r2, #2
 8004ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004caa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	d041      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cba:	2b05      	cmp	r3, #5
 8004cbc:	d824      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004d11 	.word	0x08004d11
 8004cc8:	08004cdd 	.word	0x08004cdd
 8004ccc:	08004cf3 	.word	0x08004cf3
 8004cd0:	08004d11 	.word	0x08004d11
 8004cd4:	08004d11 	.word	0x08004d11
 8004cd8:	08004d11 	.word	0x08004d11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 ff55 	bl	8005b94 <RCCEx_PLL2_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004cf0:	e00f      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf6:	3328      	adds	r3, #40	@ 0x28
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fffc 	bl	8005cf8 <RCCEx_PLL3_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d06:	e004      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d0e:	e000      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d1a:	4b96      	ldr	r3, [pc, #600]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1e:	f023 0107 	bic.w	r1, r3, #7
 8004d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d28:	4a92      	ldr	r2, [pc, #584]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d2e:	e003      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f002 0304 	and.w	r3, r2, #4
 8004d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d4e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d52:	460b      	mov	r3, r1
 8004d54:	4313      	orrs	r3, r2
 8004d56:	d044      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d60:	2b05      	cmp	r3, #5
 8004d62:	d825      	bhi.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004d64:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004db9 	.word	0x08004db9
 8004d70:	08004d85 	.word	0x08004d85
 8004d74:	08004d9b 	.word	0x08004d9b
 8004d78:	08004db9 	.word	0x08004db9
 8004d7c:	08004db9 	.word	0x08004db9
 8004d80:	08004db9 	.word	0x08004db9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d88:	3308      	adds	r3, #8
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 ff01 	bl	8005b94 <RCCEx_PLL2_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d98:	e00f      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9e:	3328      	adds	r3, #40	@ 0x28
 8004da0:	2101      	movs	r1, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 ffa8 	bl	8005cf8 <RCCEx_PLL3_Config>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004dae:	e004      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc6:	f023 0107 	bic.w	r1, r3, #7
 8004dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd2:	4a68      	ldr	r2, [pc, #416]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dd8:	e003      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f002 0320 	and.w	r3, r2, #32
 8004dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004df2:	2300      	movs	r3, #0
 8004df4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004df8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	d055      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e0e:	d033      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e14:	d82c      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1a:	d02f      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e20:	d826      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004e22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e26:	d02b      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004e28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e2c:	d820      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e32:	d012      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e38:	d81a      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d022      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e42:	d115      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e48:	3308      	adds	r3, #8
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fea1 	bl	8005b94 <RCCEx_PLL2_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e58:	e015      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5e:	3328      	adds	r3, #40	@ 0x28
 8004e60:	2102      	movs	r1, #2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 ff48 	bl	8005cf8 <RCCEx_PLL3_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e76:	e006      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004e78:	bf00      	nop
 8004e7a:	e004      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004e7c:	bf00      	nop
 8004e7e:	e002      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10b      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e8e:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e92:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e9e:	4a35      	ldr	r2, [pc, #212]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ea4:	e003      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004eba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ec4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d058      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ed6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004eda:	d033      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004edc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004ee0:	d82c      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee6:	d02f      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eec:	d826      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004eee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ef2:	d02b      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004ef4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ef8:	d820      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004efa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004efe:	d012      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f04:	d81a      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d022      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f0e:	d115      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f14:	3308      	adds	r3, #8
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fe3b 	bl	8005b94 <RCCEx_PLL2_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f24:	e015      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2a:	3328      	adds	r3, #40	@ 0x28
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fee2 	bl	8005cf8 <RCCEx_PLL3_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f42:	e006      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004f44:	bf00      	nop
 8004f46:	e004      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004f48:	bf00      	nop
 8004f4a:	e002      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004f4c:	bf00      	nop
 8004f4e:	e000      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10e      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f5a:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f6a:	4a02      	ldr	r2, [pc, #8]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f70:	e006      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004f72:	bf00      	nop
 8004f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f90:	2300      	movs	r3, #0
 8004f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	d055      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fa8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004fac:	d033      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004fae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004fb2:	d82c      	bhi.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb8:	d02f      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fbe:	d826      	bhi.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004fc0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004fc4:	d02b      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004fc6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004fca:	d820      	bhi.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fd0:	d012      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004fd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fd6:	d81a      	bhi.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d022      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe0:	d115      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fdd2 	bl	8005b94 <RCCEx_PLL2_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ff6:	e015      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	3328      	adds	r3, #40	@ 0x28
 8004ffe:	2102      	movs	r1, #2
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fe79 	bl	8005cf8 <RCCEx_PLL3_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800500c:	e00a      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005014:	e006      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005016:	bf00      	nop
 8005018:	e004      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10b      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800502c:	4ba0      	ldr	r3, [pc, #640]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005030:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005038:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800503c:	4a9c      	ldr	r2, [pc, #624]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800503e:	430b      	orrs	r3, r1
 8005040:	6593      	str	r3, [r2, #88]	@ 0x58
 8005042:	e003      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f002 0308 	and.w	r3, r2, #8
 8005058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005062:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005066:	460b      	mov	r3, r1
 8005068:	4313      	orrs	r3, r2
 800506a:	d01e      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800506c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005078:	d10c      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800507a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507e:	3328      	adds	r3, #40	@ 0x28
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fe38 	bl	8005cf8 <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005094:	4b86      	ldr	r3, [pc, #536]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005098:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800509c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a4:	4a82      	ldr	r2, [pc, #520]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050a6:	430b      	orrs	r3, r1
 80050a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f002 0310 	and.w	r3, r2, #16
 80050b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050ba:	2300      	movs	r3, #0
 80050bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d01e      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80050ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050dc:	3328      	adds	r3, #40	@ 0x28
 80050de:	2102      	movs	r1, #2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fe09 	bl	8005cf8 <RCCEx_PLL3_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050f2:	4b6f      	ldr	r3, [pc, #444]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005102:	4a6b      	ldr	r2, [pc, #428]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005104:	430b      	orrs	r3, r1
 8005106:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005116:	2300      	movs	r3, #0
 8005118:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800511a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800511e:	460b      	mov	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	d03e      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005128:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800512c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005130:	d022      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005136:	d81b      	bhi.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005140:	d00b      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005142:	e015      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005148:	3308      	adds	r3, #8
 800514a:	2100      	movs	r1, #0
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fd21 	bl	8005b94 <RCCEx_PLL2_Config>
 8005152:	4603      	mov	r3, r0
 8005154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005158:	e00f      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800515a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515e:	3328      	adds	r3, #40	@ 0x28
 8005160:	2102      	movs	r1, #2
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fdc8 	bl	8005cf8 <RCCEx_PLL3_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800516e:	e004      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005176:	e000      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005182:	4b4b      	ldr	r3, [pc, #300]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800518a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005192:	4a47      	ldr	r2, [pc, #284]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005194:	430b      	orrs	r3, r1
 8005196:	6593      	str	r3, [r2, #88]	@ 0x58
 8005198:	e003      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800519e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80051ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80051b0:	2300      	movs	r3, #0
 80051b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80051b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80051b8:	460b      	mov	r3, r1
 80051ba:	4313      	orrs	r3, r2
 80051bc:	d03b      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80051be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051ca:	d01f      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80051cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051d0:	d818      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80051d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051d6:	d003      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80051d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051dc:	d007      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80051de:	e011      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e0:	4b33      	ldr	r3, [pc, #204]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	4a32      	ldr	r2, [pc, #200]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80051ec:	e00f      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f2:	3328      	adds	r3, #40	@ 0x28
 80051f4:	2101      	movs	r1, #1
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fd7e 	bl	8005cf8 <RCCEx_PLL3_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005202:	e004      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800520c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005216:	4b26      	ldr	r3, [pc, #152]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800521e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005226:	4a22      	ldr	r2, [pc, #136]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005228:	430b      	orrs	r3, r1
 800522a:	6553      	str	r3, [r2, #84]	@ 0x54
 800522c:	e003      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005232:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005242:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005244:	2300      	movs	r3, #0
 8005246:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005248:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800524c:	460b      	mov	r3, r1
 800524e:	4313      	orrs	r3, r2
 8005250:	d034      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005260:	d007      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005262:	e011      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005264:	4b12      	ldr	r3, [pc, #72]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	4a11      	ldr	r2, [pc, #68]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800526a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800526e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005270:	e00e      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005276:	3308      	adds	r3, #8
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fc8a 	bl	8005b94 <RCCEx_PLL2_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005286:	e003      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800528e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10d      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005298:	4b05      	ldr	r3, [pc, #20]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800529a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a6:	4a02      	ldr	r2, [pc, #8]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052a8:	430b      	orrs	r3, r1
 80052aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052ac:	e006      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80052ae:	bf00      	nop
 80052b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80052c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ca:	2300      	movs	r3, #0
 80052cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80052ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80052d2:	460b      	mov	r3, r1
 80052d4:	4313      	orrs	r3, r2
 80052d6:	d00c      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052dc:	3328      	adds	r3, #40	@ 0x28
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fd09 	bl	8005cf8 <RCCEx_PLL3_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80052fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005300:	2300      	movs	r3, #0
 8005302:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005304:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005308:	460b      	mov	r3, r1
 800530a:	4313      	orrs	r3, r2
 800530c:	d036      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005318:	d018      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800531a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800531e:	d811      	bhi.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005324:	d014      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800532a:	d80b      	bhi.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d011      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005334:	d106      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005336:	4bb7      	ldr	r3, [pc, #732]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533a:	4ab6      	ldr	r2, [pc, #728]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800533c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005340:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005342:	e008      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800534a:	e004      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800534c:	bf00      	nop
 800534e:	e002      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800535e:	4bad      	ldr	r3, [pc, #692]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800536c:	4aa9      	ldr	r2, [pc, #676]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800536e:	430b      	orrs	r3, r1
 8005370:	6553      	str	r3, [r2, #84]	@ 0x54
 8005372:	e003      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005378:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005388:	653b      	str	r3, [r7, #80]	@ 0x50
 800538a:	2300      	movs	r3, #0
 800538c:	657b      	str	r3, [r7, #84]	@ 0x54
 800538e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005392:	460b      	mov	r3, r1
 8005394:	4313      	orrs	r3, r2
 8005396:	d009      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005398:	4b9e      	ldr	r3, [pc, #632]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800539a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80053a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a6:	4a9b      	ldr	r2, [pc, #620]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80053b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ba:	2300      	movs	r3, #0
 80053bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80053c2:	460b      	mov	r3, r1
 80053c4:	4313      	orrs	r3, r2
 80053c6:	d009      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053c8:	4b92      	ldr	r3, [pc, #584]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053d6:	4a8f      	ldr	r2, [pc, #572]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80053e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80053ea:	2300      	movs	r3, #0
 80053ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80053f2:	460b      	mov	r3, r1
 80053f4:	4313      	orrs	r3, r2
 80053f6:	d00e      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053f8:	4b86      	ldr	r3, [pc, #536]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	4a85      	ldr	r2, [pc, #532]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005402:	6113      	str	r3, [r2, #16]
 8005404:	4b83      	ldr	r3, [pc, #524]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005406:	6919      	ldr	r1, [r3, #16]
 8005408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005410:	4a80      	ldr	r2, [pc, #512]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005412:	430b      	orrs	r3, r1
 8005414:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005424:	2300      	movs	r3, #0
 8005426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005428:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800542c:	460b      	mov	r3, r1
 800542e:	4313      	orrs	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005432:	4b78      	ldr	r3, [pc, #480]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005436:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005440:	4a74      	ldr	r2, [pc, #464]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005442:	430b      	orrs	r3, r1
 8005444:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005452:	633b      	str	r3, [r7, #48]	@ 0x30
 8005454:	2300      	movs	r3, #0
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
 8005458:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800545c:	460b      	mov	r3, r1
 800545e:	4313      	orrs	r3, r2
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005462:	4b6c      	ldr	r3, [pc, #432]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800546a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005472:	4a68      	ldr	r2, [pc, #416]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005474:	430b      	orrs	r3, r1
 8005476:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	2100      	movs	r1, #0
 8005482:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800548a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	d011      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005498:	3308      	adds	r3, #8
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fb79 	bl	8005b94 <RCCEx_PLL2_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80054a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	2100      	movs	r1, #0
 80054c2:	6239      	str	r1, [r7, #32]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054ce:	460b      	mov	r3, r1
 80054d0:	4313      	orrs	r3, r2
 80054d2:	d011      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d8:	3308      	adds	r3, #8
 80054da:	2101      	movs	r1, #1
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fb59 	bl	8005b94 <RCCEx_PLL2_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80054e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	2100      	movs	r1, #0
 8005502:	61b9      	str	r1, [r7, #24]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800550e:	460b      	mov	r3, r1
 8005510:	4313      	orrs	r3, r2
 8005512:	d011      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005518:	3308      	adds	r3, #8
 800551a:	2102      	movs	r1, #2
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fb39 	bl	8005b94 <RCCEx_PLL2_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005534:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	2100      	movs	r1, #0
 8005542:	6139      	str	r1, [r7, #16]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800554e:	460b      	mov	r3, r1
 8005550:	4313      	orrs	r3, r2
 8005552:	d011      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005558:	3328      	adds	r3, #40	@ 0x28
 800555a:	2100      	movs	r1, #0
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fbcb 	bl	8005cf8 <RCCEx_PLL3_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005574:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	2100      	movs	r1, #0
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800558e:	460b      	mov	r3, r1
 8005590:	4313      	orrs	r3, r2
 8005592:	d011      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005598:	3328      	adds	r3, #40	@ 0x28
 800559a:	2101      	movs	r1, #1
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fbab 	bl	8005cf8 <RCCEx_PLL3_Config>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80055a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	2100      	movs	r1, #0
 80055c2:	6039      	str	r1, [r7, #0]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	d011      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d8:	3328      	adds	r3, #40	@ 0x28
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fb8b 	bl	8005cf8 <RCCEx_PLL3_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80055e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80055f8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
}
 8005606:	4618      	mov	r0, r3
 8005608:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800560c:	46bd      	mov	sp, r7
 800560e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005612:	bf00      	nop
 8005614:	58024400 	.word	0x58024400

08005618 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800561c:	f7fe fe00 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8005620:	4602      	mov	r2, r0
 8005622:	4b06      	ldr	r3, [pc, #24]	@ (800563c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	091b      	lsrs	r3, r3, #4
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	4904      	ldr	r1, [pc, #16]	@ (8005640 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800562e:	5ccb      	ldrb	r3, [r1, r3]
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005638:	4618      	mov	r0, r3
 800563a:	bd80      	pop	{r7, pc}
 800563c:	58024400 	.word	0x58024400
 8005640:	0800b40c 	.word	0x0800b40c

08005644 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	@ 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800564c:	4ba1      	ldr	r3, [pc, #644]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005656:	4b9f      	ldr	r3, [pc, #636]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	0b1b      	lsrs	r3, r3, #12
 800565c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005660:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005662:	4b9c      	ldr	r3, [pc, #624]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800566e:	4b99      	ldr	r3, [pc, #612]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005672:	08db      	lsrs	r3, r3, #3
 8005674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	fb02 f303 	mul.w	r3, r2, r3
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005686:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 8111 	beq.w	80058b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b02      	cmp	r3, #2
 8005696:	f000 8083 	beq.w	80057a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b02      	cmp	r3, #2
 800569e:	f200 80a1 	bhi.w	80057e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d056      	beq.n	800575c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80056ae:	e099      	b.n	80057e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056b0:	4b88      	ldr	r3, [pc, #544]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d02d      	beq.n	8005718 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056bc:	4b85      	ldr	r3, [pc, #532]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	08db      	lsrs	r3, r3, #3
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	4a84      	ldr	r2, [pc, #528]	@ (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e6:	4b7b      	ldr	r3, [pc, #492]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800570a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005716:	e087      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572a:	4b6a      	ldr	r3, [pc, #424]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573a:	ed97 6a03 	vldr	s12, [r7, #12]
 800573e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800574e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800575a:	e065      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005766:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800576a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576e:	4b59      	ldr	r3, [pc, #356]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005782:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800579e:	e043      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80057ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b2:	4b48      	ldr	r3, [pc, #288]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057e2:	e021      	b.n	8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f6:	4b37      	ldr	r3, [pc, #220]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005806:	ed97 6a03 	vldr	s12, [r7, #12]
 800580a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800580e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800581a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005826:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005828:	4b2a      	ldr	r3, [pc, #168]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800582a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582c:	0a5b      	lsrs	r3, r3, #9
 800582e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800583e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005842:	edd7 6a07 	vldr	s13, [r7, #28]
 8005846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800584a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800584e:	ee17 2a90 	vmov	r2, s15
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005856:	4b1f      	ldr	r3, [pc, #124]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005868:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800586c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005870:	edd7 6a07 	vldr	s13, [r7, #28]
 8005874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800587c:	ee17 2a90 	vmov	r2, s15
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005884:	4b13      	ldr	r3, [pc, #76]	@ (80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005888:	0e1b      	lsrs	r3, r3, #24
 800588a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800589a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800589e:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058aa:	ee17 2a90 	vmov	r2, s15
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058b2:	e008      	b.n	80058c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	609a      	str	r2, [r3, #8]
}
 80058c6:	bf00      	nop
 80058c8:	3724      	adds	r7, #36	@ 0x24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	58024400 	.word	0x58024400
 80058d8:	03d09000 	.word	0x03d09000
 80058dc:	46000000 	.word	0x46000000
 80058e0:	4c742400 	.word	0x4c742400
 80058e4:	4a742400 	.word	0x4a742400
 80058e8:	4bbebc20 	.word	0x4bbebc20

080058ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b089      	sub	sp, #36	@ 0x24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058f4:	4ba1      	ldr	r3, [pc, #644]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80058fe:	4b9f      	ldr	r3, [pc, #636]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005902:	0d1b      	lsrs	r3, r3, #20
 8005904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005908:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800590a:	4b9c      	ldr	r3, [pc, #624]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800590c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005916:	4b99      	ldr	r3, [pc, #612]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591a:	08db      	lsrs	r3, r3, #3
 800591c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8111 	beq.w	8005b5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b02      	cmp	r3, #2
 800593e:	f000 8083 	beq.w	8005a48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b02      	cmp	r3, #2
 8005946:	f200 80a1 	bhi.w	8005a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d056      	beq.n	8005a04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005956:	e099      	b.n	8005a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005958:	4b88      	ldr	r3, [pc, #544]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d02d      	beq.n	80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005964:	4b85      	ldr	r3, [pc, #532]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	4a84      	ldr	r2, [pc, #528]	@ (8005b80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
 8005974:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	ee07 3a90 	vmov	s15, r3
 800597c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800598e:	4b7b      	ldr	r3, [pc, #492]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599e:	ed97 6a03 	vldr	s12, [r7, #12]
 80059a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059be:	e087      	b.n	8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80059ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059d2:	4b6a      	ldr	r3, [pc, #424]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a02:	e065      	b.n	8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a16:	4b59      	ldr	r3, [pc, #356]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a46:	e043      	b.n	8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5a:	4b48      	ldr	r3, [pc, #288]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a8a:	e021      	b.n	8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a9e:	4b37      	ldr	r3, [pc, #220]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ab2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ace:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad4:	0a5b      	lsrs	r3, r3, #9
 8005ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005af6:	ee17 2a90 	vmov	r2, s15
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005afe:	4b1f      	ldr	r3, [pc, #124]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b02:	0c1b      	lsrs	r3, r3, #16
 8005b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b08:	ee07 3a90 	vmov	s15, r3
 8005b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b24:	ee17 2a90 	vmov	r2, s15
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005b2c:	4b13      	ldr	r3, [pc, #76]	@ (8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b30:	0e1b      	lsrs	r3, r3, #24
 8005b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b52:	ee17 2a90 	vmov	r2, s15
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b5a:	e008      	b.n	8005b6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	609a      	str	r2, [r3, #8]
}
 8005b6e:	bf00      	nop
 8005b70:	3724      	adds	r7, #36	@ 0x24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	58024400 	.word	0x58024400
 8005b80:	03d09000 	.word	0x03d09000
 8005b84:	46000000 	.word	0x46000000
 8005b88:	4c742400 	.word	0x4c742400
 8005b8c:	4a742400 	.word	0x4a742400
 8005b90:	4bbebc20 	.word	0x4bbebc20

08005b94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ba2:	4b53      	ldr	r3, [pc, #332]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d101      	bne.n	8005bb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e099      	b.n	8005ce6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a4e      	ldr	r2, [pc, #312]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005bb8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bbe:	f7fb fe51 	bl	8001864 <HAL_GetTick>
 8005bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bc4:	e008      	b.n	8005bd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bc6:	f7fb fe4d 	bl	8001864 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e086      	b.n	8005ce6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bd8:	4b45      	ldr	r3, [pc, #276]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1f0      	bne.n	8005bc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005be4:	4b42      	ldr	r3, [pc, #264]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	031b      	lsls	r3, r3, #12
 8005bf2:	493f      	ldr	r1, [pc, #252]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	025b      	lsls	r3, r3, #9
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	061b      	lsls	r3, r3, #24
 8005c24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c28:	4931      	ldr	r1, [pc, #196]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c2e:	4b30      	ldr	r3, [pc, #192]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	492d      	ldr	r1, [pc, #180]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c40:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	f023 0220 	bic.w	r2, r3, #32
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	4928      	ldr	r1, [pc, #160]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c52:	4b27      	ldr	r3, [pc, #156]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c56:	4a26      	ldr	r2, [pc, #152]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c58:	f023 0310 	bic.w	r3, r3, #16
 8005c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c5e:	4b24      	ldr	r3, [pc, #144]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c62:	4b24      	ldr	r3, [pc, #144]	@ (8005cf4 <RCCEx_PLL2_Config+0x160>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	69d2      	ldr	r2, [r2, #28]
 8005c6a:	00d2      	lsls	r2, r2, #3
 8005c6c:	4920      	ldr	r1, [pc, #128]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c72:	4b1f      	ldr	r3, [pc, #124]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c78:	f043 0310 	orr.w	r3, r3, #16
 8005c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c84:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c88:	4a19      	ldr	r2, [pc, #100]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c90:	e00f      	b.n	8005cb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d106      	bne.n	8005ca6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c98:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	4a14      	ldr	r2, [pc, #80]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ca4:	e005      	b.n	8005cb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ca6:	4b12      	ldr	r3, [pc, #72]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	4a11      	ldr	r2, [pc, #68]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005cac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005cb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cbe:	f7fb fdd1 	bl	8001864 <HAL_GetTick>
 8005cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cc4:	e008      	b.n	8005cd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cc6:	f7fb fdcd 	bl	8001864 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e006      	b.n	8005ce6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cd8:	4b05      	ldr	r3, [pc, #20]	@ (8005cf0 <RCCEx_PLL2_Config+0x15c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f0      	beq.n	8005cc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	58024400 	.word	0x58024400
 8005cf4:	ffff0007 	.word	0xffff0007

08005cf8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d06:	4b53      	ldr	r3, [pc, #332]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d101      	bne.n	8005d16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e099      	b.n	8005e4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d16:	4b4f      	ldr	r3, [pc, #316]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d22:	f7fb fd9f 	bl	8001864 <HAL_GetTick>
 8005d26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d28:	e008      	b.n	8005d3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d2a:	f7fb fd9b 	bl	8001864 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e086      	b.n	8005e4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d3c:	4b45      	ldr	r3, [pc, #276]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f0      	bne.n	8005d2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d48:	4b42      	ldr	r3, [pc, #264]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	051b      	lsls	r3, r3, #20
 8005d56:	493f      	ldr	r1, [pc, #252]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	025b      	lsls	r3, r3, #9
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	041b      	lsls	r3, r3, #16
 8005d7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	061b      	lsls	r3, r3, #24
 8005d88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d8c:	4931      	ldr	r1, [pc, #196]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005d92:	4b30      	ldr	r3, [pc, #192]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	492d      	ldr	r1, [pc, #180]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005da4:	4b2b      	ldr	r3, [pc, #172]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	4928      	ldr	r1, [pc, #160]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005db6:	4b27      	ldr	r3, [pc, #156]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dba:	4a26      	ldr	r2, [pc, #152]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005dc2:	4b24      	ldr	r3, [pc, #144]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dc6:	4b24      	ldr	r3, [pc, #144]	@ (8005e58 <RCCEx_PLL3_Config+0x160>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	69d2      	ldr	r2, [r2, #28]
 8005dce:	00d2      	lsls	r2, r2, #3
 8005dd0:	4920      	ldr	r1, [pc, #128]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	4a1e      	ldr	r2, [pc, #120]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005de8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dec:	4a19      	ldr	r2, [pc, #100]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005dee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005df2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005df4:	e00f      	b.n	8005e16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d106      	bne.n	8005e0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005dfc:	4b15      	ldr	r3, [pc, #84]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	4a14      	ldr	r2, [pc, #80]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005e02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e08:	e005      	b.n	8005e16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e0a:	4b12      	ldr	r3, [pc, #72]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	4a11      	ldr	r2, [pc, #68]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005e10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e16:	4b0f      	ldr	r3, [pc, #60]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e22:	f7fb fd1f 	bl	8001864 <HAL_GetTick>
 8005e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e28:	e008      	b.n	8005e3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e2a:	f7fb fd1b 	bl	8001864 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e006      	b.n	8005e4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e3c:	4b05      	ldr	r3, [pc, #20]	@ (8005e54 <RCCEx_PLL3_Config+0x15c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0f0      	beq.n	8005e2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	58024400 	.word	0x58024400
 8005e58:	ffff0007 	.word	0xffff0007

08005e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e049      	b.n	8005f02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fb f950 	bl	8001128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	f000 fa66 	bl	800636c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <HAL_TIM_PWM_Start+0x24>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	bf14      	ite	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	2300      	moveq	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	e03c      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d109      	bne.n	8005f4a <HAL_TIM_PWM_Start+0x3e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	bf14      	ite	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	2300      	moveq	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	e02f      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d109      	bne.n	8005f64 <HAL_TIM_PWM_Start+0x58>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e022      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b0c      	cmp	r3, #12
 8005f68:	d109      	bne.n	8005f7e <HAL_TIM_PWM_Start+0x72>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	bf14      	ite	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	e015      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b10      	cmp	r3, #16
 8005f82:	d109      	bne.n	8005f98 <HAL_TIM_PWM_Start+0x8c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e008      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	bf14      	ite	ne
 8005fa4:	2301      	movne	r3, #1
 8005fa6:	2300      	moveq	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e0ab      	b.n	800610a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0xb6>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fc0:	e023      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0xc6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fd0:	e01b      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xd6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fe0:	e013      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b0c      	cmp	r3, #12
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0xe6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ff0:	e00b      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d104      	bne.n	8006002 <HAL_TIM_PWM_Start+0xf6>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006000:	e003      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2201      	movs	r2, #1
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fd2c 	bl	8006a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a3d      	ldr	r2, [pc, #244]	@ (8006114 <HAL_TIM_PWM_Start+0x208>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_TIM_PWM_Start+0x13e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a3c      	ldr	r2, [pc, #240]	@ (8006118 <HAL_TIM_PWM_Start+0x20c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00e      	beq.n	800604a <HAL_TIM_PWM_Start+0x13e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a3a      	ldr	r2, [pc, #232]	@ (800611c <HAL_TIM_PWM_Start+0x210>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_TIM_PWM_Start+0x13e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a39      	ldr	r2, [pc, #228]	@ (8006120 <HAL_TIM_PWM_Start+0x214>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_TIM_PWM_Start+0x13e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a37      	ldr	r2, [pc, #220]	@ (8006124 <HAL_TIM_PWM_Start+0x218>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d101      	bne.n	800604e <HAL_TIM_PWM_Start+0x142>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_TIM_PWM_Start+0x144>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006062:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2a      	ldr	r2, [pc, #168]	@ (8006114 <HAL_TIM_PWM_Start+0x208>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d02c      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1bc>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006076:	d027      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1bc>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2a      	ldr	r2, [pc, #168]	@ (8006128 <HAL_TIM_PWM_Start+0x21c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d022      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1bc>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a29      	ldr	r2, [pc, #164]	@ (800612c <HAL_TIM_PWM_Start+0x220>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d01d      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1bc>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a27      	ldr	r2, [pc, #156]	@ (8006130 <HAL_TIM_PWM_Start+0x224>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d018      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1bc>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1f      	ldr	r2, [pc, #124]	@ (8006118 <HAL_TIM_PWM_Start+0x20c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1bc>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a23      	ldr	r2, [pc, #140]	@ (8006134 <HAL_TIM_PWM_Start+0x228>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00e      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1bc>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	@ (800611c <HAL_TIM_PWM_Start+0x210>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d009      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1bc>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006138 <HAL_TIM_PWM_Start+0x22c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1bc>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1e      	ldr	r2, [pc, #120]	@ (800613c <HAL_TIM_PWM_Start+0x230>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d115      	bne.n	80060f4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006140 <HAL_TIM_PWM_Start+0x234>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b06      	cmp	r3, #6
 80060d8:	d015      	beq.n	8006106 <HAL_TIM_PWM_Start+0x1fa>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e0:	d011      	beq.n	8006106 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0201 	orr.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f2:	e008      	b.n	8006106 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e000      	b.n	8006108 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40010400 	.word	0x40010400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800
 8006130:	40000c00 	.word	0x40000c00
 8006134:	40001800 	.word	0x40001800
 8006138:	4000e000 	.word	0x4000e000
 800613c:	4000e400 	.word	0x4000e400
 8006140:	00010007 	.word	0x00010007

08006144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800615e:	2302      	movs	r3, #2
 8006160:	e0ff      	b.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b14      	cmp	r3, #20
 800616e:	f200 80f0 	bhi.w	8006352 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006172:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061cd 	.word	0x080061cd
 800617c:	08006353 	.word	0x08006353
 8006180:	08006353 	.word	0x08006353
 8006184:	08006353 	.word	0x08006353
 8006188:	0800620d 	.word	0x0800620d
 800618c:	08006353 	.word	0x08006353
 8006190:	08006353 	.word	0x08006353
 8006194:	08006353 	.word	0x08006353
 8006198:	0800624f 	.word	0x0800624f
 800619c:	08006353 	.word	0x08006353
 80061a0:	08006353 	.word	0x08006353
 80061a4:	08006353 	.word	0x08006353
 80061a8:	0800628f 	.word	0x0800628f
 80061ac:	08006353 	.word	0x08006353
 80061b0:	08006353 	.word	0x08006353
 80061b4:	08006353 	.word	0x08006353
 80061b8:	080062d1 	.word	0x080062d1
 80061bc:	08006353 	.word	0x08006353
 80061c0:	08006353 	.word	0x08006353
 80061c4:	08006353 	.word	0x08006353
 80061c8:	08006311 	.word	0x08006311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f976 	bl	80064c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0208 	orr.w	r2, r2, #8
 80061e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0204 	bic.w	r2, r2, #4
 80061f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6999      	ldr	r1, [r3, #24]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	619a      	str	r2, [r3, #24]
      break;
 800620a:	e0a5      	b.n	8006358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f9e6 	bl	80065e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6999      	ldr	r1, [r3, #24]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	619a      	str	r2, [r3, #24]
      break;
 800624c:	e084      	b.n	8006358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fa4f 	bl	80066f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0208 	orr.w	r2, r2, #8
 8006268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0204 	bic.w	r2, r2, #4
 8006278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69d9      	ldr	r1, [r3, #28]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	61da      	str	r2, [r3, #28]
      break;
 800628c:	e064      	b.n	8006358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fab7 	bl	8006808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69d9      	ldr	r1, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	021a      	lsls	r2, r3, #8
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	61da      	str	r2, [r3, #28]
      break;
 80062ce:	e043      	b.n	8006358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fb00 	bl	80068dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0208 	orr.w	r2, r2, #8
 80062ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0204 	bic.w	r2, r2, #4
 80062fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800630e:	e023      	b.n	8006358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fb44 	bl	80069a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800632a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800633a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	021a      	lsls	r2, r3, #8
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006350:	e002      	b.n	8006358 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	75fb      	strb	r3, [r7, #23]
      break;
 8006356:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop

0800636c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a47      	ldr	r2, [pc, #284]	@ (800649c <TIM_Base_SetConfig+0x130>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638a:	d00f      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a44      	ldr	r2, [pc, #272]	@ (80064a0 <TIM_Base_SetConfig+0x134>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00b      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a43      	ldr	r2, [pc, #268]	@ (80064a4 <TIM_Base_SetConfig+0x138>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a42      	ldr	r2, [pc, #264]	@ (80064a8 <TIM_Base_SetConfig+0x13c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a41      	ldr	r2, [pc, #260]	@ (80064ac <TIM_Base_SetConfig+0x140>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a36      	ldr	r2, [pc, #216]	@ (800649c <TIM_Base_SetConfig+0x130>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d027      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063cc:	d023      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a33      	ldr	r2, [pc, #204]	@ (80064a0 <TIM_Base_SetConfig+0x134>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01f      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a32      	ldr	r2, [pc, #200]	@ (80064a4 <TIM_Base_SetConfig+0x138>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01b      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a31      	ldr	r2, [pc, #196]	@ (80064a8 <TIM_Base_SetConfig+0x13c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d017      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a30      	ldr	r2, [pc, #192]	@ (80064ac <TIM_Base_SetConfig+0x140>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d013      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2f      	ldr	r2, [pc, #188]	@ (80064b0 <TIM_Base_SetConfig+0x144>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00f      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2e      	ldr	r2, [pc, #184]	@ (80064b4 <TIM_Base_SetConfig+0x148>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00b      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2d      	ldr	r2, [pc, #180]	@ (80064b8 <TIM_Base_SetConfig+0x14c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d007      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2c      	ldr	r2, [pc, #176]	@ (80064bc <TIM_Base_SetConfig+0x150>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_Base_SetConfig+0xaa>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2b      	ldr	r2, [pc, #172]	@ (80064c0 <TIM_Base_SetConfig+0x154>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d108      	bne.n	8006428 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800641c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a14      	ldr	r2, [pc, #80]	@ (800649c <TIM_Base_SetConfig+0x130>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00f      	beq.n	800646e <TIM_Base_SetConfig+0x102>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a16      	ldr	r2, [pc, #88]	@ (80064ac <TIM_Base_SetConfig+0x140>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00b      	beq.n	800646e <TIM_Base_SetConfig+0x102>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a15      	ldr	r2, [pc, #84]	@ (80064b0 <TIM_Base_SetConfig+0x144>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <TIM_Base_SetConfig+0x102>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a14      	ldr	r2, [pc, #80]	@ (80064b4 <TIM_Base_SetConfig+0x148>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_Base_SetConfig+0x102>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a13      	ldr	r2, [pc, #76]	@ (80064b8 <TIM_Base_SetConfig+0x14c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d103      	bne.n	8006476 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	691a      	ldr	r2, [r3, #16]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f043 0204 	orr.w	r2, r3, #4
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	601a      	str	r2, [r3, #0]
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40010400 	.word	0x40010400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800
 80064bc:	4000e000 	.word	0x4000e000
 80064c0:	4000e400 	.word	0x4000e400

080064c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f023 0201 	bic.w	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4b37      	ldr	r3, [pc, #220]	@ (80065cc <TIM_OC1_SetConfig+0x108>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f023 0302 	bic.w	r3, r3, #2
 800650c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a2d      	ldr	r2, [pc, #180]	@ (80065d0 <TIM_OC1_SetConfig+0x10c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00f      	beq.n	8006540 <TIM_OC1_SetConfig+0x7c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a2c      	ldr	r2, [pc, #176]	@ (80065d4 <TIM_OC1_SetConfig+0x110>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00b      	beq.n	8006540 <TIM_OC1_SetConfig+0x7c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a2b      	ldr	r2, [pc, #172]	@ (80065d8 <TIM_OC1_SetConfig+0x114>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d007      	beq.n	8006540 <TIM_OC1_SetConfig+0x7c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a2a      	ldr	r2, [pc, #168]	@ (80065dc <TIM_OC1_SetConfig+0x118>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_OC1_SetConfig+0x7c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a29      	ldr	r2, [pc, #164]	@ (80065e0 <TIM_OC1_SetConfig+0x11c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d10c      	bne.n	800655a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0308 	bic.w	r3, r3, #8
 8006546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f023 0304 	bic.w	r3, r3, #4
 8006558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1c      	ldr	r2, [pc, #112]	@ (80065d0 <TIM_OC1_SetConfig+0x10c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00f      	beq.n	8006582 <TIM_OC1_SetConfig+0xbe>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1b      	ldr	r2, [pc, #108]	@ (80065d4 <TIM_OC1_SetConfig+0x110>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00b      	beq.n	8006582 <TIM_OC1_SetConfig+0xbe>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1a      	ldr	r2, [pc, #104]	@ (80065d8 <TIM_OC1_SetConfig+0x114>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d007      	beq.n	8006582 <TIM_OC1_SetConfig+0xbe>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a19      	ldr	r2, [pc, #100]	@ (80065dc <TIM_OC1_SetConfig+0x118>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_OC1_SetConfig+0xbe>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a18      	ldr	r2, [pc, #96]	@ (80065e0 <TIM_OC1_SetConfig+0x11c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d111      	bne.n	80065a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	fffeff8f 	.word	0xfffeff8f
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40010400 	.word	0x40010400
 80065d8:	40014000 	.word	0x40014000
 80065dc:	40014400 	.word	0x40014400
 80065e0:	40014800 	.word	0x40014800

080065e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	f023 0210 	bic.w	r2, r3, #16
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4b34      	ldr	r3, [pc, #208]	@ (80066e0 <TIM_OC2_SetConfig+0xfc>)
 8006610:	4013      	ands	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0320 	bic.w	r3, r3, #32
 800662e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a29      	ldr	r2, [pc, #164]	@ (80066e4 <TIM_OC2_SetConfig+0x100>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_OC2_SetConfig+0x68>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a28      	ldr	r2, [pc, #160]	@ (80066e8 <TIM_OC2_SetConfig+0x104>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d10d      	bne.n	8006668 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006666:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a1e      	ldr	r2, [pc, #120]	@ (80066e4 <TIM_OC2_SetConfig+0x100>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00f      	beq.n	8006690 <TIM_OC2_SetConfig+0xac>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a1d      	ldr	r2, [pc, #116]	@ (80066e8 <TIM_OC2_SetConfig+0x104>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00b      	beq.n	8006690 <TIM_OC2_SetConfig+0xac>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a1c      	ldr	r2, [pc, #112]	@ (80066ec <TIM_OC2_SetConfig+0x108>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d007      	beq.n	8006690 <TIM_OC2_SetConfig+0xac>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a1b      	ldr	r2, [pc, #108]	@ (80066f0 <TIM_OC2_SetConfig+0x10c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC2_SetConfig+0xac>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a1a      	ldr	r2, [pc, #104]	@ (80066f4 <TIM_OC2_SetConfig+0x110>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d113      	bne.n	80066b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800669e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	feff8fff 	.word	0xfeff8fff
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800

080066f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4b33      	ldr	r3, [pc, #204]	@ (80067f0 <TIM_OC3_SetConfig+0xf8>)
 8006724:	4013      	ands	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a28      	ldr	r2, [pc, #160]	@ (80067f4 <TIM_OC3_SetConfig+0xfc>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d003      	beq.n	800675e <TIM_OC3_SetConfig+0x66>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a27      	ldr	r2, [pc, #156]	@ (80067f8 <TIM_OC3_SetConfig+0x100>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d10d      	bne.n	800677a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1d      	ldr	r2, [pc, #116]	@ (80067f4 <TIM_OC3_SetConfig+0xfc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00f      	beq.n	80067a2 <TIM_OC3_SetConfig+0xaa>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <TIM_OC3_SetConfig+0x100>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00b      	beq.n	80067a2 <TIM_OC3_SetConfig+0xaa>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <TIM_OC3_SetConfig+0x104>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <TIM_OC3_SetConfig+0xaa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1a      	ldr	r2, [pc, #104]	@ (8006800 <TIM_OC3_SetConfig+0x108>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_OC3_SetConfig+0xaa>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a19      	ldr	r2, [pc, #100]	@ (8006804 <TIM_OC3_SetConfig+0x10c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d113      	bne.n	80067ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	621a      	str	r2, [r3, #32]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	fffeff8f 	.word	0xfffeff8f
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40014400 	.word	0x40014400
 8006804:	40014800 	.word	0x40014800

08006808 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4b24      	ldr	r3, [pc, #144]	@ (80068c4 <TIM_OC4_SetConfig+0xbc>)
 8006834:	4013      	ands	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800683e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	031b      	lsls	r3, r3, #12
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <TIM_OC4_SetConfig+0xc0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00f      	beq.n	8006888 <TIM_OC4_SetConfig+0x80>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a18      	ldr	r2, [pc, #96]	@ (80068cc <TIM_OC4_SetConfig+0xc4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_OC4_SetConfig+0x80>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a17      	ldr	r2, [pc, #92]	@ (80068d0 <TIM_OC4_SetConfig+0xc8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_OC4_SetConfig+0x80>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a16      	ldr	r2, [pc, #88]	@ (80068d4 <TIM_OC4_SetConfig+0xcc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_OC4_SetConfig+0x80>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a15      	ldr	r2, [pc, #84]	@ (80068d8 <TIM_OC4_SetConfig+0xd0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d109      	bne.n	800689c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800688e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	019b      	lsls	r3, r3, #6
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	feff8fff 	.word	0xfeff8fff
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40010400 	.word	0x40010400
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800

080068dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4b21      	ldr	r3, [pc, #132]	@ (800698c <TIM_OC5_SetConfig+0xb0>)
 8006908:	4013      	ands	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800691c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	041b      	lsls	r3, r3, #16
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a18      	ldr	r2, [pc, #96]	@ (8006990 <TIM_OC5_SetConfig+0xb4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00f      	beq.n	8006952 <TIM_OC5_SetConfig+0x76>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a17      	ldr	r2, [pc, #92]	@ (8006994 <TIM_OC5_SetConfig+0xb8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00b      	beq.n	8006952 <TIM_OC5_SetConfig+0x76>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a16      	ldr	r2, [pc, #88]	@ (8006998 <TIM_OC5_SetConfig+0xbc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d007      	beq.n	8006952 <TIM_OC5_SetConfig+0x76>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a15      	ldr	r2, [pc, #84]	@ (800699c <TIM_OC5_SetConfig+0xc0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d003      	beq.n	8006952 <TIM_OC5_SetConfig+0x76>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a14      	ldr	r2, [pc, #80]	@ (80069a0 <TIM_OC5_SetConfig+0xc4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d109      	bne.n	8006966 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006958:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	fffeff8f 	.word	0xfffeff8f
 8006990:	40010000 	.word	0x40010000
 8006994:	40010400 	.word	0x40010400
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800

080069a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4b22      	ldr	r3, [pc, #136]	@ (8006a58 <TIM_OC6_SetConfig+0xb4>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	021b      	lsls	r3, r3, #8
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	051b      	lsls	r3, r3, #20
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a19      	ldr	r2, [pc, #100]	@ (8006a5c <TIM_OC6_SetConfig+0xb8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00f      	beq.n	8006a1c <TIM_OC6_SetConfig+0x78>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a18      	ldr	r2, [pc, #96]	@ (8006a60 <TIM_OC6_SetConfig+0xbc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <TIM_OC6_SetConfig+0x78>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a17      	ldr	r2, [pc, #92]	@ (8006a64 <TIM_OC6_SetConfig+0xc0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_OC6_SetConfig+0x78>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a16      	ldr	r2, [pc, #88]	@ (8006a68 <TIM_OC6_SetConfig+0xc4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_OC6_SetConfig+0x78>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a15      	ldr	r2, [pc, #84]	@ (8006a6c <TIM_OC6_SetConfig+0xc8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d109      	bne.n	8006a30 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	feff8fff 	.word	0xfeff8fff
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40010400 	.word	0x40010400
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800

08006a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	2201      	movs	r2, #1
 8006a84:	fa02 f303 	lsl.w	r3, r2, r3
 8006a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a1a      	ldr	r2, [r3, #32]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	43db      	mvns	r3, r3
 8006a92:	401a      	ands	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1a      	ldr	r2, [r3, #32]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 031f 	and.w	r3, r3, #31
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e077      	b.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a35      	ldr	r2, [pc, #212]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a34      	ldr	r2, [pc, #208]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d108      	bne.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a25      	ldr	r2, [pc, #148]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d02c      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b46:	d027      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a22      	ldr	r2, [pc, #136]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d022      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a21      	ldr	r2, [pc, #132]	@ (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d01d      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1f      	ldr	r2, [pc, #124]	@ (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d018      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1b      	ldr	r2, [pc, #108]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00e      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a18      	ldr	r2, [pc, #96]	@ (8006bec <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a17      	ldr	r2, [pc, #92]	@ (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10c      	bne.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40010400 	.word	0x40010400
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	40001800 	.word	0x40001800
 8006be8:	40014000 	.word	0x40014000
 8006bec:	4000e000 	.word	0x4000e000
 8006bf0:	4000e400 	.word	0x4000e400

08006bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e073      	b.n	8006cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	041b      	lsls	r3, r3, #16
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a19      	ldr	r2, [pc, #100]	@ (8006d04 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d004      	beq.n	8006cac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a18      	ldr	r2, [pc, #96]	@ (8006d08 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d11c      	bne.n	8006ce6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb6:	051b      	lsls	r3, r3, #20
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	40010000 	.word	0x40010000
 8006d08:	40010400 	.word	0x40010400

08006d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e042      	b.n	8006da4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7fa fa57 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2224      	movs	r2, #36	@ 0x24
 8006d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0201 	bic.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fb18 	bl	800838c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fca9 	bl	80076b4 <UART_SetConfig>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e01b      	b.n	8006da4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fb97 	bl	80084d0 <UART_CheckIdleState>
 8006da2:	4603      	mov	r3, r0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	@ 0x28
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d17b      	bne.n	8006ebe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <HAL_UART_Transmit+0x26>
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e074      	b.n	8006ec0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2221      	movs	r2, #33	@ 0x21
 8006de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006de6:	f7fa fd3d 	bl	8001864 <HAL_GetTick>
 8006dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	88fa      	ldrh	r2, [r7, #6]
 8006df0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	88fa      	ldrh	r2, [r7, #6]
 8006df8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e04:	d108      	bne.n	8006e18 <HAL_UART_Transmit+0x6c>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e003      	b.n	8006e20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e20:	e030      	b.n	8006e84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2180      	movs	r1, #128	@ 0x80
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f001 fbf9 	bl	8008624 <UART_WaitOnFlagUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e03d      	b.n	8006ec0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e007      	b.n	8006e72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1c8      	bne.n	8006e22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2200      	movs	r2, #0
 8006e98:	2140      	movs	r1, #64	@ 0x40
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f001 fbc2 	bl	8008624 <UART_WaitOnFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e006      	b.n	8006ec0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e000      	b.n	8006ec0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006ebe:	2302      	movs	r3, #2
  }
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b0ba      	sub	sp, #232	@ 0xe8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006eee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ef2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d11b      	bne.n	8006f3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d015      	beq.n	8006f3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8393 	beq.w	8007658 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
      }
      return;
 8006f3a:	e38d      	b.n	8007658 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 8123 	beq.w	800718c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8007180 <HAL_UART_IRQHandler+0x2b8>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006f56:	4b8b      	ldr	r3, [pc, #556]	@ (8007184 <HAL_UART_IRQHandler+0x2bc>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8116 	beq.w	800718c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d011      	beq.n	8006f90 <HAL_UART_IRQHandler+0xc8>
 8006f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f86:	f043 0201 	orr.w	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d011      	beq.n	8006fc0 <HAL_UART_IRQHandler+0xf8>
 8006f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2202      	movs	r2, #2
 8006fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb6:	f043 0204 	orr.w	r2, r3, #4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d011      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x128>
 8006fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2204      	movs	r2, #4
 8006fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe6:	f043 0202 	orr.w	r2, r3, #2
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d017      	beq.n	800702c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b00      	cmp	r3, #0
 8007006:	d105      	bne.n	8007014 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007008:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800700c:	4b5c      	ldr	r3, [pc, #368]	@ (8007180 <HAL_UART_IRQHandler+0x2b8>)
 800700e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2208      	movs	r2, #8
 800701a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007022:	f043 0208 	orr.w	r2, r3, #8
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800702c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007034:	2b00      	cmp	r3, #0
 8007036:	d012      	beq.n	800705e <HAL_UART_IRQHandler+0x196>
 8007038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00c      	beq.n	800705e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800704c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007054:	f043 0220 	orr.w	r2, r3, #32
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 82f9 	beq.w	800765c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800706a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d013      	beq.n	800709e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d105      	bne.n	800708e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b2:	2b40      	cmp	r3, #64	@ 0x40
 80070b4:	d005      	beq.n	80070c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d054      	beq.n	800716c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 fb1c 	bl	8008700 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d2:	2b40      	cmp	r3, #64	@ 0x40
 80070d4:	d146      	bne.n	8007164 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3308      	adds	r3, #8
 80070dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007102:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800710e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800711a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1d9      	bne.n	80070d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007128:	2b00      	cmp	r3, #0
 800712a:	d017      	beq.n	800715c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007132:	4a15      	ldr	r2, [pc, #84]	@ (8007188 <HAL_UART_IRQHandler+0x2c0>)
 8007134:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800713c:	4618      	mov	r0, r3
 800713e:	f7fb f867 	bl	8002210 <HAL_DMA_Abort_IT>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d019      	beq.n	800717c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800714e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007156:	4610      	mov	r0, r2
 8007158:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715a:	e00f      	b.n	800717c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fa93 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007162:	e00b      	b.n	800717c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa8f 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716a:	e007      	b.n	800717c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fa8b 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800717a:	e26f      	b.n	800765c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717c:	bf00      	nop
    return;
 800717e:	e26d      	b.n	800765c <HAL_UART_IRQHandler+0x794>
 8007180:	10000001 	.word	0x10000001
 8007184:	04000120 	.word	0x04000120
 8007188:	080087cd 	.word	0x080087cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007190:	2b01      	cmp	r3, #1
 8007192:	f040 8203 	bne.w	800759c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 81fc 	beq.w	800759c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 81f5 	beq.w	800759c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2210      	movs	r2, #16
 80071b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c4:	2b40      	cmp	r3, #64	@ 0x40
 80071c6:	f040 816d 	bne.w	80074a4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4aa4      	ldr	r2, [pc, #656]	@ (8007464 <HAL_UART_IRQHandler+0x59c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d068      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4aa1      	ldr	r2, [pc, #644]	@ (8007468 <HAL_UART_IRQHandler+0x5a0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d061      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a9f      	ldr	r2, [pc, #636]	@ (800746c <HAL_UART_IRQHandler+0x5a4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d05a      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a9c      	ldr	r2, [pc, #624]	@ (8007470 <HAL_UART_IRQHandler+0x5a8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d053      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a9a      	ldr	r2, [pc, #616]	@ (8007474 <HAL_UART_IRQHandler+0x5ac>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d04c      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a97      	ldr	r2, [pc, #604]	@ (8007478 <HAL_UART_IRQHandler+0x5b0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d045      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a95      	ldr	r2, [pc, #596]	@ (800747c <HAL_UART_IRQHandler+0x5b4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d03e      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a92      	ldr	r2, [pc, #584]	@ (8007480 <HAL_UART_IRQHandler+0x5b8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d037      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a90      	ldr	r2, [pc, #576]	@ (8007484 <HAL_UART_IRQHandler+0x5bc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d030      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a8d      	ldr	r2, [pc, #564]	@ (8007488 <HAL_UART_IRQHandler+0x5c0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d029      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a8b      	ldr	r2, [pc, #556]	@ (800748c <HAL_UART_IRQHandler+0x5c4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a88      	ldr	r2, [pc, #544]	@ (8007490 <HAL_UART_IRQHandler+0x5c8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01b      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a86      	ldr	r2, [pc, #536]	@ (8007494 <HAL_UART_IRQHandler+0x5cc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d014      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a83      	ldr	r2, [pc, #524]	@ (8007498 <HAL_UART_IRQHandler+0x5d0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00d      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a81      	ldr	r2, [pc, #516]	@ (800749c <HAL_UART_IRQHandler+0x5d4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d006      	beq.n	80072aa <HAL_UART_IRQHandler+0x3e2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a7e      	ldr	r2, [pc, #504]	@ (80074a0 <HAL_UART_IRQHandler+0x5d8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d106      	bne.n	80072b8 <HAL_UART_IRQHandler+0x3f0>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	e005      	b.n	80072c4 <HAL_UART_IRQHandler+0x3fc>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80ad 	beq.w	800742c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072dc:	429a      	cmp	r2, r3
 80072de:	f080 80a5 	bcs.w	800742c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072f8:	f000 8087 	beq.w	800740a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800732a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007332:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800733e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1da      	bne.n	80072fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800736a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800736e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800737c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e1      	bne.n	8007346 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3308      	adds	r3, #8
 80073a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e3      	bne.n	8007382 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073d8:	f023 0310 	bic.w	r3, r3, #16
 80073dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e4      	bne.n	80073c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007404:	4618      	mov	r0, r3
 8007406:	f7fa fbe5 	bl	8001bd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2202      	movs	r2, #2
 800740e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800741c:	b29b      	uxth	r3, r3
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	b29b      	uxth	r3, r3
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f939 	bl	800769c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800742a:	e119      	b.n	8007660 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007436:	429a      	cmp	r2, r3
 8007438:	f040 8112 	bne.w	8007660 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007448:	f040 810a 	bne.w	8007660 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f91e 	bl	800769c <HAL_UARTEx_RxEventCallback>
      return;
 8007460:	e0fe      	b.n	8007660 <HAL_UART_IRQHandler+0x798>
 8007462:	bf00      	nop
 8007464:	40020010 	.word	0x40020010
 8007468:	40020028 	.word	0x40020028
 800746c:	40020040 	.word	0x40020040
 8007470:	40020058 	.word	0x40020058
 8007474:	40020070 	.word	0x40020070
 8007478:	40020088 	.word	0x40020088
 800747c:	400200a0 	.word	0x400200a0
 8007480:	400200b8 	.word	0x400200b8
 8007484:	40020410 	.word	0x40020410
 8007488:	40020428 	.word	0x40020428
 800748c:	40020440 	.word	0x40020440
 8007490:	40020458 	.word	0x40020458
 8007494:	40020470 	.word	0x40020470
 8007498:	40020488 	.word	0x40020488
 800749c:	400204a0 	.word	0x400204a0
 80074a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 80cf 	beq.w	8007664 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80074c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80ca 	beq.w	8007664 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80074f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e4      	bne.n	80074d0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	623b      	str	r3, [r7, #32]
   return(result);
 8007516:	6a3a      	ldr	r2, [r7, #32]
 8007518:	4b55      	ldr	r3, [pc, #340]	@ (8007670 <HAL_UART_IRQHandler+0x7a8>)
 800751a:	4013      	ands	r3, r2
 800751c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800752a:	633a      	str	r2, [r7, #48]	@ 0x30
 800752c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e3      	bne.n	8007506 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0310 	bic.w	r3, r3, #16
 8007566:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	69b9      	ldr	r1, [r7, #24]
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	617b      	str	r3, [r7, #20]
   return(result);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e4      	bne.n	8007552 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800758e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f881 	bl	800769c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800759a:	e063      	b.n	8007664 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800759c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00e      	beq.n	80075c6 <HAL_UART_IRQHandler+0x6fe>
 80075a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d008      	beq.n	80075c6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80075bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f941 	bl	8008846 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075c4:	e051      	b.n	800766a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80075c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d014      	beq.n	80075fc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80075d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d105      	bne.n	80075ea <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d03a      	beq.n	8007668 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
    }
    return;
 80075fa:	e035      	b.n	8007668 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d009      	beq.n	800761c <HAL_UART_IRQHandler+0x754>
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800760c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f8eb 	bl	80087f0 <UART_EndTransmit_IT>
    return;
 800761a:	e026      	b.n	800766a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007620:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d009      	beq.n	800763c <HAL_UART_IRQHandler+0x774>
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f91a 	bl	800886e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800763a:	e016      	b.n	800766a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d010      	beq.n	800766a <HAL_UART_IRQHandler+0x7a2>
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800764c:	2b00      	cmp	r3, #0
 800764e:	da0c      	bge.n	800766a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f902 	bl	800885a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007656:	e008      	b.n	800766a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007658:	bf00      	nop
 800765a:	e006      	b.n	800766a <HAL_UART_IRQHandler+0x7a2>
    return;
 800765c:	bf00      	nop
 800765e:	e004      	b.n	800766a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007660:	bf00      	nop
 8007662:	e002      	b.n	800766a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007664:	bf00      	nop
 8007666:	e000      	b.n	800766a <HAL_UART_IRQHandler+0x7a2>
    return;
 8007668:	bf00      	nop
  }
}
 800766a:	37e8      	adds	r7, #232	@ 0xe8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	effffffe 	.word	0xeffffffe

08007674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b8:	b092      	sub	sp, #72	@ 0x48
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	4313      	orrs	r3, r2
 80076da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	4bbe      	ldr	r3, [pc, #760]	@ (80079dc <UART_SetConfig+0x328>)
 80076e4:	4013      	ands	r3, r2
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076ec:	430b      	orrs	r3, r1
 80076ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	68da      	ldr	r2, [r3, #12]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4ab3      	ldr	r2, [pc, #716]	@ (80079e0 <UART_SetConfig+0x32c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d004      	beq.n	8007720 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800771c:	4313      	orrs	r3, r2
 800771e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	4baf      	ldr	r3, [pc, #700]	@ (80079e4 <UART_SetConfig+0x330>)
 8007728:	4013      	ands	r3, r2
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007730:	430b      	orrs	r3, r1
 8007732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773a:	f023 010f 	bic.w	r1, r3, #15
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4aa6      	ldr	r2, [pc, #664]	@ (80079e8 <UART_SetConfig+0x334>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d177      	bne.n	8007844 <UART_SetConfig+0x190>
 8007754:	4ba5      	ldr	r3, [pc, #660]	@ (80079ec <UART_SetConfig+0x338>)
 8007756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007758:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800775c:	2b28      	cmp	r3, #40	@ 0x28
 800775e:	d86d      	bhi.n	800783c <UART_SetConfig+0x188>
 8007760:	a201      	add	r2, pc, #4	@ (adr r2, 8007768 <UART_SetConfig+0xb4>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	0800780d 	.word	0x0800780d
 800776c:	0800783d 	.word	0x0800783d
 8007770:	0800783d 	.word	0x0800783d
 8007774:	0800783d 	.word	0x0800783d
 8007778:	0800783d 	.word	0x0800783d
 800777c:	0800783d 	.word	0x0800783d
 8007780:	0800783d 	.word	0x0800783d
 8007784:	0800783d 	.word	0x0800783d
 8007788:	08007815 	.word	0x08007815
 800778c:	0800783d 	.word	0x0800783d
 8007790:	0800783d 	.word	0x0800783d
 8007794:	0800783d 	.word	0x0800783d
 8007798:	0800783d 	.word	0x0800783d
 800779c:	0800783d 	.word	0x0800783d
 80077a0:	0800783d 	.word	0x0800783d
 80077a4:	0800783d 	.word	0x0800783d
 80077a8:	0800781d 	.word	0x0800781d
 80077ac:	0800783d 	.word	0x0800783d
 80077b0:	0800783d 	.word	0x0800783d
 80077b4:	0800783d 	.word	0x0800783d
 80077b8:	0800783d 	.word	0x0800783d
 80077bc:	0800783d 	.word	0x0800783d
 80077c0:	0800783d 	.word	0x0800783d
 80077c4:	0800783d 	.word	0x0800783d
 80077c8:	08007825 	.word	0x08007825
 80077cc:	0800783d 	.word	0x0800783d
 80077d0:	0800783d 	.word	0x0800783d
 80077d4:	0800783d 	.word	0x0800783d
 80077d8:	0800783d 	.word	0x0800783d
 80077dc:	0800783d 	.word	0x0800783d
 80077e0:	0800783d 	.word	0x0800783d
 80077e4:	0800783d 	.word	0x0800783d
 80077e8:	0800782d 	.word	0x0800782d
 80077ec:	0800783d 	.word	0x0800783d
 80077f0:	0800783d 	.word	0x0800783d
 80077f4:	0800783d 	.word	0x0800783d
 80077f8:	0800783d 	.word	0x0800783d
 80077fc:	0800783d 	.word	0x0800783d
 8007800:	0800783d 	.word	0x0800783d
 8007804:	0800783d 	.word	0x0800783d
 8007808:	08007835 	.word	0x08007835
 800780c:	2301      	movs	r3, #1
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007812:	e326      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007814:	2304      	movs	r3, #4
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781a:	e322      	b.n	8007e62 <UART_SetConfig+0x7ae>
 800781c:	2308      	movs	r3, #8
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007822:	e31e      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782a:	e31a      	b.n	8007e62 <UART_SetConfig+0x7ae>
 800782c:	2320      	movs	r3, #32
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007832:	e316      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007834:	2340      	movs	r3, #64	@ 0x40
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783a:	e312      	b.n	8007e62 <UART_SetConfig+0x7ae>
 800783c:	2380      	movs	r3, #128	@ 0x80
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007842:	e30e      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a69      	ldr	r2, [pc, #420]	@ (80079f0 <UART_SetConfig+0x33c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d130      	bne.n	80078b0 <UART_SetConfig+0x1fc>
 800784e:	4b67      	ldr	r3, [pc, #412]	@ (80079ec <UART_SetConfig+0x338>)
 8007850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b05      	cmp	r3, #5
 8007858:	d826      	bhi.n	80078a8 <UART_SetConfig+0x1f4>
 800785a:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <UART_SetConfig+0x1ac>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007879 	.word	0x08007879
 8007864:	08007881 	.word	0x08007881
 8007868:	08007889 	.word	0x08007889
 800786c:	08007891 	.word	0x08007891
 8007870:	08007899 	.word	0x08007899
 8007874:	080078a1 	.word	0x080078a1
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787e:	e2f0      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	e2ec      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788e:	e2e8      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007896:	e2e4      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007898:	2320      	movs	r3, #32
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789e:	e2e0      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80078a0:	2340      	movs	r3, #64	@ 0x40
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a6:	e2dc      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80078a8:	2380      	movs	r3, #128	@ 0x80
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ae:	e2d8      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a4f      	ldr	r2, [pc, #316]	@ (80079f4 <UART_SetConfig+0x340>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d130      	bne.n	800791c <UART_SetConfig+0x268>
 80078ba:	4b4c      	ldr	r3, [pc, #304]	@ (80079ec <UART_SetConfig+0x338>)
 80078bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d826      	bhi.n	8007914 <UART_SetConfig+0x260>
 80078c6:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <UART_SetConfig+0x218>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007905 	.word	0x08007905
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e2ba      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80078ec:	2304      	movs	r3, #4
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e2b6      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80078f4:	2308      	movs	r3, #8
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fa:	e2b2      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80078fc:	2310      	movs	r3, #16
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007902:	e2ae      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007904:	2320      	movs	r3, #32
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e2aa      	b.n	8007e62 <UART_SetConfig+0x7ae>
 800790c:	2340      	movs	r3, #64	@ 0x40
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e2a6      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007914:	2380      	movs	r3, #128	@ 0x80
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e2a2      	b.n	8007e62 <UART_SetConfig+0x7ae>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a35      	ldr	r2, [pc, #212]	@ (80079f8 <UART_SetConfig+0x344>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d130      	bne.n	8007988 <UART_SetConfig+0x2d4>
 8007926:	4b31      	ldr	r3, [pc, #196]	@ (80079ec <UART_SetConfig+0x338>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	2b05      	cmp	r3, #5
 8007930:	d826      	bhi.n	8007980 <UART_SetConfig+0x2cc>
 8007932:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <UART_SetConfig+0x284>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007951 	.word	0x08007951
 800793c:	08007959 	.word	0x08007959
 8007940:	08007961 	.word	0x08007961
 8007944:	08007969 	.word	0x08007969
 8007948:	08007971 	.word	0x08007971
 800794c:	08007979 	.word	0x08007979
 8007950:	2300      	movs	r3, #0
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e284      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e280      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e27c      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e278      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007970:	2320      	movs	r3, #32
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e274      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007978:	2340      	movs	r3, #64	@ 0x40
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797e:	e270      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007980:	2380      	movs	r3, #128	@ 0x80
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007986:	e26c      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1b      	ldr	r2, [pc, #108]	@ (80079fc <UART_SetConfig+0x348>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d142      	bne.n	8007a18 <UART_SetConfig+0x364>
 8007992:	4b16      	ldr	r3, [pc, #88]	@ (80079ec <UART_SetConfig+0x338>)
 8007994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	2b05      	cmp	r3, #5
 800799c:	d838      	bhi.n	8007a10 <UART_SetConfig+0x35c>
 800799e:	a201      	add	r2, pc, #4	@ (adr r2, 80079a4 <UART_SetConfig+0x2f0>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079bd 	.word	0x080079bd
 80079a8:	080079c5 	.word	0x080079c5
 80079ac:	080079cd 	.word	0x080079cd
 80079b0:	080079d5 	.word	0x080079d5
 80079b4:	08007a01 	.word	0x08007a01
 80079b8:	08007a09 	.word	0x08007a09
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e24e      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80079c4:	2304      	movs	r3, #4
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e24a      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80079cc:	2308      	movs	r3, #8
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d2:	e246      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80079d4:	2310      	movs	r3, #16
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079da:	e242      	b.n	8007e62 <UART_SetConfig+0x7ae>
 80079dc:	cfff69f3 	.word	0xcfff69f3
 80079e0:	58000c00 	.word	0x58000c00
 80079e4:	11fff4ff 	.word	0x11fff4ff
 80079e8:	40011000 	.word	0x40011000
 80079ec:	58024400 	.word	0x58024400
 80079f0:	40004400 	.word	0x40004400
 80079f4:	40004800 	.word	0x40004800
 80079f8:	40004c00 	.word	0x40004c00
 80079fc:	40005000 	.word	0x40005000
 8007a00:	2320      	movs	r3, #32
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e22c      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007a08:	2340      	movs	r3, #64	@ 0x40
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e228      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007a10:	2380      	movs	r3, #128	@ 0x80
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e224      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4ab1      	ldr	r2, [pc, #708]	@ (8007ce4 <UART_SetConfig+0x630>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d176      	bne.n	8007b10 <UART_SetConfig+0x45c>
 8007a22:	4bb1      	ldr	r3, [pc, #708]	@ (8007ce8 <UART_SetConfig+0x634>)
 8007a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a2a:	2b28      	cmp	r3, #40	@ 0x28
 8007a2c:	d86c      	bhi.n	8007b08 <UART_SetConfig+0x454>
 8007a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a34 <UART_SetConfig+0x380>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007ad9 	.word	0x08007ad9
 8007a38:	08007b09 	.word	0x08007b09
 8007a3c:	08007b09 	.word	0x08007b09
 8007a40:	08007b09 	.word	0x08007b09
 8007a44:	08007b09 	.word	0x08007b09
 8007a48:	08007b09 	.word	0x08007b09
 8007a4c:	08007b09 	.word	0x08007b09
 8007a50:	08007b09 	.word	0x08007b09
 8007a54:	08007ae1 	.word	0x08007ae1
 8007a58:	08007b09 	.word	0x08007b09
 8007a5c:	08007b09 	.word	0x08007b09
 8007a60:	08007b09 	.word	0x08007b09
 8007a64:	08007b09 	.word	0x08007b09
 8007a68:	08007b09 	.word	0x08007b09
 8007a6c:	08007b09 	.word	0x08007b09
 8007a70:	08007b09 	.word	0x08007b09
 8007a74:	08007ae9 	.word	0x08007ae9
 8007a78:	08007b09 	.word	0x08007b09
 8007a7c:	08007b09 	.word	0x08007b09
 8007a80:	08007b09 	.word	0x08007b09
 8007a84:	08007b09 	.word	0x08007b09
 8007a88:	08007b09 	.word	0x08007b09
 8007a8c:	08007b09 	.word	0x08007b09
 8007a90:	08007b09 	.word	0x08007b09
 8007a94:	08007af1 	.word	0x08007af1
 8007a98:	08007b09 	.word	0x08007b09
 8007a9c:	08007b09 	.word	0x08007b09
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007b09 	.word	0x08007b09
 8007aa8:	08007b09 	.word	0x08007b09
 8007aac:	08007b09 	.word	0x08007b09
 8007ab0:	08007b09 	.word	0x08007b09
 8007ab4:	08007af9 	.word	0x08007af9
 8007ab8:	08007b09 	.word	0x08007b09
 8007abc:	08007b09 	.word	0x08007b09
 8007ac0:	08007b09 	.word	0x08007b09
 8007ac4:	08007b09 	.word	0x08007b09
 8007ac8:	08007b09 	.word	0x08007b09
 8007acc:	08007b09 	.word	0x08007b09
 8007ad0:	08007b09 	.word	0x08007b09
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e1c0      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e1bc      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e1b8      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e1b4      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007af8:	2320      	movs	r3, #32
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e1b0      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b00:	2340      	movs	r3, #64	@ 0x40
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e1ac      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b08:	2380      	movs	r3, #128	@ 0x80
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e1a8      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a75      	ldr	r2, [pc, #468]	@ (8007cec <UART_SetConfig+0x638>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d130      	bne.n	8007b7c <UART_SetConfig+0x4c8>
 8007b1a:	4b73      	ldr	r3, [pc, #460]	@ (8007ce8 <UART_SetConfig+0x634>)
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b05      	cmp	r3, #5
 8007b24:	d826      	bhi.n	8007b74 <UART_SetConfig+0x4c0>
 8007b26:	a201      	add	r2, pc, #4	@ (adr r2, 8007b2c <UART_SetConfig+0x478>)
 8007b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2c:	08007b45 	.word	0x08007b45
 8007b30:	08007b4d 	.word	0x08007b4d
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	2300      	movs	r3, #0
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e18a      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e186      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	e182      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e17e      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b64:	2320      	movs	r3, #32
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6a:	e17a      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b6c:	2340      	movs	r3, #64	@ 0x40
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b72:	e176      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b74:	2380      	movs	r3, #128	@ 0x80
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7a:	e172      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a5b      	ldr	r2, [pc, #364]	@ (8007cf0 <UART_SetConfig+0x63c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d130      	bne.n	8007be8 <UART_SetConfig+0x534>
 8007b86:	4b58      	ldr	r3, [pc, #352]	@ (8007ce8 <UART_SetConfig+0x634>)
 8007b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	d826      	bhi.n	8007be0 <UART_SetConfig+0x52c>
 8007b92:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <UART_SetConfig+0x4e4>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007bb9 	.word	0x08007bb9
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007bc9 	.word	0x08007bc9
 8007ba8:	08007bd1 	.word	0x08007bd1
 8007bac:	08007bd9 	.word	0x08007bd9
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e154      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e150      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e14c      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e148      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007bd0:	2320      	movs	r3, #32
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd6:	e144      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007bd8:	2340      	movs	r3, #64	@ 0x40
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bde:	e140      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007be0:	2380      	movs	r3, #128	@ 0x80
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be6:	e13c      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a41      	ldr	r2, [pc, #260]	@ (8007cf4 <UART_SetConfig+0x640>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	f040 8082 	bne.w	8007cf8 <UART_SetConfig+0x644>
 8007bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ce8 <UART_SetConfig+0x634>)
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bfc:	2b28      	cmp	r3, #40	@ 0x28
 8007bfe:	d86d      	bhi.n	8007cdc <UART_SetConfig+0x628>
 8007c00:	a201      	add	r2, pc, #4	@ (adr r2, 8007c08 <UART_SetConfig+0x554>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007cad 	.word	0x08007cad
 8007c0c:	08007cdd 	.word	0x08007cdd
 8007c10:	08007cdd 	.word	0x08007cdd
 8007c14:	08007cdd 	.word	0x08007cdd
 8007c18:	08007cdd 	.word	0x08007cdd
 8007c1c:	08007cdd 	.word	0x08007cdd
 8007c20:	08007cdd 	.word	0x08007cdd
 8007c24:	08007cdd 	.word	0x08007cdd
 8007c28:	08007cb5 	.word	0x08007cb5
 8007c2c:	08007cdd 	.word	0x08007cdd
 8007c30:	08007cdd 	.word	0x08007cdd
 8007c34:	08007cdd 	.word	0x08007cdd
 8007c38:	08007cdd 	.word	0x08007cdd
 8007c3c:	08007cdd 	.word	0x08007cdd
 8007c40:	08007cdd 	.word	0x08007cdd
 8007c44:	08007cdd 	.word	0x08007cdd
 8007c48:	08007cbd 	.word	0x08007cbd
 8007c4c:	08007cdd 	.word	0x08007cdd
 8007c50:	08007cdd 	.word	0x08007cdd
 8007c54:	08007cdd 	.word	0x08007cdd
 8007c58:	08007cdd 	.word	0x08007cdd
 8007c5c:	08007cdd 	.word	0x08007cdd
 8007c60:	08007cdd 	.word	0x08007cdd
 8007c64:	08007cdd 	.word	0x08007cdd
 8007c68:	08007cc5 	.word	0x08007cc5
 8007c6c:	08007cdd 	.word	0x08007cdd
 8007c70:	08007cdd 	.word	0x08007cdd
 8007c74:	08007cdd 	.word	0x08007cdd
 8007c78:	08007cdd 	.word	0x08007cdd
 8007c7c:	08007cdd 	.word	0x08007cdd
 8007c80:	08007cdd 	.word	0x08007cdd
 8007c84:	08007cdd 	.word	0x08007cdd
 8007c88:	08007ccd 	.word	0x08007ccd
 8007c8c:	08007cdd 	.word	0x08007cdd
 8007c90:	08007cdd 	.word	0x08007cdd
 8007c94:	08007cdd 	.word	0x08007cdd
 8007c98:	08007cdd 	.word	0x08007cdd
 8007c9c:	08007cdd 	.word	0x08007cdd
 8007ca0:	08007cdd 	.word	0x08007cdd
 8007ca4:	08007cdd 	.word	0x08007cdd
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	2301      	movs	r3, #1
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e0d6      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e0d2      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e0ce      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e0ca      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007ccc:	2320      	movs	r3, #32
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e0c6      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007cd4:	2340      	movs	r3, #64	@ 0x40
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e0c2      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007cdc:	2380      	movs	r3, #128	@ 0x80
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e0be      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007ce4:	40011400 	.word	0x40011400
 8007ce8:	58024400 	.word	0x58024400
 8007cec:	40007800 	.word	0x40007800
 8007cf0:	40007c00 	.word	0x40007c00
 8007cf4:	40011800 	.word	0x40011800
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4aad      	ldr	r2, [pc, #692]	@ (8007fb4 <UART_SetConfig+0x900>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d176      	bne.n	8007df0 <UART_SetConfig+0x73c>
 8007d02:	4bad      	ldr	r3, [pc, #692]	@ (8007fb8 <UART_SetConfig+0x904>)
 8007d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d0a:	2b28      	cmp	r3, #40	@ 0x28
 8007d0c:	d86c      	bhi.n	8007de8 <UART_SetConfig+0x734>
 8007d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d14 <UART_SetConfig+0x660>)
 8007d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d14:	08007db9 	.word	0x08007db9
 8007d18:	08007de9 	.word	0x08007de9
 8007d1c:	08007de9 	.word	0x08007de9
 8007d20:	08007de9 	.word	0x08007de9
 8007d24:	08007de9 	.word	0x08007de9
 8007d28:	08007de9 	.word	0x08007de9
 8007d2c:	08007de9 	.word	0x08007de9
 8007d30:	08007de9 	.word	0x08007de9
 8007d34:	08007dc1 	.word	0x08007dc1
 8007d38:	08007de9 	.word	0x08007de9
 8007d3c:	08007de9 	.word	0x08007de9
 8007d40:	08007de9 	.word	0x08007de9
 8007d44:	08007de9 	.word	0x08007de9
 8007d48:	08007de9 	.word	0x08007de9
 8007d4c:	08007de9 	.word	0x08007de9
 8007d50:	08007de9 	.word	0x08007de9
 8007d54:	08007dc9 	.word	0x08007dc9
 8007d58:	08007de9 	.word	0x08007de9
 8007d5c:	08007de9 	.word	0x08007de9
 8007d60:	08007de9 	.word	0x08007de9
 8007d64:	08007de9 	.word	0x08007de9
 8007d68:	08007de9 	.word	0x08007de9
 8007d6c:	08007de9 	.word	0x08007de9
 8007d70:	08007de9 	.word	0x08007de9
 8007d74:	08007dd1 	.word	0x08007dd1
 8007d78:	08007de9 	.word	0x08007de9
 8007d7c:	08007de9 	.word	0x08007de9
 8007d80:	08007de9 	.word	0x08007de9
 8007d84:	08007de9 	.word	0x08007de9
 8007d88:	08007de9 	.word	0x08007de9
 8007d8c:	08007de9 	.word	0x08007de9
 8007d90:	08007de9 	.word	0x08007de9
 8007d94:	08007dd9 	.word	0x08007dd9
 8007d98:	08007de9 	.word	0x08007de9
 8007d9c:	08007de9 	.word	0x08007de9
 8007da0:	08007de9 	.word	0x08007de9
 8007da4:	08007de9 	.word	0x08007de9
 8007da8:	08007de9 	.word	0x08007de9
 8007dac:	08007de9 	.word	0x08007de9
 8007db0:	08007de9 	.word	0x08007de9
 8007db4:	08007de1 	.word	0x08007de1
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dbe:	e050      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	e04c      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007dc8:	2308      	movs	r3, #8
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dce:	e048      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd6:	e044      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007dd8:	2320      	movs	r3, #32
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dde:	e040      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007de0:	2340      	movs	r3, #64	@ 0x40
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de6:	e03c      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007de8:	2380      	movs	r3, #128	@ 0x80
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dee:	e038      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a71      	ldr	r2, [pc, #452]	@ (8007fbc <UART_SetConfig+0x908>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d130      	bne.n	8007e5c <UART_SetConfig+0x7a8>
 8007dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8007fb8 <UART_SetConfig+0x904>)
 8007dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	2b05      	cmp	r3, #5
 8007e04:	d826      	bhi.n	8007e54 <UART_SetConfig+0x7a0>
 8007e06:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <UART_SetConfig+0x758>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e25 	.word	0x08007e25
 8007e10:	08007e2d 	.word	0x08007e2d
 8007e14:	08007e35 	.word	0x08007e35
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e45 	.word	0x08007e45
 8007e20:	08007e4d 	.word	0x08007e4d
 8007e24:	2302      	movs	r3, #2
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2a:	e01a      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e32:	e016      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3a:	e012      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e42:	e00e      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007e44:	2320      	movs	r3, #32
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4a:	e00a      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007e4c:	2340      	movs	r3, #64	@ 0x40
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e006      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007e54:	2380      	movs	r3, #128	@ 0x80
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e002      	b.n	8007e62 <UART_SetConfig+0x7ae>
 8007e5c:	2380      	movs	r3, #128	@ 0x80
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a55      	ldr	r2, [pc, #340]	@ (8007fbc <UART_SetConfig+0x908>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	f040 80f8 	bne.w	800805e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	dc46      	bgt.n	8007f04 <UART_SetConfig+0x850>
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	db75      	blt.n	8007f66 <UART_SetConfig+0x8b2>
 8007e7a:	3b02      	subs	r3, #2
 8007e7c:	2b1e      	cmp	r3, #30
 8007e7e:	d872      	bhi.n	8007f66 <UART_SetConfig+0x8b2>
 8007e80:	a201      	add	r2, pc, #4	@ (adr r2, 8007e88 <UART_SetConfig+0x7d4>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007f0b 	.word	0x08007f0b
 8007e8c:	08007f67 	.word	0x08007f67
 8007e90:	08007f13 	.word	0x08007f13
 8007e94:	08007f67 	.word	0x08007f67
 8007e98:	08007f67 	.word	0x08007f67
 8007e9c:	08007f67 	.word	0x08007f67
 8007ea0:	08007f23 	.word	0x08007f23
 8007ea4:	08007f67 	.word	0x08007f67
 8007ea8:	08007f67 	.word	0x08007f67
 8007eac:	08007f67 	.word	0x08007f67
 8007eb0:	08007f67 	.word	0x08007f67
 8007eb4:	08007f67 	.word	0x08007f67
 8007eb8:	08007f67 	.word	0x08007f67
 8007ebc:	08007f67 	.word	0x08007f67
 8007ec0:	08007f33 	.word	0x08007f33
 8007ec4:	08007f67 	.word	0x08007f67
 8007ec8:	08007f67 	.word	0x08007f67
 8007ecc:	08007f67 	.word	0x08007f67
 8007ed0:	08007f67 	.word	0x08007f67
 8007ed4:	08007f67 	.word	0x08007f67
 8007ed8:	08007f67 	.word	0x08007f67
 8007edc:	08007f67 	.word	0x08007f67
 8007ee0:	08007f67 	.word	0x08007f67
 8007ee4:	08007f67 	.word	0x08007f67
 8007ee8:	08007f67 	.word	0x08007f67
 8007eec:	08007f67 	.word	0x08007f67
 8007ef0:	08007f67 	.word	0x08007f67
 8007ef4:	08007f67 	.word	0x08007f67
 8007ef8:	08007f67 	.word	0x08007f67
 8007efc:	08007f67 	.word	0x08007f67
 8007f00:	08007f59 	.word	0x08007f59
 8007f04:	2b40      	cmp	r3, #64	@ 0x40
 8007f06:	d02a      	beq.n	8007f5e <UART_SetConfig+0x8aa>
 8007f08:	e02d      	b.n	8007f66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f0a:	f7fd fb85 	bl	8005618 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f10:	e02f      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fd fb94 	bl	8005644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f20:	e027      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f22:	f107 0318 	add.w	r3, r7, #24
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fd fce0 	bl	80058ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f30:	e01f      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f32:	4b21      	ldr	r3, [pc, #132]	@ (8007fb8 <UART_SetConfig+0x904>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d009      	beq.n	8007f52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb8 <UART_SetConfig+0x904>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	08db      	lsrs	r3, r3, #3
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	4a1d      	ldr	r2, [pc, #116]	@ (8007fc0 <UART_SetConfig+0x90c>)
 8007f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f50:	e00f      	b.n	8007f72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f52:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc0 <UART_SetConfig+0x90c>)
 8007f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f56:	e00c      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f58:	4b1a      	ldr	r3, [pc, #104]	@ (8007fc4 <UART_SetConfig+0x910>)
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f5c:	e009      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f64:	e005      	b.n	8007f72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 81ee 	beq.w	8008356 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7e:	4a12      	ldr	r2, [pc, #72]	@ (8007fc8 <UART_SetConfig+0x914>)
 8007f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f8c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	4413      	add	r3, r2
 8007f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d305      	bcc.n	8007faa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d910      	bls.n	8007fcc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fb0:	e1d1      	b.n	8008356 <UART_SetConfig+0xca2>
 8007fb2:	bf00      	nop
 8007fb4:	40011c00 	.word	0x40011c00
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	58000c00 	.word	0x58000c00
 8007fc0:	03d09000 	.word	0x03d09000
 8007fc4:	003d0900 	.word	0x003d0900
 8007fc8:	0800b41c 	.word	0x0800b41c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fce:	2200      	movs	r2, #0
 8007fd0:	60bb      	str	r3, [r7, #8]
 8007fd2:	60fa      	str	r2, [r7, #12]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd8:	4ac0      	ldr	r2, [pc, #768]	@ (80082dc <UART_SetConfig+0xc28>)
 8007fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	607a      	str	r2, [r7, #4]
 8007fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fee:	f7f8 f9e7 	bl	80003c0 <__aeabi_uldivmod>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f04f 0200 	mov.w	r2, #0
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	020b      	lsls	r3, r1, #8
 8008004:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008008:	0202      	lsls	r2, r0, #8
 800800a:	6979      	ldr	r1, [r7, #20]
 800800c:	6849      	ldr	r1, [r1, #4]
 800800e:	0849      	lsrs	r1, r1, #1
 8008010:	2000      	movs	r0, #0
 8008012:	460c      	mov	r4, r1
 8008014:	4605      	mov	r5, r0
 8008016:	eb12 0804 	adds.w	r8, r2, r4
 800801a:	eb43 0905 	adc.w	r9, r3, r5
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	469a      	mov	sl, r3
 8008026:	4693      	mov	fp, r2
 8008028:	4652      	mov	r2, sl
 800802a:	465b      	mov	r3, fp
 800802c:	4640      	mov	r0, r8
 800802e:	4649      	mov	r1, r9
 8008030:	f7f8 f9c6 	bl	80003c0 <__aeabi_uldivmod>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4613      	mov	r3, r2
 800803a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008042:	d308      	bcc.n	8008056 <UART_SetConfig+0x9a2>
 8008044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800804a:	d204      	bcs.n	8008056 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008052:	60da      	str	r2, [r3, #12]
 8008054:	e17f      	b.n	8008356 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800805c:	e17b      	b.n	8008356 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008066:	f040 80bd 	bne.w	80081e4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800806a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800806e:	2b20      	cmp	r3, #32
 8008070:	dc48      	bgt.n	8008104 <UART_SetConfig+0xa50>
 8008072:	2b00      	cmp	r3, #0
 8008074:	db7b      	blt.n	800816e <UART_SetConfig+0xaba>
 8008076:	2b20      	cmp	r3, #32
 8008078:	d879      	bhi.n	800816e <UART_SetConfig+0xaba>
 800807a:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <UART_SetConfig+0x9cc>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	0800810b 	.word	0x0800810b
 8008084:	08008113 	.word	0x08008113
 8008088:	0800816f 	.word	0x0800816f
 800808c:	0800816f 	.word	0x0800816f
 8008090:	0800811b 	.word	0x0800811b
 8008094:	0800816f 	.word	0x0800816f
 8008098:	0800816f 	.word	0x0800816f
 800809c:	0800816f 	.word	0x0800816f
 80080a0:	0800812b 	.word	0x0800812b
 80080a4:	0800816f 	.word	0x0800816f
 80080a8:	0800816f 	.word	0x0800816f
 80080ac:	0800816f 	.word	0x0800816f
 80080b0:	0800816f 	.word	0x0800816f
 80080b4:	0800816f 	.word	0x0800816f
 80080b8:	0800816f 	.word	0x0800816f
 80080bc:	0800816f 	.word	0x0800816f
 80080c0:	0800813b 	.word	0x0800813b
 80080c4:	0800816f 	.word	0x0800816f
 80080c8:	0800816f 	.word	0x0800816f
 80080cc:	0800816f 	.word	0x0800816f
 80080d0:	0800816f 	.word	0x0800816f
 80080d4:	0800816f 	.word	0x0800816f
 80080d8:	0800816f 	.word	0x0800816f
 80080dc:	0800816f 	.word	0x0800816f
 80080e0:	0800816f 	.word	0x0800816f
 80080e4:	0800816f 	.word	0x0800816f
 80080e8:	0800816f 	.word	0x0800816f
 80080ec:	0800816f 	.word	0x0800816f
 80080f0:	0800816f 	.word	0x0800816f
 80080f4:	0800816f 	.word	0x0800816f
 80080f8:	0800816f 	.word	0x0800816f
 80080fc:	0800816f 	.word	0x0800816f
 8008100:	08008161 	.word	0x08008161
 8008104:	2b40      	cmp	r3, #64	@ 0x40
 8008106:	d02e      	beq.n	8008166 <UART_SetConfig+0xab2>
 8008108:	e031      	b.n	800816e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800810a:	f7fc f8b9 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 800810e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008110:	e033      	b.n	800817a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008112:	f7fc f8cb 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 8008116:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008118:	e02f      	b.n	800817a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800811e:	4618      	mov	r0, r3
 8008120:	f7fd fa90 	bl	8005644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008128:	e027      	b.n	800817a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800812a:	f107 0318 	add.w	r3, r7, #24
 800812e:	4618      	mov	r0, r3
 8008130:	f7fd fbdc 	bl	80058ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008138:	e01f      	b.n	800817a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800813a:	4b69      	ldr	r3, [pc, #420]	@ (80082e0 <UART_SetConfig+0xc2c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008146:	4b66      	ldr	r3, [pc, #408]	@ (80082e0 <UART_SetConfig+0xc2c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	08db      	lsrs	r3, r3, #3
 800814c:	f003 0303 	and.w	r3, r3, #3
 8008150:	4a64      	ldr	r2, [pc, #400]	@ (80082e4 <UART_SetConfig+0xc30>)
 8008152:	fa22 f303 	lsr.w	r3, r2, r3
 8008156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008158:	e00f      	b.n	800817a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800815a:	4b62      	ldr	r3, [pc, #392]	@ (80082e4 <UART_SetConfig+0xc30>)
 800815c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800815e:	e00c      	b.n	800817a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008160:	4b61      	ldr	r3, [pc, #388]	@ (80082e8 <UART_SetConfig+0xc34>)
 8008162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008164:	e009      	b.n	800817a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800816a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800816c:	e005      	b.n	800817a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800817a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 80ea 	beq.w	8008356 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008186:	4a55      	ldr	r2, [pc, #340]	@ (80082dc <UART_SetConfig+0xc28>)
 8008188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800818c:	461a      	mov	r2, r3
 800818e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008190:	fbb3 f3f2 	udiv	r3, r3, r2
 8008194:	005a      	lsls	r2, r3, #1
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	441a      	add	r2, r3
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081aa:	2b0f      	cmp	r3, #15
 80081ac:	d916      	bls.n	80081dc <UART_SetConfig+0xb28>
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081b4:	d212      	bcs.n	80081dc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f023 030f 	bic.w	r3, r3, #15
 80081be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c2:	085b      	lsrs	r3, r3, #1
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081ce:	4313      	orrs	r3, r2
 80081d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80081d8:	60da      	str	r2, [r3, #12]
 80081da:	e0bc      	b.n	8008356 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081e2:	e0b8      	b.n	8008356 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	dc4b      	bgt.n	8008284 <UART_SetConfig+0xbd0>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f2c0 8087 	blt.w	8008300 <UART_SetConfig+0xc4c>
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	f200 8084 	bhi.w	8008300 <UART_SetConfig+0xc4c>
 80081f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008200 <UART_SetConfig+0xb4c>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	0800828b 	.word	0x0800828b
 8008204:	08008293 	.word	0x08008293
 8008208:	08008301 	.word	0x08008301
 800820c:	08008301 	.word	0x08008301
 8008210:	0800829b 	.word	0x0800829b
 8008214:	08008301 	.word	0x08008301
 8008218:	08008301 	.word	0x08008301
 800821c:	08008301 	.word	0x08008301
 8008220:	080082ab 	.word	0x080082ab
 8008224:	08008301 	.word	0x08008301
 8008228:	08008301 	.word	0x08008301
 800822c:	08008301 	.word	0x08008301
 8008230:	08008301 	.word	0x08008301
 8008234:	08008301 	.word	0x08008301
 8008238:	08008301 	.word	0x08008301
 800823c:	08008301 	.word	0x08008301
 8008240:	080082bb 	.word	0x080082bb
 8008244:	08008301 	.word	0x08008301
 8008248:	08008301 	.word	0x08008301
 800824c:	08008301 	.word	0x08008301
 8008250:	08008301 	.word	0x08008301
 8008254:	08008301 	.word	0x08008301
 8008258:	08008301 	.word	0x08008301
 800825c:	08008301 	.word	0x08008301
 8008260:	08008301 	.word	0x08008301
 8008264:	08008301 	.word	0x08008301
 8008268:	08008301 	.word	0x08008301
 800826c:	08008301 	.word	0x08008301
 8008270:	08008301 	.word	0x08008301
 8008274:	08008301 	.word	0x08008301
 8008278:	08008301 	.word	0x08008301
 800827c:	08008301 	.word	0x08008301
 8008280:	080082f3 	.word	0x080082f3
 8008284:	2b40      	cmp	r3, #64	@ 0x40
 8008286:	d037      	beq.n	80082f8 <UART_SetConfig+0xc44>
 8008288:	e03a      	b.n	8008300 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800828a:	f7fb fff9 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 800828e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008290:	e03c      	b.n	800830c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008292:	f7fc f80b 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 8008296:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008298:	e038      	b.n	800830c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800829a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fd f9d0 	bl	8005644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a8:	e030      	b.n	800830c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082aa:	f107 0318 	add.w	r3, r7, #24
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fd fb1c 	bl	80058ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b8:	e028      	b.n	800830c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082ba:	4b09      	ldr	r3, [pc, #36]	@ (80082e0 <UART_SetConfig+0xc2c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0320 	and.w	r3, r3, #32
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d012      	beq.n	80082ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082c6:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <UART_SetConfig+0xc2c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	08db      	lsrs	r3, r3, #3
 80082cc:	f003 0303 	and.w	r3, r3, #3
 80082d0:	4a04      	ldr	r2, [pc, #16]	@ (80082e4 <UART_SetConfig+0xc30>)
 80082d2:	fa22 f303 	lsr.w	r3, r2, r3
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082d8:	e018      	b.n	800830c <UART_SetConfig+0xc58>
 80082da:	bf00      	nop
 80082dc:	0800b41c 	.word	0x0800b41c
 80082e0:	58024400 	.word	0x58024400
 80082e4:	03d09000 	.word	0x03d09000
 80082e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80082ec:	4b24      	ldr	r3, [pc, #144]	@ (8008380 <UART_SetConfig+0xccc>)
 80082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082f0:	e00c      	b.n	800830c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082f2:	4b24      	ldr	r3, [pc, #144]	@ (8008384 <UART_SetConfig+0xcd0>)
 80082f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082f6:	e009      	b.n	800830c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082fe:	e005      	b.n	800830c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800830a:	bf00      	nop
    }

    if (pclk != 0U)
 800830c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d021      	beq.n	8008356 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008316:	4a1c      	ldr	r2, [pc, #112]	@ (8008388 <UART_SetConfig+0xcd4>)
 8008318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800831c:	461a      	mov	r2, r3
 800831e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008320:	fbb3 f2f2 	udiv	r2, r3, r2
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	085b      	lsrs	r3, r3, #1
 800832a:	441a      	add	r2, r3
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	fbb2 f3f3 	udiv	r3, r2, r3
 8008334:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	2b0f      	cmp	r3, #15
 800833a:	d909      	bls.n	8008350 <UART_SetConfig+0xc9c>
 800833c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008342:	d205      	bcs.n	8008350 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008346:	b29a      	uxth	r2, r3
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	60da      	str	r2, [r3, #12]
 800834e:	e002      	b.n	8008356 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2201      	movs	r2, #1
 800835a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2201      	movs	r2, #1
 8008362:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2200      	movs	r2, #0
 800836a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2200      	movs	r2, #0
 8008370:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008372:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008376:	4618      	mov	r0, r3
 8008378:	3748      	adds	r7, #72	@ 0x48
 800837a:	46bd      	mov	sp, r7
 800837c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008380:	03d09000 	.word	0x03d09000
 8008384:	003d0900 	.word	0x003d0900
 8008388:	0800b41c 	.word	0x0800b41c

0800838c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00a      	beq.n	80083b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00a      	beq.n	80083d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00a      	beq.n	80083fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fe:	f003 0304 	and.w	r3, r3, #4
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00a      	beq.n	800843e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00a      	beq.n	8008460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01a      	beq.n	80084a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800848a:	d10a      	bne.n	80084a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	605a      	str	r2, [r3, #4]
  }
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b098      	sub	sp, #96	@ 0x60
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084e0:	f7f9 f9c0 	bl	8001864 <HAL_GetTick>
 80084e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d12f      	bne.n	8008554 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084fc:	2200      	movs	r2, #0
 80084fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f88e 	bl	8008624 <UART_WaitOnFlagUntilTimeout>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d022      	beq.n	8008554 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800851c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800851e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008522:	653b      	str	r3, [r7, #80]	@ 0x50
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800852c:	647b      	str	r3, [r7, #68]	@ 0x44
 800852e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800853a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e6      	bne.n	800850e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e063      	b.n	800861c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0304 	and.w	r3, r3, #4
 800855e:	2b04      	cmp	r3, #4
 8008560:	d149      	bne.n	80085f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008562:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800856a:	2200      	movs	r2, #0
 800856c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f857 	bl	8008624 <UART_WaitOnFlagUntilTimeout>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d03c      	beq.n	80085f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	623b      	str	r3, [r7, #32]
   return(result);
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800859a:	633b      	str	r3, [r7, #48]	@ 0x30
 800859c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1e6      	bne.n	800857c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3308      	adds	r3, #8
 80085b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f023 0301 	bic.w	r3, r3, #1
 80085c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ce:	61fa      	str	r2, [r7, #28]
 80085d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	69b9      	ldr	r1, [r7, #24]
 80085d4:	69fa      	ldr	r2, [r7, #28]
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	617b      	str	r3, [r7, #20]
   return(result);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e5      	bne.n	80085ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e012      	b.n	800861c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3758      	adds	r7, #88	@ 0x58
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	4613      	mov	r3, r2
 8008632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008634:	e04f      	b.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863c:	d04b      	beq.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863e:	f7f9 f911 	bl	8001864 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	429a      	cmp	r2, r3
 800864c:	d302      	bcc.n	8008654 <UART_WaitOnFlagUntilTimeout+0x30>
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e04e      	b.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d037      	beq.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b80      	cmp	r3, #128	@ 0x80
 800866a:	d034      	beq.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b40      	cmp	r3, #64	@ 0x40
 8008670:	d031      	beq.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	f003 0308 	and.w	r3, r3, #8
 800867c:	2b08      	cmp	r3, #8
 800867e:	d110      	bne.n	80086a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2208      	movs	r2, #8
 8008686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 f839 	bl	8008700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2208      	movs	r2, #8
 8008692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e029      	b.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086b0:	d111      	bne.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 f81f 	bl	8008700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e00f      	b.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69da      	ldr	r2, [r3, #28]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4013      	ands	r3, r2
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	bf0c      	ite	eq
 80086e6:	2301      	moveq	r3, #1
 80086e8:	2300      	movne	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d0a0      	beq.n	8008636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b095      	sub	sp, #84	@ 0x54
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800871c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008726:	643b      	str	r3, [r7, #64]	@ 0x40
 8008728:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800872c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e6      	bne.n	8008708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	61fb      	str	r3, [r7, #28]
   return(result);
 800874a:	69fa      	ldr	r2, [r7, #28]
 800874c:	4b1e      	ldr	r3, [pc, #120]	@ (80087c8 <UART_EndRxTransfer+0xc8>)
 800874e:	4013      	ands	r3, r2
 8008750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800875a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800875c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008772:	2b01      	cmp	r3, #1
 8008774:	d118      	bne.n	80087a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	60bb      	str	r3, [r7, #8]
   return(result);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f023 0310 	bic.w	r3, r3, #16
 800878a:	647b      	str	r3, [r7, #68]	@ 0x44
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008794:	61bb      	str	r3, [r7, #24]
 8008796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6979      	ldr	r1, [r7, #20]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	613b      	str	r3, [r7, #16]
   return(result);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087bc:	bf00      	nop
 80087be:	3754      	adds	r7, #84	@ 0x54
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	effffffe 	.word	0xeffffffe

080087cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7fe ff50 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087e8:	bf00      	nop
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	60bb      	str	r3, [r7, #8]
   return(result);
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6979      	ldr	r1, [r7, #20]
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	613b      	str	r3, [r7, #16]
   return(result);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e6      	bne.n	80087f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fe ff1b 	bl	8007674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800883e:	bf00      	nop
 8008840:	3720      	adds	r7, #32
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008882:	b480      	push	{r7}
 8008884:	b085      	sub	sp, #20
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_UARTEx_DisableFifoMode+0x16>
 8008894:	2302      	movs	r3, #2
 8008896:	e027      	b.n	80088e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2224      	movs	r2, #36	@ 0x24
 80088a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 0201 	bic.w	r2, r2, #1
 80088be:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2220      	movs	r2, #32
 80088da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008908:	2302      	movs	r3, #2
 800890a:	e02d      	b.n	8008968 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2224      	movs	r2, #36	@ 0x24
 8008918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0201 	bic.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f84f 	bl	80089ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008980:	2b01      	cmp	r3, #1
 8008982:	d101      	bne.n	8008988 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008984:	2302      	movs	r3, #2
 8008986:	e02d      	b.n	80089e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2224      	movs	r2, #36	@ 0x24
 8008994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0201 	bic.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f811 	bl	80089ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2220      	movs	r2, #32
 80089d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d108      	bne.n	8008a0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a0c:	e031      	b.n	8008a72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a0e:	2310      	movs	r3, #16
 8008a10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a12:	2310      	movs	r3, #16
 8008a14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	0e5b      	lsrs	r3, r3, #25
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	0f5b      	lsrs	r3, r3, #29
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	7b3a      	ldrb	r2, [r7, #12]
 8008a3a:	4911      	ldr	r1, [pc, #68]	@ (8008a80 <UARTEx_SetNbDataToProcess+0x94>)
 8008a3c:	5c8a      	ldrb	r2, [r1, r2]
 8008a3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a42:	7b3a      	ldrb	r2, [r7, #12]
 8008a44:	490f      	ldr	r1, [pc, #60]	@ (8008a84 <UARTEx_SetNbDataToProcess+0x98>)
 8008a46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	7b7a      	ldrb	r2, [r7, #13]
 8008a58:	4909      	ldr	r1, [pc, #36]	@ (8008a80 <UARTEx_SetNbDataToProcess+0x94>)
 8008a5a:	5c8a      	ldrb	r2, [r1, r2]
 8008a5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a60:	7b7a      	ldrb	r2, [r7, #13]
 8008a62:	4908      	ldr	r1, [pc, #32]	@ (8008a84 <UARTEx_SetNbDataToProcess+0x98>)
 8008a64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a72:	bf00      	nop
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	0800b434 	.word	0x0800b434
 8008a84:	0800b43c 	.word	0x0800b43c

08008a88 <__cvt>:
 8008a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a8a:	ed2d 8b02 	vpush	{d8}
 8008a8e:	eeb0 8b40 	vmov.f64	d8, d0
 8008a92:	b085      	sub	sp, #20
 8008a94:	4617      	mov	r7, r2
 8008a96:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008a98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a9a:	ee18 2a90 	vmov	r2, s17
 8008a9e:	f025 0520 	bic.w	r5, r5, #32
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	bfb6      	itet	lt
 8008aa6:	222d      	movlt	r2, #45	@ 0x2d
 8008aa8:	2200      	movge	r2, #0
 8008aaa:	eeb1 8b40 	vneglt.f64	d8, d0
 8008aae:	2d46      	cmp	r5, #70	@ 0x46
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	d004      	beq.n	8008ac0 <__cvt+0x38>
 8008ab6:	2d45      	cmp	r5, #69	@ 0x45
 8008ab8:	d100      	bne.n	8008abc <__cvt+0x34>
 8008aba:	3401      	adds	r4, #1
 8008abc:	2102      	movs	r1, #2
 8008abe:	e000      	b.n	8008ac2 <__cvt+0x3a>
 8008ac0:	2103      	movs	r1, #3
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	ab02      	add	r3, sp, #8
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	4622      	mov	r2, r4
 8008acc:	4633      	mov	r3, r6
 8008ace:	eeb0 0b48 	vmov.f64	d0, d8
 8008ad2:	f000 ff31 	bl	8009938 <_dtoa_r>
 8008ad6:	2d47      	cmp	r5, #71	@ 0x47
 8008ad8:	d114      	bne.n	8008b04 <__cvt+0x7c>
 8008ada:	07fb      	lsls	r3, r7, #31
 8008adc:	d50a      	bpl.n	8008af4 <__cvt+0x6c>
 8008ade:	1902      	adds	r2, r0, r4
 8008ae0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae8:	bf08      	it	eq
 8008aea:	9203      	streq	r2, [sp, #12]
 8008aec:	2130      	movs	r1, #48	@ 0x30
 8008aee:	9b03      	ldr	r3, [sp, #12]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d319      	bcc.n	8008b28 <__cvt+0xa0>
 8008af4:	9b03      	ldr	r3, [sp, #12]
 8008af6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008af8:	1a1b      	subs	r3, r3, r0
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	b005      	add	sp, #20
 8008afe:	ecbd 8b02 	vpop	{d8}
 8008b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b04:	2d46      	cmp	r5, #70	@ 0x46
 8008b06:	eb00 0204 	add.w	r2, r0, r4
 8008b0a:	d1e9      	bne.n	8008ae0 <__cvt+0x58>
 8008b0c:	7803      	ldrb	r3, [r0, #0]
 8008b0e:	2b30      	cmp	r3, #48	@ 0x30
 8008b10:	d107      	bne.n	8008b22 <__cvt+0x9a>
 8008b12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1a:	bf1c      	itt	ne
 8008b1c:	f1c4 0401 	rsbne	r4, r4, #1
 8008b20:	6034      	strne	r4, [r6, #0]
 8008b22:	6833      	ldr	r3, [r6, #0]
 8008b24:	441a      	add	r2, r3
 8008b26:	e7db      	b.n	8008ae0 <__cvt+0x58>
 8008b28:	1c5c      	adds	r4, r3, #1
 8008b2a:	9403      	str	r4, [sp, #12]
 8008b2c:	7019      	strb	r1, [r3, #0]
 8008b2e:	e7de      	b.n	8008aee <__cvt+0x66>

08008b30 <__exponent>:
 8008b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b32:	2900      	cmp	r1, #0
 8008b34:	bfba      	itte	lt
 8008b36:	4249      	neglt	r1, r1
 8008b38:	232d      	movlt	r3, #45	@ 0x2d
 8008b3a:	232b      	movge	r3, #43	@ 0x2b
 8008b3c:	2909      	cmp	r1, #9
 8008b3e:	7002      	strb	r2, [r0, #0]
 8008b40:	7043      	strb	r3, [r0, #1]
 8008b42:	dd29      	ble.n	8008b98 <__exponent+0x68>
 8008b44:	f10d 0307 	add.w	r3, sp, #7
 8008b48:	461d      	mov	r5, r3
 8008b4a:	270a      	movs	r7, #10
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b52:	fb07 1416 	mls	r4, r7, r6, r1
 8008b56:	3430      	adds	r4, #48	@ 0x30
 8008b58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	2c63      	cmp	r4, #99	@ 0x63
 8008b60:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b64:	4631      	mov	r1, r6
 8008b66:	dcf1      	bgt.n	8008b4c <__exponent+0x1c>
 8008b68:	3130      	adds	r1, #48	@ 0x30
 8008b6a:	1e94      	subs	r4, r2, #2
 8008b6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b70:	1c41      	adds	r1, r0, #1
 8008b72:	4623      	mov	r3, r4
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	d30a      	bcc.n	8008b8e <__exponent+0x5e>
 8008b78:	f10d 0309 	add.w	r3, sp, #9
 8008b7c:	1a9b      	subs	r3, r3, r2
 8008b7e:	42ac      	cmp	r4, r5
 8008b80:	bf88      	it	hi
 8008b82:	2300      	movhi	r3, #0
 8008b84:	3302      	adds	r3, #2
 8008b86:	4403      	add	r3, r0
 8008b88:	1a18      	subs	r0, r3, r0
 8008b8a:	b003      	add	sp, #12
 8008b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008b92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008b96:	e7ed      	b.n	8008b74 <__exponent+0x44>
 8008b98:	2330      	movs	r3, #48	@ 0x30
 8008b9a:	3130      	adds	r1, #48	@ 0x30
 8008b9c:	7083      	strb	r3, [r0, #2]
 8008b9e:	70c1      	strb	r1, [r0, #3]
 8008ba0:	1d03      	adds	r3, r0, #4
 8008ba2:	e7f1      	b.n	8008b88 <__exponent+0x58>
 8008ba4:	0000      	movs	r0, r0
	...

08008ba8 <_printf_float>:
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	b08d      	sub	sp, #52	@ 0x34
 8008bae:	460c      	mov	r4, r1
 8008bb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	461f      	mov	r7, r3
 8008bb8:	4605      	mov	r5, r0
 8008bba:	f000 fdad 	bl	8009718 <_localeconv_r>
 8008bbe:	f8d0 b000 	ldr.w	fp, [r0]
 8008bc2:	4658      	mov	r0, fp
 8008bc4:	f7f7 fbf4 	bl	80003b0 <strlen>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008bd4:	6822      	ldr	r2, [r4, #0]
 8008bd6:	9005      	str	r0, [sp, #20]
 8008bd8:	3307      	adds	r3, #7
 8008bda:	f023 0307 	bic.w	r3, r3, #7
 8008bde:	f103 0108 	add.w	r1, r3, #8
 8008be2:	f8c8 1000 	str.w	r1, [r8]
 8008be6:	ed93 0b00 	vldr	d0, [r3]
 8008bea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008e48 <_printf_float+0x2a0>
 8008bee:	eeb0 7bc0 	vabs.f64	d7, d0
 8008bf2:	eeb4 7b46 	vcmp.f64	d7, d6
 8008bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008bfe:	dd24      	ble.n	8008c4a <_printf_float+0xa2>
 8008c00:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c08:	d502      	bpl.n	8008c10 <_printf_float+0x68>
 8008c0a:	232d      	movs	r3, #45	@ 0x2d
 8008c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c10:	498f      	ldr	r1, [pc, #572]	@ (8008e50 <_printf_float+0x2a8>)
 8008c12:	4b90      	ldr	r3, [pc, #576]	@ (8008e54 <_printf_float+0x2ac>)
 8008c14:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008c18:	bf8c      	ite	hi
 8008c1a:	4688      	movhi	r8, r1
 8008c1c:	4698      	movls	r8, r3
 8008c1e:	f022 0204 	bic.w	r2, r2, #4
 8008c22:	2303      	movs	r3, #3
 8008c24:	6123      	str	r3, [r4, #16]
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	f04f 0a00 	mov.w	sl, #0
 8008c2c:	9700      	str	r7, [sp, #0]
 8008c2e:	4633      	mov	r3, r6
 8008c30:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c32:	4621      	mov	r1, r4
 8008c34:	4628      	mov	r0, r5
 8008c36:	f000 f9d1 	bl	8008fdc <_printf_common>
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	f040 8089 	bne.w	8008d52 <_printf_float+0x1aa>
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	b00d      	add	sp, #52	@ 0x34
 8008c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c52:	d709      	bvc.n	8008c68 <_printf_float+0xc0>
 8008c54:	ee10 3a90 	vmov	r3, s1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bfbc      	itt	lt
 8008c5c:	232d      	movlt	r3, #45	@ 0x2d
 8008c5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008c62:	497d      	ldr	r1, [pc, #500]	@ (8008e58 <_printf_float+0x2b0>)
 8008c64:	4b7d      	ldr	r3, [pc, #500]	@ (8008e5c <_printf_float+0x2b4>)
 8008c66:	e7d5      	b.n	8008c14 <_printf_float+0x6c>
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	1c59      	adds	r1, r3, #1
 8008c6c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008c70:	d139      	bne.n	8008ce6 <_printf_float+0x13e>
 8008c72:	2306      	movs	r3, #6
 8008c74:	6063      	str	r3, [r4, #4]
 8008c76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	6022      	str	r2, [r4, #0]
 8008c7e:	9303      	str	r3, [sp, #12]
 8008c80:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008c86:	ab09      	add	r3, sp, #36	@ 0x24
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	6861      	ldr	r1, [r4, #4]
 8008c8c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008c90:	4628      	mov	r0, r5
 8008c92:	f7ff fef9 	bl	8008a88 <__cvt>
 8008c96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	d129      	bne.n	8008cf4 <_printf_float+0x14c>
 8008ca0:	1cc8      	adds	r0, r1, #3
 8008ca2:	db02      	blt.n	8008caa <_printf_float+0x102>
 8008ca4:	6863      	ldr	r3, [r4, #4]
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	dd41      	ble.n	8008d2e <_printf_float+0x186>
 8008caa:	f1a9 0902 	sub.w	r9, r9, #2
 8008cae:	fa5f f989 	uxtb.w	r9, r9
 8008cb2:	3901      	subs	r1, #1
 8008cb4:	464a      	mov	r2, r9
 8008cb6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008cba:	9109      	str	r1, [sp, #36]	@ 0x24
 8008cbc:	f7ff ff38 	bl	8008b30 <__exponent>
 8008cc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cc2:	1813      	adds	r3, r2, r0
 8008cc4:	2a01      	cmp	r2, #1
 8008cc6:	4682      	mov	sl, r0
 8008cc8:	6123      	str	r3, [r4, #16]
 8008cca:	dc02      	bgt.n	8008cd2 <_printf_float+0x12a>
 8008ccc:	6822      	ldr	r2, [r4, #0]
 8008cce:	07d2      	lsls	r2, r2, #31
 8008cd0:	d501      	bpl.n	8008cd6 <_printf_float+0x12e>
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	6123      	str	r3, [r4, #16]
 8008cd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0a6      	beq.n	8008c2c <_printf_float+0x84>
 8008cde:	232d      	movs	r3, #45	@ 0x2d
 8008ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ce4:	e7a2      	b.n	8008c2c <_printf_float+0x84>
 8008ce6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cea:	d1c4      	bne.n	8008c76 <_printf_float+0xce>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1c2      	bne.n	8008c76 <_printf_float+0xce>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e7bf      	b.n	8008c74 <_printf_float+0xcc>
 8008cf4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008cf8:	d9db      	bls.n	8008cb2 <_printf_float+0x10a>
 8008cfa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008cfe:	d118      	bne.n	8008d32 <_printf_float+0x18a>
 8008d00:	2900      	cmp	r1, #0
 8008d02:	6863      	ldr	r3, [r4, #4]
 8008d04:	dd0b      	ble.n	8008d1e <_printf_float+0x176>
 8008d06:	6121      	str	r1, [r4, #16]
 8008d08:	b913      	cbnz	r3, 8008d10 <_printf_float+0x168>
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	07d0      	lsls	r0, r2, #31
 8008d0e:	d502      	bpl.n	8008d16 <_printf_float+0x16e>
 8008d10:	3301      	adds	r3, #1
 8008d12:	440b      	add	r3, r1
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d18:	f04f 0a00 	mov.w	sl, #0
 8008d1c:	e7db      	b.n	8008cd6 <_printf_float+0x12e>
 8008d1e:	b913      	cbnz	r3, 8008d26 <_printf_float+0x17e>
 8008d20:	6822      	ldr	r2, [r4, #0]
 8008d22:	07d2      	lsls	r2, r2, #31
 8008d24:	d501      	bpl.n	8008d2a <_printf_float+0x182>
 8008d26:	3302      	adds	r3, #2
 8008d28:	e7f4      	b.n	8008d14 <_printf_float+0x16c>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e7f2      	b.n	8008d14 <_printf_float+0x16c>
 8008d2e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008d32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d34:	4299      	cmp	r1, r3
 8008d36:	db05      	blt.n	8008d44 <_printf_float+0x19c>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	6121      	str	r1, [r4, #16]
 8008d3c:	07d8      	lsls	r0, r3, #31
 8008d3e:	d5ea      	bpl.n	8008d16 <_printf_float+0x16e>
 8008d40:	1c4b      	adds	r3, r1, #1
 8008d42:	e7e7      	b.n	8008d14 <_printf_float+0x16c>
 8008d44:	2900      	cmp	r1, #0
 8008d46:	bfd4      	ite	le
 8008d48:	f1c1 0202 	rsble	r2, r1, #2
 8008d4c:	2201      	movgt	r2, #1
 8008d4e:	4413      	add	r3, r2
 8008d50:	e7e0      	b.n	8008d14 <_printf_float+0x16c>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	055a      	lsls	r2, r3, #21
 8008d56:	d407      	bmi.n	8008d68 <_printf_float+0x1c0>
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	4642      	mov	r2, r8
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	d12a      	bne.n	8008dbc <_printf_float+0x214>
 8008d66:	e76b      	b.n	8008c40 <_printf_float+0x98>
 8008d68:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008d6c:	f240 80e0 	bls.w	8008f30 <_printf_float+0x388>
 8008d70:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008d74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7c:	d133      	bne.n	8008de6 <_printf_float+0x23e>
 8008d7e:	4a38      	ldr	r2, [pc, #224]	@ (8008e60 <_printf_float+0x2b8>)
 8008d80:	2301      	movs	r3, #1
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f43f af59 	beq.w	8008c40 <_printf_float+0x98>
 8008d8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008d92:	4543      	cmp	r3, r8
 8008d94:	db02      	blt.n	8008d9c <_printf_float+0x1f4>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	07d8      	lsls	r0, r3, #31
 8008d9a:	d50f      	bpl.n	8008dbc <_printf_float+0x214>
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	465a      	mov	r2, fp
 8008da0:	4631      	mov	r1, r6
 8008da2:	4628      	mov	r0, r5
 8008da4:	47b8      	blx	r7
 8008da6:	3001      	adds	r0, #1
 8008da8:	f43f af4a 	beq.w	8008c40 <_printf_float+0x98>
 8008dac:	f04f 0900 	mov.w	r9, #0
 8008db0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008db4:	f104 0a1a 	add.w	sl, r4, #26
 8008db8:	45c8      	cmp	r8, r9
 8008dba:	dc09      	bgt.n	8008dd0 <_printf_float+0x228>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	079b      	lsls	r3, r3, #30
 8008dc0:	f100 8107 	bmi.w	8008fd2 <_printf_float+0x42a>
 8008dc4:	68e0      	ldr	r0, [r4, #12]
 8008dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dc8:	4298      	cmp	r0, r3
 8008dca:	bfb8      	it	lt
 8008dcc:	4618      	movlt	r0, r3
 8008dce:	e739      	b.n	8008c44 <_printf_float+0x9c>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	4652      	mov	r2, sl
 8008dd4:	4631      	mov	r1, r6
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	47b8      	blx	r7
 8008dda:	3001      	adds	r0, #1
 8008ddc:	f43f af30 	beq.w	8008c40 <_printf_float+0x98>
 8008de0:	f109 0901 	add.w	r9, r9, #1
 8008de4:	e7e8      	b.n	8008db8 <_printf_float+0x210>
 8008de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	dc3b      	bgt.n	8008e64 <_printf_float+0x2bc>
 8008dec:	4a1c      	ldr	r2, [pc, #112]	@ (8008e60 <_printf_float+0x2b8>)
 8008dee:	2301      	movs	r3, #1
 8008df0:	4631      	mov	r1, r6
 8008df2:	4628      	mov	r0, r5
 8008df4:	47b8      	blx	r7
 8008df6:	3001      	adds	r0, #1
 8008df8:	f43f af22 	beq.w	8008c40 <_printf_float+0x98>
 8008dfc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e00:	ea59 0303 	orrs.w	r3, r9, r3
 8008e04:	d102      	bne.n	8008e0c <_printf_float+0x264>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	07d9      	lsls	r1, r3, #31
 8008e0a:	d5d7      	bpl.n	8008dbc <_printf_float+0x214>
 8008e0c:	9b05      	ldr	r3, [sp, #20]
 8008e0e:	465a      	mov	r2, fp
 8008e10:	4631      	mov	r1, r6
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b8      	blx	r7
 8008e16:	3001      	adds	r0, #1
 8008e18:	f43f af12 	beq.w	8008c40 <_printf_float+0x98>
 8008e1c:	f04f 0a00 	mov.w	sl, #0
 8008e20:	f104 0b1a 	add.w	fp, r4, #26
 8008e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e26:	425b      	negs	r3, r3
 8008e28:	4553      	cmp	r3, sl
 8008e2a:	dc01      	bgt.n	8008e30 <_printf_float+0x288>
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	e794      	b.n	8008d5a <_printf_float+0x1b2>
 8008e30:	2301      	movs	r3, #1
 8008e32:	465a      	mov	r2, fp
 8008e34:	4631      	mov	r1, r6
 8008e36:	4628      	mov	r0, r5
 8008e38:	47b8      	blx	r7
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f43f af00 	beq.w	8008c40 <_printf_float+0x98>
 8008e40:	f10a 0a01 	add.w	sl, sl, #1
 8008e44:	e7ee      	b.n	8008e24 <_printf_float+0x27c>
 8008e46:	bf00      	nop
 8008e48:	ffffffff 	.word	0xffffffff
 8008e4c:	7fefffff 	.word	0x7fefffff
 8008e50:	0800b448 	.word	0x0800b448
 8008e54:	0800b444 	.word	0x0800b444
 8008e58:	0800b450 	.word	0x0800b450
 8008e5c:	0800b44c 	.word	0x0800b44c
 8008e60:	0800b454 	.word	0x0800b454
 8008e64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e6a:	4553      	cmp	r3, sl
 8008e6c:	bfa8      	it	ge
 8008e6e:	4653      	movge	r3, sl
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	4699      	mov	r9, r3
 8008e74:	dc37      	bgt.n	8008ee6 <_printf_float+0x33e>
 8008e76:	2300      	movs	r3, #0
 8008e78:	9307      	str	r3, [sp, #28]
 8008e7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e7e:	f104 021a 	add.w	r2, r4, #26
 8008e82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e84:	9907      	ldr	r1, [sp, #28]
 8008e86:	9306      	str	r3, [sp, #24]
 8008e88:	eba3 0309 	sub.w	r3, r3, r9
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	dc31      	bgt.n	8008ef4 <_printf_float+0x34c>
 8008e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e92:	459a      	cmp	sl, r3
 8008e94:	dc3b      	bgt.n	8008f0e <_printf_float+0x366>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	07da      	lsls	r2, r3, #31
 8008e9a:	d438      	bmi.n	8008f0e <_printf_float+0x366>
 8008e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9e:	ebaa 0903 	sub.w	r9, sl, r3
 8008ea2:	9b06      	ldr	r3, [sp, #24]
 8008ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8008ea8:	4599      	cmp	r9, r3
 8008eaa:	bfa8      	it	ge
 8008eac:	4699      	movge	r9, r3
 8008eae:	f1b9 0f00 	cmp.w	r9, #0
 8008eb2:	dc34      	bgt.n	8008f1e <_printf_float+0x376>
 8008eb4:	f04f 0800 	mov.w	r8, #0
 8008eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ebc:	f104 0b1a 	add.w	fp, r4, #26
 8008ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec2:	ebaa 0303 	sub.w	r3, sl, r3
 8008ec6:	eba3 0309 	sub.w	r3, r3, r9
 8008eca:	4543      	cmp	r3, r8
 8008ecc:	f77f af76 	ble.w	8008dbc <_printf_float+0x214>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	465a      	mov	r2, fp
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b8      	blx	r7
 8008eda:	3001      	adds	r0, #1
 8008edc:	f43f aeb0 	beq.w	8008c40 <_printf_float+0x98>
 8008ee0:	f108 0801 	add.w	r8, r8, #1
 8008ee4:	e7ec      	b.n	8008ec0 <_printf_float+0x318>
 8008ee6:	4642      	mov	r2, r8
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	d1c1      	bne.n	8008e76 <_printf_float+0x2ce>
 8008ef2:	e6a5      	b.n	8008c40 <_printf_float+0x98>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4628      	mov	r0, r5
 8008efa:	9206      	str	r2, [sp, #24]
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	f43f ae9e 	beq.w	8008c40 <_printf_float+0x98>
 8008f04:	9b07      	ldr	r3, [sp, #28]
 8008f06:	9a06      	ldr	r2, [sp, #24]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	9307      	str	r3, [sp, #28]
 8008f0c:	e7b9      	b.n	8008e82 <_printf_float+0x2da>
 8008f0e:	9b05      	ldr	r3, [sp, #20]
 8008f10:	465a      	mov	r2, fp
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d1bf      	bne.n	8008e9c <_printf_float+0x2f4>
 8008f1c:	e690      	b.n	8008c40 <_printf_float+0x98>
 8008f1e:	9a06      	ldr	r2, [sp, #24]
 8008f20:	464b      	mov	r3, r9
 8008f22:	4442      	add	r2, r8
 8008f24:	4631      	mov	r1, r6
 8008f26:	4628      	mov	r0, r5
 8008f28:	47b8      	blx	r7
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d1c2      	bne.n	8008eb4 <_printf_float+0x30c>
 8008f2e:	e687      	b.n	8008c40 <_printf_float+0x98>
 8008f30:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008f34:	f1b9 0f01 	cmp.w	r9, #1
 8008f38:	dc01      	bgt.n	8008f3e <_printf_float+0x396>
 8008f3a:	07db      	lsls	r3, r3, #31
 8008f3c:	d536      	bpl.n	8008fac <_printf_float+0x404>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4642      	mov	r2, r8
 8008f42:	4631      	mov	r1, r6
 8008f44:	4628      	mov	r0, r5
 8008f46:	47b8      	blx	r7
 8008f48:	3001      	adds	r0, #1
 8008f4a:	f43f ae79 	beq.w	8008c40 <_printf_float+0x98>
 8008f4e:	9b05      	ldr	r3, [sp, #20]
 8008f50:	465a      	mov	r2, fp
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	47b8      	blx	r7
 8008f58:	3001      	adds	r0, #1
 8008f5a:	f43f ae71 	beq.w	8008c40 <_printf_float+0x98>
 8008f5e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008f62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f6e:	d018      	beq.n	8008fa2 <_printf_float+0x3fa>
 8008f70:	464b      	mov	r3, r9
 8008f72:	f108 0201 	add.w	r2, r8, #1
 8008f76:	4631      	mov	r1, r6
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b8      	blx	r7
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d10c      	bne.n	8008f9a <_printf_float+0x3f2>
 8008f80:	e65e      	b.n	8008c40 <_printf_float+0x98>
 8008f82:	2301      	movs	r3, #1
 8008f84:	465a      	mov	r2, fp
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f ae57 	beq.w	8008c40 <_printf_float+0x98>
 8008f92:	f108 0801 	add.w	r8, r8, #1
 8008f96:	45c8      	cmp	r8, r9
 8008f98:	dbf3      	blt.n	8008f82 <_printf_float+0x3da>
 8008f9a:	4653      	mov	r3, sl
 8008f9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008fa0:	e6dc      	b.n	8008d5c <_printf_float+0x1b4>
 8008fa2:	f04f 0800 	mov.w	r8, #0
 8008fa6:	f104 0b1a 	add.w	fp, r4, #26
 8008faa:	e7f4      	b.n	8008f96 <_printf_float+0x3ee>
 8008fac:	2301      	movs	r3, #1
 8008fae:	4642      	mov	r2, r8
 8008fb0:	e7e1      	b.n	8008f76 <_printf_float+0x3ce>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	464a      	mov	r2, r9
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	4628      	mov	r0, r5
 8008fba:	47b8      	blx	r7
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	f43f ae3f 	beq.w	8008c40 <_printf_float+0x98>
 8008fc2:	f108 0801 	add.w	r8, r8, #1
 8008fc6:	68e3      	ldr	r3, [r4, #12]
 8008fc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008fca:	1a5b      	subs	r3, r3, r1
 8008fcc:	4543      	cmp	r3, r8
 8008fce:	dcf0      	bgt.n	8008fb2 <_printf_float+0x40a>
 8008fd0:	e6f8      	b.n	8008dc4 <_printf_float+0x21c>
 8008fd2:	f04f 0800 	mov.w	r8, #0
 8008fd6:	f104 0919 	add.w	r9, r4, #25
 8008fda:	e7f4      	b.n	8008fc6 <_printf_float+0x41e>

08008fdc <_printf_common>:
 8008fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe0:	4616      	mov	r6, r2
 8008fe2:	4698      	mov	r8, r3
 8008fe4:	688a      	ldr	r2, [r1, #8]
 8008fe6:	690b      	ldr	r3, [r1, #16]
 8008fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fec:	4293      	cmp	r3, r2
 8008fee:	bfb8      	it	lt
 8008ff0:	4613      	movlt	r3, r2
 8008ff2:	6033      	str	r3, [r6, #0]
 8008ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	b10a      	cbz	r2, 8009002 <_printf_common+0x26>
 8008ffe:	3301      	adds	r3, #1
 8009000:	6033      	str	r3, [r6, #0]
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	0699      	lsls	r1, r3, #26
 8009006:	bf42      	ittt	mi
 8009008:	6833      	ldrmi	r3, [r6, #0]
 800900a:	3302      	addmi	r3, #2
 800900c:	6033      	strmi	r3, [r6, #0]
 800900e:	6825      	ldr	r5, [r4, #0]
 8009010:	f015 0506 	ands.w	r5, r5, #6
 8009014:	d106      	bne.n	8009024 <_printf_common+0x48>
 8009016:	f104 0a19 	add.w	sl, r4, #25
 800901a:	68e3      	ldr	r3, [r4, #12]
 800901c:	6832      	ldr	r2, [r6, #0]
 800901e:	1a9b      	subs	r3, r3, r2
 8009020:	42ab      	cmp	r3, r5
 8009022:	dc26      	bgt.n	8009072 <_printf_common+0x96>
 8009024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009028:	6822      	ldr	r2, [r4, #0]
 800902a:	3b00      	subs	r3, #0
 800902c:	bf18      	it	ne
 800902e:	2301      	movne	r3, #1
 8009030:	0692      	lsls	r2, r2, #26
 8009032:	d42b      	bmi.n	800908c <_printf_common+0xb0>
 8009034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009038:	4641      	mov	r1, r8
 800903a:	4638      	mov	r0, r7
 800903c:	47c8      	blx	r9
 800903e:	3001      	adds	r0, #1
 8009040:	d01e      	beq.n	8009080 <_printf_common+0xa4>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	6922      	ldr	r2, [r4, #16]
 8009046:	f003 0306 	and.w	r3, r3, #6
 800904a:	2b04      	cmp	r3, #4
 800904c:	bf02      	ittt	eq
 800904e:	68e5      	ldreq	r5, [r4, #12]
 8009050:	6833      	ldreq	r3, [r6, #0]
 8009052:	1aed      	subeq	r5, r5, r3
 8009054:	68a3      	ldr	r3, [r4, #8]
 8009056:	bf0c      	ite	eq
 8009058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800905c:	2500      	movne	r5, #0
 800905e:	4293      	cmp	r3, r2
 8009060:	bfc4      	itt	gt
 8009062:	1a9b      	subgt	r3, r3, r2
 8009064:	18ed      	addgt	r5, r5, r3
 8009066:	2600      	movs	r6, #0
 8009068:	341a      	adds	r4, #26
 800906a:	42b5      	cmp	r5, r6
 800906c:	d11a      	bne.n	80090a4 <_printf_common+0xc8>
 800906e:	2000      	movs	r0, #0
 8009070:	e008      	b.n	8009084 <_printf_common+0xa8>
 8009072:	2301      	movs	r3, #1
 8009074:	4652      	mov	r2, sl
 8009076:	4641      	mov	r1, r8
 8009078:	4638      	mov	r0, r7
 800907a:	47c8      	blx	r9
 800907c:	3001      	adds	r0, #1
 800907e:	d103      	bne.n	8009088 <_printf_common+0xac>
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009088:	3501      	adds	r5, #1
 800908a:	e7c6      	b.n	800901a <_printf_common+0x3e>
 800908c:	18e1      	adds	r1, r4, r3
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	2030      	movs	r0, #48	@ 0x30
 8009092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009096:	4422      	add	r2, r4
 8009098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800909c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090a0:	3302      	adds	r3, #2
 80090a2:	e7c7      	b.n	8009034 <_printf_common+0x58>
 80090a4:	2301      	movs	r3, #1
 80090a6:	4622      	mov	r2, r4
 80090a8:	4641      	mov	r1, r8
 80090aa:	4638      	mov	r0, r7
 80090ac:	47c8      	blx	r9
 80090ae:	3001      	adds	r0, #1
 80090b0:	d0e6      	beq.n	8009080 <_printf_common+0xa4>
 80090b2:	3601      	adds	r6, #1
 80090b4:	e7d9      	b.n	800906a <_printf_common+0x8e>
	...

080090b8 <_printf_i>:
 80090b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	7e0f      	ldrb	r7, [r1, #24]
 80090be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090c0:	2f78      	cmp	r7, #120	@ 0x78
 80090c2:	4691      	mov	r9, r2
 80090c4:	4680      	mov	r8, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	469a      	mov	sl, r3
 80090ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090ce:	d807      	bhi.n	80090e0 <_printf_i+0x28>
 80090d0:	2f62      	cmp	r7, #98	@ 0x62
 80090d2:	d80a      	bhi.n	80090ea <_printf_i+0x32>
 80090d4:	2f00      	cmp	r7, #0
 80090d6:	f000 80d1 	beq.w	800927c <_printf_i+0x1c4>
 80090da:	2f58      	cmp	r7, #88	@ 0x58
 80090dc:	f000 80b8 	beq.w	8009250 <_printf_i+0x198>
 80090e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090e8:	e03a      	b.n	8009160 <_printf_i+0xa8>
 80090ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090ee:	2b15      	cmp	r3, #21
 80090f0:	d8f6      	bhi.n	80090e0 <_printf_i+0x28>
 80090f2:	a101      	add	r1, pc, #4	@ (adr r1, 80090f8 <_printf_i+0x40>)
 80090f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090f8:	08009151 	.word	0x08009151
 80090fc:	08009165 	.word	0x08009165
 8009100:	080090e1 	.word	0x080090e1
 8009104:	080090e1 	.word	0x080090e1
 8009108:	080090e1 	.word	0x080090e1
 800910c:	080090e1 	.word	0x080090e1
 8009110:	08009165 	.word	0x08009165
 8009114:	080090e1 	.word	0x080090e1
 8009118:	080090e1 	.word	0x080090e1
 800911c:	080090e1 	.word	0x080090e1
 8009120:	080090e1 	.word	0x080090e1
 8009124:	08009263 	.word	0x08009263
 8009128:	0800918f 	.word	0x0800918f
 800912c:	0800921d 	.word	0x0800921d
 8009130:	080090e1 	.word	0x080090e1
 8009134:	080090e1 	.word	0x080090e1
 8009138:	08009285 	.word	0x08009285
 800913c:	080090e1 	.word	0x080090e1
 8009140:	0800918f 	.word	0x0800918f
 8009144:	080090e1 	.word	0x080090e1
 8009148:	080090e1 	.word	0x080090e1
 800914c:	08009225 	.word	0x08009225
 8009150:	6833      	ldr	r3, [r6, #0]
 8009152:	1d1a      	adds	r2, r3, #4
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6032      	str	r2, [r6, #0]
 8009158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800915c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009160:	2301      	movs	r3, #1
 8009162:	e09c      	b.n	800929e <_printf_i+0x1e6>
 8009164:	6833      	ldr	r3, [r6, #0]
 8009166:	6820      	ldr	r0, [r4, #0]
 8009168:	1d19      	adds	r1, r3, #4
 800916a:	6031      	str	r1, [r6, #0]
 800916c:	0606      	lsls	r6, r0, #24
 800916e:	d501      	bpl.n	8009174 <_printf_i+0xbc>
 8009170:	681d      	ldr	r5, [r3, #0]
 8009172:	e003      	b.n	800917c <_printf_i+0xc4>
 8009174:	0645      	lsls	r5, r0, #25
 8009176:	d5fb      	bpl.n	8009170 <_printf_i+0xb8>
 8009178:	f9b3 5000 	ldrsh.w	r5, [r3]
 800917c:	2d00      	cmp	r5, #0
 800917e:	da03      	bge.n	8009188 <_printf_i+0xd0>
 8009180:	232d      	movs	r3, #45	@ 0x2d
 8009182:	426d      	negs	r5, r5
 8009184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009188:	4858      	ldr	r0, [pc, #352]	@ (80092ec <_printf_i+0x234>)
 800918a:	230a      	movs	r3, #10
 800918c:	e011      	b.n	80091b2 <_printf_i+0xfa>
 800918e:	6821      	ldr	r1, [r4, #0]
 8009190:	6833      	ldr	r3, [r6, #0]
 8009192:	0608      	lsls	r0, r1, #24
 8009194:	f853 5b04 	ldr.w	r5, [r3], #4
 8009198:	d402      	bmi.n	80091a0 <_printf_i+0xe8>
 800919a:	0649      	lsls	r1, r1, #25
 800919c:	bf48      	it	mi
 800919e:	b2ad      	uxthmi	r5, r5
 80091a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80091a2:	4852      	ldr	r0, [pc, #328]	@ (80092ec <_printf_i+0x234>)
 80091a4:	6033      	str	r3, [r6, #0]
 80091a6:	bf14      	ite	ne
 80091a8:	230a      	movne	r3, #10
 80091aa:	2308      	moveq	r3, #8
 80091ac:	2100      	movs	r1, #0
 80091ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091b2:	6866      	ldr	r6, [r4, #4]
 80091b4:	60a6      	str	r6, [r4, #8]
 80091b6:	2e00      	cmp	r6, #0
 80091b8:	db05      	blt.n	80091c6 <_printf_i+0x10e>
 80091ba:	6821      	ldr	r1, [r4, #0]
 80091bc:	432e      	orrs	r6, r5
 80091be:	f021 0104 	bic.w	r1, r1, #4
 80091c2:	6021      	str	r1, [r4, #0]
 80091c4:	d04b      	beq.n	800925e <_printf_i+0x1a6>
 80091c6:	4616      	mov	r6, r2
 80091c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80091cc:	fb03 5711 	mls	r7, r3, r1, r5
 80091d0:	5dc7      	ldrb	r7, [r0, r7]
 80091d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091d6:	462f      	mov	r7, r5
 80091d8:	42bb      	cmp	r3, r7
 80091da:	460d      	mov	r5, r1
 80091dc:	d9f4      	bls.n	80091c8 <_printf_i+0x110>
 80091de:	2b08      	cmp	r3, #8
 80091e0:	d10b      	bne.n	80091fa <_printf_i+0x142>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	07df      	lsls	r7, r3, #31
 80091e6:	d508      	bpl.n	80091fa <_printf_i+0x142>
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	6861      	ldr	r1, [r4, #4]
 80091ec:	4299      	cmp	r1, r3
 80091ee:	bfde      	ittt	le
 80091f0:	2330      	movle	r3, #48	@ 0x30
 80091f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091fa:	1b92      	subs	r2, r2, r6
 80091fc:	6122      	str	r2, [r4, #16]
 80091fe:	f8cd a000 	str.w	sl, [sp]
 8009202:	464b      	mov	r3, r9
 8009204:	aa03      	add	r2, sp, #12
 8009206:	4621      	mov	r1, r4
 8009208:	4640      	mov	r0, r8
 800920a:	f7ff fee7 	bl	8008fdc <_printf_common>
 800920e:	3001      	adds	r0, #1
 8009210:	d14a      	bne.n	80092a8 <_printf_i+0x1f0>
 8009212:	f04f 30ff 	mov.w	r0, #4294967295
 8009216:	b004      	add	sp, #16
 8009218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	f043 0320 	orr.w	r3, r3, #32
 8009222:	6023      	str	r3, [r4, #0]
 8009224:	4832      	ldr	r0, [pc, #200]	@ (80092f0 <_printf_i+0x238>)
 8009226:	2778      	movs	r7, #120	@ 0x78
 8009228:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	6831      	ldr	r1, [r6, #0]
 8009230:	061f      	lsls	r7, r3, #24
 8009232:	f851 5b04 	ldr.w	r5, [r1], #4
 8009236:	d402      	bmi.n	800923e <_printf_i+0x186>
 8009238:	065f      	lsls	r7, r3, #25
 800923a:	bf48      	it	mi
 800923c:	b2ad      	uxthmi	r5, r5
 800923e:	6031      	str	r1, [r6, #0]
 8009240:	07d9      	lsls	r1, r3, #31
 8009242:	bf44      	itt	mi
 8009244:	f043 0320 	orrmi.w	r3, r3, #32
 8009248:	6023      	strmi	r3, [r4, #0]
 800924a:	b11d      	cbz	r5, 8009254 <_printf_i+0x19c>
 800924c:	2310      	movs	r3, #16
 800924e:	e7ad      	b.n	80091ac <_printf_i+0xf4>
 8009250:	4826      	ldr	r0, [pc, #152]	@ (80092ec <_printf_i+0x234>)
 8009252:	e7e9      	b.n	8009228 <_printf_i+0x170>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	f023 0320 	bic.w	r3, r3, #32
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	e7f6      	b.n	800924c <_printf_i+0x194>
 800925e:	4616      	mov	r6, r2
 8009260:	e7bd      	b.n	80091de <_printf_i+0x126>
 8009262:	6833      	ldr	r3, [r6, #0]
 8009264:	6825      	ldr	r5, [r4, #0]
 8009266:	6961      	ldr	r1, [r4, #20]
 8009268:	1d18      	adds	r0, r3, #4
 800926a:	6030      	str	r0, [r6, #0]
 800926c:	062e      	lsls	r6, r5, #24
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	d501      	bpl.n	8009276 <_printf_i+0x1be>
 8009272:	6019      	str	r1, [r3, #0]
 8009274:	e002      	b.n	800927c <_printf_i+0x1c4>
 8009276:	0668      	lsls	r0, r5, #25
 8009278:	d5fb      	bpl.n	8009272 <_printf_i+0x1ba>
 800927a:	8019      	strh	r1, [r3, #0]
 800927c:	2300      	movs	r3, #0
 800927e:	6123      	str	r3, [r4, #16]
 8009280:	4616      	mov	r6, r2
 8009282:	e7bc      	b.n	80091fe <_printf_i+0x146>
 8009284:	6833      	ldr	r3, [r6, #0]
 8009286:	1d1a      	adds	r2, r3, #4
 8009288:	6032      	str	r2, [r6, #0]
 800928a:	681e      	ldr	r6, [r3, #0]
 800928c:	6862      	ldr	r2, [r4, #4]
 800928e:	2100      	movs	r1, #0
 8009290:	4630      	mov	r0, r6
 8009292:	f7f7 f83d 	bl	8000310 <memchr>
 8009296:	b108      	cbz	r0, 800929c <_printf_i+0x1e4>
 8009298:	1b80      	subs	r0, r0, r6
 800929a:	6060      	str	r0, [r4, #4]
 800929c:	6863      	ldr	r3, [r4, #4]
 800929e:	6123      	str	r3, [r4, #16]
 80092a0:	2300      	movs	r3, #0
 80092a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092a6:	e7aa      	b.n	80091fe <_printf_i+0x146>
 80092a8:	6923      	ldr	r3, [r4, #16]
 80092aa:	4632      	mov	r2, r6
 80092ac:	4649      	mov	r1, r9
 80092ae:	4640      	mov	r0, r8
 80092b0:	47d0      	blx	sl
 80092b2:	3001      	adds	r0, #1
 80092b4:	d0ad      	beq.n	8009212 <_printf_i+0x15a>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	079b      	lsls	r3, r3, #30
 80092ba:	d413      	bmi.n	80092e4 <_printf_i+0x22c>
 80092bc:	68e0      	ldr	r0, [r4, #12]
 80092be:	9b03      	ldr	r3, [sp, #12]
 80092c0:	4298      	cmp	r0, r3
 80092c2:	bfb8      	it	lt
 80092c4:	4618      	movlt	r0, r3
 80092c6:	e7a6      	b.n	8009216 <_printf_i+0x15e>
 80092c8:	2301      	movs	r3, #1
 80092ca:	4632      	mov	r2, r6
 80092cc:	4649      	mov	r1, r9
 80092ce:	4640      	mov	r0, r8
 80092d0:	47d0      	blx	sl
 80092d2:	3001      	adds	r0, #1
 80092d4:	d09d      	beq.n	8009212 <_printf_i+0x15a>
 80092d6:	3501      	adds	r5, #1
 80092d8:	68e3      	ldr	r3, [r4, #12]
 80092da:	9903      	ldr	r1, [sp, #12]
 80092dc:	1a5b      	subs	r3, r3, r1
 80092de:	42ab      	cmp	r3, r5
 80092e0:	dcf2      	bgt.n	80092c8 <_printf_i+0x210>
 80092e2:	e7eb      	b.n	80092bc <_printf_i+0x204>
 80092e4:	2500      	movs	r5, #0
 80092e6:	f104 0619 	add.w	r6, r4, #25
 80092ea:	e7f5      	b.n	80092d8 <_printf_i+0x220>
 80092ec:	0800b456 	.word	0x0800b456
 80092f0:	0800b467 	.word	0x0800b467

080092f4 <std>:
 80092f4:	2300      	movs	r3, #0
 80092f6:	b510      	push	{r4, lr}
 80092f8:	4604      	mov	r4, r0
 80092fa:	e9c0 3300 	strd	r3, r3, [r0]
 80092fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009302:	6083      	str	r3, [r0, #8]
 8009304:	8181      	strh	r1, [r0, #12]
 8009306:	6643      	str	r3, [r0, #100]	@ 0x64
 8009308:	81c2      	strh	r2, [r0, #14]
 800930a:	6183      	str	r3, [r0, #24]
 800930c:	4619      	mov	r1, r3
 800930e:	2208      	movs	r2, #8
 8009310:	305c      	adds	r0, #92	@ 0x5c
 8009312:	f000 f9f9 	bl	8009708 <memset>
 8009316:	4b0d      	ldr	r3, [pc, #52]	@ (800934c <std+0x58>)
 8009318:	6263      	str	r3, [r4, #36]	@ 0x24
 800931a:	4b0d      	ldr	r3, [pc, #52]	@ (8009350 <std+0x5c>)
 800931c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800931e:	4b0d      	ldr	r3, [pc, #52]	@ (8009354 <std+0x60>)
 8009320:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009322:	4b0d      	ldr	r3, [pc, #52]	@ (8009358 <std+0x64>)
 8009324:	6323      	str	r3, [r4, #48]	@ 0x30
 8009326:	4b0d      	ldr	r3, [pc, #52]	@ (800935c <std+0x68>)
 8009328:	6224      	str	r4, [r4, #32]
 800932a:	429c      	cmp	r4, r3
 800932c:	d006      	beq.n	800933c <std+0x48>
 800932e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009332:	4294      	cmp	r4, r2
 8009334:	d002      	beq.n	800933c <std+0x48>
 8009336:	33d0      	adds	r3, #208	@ 0xd0
 8009338:	429c      	cmp	r4, r3
 800933a:	d105      	bne.n	8009348 <std+0x54>
 800933c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009344:	f000 ba5c 	b.w	8009800 <__retarget_lock_init_recursive>
 8009348:	bd10      	pop	{r4, pc}
 800934a:	bf00      	nop
 800934c:	08009559 	.word	0x08009559
 8009350:	0800957b 	.word	0x0800957b
 8009354:	080095b3 	.word	0x080095b3
 8009358:	080095d7 	.word	0x080095d7
 800935c:	240003c4 	.word	0x240003c4

08009360 <stdio_exit_handler>:
 8009360:	4a02      	ldr	r2, [pc, #8]	@ (800936c <stdio_exit_handler+0xc>)
 8009362:	4903      	ldr	r1, [pc, #12]	@ (8009370 <stdio_exit_handler+0x10>)
 8009364:	4803      	ldr	r0, [pc, #12]	@ (8009374 <stdio_exit_handler+0x14>)
 8009366:	f000 b869 	b.w	800943c <_fwalk_sglue>
 800936a:	bf00      	nop
 800936c:	24000010 	.word	0x24000010
 8009370:	0800b075 	.word	0x0800b075
 8009374:	24000020 	.word	0x24000020

08009378 <cleanup_stdio>:
 8009378:	6841      	ldr	r1, [r0, #4]
 800937a:	4b0c      	ldr	r3, [pc, #48]	@ (80093ac <cleanup_stdio+0x34>)
 800937c:	4299      	cmp	r1, r3
 800937e:	b510      	push	{r4, lr}
 8009380:	4604      	mov	r4, r0
 8009382:	d001      	beq.n	8009388 <cleanup_stdio+0x10>
 8009384:	f001 fe76 	bl	800b074 <_fflush_r>
 8009388:	68a1      	ldr	r1, [r4, #8]
 800938a:	4b09      	ldr	r3, [pc, #36]	@ (80093b0 <cleanup_stdio+0x38>)
 800938c:	4299      	cmp	r1, r3
 800938e:	d002      	beq.n	8009396 <cleanup_stdio+0x1e>
 8009390:	4620      	mov	r0, r4
 8009392:	f001 fe6f 	bl	800b074 <_fflush_r>
 8009396:	68e1      	ldr	r1, [r4, #12]
 8009398:	4b06      	ldr	r3, [pc, #24]	@ (80093b4 <cleanup_stdio+0x3c>)
 800939a:	4299      	cmp	r1, r3
 800939c:	d004      	beq.n	80093a8 <cleanup_stdio+0x30>
 800939e:	4620      	mov	r0, r4
 80093a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a4:	f001 be66 	b.w	800b074 <_fflush_r>
 80093a8:	bd10      	pop	{r4, pc}
 80093aa:	bf00      	nop
 80093ac:	240003c4 	.word	0x240003c4
 80093b0:	2400042c 	.word	0x2400042c
 80093b4:	24000494 	.word	0x24000494

080093b8 <global_stdio_init.part.0>:
 80093b8:	b510      	push	{r4, lr}
 80093ba:	4b0b      	ldr	r3, [pc, #44]	@ (80093e8 <global_stdio_init.part.0+0x30>)
 80093bc:	4c0b      	ldr	r4, [pc, #44]	@ (80093ec <global_stdio_init.part.0+0x34>)
 80093be:	4a0c      	ldr	r2, [pc, #48]	@ (80093f0 <global_stdio_init.part.0+0x38>)
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	4620      	mov	r0, r4
 80093c4:	2200      	movs	r2, #0
 80093c6:	2104      	movs	r1, #4
 80093c8:	f7ff ff94 	bl	80092f4 <std>
 80093cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80093d0:	2201      	movs	r2, #1
 80093d2:	2109      	movs	r1, #9
 80093d4:	f7ff ff8e 	bl	80092f4 <std>
 80093d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80093dc:	2202      	movs	r2, #2
 80093de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093e2:	2112      	movs	r1, #18
 80093e4:	f7ff bf86 	b.w	80092f4 <std>
 80093e8:	240004fc 	.word	0x240004fc
 80093ec:	240003c4 	.word	0x240003c4
 80093f0:	08009361 	.word	0x08009361

080093f4 <__sfp_lock_acquire>:
 80093f4:	4801      	ldr	r0, [pc, #4]	@ (80093fc <__sfp_lock_acquire+0x8>)
 80093f6:	f000 ba04 	b.w	8009802 <__retarget_lock_acquire_recursive>
 80093fa:	bf00      	nop
 80093fc:	24000505 	.word	0x24000505

08009400 <__sfp_lock_release>:
 8009400:	4801      	ldr	r0, [pc, #4]	@ (8009408 <__sfp_lock_release+0x8>)
 8009402:	f000 b9ff 	b.w	8009804 <__retarget_lock_release_recursive>
 8009406:	bf00      	nop
 8009408:	24000505 	.word	0x24000505

0800940c <__sinit>:
 800940c:	b510      	push	{r4, lr}
 800940e:	4604      	mov	r4, r0
 8009410:	f7ff fff0 	bl	80093f4 <__sfp_lock_acquire>
 8009414:	6a23      	ldr	r3, [r4, #32]
 8009416:	b11b      	cbz	r3, 8009420 <__sinit+0x14>
 8009418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800941c:	f7ff bff0 	b.w	8009400 <__sfp_lock_release>
 8009420:	4b04      	ldr	r3, [pc, #16]	@ (8009434 <__sinit+0x28>)
 8009422:	6223      	str	r3, [r4, #32]
 8009424:	4b04      	ldr	r3, [pc, #16]	@ (8009438 <__sinit+0x2c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1f5      	bne.n	8009418 <__sinit+0xc>
 800942c:	f7ff ffc4 	bl	80093b8 <global_stdio_init.part.0>
 8009430:	e7f2      	b.n	8009418 <__sinit+0xc>
 8009432:	bf00      	nop
 8009434:	08009379 	.word	0x08009379
 8009438:	240004fc 	.word	0x240004fc

0800943c <_fwalk_sglue>:
 800943c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009440:	4607      	mov	r7, r0
 8009442:	4688      	mov	r8, r1
 8009444:	4614      	mov	r4, r2
 8009446:	2600      	movs	r6, #0
 8009448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800944c:	f1b9 0901 	subs.w	r9, r9, #1
 8009450:	d505      	bpl.n	800945e <_fwalk_sglue+0x22>
 8009452:	6824      	ldr	r4, [r4, #0]
 8009454:	2c00      	cmp	r4, #0
 8009456:	d1f7      	bne.n	8009448 <_fwalk_sglue+0xc>
 8009458:	4630      	mov	r0, r6
 800945a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945e:	89ab      	ldrh	r3, [r5, #12]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d907      	bls.n	8009474 <_fwalk_sglue+0x38>
 8009464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009468:	3301      	adds	r3, #1
 800946a:	d003      	beq.n	8009474 <_fwalk_sglue+0x38>
 800946c:	4629      	mov	r1, r5
 800946e:	4638      	mov	r0, r7
 8009470:	47c0      	blx	r8
 8009472:	4306      	orrs	r6, r0
 8009474:	3568      	adds	r5, #104	@ 0x68
 8009476:	e7e9      	b.n	800944c <_fwalk_sglue+0x10>

08009478 <iprintf>:
 8009478:	b40f      	push	{r0, r1, r2, r3}
 800947a:	b507      	push	{r0, r1, r2, lr}
 800947c:	4906      	ldr	r1, [pc, #24]	@ (8009498 <iprintf+0x20>)
 800947e:	ab04      	add	r3, sp, #16
 8009480:	6808      	ldr	r0, [r1, #0]
 8009482:	f853 2b04 	ldr.w	r2, [r3], #4
 8009486:	6881      	ldr	r1, [r0, #8]
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	f001 fc57 	bl	800ad3c <_vfiprintf_r>
 800948e:	b003      	add	sp, #12
 8009490:	f85d eb04 	ldr.w	lr, [sp], #4
 8009494:	b004      	add	sp, #16
 8009496:	4770      	bx	lr
 8009498:	2400001c 	.word	0x2400001c

0800949c <_puts_r>:
 800949c:	6a03      	ldr	r3, [r0, #32]
 800949e:	b570      	push	{r4, r5, r6, lr}
 80094a0:	6884      	ldr	r4, [r0, #8]
 80094a2:	4605      	mov	r5, r0
 80094a4:	460e      	mov	r6, r1
 80094a6:	b90b      	cbnz	r3, 80094ac <_puts_r+0x10>
 80094a8:	f7ff ffb0 	bl	800940c <__sinit>
 80094ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094ae:	07db      	lsls	r3, r3, #31
 80094b0:	d405      	bmi.n	80094be <_puts_r+0x22>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	0598      	lsls	r0, r3, #22
 80094b6:	d402      	bmi.n	80094be <_puts_r+0x22>
 80094b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ba:	f000 f9a2 	bl	8009802 <__retarget_lock_acquire_recursive>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	0719      	lsls	r1, r3, #28
 80094c2:	d502      	bpl.n	80094ca <_puts_r+0x2e>
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d135      	bne.n	8009536 <_puts_r+0x9a>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4628      	mov	r0, r5
 80094ce:	f000 f8c5 	bl	800965c <__swsetup_r>
 80094d2:	b380      	cbz	r0, 8009536 <_puts_r+0x9a>
 80094d4:	f04f 35ff 	mov.w	r5, #4294967295
 80094d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094da:	07da      	lsls	r2, r3, #31
 80094dc:	d405      	bmi.n	80094ea <_puts_r+0x4e>
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	059b      	lsls	r3, r3, #22
 80094e2:	d402      	bmi.n	80094ea <_puts_r+0x4e>
 80094e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094e6:	f000 f98d 	bl	8009804 <__retarget_lock_release_recursive>
 80094ea:	4628      	mov	r0, r5
 80094ec:	bd70      	pop	{r4, r5, r6, pc}
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	da04      	bge.n	80094fc <_puts_r+0x60>
 80094f2:	69a2      	ldr	r2, [r4, #24]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	dc17      	bgt.n	8009528 <_puts_r+0x8c>
 80094f8:	290a      	cmp	r1, #10
 80094fa:	d015      	beq.n	8009528 <_puts_r+0x8c>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	6022      	str	r2, [r4, #0]
 8009502:	7019      	strb	r1, [r3, #0]
 8009504:	68a3      	ldr	r3, [r4, #8]
 8009506:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800950a:	3b01      	subs	r3, #1
 800950c:	60a3      	str	r3, [r4, #8]
 800950e:	2900      	cmp	r1, #0
 8009510:	d1ed      	bne.n	80094ee <_puts_r+0x52>
 8009512:	2b00      	cmp	r3, #0
 8009514:	da11      	bge.n	800953a <_puts_r+0x9e>
 8009516:	4622      	mov	r2, r4
 8009518:	210a      	movs	r1, #10
 800951a:	4628      	mov	r0, r5
 800951c:	f000 f85f 	bl	80095de <__swbuf_r>
 8009520:	3001      	adds	r0, #1
 8009522:	d0d7      	beq.n	80094d4 <_puts_r+0x38>
 8009524:	250a      	movs	r5, #10
 8009526:	e7d7      	b.n	80094d8 <_puts_r+0x3c>
 8009528:	4622      	mov	r2, r4
 800952a:	4628      	mov	r0, r5
 800952c:	f000 f857 	bl	80095de <__swbuf_r>
 8009530:	3001      	adds	r0, #1
 8009532:	d1e7      	bne.n	8009504 <_puts_r+0x68>
 8009534:	e7ce      	b.n	80094d4 <_puts_r+0x38>
 8009536:	3e01      	subs	r6, #1
 8009538:	e7e4      	b.n	8009504 <_puts_r+0x68>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	1c5a      	adds	r2, r3, #1
 800953e:	6022      	str	r2, [r4, #0]
 8009540:	220a      	movs	r2, #10
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	e7ee      	b.n	8009524 <_puts_r+0x88>
	...

08009548 <puts>:
 8009548:	4b02      	ldr	r3, [pc, #8]	@ (8009554 <puts+0xc>)
 800954a:	4601      	mov	r1, r0
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	f7ff bfa5 	b.w	800949c <_puts_r>
 8009552:	bf00      	nop
 8009554:	2400001c 	.word	0x2400001c

08009558 <__sread>:
 8009558:	b510      	push	{r4, lr}
 800955a:	460c      	mov	r4, r1
 800955c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009560:	f000 f900 	bl	8009764 <_read_r>
 8009564:	2800      	cmp	r0, #0
 8009566:	bfab      	itete	ge
 8009568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800956a:	89a3      	ldrhlt	r3, [r4, #12]
 800956c:	181b      	addge	r3, r3, r0
 800956e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009572:	bfac      	ite	ge
 8009574:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009576:	81a3      	strhlt	r3, [r4, #12]
 8009578:	bd10      	pop	{r4, pc}

0800957a <__swrite>:
 800957a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957e:	461f      	mov	r7, r3
 8009580:	898b      	ldrh	r3, [r1, #12]
 8009582:	05db      	lsls	r3, r3, #23
 8009584:	4605      	mov	r5, r0
 8009586:	460c      	mov	r4, r1
 8009588:	4616      	mov	r6, r2
 800958a:	d505      	bpl.n	8009598 <__swrite+0x1e>
 800958c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009590:	2302      	movs	r3, #2
 8009592:	2200      	movs	r2, #0
 8009594:	f000 f8d4 	bl	8009740 <_lseek_r>
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800959e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095a2:	81a3      	strh	r3, [r4, #12]
 80095a4:	4632      	mov	r2, r6
 80095a6:	463b      	mov	r3, r7
 80095a8:	4628      	mov	r0, r5
 80095aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ae:	f000 b8eb 	b.w	8009788 <_write_r>

080095b2 <__sseek>:
 80095b2:	b510      	push	{r4, lr}
 80095b4:	460c      	mov	r4, r1
 80095b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ba:	f000 f8c1 	bl	8009740 <_lseek_r>
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	bf15      	itete	ne
 80095c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80095c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80095ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80095ce:	81a3      	strheq	r3, [r4, #12]
 80095d0:	bf18      	it	ne
 80095d2:	81a3      	strhne	r3, [r4, #12]
 80095d4:	bd10      	pop	{r4, pc}

080095d6 <__sclose>:
 80095d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095da:	f000 b8a1 	b.w	8009720 <_close_r>

080095de <__swbuf_r>:
 80095de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e0:	460e      	mov	r6, r1
 80095e2:	4614      	mov	r4, r2
 80095e4:	4605      	mov	r5, r0
 80095e6:	b118      	cbz	r0, 80095f0 <__swbuf_r+0x12>
 80095e8:	6a03      	ldr	r3, [r0, #32]
 80095ea:	b90b      	cbnz	r3, 80095f0 <__swbuf_r+0x12>
 80095ec:	f7ff ff0e 	bl	800940c <__sinit>
 80095f0:	69a3      	ldr	r3, [r4, #24]
 80095f2:	60a3      	str	r3, [r4, #8]
 80095f4:	89a3      	ldrh	r3, [r4, #12]
 80095f6:	071a      	lsls	r2, r3, #28
 80095f8:	d501      	bpl.n	80095fe <__swbuf_r+0x20>
 80095fa:	6923      	ldr	r3, [r4, #16]
 80095fc:	b943      	cbnz	r3, 8009610 <__swbuf_r+0x32>
 80095fe:	4621      	mov	r1, r4
 8009600:	4628      	mov	r0, r5
 8009602:	f000 f82b 	bl	800965c <__swsetup_r>
 8009606:	b118      	cbz	r0, 8009610 <__swbuf_r+0x32>
 8009608:	f04f 37ff 	mov.w	r7, #4294967295
 800960c:	4638      	mov	r0, r7
 800960e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	6922      	ldr	r2, [r4, #16]
 8009614:	1a98      	subs	r0, r3, r2
 8009616:	6963      	ldr	r3, [r4, #20]
 8009618:	b2f6      	uxtb	r6, r6
 800961a:	4283      	cmp	r3, r0
 800961c:	4637      	mov	r7, r6
 800961e:	dc05      	bgt.n	800962c <__swbuf_r+0x4e>
 8009620:	4621      	mov	r1, r4
 8009622:	4628      	mov	r0, r5
 8009624:	f001 fd26 	bl	800b074 <_fflush_r>
 8009628:	2800      	cmp	r0, #0
 800962a:	d1ed      	bne.n	8009608 <__swbuf_r+0x2a>
 800962c:	68a3      	ldr	r3, [r4, #8]
 800962e:	3b01      	subs	r3, #1
 8009630:	60a3      	str	r3, [r4, #8]
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	6022      	str	r2, [r4, #0]
 8009638:	701e      	strb	r6, [r3, #0]
 800963a:	6962      	ldr	r2, [r4, #20]
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	429a      	cmp	r2, r3
 8009640:	d004      	beq.n	800964c <__swbuf_r+0x6e>
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	07db      	lsls	r3, r3, #31
 8009646:	d5e1      	bpl.n	800960c <__swbuf_r+0x2e>
 8009648:	2e0a      	cmp	r6, #10
 800964a:	d1df      	bne.n	800960c <__swbuf_r+0x2e>
 800964c:	4621      	mov	r1, r4
 800964e:	4628      	mov	r0, r5
 8009650:	f001 fd10 	bl	800b074 <_fflush_r>
 8009654:	2800      	cmp	r0, #0
 8009656:	d0d9      	beq.n	800960c <__swbuf_r+0x2e>
 8009658:	e7d6      	b.n	8009608 <__swbuf_r+0x2a>
	...

0800965c <__swsetup_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4b29      	ldr	r3, [pc, #164]	@ (8009704 <__swsetup_r+0xa8>)
 8009660:	4605      	mov	r5, r0
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	460c      	mov	r4, r1
 8009666:	b118      	cbz	r0, 8009670 <__swsetup_r+0x14>
 8009668:	6a03      	ldr	r3, [r0, #32]
 800966a:	b90b      	cbnz	r3, 8009670 <__swsetup_r+0x14>
 800966c:	f7ff fece 	bl	800940c <__sinit>
 8009670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009674:	0719      	lsls	r1, r3, #28
 8009676:	d422      	bmi.n	80096be <__swsetup_r+0x62>
 8009678:	06da      	lsls	r2, r3, #27
 800967a:	d407      	bmi.n	800968c <__swsetup_r+0x30>
 800967c:	2209      	movs	r2, #9
 800967e:	602a      	str	r2, [r5, #0]
 8009680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	f04f 30ff 	mov.w	r0, #4294967295
 800968a:	e033      	b.n	80096f4 <__swsetup_r+0x98>
 800968c:	0758      	lsls	r0, r3, #29
 800968e:	d512      	bpl.n	80096b6 <__swsetup_r+0x5a>
 8009690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009692:	b141      	cbz	r1, 80096a6 <__swsetup_r+0x4a>
 8009694:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009698:	4299      	cmp	r1, r3
 800969a:	d002      	beq.n	80096a2 <__swsetup_r+0x46>
 800969c:	4628      	mov	r0, r5
 800969e:	f000 fea9 	bl	800a3f4 <_free_r>
 80096a2:	2300      	movs	r3, #0
 80096a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	2300      	movs	r3, #0
 80096b0:	6063      	str	r3, [r4, #4]
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	f043 0308 	orr.w	r3, r3, #8
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	6923      	ldr	r3, [r4, #16]
 80096c0:	b94b      	cbnz	r3, 80096d6 <__swsetup_r+0x7a>
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096cc:	d003      	beq.n	80096d6 <__swsetup_r+0x7a>
 80096ce:	4621      	mov	r1, r4
 80096d0:	4628      	mov	r0, r5
 80096d2:	f001 fd1d 	bl	800b110 <__smakebuf_r>
 80096d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096da:	f013 0201 	ands.w	r2, r3, #1
 80096de:	d00a      	beq.n	80096f6 <__swsetup_r+0x9a>
 80096e0:	2200      	movs	r2, #0
 80096e2:	60a2      	str	r2, [r4, #8]
 80096e4:	6962      	ldr	r2, [r4, #20]
 80096e6:	4252      	negs	r2, r2
 80096e8:	61a2      	str	r2, [r4, #24]
 80096ea:	6922      	ldr	r2, [r4, #16]
 80096ec:	b942      	cbnz	r2, 8009700 <__swsetup_r+0xa4>
 80096ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096f2:	d1c5      	bne.n	8009680 <__swsetup_r+0x24>
 80096f4:	bd38      	pop	{r3, r4, r5, pc}
 80096f6:	0799      	lsls	r1, r3, #30
 80096f8:	bf58      	it	pl
 80096fa:	6962      	ldrpl	r2, [r4, #20]
 80096fc:	60a2      	str	r2, [r4, #8]
 80096fe:	e7f4      	b.n	80096ea <__swsetup_r+0x8e>
 8009700:	2000      	movs	r0, #0
 8009702:	e7f7      	b.n	80096f4 <__swsetup_r+0x98>
 8009704:	2400001c 	.word	0x2400001c

08009708 <memset>:
 8009708:	4402      	add	r2, r0
 800970a:	4603      	mov	r3, r0
 800970c:	4293      	cmp	r3, r2
 800970e:	d100      	bne.n	8009712 <memset+0xa>
 8009710:	4770      	bx	lr
 8009712:	f803 1b01 	strb.w	r1, [r3], #1
 8009716:	e7f9      	b.n	800970c <memset+0x4>

08009718 <_localeconv_r>:
 8009718:	4800      	ldr	r0, [pc, #0]	@ (800971c <_localeconv_r+0x4>)
 800971a:	4770      	bx	lr
 800971c:	2400015c 	.word	0x2400015c

08009720 <_close_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d06      	ldr	r5, [pc, #24]	@ (800973c <_close_r+0x1c>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	f7f7 fed6 	bl	80014dc <_close>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_close_r+0x1a>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_close_r+0x1a>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	24000500 	.word	0x24000500

08009740 <_lseek_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d07      	ldr	r5, [pc, #28]	@ (8009760 <_lseek_r+0x20>)
 8009744:	4604      	mov	r4, r0
 8009746:	4608      	mov	r0, r1
 8009748:	4611      	mov	r1, r2
 800974a:	2200      	movs	r2, #0
 800974c:	602a      	str	r2, [r5, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	f7f7 feeb 	bl	800152a <_lseek>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_lseek_r+0x1e>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_lseek_r+0x1e>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	24000500 	.word	0x24000500

08009764 <_read_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d07      	ldr	r5, [pc, #28]	@ (8009784 <_read_r+0x20>)
 8009768:	4604      	mov	r4, r0
 800976a:	4608      	mov	r0, r1
 800976c:	4611      	mov	r1, r2
 800976e:	2200      	movs	r2, #0
 8009770:	602a      	str	r2, [r5, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	f7f7 fe79 	bl	800146a <_read>
 8009778:	1c43      	adds	r3, r0, #1
 800977a:	d102      	bne.n	8009782 <_read_r+0x1e>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	b103      	cbz	r3, 8009782 <_read_r+0x1e>
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	24000500 	.word	0x24000500

08009788 <_write_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d07      	ldr	r5, [pc, #28]	@ (80097a8 <_write_r+0x20>)
 800978c:	4604      	mov	r4, r0
 800978e:	4608      	mov	r0, r1
 8009790:	4611      	mov	r1, r2
 8009792:	2200      	movs	r2, #0
 8009794:	602a      	str	r2, [r5, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	f7f7 fe84 	bl	80014a4 <_write>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_write_r+0x1e>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_write_r+0x1e>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	24000500 	.word	0x24000500

080097ac <__errno>:
 80097ac:	4b01      	ldr	r3, [pc, #4]	@ (80097b4 <__errno+0x8>)
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	2400001c 	.word	0x2400001c

080097b8 <__libc_init_array>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	4d0d      	ldr	r5, [pc, #52]	@ (80097f0 <__libc_init_array+0x38>)
 80097bc:	4c0d      	ldr	r4, [pc, #52]	@ (80097f4 <__libc_init_array+0x3c>)
 80097be:	1b64      	subs	r4, r4, r5
 80097c0:	10a4      	asrs	r4, r4, #2
 80097c2:	2600      	movs	r6, #0
 80097c4:	42a6      	cmp	r6, r4
 80097c6:	d109      	bne.n	80097dc <__libc_init_array+0x24>
 80097c8:	4d0b      	ldr	r5, [pc, #44]	@ (80097f8 <__libc_init_array+0x40>)
 80097ca:	4c0c      	ldr	r4, [pc, #48]	@ (80097fc <__libc_init_array+0x44>)
 80097cc:	f001 fdbe 	bl	800b34c <_init>
 80097d0:	1b64      	subs	r4, r4, r5
 80097d2:	10a4      	asrs	r4, r4, #2
 80097d4:	2600      	movs	r6, #0
 80097d6:	42a6      	cmp	r6, r4
 80097d8:	d105      	bne.n	80097e6 <__libc_init_array+0x2e>
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e0:	4798      	blx	r3
 80097e2:	3601      	adds	r6, #1
 80097e4:	e7ee      	b.n	80097c4 <__libc_init_array+0xc>
 80097e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ea:	4798      	blx	r3
 80097ec:	3601      	adds	r6, #1
 80097ee:	e7f2      	b.n	80097d6 <__libc_init_array+0x1e>
 80097f0:	0800b7c4 	.word	0x0800b7c4
 80097f4:	0800b7c4 	.word	0x0800b7c4
 80097f8:	0800b7c4 	.word	0x0800b7c4
 80097fc:	0800b7c8 	.word	0x0800b7c8

08009800 <__retarget_lock_init_recursive>:
 8009800:	4770      	bx	lr

08009802 <__retarget_lock_acquire_recursive>:
 8009802:	4770      	bx	lr

08009804 <__retarget_lock_release_recursive>:
 8009804:	4770      	bx	lr

08009806 <memcpy>:
 8009806:	440a      	add	r2, r1
 8009808:	4291      	cmp	r1, r2
 800980a:	f100 33ff 	add.w	r3, r0, #4294967295
 800980e:	d100      	bne.n	8009812 <memcpy+0xc>
 8009810:	4770      	bx	lr
 8009812:	b510      	push	{r4, lr}
 8009814:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800981c:	4291      	cmp	r1, r2
 800981e:	d1f9      	bne.n	8009814 <memcpy+0xe>
 8009820:	bd10      	pop	{r4, pc}

08009822 <quorem>:
 8009822:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009826:	6903      	ldr	r3, [r0, #16]
 8009828:	690c      	ldr	r4, [r1, #16]
 800982a:	42a3      	cmp	r3, r4
 800982c:	4607      	mov	r7, r0
 800982e:	db7e      	blt.n	800992e <quorem+0x10c>
 8009830:	3c01      	subs	r4, #1
 8009832:	f101 0814 	add.w	r8, r1, #20
 8009836:	00a3      	lsls	r3, r4, #2
 8009838:	f100 0514 	add.w	r5, r0, #20
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009842:	9301      	str	r3, [sp, #4]
 8009844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800984c:	3301      	adds	r3, #1
 800984e:	429a      	cmp	r2, r3
 8009850:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009854:	fbb2 f6f3 	udiv	r6, r2, r3
 8009858:	d32e      	bcc.n	80098b8 <quorem+0x96>
 800985a:	f04f 0a00 	mov.w	sl, #0
 800985e:	46c4      	mov	ip, r8
 8009860:	46ae      	mov	lr, r5
 8009862:	46d3      	mov	fp, sl
 8009864:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009868:	b298      	uxth	r0, r3
 800986a:	fb06 a000 	mla	r0, r6, r0, sl
 800986e:	0c02      	lsrs	r2, r0, #16
 8009870:	0c1b      	lsrs	r3, r3, #16
 8009872:	fb06 2303 	mla	r3, r6, r3, r2
 8009876:	f8de 2000 	ldr.w	r2, [lr]
 800987a:	b280      	uxth	r0, r0
 800987c:	b292      	uxth	r2, r2
 800987e:	1a12      	subs	r2, r2, r0
 8009880:	445a      	add	r2, fp
 8009882:	f8de 0000 	ldr.w	r0, [lr]
 8009886:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800988a:	b29b      	uxth	r3, r3
 800988c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009890:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009894:	b292      	uxth	r2, r2
 8009896:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800989a:	45e1      	cmp	r9, ip
 800989c:	f84e 2b04 	str.w	r2, [lr], #4
 80098a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80098a4:	d2de      	bcs.n	8009864 <quorem+0x42>
 80098a6:	9b00      	ldr	r3, [sp, #0]
 80098a8:	58eb      	ldr	r3, [r5, r3]
 80098aa:	b92b      	cbnz	r3, 80098b8 <quorem+0x96>
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	3b04      	subs	r3, #4
 80098b0:	429d      	cmp	r5, r3
 80098b2:	461a      	mov	r2, r3
 80098b4:	d32f      	bcc.n	8009916 <quorem+0xf4>
 80098b6:	613c      	str	r4, [r7, #16]
 80098b8:	4638      	mov	r0, r7
 80098ba:	f001 f90d 	bl	800aad8 <__mcmp>
 80098be:	2800      	cmp	r0, #0
 80098c0:	db25      	blt.n	800990e <quorem+0xec>
 80098c2:	4629      	mov	r1, r5
 80098c4:	2000      	movs	r0, #0
 80098c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80098ca:	f8d1 c000 	ldr.w	ip, [r1]
 80098ce:	fa1f fe82 	uxth.w	lr, r2
 80098d2:	fa1f f38c 	uxth.w	r3, ip
 80098d6:	eba3 030e 	sub.w	r3, r3, lr
 80098da:	4403      	add	r3, r0
 80098dc:	0c12      	lsrs	r2, r2, #16
 80098de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80098e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ec:	45c1      	cmp	r9, r8
 80098ee:	f841 3b04 	str.w	r3, [r1], #4
 80098f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80098f6:	d2e6      	bcs.n	80098c6 <quorem+0xa4>
 80098f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009900:	b922      	cbnz	r2, 800990c <quorem+0xea>
 8009902:	3b04      	subs	r3, #4
 8009904:	429d      	cmp	r5, r3
 8009906:	461a      	mov	r2, r3
 8009908:	d30b      	bcc.n	8009922 <quorem+0x100>
 800990a:	613c      	str	r4, [r7, #16]
 800990c:	3601      	adds	r6, #1
 800990e:	4630      	mov	r0, r6
 8009910:	b003      	add	sp, #12
 8009912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009916:	6812      	ldr	r2, [r2, #0]
 8009918:	3b04      	subs	r3, #4
 800991a:	2a00      	cmp	r2, #0
 800991c:	d1cb      	bne.n	80098b6 <quorem+0x94>
 800991e:	3c01      	subs	r4, #1
 8009920:	e7c6      	b.n	80098b0 <quorem+0x8e>
 8009922:	6812      	ldr	r2, [r2, #0]
 8009924:	3b04      	subs	r3, #4
 8009926:	2a00      	cmp	r2, #0
 8009928:	d1ef      	bne.n	800990a <quorem+0xe8>
 800992a:	3c01      	subs	r4, #1
 800992c:	e7ea      	b.n	8009904 <quorem+0xe2>
 800992e:	2000      	movs	r0, #0
 8009930:	e7ee      	b.n	8009910 <quorem+0xee>
 8009932:	0000      	movs	r0, r0
 8009934:	0000      	movs	r0, r0
	...

08009938 <_dtoa_r>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	ed2d 8b02 	vpush	{d8}
 8009940:	69c7      	ldr	r7, [r0, #28]
 8009942:	b091      	sub	sp, #68	@ 0x44
 8009944:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009948:	ec55 4b10 	vmov	r4, r5, d0
 800994c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800994e:	9107      	str	r1, [sp, #28]
 8009950:	4681      	mov	r9, r0
 8009952:	9209      	str	r2, [sp, #36]	@ 0x24
 8009954:	930d      	str	r3, [sp, #52]	@ 0x34
 8009956:	b97f      	cbnz	r7, 8009978 <_dtoa_r+0x40>
 8009958:	2010      	movs	r0, #16
 800995a:	f000 fd95 	bl	800a488 <malloc>
 800995e:	4602      	mov	r2, r0
 8009960:	f8c9 001c 	str.w	r0, [r9, #28]
 8009964:	b920      	cbnz	r0, 8009970 <_dtoa_r+0x38>
 8009966:	4ba0      	ldr	r3, [pc, #640]	@ (8009be8 <_dtoa_r+0x2b0>)
 8009968:	21ef      	movs	r1, #239	@ 0xef
 800996a:	48a0      	ldr	r0, [pc, #640]	@ (8009bec <_dtoa_r+0x2b4>)
 800996c:	f001 fc3e 	bl	800b1ec <__assert_func>
 8009970:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009974:	6007      	str	r7, [r0, #0]
 8009976:	60c7      	str	r7, [r0, #12]
 8009978:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800997c:	6819      	ldr	r1, [r3, #0]
 800997e:	b159      	cbz	r1, 8009998 <_dtoa_r+0x60>
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	604a      	str	r2, [r1, #4]
 8009984:	2301      	movs	r3, #1
 8009986:	4093      	lsls	r3, r2
 8009988:	608b      	str	r3, [r1, #8]
 800998a:	4648      	mov	r0, r9
 800998c:	f000 fe72 	bl	800a674 <_Bfree>
 8009990:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	1e2b      	subs	r3, r5, #0
 800999a:	bfbb      	ittet	lt
 800999c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80099a0:	9303      	strlt	r3, [sp, #12]
 80099a2:	2300      	movge	r3, #0
 80099a4:	2201      	movlt	r2, #1
 80099a6:	bfac      	ite	ge
 80099a8:	6033      	strge	r3, [r6, #0]
 80099aa:	6032      	strlt	r2, [r6, #0]
 80099ac:	4b90      	ldr	r3, [pc, #576]	@ (8009bf0 <_dtoa_r+0x2b8>)
 80099ae:	9e03      	ldr	r6, [sp, #12]
 80099b0:	43b3      	bics	r3, r6
 80099b2:	d110      	bne.n	80099d6 <_dtoa_r+0x9e>
 80099b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80099c0:	4323      	orrs	r3, r4
 80099c2:	f000 84e6 	beq.w	800a392 <_dtoa_r+0xa5a>
 80099c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80099c8:	4f8a      	ldr	r7, [pc, #552]	@ (8009bf4 <_dtoa_r+0x2bc>)
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 84e8 	beq.w	800a3a0 <_dtoa_r+0xa68>
 80099d0:	1cfb      	adds	r3, r7, #3
 80099d2:	f000 bce3 	b.w	800a39c <_dtoa_r+0xa64>
 80099d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80099da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e2:	d10a      	bne.n	80099fa <_dtoa_r+0xc2>
 80099e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099e6:	2301      	movs	r3, #1
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80099ec:	b113      	cbz	r3, 80099f4 <_dtoa_r+0xbc>
 80099ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80099f0:	4b81      	ldr	r3, [pc, #516]	@ (8009bf8 <_dtoa_r+0x2c0>)
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	4f81      	ldr	r7, [pc, #516]	@ (8009bfc <_dtoa_r+0x2c4>)
 80099f6:	f000 bcd3 	b.w	800a3a0 <_dtoa_r+0xa68>
 80099fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80099fc:	a90f      	add	r1, sp, #60	@ 0x3c
 80099fe:	4648      	mov	r0, r9
 8009a00:	eeb0 0b48 	vmov.f64	d0, d8
 8009a04:	f001 f918 	bl	800ac38 <__d2b>
 8009a08:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009a0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a0e:	9001      	str	r0, [sp, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d045      	beq.n	8009aa0 <_dtoa_r+0x168>
 8009a14:	eeb0 7b48 	vmov.f64	d7, d8
 8009a18:	ee18 1a90 	vmov	r1, s17
 8009a1c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009a20:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009a24:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009a28:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009a2c:	2500      	movs	r5, #0
 8009a2e:	ee07 1a90 	vmov	s15, r1
 8009a32:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009a36:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009bd0 <_dtoa_r+0x298>
 8009a3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009a3e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009bd8 <_dtoa_r+0x2a0>
 8009a42:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009a46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009be0 <_dtoa_r+0x2a8>
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009a52:	eeb0 7b46 	vmov.f64	d7, d6
 8009a56:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009a5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009a5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a66:	ee16 8a90 	vmov	r8, s13
 8009a6a:	d508      	bpl.n	8009a7e <_dtoa_r+0x146>
 8009a6c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009a70:	eeb4 6b47 	vcmp.f64	d6, d7
 8009a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a78:	bf18      	it	ne
 8009a7a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009a7e:	f1b8 0f16 	cmp.w	r8, #22
 8009a82:	d82b      	bhi.n	8009adc <_dtoa_r+0x1a4>
 8009a84:	495e      	ldr	r1, [pc, #376]	@ (8009c00 <_dtoa_r+0x2c8>)
 8009a86:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009a8a:	ed91 7b00 	vldr	d7, [r1]
 8009a8e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	d501      	bpl.n	8009a9c <_dtoa_r+0x164>
 8009a98:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	e01e      	b.n	8009ade <_dtoa_r+0x1a6>
 8009aa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009aa8:	2920      	cmp	r1, #32
 8009aaa:	bfc1      	itttt	gt
 8009aac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009ab0:	408e      	lslgt	r6, r1
 8009ab2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009ab6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009aba:	bfd6      	itet	le
 8009abc:	f1c1 0120 	rsble	r1, r1, #32
 8009ac0:	4331      	orrgt	r1, r6
 8009ac2:	fa04 f101 	lslle.w	r1, r4, r1
 8009ac6:	ee07 1a90 	vmov	s15, r1
 8009aca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	ee17 1a90 	vmov	r1, s15
 8009ad4:	2501      	movs	r5, #1
 8009ad6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009ada:	e7a8      	b.n	8009a2e <_dtoa_r+0xf6>
 8009adc:	2101      	movs	r1, #1
 8009ade:	1ad2      	subs	r2, r2, r3
 8009ae0:	1e53      	subs	r3, r2, #1
 8009ae2:	9306      	str	r3, [sp, #24]
 8009ae4:	bf45      	ittet	mi
 8009ae6:	f1c2 0301 	rsbmi	r3, r2, #1
 8009aea:	9304      	strmi	r3, [sp, #16]
 8009aec:	2300      	movpl	r3, #0
 8009aee:	2300      	movmi	r3, #0
 8009af0:	bf4c      	ite	mi
 8009af2:	9306      	strmi	r3, [sp, #24]
 8009af4:	9304      	strpl	r3, [sp, #16]
 8009af6:	f1b8 0f00 	cmp.w	r8, #0
 8009afa:	910c      	str	r1, [sp, #48]	@ 0x30
 8009afc:	db18      	blt.n	8009b30 <_dtoa_r+0x1f8>
 8009afe:	9b06      	ldr	r3, [sp, #24]
 8009b00:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009b04:	4443      	add	r3, r8
 8009b06:	9306      	str	r3, [sp, #24]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	9a07      	ldr	r2, [sp, #28]
 8009b0c:	2a09      	cmp	r2, #9
 8009b0e:	d845      	bhi.n	8009b9c <_dtoa_r+0x264>
 8009b10:	2a05      	cmp	r2, #5
 8009b12:	bfc4      	itt	gt
 8009b14:	3a04      	subgt	r2, #4
 8009b16:	9207      	strgt	r2, [sp, #28]
 8009b18:	9a07      	ldr	r2, [sp, #28]
 8009b1a:	f1a2 0202 	sub.w	r2, r2, #2
 8009b1e:	bfcc      	ite	gt
 8009b20:	2400      	movgt	r4, #0
 8009b22:	2401      	movle	r4, #1
 8009b24:	2a03      	cmp	r2, #3
 8009b26:	d844      	bhi.n	8009bb2 <_dtoa_r+0x27a>
 8009b28:	e8df f002 	tbb	[pc, r2]
 8009b2c:	0b173634 	.word	0x0b173634
 8009b30:	9b04      	ldr	r3, [sp, #16]
 8009b32:	2200      	movs	r2, #0
 8009b34:	eba3 0308 	sub.w	r3, r3, r8
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	920a      	str	r2, [sp, #40]	@ 0x28
 8009b3c:	f1c8 0300 	rsb	r3, r8, #0
 8009b40:	e7e3      	b.n	8009b0a <_dtoa_r+0x1d2>
 8009b42:	2201      	movs	r2, #1
 8009b44:	9208      	str	r2, [sp, #32]
 8009b46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b48:	eb08 0b02 	add.w	fp, r8, r2
 8009b4c:	f10b 0a01 	add.w	sl, fp, #1
 8009b50:	4652      	mov	r2, sl
 8009b52:	2a01      	cmp	r2, #1
 8009b54:	bfb8      	it	lt
 8009b56:	2201      	movlt	r2, #1
 8009b58:	e006      	b.n	8009b68 <_dtoa_r+0x230>
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	9208      	str	r2, [sp, #32]
 8009b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b60:	2a00      	cmp	r2, #0
 8009b62:	dd29      	ble.n	8009bb8 <_dtoa_r+0x280>
 8009b64:	4693      	mov	fp, r2
 8009b66:	4692      	mov	sl, r2
 8009b68:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	2004      	movs	r0, #4
 8009b70:	f100 0614 	add.w	r6, r0, #20
 8009b74:	4296      	cmp	r6, r2
 8009b76:	d926      	bls.n	8009bc6 <_dtoa_r+0x28e>
 8009b78:	6079      	str	r1, [r7, #4]
 8009b7a:	4648      	mov	r0, r9
 8009b7c:	9305      	str	r3, [sp, #20]
 8009b7e:	f000 fd39 	bl	800a5f4 <_Balloc>
 8009b82:	9b05      	ldr	r3, [sp, #20]
 8009b84:	4607      	mov	r7, r0
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d13e      	bne.n	8009c08 <_dtoa_r+0x2d0>
 8009b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c04 <_dtoa_r+0x2cc>)
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b92:	e6ea      	b.n	800996a <_dtoa_r+0x32>
 8009b94:	2200      	movs	r2, #0
 8009b96:	e7e1      	b.n	8009b5c <_dtoa_r+0x224>
 8009b98:	2200      	movs	r2, #0
 8009b9a:	e7d3      	b.n	8009b44 <_dtoa_r+0x20c>
 8009b9c:	2401      	movs	r4, #1
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009ba4:	f04f 3bff 	mov.w	fp, #4294967295
 8009ba8:	2100      	movs	r1, #0
 8009baa:	46da      	mov	sl, fp
 8009bac:	2212      	movs	r2, #18
 8009bae:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bb0:	e7da      	b.n	8009b68 <_dtoa_r+0x230>
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	9208      	str	r2, [sp, #32]
 8009bb6:	e7f5      	b.n	8009ba4 <_dtoa_r+0x26c>
 8009bb8:	f04f 0b01 	mov.w	fp, #1
 8009bbc:	46da      	mov	sl, fp
 8009bbe:	465a      	mov	r2, fp
 8009bc0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009bc4:	e7d0      	b.n	8009b68 <_dtoa_r+0x230>
 8009bc6:	3101      	adds	r1, #1
 8009bc8:	0040      	lsls	r0, r0, #1
 8009bca:	e7d1      	b.n	8009b70 <_dtoa_r+0x238>
 8009bcc:	f3af 8000 	nop.w
 8009bd0:	636f4361 	.word	0x636f4361
 8009bd4:	3fd287a7 	.word	0x3fd287a7
 8009bd8:	8b60c8b3 	.word	0x8b60c8b3
 8009bdc:	3fc68a28 	.word	0x3fc68a28
 8009be0:	509f79fb 	.word	0x509f79fb
 8009be4:	3fd34413 	.word	0x3fd34413
 8009be8:	0800b485 	.word	0x0800b485
 8009bec:	0800b49c 	.word	0x0800b49c
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	0800b481 	.word	0x0800b481
 8009bf8:	0800b455 	.word	0x0800b455
 8009bfc:	0800b454 	.word	0x0800b454
 8009c00:	0800b5f0 	.word	0x0800b5f0
 8009c04:	0800b4f4 	.word	0x0800b4f4
 8009c08:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009c0c:	f1ba 0f0e 	cmp.w	sl, #14
 8009c10:	6010      	str	r0, [r2, #0]
 8009c12:	d86e      	bhi.n	8009cf2 <_dtoa_r+0x3ba>
 8009c14:	2c00      	cmp	r4, #0
 8009c16:	d06c      	beq.n	8009cf2 <_dtoa_r+0x3ba>
 8009c18:	f1b8 0f00 	cmp.w	r8, #0
 8009c1c:	f340 80b4 	ble.w	8009d88 <_dtoa_r+0x450>
 8009c20:	4ac8      	ldr	r2, [pc, #800]	@ (8009f44 <_dtoa_r+0x60c>)
 8009c22:	f008 010f 	and.w	r1, r8, #15
 8009c26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009c2a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009c2e:	ed92 7b00 	vldr	d7, [r2]
 8009c32:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009c36:	f000 809b 	beq.w	8009d70 <_dtoa_r+0x438>
 8009c3a:	4ac3      	ldr	r2, [pc, #780]	@ (8009f48 <_dtoa_r+0x610>)
 8009c3c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009c40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009c44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009c48:	f001 010f 	and.w	r1, r1, #15
 8009c4c:	2203      	movs	r2, #3
 8009c4e:	48be      	ldr	r0, [pc, #760]	@ (8009f48 <_dtoa_r+0x610>)
 8009c50:	2900      	cmp	r1, #0
 8009c52:	f040 808f 	bne.w	8009d74 <_dtoa_r+0x43c>
 8009c56:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c5a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009c5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	f000 80b3 	beq.w	8009dd4 <_dtoa_r+0x49c>
 8009c6e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009c72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7a:	f140 80ab 	bpl.w	8009dd4 <_dtoa_r+0x49c>
 8009c7e:	f1ba 0f00 	cmp.w	sl, #0
 8009c82:	f000 80a7 	beq.w	8009dd4 <_dtoa_r+0x49c>
 8009c86:	f1bb 0f00 	cmp.w	fp, #0
 8009c8a:	dd30      	ble.n	8009cee <_dtoa_r+0x3b6>
 8009c8c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009c90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c98:	f108 31ff 	add.w	r1, r8, #4294967295
 8009c9c:	9105      	str	r1, [sp, #20]
 8009c9e:	3201      	adds	r2, #1
 8009ca0:	465c      	mov	r4, fp
 8009ca2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ca6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009caa:	ee07 2a90 	vmov	s15, r2
 8009cae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009cb2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009cb6:	ee15 2a90 	vmov	r2, s11
 8009cba:	ec51 0b15 	vmov	r0, r1, d5
 8009cbe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009cc2:	2c00      	cmp	r4, #0
 8009cc4:	f040 808a 	bne.w	8009ddc <_dtoa_r+0x4a4>
 8009cc8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009ccc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009cd0:	ec41 0b17 	vmov	d7, r0, r1
 8009cd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cdc:	f300 826a 	bgt.w	800a1b4 <_dtoa_r+0x87c>
 8009ce0:	eeb1 7b47 	vneg.f64	d7, d7
 8009ce4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cec:	d423      	bmi.n	8009d36 <_dtoa_r+0x3fe>
 8009cee:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009cf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	f2c0 8129 	blt.w	8009f4c <_dtoa_r+0x614>
 8009cfa:	f1b8 0f0e 	cmp.w	r8, #14
 8009cfe:	f300 8125 	bgt.w	8009f4c <_dtoa_r+0x614>
 8009d02:	4b90      	ldr	r3, [pc, #576]	@ (8009f44 <_dtoa_r+0x60c>)
 8009d04:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d08:	ed93 6b00 	vldr	d6, [r3]
 8009d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f280 80c8 	bge.w	8009ea4 <_dtoa_r+0x56c>
 8009d14:	f1ba 0f00 	cmp.w	sl, #0
 8009d18:	f300 80c4 	bgt.w	8009ea4 <_dtoa_r+0x56c>
 8009d1c:	d10b      	bne.n	8009d36 <_dtoa_r+0x3fe>
 8009d1e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009d22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d32:	f2c0 823c 	blt.w	800a1ae <_dtoa_r+0x876>
 8009d36:	2400      	movs	r4, #0
 8009d38:	4625      	mov	r5, r4
 8009d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d3c:	43db      	mvns	r3, r3
 8009d3e:	9305      	str	r3, [sp, #20]
 8009d40:	463e      	mov	r6, r7
 8009d42:	f04f 0800 	mov.w	r8, #0
 8009d46:	4621      	mov	r1, r4
 8009d48:	4648      	mov	r0, r9
 8009d4a:	f000 fc93 	bl	800a674 <_Bfree>
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	f000 80a2 	beq.w	8009e98 <_dtoa_r+0x560>
 8009d54:	f1b8 0f00 	cmp.w	r8, #0
 8009d58:	d005      	beq.n	8009d66 <_dtoa_r+0x42e>
 8009d5a:	45a8      	cmp	r8, r5
 8009d5c:	d003      	beq.n	8009d66 <_dtoa_r+0x42e>
 8009d5e:	4641      	mov	r1, r8
 8009d60:	4648      	mov	r0, r9
 8009d62:	f000 fc87 	bl	800a674 <_Bfree>
 8009d66:	4629      	mov	r1, r5
 8009d68:	4648      	mov	r0, r9
 8009d6a:	f000 fc83 	bl	800a674 <_Bfree>
 8009d6e:	e093      	b.n	8009e98 <_dtoa_r+0x560>
 8009d70:	2202      	movs	r2, #2
 8009d72:	e76c      	b.n	8009c4e <_dtoa_r+0x316>
 8009d74:	07cc      	lsls	r4, r1, #31
 8009d76:	d504      	bpl.n	8009d82 <_dtoa_r+0x44a>
 8009d78:	ed90 6b00 	vldr	d6, [r0]
 8009d7c:	3201      	adds	r2, #1
 8009d7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d82:	1049      	asrs	r1, r1, #1
 8009d84:	3008      	adds	r0, #8
 8009d86:	e763      	b.n	8009c50 <_dtoa_r+0x318>
 8009d88:	d022      	beq.n	8009dd0 <_dtoa_r+0x498>
 8009d8a:	f1c8 0100 	rsb	r1, r8, #0
 8009d8e:	4a6d      	ldr	r2, [pc, #436]	@ (8009f44 <_dtoa_r+0x60c>)
 8009d90:	f001 000f 	and.w	r0, r1, #15
 8009d94:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009d98:	ed92 7b00 	vldr	d7, [r2]
 8009d9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009da0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009da4:	4868      	ldr	r0, [pc, #416]	@ (8009f48 <_dtoa_r+0x610>)
 8009da6:	1109      	asrs	r1, r1, #4
 8009da8:	2400      	movs	r4, #0
 8009daa:	2202      	movs	r2, #2
 8009dac:	b929      	cbnz	r1, 8009dba <_dtoa_r+0x482>
 8009dae:	2c00      	cmp	r4, #0
 8009db0:	f43f af57 	beq.w	8009c62 <_dtoa_r+0x32a>
 8009db4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009db8:	e753      	b.n	8009c62 <_dtoa_r+0x32a>
 8009dba:	07ce      	lsls	r6, r1, #31
 8009dbc:	d505      	bpl.n	8009dca <_dtoa_r+0x492>
 8009dbe:	ed90 6b00 	vldr	d6, [r0]
 8009dc2:	3201      	adds	r2, #1
 8009dc4:	2401      	movs	r4, #1
 8009dc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009dca:	1049      	asrs	r1, r1, #1
 8009dcc:	3008      	adds	r0, #8
 8009dce:	e7ed      	b.n	8009dac <_dtoa_r+0x474>
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	e746      	b.n	8009c62 <_dtoa_r+0x32a>
 8009dd4:	f8cd 8014 	str.w	r8, [sp, #20]
 8009dd8:	4654      	mov	r4, sl
 8009dda:	e762      	b.n	8009ca2 <_dtoa_r+0x36a>
 8009ddc:	4a59      	ldr	r2, [pc, #356]	@ (8009f44 <_dtoa_r+0x60c>)
 8009dde:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009de2:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009de6:	9a08      	ldr	r2, [sp, #32]
 8009de8:	ec41 0b17 	vmov	d7, r0, r1
 8009dec:	443c      	add	r4, r7
 8009dee:	b34a      	cbz	r2, 8009e44 <_dtoa_r+0x50c>
 8009df0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009df4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009df8:	463e      	mov	r6, r7
 8009dfa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009dfe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009e02:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e06:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e0a:	ee14 2a90 	vmov	r2, s9
 8009e0e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e12:	3230      	adds	r2, #48	@ 0x30
 8009e14:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e20:	f806 2b01 	strb.w	r2, [r6], #1
 8009e24:	d438      	bmi.n	8009e98 <_dtoa_r+0x560>
 8009e26:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009e2a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e32:	d46e      	bmi.n	8009f12 <_dtoa_r+0x5da>
 8009e34:	42a6      	cmp	r6, r4
 8009e36:	f43f af5a 	beq.w	8009cee <_dtoa_r+0x3b6>
 8009e3a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009e3e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e42:	e7e0      	b.n	8009e06 <_dtoa_r+0x4ce>
 8009e44:	4621      	mov	r1, r4
 8009e46:	463e      	mov	r6, r7
 8009e48:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e4c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009e50:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e54:	ee14 2a90 	vmov	r2, s9
 8009e58:	3230      	adds	r2, #48	@ 0x30
 8009e5a:	f806 2b01 	strb.w	r2, [r6], #1
 8009e5e:	42a6      	cmp	r6, r4
 8009e60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e68:	d119      	bne.n	8009e9e <_dtoa_r+0x566>
 8009e6a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009e6e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009e72:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7a:	dc4a      	bgt.n	8009f12 <_dtoa_r+0x5da>
 8009e7c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009e80:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e88:	f57f af31 	bpl.w	8009cee <_dtoa_r+0x3b6>
 8009e8c:	460e      	mov	r6, r1
 8009e8e:	3901      	subs	r1, #1
 8009e90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e94:	2b30      	cmp	r3, #48	@ 0x30
 8009e96:	d0f9      	beq.n	8009e8c <_dtoa_r+0x554>
 8009e98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009e9c:	e027      	b.n	8009eee <_dtoa_r+0x5b6>
 8009e9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ea2:	e7d5      	b.n	8009e50 <_dtoa_r+0x518>
 8009ea4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ea8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009eac:	463e      	mov	r6, r7
 8009eae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009eb2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009eb6:	ee15 3a10 	vmov	r3, s10
 8009eba:	3330      	adds	r3, #48	@ 0x30
 8009ebc:	f806 3b01 	strb.w	r3, [r6], #1
 8009ec0:	1bf3      	subs	r3, r6, r7
 8009ec2:	459a      	cmp	sl, r3
 8009ec4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009ec8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009ecc:	d132      	bne.n	8009f34 <_dtoa_r+0x5fc>
 8009ece:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009ed2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eda:	dc18      	bgt.n	8009f0e <_dtoa_r+0x5d6>
 8009edc:	eeb4 7b46 	vcmp.f64	d7, d6
 8009ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee4:	d103      	bne.n	8009eee <_dtoa_r+0x5b6>
 8009ee6:	ee15 3a10 	vmov	r3, s10
 8009eea:	07db      	lsls	r3, r3, #31
 8009eec:	d40f      	bmi.n	8009f0e <_dtoa_r+0x5d6>
 8009eee:	9901      	ldr	r1, [sp, #4]
 8009ef0:	4648      	mov	r0, r9
 8009ef2:	f000 fbbf 	bl	800a674 <_Bfree>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009efa:	7033      	strb	r3, [r6, #0]
 8009efc:	f108 0301 	add.w	r3, r8, #1
 8009f00:	6013      	str	r3, [r2, #0]
 8009f02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 824b 	beq.w	800a3a0 <_dtoa_r+0xa68>
 8009f0a:	601e      	str	r6, [r3, #0]
 8009f0c:	e248      	b.n	800a3a0 <_dtoa_r+0xa68>
 8009f0e:	f8cd 8014 	str.w	r8, [sp, #20]
 8009f12:	4633      	mov	r3, r6
 8009f14:	461e      	mov	r6, r3
 8009f16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f1a:	2a39      	cmp	r2, #57	@ 0x39
 8009f1c:	d106      	bne.n	8009f2c <_dtoa_r+0x5f4>
 8009f1e:	429f      	cmp	r7, r3
 8009f20:	d1f8      	bne.n	8009f14 <_dtoa_r+0x5dc>
 8009f22:	9a05      	ldr	r2, [sp, #20]
 8009f24:	3201      	adds	r2, #1
 8009f26:	9205      	str	r2, [sp, #20]
 8009f28:	2230      	movs	r2, #48	@ 0x30
 8009f2a:	703a      	strb	r2, [r7, #0]
 8009f2c:	781a      	ldrb	r2, [r3, #0]
 8009f2e:	3201      	adds	r2, #1
 8009f30:	701a      	strb	r2, [r3, #0]
 8009f32:	e7b1      	b.n	8009e98 <_dtoa_r+0x560>
 8009f34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f40:	d1b5      	bne.n	8009eae <_dtoa_r+0x576>
 8009f42:	e7d4      	b.n	8009eee <_dtoa_r+0x5b6>
 8009f44:	0800b5f0 	.word	0x0800b5f0
 8009f48:	0800b5c8 	.word	0x0800b5c8
 8009f4c:	9908      	ldr	r1, [sp, #32]
 8009f4e:	2900      	cmp	r1, #0
 8009f50:	f000 80e9 	beq.w	800a126 <_dtoa_r+0x7ee>
 8009f54:	9907      	ldr	r1, [sp, #28]
 8009f56:	2901      	cmp	r1, #1
 8009f58:	f300 80cb 	bgt.w	800a0f2 <_dtoa_r+0x7ba>
 8009f5c:	2d00      	cmp	r5, #0
 8009f5e:	f000 80c4 	beq.w	800a0ea <_dtoa_r+0x7b2>
 8009f62:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009f66:	9e04      	ldr	r6, [sp, #16]
 8009f68:	461c      	mov	r4, r3
 8009f6a:	9305      	str	r3, [sp, #20]
 8009f6c:	9b04      	ldr	r3, [sp, #16]
 8009f6e:	4413      	add	r3, r2
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	9b06      	ldr	r3, [sp, #24]
 8009f74:	2101      	movs	r1, #1
 8009f76:	4413      	add	r3, r2
 8009f78:	4648      	mov	r0, r9
 8009f7a:	9306      	str	r3, [sp, #24]
 8009f7c:	f000 fc2e 	bl	800a7dc <__i2b>
 8009f80:	9b05      	ldr	r3, [sp, #20]
 8009f82:	4605      	mov	r5, r0
 8009f84:	b166      	cbz	r6, 8009fa0 <_dtoa_r+0x668>
 8009f86:	9a06      	ldr	r2, [sp, #24]
 8009f88:	2a00      	cmp	r2, #0
 8009f8a:	dd09      	ble.n	8009fa0 <_dtoa_r+0x668>
 8009f8c:	42b2      	cmp	r2, r6
 8009f8e:	9904      	ldr	r1, [sp, #16]
 8009f90:	bfa8      	it	ge
 8009f92:	4632      	movge	r2, r6
 8009f94:	1a89      	subs	r1, r1, r2
 8009f96:	9104      	str	r1, [sp, #16]
 8009f98:	9906      	ldr	r1, [sp, #24]
 8009f9a:	1ab6      	subs	r6, r6, r2
 8009f9c:	1a8a      	subs	r2, r1, r2
 8009f9e:	9206      	str	r2, [sp, #24]
 8009fa0:	b30b      	cbz	r3, 8009fe6 <_dtoa_r+0x6ae>
 8009fa2:	9a08      	ldr	r2, [sp, #32]
 8009fa4:	2a00      	cmp	r2, #0
 8009fa6:	f000 80c5 	beq.w	800a134 <_dtoa_r+0x7fc>
 8009faa:	2c00      	cmp	r4, #0
 8009fac:	f000 80bf 	beq.w	800a12e <_dtoa_r+0x7f6>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	4648      	mov	r0, r9
 8009fb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fb8:	f000 fcc8 	bl	800a94c <__pow5mult>
 8009fbc:	9a01      	ldr	r2, [sp, #4]
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	4648      	mov	r0, r9
 8009fc4:	f000 fc20 	bl	800a808 <__multiply>
 8009fc8:	9901      	ldr	r1, [sp, #4]
 8009fca:	9005      	str	r0, [sp, #20]
 8009fcc:	4648      	mov	r0, r9
 8009fce:	f000 fb51 	bl	800a674 <_Bfree>
 8009fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fd4:	1b1b      	subs	r3, r3, r4
 8009fd6:	f000 80b0 	beq.w	800a13a <_dtoa_r+0x802>
 8009fda:	9905      	ldr	r1, [sp, #20]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	4648      	mov	r0, r9
 8009fe0:	f000 fcb4 	bl	800a94c <__pow5mult>
 8009fe4:	9001      	str	r0, [sp, #4]
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	4648      	mov	r0, r9
 8009fea:	f000 fbf7 	bl	800a7dc <__i2b>
 8009fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 81da 	beq.w	800a3ac <_dtoa_r+0xa74>
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	4648      	mov	r0, r9
 8009ffe:	f000 fca5 	bl	800a94c <__pow5mult>
 800a002:	9b07      	ldr	r3, [sp, #28]
 800a004:	2b01      	cmp	r3, #1
 800a006:	4604      	mov	r4, r0
 800a008:	f300 80a0 	bgt.w	800a14c <_dtoa_r+0x814>
 800a00c:	9b02      	ldr	r3, [sp, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f040 8096 	bne.w	800a140 <_dtoa_r+0x808>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	f040 8092 	bne.w	800a144 <_dtoa_r+0x80c>
 800a020:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a024:	0d12      	lsrs	r2, r2, #20
 800a026:	0512      	lsls	r2, r2, #20
 800a028:	2a00      	cmp	r2, #0
 800a02a:	f000 808d 	beq.w	800a148 <_dtoa_r+0x810>
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	3301      	adds	r3, #1
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	9b06      	ldr	r3, [sp, #24]
 800a036:	3301      	adds	r3, #1
 800a038:	9306      	str	r3, [sp, #24]
 800a03a:	2301      	movs	r3, #1
 800a03c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a03e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 81b9 	beq.w	800a3b8 <_dtoa_r+0xa80>
 800a046:	6922      	ldr	r2, [r4, #16]
 800a048:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a04c:	6910      	ldr	r0, [r2, #16]
 800a04e:	f000 fb79 	bl	800a744 <__hi0bits>
 800a052:	f1c0 0020 	rsb	r0, r0, #32
 800a056:	9b06      	ldr	r3, [sp, #24]
 800a058:	4418      	add	r0, r3
 800a05a:	f010 001f 	ands.w	r0, r0, #31
 800a05e:	f000 8081 	beq.w	800a164 <_dtoa_r+0x82c>
 800a062:	f1c0 0220 	rsb	r2, r0, #32
 800a066:	2a04      	cmp	r2, #4
 800a068:	dd73      	ble.n	800a152 <_dtoa_r+0x81a>
 800a06a:	9b04      	ldr	r3, [sp, #16]
 800a06c:	f1c0 001c 	rsb	r0, r0, #28
 800a070:	4403      	add	r3, r0
 800a072:	9304      	str	r3, [sp, #16]
 800a074:	9b06      	ldr	r3, [sp, #24]
 800a076:	4406      	add	r6, r0
 800a078:	4403      	add	r3, r0
 800a07a:	9306      	str	r3, [sp, #24]
 800a07c:	9b04      	ldr	r3, [sp, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dd05      	ble.n	800a08e <_dtoa_r+0x756>
 800a082:	9901      	ldr	r1, [sp, #4]
 800a084:	461a      	mov	r2, r3
 800a086:	4648      	mov	r0, r9
 800a088:	f000 fcba 	bl	800aa00 <__lshift>
 800a08c:	9001      	str	r0, [sp, #4]
 800a08e:	9b06      	ldr	r3, [sp, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	dd05      	ble.n	800a0a0 <_dtoa_r+0x768>
 800a094:	4621      	mov	r1, r4
 800a096:	461a      	mov	r2, r3
 800a098:	4648      	mov	r0, r9
 800a09a:	f000 fcb1 	bl	800aa00 <__lshift>
 800a09e:	4604      	mov	r4, r0
 800a0a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d060      	beq.n	800a168 <_dtoa_r+0x830>
 800a0a6:	9801      	ldr	r0, [sp, #4]
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	f000 fd15 	bl	800aad8 <__mcmp>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	da5a      	bge.n	800a168 <_dtoa_r+0x830>
 800a0b2:	f108 33ff 	add.w	r3, r8, #4294967295
 800a0b6:	9305      	str	r3, [sp, #20]
 800a0b8:	9901      	ldr	r1, [sp, #4]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	220a      	movs	r2, #10
 800a0be:	4648      	mov	r0, r9
 800a0c0:	f000 fafa 	bl	800a6b8 <__multadd>
 800a0c4:	9b08      	ldr	r3, [sp, #32]
 800a0c6:	9001      	str	r0, [sp, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 8177 	beq.w	800a3bc <_dtoa_r+0xa84>
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	220a      	movs	r2, #10
 800a0d4:	4648      	mov	r0, r9
 800a0d6:	f000 faef 	bl	800a6b8 <__multadd>
 800a0da:	f1bb 0f00 	cmp.w	fp, #0
 800a0de:	4605      	mov	r5, r0
 800a0e0:	dc6e      	bgt.n	800a1c0 <_dtoa_r+0x888>
 800a0e2:	9b07      	ldr	r3, [sp, #28]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	dc48      	bgt.n	800a17a <_dtoa_r+0x842>
 800a0e8:	e06a      	b.n	800a1c0 <_dtoa_r+0x888>
 800a0ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a0f0:	e739      	b.n	8009f66 <_dtoa_r+0x62e>
 800a0f2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a0f6:	42a3      	cmp	r3, r4
 800a0f8:	db07      	blt.n	800a10a <_dtoa_r+0x7d2>
 800a0fa:	f1ba 0f00 	cmp.w	sl, #0
 800a0fe:	eba3 0404 	sub.w	r4, r3, r4
 800a102:	db0b      	blt.n	800a11c <_dtoa_r+0x7e4>
 800a104:	9e04      	ldr	r6, [sp, #16]
 800a106:	4652      	mov	r2, sl
 800a108:	e72f      	b.n	8009f6a <_dtoa_r+0x632>
 800a10a:	1ae2      	subs	r2, r4, r3
 800a10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a10e:	9e04      	ldr	r6, [sp, #16]
 800a110:	4413      	add	r3, r2
 800a112:	930a      	str	r3, [sp, #40]	@ 0x28
 800a114:	4652      	mov	r2, sl
 800a116:	4623      	mov	r3, r4
 800a118:	2400      	movs	r4, #0
 800a11a:	e726      	b.n	8009f6a <_dtoa_r+0x632>
 800a11c:	9a04      	ldr	r2, [sp, #16]
 800a11e:	eba2 060a 	sub.w	r6, r2, sl
 800a122:	2200      	movs	r2, #0
 800a124:	e721      	b.n	8009f6a <_dtoa_r+0x632>
 800a126:	9e04      	ldr	r6, [sp, #16]
 800a128:	9d08      	ldr	r5, [sp, #32]
 800a12a:	461c      	mov	r4, r3
 800a12c:	e72a      	b.n	8009f84 <_dtoa_r+0x64c>
 800a12e:	9a01      	ldr	r2, [sp, #4]
 800a130:	9205      	str	r2, [sp, #20]
 800a132:	e752      	b.n	8009fda <_dtoa_r+0x6a2>
 800a134:	9901      	ldr	r1, [sp, #4]
 800a136:	461a      	mov	r2, r3
 800a138:	e751      	b.n	8009fde <_dtoa_r+0x6a6>
 800a13a:	9b05      	ldr	r3, [sp, #20]
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	e752      	b.n	8009fe6 <_dtoa_r+0x6ae>
 800a140:	2300      	movs	r3, #0
 800a142:	e77b      	b.n	800a03c <_dtoa_r+0x704>
 800a144:	9b02      	ldr	r3, [sp, #8]
 800a146:	e779      	b.n	800a03c <_dtoa_r+0x704>
 800a148:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a14a:	e778      	b.n	800a03e <_dtoa_r+0x706>
 800a14c:	2300      	movs	r3, #0
 800a14e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a150:	e779      	b.n	800a046 <_dtoa_r+0x70e>
 800a152:	d093      	beq.n	800a07c <_dtoa_r+0x744>
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	321c      	adds	r2, #28
 800a158:	4413      	add	r3, r2
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	9b06      	ldr	r3, [sp, #24]
 800a15e:	4416      	add	r6, r2
 800a160:	4413      	add	r3, r2
 800a162:	e78a      	b.n	800a07a <_dtoa_r+0x742>
 800a164:	4602      	mov	r2, r0
 800a166:	e7f5      	b.n	800a154 <_dtoa_r+0x81c>
 800a168:	f1ba 0f00 	cmp.w	sl, #0
 800a16c:	f8cd 8014 	str.w	r8, [sp, #20]
 800a170:	46d3      	mov	fp, sl
 800a172:	dc21      	bgt.n	800a1b8 <_dtoa_r+0x880>
 800a174:	9b07      	ldr	r3, [sp, #28]
 800a176:	2b02      	cmp	r3, #2
 800a178:	dd1e      	ble.n	800a1b8 <_dtoa_r+0x880>
 800a17a:	f1bb 0f00 	cmp.w	fp, #0
 800a17e:	f47f addc 	bne.w	8009d3a <_dtoa_r+0x402>
 800a182:	4621      	mov	r1, r4
 800a184:	465b      	mov	r3, fp
 800a186:	2205      	movs	r2, #5
 800a188:	4648      	mov	r0, r9
 800a18a:	f000 fa95 	bl	800a6b8 <__multadd>
 800a18e:	4601      	mov	r1, r0
 800a190:	4604      	mov	r4, r0
 800a192:	9801      	ldr	r0, [sp, #4]
 800a194:	f000 fca0 	bl	800aad8 <__mcmp>
 800a198:	2800      	cmp	r0, #0
 800a19a:	f77f adce 	ble.w	8009d3a <_dtoa_r+0x402>
 800a19e:	463e      	mov	r6, r7
 800a1a0:	2331      	movs	r3, #49	@ 0x31
 800a1a2:	f806 3b01 	strb.w	r3, [r6], #1
 800a1a6:	9b05      	ldr	r3, [sp, #20]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	e5c9      	b.n	8009d42 <_dtoa_r+0x40a>
 800a1ae:	f8cd 8014 	str.w	r8, [sp, #20]
 800a1b2:	4654      	mov	r4, sl
 800a1b4:	4625      	mov	r5, r4
 800a1b6:	e7f2      	b.n	800a19e <_dtoa_r+0x866>
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 8102 	beq.w	800a3c4 <_dtoa_r+0xa8c>
 800a1c0:	2e00      	cmp	r6, #0
 800a1c2:	dd05      	ble.n	800a1d0 <_dtoa_r+0x898>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4632      	mov	r2, r6
 800a1c8:	4648      	mov	r0, r9
 800a1ca:	f000 fc19 	bl	800aa00 <__lshift>
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d058      	beq.n	800a288 <_dtoa_r+0x950>
 800a1d6:	6869      	ldr	r1, [r5, #4]
 800a1d8:	4648      	mov	r0, r9
 800a1da:	f000 fa0b 	bl	800a5f4 <_Balloc>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	b928      	cbnz	r0, 800a1ee <_dtoa_r+0x8b6>
 800a1e2:	4b82      	ldr	r3, [pc, #520]	@ (800a3ec <_dtoa_r+0xab4>)
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a1ea:	f7ff bbbe 	b.w	800996a <_dtoa_r+0x32>
 800a1ee:	692a      	ldr	r2, [r5, #16]
 800a1f0:	3202      	adds	r2, #2
 800a1f2:	0092      	lsls	r2, r2, #2
 800a1f4:	f105 010c 	add.w	r1, r5, #12
 800a1f8:	300c      	adds	r0, #12
 800a1fa:	f7ff fb04 	bl	8009806 <memcpy>
 800a1fe:	2201      	movs	r2, #1
 800a200:	4631      	mov	r1, r6
 800a202:	4648      	mov	r0, r9
 800a204:	f000 fbfc 	bl	800aa00 <__lshift>
 800a208:	1c7b      	adds	r3, r7, #1
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	eb07 030b 	add.w	r3, r7, fp
 800a210:	9309      	str	r3, [sp, #36]	@ 0x24
 800a212:	9b02      	ldr	r3, [sp, #8]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	46a8      	mov	r8, r5
 800a21a:	9308      	str	r3, [sp, #32]
 800a21c:	4605      	mov	r5, r0
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	9801      	ldr	r0, [sp, #4]
 800a222:	4621      	mov	r1, r4
 800a224:	f103 3bff 	add.w	fp, r3, #4294967295
 800a228:	f7ff fafb 	bl	8009822 <quorem>
 800a22c:	4641      	mov	r1, r8
 800a22e:	9002      	str	r0, [sp, #8]
 800a230:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a234:	9801      	ldr	r0, [sp, #4]
 800a236:	f000 fc4f 	bl	800aad8 <__mcmp>
 800a23a:	462a      	mov	r2, r5
 800a23c:	9006      	str	r0, [sp, #24]
 800a23e:	4621      	mov	r1, r4
 800a240:	4648      	mov	r0, r9
 800a242:	f000 fc65 	bl	800ab10 <__mdiff>
 800a246:	68c2      	ldr	r2, [r0, #12]
 800a248:	4606      	mov	r6, r0
 800a24a:	b9fa      	cbnz	r2, 800a28c <_dtoa_r+0x954>
 800a24c:	4601      	mov	r1, r0
 800a24e:	9801      	ldr	r0, [sp, #4]
 800a250:	f000 fc42 	bl	800aad8 <__mcmp>
 800a254:	4602      	mov	r2, r0
 800a256:	4631      	mov	r1, r6
 800a258:	4648      	mov	r0, r9
 800a25a:	920a      	str	r2, [sp, #40]	@ 0x28
 800a25c:	f000 fa0a 	bl	800a674 <_Bfree>
 800a260:	9b07      	ldr	r3, [sp, #28]
 800a262:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a264:	9e04      	ldr	r6, [sp, #16]
 800a266:	ea42 0103 	orr.w	r1, r2, r3
 800a26a:	9b08      	ldr	r3, [sp, #32]
 800a26c:	4319      	orrs	r1, r3
 800a26e:	d10f      	bne.n	800a290 <_dtoa_r+0x958>
 800a270:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a274:	d028      	beq.n	800a2c8 <_dtoa_r+0x990>
 800a276:	9b06      	ldr	r3, [sp, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	dd02      	ble.n	800a282 <_dtoa_r+0x94a>
 800a27c:	9b02      	ldr	r3, [sp, #8]
 800a27e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a282:	f88b a000 	strb.w	sl, [fp]
 800a286:	e55e      	b.n	8009d46 <_dtoa_r+0x40e>
 800a288:	4628      	mov	r0, r5
 800a28a:	e7bd      	b.n	800a208 <_dtoa_r+0x8d0>
 800a28c:	2201      	movs	r2, #1
 800a28e:	e7e2      	b.n	800a256 <_dtoa_r+0x91e>
 800a290:	9b06      	ldr	r3, [sp, #24]
 800a292:	2b00      	cmp	r3, #0
 800a294:	db04      	blt.n	800a2a0 <_dtoa_r+0x968>
 800a296:	9907      	ldr	r1, [sp, #28]
 800a298:	430b      	orrs	r3, r1
 800a29a:	9908      	ldr	r1, [sp, #32]
 800a29c:	430b      	orrs	r3, r1
 800a29e:	d120      	bne.n	800a2e2 <_dtoa_r+0x9aa>
 800a2a0:	2a00      	cmp	r2, #0
 800a2a2:	ddee      	ble.n	800a282 <_dtoa_r+0x94a>
 800a2a4:	9901      	ldr	r1, [sp, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f000 fba9 	bl	800aa00 <__lshift>
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	9001      	str	r0, [sp, #4]
 800a2b2:	f000 fc11 	bl	800aad8 <__mcmp>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	dc03      	bgt.n	800a2c2 <_dtoa_r+0x98a>
 800a2ba:	d1e2      	bne.n	800a282 <_dtoa_r+0x94a>
 800a2bc:	f01a 0f01 	tst.w	sl, #1
 800a2c0:	d0df      	beq.n	800a282 <_dtoa_r+0x94a>
 800a2c2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a2c6:	d1d9      	bne.n	800a27c <_dtoa_r+0x944>
 800a2c8:	2339      	movs	r3, #57	@ 0x39
 800a2ca:	f88b 3000 	strb.w	r3, [fp]
 800a2ce:	4633      	mov	r3, r6
 800a2d0:	461e      	mov	r6, r3
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a2d8:	2a39      	cmp	r2, #57	@ 0x39
 800a2da:	d052      	beq.n	800a382 <_dtoa_r+0xa4a>
 800a2dc:	3201      	adds	r2, #1
 800a2de:	701a      	strb	r2, [r3, #0]
 800a2e0:	e531      	b.n	8009d46 <_dtoa_r+0x40e>
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	dd07      	ble.n	800a2f6 <_dtoa_r+0x9be>
 800a2e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a2ea:	d0ed      	beq.n	800a2c8 <_dtoa_r+0x990>
 800a2ec:	f10a 0301 	add.w	r3, sl, #1
 800a2f0:	f88b 3000 	strb.w	r3, [fp]
 800a2f4:	e527      	b.n	8009d46 <_dtoa_r+0x40e>
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2fa:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d029      	beq.n	800a356 <_dtoa_r+0xa1e>
 800a302:	9901      	ldr	r1, [sp, #4]
 800a304:	2300      	movs	r3, #0
 800a306:	220a      	movs	r2, #10
 800a308:	4648      	mov	r0, r9
 800a30a:	f000 f9d5 	bl	800a6b8 <__multadd>
 800a30e:	45a8      	cmp	r8, r5
 800a310:	9001      	str	r0, [sp, #4]
 800a312:	f04f 0300 	mov.w	r3, #0
 800a316:	f04f 020a 	mov.w	r2, #10
 800a31a:	4641      	mov	r1, r8
 800a31c:	4648      	mov	r0, r9
 800a31e:	d107      	bne.n	800a330 <_dtoa_r+0x9f8>
 800a320:	f000 f9ca 	bl	800a6b8 <__multadd>
 800a324:	4680      	mov	r8, r0
 800a326:	4605      	mov	r5, r0
 800a328:	9b04      	ldr	r3, [sp, #16]
 800a32a:	3301      	adds	r3, #1
 800a32c:	9304      	str	r3, [sp, #16]
 800a32e:	e776      	b.n	800a21e <_dtoa_r+0x8e6>
 800a330:	f000 f9c2 	bl	800a6b8 <__multadd>
 800a334:	4629      	mov	r1, r5
 800a336:	4680      	mov	r8, r0
 800a338:	2300      	movs	r3, #0
 800a33a:	220a      	movs	r2, #10
 800a33c:	4648      	mov	r0, r9
 800a33e:	f000 f9bb 	bl	800a6b8 <__multadd>
 800a342:	4605      	mov	r5, r0
 800a344:	e7f0      	b.n	800a328 <_dtoa_r+0x9f0>
 800a346:	f1bb 0f00 	cmp.w	fp, #0
 800a34a:	bfcc      	ite	gt
 800a34c:	465e      	movgt	r6, fp
 800a34e:	2601      	movle	r6, #1
 800a350:	443e      	add	r6, r7
 800a352:	f04f 0800 	mov.w	r8, #0
 800a356:	9901      	ldr	r1, [sp, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	4648      	mov	r0, r9
 800a35c:	f000 fb50 	bl	800aa00 <__lshift>
 800a360:	4621      	mov	r1, r4
 800a362:	9001      	str	r0, [sp, #4]
 800a364:	f000 fbb8 	bl	800aad8 <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	dcb0      	bgt.n	800a2ce <_dtoa_r+0x996>
 800a36c:	d102      	bne.n	800a374 <_dtoa_r+0xa3c>
 800a36e:	f01a 0f01 	tst.w	sl, #1
 800a372:	d1ac      	bne.n	800a2ce <_dtoa_r+0x996>
 800a374:	4633      	mov	r3, r6
 800a376:	461e      	mov	r6, r3
 800a378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a37c:	2a30      	cmp	r2, #48	@ 0x30
 800a37e:	d0fa      	beq.n	800a376 <_dtoa_r+0xa3e>
 800a380:	e4e1      	b.n	8009d46 <_dtoa_r+0x40e>
 800a382:	429f      	cmp	r7, r3
 800a384:	d1a4      	bne.n	800a2d0 <_dtoa_r+0x998>
 800a386:	9b05      	ldr	r3, [sp, #20]
 800a388:	3301      	adds	r3, #1
 800a38a:	9305      	str	r3, [sp, #20]
 800a38c:	2331      	movs	r3, #49	@ 0x31
 800a38e:	703b      	strb	r3, [r7, #0]
 800a390:	e4d9      	b.n	8009d46 <_dtoa_r+0x40e>
 800a392:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a394:	4f16      	ldr	r7, [pc, #88]	@ (800a3f0 <_dtoa_r+0xab8>)
 800a396:	b11b      	cbz	r3, 800a3a0 <_dtoa_r+0xa68>
 800a398:	f107 0308 	add.w	r3, r7, #8
 800a39c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	b011      	add	sp, #68	@ 0x44
 800a3a4:	ecbd 8b02 	vpop	{d8}
 800a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	f77f ae2c 	ble.w	800a00c <_dtoa_r+0x6d4>
 800a3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	e64c      	b.n	800a056 <_dtoa_r+0x71e>
 800a3bc:	f1bb 0f00 	cmp.w	fp, #0
 800a3c0:	f77f aed8 	ble.w	800a174 <_dtoa_r+0x83c>
 800a3c4:	463e      	mov	r6, r7
 800a3c6:	9801      	ldr	r0, [sp, #4]
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	f7ff fa2a 	bl	8009822 <quorem>
 800a3ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a3d2:	f806 ab01 	strb.w	sl, [r6], #1
 800a3d6:	1bf2      	subs	r2, r6, r7
 800a3d8:	4593      	cmp	fp, r2
 800a3da:	ddb4      	ble.n	800a346 <_dtoa_r+0xa0e>
 800a3dc:	9901      	ldr	r1, [sp, #4]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	220a      	movs	r2, #10
 800a3e2:	4648      	mov	r0, r9
 800a3e4:	f000 f968 	bl	800a6b8 <__multadd>
 800a3e8:	9001      	str	r0, [sp, #4]
 800a3ea:	e7ec      	b.n	800a3c6 <_dtoa_r+0xa8e>
 800a3ec:	0800b4f4 	.word	0x0800b4f4
 800a3f0:	0800b478 	.word	0x0800b478

0800a3f4 <_free_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	2900      	cmp	r1, #0
 800a3fa:	d041      	beq.n	800a480 <_free_r+0x8c>
 800a3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a400:	1f0c      	subs	r4, r1, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	bfb8      	it	lt
 800a406:	18e4      	addlt	r4, r4, r3
 800a408:	f000 f8e8 	bl	800a5dc <__malloc_lock>
 800a40c:	4a1d      	ldr	r2, [pc, #116]	@ (800a484 <_free_r+0x90>)
 800a40e:	6813      	ldr	r3, [r2, #0]
 800a410:	b933      	cbnz	r3, 800a420 <_free_r+0x2c>
 800a412:	6063      	str	r3, [r4, #4]
 800a414:	6014      	str	r4, [r2, #0]
 800a416:	4628      	mov	r0, r5
 800a418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a41c:	f000 b8e4 	b.w	800a5e8 <__malloc_unlock>
 800a420:	42a3      	cmp	r3, r4
 800a422:	d908      	bls.n	800a436 <_free_r+0x42>
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	1821      	adds	r1, r4, r0
 800a428:	428b      	cmp	r3, r1
 800a42a:	bf01      	itttt	eq
 800a42c:	6819      	ldreq	r1, [r3, #0]
 800a42e:	685b      	ldreq	r3, [r3, #4]
 800a430:	1809      	addeq	r1, r1, r0
 800a432:	6021      	streq	r1, [r4, #0]
 800a434:	e7ed      	b.n	800a412 <_free_r+0x1e>
 800a436:	461a      	mov	r2, r3
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	b10b      	cbz	r3, 800a440 <_free_r+0x4c>
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	d9fa      	bls.n	800a436 <_free_r+0x42>
 800a440:	6811      	ldr	r1, [r2, #0]
 800a442:	1850      	adds	r0, r2, r1
 800a444:	42a0      	cmp	r0, r4
 800a446:	d10b      	bne.n	800a460 <_free_r+0x6c>
 800a448:	6820      	ldr	r0, [r4, #0]
 800a44a:	4401      	add	r1, r0
 800a44c:	1850      	adds	r0, r2, r1
 800a44e:	4283      	cmp	r3, r0
 800a450:	6011      	str	r1, [r2, #0]
 800a452:	d1e0      	bne.n	800a416 <_free_r+0x22>
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	6053      	str	r3, [r2, #4]
 800a45a:	4408      	add	r0, r1
 800a45c:	6010      	str	r0, [r2, #0]
 800a45e:	e7da      	b.n	800a416 <_free_r+0x22>
 800a460:	d902      	bls.n	800a468 <_free_r+0x74>
 800a462:	230c      	movs	r3, #12
 800a464:	602b      	str	r3, [r5, #0]
 800a466:	e7d6      	b.n	800a416 <_free_r+0x22>
 800a468:	6820      	ldr	r0, [r4, #0]
 800a46a:	1821      	adds	r1, r4, r0
 800a46c:	428b      	cmp	r3, r1
 800a46e:	bf04      	itt	eq
 800a470:	6819      	ldreq	r1, [r3, #0]
 800a472:	685b      	ldreq	r3, [r3, #4]
 800a474:	6063      	str	r3, [r4, #4]
 800a476:	bf04      	itt	eq
 800a478:	1809      	addeq	r1, r1, r0
 800a47a:	6021      	streq	r1, [r4, #0]
 800a47c:	6054      	str	r4, [r2, #4]
 800a47e:	e7ca      	b.n	800a416 <_free_r+0x22>
 800a480:	bd38      	pop	{r3, r4, r5, pc}
 800a482:	bf00      	nop
 800a484:	2400050c 	.word	0x2400050c

0800a488 <malloc>:
 800a488:	4b02      	ldr	r3, [pc, #8]	@ (800a494 <malloc+0xc>)
 800a48a:	4601      	mov	r1, r0
 800a48c:	6818      	ldr	r0, [r3, #0]
 800a48e:	f000 b825 	b.w	800a4dc <_malloc_r>
 800a492:	bf00      	nop
 800a494:	2400001c 	.word	0x2400001c

0800a498 <sbrk_aligned>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	4e0f      	ldr	r6, [pc, #60]	@ (800a4d8 <sbrk_aligned+0x40>)
 800a49c:	460c      	mov	r4, r1
 800a49e:	6831      	ldr	r1, [r6, #0]
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	b911      	cbnz	r1, 800a4aa <sbrk_aligned+0x12>
 800a4a4:	f000 fe92 	bl	800b1cc <_sbrk_r>
 800a4a8:	6030      	str	r0, [r6, #0]
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f000 fe8d 	bl	800b1cc <_sbrk_r>
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	d103      	bne.n	800a4be <sbrk_aligned+0x26>
 800a4b6:	f04f 34ff 	mov.w	r4, #4294967295
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	bd70      	pop	{r4, r5, r6, pc}
 800a4be:	1cc4      	adds	r4, r0, #3
 800a4c0:	f024 0403 	bic.w	r4, r4, #3
 800a4c4:	42a0      	cmp	r0, r4
 800a4c6:	d0f8      	beq.n	800a4ba <sbrk_aligned+0x22>
 800a4c8:	1a21      	subs	r1, r4, r0
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 fe7e 	bl	800b1cc <_sbrk_r>
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d1f2      	bne.n	800a4ba <sbrk_aligned+0x22>
 800a4d4:	e7ef      	b.n	800a4b6 <sbrk_aligned+0x1e>
 800a4d6:	bf00      	nop
 800a4d8:	24000508 	.word	0x24000508

0800a4dc <_malloc_r>:
 800a4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	1ccd      	adds	r5, r1, #3
 800a4e2:	f025 0503 	bic.w	r5, r5, #3
 800a4e6:	3508      	adds	r5, #8
 800a4e8:	2d0c      	cmp	r5, #12
 800a4ea:	bf38      	it	cc
 800a4ec:	250c      	movcc	r5, #12
 800a4ee:	2d00      	cmp	r5, #0
 800a4f0:	4606      	mov	r6, r0
 800a4f2:	db01      	blt.n	800a4f8 <_malloc_r+0x1c>
 800a4f4:	42a9      	cmp	r1, r5
 800a4f6:	d904      	bls.n	800a502 <_malloc_r+0x26>
 800a4f8:	230c      	movs	r3, #12
 800a4fa:	6033      	str	r3, [r6, #0]
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5d8 <_malloc_r+0xfc>
 800a506:	f000 f869 	bl	800a5dc <__malloc_lock>
 800a50a:	f8d8 3000 	ldr.w	r3, [r8]
 800a50e:	461c      	mov	r4, r3
 800a510:	bb44      	cbnz	r4, 800a564 <_malloc_r+0x88>
 800a512:	4629      	mov	r1, r5
 800a514:	4630      	mov	r0, r6
 800a516:	f7ff ffbf 	bl	800a498 <sbrk_aligned>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	4604      	mov	r4, r0
 800a51e:	d158      	bne.n	800a5d2 <_malloc_r+0xf6>
 800a520:	f8d8 4000 	ldr.w	r4, [r8]
 800a524:	4627      	mov	r7, r4
 800a526:	2f00      	cmp	r7, #0
 800a528:	d143      	bne.n	800a5b2 <_malloc_r+0xd6>
 800a52a:	2c00      	cmp	r4, #0
 800a52c:	d04b      	beq.n	800a5c6 <_malloc_r+0xea>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	4639      	mov	r1, r7
 800a532:	4630      	mov	r0, r6
 800a534:	eb04 0903 	add.w	r9, r4, r3
 800a538:	f000 fe48 	bl	800b1cc <_sbrk_r>
 800a53c:	4581      	cmp	r9, r0
 800a53e:	d142      	bne.n	800a5c6 <_malloc_r+0xea>
 800a540:	6821      	ldr	r1, [r4, #0]
 800a542:	1a6d      	subs	r5, r5, r1
 800a544:	4629      	mov	r1, r5
 800a546:	4630      	mov	r0, r6
 800a548:	f7ff ffa6 	bl	800a498 <sbrk_aligned>
 800a54c:	3001      	adds	r0, #1
 800a54e:	d03a      	beq.n	800a5c6 <_malloc_r+0xea>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	442b      	add	r3, r5
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	f8d8 3000 	ldr.w	r3, [r8]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	bb62      	cbnz	r2, 800a5b8 <_malloc_r+0xdc>
 800a55e:	f8c8 7000 	str.w	r7, [r8]
 800a562:	e00f      	b.n	800a584 <_malloc_r+0xa8>
 800a564:	6822      	ldr	r2, [r4, #0]
 800a566:	1b52      	subs	r2, r2, r5
 800a568:	d420      	bmi.n	800a5ac <_malloc_r+0xd0>
 800a56a:	2a0b      	cmp	r2, #11
 800a56c:	d917      	bls.n	800a59e <_malloc_r+0xc2>
 800a56e:	1961      	adds	r1, r4, r5
 800a570:	42a3      	cmp	r3, r4
 800a572:	6025      	str	r5, [r4, #0]
 800a574:	bf18      	it	ne
 800a576:	6059      	strne	r1, [r3, #4]
 800a578:	6863      	ldr	r3, [r4, #4]
 800a57a:	bf08      	it	eq
 800a57c:	f8c8 1000 	streq.w	r1, [r8]
 800a580:	5162      	str	r2, [r4, r5]
 800a582:	604b      	str	r3, [r1, #4]
 800a584:	4630      	mov	r0, r6
 800a586:	f000 f82f 	bl	800a5e8 <__malloc_unlock>
 800a58a:	f104 000b 	add.w	r0, r4, #11
 800a58e:	1d23      	adds	r3, r4, #4
 800a590:	f020 0007 	bic.w	r0, r0, #7
 800a594:	1ac2      	subs	r2, r0, r3
 800a596:	bf1c      	itt	ne
 800a598:	1a1b      	subne	r3, r3, r0
 800a59a:	50a3      	strne	r3, [r4, r2]
 800a59c:	e7af      	b.n	800a4fe <_malloc_r+0x22>
 800a59e:	6862      	ldr	r2, [r4, #4]
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	bf0c      	ite	eq
 800a5a4:	f8c8 2000 	streq.w	r2, [r8]
 800a5a8:	605a      	strne	r2, [r3, #4]
 800a5aa:	e7eb      	b.n	800a584 <_malloc_r+0xa8>
 800a5ac:	4623      	mov	r3, r4
 800a5ae:	6864      	ldr	r4, [r4, #4]
 800a5b0:	e7ae      	b.n	800a510 <_malloc_r+0x34>
 800a5b2:	463c      	mov	r4, r7
 800a5b4:	687f      	ldr	r7, [r7, #4]
 800a5b6:	e7b6      	b.n	800a526 <_malloc_r+0x4a>
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	42a3      	cmp	r3, r4
 800a5be:	d1fb      	bne.n	800a5b8 <_malloc_r+0xdc>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	6053      	str	r3, [r2, #4]
 800a5c4:	e7de      	b.n	800a584 <_malloc_r+0xa8>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	6033      	str	r3, [r6, #0]
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f000 f80c 	bl	800a5e8 <__malloc_unlock>
 800a5d0:	e794      	b.n	800a4fc <_malloc_r+0x20>
 800a5d2:	6005      	str	r5, [r0, #0]
 800a5d4:	e7d6      	b.n	800a584 <_malloc_r+0xa8>
 800a5d6:	bf00      	nop
 800a5d8:	2400050c 	.word	0x2400050c

0800a5dc <__malloc_lock>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	@ (800a5e4 <__malloc_lock+0x8>)
 800a5de:	f7ff b910 	b.w	8009802 <__retarget_lock_acquire_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	24000504 	.word	0x24000504

0800a5e8 <__malloc_unlock>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	@ (800a5f0 <__malloc_unlock+0x8>)
 800a5ea:	f7ff b90b 	b.w	8009804 <__retarget_lock_release_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	24000504 	.word	0x24000504

0800a5f4 <_Balloc>:
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	69c6      	ldr	r6, [r0, #28]
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	b976      	cbnz	r6, 800a61c <_Balloc+0x28>
 800a5fe:	2010      	movs	r0, #16
 800a600:	f7ff ff42 	bl	800a488 <malloc>
 800a604:	4602      	mov	r2, r0
 800a606:	61e0      	str	r0, [r4, #28]
 800a608:	b920      	cbnz	r0, 800a614 <_Balloc+0x20>
 800a60a:	4b18      	ldr	r3, [pc, #96]	@ (800a66c <_Balloc+0x78>)
 800a60c:	4818      	ldr	r0, [pc, #96]	@ (800a670 <_Balloc+0x7c>)
 800a60e:	216b      	movs	r1, #107	@ 0x6b
 800a610:	f000 fdec 	bl	800b1ec <__assert_func>
 800a614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a618:	6006      	str	r6, [r0, #0]
 800a61a:	60c6      	str	r6, [r0, #12]
 800a61c:	69e6      	ldr	r6, [r4, #28]
 800a61e:	68f3      	ldr	r3, [r6, #12]
 800a620:	b183      	cbz	r3, 800a644 <_Balloc+0x50>
 800a622:	69e3      	ldr	r3, [r4, #28]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a62a:	b9b8      	cbnz	r0, 800a65c <_Balloc+0x68>
 800a62c:	2101      	movs	r1, #1
 800a62e:	fa01 f605 	lsl.w	r6, r1, r5
 800a632:	1d72      	adds	r2, r6, #5
 800a634:	0092      	lsls	r2, r2, #2
 800a636:	4620      	mov	r0, r4
 800a638:	f000 fdf6 	bl	800b228 <_calloc_r>
 800a63c:	b160      	cbz	r0, 800a658 <_Balloc+0x64>
 800a63e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a642:	e00e      	b.n	800a662 <_Balloc+0x6e>
 800a644:	2221      	movs	r2, #33	@ 0x21
 800a646:	2104      	movs	r1, #4
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 fded 	bl	800b228 <_calloc_r>
 800a64e:	69e3      	ldr	r3, [r4, #28]
 800a650:	60f0      	str	r0, [r6, #12]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e4      	bne.n	800a622 <_Balloc+0x2e>
 800a658:	2000      	movs	r0, #0
 800a65a:	bd70      	pop	{r4, r5, r6, pc}
 800a65c:	6802      	ldr	r2, [r0, #0]
 800a65e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a662:	2300      	movs	r3, #0
 800a664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a668:	e7f7      	b.n	800a65a <_Balloc+0x66>
 800a66a:	bf00      	nop
 800a66c:	0800b485 	.word	0x0800b485
 800a670:	0800b505 	.word	0x0800b505

0800a674 <_Bfree>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	69c6      	ldr	r6, [r0, #28]
 800a678:	4605      	mov	r5, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	b976      	cbnz	r6, 800a69c <_Bfree+0x28>
 800a67e:	2010      	movs	r0, #16
 800a680:	f7ff ff02 	bl	800a488 <malloc>
 800a684:	4602      	mov	r2, r0
 800a686:	61e8      	str	r0, [r5, #28]
 800a688:	b920      	cbnz	r0, 800a694 <_Bfree+0x20>
 800a68a:	4b09      	ldr	r3, [pc, #36]	@ (800a6b0 <_Bfree+0x3c>)
 800a68c:	4809      	ldr	r0, [pc, #36]	@ (800a6b4 <_Bfree+0x40>)
 800a68e:	218f      	movs	r1, #143	@ 0x8f
 800a690:	f000 fdac 	bl	800b1ec <__assert_func>
 800a694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a698:	6006      	str	r6, [r0, #0]
 800a69a:	60c6      	str	r6, [r0, #12]
 800a69c:	b13c      	cbz	r4, 800a6ae <_Bfree+0x3a>
 800a69e:	69eb      	ldr	r3, [r5, #28]
 800a6a0:	6862      	ldr	r2, [r4, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6a8:	6021      	str	r1, [r4, #0]
 800a6aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
 800a6b0:	0800b485 	.word	0x0800b485
 800a6b4:	0800b505 	.word	0x0800b505

0800a6b8 <__multadd>:
 800a6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6bc:	690d      	ldr	r5, [r1, #16]
 800a6be:	4607      	mov	r7, r0
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	461e      	mov	r6, r3
 800a6c4:	f101 0c14 	add.w	ip, r1, #20
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f8dc 3000 	ldr.w	r3, [ip]
 800a6ce:	b299      	uxth	r1, r3
 800a6d0:	fb02 6101 	mla	r1, r2, r1, r6
 800a6d4:	0c1e      	lsrs	r6, r3, #16
 800a6d6:	0c0b      	lsrs	r3, r1, #16
 800a6d8:	fb02 3306 	mla	r3, r2, r6, r3
 800a6dc:	b289      	uxth	r1, r1
 800a6de:	3001      	adds	r0, #1
 800a6e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6e4:	4285      	cmp	r5, r0
 800a6e6:	f84c 1b04 	str.w	r1, [ip], #4
 800a6ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6ee:	dcec      	bgt.n	800a6ca <__multadd+0x12>
 800a6f0:	b30e      	cbz	r6, 800a736 <__multadd+0x7e>
 800a6f2:	68a3      	ldr	r3, [r4, #8]
 800a6f4:	42ab      	cmp	r3, r5
 800a6f6:	dc19      	bgt.n	800a72c <__multadd+0x74>
 800a6f8:	6861      	ldr	r1, [r4, #4]
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	3101      	adds	r1, #1
 800a6fe:	f7ff ff79 	bl	800a5f4 <_Balloc>
 800a702:	4680      	mov	r8, r0
 800a704:	b928      	cbnz	r0, 800a712 <__multadd+0x5a>
 800a706:	4602      	mov	r2, r0
 800a708:	4b0c      	ldr	r3, [pc, #48]	@ (800a73c <__multadd+0x84>)
 800a70a:	480d      	ldr	r0, [pc, #52]	@ (800a740 <__multadd+0x88>)
 800a70c:	21ba      	movs	r1, #186	@ 0xba
 800a70e:	f000 fd6d 	bl	800b1ec <__assert_func>
 800a712:	6922      	ldr	r2, [r4, #16]
 800a714:	3202      	adds	r2, #2
 800a716:	f104 010c 	add.w	r1, r4, #12
 800a71a:	0092      	lsls	r2, r2, #2
 800a71c:	300c      	adds	r0, #12
 800a71e:	f7ff f872 	bl	8009806 <memcpy>
 800a722:	4621      	mov	r1, r4
 800a724:	4638      	mov	r0, r7
 800a726:	f7ff ffa5 	bl	800a674 <_Bfree>
 800a72a:	4644      	mov	r4, r8
 800a72c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a730:	3501      	adds	r5, #1
 800a732:	615e      	str	r6, [r3, #20]
 800a734:	6125      	str	r5, [r4, #16]
 800a736:	4620      	mov	r0, r4
 800a738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a73c:	0800b4f4 	.word	0x0800b4f4
 800a740:	0800b505 	.word	0x0800b505

0800a744 <__hi0bits>:
 800a744:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a748:	4603      	mov	r3, r0
 800a74a:	bf36      	itet	cc
 800a74c:	0403      	lslcc	r3, r0, #16
 800a74e:	2000      	movcs	r0, #0
 800a750:	2010      	movcc	r0, #16
 800a752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a756:	bf3c      	itt	cc
 800a758:	021b      	lslcc	r3, r3, #8
 800a75a:	3008      	addcc	r0, #8
 800a75c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a760:	bf3c      	itt	cc
 800a762:	011b      	lslcc	r3, r3, #4
 800a764:	3004      	addcc	r0, #4
 800a766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a76a:	bf3c      	itt	cc
 800a76c:	009b      	lslcc	r3, r3, #2
 800a76e:	3002      	addcc	r0, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	db05      	blt.n	800a780 <__hi0bits+0x3c>
 800a774:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a778:	f100 0001 	add.w	r0, r0, #1
 800a77c:	bf08      	it	eq
 800a77e:	2020      	moveq	r0, #32
 800a780:	4770      	bx	lr

0800a782 <__lo0bits>:
 800a782:	6803      	ldr	r3, [r0, #0]
 800a784:	4602      	mov	r2, r0
 800a786:	f013 0007 	ands.w	r0, r3, #7
 800a78a:	d00b      	beq.n	800a7a4 <__lo0bits+0x22>
 800a78c:	07d9      	lsls	r1, r3, #31
 800a78e:	d421      	bmi.n	800a7d4 <__lo0bits+0x52>
 800a790:	0798      	lsls	r0, r3, #30
 800a792:	bf49      	itett	mi
 800a794:	085b      	lsrmi	r3, r3, #1
 800a796:	089b      	lsrpl	r3, r3, #2
 800a798:	2001      	movmi	r0, #1
 800a79a:	6013      	strmi	r3, [r2, #0]
 800a79c:	bf5c      	itt	pl
 800a79e:	6013      	strpl	r3, [r2, #0]
 800a7a0:	2002      	movpl	r0, #2
 800a7a2:	4770      	bx	lr
 800a7a4:	b299      	uxth	r1, r3
 800a7a6:	b909      	cbnz	r1, 800a7ac <__lo0bits+0x2a>
 800a7a8:	0c1b      	lsrs	r3, r3, #16
 800a7aa:	2010      	movs	r0, #16
 800a7ac:	b2d9      	uxtb	r1, r3
 800a7ae:	b909      	cbnz	r1, 800a7b4 <__lo0bits+0x32>
 800a7b0:	3008      	adds	r0, #8
 800a7b2:	0a1b      	lsrs	r3, r3, #8
 800a7b4:	0719      	lsls	r1, r3, #28
 800a7b6:	bf04      	itt	eq
 800a7b8:	091b      	lsreq	r3, r3, #4
 800a7ba:	3004      	addeq	r0, #4
 800a7bc:	0799      	lsls	r1, r3, #30
 800a7be:	bf04      	itt	eq
 800a7c0:	089b      	lsreq	r3, r3, #2
 800a7c2:	3002      	addeq	r0, #2
 800a7c4:	07d9      	lsls	r1, r3, #31
 800a7c6:	d403      	bmi.n	800a7d0 <__lo0bits+0x4e>
 800a7c8:	085b      	lsrs	r3, r3, #1
 800a7ca:	f100 0001 	add.w	r0, r0, #1
 800a7ce:	d003      	beq.n	800a7d8 <__lo0bits+0x56>
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	4770      	bx	lr
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	4770      	bx	lr
 800a7d8:	2020      	movs	r0, #32
 800a7da:	4770      	bx	lr

0800a7dc <__i2b>:
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	460c      	mov	r4, r1
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	f7ff ff07 	bl	800a5f4 <_Balloc>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	b928      	cbnz	r0, 800a7f6 <__i2b+0x1a>
 800a7ea:	4b05      	ldr	r3, [pc, #20]	@ (800a800 <__i2b+0x24>)
 800a7ec:	4805      	ldr	r0, [pc, #20]	@ (800a804 <__i2b+0x28>)
 800a7ee:	f240 1145 	movw	r1, #325	@ 0x145
 800a7f2:	f000 fcfb 	bl	800b1ec <__assert_func>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	6144      	str	r4, [r0, #20]
 800a7fa:	6103      	str	r3, [r0, #16]
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	bf00      	nop
 800a800:	0800b4f4 	.word	0x0800b4f4
 800a804:	0800b505 	.word	0x0800b505

0800a808 <__multiply>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	4617      	mov	r7, r2
 800a80e:	690a      	ldr	r2, [r1, #16]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	429a      	cmp	r2, r3
 800a814:	bfa8      	it	ge
 800a816:	463b      	movge	r3, r7
 800a818:	4689      	mov	r9, r1
 800a81a:	bfa4      	itt	ge
 800a81c:	460f      	movge	r7, r1
 800a81e:	4699      	movge	r9, r3
 800a820:	693d      	ldr	r5, [r7, #16]
 800a822:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	6879      	ldr	r1, [r7, #4]
 800a82a:	eb05 060a 	add.w	r6, r5, sl
 800a82e:	42b3      	cmp	r3, r6
 800a830:	b085      	sub	sp, #20
 800a832:	bfb8      	it	lt
 800a834:	3101      	addlt	r1, #1
 800a836:	f7ff fedd 	bl	800a5f4 <_Balloc>
 800a83a:	b930      	cbnz	r0, 800a84a <__multiply+0x42>
 800a83c:	4602      	mov	r2, r0
 800a83e:	4b41      	ldr	r3, [pc, #260]	@ (800a944 <__multiply+0x13c>)
 800a840:	4841      	ldr	r0, [pc, #260]	@ (800a948 <__multiply+0x140>)
 800a842:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a846:	f000 fcd1 	bl	800b1ec <__assert_func>
 800a84a:	f100 0414 	add.w	r4, r0, #20
 800a84e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a852:	4623      	mov	r3, r4
 800a854:	2200      	movs	r2, #0
 800a856:	4573      	cmp	r3, lr
 800a858:	d320      	bcc.n	800a89c <__multiply+0x94>
 800a85a:	f107 0814 	add.w	r8, r7, #20
 800a85e:	f109 0114 	add.w	r1, r9, #20
 800a862:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a866:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a86a:	9302      	str	r3, [sp, #8]
 800a86c:	1beb      	subs	r3, r5, r7
 800a86e:	3b15      	subs	r3, #21
 800a870:	f023 0303 	bic.w	r3, r3, #3
 800a874:	3304      	adds	r3, #4
 800a876:	3715      	adds	r7, #21
 800a878:	42bd      	cmp	r5, r7
 800a87a:	bf38      	it	cc
 800a87c:	2304      	movcc	r3, #4
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	9b02      	ldr	r3, [sp, #8]
 800a882:	9103      	str	r1, [sp, #12]
 800a884:	428b      	cmp	r3, r1
 800a886:	d80c      	bhi.n	800a8a2 <__multiply+0x9a>
 800a888:	2e00      	cmp	r6, #0
 800a88a:	dd03      	ble.n	800a894 <__multiply+0x8c>
 800a88c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a890:	2b00      	cmp	r3, #0
 800a892:	d055      	beq.n	800a940 <__multiply+0x138>
 800a894:	6106      	str	r6, [r0, #16]
 800a896:	b005      	add	sp, #20
 800a898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89c:	f843 2b04 	str.w	r2, [r3], #4
 800a8a0:	e7d9      	b.n	800a856 <__multiply+0x4e>
 800a8a2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a8a6:	f1ba 0f00 	cmp.w	sl, #0
 800a8aa:	d01f      	beq.n	800a8ec <__multiply+0xe4>
 800a8ac:	46c4      	mov	ip, r8
 800a8ae:	46a1      	mov	r9, r4
 800a8b0:	2700      	movs	r7, #0
 800a8b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a8b6:	f8d9 3000 	ldr.w	r3, [r9]
 800a8ba:	fa1f fb82 	uxth.w	fp, r2
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a8c4:	443b      	add	r3, r7
 800a8c6:	f8d9 7000 	ldr.w	r7, [r9]
 800a8ca:	0c12      	lsrs	r2, r2, #16
 800a8cc:	0c3f      	lsrs	r7, r7, #16
 800a8ce:	fb0a 7202 	mla	r2, sl, r2, r7
 800a8d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8dc:	4565      	cmp	r5, ip
 800a8de:	f849 3b04 	str.w	r3, [r9], #4
 800a8e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a8e6:	d8e4      	bhi.n	800a8b2 <__multiply+0xaa>
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	50e7      	str	r7, [r4, r3]
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a8f2:	3104      	adds	r1, #4
 800a8f4:	f1b9 0f00 	cmp.w	r9, #0
 800a8f8:	d020      	beq.n	800a93c <__multiply+0x134>
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	4647      	mov	r7, r8
 800a8fe:	46a4      	mov	ip, r4
 800a900:	f04f 0a00 	mov.w	sl, #0
 800a904:	f8b7 b000 	ldrh.w	fp, [r7]
 800a908:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a90c:	fb09 220b 	mla	r2, r9, fp, r2
 800a910:	4452      	add	r2, sl
 800a912:	b29b      	uxth	r3, r3
 800a914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a918:	f84c 3b04 	str.w	r3, [ip], #4
 800a91c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a924:	f8bc 3000 	ldrh.w	r3, [ip]
 800a928:	fb09 330a 	mla	r3, r9, sl, r3
 800a92c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a930:	42bd      	cmp	r5, r7
 800a932:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a936:	d8e5      	bhi.n	800a904 <__multiply+0xfc>
 800a938:	9a01      	ldr	r2, [sp, #4]
 800a93a:	50a3      	str	r3, [r4, r2]
 800a93c:	3404      	adds	r4, #4
 800a93e:	e79f      	b.n	800a880 <__multiply+0x78>
 800a940:	3e01      	subs	r6, #1
 800a942:	e7a1      	b.n	800a888 <__multiply+0x80>
 800a944:	0800b4f4 	.word	0x0800b4f4
 800a948:	0800b505 	.word	0x0800b505

0800a94c <__pow5mult>:
 800a94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a950:	4615      	mov	r5, r2
 800a952:	f012 0203 	ands.w	r2, r2, #3
 800a956:	4607      	mov	r7, r0
 800a958:	460e      	mov	r6, r1
 800a95a:	d007      	beq.n	800a96c <__pow5mult+0x20>
 800a95c:	4c25      	ldr	r4, [pc, #148]	@ (800a9f4 <__pow5mult+0xa8>)
 800a95e:	3a01      	subs	r2, #1
 800a960:	2300      	movs	r3, #0
 800a962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a966:	f7ff fea7 	bl	800a6b8 <__multadd>
 800a96a:	4606      	mov	r6, r0
 800a96c:	10ad      	asrs	r5, r5, #2
 800a96e:	d03d      	beq.n	800a9ec <__pow5mult+0xa0>
 800a970:	69fc      	ldr	r4, [r7, #28]
 800a972:	b97c      	cbnz	r4, 800a994 <__pow5mult+0x48>
 800a974:	2010      	movs	r0, #16
 800a976:	f7ff fd87 	bl	800a488 <malloc>
 800a97a:	4602      	mov	r2, r0
 800a97c:	61f8      	str	r0, [r7, #28]
 800a97e:	b928      	cbnz	r0, 800a98c <__pow5mult+0x40>
 800a980:	4b1d      	ldr	r3, [pc, #116]	@ (800a9f8 <__pow5mult+0xac>)
 800a982:	481e      	ldr	r0, [pc, #120]	@ (800a9fc <__pow5mult+0xb0>)
 800a984:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a988:	f000 fc30 	bl	800b1ec <__assert_func>
 800a98c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a990:	6004      	str	r4, [r0, #0]
 800a992:	60c4      	str	r4, [r0, #12]
 800a994:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a99c:	b94c      	cbnz	r4, 800a9b2 <__pow5mult+0x66>
 800a99e:	f240 2171 	movw	r1, #625	@ 0x271
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	f7ff ff1a 	bl	800a7dc <__i2b>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	6003      	str	r3, [r0, #0]
 800a9b2:	f04f 0900 	mov.w	r9, #0
 800a9b6:	07eb      	lsls	r3, r5, #31
 800a9b8:	d50a      	bpl.n	800a9d0 <__pow5mult+0x84>
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4622      	mov	r2, r4
 800a9be:	4638      	mov	r0, r7
 800a9c0:	f7ff ff22 	bl	800a808 <__multiply>
 800a9c4:	4631      	mov	r1, r6
 800a9c6:	4680      	mov	r8, r0
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f7ff fe53 	bl	800a674 <_Bfree>
 800a9ce:	4646      	mov	r6, r8
 800a9d0:	106d      	asrs	r5, r5, #1
 800a9d2:	d00b      	beq.n	800a9ec <__pow5mult+0xa0>
 800a9d4:	6820      	ldr	r0, [r4, #0]
 800a9d6:	b938      	cbnz	r0, 800a9e8 <__pow5mult+0x9c>
 800a9d8:	4622      	mov	r2, r4
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4638      	mov	r0, r7
 800a9de:	f7ff ff13 	bl	800a808 <__multiply>
 800a9e2:	6020      	str	r0, [r4, #0]
 800a9e4:	f8c0 9000 	str.w	r9, [r0]
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	e7e4      	b.n	800a9b6 <__pow5mult+0x6a>
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f2:	bf00      	nop
 800a9f4:	0800b5b8 	.word	0x0800b5b8
 800a9f8:	0800b485 	.word	0x0800b485
 800a9fc:	0800b505 	.word	0x0800b505

0800aa00 <__lshift>:
 800aa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa04:	460c      	mov	r4, r1
 800aa06:	6849      	ldr	r1, [r1, #4]
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa0e:	68a3      	ldr	r3, [r4, #8]
 800aa10:	4607      	mov	r7, r0
 800aa12:	4691      	mov	r9, r2
 800aa14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa18:	f108 0601 	add.w	r6, r8, #1
 800aa1c:	42b3      	cmp	r3, r6
 800aa1e:	db0b      	blt.n	800aa38 <__lshift+0x38>
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7ff fde7 	bl	800a5f4 <_Balloc>
 800aa26:	4605      	mov	r5, r0
 800aa28:	b948      	cbnz	r0, 800aa3e <__lshift+0x3e>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4b28      	ldr	r3, [pc, #160]	@ (800aad0 <__lshift+0xd0>)
 800aa2e:	4829      	ldr	r0, [pc, #164]	@ (800aad4 <__lshift+0xd4>)
 800aa30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa34:	f000 fbda 	bl	800b1ec <__assert_func>
 800aa38:	3101      	adds	r1, #1
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	e7ee      	b.n	800aa1c <__lshift+0x1c>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f100 0114 	add.w	r1, r0, #20
 800aa44:	f100 0210 	add.w	r2, r0, #16
 800aa48:	4618      	mov	r0, r3
 800aa4a:	4553      	cmp	r3, sl
 800aa4c:	db33      	blt.n	800aab6 <__lshift+0xb6>
 800aa4e:	6920      	ldr	r0, [r4, #16]
 800aa50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa54:	f104 0314 	add.w	r3, r4, #20
 800aa58:	f019 091f 	ands.w	r9, r9, #31
 800aa5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa64:	d02b      	beq.n	800aabe <__lshift+0xbe>
 800aa66:	f1c9 0e20 	rsb	lr, r9, #32
 800aa6a:	468a      	mov	sl, r1
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	fa00 f009 	lsl.w	r0, r0, r9
 800aa74:	4310      	orrs	r0, r2
 800aa76:	f84a 0b04 	str.w	r0, [sl], #4
 800aa7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa7e:	459c      	cmp	ip, r3
 800aa80:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa84:	d8f3      	bhi.n	800aa6e <__lshift+0x6e>
 800aa86:	ebac 0304 	sub.w	r3, ip, r4
 800aa8a:	3b15      	subs	r3, #21
 800aa8c:	f023 0303 	bic.w	r3, r3, #3
 800aa90:	3304      	adds	r3, #4
 800aa92:	f104 0015 	add.w	r0, r4, #21
 800aa96:	4560      	cmp	r0, ip
 800aa98:	bf88      	it	hi
 800aa9a:	2304      	movhi	r3, #4
 800aa9c:	50ca      	str	r2, [r1, r3]
 800aa9e:	b10a      	cbz	r2, 800aaa4 <__lshift+0xa4>
 800aaa0:	f108 0602 	add.w	r6, r8, #2
 800aaa4:	3e01      	subs	r6, #1
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	612e      	str	r6, [r5, #16]
 800aaaa:	4621      	mov	r1, r4
 800aaac:	f7ff fde2 	bl	800a674 <_Bfree>
 800aab0:	4628      	mov	r0, r5
 800aab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab6:	f842 0f04 	str.w	r0, [r2, #4]!
 800aaba:	3301      	adds	r3, #1
 800aabc:	e7c5      	b.n	800aa4a <__lshift+0x4a>
 800aabe:	3904      	subs	r1, #4
 800aac0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aac8:	459c      	cmp	ip, r3
 800aaca:	d8f9      	bhi.n	800aac0 <__lshift+0xc0>
 800aacc:	e7ea      	b.n	800aaa4 <__lshift+0xa4>
 800aace:	bf00      	nop
 800aad0:	0800b4f4 	.word	0x0800b4f4
 800aad4:	0800b505 	.word	0x0800b505

0800aad8 <__mcmp>:
 800aad8:	690a      	ldr	r2, [r1, #16]
 800aada:	4603      	mov	r3, r0
 800aadc:	6900      	ldr	r0, [r0, #16]
 800aade:	1a80      	subs	r0, r0, r2
 800aae0:	b530      	push	{r4, r5, lr}
 800aae2:	d10e      	bne.n	800ab02 <__mcmp+0x2a>
 800aae4:	3314      	adds	r3, #20
 800aae6:	3114      	adds	r1, #20
 800aae8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aaec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aaf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aaf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aaf8:	4295      	cmp	r5, r2
 800aafa:	d003      	beq.n	800ab04 <__mcmp+0x2c>
 800aafc:	d205      	bcs.n	800ab0a <__mcmp+0x32>
 800aafe:	f04f 30ff 	mov.w	r0, #4294967295
 800ab02:	bd30      	pop	{r4, r5, pc}
 800ab04:	42a3      	cmp	r3, r4
 800ab06:	d3f3      	bcc.n	800aaf0 <__mcmp+0x18>
 800ab08:	e7fb      	b.n	800ab02 <__mcmp+0x2a>
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	e7f9      	b.n	800ab02 <__mcmp+0x2a>
	...

0800ab10 <__mdiff>:
 800ab10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	4689      	mov	r9, r1
 800ab16:	4606      	mov	r6, r0
 800ab18:	4611      	mov	r1, r2
 800ab1a:	4648      	mov	r0, r9
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	f7ff ffdb 	bl	800aad8 <__mcmp>
 800ab22:	1e05      	subs	r5, r0, #0
 800ab24:	d112      	bne.n	800ab4c <__mdiff+0x3c>
 800ab26:	4629      	mov	r1, r5
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f7ff fd63 	bl	800a5f4 <_Balloc>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	b928      	cbnz	r0, 800ab3e <__mdiff+0x2e>
 800ab32:	4b3f      	ldr	r3, [pc, #252]	@ (800ac30 <__mdiff+0x120>)
 800ab34:	f240 2137 	movw	r1, #567	@ 0x237
 800ab38:	483e      	ldr	r0, [pc, #248]	@ (800ac34 <__mdiff+0x124>)
 800ab3a:	f000 fb57 	bl	800b1ec <__assert_func>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab44:	4610      	mov	r0, r2
 800ab46:	b003      	add	sp, #12
 800ab48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4c:	bfbc      	itt	lt
 800ab4e:	464b      	movlt	r3, r9
 800ab50:	46a1      	movlt	r9, r4
 800ab52:	4630      	mov	r0, r6
 800ab54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab58:	bfba      	itte	lt
 800ab5a:	461c      	movlt	r4, r3
 800ab5c:	2501      	movlt	r5, #1
 800ab5e:	2500      	movge	r5, #0
 800ab60:	f7ff fd48 	bl	800a5f4 <_Balloc>
 800ab64:	4602      	mov	r2, r0
 800ab66:	b918      	cbnz	r0, 800ab70 <__mdiff+0x60>
 800ab68:	4b31      	ldr	r3, [pc, #196]	@ (800ac30 <__mdiff+0x120>)
 800ab6a:	f240 2145 	movw	r1, #581	@ 0x245
 800ab6e:	e7e3      	b.n	800ab38 <__mdiff+0x28>
 800ab70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ab74:	6926      	ldr	r6, [r4, #16]
 800ab76:	60c5      	str	r5, [r0, #12]
 800ab78:	f109 0310 	add.w	r3, r9, #16
 800ab7c:	f109 0514 	add.w	r5, r9, #20
 800ab80:	f104 0e14 	add.w	lr, r4, #20
 800ab84:	f100 0b14 	add.w	fp, r0, #20
 800ab88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ab8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab90:	9301      	str	r3, [sp, #4]
 800ab92:	46d9      	mov	r9, fp
 800ab94:	f04f 0c00 	mov.w	ip, #0
 800ab98:	9b01      	ldr	r3, [sp, #4]
 800ab9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aba2:	9301      	str	r3, [sp, #4]
 800aba4:	fa1f f38a 	uxth.w	r3, sl
 800aba8:	4619      	mov	r1, r3
 800abaa:	b283      	uxth	r3, r0
 800abac:	1acb      	subs	r3, r1, r3
 800abae:	0c00      	lsrs	r0, r0, #16
 800abb0:	4463      	add	r3, ip
 800abb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800abb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800abba:	b29b      	uxth	r3, r3
 800abbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800abc0:	4576      	cmp	r6, lr
 800abc2:	f849 3b04 	str.w	r3, [r9], #4
 800abc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abca:	d8e5      	bhi.n	800ab98 <__mdiff+0x88>
 800abcc:	1b33      	subs	r3, r6, r4
 800abce:	3b15      	subs	r3, #21
 800abd0:	f023 0303 	bic.w	r3, r3, #3
 800abd4:	3415      	adds	r4, #21
 800abd6:	3304      	adds	r3, #4
 800abd8:	42a6      	cmp	r6, r4
 800abda:	bf38      	it	cc
 800abdc:	2304      	movcc	r3, #4
 800abde:	441d      	add	r5, r3
 800abe0:	445b      	add	r3, fp
 800abe2:	461e      	mov	r6, r3
 800abe4:	462c      	mov	r4, r5
 800abe6:	4544      	cmp	r4, r8
 800abe8:	d30e      	bcc.n	800ac08 <__mdiff+0xf8>
 800abea:	f108 0103 	add.w	r1, r8, #3
 800abee:	1b49      	subs	r1, r1, r5
 800abf0:	f021 0103 	bic.w	r1, r1, #3
 800abf4:	3d03      	subs	r5, #3
 800abf6:	45a8      	cmp	r8, r5
 800abf8:	bf38      	it	cc
 800abfa:	2100      	movcc	r1, #0
 800abfc:	440b      	add	r3, r1
 800abfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac02:	b191      	cbz	r1, 800ac2a <__mdiff+0x11a>
 800ac04:	6117      	str	r7, [r2, #16]
 800ac06:	e79d      	b.n	800ab44 <__mdiff+0x34>
 800ac08:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac0c:	46e6      	mov	lr, ip
 800ac0e:	0c08      	lsrs	r0, r1, #16
 800ac10:	fa1c fc81 	uxtah	ip, ip, r1
 800ac14:	4471      	add	r1, lr
 800ac16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac1a:	b289      	uxth	r1, r1
 800ac1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac20:	f846 1b04 	str.w	r1, [r6], #4
 800ac24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac28:	e7dd      	b.n	800abe6 <__mdiff+0xd6>
 800ac2a:	3f01      	subs	r7, #1
 800ac2c:	e7e7      	b.n	800abfe <__mdiff+0xee>
 800ac2e:	bf00      	nop
 800ac30:	0800b4f4 	.word	0x0800b4f4
 800ac34:	0800b505 	.word	0x0800b505

0800ac38 <__d2b>:
 800ac38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	2101      	movs	r1, #1
 800ac40:	ec59 8b10 	vmov	r8, r9, d0
 800ac44:	4616      	mov	r6, r2
 800ac46:	f7ff fcd5 	bl	800a5f4 <_Balloc>
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	b930      	cbnz	r0, 800ac5c <__d2b+0x24>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	4b23      	ldr	r3, [pc, #140]	@ (800ace0 <__d2b+0xa8>)
 800ac52:	4824      	ldr	r0, [pc, #144]	@ (800ace4 <__d2b+0xac>)
 800ac54:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac58:	f000 fac8 	bl	800b1ec <__assert_func>
 800ac5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac64:	b10d      	cbz	r5, 800ac6a <__d2b+0x32>
 800ac66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac6a:	9301      	str	r3, [sp, #4]
 800ac6c:	f1b8 0300 	subs.w	r3, r8, #0
 800ac70:	d023      	beq.n	800acba <__d2b+0x82>
 800ac72:	4668      	mov	r0, sp
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	f7ff fd84 	bl	800a782 <__lo0bits>
 800ac7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac7e:	b1d0      	cbz	r0, 800acb6 <__d2b+0x7e>
 800ac80:	f1c0 0320 	rsb	r3, r0, #32
 800ac84:	fa02 f303 	lsl.w	r3, r2, r3
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	40c2      	lsrs	r2, r0
 800ac8c:	6163      	str	r3, [r4, #20]
 800ac8e:	9201      	str	r2, [sp, #4]
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	61a3      	str	r3, [r4, #24]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	bf0c      	ite	eq
 800ac98:	2201      	moveq	r2, #1
 800ac9a:	2202      	movne	r2, #2
 800ac9c:	6122      	str	r2, [r4, #16]
 800ac9e:	b1a5      	cbz	r5, 800acca <__d2b+0x92>
 800aca0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aca4:	4405      	add	r5, r0
 800aca6:	603d      	str	r5, [r7, #0]
 800aca8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acac:	6030      	str	r0, [r6, #0]
 800acae:	4620      	mov	r0, r4
 800acb0:	b003      	add	sp, #12
 800acb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acb6:	6161      	str	r1, [r4, #20]
 800acb8:	e7ea      	b.n	800ac90 <__d2b+0x58>
 800acba:	a801      	add	r0, sp, #4
 800acbc:	f7ff fd61 	bl	800a782 <__lo0bits>
 800acc0:	9b01      	ldr	r3, [sp, #4]
 800acc2:	6163      	str	r3, [r4, #20]
 800acc4:	3020      	adds	r0, #32
 800acc6:	2201      	movs	r2, #1
 800acc8:	e7e8      	b.n	800ac9c <__d2b+0x64>
 800acca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800acd2:	6038      	str	r0, [r7, #0]
 800acd4:	6918      	ldr	r0, [r3, #16]
 800acd6:	f7ff fd35 	bl	800a744 <__hi0bits>
 800acda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acde:	e7e5      	b.n	800acac <__d2b+0x74>
 800ace0:	0800b4f4 	.word	0x0800b4f4
 800ace4:	0800b505 	.word	0x0800b505

0800ace8 <__sfputc_r>:
 800ace8:	6893      	ldr	r3, [r2, #8]
 800acea:	3b01      	subs	r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	b410      	push	{r4}
 800acf0:	6093      	str	r3, [r2, #8]
 800acf2:	da08      	bge.n	800ad06 <__sfputc_r+0x1e>
 800acf4:	6994      	ldr	r4, [r2, #24]
 800acf6:	42a3      	cmp	r3, r4
 800acf8:	db01      	blt.n	800acfe <__sfputc_r+0x16>
 800acfa:	290a      	cmp	r1, #10
 800acfc:	d103      	bne.n	800ad06 <__sfputc_r+0x1e>
 800acfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad02:	f7fe bc6c 	b.w	80095de <__swbuf_r>
 800ad06:	6813      	ldr	r3, [r2, #0]
 800ad08:	1c58      	adds	r0, r3, #1
 800ad0a:	6010      	str	r0, [r2, #0]
 800ad0c:	7019      	strb	r1, [r3, #0]
 800ad0e:	4608      	mov	r0, r1
 800ad10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <__sfputs_r>:
 800ad16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad18:	4606      	mov	r6, r0
 800ad1a:	460f      	mov	r7, r1
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	18d5      	adds	r5, r2, r3
 800ad20:	42ac      	cmp	r4, r5
 800ad22:	d101      	bne.n	800ad28 <__sfputs_r+0x12>
 800ad24:	2000      	movs	r0, #0
 800ad26:	e007      	b.n	800ad38 <__sfputs_r+0x22>
 800ad28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad2c:	463a      	mov	r2, r7
 800ad2e:	4630      	mov	r0, r6
 800ad30:	f7ff ffda 	bl	800ace8 <__sfputc_r>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d1f3      	bne.n	800ad20 <__sfputs_r+0xa>
 800ad38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad3c <_vfiprintf_r>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	460d      	mov	r5, r1
 800ad42:	b09d      	sub	sp, #116	@ 0x74
 800ad44:	4614      	mov	r4, r2
 800ad46:	4698      	mov	r8, r3
 800ad48:	4606      	mov	r6, r0
 800ad4a:	b118      	cbz	r0, 800ad54 <_vfiprintf_r+0x18>
 800ad4c:	6a03      	ldr	r3, [r0, #32]
 800ad4e:	b90b      	cbnz	r3, 800ad54 <_vfiprintf_r+0x18>
 800ad50:	f7fe fb5c 	bl	800940c <__sinit>
 800ad54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad56:	07d9      	lsls	r1, r3, #31
 800ad58:	d405      	bmi.n	800ad66 <_vfiprintf_r+0x2a>
 800ad5a:	89ab      	ldrh	r3, [r5, #12]
 800ad5c:	059a      	lsls	r2, r3, #22
 800ad5e:	d402      	bmi.n	800ad66 <_vfiprintf_r+0x2a>
 800ad60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad62:	f7fe fd4e 	bl	8009802 <__retarget_lock_acquire_recursive>
 800ad66:	89ab      	ldrh	r3, [r5, #12]
 800ad68:	071b      	lsls	r3, r3, #28
 800ad6a:	d501      	bpl.n	800ad70 <_vfiprintf_r+0x34>
 800ad6c:	692b      	ldr	r3, [r5, #16]
 800ad6e:	b99b      	cbnz	r3, 800ad98 <_vfiprintf_r+0x5c>
 800ad70:	4629      	mov	r1, r5
 800ad72:	4630      	mov	r0, r6
 800ad74:	f7fe fc72 	bl	800965c <__swsetup_r>
 800ad78:	b170      	cbz	r0, 800ad98 <_vfiprintf_r+0x5c>
 800ad7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad7c:	07dc      	lsls	r4, r3, #31
 800ad7e:	d504      	bpl.n	800ad8a <_vfiprintf_r+0x4e>
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	b01d      	add	sp, #116	@ 0x74
 800ad86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	0598      	lsls	r0, r3, #22
 800ad8e:	d4f7      	bmi.n	800ad80 <_vfiprintf_r+0x44>
 800ad90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad92:	f7fe fd37 	bl	8009804 <__retarget_lock_release_recursive>
 800ad96:	e7f3      	b.n	800ad80 <_vfiprintf_r+0x44>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad9c:	2320      	movs	r3, #32
 800ad9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ada2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ada6:	2330      	movs	r3, #48	@ 0x30
 800ada8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af58 <_vfiprintf_r+0x21c>
 800adac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adb0:	f04f 0901 	mov.w	r9, #1
 800adb4:	4623      	mov	r3, r4
 800adb6:	469a      	mov	sl, r3
 800adb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adbc:	b10a      	cbz	r2, 800adc2 <_vfiprintf_r+0x86>
 800adbe:	2a25      	cmp	r2, #37	@ 0x25
 800adc0:	d1f9      	bne.n	800adb6 <_vfiprintf_r+0x7a>
 800adc2:	ebba 0b04 	subs.w	fp, sl, r4
 800adc6:	d00b      	beq.n	800ade0 <_vfiprintf_r+0xa4>
 800adc8:	465b      	mov	r3, fp
 800adca:	4622      	mov	r2, r4
 800adcc:	4629      	mov	r1, r5
 800adce:	4630      	mov	r0, r6
 800add0:	f7ff ffa1 	bl	800ad16 <__sfputs_r>
 800add4:	3001      	adds	r0, #1
 800add6:	f000 80a7 	beq.w	800af28 <_vfiprintf_r+0x1ec>
 800adda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800addc:	445a      	add	r2, fp
 800adde:	9209      	str	r2, [sp, #36]	@ 0x24
 800ade0:	f89a 3000 	ldrb.w	r3, [sl]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 809f 	beq.w	800af28 <_vfiprintf_r+0x1ec>
 800adea:	2300      	movs	r3, #0
 800adec:	f04f 32ff 	mov.w	r2, #4294967295
 800adf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adf4:	f10a 0a01 	add.w	sl, sl, #1
 800adf8:	9304      	str	r3, [sp, #16]
 800adfa:	9307      	str	r3, [sp, #28]
 800adfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae00:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae02:	4654      	mov	r4, sl
 800ae04:	2205      	movs	r2, #5
 800ae06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0a:	4853      	ldr	r0, [pc, #332]	@ (800af58 <_vfiprintf_r+0x21c>)
 800ae0c:	f7f5 fa80 	bl	8000310 <memchr>
 800ae10:	9a04      	ldr	r2, [sp, #16]
 800ae12:	b9d8      	cbnz	r0, 800ae4c <_vfiprintf_r+0x110>
 800ae14:	06d1      	lsls	r1, r2, #27
 800ae16:	bf44      	itt	mi
 800ae18:	2320      	movmi	r3, #32
 800ae1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae1e:	0713      	lsls	r3, r2, #28
 800ae20:	bf44      	itt	mi
 800ae22:	232b      	movmi	r3, #43	@ 0x2b
 800ae24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae28:	f89a 3000 	ldrb.w	r3, [sl]
 800ae2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae2e:	d015      	beq.n	800ae5c <_vfiprintf_r+0x120>
 800ae30:	9a07      	ldr	r2, [sp, #28]
 800ae32:	4654      	mov	r4, sl
 800ae34:	2000      	movs	r0, #0
 800ae36:	f04f 0c0a 	mov.w	ip, #10
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae40:	3b30      	subs	r3, #48	@ 0x30
 800ae42:	2b09      	cmp	r3, #9
 800ae44:	d94b      	bls.n	800aede <_vfiprintf_r+0x1a2>
 800ae46:	b1b0      	cbz	r0, 800ae76 <_vfiprintf_r+0x13a>
 800ae48:	9207      	str	r2, [sp, #28]
 800ae4a:	e014      	b.n	800ae76 <_vfiprintf_r+0x13a>
 800ae4c:	eba0 0308 	sub.w	r3, r0, r8
 800ae50:	fa09 f303 	lsl.w	r3, r9, r3
 800ae54:	4313      	orrs	r3, r2
 800ae56:	9304      	str	r3, [sp, #16]
 800ae58:	46a2      	mov	sl, r4
 800ae5a:	e7d2      	b.n	800ae02 <_vfiprintf_r+0xc6>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	1d19      	adds	r1, r3, #4
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	9103      	str	r1, [sp, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bfbb      	ittet	lt
 800ae68:	425b      	neglt	r3, r3
 800ae6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae6e:	9307      	strge	r3, [sp, #28]
 800ae70:	9307      	strlt	r3, [sp, #28]
 800ae72:	bfb8      	it	lt
 800ae74:	9204      	strlt	r2, [sp, #16]
 800ae76:	7823      	ldrb	r3, [r4, #0]
 800ae78:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae7a:	d10a      	bne.n	800ae92 <_vfiprintf_r+0x156>
 800ae7c:	7863      	ldrb	r3, [r4, #1]
 800ae7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae80:	d132      	bne.n	800aee8 <_vfiprintf_r+0x1ac>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	1d1a      	adds	r2, r3, #4
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	9203      	str	r2, [sp, #12]
 800ae8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae8e:	3402      	adds	r4, #2
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af68 <_vfiprintf_r+0x22c>
 800ae96:	7821      	ldrb	r1, [r4, #0]
 800ae98:	2203      	movs	r2, #3
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	f7f5 fa38 	bl	8000310 <memchr>
 800aea0:	b138      	cbz	r0, 800aeb2 <_vfiprintf_r+0x176>
 800aea2:	9b04      	ldr	r3, [sp, #16]
 800aea4:	eba0 000a 	sub.w	r0, r0, sl
 800aea8:	2240      	movs	r2, #64	@ 0x40
 800aeaa:	4082      	lsls	r2, r0
 800aeac:	4313      	orrs	r3, r2
 800aeae:	3401      	adds	r4, #1
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb6:	4829      	ldr	r0, [pc, #164]	@ (800af5c <_vfiprintf_r+0x220>)
 800aeb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aebc:	2206      	movs	r2, #6
 800aebe:	f7f5 fa27 	bl	8000310 <memchr>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d03f      	beq.n	800af46 <_vfiprintf_r+0x20a>
 800aec6:	4b26      	ldr	r3, [pc, #152]	@ (800af60 <_vfiprintf_r+0x224>)
 800aec8:	bb1b      	cbnz	r3, 800af12 <_vfiprintf_r+0x1d6>
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	3307      	adds	r3, #7
 800aece:	f023 0307 	bic.w	r3, r3, #7
 800aed2:	3308      	adds	r3, #8
 800aed4:	9303      	str	r3, [sp, #12]
 800aed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed8:	443b      	add	r3, r7
 800aeda:	9309      	str	r3, [sp, #36]	@ 0x24
 800aedc:	e76a      	b.n	800adb4 <_vfiprintf_r+0x78>
 800aede:	fb0c 3202 	mla	r2, ip, r2, r3
 800aee2:	460c      	mov	r4, r1
 800aee4:	2001      	movs	r0, #1
 800aee6:	e7a8      	b.n	800ae3a <_vfiprintf_r+0xfe>
 800aee8:	2300      	movs	r3, #0
 800aeea:	3401      	adds	r4, #1
 800aeec:	9305      	str	r3, [sp, #20]
 800aeee:	4619      	mov	r1, r3
 800aef0:	f04f 0c0a 	mov.w	ip, #10
 800aef4:	4620      	mov	r0, r4
 800aef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aefa:	3a30      	subs	r2, #48	@ 0x30
 800aefc:	2a09      	cmp	r2, #9
 800aefe:	d903      	bls.n	800af08 <_vfiprintf_r+0x1cc>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d0c6      	beq.n	800ae92 <_vfiprintf_r+0x156>
 800af04:	9105      	str	r1, [sp, #20]
 800af06:	e7c4      	b.n	800ae92 <_vfiprintf_r+0x156>
 800af08:	fb0c 2101 	mla	r1, ip, r1, r2
 800af0c:	4604      	mov	r4, r0
 800af0e:	2301      	movs	r3, #1
 800af10:	e7f0      	b.n	800aef4 <_vfiprintf_r+0x1b8>
 800af12:	ab03      	add	r3, sp, #12
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	462a      	mov	r2, r5
 800af18:	4b12      	ldr	r3, [pc, #72]	@ (800af64 <_vfiprintf_r+0x228>)
 800af1a:	a904      	add	r1, sp, #16
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7fd fe43 	bl	8008ba8 <_printf_float>
 800af22:	4607      	mov	r7, r0
 800af24:	1c78      	adds	r0, r7, #1
 800af26:	d1d6      	bne.n	800aed6 <_vfiprintf_r+0x19a>
 800af28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af2a:	07d9      	lsls	r1, r3, #31
 800af2c:	d405      	bmi.n	800af3a <_vfiprintf_r+0x1fe>
 800af2e:	89ab      	ldrh	r3, [r5, #12]
 800af30:	059a      	lsls	r2, r3, #22
 800af32:	d402      	bmi.n	800af3a <_vfiprintf_r+0x1fe>
 800af34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af36:	f7fe fc65 	bl	8009804 <__retarget_lock_release_recursive>
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	065b      	lsls	r3, r3, #25
 800af3e:	f53f af1f 	bmi.w	800ad80 <_vfiprintf_r+0x44>
 800af42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af44:	e71e      	b.n	800ad84 <_vfiprintf_r+0x48>
 800af46:	ab03      	add	r3, sp, #12
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	462a      	mov	r2, r5
 800af4c:	4b05      	ldr	r3, [pc, #20]	@ (800af64 <_vfiprintf_r+0x228>)
 800af4e:	a904      	add	r1, sp, #16
 800af50:	4630      	mov	r0, r6
 800af52:	f7fe f8b1 	bl	80090b8 <_printf_i>
 800af56:	e7e4      	b.n	800af22 <_vfiprintf_r+0x1e6>
 800af58:	0800b55e 	.word	0x0800b55e
 800af5c:	0800b568 	.word	0x0800b568
 800af60:	08008ba9 	.word	0x08008ba9
 800af64:	0800ad17 	.word	0x0800ad17
 800af68:	0800b564 	.word	0x0800b564

0800af6c <__sflush_r>:
 800af6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af74:	0716      	lsls	r6, r2, #28
 800af76:	4605      	mov	r5, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	d454      	bmi.n	800b026 <__sflush_r+0xba>
 800af7c:	684b      	ldr	r3, [r1, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	dc02      	bgt.n	800af88 <__sflush_r+0x1c>
 800af82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af84:	2b00      	cmp	r3, #0
 800af86:	dd48      	ble.n	800b01a <__sflush_r+0xae>
 800af88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af8a:	2e00      	cmp	r6, #0
 800af8c:	d045      	beq.n	800b01a <__sflush_r+0xae>
 800af8e:	2300      	movs	r3, #0
 800af90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af94:	682f      	ldr	r7, [r5, #0]
 800af96:	6a21      	ldr	r1, [r4, #32]
 800af98:	602b      	str	r3, [r5, #0]
 800af9a:	d030      	beq.n	800affe <__sflush_r+0x92>
 800af9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	0759      	lsls	r1, r3, #29
 800afa2:	d505      	bpl.n	800afb0 <__sflush_r+0x44>
 800afa4:	6863      	ldr	r3, [r4, #4]
 800afa6:	1ad2      	subs	r2, r2, r3
 800afa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afaa:	b10b      	cbz	r3, 800afb0 <__sflush_r+0x44>
 800afac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	2300      	movs	r3, #0
 800afb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afb4:	6a21      	ldr	r1, [r4, #32]
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b0      	blx	r6
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	89a3      	ldrh	r3, [r4, #12]
 800afbe:	d106      	bne.n	800afce <__sflush_r+0x62>
 800afc0:	6829      	ldr	r1, [r5, #0]
 800afc2:	291d      	cmp	r1, #29
 800afc4:	d82b      	bhi.n	800b01e <__sflush_r+0xb2>
 800afc6:	4a2a      	ldr	r2, [pc, #168]	@ (800b070 <__sflush_r+0x104>)
 800afc8:	40ca      	lsrs	r2, r1
 800afca:	07d6      	lsls	r6, r2, #31
 800afcc:	d527      	bpl.n	800b01e <__sflush_r+0xb2>
 800afce:	2200      	movs	r2, #0
 800afd0:	6062      	str	r2, [r4, #4]
 800afd2:	04d9      	lsls	r1, r3, #19
 800afd4:	6922      	ldr	r2, [r4, #16]
 800afd6:	6022      	str	r2, [r4, #0]
 800afd8:	d504      	bpl.n	800afe4 <__sflush_r+0x78>
 800afda:	1c42      	adds	r2, r0, #1
 800afdc:	d101      	bne.n	800afe2 <__sflush_r+0x76>
 800afde:	682b      	ldr	r3, [r5, #0]
 800afe0:	b903      	cbnz	r3, 800afe4 <__sflush_r+0x78>
 800afe2:	6560      	str	r0, [r4, #84]	@ 0x54
 800afe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afe6:	602f      	str	r7, [r5, #0]
 800afe8:	b1b9      	cbz	r1, 800b01a <__sflush_r+0xae>
 800afea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afee:	4299      	cmp	r1, r3
 800aff0:	d002      	beq.n	800aff8 <__sflush_r+0x8c>
 800aff2:	4628      	mov	r0, r5
 800aff4:	f7ff f9fe 	bl	800a3f4 <_free_r>
 800aff8:	2300      	movs	r3, #0
 800affa:	6363      	str	r3, [r4, #52]	@ 0x34
 800affc:	e00d      	b.n	800b01a <__sflush_r+0xae>
 800affe:	2301      	movs	r3, #1
 800b000:	4628      	mov	r0, r5
 800b002:	47b0      	blx	r6
 800b004:	4602      	mov	r2, r0
 800b006:	1c50      	adds	r0, r2, #1
 800b008:	d1c9      	bne.n	800af9e <__sflush_r+0x32>
 800b00a:	682b      	ldr	r3, [r5, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d0c6      	beq.n	800af9e <__sflush_r+0x32>
 800b010:	2b1d      	cmp	r3, #29
 800b012:	d001      	beq.n	800b018 <__sflush_r+0xac>
 800b014:	2b16      	cmp	r3, #22
 800b016:	d11e      	bne.n	800b056 <__sflush_r+0xea>
 800b018:	602f      	str	r7, [r5, #0]
 800b01a:	2000      	movs	r0, #0
 800b01c:	e022      	b.n	800b064 <__sflush_r+0xf8>
 800b01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b022:	b21b      	sxth	r3, r3
 800b024:	e01b      	b.n	800b05e <__sflush_r+0xf2>
 800b026:	690f      	ldr	r7, [r1, #16]
 800b028:	2f00      	cmp	r7, #0
 800b02a:	d0f6      	beq.n	800b01a <__sflush_r+0xae>
 800b02c:	0793      	lsls	r3, r2, #30
 800b02e:	680e      	ldr	r6, [r1, #0]
 800b030:	bf08      	it	eq
 800b032:	694b      	ldreq	r3, [r1, #20]
 800b034:	600f      	str	r7, [r1, #0]
 800b036:	bf18      	it	ne
 800b038:	2300      	movne	r3, #0
 800b03a:	eba6 0807 	sub.w	r8, r6, r7
 800b03e:	608b      	str	r3, [r1, #8]
 800b040:	f1b8 0f00 	cmp.w	r8, #0
 800b044:	dde9      	ble.n	800b01a <__sflush_r+0xae>
 800b046:	6a21      	ldr	r1, [r4, #32]
 800b048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b04a:	4643      	mov	r3, r8
 800b04c:	463a      	mov	r2, r7
 800b04e:	4628      	mov	r0, r5
 800b050:	47b0      	blx	r6
 800b052:	2800      	cmp	r0, #0
 800b054:	dc08      	bgt.n	800b068 <__sflush_r+0xfc>
 800b056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	f04f 30ff 	mov.w	r0, #4294967295
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	4407      	add	r7, r0
 800b06a:	eba8 0800 	sub.w	r8, r8, r0
 800b06e:	e7e7      	b.n	800b040 <__sflush_r+0xd4>
 800b070:	20400001 	.word	0x20400001

0800b074 <_fflush_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	690b      	ldr	r3, [r1, #16]
 800b078:	4605      	mov	r5, r0
 800b07a:	460c      	mov	r4, r1
 800b07c:	b913      	cbnz	r3, 800b084 <_fflush_r+0x10>
 800b07e:	2500      	movs	r5, #0
 800b080:	4628      	mov	r0, r5
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	b118      	cbz	r0, 800b08e <_fflush_r+0x1a>
 800b086:	6a03      	ldr	r3, [r0, #32]
 800b088:	b90b      	cbnz	r3, 800b08e <_fflush_r+0x1a>
 800b08a:	f7fe f9bf 	bl	800940c <__sinit>
 800b08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0f3      	beq.n	800b07e <_fflush_r+0xa>
 800b096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b098:	07d0      	lsls	r0, r2, #31
 800b09a:	d404      	bmi.n	800b0a6 <_fflush_r+0x32>
 800b09c:	0599      	lsls	r1, r3, #22
 800b09e:	d402      	bmi.n	800b0a6 <_fflush_r+0x32>
 800b0a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0a2:	f7fe fbae 	bl	8009802 <__retarget_lock_acquire_recursive>
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	f7ff ff5f 	bl	800af6c <__sflush_r>
 800b0ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0b0:	07da      	lsls	r2, r3, #31
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	d4e4      	bmi.n	800b080 <_fflush_r+0xc>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	059b      	lsls	r3, r3, #22
 800b0ba:	d4e1      	bmi.n	800b080 <_fflush_r+0xc>
 800b0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0be:	f7fe fba1 	bl	8009804 <__retarget_lock_release_recursive>
 800b0c2:	e7dd      	b.n	800b080 <_fflush_r+0xc>

0800b0c4 <__swhatbuf_r>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	b096      	sub	sp, #88	@ 0x58
 800b0d0:	4615      	mov	r5, r2
 800b0d2:	461e      	mov	r6, r3
 800b0d4:	da0d      	bge.n	800b0f2 <__swhatbuf_r+0x2e>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0dc:	f04f 0100 	mov.w	r1, #0
 800b0e0:	bf14      	ite	ne
 800b0e2:	2340      	movne	r3, #64	@ 0x40
 800b0e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	6031      	str	r1, [r6, #0]
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	b016      	add	sp, #88	@ 0x58
 800b0f0:	bd70      	pop	{r4, r5, r6, pc}
 800b0f2:	466a      	mov	r2, sp
 800b0f4:	f000 f848 	bl	800b188 <_fstat_r>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	dbec      	blt.n	800b0d6 <__swhatbuf_r+0x12>
 800b0fc:	9901      	ldr	r1, [sp, #4]
 800b0fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b106:	4259      	negs	r1, r3
 800b108:	4159      	adcs	r1, r3
 800b10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b10e:	e7eb      	b.n	800b0e8 <__swhatbuf_r+0x24>

0800b110 <__smakebuf_r>:
 800b110:	898b      	ldrh	r3, [r1, #12]
 800b112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b114:	079d      	lsls	r5, r3, #30
 800b116:	4606      	mov	r6, r0
 800b118:	460c      	mov	r4, r1
 800b11a:	d507      	bpl.n	800b12c <__smakebuf_r+0x1c>
 800b11c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	6123      	str	r3, [r4, #16]
 800b124:	2301      	movs	r3, #1
 800b126:	6163      	str	r3, [r4, #20]
 800b128:	b003      	add	sp, #12
 800b12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b12c:	ab01      	add	r3, sp, #4
 800b12e:	466a      	mov	r2, sp
 800b130:	f7ff ffc8 	bl	800b0c4 <__swhatbuf_r>
 800b134:	9f00      	ldr	r7, [sp, #0]
 800b136:	4605      	mov	r5, r0
 800b138:	4639      	mov	r1, r7
 800b13a:	4630      	mov	r0, r6
 800b13c:	f7ff f9ce 	bl	800a4dc <_malloc_r>
 800b140:	b948      	cbnz	r0, 800b156 <__smakebuf_r+0x46>
 800b142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b146:	059a      	lsls	r2, r3, #22
 800b148:	d4ee      	bmi.n	800b128 <__smakebuf_r+0x18>
 800b14a:	f023 0303 	bic.w	r3, r3, #3
 800b14e:	f043 0302 	orr.w	r3, r3, #2
 800b152:	81a3      	strh	r3, [r4, #12]
 800b154:	e7e2      	b.n	800b11c <__smakebuf_r+0xc>
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	6020      	str	r0, [r4, #0]
 800b15a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b15e:	81a3      	strh	r3, [r4, #12]
 800b160:	9b01      	ldr	r3, [sp, #4]
 800b162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b166:	b15b      	cbz	r3, 800b180 <__smakebuf_r+0x70>
 800b168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 f81d 	bl	800b1ac <_isatty_r>
 800b172:	b128      	cbz	r0, 800b180 <__smakebuf_r+0x70>
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	81a3      	strh	r3, [r4, #12]
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	431d      	orrs	r5, r3
 800b184:	81a5      	strh	r5, [r4, #12]
 800b186:	e7cf      	b.n	800b128 <__smakebuf_r+0x18>

0800b188 <_fstat_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	4d07      	ldr	r5, [pc, #28]	@ (800b1a8 <_fstat_r+0x20>)
 800b18c:	2300      	movs	r3, #0
 800b18e:	4604      	mov	r4, r0
 800b190:	4608      	mov	r0, r1
 800b192:	4611      	mov	r1, r2
 800b194:	602b      	str	r3, [r5, #0]
 800b196:	f7f6 f9ad 	bl	80014f4 <_fstat>
 800b19a:	1c43      	adds	r3, r0, #1
 800b19c:	d102      	bne.n	800b1a4 <_fstat_r+0x1c>
 800b19e:	682b      	ldr	r3, [r5, #0]
 800b1a0:	b103      	cbz	r3, 800b1a4 <_fstat_r+0x1c>
 800b1a2:	6023      	str	r3, [r4, #0]
 800b1a4:	bd38      	pop	{r3, r4, r5, pc}
 800b1a6:	bf00      	nop
 800b1a8:	24000500 	.word	0x24000500

0800b1ac <_isatty_r>:
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	4d06      	ldr	r5, [pc, #24]	@ (800b1c8 <_isatty_r+0x1c>)
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	4608      	mov	r0, r1
 800b1b6:	602b      	str	r3, [r5, #0]
 800b1b8:	f7f6 f9ac 	bl	8001514 <_isatty>
 800b1bc:	1c43      	adds	r3, r0, #1
 800b1be:	d102      	bne.n	800b1c6 <_isatty_r+0x1a>
 800b1c0:	682b      	ldr	r3, [r5, #0]
 800b1c2:	b103      	cbz	r3, 800b1c6 <_isatty_r+0x1a>
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	bd38      	pop	{r3, r4, r5, pc}
 800b1c8:	24000500 	.word	0x24000500

0800b1cc <_sbrk_r>:
 800b1cc:	b538      	push	{r3, r4, r5, lr}
 800b1ce:	4d06      	ldr	r5, [pc, #24]	@ (800b1e8 <_sbrk_r+0x1c>)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	4608      	mov	r0, r1
 800b1d6:	602b      	str	r3, [r5, #0]
 800b1d8:	f7f6 f9b4 	bl	8001544 <_sbrk>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d102      	bne.n	800b1e6 <_sbrk_r+0x1a>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	b103      	cbz	r3, 800b1e6 <_sbrk_r+0x1a>
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	24000500 	.word	0x24000500

0800b1ec <__assert_func>:
 800b1ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1ee:	4614      	mov	r4, r2
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	4b09      	ldr	r3, [pc, #36]	@ (800b218 <__assert_func+0x2c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	68d8      	ldr	r0, [r3, #12]
 800b1fa:	b14c      	cbz	r4, 800b210 <__assert_func+0x24>
 800b1fc:	4b07      	ldr	r3, [pc, #28]	@ (800b21c <__assert_func+0x30>)
 800b1fe:	9100      	str	r1, [sp, #0]
 800b200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b204:	4906      	ldr	r1, [pc, #24]	@ (800b220 <__assert_func+0x34>)
 800b206:	462b      	mov	r3, r5
 800b208:	f000 f842 	bl	800b290 <fiprintf>
 800b20c:	f000 f852 	bl	800b2b4 <abort>
 800b210:	4b04      	ldr	r3, [pc, #16]	@ (800b224 <__assert_func+0x38>)
 800b212:	461c      	mov	r4, r3
 800b214:	e7f3      	b.n	800b1fe <__assert_func+0x12>
 800b216:	bf00      	nop
 800b218:	2400001c 	.word	0x2400001c
 800b21c:	0800b579 	.word	0x0800b579
 800b220:	0800b586 	.word	0x0800b586
 800b224:	0800b5b4 	.word	0x0800b5b4

0800b228 <_calloc_r>:
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	fba1 5402 	umull	r5, r4, r1, r2
 800b22e:	b934      	cbnz	r4, 800b23e <_calloc_r+0x16>
 800b230:	4629      	mov	r1, r5
 800b232:	f7ff f953 	bl	800a4dc <_malloc_r>
 800b236:	4606      	mov	r6, r0
 800b238:	b928      	cbnz	r0, 800b246 <_calloc_r+0x1e>
 800b23a:	4630      	mov	r0, r6
 800b23c:	bd70      	pop	{r4, r5, r6, pc}
 800b23e:	220c      	movs	r2, #12
 800b240:	6002      	str	r2, [r0, #0]
 800b242:	2600      	movs	r6, #0
 800b244:	e7f9      	b.n	800b23a <_calloc_r+0x12>
 800b246:	462a      	mov	r2, r5
 800b248:	4621      	mov	r1, r4
 800b24a:	f7fe fa5d 	bl	8009708 <memset>
 800b24e:	e7f4      	b.n	800b23a <_calloc_r+0x12>

0800b250 <__ascii_mbtowc>:
 800b250:	b082      	sub	sp, #8
 800b252:	b901      	cbnz	r1, 800b256 <__ascii_mbtowc+0x6>
 800b254:	a901      	add	r1, sp, #4
 800b256:	b142      	cbz	r2, 800b26a <__ascii_mbtowc+0x1a>
 800b258:	b14b      	cbz	r3, 800b26e <__ascii_mbtowc+0x1e>
 800b25a:	7813      	ldrb	r3, [r2, #0]
 800b25c:	600b      	str	r3, [r1, #0]
 800b25e:	7812      	ldrb	r2, [r2, #0]
 800b260:	1e10      	subs	r0, r2, #0
 800b262:	bf18      	it	ne
 800b264:	2001      	movne	r0, #1
 800b266:	b002      	add	sp, #8
 800b268:	4770      	bx	lr
 800b26a:	4610      	mov	r0, r2
 800b26c:	e7fb      	b.n	800b266 <__ascii_mbtowc+0x16>
 800b26e:	f06f 0001 	mvn.w	r0, #1
 800b272:	e7f8      	b.n	800b266 <__ascii_mbtowc+0x16>

0800b274 <__ascii_wctomb>:
 800b274:	4603      	mov	r3, r0
 800b276:	4608      	mov	r0, r1
 800b278:	b141      	cbz	r1, 800b28c <__ascii_wctomb+0x18>
 800b27a:	2aff      	cmp	r2, #255	@ 0xff
 800b27c:	d904      	bls.n	800b288 <__ascii_wctomb+0x14>
 800b27e:	228a      	movs	r2, #138	@ 0x8a
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	f04f 30ff 	mov.w	r0, #4294967295
 800b286:	4770      	bx	lr
 800b288:	700a      	strb	r2, [r1, #0]
 800b28a:	2001      	movs	r0, #1
 800b28c:	4770      	bx	lr
	...

0800b290 <fiprintf>:
 800b290:	b40e      	push	{r1, r2, r3}
 800b292:	b503      	push	{r0, r1, lr}
 800b294:	4601      	mov	r1, r0
 800b296:	ab03      	add	r3, sp, #12
 800b298:	4805      	ldr	r0, [pc, #20]	@ (800b2b0 <fiprintf+0x20>)
 800b29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b29e:	6800      	ldr	r0, [r0, #0]
 800b2a0:	9301      	str	r3, [sp, #4]
 800b2a2:	f7ff fd4b 	bl	800ad3c <_vfiprintf_r>
 800b2a6:	b002      	add	sp, #8
 800b2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2ac:	b003      	add	sp, #12
 800b2ae:	4770      	bx	lr
 800b2b0:	2400001c 	.word	0x2400001c

0800b2b4 <abort>:
 800b2b4:	b508      	push	{r3, lr}
 800b2b6:	2006      	movs	r0, #6
 800b2b8:	f000 f82c 	bl	800b314 <raise>
 800b2bc:	2001      	movs	r0, #1
 800b2be:	f7f6 f8c9 	bl	8001454 <_exit>

0800b2c2 <_raise_r>:
 800b2c2:	291f      	cmp	r1, #31
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	d904      	bls.n	800b2d6 <_raise_r+0x14>
 800b2cc:	2316      	movs	r3, #22
 800b2ce:	6003      	str	r3, [r0, #0]
 800b2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d4:	bd38      	pop	{r3, r4, r5, pc}
 800b2d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b2d8:	b112      	cbz	r2, 800b2e0 <_raise_r+0x1e>
 800b2da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2de:	b94b      	cbnz	r3, 800b2f4 <_raise_r+0x32>
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f000 f831 	bl	800b348 <_getpid_r>
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	4601      	mov	r1, r0
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2f0:	f000 b818 	b.w	800b324 <_kill_r>
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d00a      	beq.n	800b30e <_raise_r+0x4c>
 800b2f8:	1c59      	adds	r1, r3, #1
 800b2fa:	d103      	bne.n	800b304 <_raise_r+0x42>
 800b2fc:	2316      	movs	r3, #22
 800b2fe:	6003      	str	r3, [r0, #0]
 800b300:	2001      	movs	r0, #1
 800b302:	e7e7      	b.n	800b2d4 <_raise_r+0x12>
 800b304:	2100      	movs	r1, #0
 800b306:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b30a:	4620      	mov	r0, r4
 800b30c:	4798      	blx	r3
 800b30e:	2000      	movs	r0, #0
 800b310:	e7e0      	b.n	800b2d4 <_raise_r+0x12>
	...

0800b314 <raise>:
 800b314:	4b02      	ldr	r3, [pc, #8]	@ (800b320 <raise+0xc>)
 800b316:	4601      	mov	r1, r0
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	f7ff bfd2 	b.w	800b2c2 <_raise_r>
 800b31e:	bf00      	nop
 800b320:	2400001c 	.word	0x2400001c

0800b324 <_kill_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4d07      	ldr	r5, [pc, #28]	@ (800b344 <_kill_r+0x20>)
 800b328:	2300      	movs	r3, #0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	4611      	mov	r1, r2
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	f7f6 f87f 	bl	8001434 <_kill>
 800b336:	1c43      	adds	r3, r0, #1
 800b338:	d102      	bne.n	800b340 <_kill_r+0x1c>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	b103      	cbz	r3, 800b340 <_kill_r+0x1c>
 800b33e:	6023      	str	r3, [r4, #0]
 800b340:	bd38      	pop	{r3, r4, r5, pc}
 800b342:	bf00      	nop
 800b344:	24000500 	.word	0x24000500

0800b348 <_getpid_r>:
 800b348:	f7f6 b86c 	b.w	8001424 <_getpid>

0800b34c <_init>:
 800b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34e:	bf00      	nop
 800b350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b352:	bc08      	pop	{r3}
 800b354:	469e      	mov	lr, r3
 800b356:	4770      	bx	lr

0800b358 <_fini>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	bf00      	nop
 800b35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b35e:	bc08      	pop	{r3}
 800b360:	469e      	mov	lr, r3
 800b362:	4770      	bx	lr
