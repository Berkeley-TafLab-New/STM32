
STM32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de9c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  0800e170  0800e170  0000f170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea48  0800ea48  0000fa48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea50  0800ea50  0000fa50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ea54  0800ea54  0000fa54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  24000000  0800ea58  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008ec  240001f8  0800ec50  000101f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ae4  0800ec50  00010ae4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bf5e  00000000  00000000  00010226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035cf  00000000  00000000  0002c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001648  00000000  00000000  0002f758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001172  00000000  00000000  00030da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035883  00000000  00000000  00031f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f4e6  00000000  00000000  00067795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152088  00000000  00000000  00086c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d8d03  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f84  00000000  00000000  001d8d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001dfccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f8 	.word	0x240001f8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e154 	.word	0x0800e154

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001fc 	.word	0x240001fc
 800030c:	0800e154 	.word	0x0800e154

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <AS5600_read_angle>:
 */

#include "AS5600.h"
#include "stdint.h"

HAL_StatusTypeDef AS5600_read_angle(I2C_HandleTypeDef *hi2c, float *angle){
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af04      	add	r7, sp, #16
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    
    HAL_StatusTypeDef ret ;
    uint8_t angle_buff[2]; // hold the 2 bits from the Raw Angle 
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG, I2C_MEMADD_SIZE_8BIT,angle_buff,2,HAL_MAX_DELAY);//HAL_MAX_DELAY is blockling 
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	2302      	movs	r3, #2
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2301      	movs	r3, #1
 8000728:	220c      	movs	r2, #12
 800072a:	216c      	movs	r1, #108	@ 0x6c
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f003 ff01 	bl	8004534 <HAL_I2C_Mem_Read>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK){
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <AS5600_read_angle+0x38>
    	handle_error(ret);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f87e 	bl	8000840 <handle_error>
    }
    uint16_t raw_angle = (((angle_buff[0]<<8)|angle_buff[1])&0x0FFF);
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	b21b      	sxth	r3, r3
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	7a7b      	ldrb	r3, [r7, #9]
 800074e:	b21b      	sxth	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b21b      	sxth	r3, r3
 8000754:	b29b      	uxth	r3, r3
 8000756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800075a:	81bb      	strh	r3, [r7, #12]

    *angle = 360.0f*((float)raw_angle/4096.0f);
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000766:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000788 <AS5600_read_angle+0x7c>
 800076a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800078c <AS5600_read_angle+0x80>
 8000772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	45800000 	.word	0x45800000
 800078c:	43b40000 	.word	0x43b40000

08000790 <AS5600_config_ZPOS>:
    }
}



HAL_StatusTypeDef AS5600_config_ZPOS(I2C_HandleTypeDef *hi2c) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af04      	add	r7, sp, #16
 8000796:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t angle_buff;

    // Read current raw angle
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG,
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	461a      	mov	r2, r3
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	2302      	movs	r3, #2
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	220c      	movs	r2, #12
 80007ac:	216c      	movs	r1, #108	@ 0x6c
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f003 fec0 	bl	8004534 <HAL_I2C_Mem_Read>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73bb      	strb	r3, [r7, #14]
                          I2C_MEMADD_SIZE_8BIT, angle_buff, 2, HAL_MAX_DELAY);
    if (ret != HAL_OK) {
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <AS5600_config_ZPOS+0x3a>
        handle_error(ret);
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f83d 	bl	8000840 <handle_error>
        return ret;
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	e036      	b.n	8000838 <AS5600_config_ZPOS+0xa8>
    }

    // Extract 12-bit raw angle
    uint16_t raw_angle = ((angle_buff << 8) | angle_buff) & 0x0FFF;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	461a      	mov	r2, r3
 80007d0:	0212      	lsls	r2, r2, #8
 80007d2:	4413      	add	r3, r2
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007da:	81bb      	strh	r3, [r7, #12]

    // Split into ZPOS register values
    uint8_t zpos_data = {
        (uint8_t)((raw_angle >> 8) & 0x0F),  // High byte (4 bits)
 80007dc:	89bb      	ldrh	r3, [r7, #12]
 80007de:	0a1b      	lsrs	r3, r3, #8
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	b2db      	uxtb	r3, r3
    uint8_t zpos_data = {
 80007ea:	72fb      	strb	r3, [r7, #11]
        (uint8_t)(raw_angle & 0xFF)          // Low byte (8 bits)
    };

    // Write to ZPOS registers
    ret = HAL_I2C_Mem_Write(hi2c, (AS5600_ADRESS<<1), AS5600_ZPOS_HI_REG,
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295
 80007f0:	9302      	str	r3, [sp, #8]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	f107 030b 	add.w	r3, r7, #11
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2301      	movs	r3, #1
 80007fe:	2201      	movs	r2, #1
 8000800:	216c      	movs	r1, #108	@ 0x6c
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f003 fd82 	bl	800430c <HAL_I2C_Mem_Write>
 8000808:	4603      	mov	r3, r0
 800080a:	73bb      	strb	r3, [r7, #14]
                           I2C_MEMADD_SIZE_8BIT, &zpos_data, 1, HAL_MAX_DELAY);
    if (ret != HAL_OK) return ret;
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <AS5600_config_ZPOS+0x86>
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	e010      	b.n	8000838 <AS5600_config_ZPOS+0xa8>

    ret = HAL_I2C_Mem_Write(hi2c, (AS5600_ADRESS<<1), AS5600_ZPOS_LO_REG,
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	9302      	str	r3, [sp, #8]
 800081c:	2301      	movs	r3, #1
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	f107 030b 	add.w	r3, r7, #11
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2202      	movs	r2, #2
 800082a:	216c      	movs	r1, #108	@ 0x6c
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f003 fd6d 	bl	800430c <HAL_I2C_Mem_Write>
 8000832:	4603      	mov	r3, r0
 8000834:	73bb      	strb	r3, [r7, #14]
                           I2C_MEMADD_SIZE_8BIT, &zpos_data, 1, HAL_MAX_DELAY);
    return ret;
 8000836:	7bbb      	ldrb	r3, [r7, #14]

    }
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <handle_error>:





void handle_error(HAL_StatusTypeDef status) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d004      	beq.n	800085a <handle_error+0x1a>
        // Implement error handling logic (e.g., log error or reset I²C bus)
        printf("I2C Error: %d\n", status);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4619      	mov	r1, r3
 8000854:	4803      	ldr	r0, [pc, #12]	@ (8000864 <handle_error+0x24>)
 8000856:	f00b f9df 	bl	800bc18 <iprintf>
    }
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	0800e1b4 	.word	0x0800e1b4

08000868 <__io_putchar>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000870:	1d39      	adds	r1, r7, #4
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	2201      	movs	r2, #1
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <__io_putchar+0x20>)
 800087a:	f007 ffd9 	bl	8008830 <HAL_UART_Transmit>
     //HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1); //enable to get debug over STLINK

    return ch;
 800087e:	687b      	ldr	r3, [r7, #4]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000394 	.word	0x24000394

0800088c <System_Init>:
//uart interrupt ring buffer init
void System_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  // Initialize ring buffer
  ring_buffer_init(&uart_ring_buffer);
 8000890:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <System_Init+0x4c>)
 8000892:	f001 f8f5 	bl	8001a80 <ring_buffer_init>
  ring_buffer_init(&uart2_ring_buffer);
 8000896:	4811      	ldr	r0, [pc, #68]	@ (80008dc <System_Init+0x50>)
 8000898:	f001 f8f2 	bl	8001a80 <ring_buffer_init>

  // Start UART reception in interrupt mode
  HAL_UART_Receive_IT(&huart3, &rx_data_s, 1); // initialising Stlink interrupts
 800089c:	2201      	movs	r2, #1
 800089e:	4910      	ldr	r1, [pc, #64]	@ (80008e0 <System_Init+0x54>)
 80008a0:	4810      	ldr	r0, [pc, #64]	@ (80008e4 <System_Init+0x58>)
 80008a2:	f008 f853 	bl	800894c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data_uart2, 1); // initialising XBee interrupts
 80008a6:	2201      	movs	r2, #1
 80008a8:	490f      	ldr	r1, [pc, #60]	@ (80008e8 <System_Init+0x5c>)
 80008aa:	4810      	ldr	r0, [pc, #64]	@ (80008ec <System_Init+0x60>)
 80008ac:	f008 f84e 	bl	800894c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &ucRxData, 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	490f      	ldr	r1, [pc, #60]	@ (80008f0 <System_Init+0x64>)
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <System_Init+0x68>)
 80008b6:	f008 f849 	bl	800894c <HAL_UART_Receive_IT>

  //Start the rudder
  // Initialize rudder control
  rudder_init(&htim1, TIM_CHANNEL_2);
 80008ba:	2104      	movs	r1, #4
 80008bc:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <System_Init+0x6c>)
 80008be:	f001 f94d 	bl	8001b5c <rudder_init>

  // Set initial rudder position
  rudder_target_angle = rudder_straight;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <System_Init+0x70>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000900 <System_Init+0x74>)
 80008c8:	6013      	str	r3, [r2, #0]
  rudder_current_angle = rudder_straight;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <System_Init+0x70>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <System_Init+0x78>)
 80008d0:	6013      	str	r3, [r2, #0]

 }
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	240004c0 	.word	0x240004c0
 80008dc:	240005c4 	.word	0x240005c4
 80008e0:	240006c9 	.word	0x240006c9
 80008e4:	24000428 	.word	0x24000428
 80008e8:	240006c8 	.word	0x240006c8
 80008ec:	24000394 	.word	0x24000394
 80008f0:	240006ca 	.word	0x240006ca
 80008f4:	24000300 	.word	0x24000300
 80008f8:	24000268 	.word	0x24000268
 80008fc:	24000000 	.word	0x24000000
 8000900:	2400000c 	.word	0x2400000c
 8000904:	24000008 	.word	0x24000008

08000908 <HAL_UART_RxCpltCallback>:
 

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b092      	sub	sp, #72	@ 0x48
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]


  if(huart->Instance==USART1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4ab1      	ldr	r2, [pc, #708]	@ (8000bdc <HAL_UART_RxCpltCallback+0x2d4>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d109      	bne.n	800092e <HAL_UART_RxCpltCallback+0x26>
	   {
	       WitSerialDataIn(ucRxData);
 800091a:	4bb1      	ldr	r3, [pc, #708]	@ (8000be0 <HAL_UART_RxCpltCallback+0x2d8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f002 f858 	bl	80029d4 <WitSerialDataIn>
	       UART_Start_Receive_IT(huart, &ucRxData, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	49ae      	ldr	r1, [pc, #696]	@ (8000be0 <HAL_UART_RxCpltCallback+0x2d8>)
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f009 fc77 	bl	800a21c <UART_Start_Receive_IT>
	   }


  if (huart->Instance == USART3) { // Ensure this is for the correct UART instance
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4aac      	ldr	r2, [pc, #688]	@ (8000be4 <HAL_UART_RxCpltCallback+0x2dc>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d161      	bne.n	80009fc <HAL_UART_RxCpltCallback+0xf4>
      // Add received byte to the ring buffer
      ring_buffer_put(&uart_ring_buffer, rx_data_s);
 8000938:	4bab      	ldr	r3, [pc, #684]	@ (8000be8 <HAL_UART_RxCpltCallback+0x2e0>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	48ab      	ldr	r0, [pc, #684]	@ (8000bec <HAL_UART_RxCpltCallback+0x2e4>)
 8000940:	f001 f8b0 	bl	8001aa4 <ring_buffer_put>

      // Check if we received a carriage return '\r' (end of command)
      if (rx_data_s == '\r') {
 8000944:	4ba8      	ldr	r3, [pc, #672]	@ (8000be8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b0d      	cmp	r3, #13
 800094a:	d152      	bne.n	80009f2 <HAL_UART_RxCpltCallback+0xea>
          uint8_t data;
          uint16_t index = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
          // Extract the command from the ring buffer
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000952:	e009      	b.n	8000968 <HAL_UART_RxCpltCallback+0x60>
              command_buffer[index++] = (char)data;
 8000954:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 800095e:	461a      	mov	r2, r3
 8000960:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8000964:	4ba2      	ldr	r3, [pc, #648]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000966:	5499      	strb	r1, [r3, r2]
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000968:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800096c:	4619      	mov	r1, r3
 800096e:	489f      	ldr	r0, [pc, #636]	@ (8000bec <HAL_UART_RxCpltCallback+0x2e4>)
 8000970:	f001 f8c5 	bl	8001afe <ring_buffer_get>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d007      	beq.n	800098a <HAL_UART_RxCpltCallback+0x82>
 800097a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800097e:	2b0d      	cmp	r3, #13
 8000980:	d003      	beq.n	800098a <HAL_UART_RxCpltCallback+0x82>
 8000982:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000986:	2b3e      	cmp	r3, #62	@ 0x3e
 8000988:	d9e4      	bls.n	8000954 <HAL_UART_RxCpltCallback+0x4c>
          }
          command_buffer[index] = '\0'; // Null-terminate the string
 800098a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800098e:	4a98      	ldr	r2, [pc, #608]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000990:	2100      	movs	r1, #0
 8000992:	54d1      	strb	r1, [r2, r3]
          // Process the command
          const char *response;
          if (strcmp(command_buffer, "hello") == 0) {
 8000994:	4997      	ldr	r1, [pc, #604]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000996:	4896      	ldr	r0, [pc, #600]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000998:	f7ff fcba 	bl	8000310 <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <HAL_UART_RxCpltCallback+0xa0>
              response = "Hello to you too!\n";
 80009a2:	4b95      	ldr	r3, [pc, #596]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2f0>)
 80009a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80009a6:	e014      	b.n	80009d2 <HAL_UART_RxCpltCallback+0xca>
          } else if (strcmp(command_buffer, "setzerouart") == 0) {
 80009a8:	4994      	ldr	r1, [pc, #592]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2f4>)
 80009aa:	4891      	ldr	r0, [pc, #580]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2e8>)
 80009ac:	f7ff fcb0 	bl	8000310 <strcmp>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10b      	bne.n	80009ce <HAL_UART_RxCpltCallback+0xc6>
              if (AS5600_config_ZPOS(&hi2c1) == HAL_OK) {
 80009b6:	4892      	ldr	r0, [pc, #584]	@ (8000c00 <HAL_UART_RxCpltCallback+0x2f8>)
 80009b8:	f7ff feea 	bl	8000790 <AS5600_config_ZPOS>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d102      	bne.n	80009c8 <HAL_UART_RxCpltCallback+0xc0>
                  response = "ZPOS set successfully.\n";
 80009c2:	4b90      	ldr	r3, [pc, #576]	@ (8000c04 <HAL_UART_RxCpltCallback+0x2fc>)
 80009c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80009c6:	e004      	b.n	80009d2 <HAL_UART_RxCpltCallback+0xca>
              } else {
                  response = "Failed to set ZPOS.\n";
 80009c8:	4b8f      	ldr	r3, [pc, #572]	@ (8000c08 <HAL_UART_RxCpltCallback+0x300>)
 80009ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80009cc:	e001      	b.n	80009d2 <HAL_UART_RxCpltCallback+0xca>
              }
          } else {
              response = "Uh oh, something didn't work...\n";
 80009ce:	4b8f      	ldr	r3, [pc, #572]	@ (8000c0c <HAL_UART_RxCpltCallback+0x304>)
 80009d0:	643b      	str	r3, [r7, #64]	@ 0x40
          }
          // Transmit the response
          HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 80009d2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80009d4:	f7ff fcfc 	bl	80003d0 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29a      	uxth	r2, r3
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80009e2:	488b      	ldr	r0, [pc, #556]	@ (8000c10 <HAL_UART_RxCpltCallback+0x308>)
 80009e4:	f007 ff24 	bl	8008830 <HAL_UART_Transmit>
          // Clear the command buffer for reuse
          memset(command_buffer, 0, COMMAND_MAX_LENGTH);
 80009e8:	2240      	movs	r2, #64	@ 0x40
 80009ea:	2100      	movs	r1, #0
 80009ec:	4880      	ldr	r0, [pc, #512]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2e8>)
 80009ee:	f00b fa85 	bl	800befc <memset>
      }
      // Re-enable UART interrupt for next byte reception
      HAL_UART_Receive_IT(&huart3, &rx_data_s, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	497c      	ldr	r1, [pc, #496]	@ (8000be8 <HAL_UART_RxCpltCallback+0x2e0>)
 80009f6:	4886      	ldr	r0, [pc, #536]	@ (8000c10 <HAL_UART_RxCpltCallback+0x308>)
 80009f8:	f007 ffa8 	bl	800894c <HAL_UART_Receive_IT>
  }
    
  if (huart->Instance == USART2) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a84      	ldr	r2, [pc, #528]	@ (8000c14 <HAL_UART_RxCpltCallback+0x30c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	f040 80e5 	bne.w	8000bd2 <HAL_UART_RxCpltCallback+0x2ca>
    ring_buffer_put(&uart2_ring_buffer, rx_data_uart2);
 8000a08:	4b83      	ldr	r3, [pc, #524]	@ (8000c18 <HAL_UART_RxCpltCallback+0x310>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4883      	ldr	r0, [pc, #524]	@ (8000c1c <HAL_UART_RxCpltCallback+0x314>)
 8000a10:	f001 f848 	bl	8001aa4 <ring_buffer_put>



    //adding manual rudder controls

    if (rx_data_uart2 == '[') {
 8000a14:	4b80      	ldr	r3, [pc, #512]	@ (8000c18 <HAL_UART_RxCpltCallback+0x310>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b5b      	cmp	r3, #91	@ 0x5b
 8000a1a:	d13e      	bne.n	8000a9a <HAL_UART_RxCpltCallback+0x192>
            // Move rudder left
            rudder_target_angle -= 5.0f;
 8000a1c:	4b80      	ldr	r3, [pc, #512]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000a1e:	edd3 7a00 	vldr	s15, [r3]
 8000a22:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000a2c:	edc3 7a00 	vstr	s15, [r3]
            if (rudder_target_angle < (rudder_straight - rudder_range))
 8000a30:	4b7c      	ldr	r3, [pc, #496]	@ (8000c24 <HAL_UART_RxCpltCallback+0x31c>)
 8000a32:	ed93 7a00 	vldr	s14, [r3]
 8000a36:	4b7c      	ldr	r3, [pc, #496]	@ (8000c28 <HAL_UART_RxCpltCallback+0x320>)
 8000a38:	edd3 7a00 	vldr	s15, [r3]
 8000a3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a40:	4b77      	ldr	r3, [pc, #476]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000a42:	edd3 7a00 	vldr	s15, [r3]
 8000a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4e:	dd0a      	ble.n	8000a66 <HAL_UART_RxCpltCallback+0x15e>
                rudder_target_angle = rudder_straight - rudder_range;
 8000a50:	4b74      	ldr	r3, [pc, #464]	@ (8000c24 <HAL_UART_RxCpltCallback+0x31c>)
 8000a52:	ed93 7a00 	vldr	s14, [r3]
 8000a56:	4b74      	ldr	r3, [pc, #464]	@ (8000c28 <HAL_UART_RxCpltCallback+0x320>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a60:	4b6f      	ldr	r3, [pc, #444]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000a62:	edc3 7a00 	vstr	s15, [r3]

            char response[40];
            sprintf(response, "Rudder LEFT: %.1f degrees\r\n", rudder_target_angle);
 8000a66:	4b6e      	ldr	r3, [pc, #440]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000a68:	edd3 7a00 	vldr	s15, [r3]
 8000a6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a70:	f107 000c 	add.w	r0, r7, #12
 8000a74:	ec53 2b17 	vmov	r2, r3, d7
 8000a78:	496c      	ldr	r1, [pc, #432]	@ (8000c2c <HAL_UART_RxCpltCallback+0x324>)
 8000a7a:	f00b f945 	bl	800bd08 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), 100);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fca4 	bl	80003d0 <strlen>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	f107 010c 	add.w	r1, r7, #12
 8000a90:	2364      	movs	r3, #100	@ 0x64
 8000a92:	4867      	ldr	r0, [pc, #412]	@ (8000c30 <HAL_UART_RxCpltCallback+0x328>)
 8000a94:	f007 fecc 	bl	8008830 <HAL_UART_Transmit>
 8000a98:	e041      	b.n	8000b1e <HAL_UART_RxCpltCallback+0x216>

        }
        else if (rx_data_uart2 == ']') {
 8000a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8000c18 <HAL_UART_RxCpltCallback+0x310>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b5d      	cmp	r3, #93	@ 0x5d
 8000aa0:	d13d      	bne.n	8000b1e <HAL_UART_RxCpltCallback+0x216>
            // Move rudder right
            rudder_target_angle += 5.0f;
 8000aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000aa4:	edd3 7a00 	vldr	s15, [r3]
 8000aa8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000aac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000ab2:	edc3 7a00 	vstr	s15, [r3]
            if (rudder_target_angle > (rudder_straight + rudder_range))
 8000ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8000c24 <HAL_UART_RxCpltCallback+0x31c>)
 8000ab8:	ed93 7a00 	vldr	s14, [r3]
 8000abc:	4b5a      	ldr	r3, [pc, #360]	@ (8000c28 <HAL_UART_RxCpltCallback+0x320>)
 8000abe:	edd3 7a00 	vldr	s15, [r3]
 8000ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ac6:	4b56      	ldr	r3, [pc, #344]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000ac8:	edd3 7a00 	vldr	s15, [r3]
 8000acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad4:	d50a      	bpl.n	8000aec <HAL_UART_RxCpltCallback+0x1e4>
                rudder_target_angle = rudder_straight + rudder_range;
 8000ad6:	4b53      	ldr	r3, [pc, #332]	@ (8000c24 <HAL_UART_RxCpltCallback+0x31c>)
 8000ad8:	ed93 7a00 	vldr	s14, [r3]
 8000adc:	4b52      	ldr	r3, [pc, #328]	@ (8000c28 <HAL_UART_RxCpltCallback+0x320>)
 8000ade:	edd3 7a00 	vldr	s15, [r3]
 8000ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000ae8:	edc3 7a00 	vstr	s15, [r3]

            char response[40];
            sprintf(response, "Rudder RIGHT: %.1f degrees\r\n", rudder_target_angle);
 8000aec:	4b4c      	ldr	r3, [pc, #304]	@ (8000c20 <HAL_UART_RxCpltCallback+0x318>)
 8000aee:	edd3 7a00 	vldr	s15, [r3]
 8000af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af6:	f107 000c 	add.w	r0, r7, #12
 8000afa:	ec53 2b17 	vmov	r2, r3, d7
 8000afe:	494d      	ldr	r1, [pc, #308]	@ (8000c34 <HAL_UART_RxCpltCallback+0x32c>)
 8000b00:	f00b f902 	bl	800bd08 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), 100);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fc61 	bl	80003d0 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f107 010c 	add.w	r1, r7, #12
 8000b16:	2364      	movs	r3, #100	@ 0x64
 8000b18:	4845      	ldr	r0, [pc, #276]	@ (8000c30 <HAL_UART_RxCpltCallback+0x328>)
 8000b1a:	f007 fe89 	bl	8008830 <HAL_UART_Transmit>
        }

    if (rx_data_uart2 == '\r') {
 8000b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c18 <HAL_UART_RxCpltCallback+0x310>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b0d      	cmp	r3, #13
 8000b24:	d150      	bne.n	8000bc8 <HAL_UART_RxCpltCallback+0x2c0>
        uint8_t data;
        uint16_t index = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        while (ring_buffer_get(&uart2_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000b2a:	e007      	b.n	8000b3c <HAL_UART_RxCpltCallback+0x234>
            command_buffer_xbee[index++] = (char)data;
 8000b2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8000b32:	461a      	mov	r2, r3
 8000b34:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8000b38:	4b3f      	ldr	r3, [pc, #252]	@ (8000c38 <HAL_UART_RxCpltCallback+0x330>)
 8000b3a:	5499      	strb	r1, [r3, r2]
        while (ring_buffer_get(&uart2_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000b3c:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8000b40:	4619      	mov	r1, r3
 8000b42:	4836      	ldr	r0, [pc, #216]	@ (8000c1c <HAL_UART_RxCpltCallback+0x314>)
 8000b44:	f000 ffdb 	bl	8001afe <ring_buffer_get>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <HAL_UART_RxCpltCallback+0x254>
 8000b4e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000b52:	2b0d      	cmp	r3, #13
 8000b54:	d002      	beq.n	8000b5c <HAL_UART_RxCpltCallback+0x254>
 8000b56:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000b58:	2b3e      	cmp	r3, #62	@ 0x3e
 8000b5a:	d9e7      	bls.n	8000b2c <HAL_UART_RxCpltCallback+0x224>
        }
        command_buffer_xbee[index] = '\0';
 8000b5c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000b5e:	4a36      	ldr	r2, [pc, #216]	@ (8000c38 <HAL_UART_RxCpltCallback+0x330>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	54d1      	strb	r1, [r2, r3]

        const char *response;
        if (strcmp(command_buffer_xbee, "hello") == 0) {
 8000b64:	4923      	ldr	r1, [pc, #140]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000b66:	4834      	ldr	r0, [pc, #208]	@ (8000c38 <HAL_UART_RxCpltCallback+0x330>)
 8000b68:	f7ff fbd2 	bl	8000310 <strcmp>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d102      	bne.n	8000b78 <HAL_UART_RxCpltCallback+0x270>
            response = "Hello to you Xbee!\n";
 8000b72:	4b32      	ldr	r3, [pc, #200]	@ (8000c3c <HAL_UART_RxCpltCallback+0x334>)
 8000b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b76:	e014      	b.n	8000ba2 <HAL_UART_RxCpltCallback+0x29a>
        } else if (strcmp(command_buffer_xbee, "setzero") == 0) { // make it a switch case
 8000b78:	4931      	ldr	r1, [pc, #196]	@ (8000c40 <HAL_UART_RxCpltCallback+0x338>)
 8000b7a:	482f      	ldr	r0, [pc, #188]	@ (8000c38 <HAL_UART_RxCpltCallback+0x330>)
 8000b7c:	f7ff fbc8 	bl	8000310 <strcmp>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d10b      	bne.n	8000b9e <HAL_UART_RxCpltCallback+0x296>
            if (AS5600_config_ZPOS(&hi2c1) == HAL_OK) {
 8000b86:	481e      	ldr	r0, [pc, #120]	@ (8000c00 <HAL_UART_RxCpltCallback+0x2f8>)
 8000b88:	f7ff fe02 	bl	8000790 <AS5600_config_ZPOS>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <HAL_UART_RxCpltCallback+0x290>
                response = "ZPOS set successfully via xbee.\n";
 8000b92:	4b2c      	ldr	r3, [pc, #176]	@ (8000c44 <HAL_UART_RxCpltCallback+0x33c>)
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b96:	e004      	b.n	8000ba2 <HAL_UART_RxCpltCallback+0x29a>
            } else {
                response = "Failed to set ZPOS via Xbee.\n";
 8000b98:	4b2b      	ldr	r3, [pc, #172]	@ (8000c48 <HAL_UART_RxCpltCallback+0x340>)
 8000b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b9c:	e001      	b.n	8000ba2 <HAL_UART_RxCpltCallback+0x29a>
            }
        } else {
            response = "Unrecognized command from XBee\n";
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c4c <HAL_UART_RxCpltCallback+0x344>)
 8000ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000ba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000ba4:	f7ff fc14 	bl	80003d0 <strlen>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000bb2:	481f      	ldr	r0, [pc, #124]	@ (8000c30 <HAL_UART_RxCpltCallback+0x328>)
 8000bb4:	f007 fe3c 	bl	8008830 <HAL_UART_Transmit>
        printf(response);
 8000bb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000bba:	f00b f82d 	bl	800bc18 <iprintf>
        memset(command_buffer_xbee, 0, COMMAND_MAX_LENGTH);
 8000bbe:	2240      	movs	r2, #64	@ 0x40
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	481d      	ldr	r0, [pc, #116]	@ (8000c38 <HAL_UART_RxCpltCallback+0x330>)
 8000bc4:	f00b f99a 	bl	800befc <memset>
    }


    //HAL_UART_Receive_IT(&huart2, &rx_data_uart2, 1); // Restart interrupt
    UART_Start_Receive_IT(huart, &rx_data_uart2, 1);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4913      	ldr	r1, [pc, #76]	@ (8000c18 <HAL_UART_RxCpltCallback+0x310>)
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f009 fb25 	bl	800a21c <UART_Start_Receive_IT>

  }


 }
 8000bd2:	bf00      	nop
 8000bd4:	3748      	adds	r7, #72	@ 0x48
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	240006ca 	.word	0x240006ca
 8000be4:	40004800 	.word	0x40004800
 8000be8:	240006c9 	.word	0x240006c9
 8000bec:	240004c0 	.word	0x240004c0
 8000bf0:	240006cc 	.word	0x240006cc
 8000bf4:	0800e1c4 	.word	0x0800e1c4
 8000bf8:	0800e1cc 	.word	0x0800e1cc
 8000bfc:	0800e1e0 	.word	0x0800e1e0
 8000c00:	24000214 	.word	0x24000214
 8000c04:	0800e1ec 	.word	0x0800e1ec
 8000c08:	0800e204 	.word	0x0800e204
 8000c0c:	0800e21c 	.word	0x0800e21c
 8000c10:	24000428 	.word	0x24000428
 8000c14:	40004400 	.word	0x40004400
 8000c18:	240006c8 	.word	0x240006c8
 8000c1c:	240005c4 	.word	0x240005c4
 8000c20:	2400000c 	.word	0x2400000c
 8000c24:	24000000 	.word	0x24000000
 8000c28:	24000004 	.word	0x24000004
 8000c2c:	0800e240 	.word	0x0800e240
 8000c30:	24000394 	.word	0x24000394
 8000c34:	0800e25c 	.word	0x0800e25c
 8000c38:	2400070c 	.word	0x2400070c
 8000c3c:	0800e27c 	.word	0x0800e27c
 8000c40:	0800e290 	.word	0x0800e290
 8000c44:	0800e298 	.word	0x0800e298
 8000c48:	0800e2bc 	.word	0x0800e2bc
 8000c4c:	0800e2dc 	.word	0x0800e2dc

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b0ad      	sub	sp, #180	@ 0xb4
 8000c54:	af06      	add	r7, sp, #24
  float fAcc[3], fGyro[3], fAngle[3], fYaw;
  int i;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c56:	f000 fee1 	bl	8001a1c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5a:	f002 f957 	bl	8002f0c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5e:	f000 faab 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c62:	f000 fd21 	bl	80016a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c66:	f000 fb45 	bl	80012f4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000c6a:	f000 fcd1 	bl	8001610 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000c6e:	f000 fc83 	bl	8001578 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c72:	f000 faff 	bl	8001274 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c76:	f000 fc33 	bl	80014e0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c7a:	f000 fbd7 	bl	800142c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  WitInit(WIT_PROTOCOL_NORMAL, 0x50);
 8000c7e:	2150      	movs	r1, #80	@ 0x50
 8000c80:	2000      	movs	r0, #0
 8000c82:	f002 f8f5 	bl	8002e70 <WitInit>
  WitSerialWriteRegister(SensorUartSend);
 8000c86:	482c      	ldr	r0, [pc, #176]	@ (8000d38 <main+0xe8>)
 8000c88:	f001 fde8 	bl	800285c <WitSerialWriteRegister>
  WitRegisterCallBack(CopeSensorData);
 8000c8c:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <main+0xec>)
 8000c8e:	f001 ffcf 	bl	8002c30 <WitRegisterCallBack>

  System_Init();
 8000c92:	f7ff fdfb 	bl	800088c <System_Init>
  AutoScanSensor();
 8000c96:	f000 fe6b 	bl	8001970 <AutoScanSensor>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//sail
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4828      	ldr	r0, [pc, #160]	@ (8000d40 <main+0xf0>)
 8000c9e:	f006 fe77 	bl	8007990 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//rudder
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4827      	ldr	r0, [pc, #156]	@ (8000d44 <main+0xf4>)
 8000ca6:	f006 fe73 	bl	8007990 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//propeller
 8000caa:	2104      	movs	r1, #4
 8000cac:	4824      	ldr	r0, [pc, #144]	@ (8000d40 <main+0xf0>)
 8000cae:	f006 fe6f 	bl	8007990 <HAL_TIM_PWM_Start>


  float angle;
  char str[] = "System Booted";
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <main+0xf8>)
 8000cb4:	f107 0414 	add.w	r4, r7, #20
 8000cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cba:	c407      	stmia	r4!, {r0, r1, r2}
 8000cbc:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 2000);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fb84 	bl	80003d0 <strlen>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	f107 0114 	add.w	r1, r7, #20
 8000cd0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cd4:	481d      	ldr	r0, [pc, #116]	@ (8000d4c <main+0xfc>)
 8000cd6:	f007 fdab 	bl	8008830 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000cda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cde:	f002 f9a7 	bl	8003030 <HAL_Delay>
  ServoController sail_servo;
  sail_servo.htim= &htim1;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <main+0xf0>)
 8000ce4:	60fb      	str	r3, [r7, #12]
  sail_servo.channel = TIM_CHANNEL_1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef i2c_status = AS5600_read_angle(&hi2c1, &angle);
 8000cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4817      	ldr	r0, [pc, #92]	@ (8000d50 <main+0x100>)
 8000cf2:	f7ff fd0b 	bl	800070c <AS5600_read_angle>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	  if (i2c_status== HAL_OK){
		 // printf("the angle is %f \n", angle);
	  }
	  
	  if (i2c_status != HAL_OK) {
 8000cfc:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <main+0xbc>
	      printf("Error reading angle from AS5600\n");
 8000d04:	4813      	ldr	r0, [pc, #76]	@ (8000d54 <main+0x104>)
 8000d06:	f00a fff7 	bl	800bcf8 <puts>
	      continue; // Skip to the next iteration
 8000d0a:	e24b      	b.n	80011a4 <main+0x554>
	  }
    
	  copy_wind_pos(&sail_servo, angle);
 8000d0c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 f90a 	bl	8001f30 <copy_wind_pos>
	  rudder_move_to();
 8000d1c:	f000 ff34 	bl	8001b88 <rudder_move_to>

    if(s_cDataUpdate)
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <main+0x108>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0e0      	beq.n	8000cea <main+0x9a>
    		{
    			printf("3");
 8000d28:	2033      	movs	r0, #51	@ 0x33
 8000d2a:	f00a ff87 	bl	800bc3c <putchar>
            // Assumes AX, AY, AZ are sequential registers starting at AX
            // Assumes GX, GY, GZ are sequential registers starting at GX
            // Assumes Roll, Pitch, Yaw are sequential registers starting at Roll
    			for(i = 0; i < 3; i++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d34:	e065      	b.n	8000e02 <main+0x1b2>
 8000d36:	bf00      	nop
 8000d38:	08001815 	.word	0x08001815
 8000d3c:	0800183d 	.word	0x0800183d
 8000d40:	24000268 	.word	0x24000268
 8000d44:	240002b4 	.word	0x240002b4
 8000d48:	0800e400 	.word	0x0800e400
 8000d4c:	24000428 	.word	0x24000428
 8000d50:	24000214 	.word	0x24000214
 8000d54:	0800e2fc 	.word	0x0800e2fc
 8000d58:	240004bc 	.word	0x240004bc
    			{
    				fAcc[i] = sReg[AX+i] / 32768.0f * 16.0f;
 8000d5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d60:	3334      	adds	r3, #52	@ 0x34
 8000d62:	4adc      	ldr	r2, [pc, #880]	@ (80010d4 <main+0x484>)
 8000d64:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d70:	eddf 6ad9 	vldr	s13, [pc, #868]	@ 80010d8 <main+0x488>
 8000d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d78:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	3398      	adds	r3, #152	@ 0x98
 8000d88:	443b      	add	r3, r7
 8000d8a:	3b58      	subs	r3, #88	@ 0x58
 8000d8c:	edc3 7a00 	vstr	s15, [r3]
    				fGyro[i] = sReg[GX+i] / 32768.0f * 2000.0f;
 8000d90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d94:	3337      	adds	r3, #55	@ 0x37
 8000d96:	4acf      	ldr	r2, [pc, #828]	@ (80010d4 <main+0x484>)
 8000d98:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da4:	eddf 6acc 	vldr	s13, [pc, #816]	@ 80010d8 <main+0x488>
 8000da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dac:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 80010dc <main+0x48c>
 8000db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	3398      	adds	r3, #152	@ 0x98
 8000dbc:	443b      	add	r3, r7
 8000dbe:	3b64      	subs	r3, #100	@ 0x64
 8000dc0:	edc3 7a00 	vstr	s15, [r3]
    				fAngle[i] = sReg[Roll+i] / 32768.0f * 180.0f;
 8000dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dc8:	333d      	adds	r3, #61	@ 0x3d
 8000dca:	4ac2      	ldr	r2, [pc, #776]	@ (80010d4 <main+0x484>)
 8000dcc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd8:	eddf 6abf 	vldr	s13, [pc, #764]	@ 80010d8 <main+0x488>
 8000ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de0:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 80010e0 <main+0x490>
 8000de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	3398      	adds	r3, #152	@ 0x98
 8000df0:	443b      	add	r3, r7
 8000df2:	3b70      	subs	r3, #112	@ 0x70
 8000df4:	edc3 7a00 	vstr	s15, [r3]
    			for(i = 0; i < 3; i++)
 8000df8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	dda8      	ble.n	8000d5c <main+0x10c>
				// Use int32_t for intermediate signed 32-bit values
				// Use uint16_t cast for low words when combining to avoid sign extension issues
				// Use float for final calculated values

				// Longitude & Latitude Calculation
				int32_t iLon = ((int32_t)(short)sReg[LonH] << 16) | (uint16_t)sReg[LonL];
 8000e0a:	4bb2      	ldr	r3, [pc, #712]	@ (80010d4 <main+0x484>)
 8000e0c:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8000e10:	041b      	lsls	r3, r3, #16
 8000e12:	4ab0      	ldr	r2, [pc, #704]	@ (80010d4 <main+0x484>)
 8000e14:	f9b2 2092 	ldrsh.w	r2, [r2, #146]	@ 0x92
 8000e18:	b292      	uxth	r2, r2
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				int32_t iLat = ((int32_t)(short)sReg[LatH] << 16) | (uint16_t)sReg[LatL];
 8000e20:	4bac      	ldr	r3, [pc, #688]	@ (80010d4 <main+0x484>)
 8000e22:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	4aaa      	ldr	r2, [pc, #680]	@ (80010d4 <main+0x484>)
 8000e2a:	f9b2 2096 	ldrsh.w	r2, [r2, #150]	@ 0x96
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	4313      	orrs	r3, r2
 8000e32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

				// Convert from ddmm.mmmmm format (scaled by 100000) to decimal degrees
				float fLon_deg = (float)(iLon / 10000000); // Extract degrees (dd)
 8000e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e3a:	4aaa      	ldr	r2, [pc, #680]	@ (80010e4 <main+0x494>)
 8000e3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e40:	1592      	asrs	r2, r2, #22
 8000e42:	17db      	asrs	r3, r3, #31
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	ee07 3a90 	vmov	s15, r3
 8000e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
				float fLon_min = (float)((iLon % 10000000) / 100000.0f); // Extract minutes (mm.mmmmm)
 8000e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e56:	4aa3      	ldr	r2, [pc, #652]	@ (80010e4 <main+0x494>)
 8000e58:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5c:	1591      	asrs	r1, r2, #22
 8000e5e:	17da      	asrs	r2, r3, #31
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	49a1      	ldr	r1, [pc, #644]	@ (80010e8 <main+0x498>)
 8000e64:	fb01 f202 	mul.w	r2, r1, r2
 8000e68:	1a9a      	subs	r2, r3, r2
 8000e6a:	ee07 2a90 	vmov	s15, r2
 8000e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e72:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80010ec <main+0x49c>
 8000e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e7a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
				float fLongitude = fLon_deg + fLon_min / 60.0f;
 8000e7e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8000e82:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 80010f0 <main+0x4a0>
 8000e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e8a:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8000e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e92:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

				float fLat_deg = (float)(iLat / 10000000); // Extract degrees (dd)
 8000e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000e9a:	4a92      	ldr	r2, [pc, #584]	@ (80010e4 <main+0x494>)
 8000e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea0:	1592      	asrs	r2, r2, #22
 8000ea2:	17db      	asrs	r3, r3, #31
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eae:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
				float fLat_min = (float)((iLat % 10000000) / 100000.0f); // Extract minutes (mm.mmmmm)
 8000eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000eb6:	4a8b      	ldr	r2, [pc, #556]	@ (80010e4 <main+0x494>)
 8000eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebc:	1591      	asrs	r1, r2, #22
 8000ebe:	17da      	asrs	r2, r3, #31
 8000ec0:	1a8a      	subs	r2, r1, r2
 8000ec2:	4989      	ldr	r1, [pc, #548]	@ (80010e8 <main+0x498>)
 8000ec4:	fb01 f202 	mul.w	r2, r1, r2
 8000ec8:	1a9a      	subs	r2, r3, r2
 8000eca:	ee07 2a90 	vmov	s15, r2
 8000ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed2:	eddf 6a86 	vldr	s13, [pc, #536]	@ 80010ec <main+0x49c>
 8000ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eda:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
				float fLatitude = fLat_deg + fLat_min / 60.0f;
 8000ede:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000ee2:	eddf 6a83 	vldr	s13, [pc, #524]	@ 80010f0 <main+0x4a0>
 8000ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eea:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8000eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

				// GPS Altitude (m)
				float fGpsAltitude = (float)(short)sReg[GPSHeight] / 10.0f;
 8000ef6:	4b77      	ldr	r3, [pc, #476]	@ (80010d4 <main+0x484>)
 8000ef8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f04:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

				// GPS Heading/Course (°). Note: This is course over ground, not magnetic heading.
				float fGpsCourse = (float)(short)sReg[GPSYAW] / 100.0f;
 8000f10:	4b70      	ldr	r3, [pc, #448]	@ (80010d4 <main+0x484>)
 8000f12:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1e:	eddf 6a75 	vldr	s13, [pc, #468]	@ 80010f4 <main+0x4a4>
 8000f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f26:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

				// GPS Ground Speed (km/h)
				int32_t iGpsSpeed = ((int32_t)(short)sReg[GPSVH] << 16) | (uint16_t)sReg[GPSVL];
 8000f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80010d4 <main+0x484>)
 8000f2c:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	4a68      	ldr	r2, [pc, #416]	@ (80010d4 <main+0x484>)
 8000f34:	f9b2 209e 	ldrsh.w	r2, [r2, #158]	@ 0x9e
 8000f38:	b292      	uxth	r2, r2
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	667b      	str	r3, [r7, #100]	@ 0x64
				float fGpsSpeed_kmh = (float)iGpsSpeed / 1000.0f;
 8000f3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f48:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80010f8 <main+0x4a8>
 8000f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f50:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

				// Satellite Info & Accuracy Metrics
				int iSatellites = (uint16_t)sReg[SVNUM]; // Number of satellites is likely unsigned
 8000f54:	4b5f      	ldr	r3, [pc, #380]	@ (80010d4 <main+0x484>)
 8000f56:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				float fPDOP = (float)(short)sReg[PDOP] / 100.0f;
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80010d4 <main+0x484>)
 8000f60:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6c:	eddf 6a61 	vldr	s13, [pc, #388]	@ 80010f4 <main+0x4a4>
 8000f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f74:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
				float fHDOP = (float)(short)sReg[HDOP] / 100.0f;
 8000f78:	4b56      	ldr	r3, [pc, #344]	@ (80010d4 <main+0x484>)
 8000f7a:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f86:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80010f4 <main+0x4a4>
 8000f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
				float fVDOP = (float)(short)sReg[VDOP] / 100.0f;
 8000f92:	4b50      	ldr	r3, [pc, #320]	@ (80010d4 <main+0x484>)
 8000f94:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa0:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80010f4 <main+0x4a4>
 8000fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50


    			if(s_cDataUpdate & ACC_UPDATE)
 8000fac:	4b53      	ldr	r3, [pc, #332]	@ (80010fc <main+0x4ac>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01b      	beq.n	8000ff0 <main+0x3a0>
    			{
    				printf("acc:%.3f %.3f %.3f\r\n", fAcc[0], fAcc[1], fAcc[2]);
 8000fb8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000fbc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fc0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000fc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8000fcc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000fd0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000fd4:	ed8d 7b00 	vstr	d7, [sp]
 8000fd8:	ec53 2b15 	vmov	r2, r3, d5
 8000fdc:	4848      	ldr	r0, [pc, #288]	@ (8001100 <main+0x4b0>)
 8000fde:	f00a fe1b 	bl	800bc18 <iprintf>
    				s_cDataUpdate &= ~ACC_UPDATE;
 8000fe2:	4b46      	ldr	r3, [pc, #280]	@ (80010fc <main+0x4ac>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b43      	ldr	r3, [pc, #268]	@ (80010fc <main+0x4ac>)
 8000fee:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & GYRO_UPDATE)
 8000ff0:	4b42      	ldr	r3, [pc, #264]	@ (80010fc <main+0x4ac>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d01b      	beq.n	8001034 <main+0x3e4>
    			{
    				printf("gyro:%.3f %.3f %.3f\r\n", fGyro[0], fGyro[1], fGyro[2]);
 8000ffc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001000:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001004:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001008:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800100c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001010:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001014:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001018:	ed8d 7b00 	vstr	d7, [sp]
 800101c:	ec53 2b15 	vmov	r2, r3, d5
 8001020:	4838      	ldr	r0, [pc, #224]	@ (8001104 <main+0x4b4>)
 8001022:	f00a fdf9 	bl	800bc18 <iprintf>
    				s_cDataUpdate &= ~GYRO_UPDATE;
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <main+0x4ac>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f023 0302 	bic.w	r3, r3, #2
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <main+0x4ac>)
 8001032:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & ANGLE_UPDATE)
 8001034:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <main+0x4ac>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	d033      	beq.n	80010a8 <main+0x458>
    			{
                    fYaw = (float)((unsigned short)sReg[Yaw]) / 32768 * 180.0;
 8001040:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <main+0x484>)
 8001042:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	@ 0x7e
 8001046:	b29b      	uxth	r3, r3
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001050:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80010d8 <main+0x488>
 8001054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001058:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80010e0 <main+0x490>
 800105c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001060:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    				printf("angle:%.3f %.3f %.3f(%.3f)\r\n", fAngle[0], fAngle[1], fAngle[2], fYaw);
 8001064:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001068:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 800106c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001070:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001074:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001078:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800107c:	edd7 5a13 	vldr	s11, [r7, #76]	@ 0x4c
 8001080:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001084:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001088:	ed8d 6b02 	vstr	d6, [sp, #8]
 800108c:	ed8d 7b00 	vstr	d7, [sp]
 8001090:	ec53 2b14 	vmov	r2, r3, d4
 8001094:	481c      	ldr	r0, [pc, #112]	@ (8001108 <main+0x4b8>)
 8001096:	f00a fdbf 	bl	800bc18 <iprintf>
    				s_cDataUpdate &= ~ANGLE_UPDATE;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <main+0x4ac>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f023 0304 	bic.w	r3, r3, #4
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <main+0x4ac>)
 80010a6:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & MAG_UPDATE)
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <main+0x4ac>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d034      	beq.n	800111e <main+0x4ce>
    			{
    				printf("mag:%d %d %d\r\n", sReg[HX], sReg[HY], sReg[HZ]);
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <main+0x484>)
 80010b6:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 80010ba:	4619      	mov	r1, r3
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <main+0x484>)
 80010be:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <main+0x484>)
 80010c6:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 80010ca:	4810      	ldr	r0, [pc, #64]	@ (800110c <main+0x4bc>)
 80010cc:	f00a fda4 	bl	800bc18 <iprintf>
 80010d0:	e01e      	b.n	8001110 <main+0x4c0>
 80010d2:	bf00      	nop
 80010d4:	24000874 	.word	0x24000874
 80010d8:	47000000 	.word	0x47000000
 80010dc:	44fa0000 	.word	0x44fa0000
 80010e0:	43340000 	.word	0x43340000
 80010e4:	6b5fca6b 	.word	0x6b5fca6b
 80010e8:	00989680 	.word	0x00989680
 80010ec:	47c35000 	.word	0x47c35000
 80010f0:	42700000 	.word	0x42700000
 80010f4:	42c80000 	.word	0x42c80000
 80010f8:	447a0000 	.word	0x447a0000
 80010fc:	240004bc 	.word	0x240004bc
 8001100:	0800e31c 	.word	0x0800e31c
 8001104:	0800e334 	.word	0x0800e334
 8001108:	0800e34c 	.word	0x0800e34c
 800110c:	0800e36c 	.word	0x0800e36c
    				s_cDataUpdate &= ~MAG_UPDATE;
 8001110:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <main+0x558>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	f023 0308 	bic.w	r3, r3, #8
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <main+0x558>)
 800111c:	701a      	strb	r2, [r3, #0]
    			}
				if(s_cDataUpdate & GPS_UPDATE)
 800111e:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <main+0x558>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	2b00      	cmp	r3, #0
 8001128:	d039      	beq.n	800119e <main+0x54e>
				  {
								// Print the GPS data
					printf("GPS Lat: %.6f, Lon: %.6f, Alt: %.1fm\r\n", fLatitude, fLongitude, fGpsAltitude);
 800112a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800112e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001132:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001136:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800113a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800113e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001142:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001146:	ed8d 7b00 	vstr	d7, [sp]
 800114a:	ec53 2b15 	vmov	r2, r3, d5
 800114e:	4817      	ldr	r0, [pc, #92]	@ (80011ac <main+0x55c>)
 8001150:	f00a fd62 	bl	800bc18 <iprintf>
					printf("GPS Spd: %.3fkm/h, Course: %.2fdeg\r\n", fGpsSpeed_kmh, fGpsCourse);
 8001154:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001158:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800115c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001160:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001164:	ed8d 7b00 	vstr	d7, [sp]
 8001168:	ec53 2b16 	vmov	r2, r3, d6
 800116c:	4810      	ldr	r0, [pc, #64]	@ (80011b0 <main+0x560>)
 800116e:	f00a fd53 	bl	800bc18 <iprintf>
					printf("GPS Sats: %d, PDOP: %.2f, HDOP: %.2f, VDOP: %.2f\r\n", iSatellites, fPDOP, fHDOP, fVDOP);
 8001172:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001176:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800117a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800117e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001182:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001186:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800118a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800118e:	ed8d 7b00 	vstr	d7, [sp]
 8001192:	ec53 2b15 	vmov	r2, r3, d5
 8001196:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001198:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <main+0x564>)
 800119a:	f00a fd3d 	bl	800bc18 <iprintf>

					// Clear the GPS update flag
					//s_cDataUpdate &= ~GPS_UPDATE;
				}

                s_cDataUpdate = 0;
 800119e:	4b02      	ldr	r3, [pc, #8]	@ (80011a8 <main+0x558>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
  {
 80011a4:	e5a1      	b.n	8000cea <main+0x9a>
 80011a6:	bf00      	nop
 80011a8:	240004bc 	.word	0x240004bc
 80011ac:	0800e37c 	.word	0x0800e37c
 80011b0:	0800e3a4 	.word	0x0800e3a4
 80011b4:	0800e3cc 	.word	0x0800e3cc

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09c      	sub	sp, #112	@ 0x70
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c2:	224c      	movs	r2, #76	@ 0x4c
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a fe98 	bl	800befc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2220      	movs	r2, #32
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00a fe92 	bl	800befc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011d8:	2002      	movs	r0, #2
 80011da:	f003 fe1f 	bl	8004e1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <SystemClock_Config+0xb8>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011ea:	4a21      	ldr	r2, [pc, #132]	@ (8001270 <SystemClock_Config+0xb8>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f0:	6193      	str	r3, [r2, #24]
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <SystemClock_Config+0xb8>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011fe:	bf00      	nop
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <SystemClock_Config+0xb8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800120c:	d1f8      	bne.n	8001200 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120e:	2302      	movs	r3, #2
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001212:	2301      	movs	r3, #1
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001216:	2340      	movs	r3, #64	@ 0x40
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fe34 	bl	8004e90 <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800122e:	f000 fc21 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	233f      	movs	r3, #63	@ 0x3f
 8001234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001246:	2340      	movs	r3, #64	@ 0x40
 8001248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800124a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2101      	movs	r1, #1
 8001258:	4618      	mov	r0, r3
 800125a:	f004 f9f3 	bl	8005644 <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001264:	f000 fc06 	bl	8001a74 <Error_Handler>
  }
}
 8001268:	bf00      	nop
 800126a:	3770      	adds	r7, #112	@ 0x70
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	58024800 	.word	0x58024800

08001274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <MX_I2C1_Init+0x74>)
 800127a:	4a1c      	ldr	r2, [pc, #112]	@ (80012ec <MX_I2C1_Init+0x78>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <MX_I2C1_Init+0x74>)
 8001280:	4a1b      	ldr	r2, [pc, #108]	@ (80012f0 <MX_I2C1_Init+0x7c>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_I2C1_Init+0x74>)
 800128c:	2201      	movs	r2, #1
 800128e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_I2C1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ae:	480e      	ldr	r0, [pc, #56]	@ (80012e8 <MX_I2C1_Init+0x74>)
 80012b0:	f002 ff90 	bl	80041d4 <HAL_I2C_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ba:	f000 fbdb 	bl	8001a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012be:	2100      	movs	r1, #0
 80012c0:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <MX_I2C1_Init+0x74>)
 80012c2:	f003 fd13 	bl	8004cec <HAL_I2CEx_ConfigAnalogFilter>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012cc:	f000 fbd2 	bl	8001a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_I2C1_Init+0x74>)
 80012d4:	f003 fd55 	bl	8004d82 <HAL_I2CEx_ConfigDigitalFilter>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012de:	f000 fbc9 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24000214 	.word	0x24000214
 80012ec:	40005400 	.word	0x40005400
 80012f0:	00707cbb 	.word	0x00707cbb

080012f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b098      	sub	sp, #96	@ 0x60
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001306:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2234      	movs	r2, #52	@ 0x34
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f00a fdeb 	bl	800befc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001326:	4b3f      	ldr	r3, [pc, #252]	@ (8001424 <MX_TIM1_Init+0x130>)
 8001328:	4a3f      	ldr	r2, [pc, #252]	@ (8001428 <MX_TIM1_Init+0x134>)
 800132a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800132c:	4b3d      	ldr	r3, [pc, #244]	@ (8001424 <MX_TIM1_Init+0x130>)
 800132e:	223f      	movs	r2, #63	@ 0x3f
 8001330:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b3c      	ldr	r3, [pc, #240]	@ (8001424 <MX_TIM1_Init+0x130>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001338:	4b3a      	ldr	r3, [pc, #232]	@ (8001424 <MX_TIM1_Init+0x130>)
 800133a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800133e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b38      	ldr	r3, [pc, #224]	@ (8001424 <MX_TIM1_Init+0x130>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001346:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <MX_TIM1_Init+0x130>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b35      	ldr	r3, [pc, #212]	@ (8001424 <MX_TIM1_Init+0x130>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001352:	4834      	ldr	r0, [pc, #208]	@ (8001424 <MX_TIM1_Init+0x130>)
 8001354:	f006 fac4 	bl	80078e0 <HAL_TIM_PWM_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800135e:	f000 fb89 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001372:	4619      	mov	r1, r3
 8001374:	482b      	ldr	r0, [pc, #172]	@ (8001424 <MX_TIM1_Init+0x130>)
 8001376:	f007 f8e3 	bl	8008540 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001380:	f000 fb78 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001384:	2360      	movs	r3, #96	@ 0x60
 8001386:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8001388:	f241 3388 	movw	r3, #5000	@ 0x1388
 800138c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138e:	2300      	movs	r3, #0
 8001390:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	481e      	ldr	r0, [pc, #120]	@ (8001424 <MX_TIM1_Init+0x130>)
 80013ac:	f006 fc0c 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80013b6:	f000 fb5d 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013be:	2204      	movs	r2, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4818      	ldr	r0, [pc, #96]	@ (8001424 <MX_TIM1_Init+0x130>)
 80013c4:	f006 fc00 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80013ce:	f000 fb51 	bl	8001a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <MX_TIM1_Init+0x130>)
 8001408:	f007 f936 	bl	8008678 <HAL_TIMEx_ConfigBreakDeadTime>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8001412:	f000 fb2f 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001416:	4803      	ldr	r0, [pc, #12]	@ (8001424 <MX_TIM1_Init+0x130>)
 8001418:	f000 fe86 	bl	8002128 <HAL_TIM_MspPostInit>

}
 800141c:	bf00      	nop
 800141e:	3760      	adds	r7, #96	@ 0x60
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	24000268 	.word	0x24000268
 8001428:	40010000 	.word	0x40010000

0800142c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]
 800144e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <MX_TIM2_Init+0xb0>)
 8001452:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001456:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001458:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <MX_TIM2_Init+0xb0>)
 800145a:	223f      	movs	r2, #63	@ 0x3f
 800145c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <MX_TIM2_Init+0xb0>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <MX_TIM2_Init+0xb0>)
 8001466:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800146a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_TIM2_Init+0xb0>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_TIM2_Init+0xb0>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001478:	4818      	ldr	r0, [pc, #96]	@ (80014dc <MX_TIM2_Init+0xb0>)
 800147a:	f006 fa31 	bl	80078e0 <HAL_TIM_PWM_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001484:	f000 faf6 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4811      	ldr	r0, [pc, #68]	@ (80014dc <MX_TIM2_Init+0xb0>)
 8001498:	f007 f852 	bl	8008540 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80014a2:	f000 fae7 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	@ 0x60
 80014a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 80014aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <MX_TIM2_Init+0xb0>)
 80014c0:	f006 fb82 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80014ca:	f000 fad3 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ce:	4803      	ldr	r0, [pc, #12]	@ (80014dc <MX_TIM2_Init+0xb0>)
 80014d0:	f000 fe2a 	bl	8002128 <HAL_TIM_MspPostInit>

}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	@ 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	240002b4 	.word	0x240002b4

080014e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e4:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 80014e6:	4a23      	ldr	r2, [pc, #140]	@ (8001574 <MX_USART1_UART_Init+0x94>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ea:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001516:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800151c:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001522:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001528:	4811      	ldr	r0, [pc, #68]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 800152a:	f007 f931 	bl	8008790 <HAL_UART_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001534:	f000 fa9e 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001538:	2100      	movs	r1, #0
 800153a:	480d      	ldr	r0, [pc, #52]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 800153c:	f009 fdab 	bl	800b096 <HAL_UARTEx_SetTxFifoThreshold>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001546:	f000 fa95 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154a:	2100      	movs	r1, #0
 800154c:	4808      	ldr	r0, [pc, #32]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 800154e:	f009 fde0 	bl	800b112 <HAL_UARTEx_SetRxFifoThreshold>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001558:	f000 fa8c 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	@ (8001570 <MX_USART1_UART_Init+0x90>)
 800155e:	f009 fd61 	bl	800b024 <HAL_UARTEx_DisableFifoMode>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001568:	f000 fa84 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	24000300 	.word	0x24000300
 8001574:	40011000 	.word	0x40011000

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <MX_USART2_UART_Init+0x94>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c0:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 80015c2:	f007 f8e5 	bl	8008790 <HAL_UART_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015cc:	f000 fa52 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 80015d4:	f009 fd5f 	bl	800b096 <HAL_UARTEx_SetTxFifoThreshold>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015de:	f000 fa49 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4808      	ldr	r0, [pc, #32]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 80015e6:	f009 fd94 	bl	800b112 <HAL_UARTEx_SetRxFifoThreshold>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f000 fa40 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_USART2_UART_Init+0x90>)
 80015f6:	f009 fd15 	bl	800b024 <HAL_UARTEx_DisableFifoMode>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 fa38 	bl	8001a74 <Error_Handler>
  	  //UART_Start_Receive_IT(&huart2, &ucRxData, 1);
      //HAL_UART_Receive_IT(&huart1, &ucRxData, 1);

  /* USER CODE END USART2_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	24000394 	.word	0x24000394
 800160c:	40004400 	.word	0x40004400

08001610 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001614:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 8001616:	4a23      	ldr	r2, [pc, #140]	@ (80016a4 <MX_USART3_UART_Init+0x94>)
 8001618:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800161a:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001658:	4811      	ldr	r0, [pc, #68]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 800165a:	f007 f899 	bl	8008790 <HAL_UART_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001664:	f000 fa06 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 800166c:	f009 fd13 	bl	800b096 <HAL_UARTEx_SetTxFifoThreshold>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001676:	f000 f9fd 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167a:	2100      	movs	r1, #0
 800167c:	4808      	ldr	r0, [pc, #32]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 800167e:	f009 fd48 	bl	800b112 <HAL_UARTEx_SetRxFifoThreshold>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001688:	f000 f9f4 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <MX_USART3_UART_Init+0x90>)
 800168e:	f009 fcc9 	bl	800b024 <HAL_UARTEx_DisableFifoMode>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001698:	f000 f9ec 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	24000428 	.word	0x24000428
 80016a4:	40004800 	.word	0x40004800

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	@ 0x30
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	4b51      	ldr	r3, [pc, #324]	@ (8001804 <MX_GPIO_Init+0x15c>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001804 <MX_GPIO_Init+0x15c>)
 80016c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <MX_GPIO_Init+0x15c>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b49      	ldr	r3, [pc, #292]	@ (8001804 <MX_GPIO_Init+0x15c>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e2:	4a48      	ldr	r2, [pc, #288]	@ (8001804 <MX_GPIO_Init+0x15c>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ec:	4b45      	ldr	r3, [pc, #276]	@ (8001804 <MX_GPIO_Init+0x15c>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016fa:	4b42      	ldr	r3, [pc, #264]	@ (8001804 <MX_GPIO_Init+0x15c>)
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001700:	4a40      	ldr	r2, [pc, #256]	@ (8001804 <MX_GPIO_Init+0x15c>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800170a:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <MX_GPIO_Init+0x15c>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <MX_GPIO_Init+0x15c>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171e:	4a39      	ldr	r2, [pc, #228]	@ (8001804 <MX_GPIO_Init+0x15c>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001728:	4b36      	ldr	r3, [pc, #216]	@ (8001804 <MX_GPIO_Init+0x15c>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001736:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <MX_GPIO_Init+0x15c>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173c:	4a31      	ldr	r2, [pc, #196]	@ (8001804 <MX_GPIO_Init+0x15c>)
 800173e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001746:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <MX_GPIO_Init+0x15c>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	4b2b      	ldr	r3, [pc, #172]	@ (8001804 <MX_GPIO_Init+0x15c>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175a:	4a2a      	ldr	r2, [pc, #168]	@ (8001804 <MX_GPIO_Init+0x15c>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <MX_GPIO_Init+0x15c>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	2180      	movs	r1, #128	@ 0x80
 8001776:	4824      	ldr	r0, [pc, #144]	@ (8001808 <MX_GPIO_Init+0x160>)
 8001778:	f002 fd12 	bl	80041a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800177c:	2380      	movs	r3, #128	@ 0x80
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	481d      	ldr	r0, [pc, #116]	@ (8001808 <MX_GPIO_Init+0x160>)
 8001794:	f002 fb5c 	bl	8003e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
   /* Configure USART3 TX (PD8) and RX (PD9) */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001798:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3; // AF7 for USART3
 80017aa:	2307      	movs	r3, #7
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	4815      	ldr	r0, [pc, #84]	@ (800180c <MX_GPIO_Init+0x164>)
 80017b6:	f002 fb4b 	bl	8003e50 <HAL_GPIO_Init>

  /* Configure USART2 TX (PD5) and RX (PD6) */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80017ba:	2360      	movs	r3, #96	@ 0x60
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c6:	2302      	movs	r3, #2
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // AF7 for USART2
 80017ca:	2307      	movs	r3, #7
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	480d      	ldr	r0, [pc, #52]	@ (800180c <MX_GPIO_Init+0x164>)
 80017d6:	f002 fb3b 	bl	8003e50 <HAL_GPIO_Init>


  /* Configure USART1 TX (PA9) and RX (PA10) */
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80017da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Or GPIO_PULLUP for RX if needed
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // AF7 for USART1
 80017ec:	2307      	movs	r3, #7
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4806      	ldr	r0, [pc, #24]	@ (8001810 <MX_GPIO_Init+0x168>)
 80017f8:	f002 fb2a 	bl	8003e50 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_USART1 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	@ 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	58024400 	.word	0x58024400
 8001808:	58021800 	.word	0x58021800
 800180c:	58020c00 	.word	0x58020c00
 8001810:	58020000 	.word	0x58020000

08001814 <SensorUartSend>:

/* USER CODE BEGIN 4 */

static void SensorUartSend(uint8_t *p_data, uint32_t uiSize)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart3, p_data, uiSize, uiSize*4);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b29a      	uxth	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4803      	ldr	r0, [pc, #12]	@ (8001838 <SensorUartSend+0x24>)
 800182a:	f007 f801 	bl	8008830 <HAL_UART_Transmit>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	24000428 	.word	0x24000428

0800183c <CopeSensorData>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
	int i;
    for(i = 0; i < uiRegNum; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e083      	b.n	8001954 <CopeSensorData+0x118>
    {
        switch(uiReg)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b36      	subs	r3, #54	@ 0x36
 8001850:	2b22      	cmp	r3, #34	@ 0x22
 8001852:	d871      	bhi.n	8001938 <CopeSensorData+0xfc>
 8001854:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <CopeSensorData+0x20>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	080018e9 	.word	0x080018e9
 8001860:	08001939 	.word	0x08001939
 8001864:	08001939 	.word	0x08001939
 8001868:	080018f9 	.word	0x080018f9
 800186c:	08001939 	.word	0x08001939
 8001870:	08001939 	.word	0x08001939
 8001874:	08001909 	.word	0x08001909
 8001878:	08001939 	.word	0x08001939
 800187c:	08001939 	.word	0x08001939
 8001880:	08001919 	.word	0x08001919
 8001884:	08001939 	.word	0x08001939
 8001888:	08001939 	.word	0x08001939
 800188c:	08001939 	.word	0x08001939
 8001890:	08001939 	.word	0x08001939
 8001894:	08001939 	.word	0x08001939
 8001898:	08001939 	.word	0x08001939
 800189c:	08001939 	.word	0x08001939
 80018a0:	08001939 	.word	0x08001939
 80018a4:	08001939 	.word	0x08001939
 80018a8:	08001929 	.word	0x08001929
 80018ac:	08001929 	.word	0x08001929
 80018b0:	08001929 	.word	0x08001929
 80018b4:	08001929 	.word	0x08001929
 80018b8:	08001929 	.word	0x08001929
 80018bc:	08001929 	.word	0x08001929
 80018c0:	08001929 	.word	0x08001929
 80018c4:	08001929 	.word	0x08001929
 80018c8:	08001939 	.word	0x08001939
 80018cc:	08001939 	.word	0x08001939
 80018d0:	08001939 	.word	0x08001939
 80018d4:	08001939 	.word	0x08001939
 80018d8:	08001929 	.word	0x08001929
 80018dc:	08001929 	.word	0x08001929
 80018e0:	08001929 	.word	0x08001929
 80018e4:	08001929 	.word	0x08001929
        {
            case AZ:
				s_cDataUpdate |= ACC_UPDATE;
 80018e8:	4b20      	ldr	r3, [pc, #128]	@ (800196c <CopeSensorData+0x130>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b1e      	ldr	r3, [pc, #120]	@ (800196c <CopeSensorData+0x130>)
 80018f4:	701a      	strb	r2, [r3, #0]
            break;
 80018f6:	e027      	b.n	8001948 <CopeSensorData+0x10c>
            case GZ:
				s_cDataUpdate |= GYRO_UPDATE;
 80018f8:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <CopeSensorData+0x130>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b1a      	ldr	r3, [pc, #104]	@ (800196c <CopeSensorData+0x130>)
 8001904:	701a      	strb	r2, [r3, #0]
            break;
 8001906:	e01f      	b.n	8001948 <CopeSensorData+0x10c>
            case HZ:
				s_cDataUpdate |= MAG_UPDATE;
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <CopeSensorData+0x130>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b16      	ldr	r3, [pc, #88]	@ (800196c <CopeSensorData+0x130>)
 8001914:	701a      	strb	r2, [r3, #0]
            break;
 8001916:	e017      	b.n	8001948 <CopeSensorData+0x10c>
            case Yaw:
				s_cDataUpdate |= ANGLE_UPDATE;
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <CopeSensorData+0x130>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <CopeSensorData+0x130>)
 8001924:	701a      	strb	r2, [r3, #0]
            break;
 8001926:	e00f      	b.n	8001948 <CopeSensorData+0x10c>
            case GPSVH:
            case SVNUM:
            case PDOP:
            case HDOP:
            case VDOP:
        s_cDataUpdate |= GPS_UPDATE;
 8001928:	4b10      	ldr	r3, [pc, #64]	@ (800196c <CopeSensorData+0x130>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <CopeSensorData+0x130>)
 8001934:	701a      	strb	r2, [r3, #0]
            break;
 8001936:	e007      	b.n	8001948 <CopeSensorData+0x10c>

            default:
				s_cDataUpdate |= READ_UPDATE;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <CopeSensorData+0x130>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <CopeSensorData+0x130>)
 8001944:	701a      	strb	r2, [r3, #0]
			break;
 8001946:	bf00      	nop
        }
		uiReg++;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3301      	adds	r3, #1
 800194c:	607b      	str	r3, [r7, #4]
    for(i = 0; i < uiRegNum; i++)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3301      	adds	r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	f63f af77 	bhi.w	800184c <CopeSensorData+0x10>
    }
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	240004bc 	.word	0x240004bc

08001970 <AutoScanSensor>:

static void AutoScanSensor(void)
{
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b08c      	sub	sp, #48	@ 0x30
 8001974:	af00      	add	r7, sp, #0
	const uint32_t c_uiBaud[9] = {4800, 9600, 19200, 38400, 57600, 115200, 230400, 460800, 921600};
 8001976:	4b23      	ldr	r3, [pc, #140]	@ (8001a04 <AutoScanSensor+0x94>)
 8001978:	1d3c      	adds	r4, r7, #4
 800197a:	461d      	mov	r5, r3
 800197c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	6023      	str	r3, [r4, #0]
	int i, iRetry;
	
	for(i = 0; i < 9; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800198c:	e02e      	b.n	80019ec <AutoScanSensor+0x7c>
	{
        uiBuad = c_uiBaud[i]; // literal waste of time for loop only kept it around cause it looks like a nice blocking loading sequence in serial
 800198e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	3330      	adds	r3, #48	@ 0x30
 8001994:	443b      	add	r3, r7
 8001996:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800199a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a08 <AutoScanSensor+0x98>)
 800199c:	6013      	str	r3, [r2, #0]
        HAL_Delay(250); // Settling time
 800199e:	20fa      	movs	r0, #250	@ 0xfa
 80019a0:	f001 fb46 	bl	8003030 <HAL_Delay>
		iRetry = 2;
 80019a4:	2302      	movs	r3, #2
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
		do
		{
			s_cDataUpdate = 0;
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <AutoScanSensor+0x9c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
			WitReadReg(AX, 3);
 80019ae:	2103      	movs	r1, #3
 80019b0:	2034      	movs	r0, #52	@ 0x34
 80019b2:	f001 f953 	bl	8002c5c <WitReadReg>
			HAL_Delay(200);
 80019b6:	20c8      	movs	r0, #200	@ 0xc8
 80019b8:	f001 fb3a 	bl	8003030 <HAL_Delay>
			if(s_cDataUpdate != 0)
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <AutoScanSensor+0x9c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00a      	beq.n	80019da <AutoScanSensor+0x6a>
			{
				printf("%lu baud find sensor\r\n\r\n", c_uiBaud[i]);
 80019c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	3330      	adds	r3, #48	@ 0x30
 80019ca:	443b      	add	r3, r7
 80019cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80019d0:	4619      	mov	r1, r3
 80019d2:	480f      	ldr	r0, [pc, #60]	@ (8001a10 <AutoScanSensor+0xa0>)
 80019d4:	f00a f920 	bl	800bc18 <iprintf>
 80019d8:	e011      	b.n	80019fe <AutoScanSensor+0x8e>
				return ;
			}
			iRetry--;
 80019da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019dc:	3b01      	subs	r3, #1
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
		}while(iRetry);		
 80019e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1e0      	bne.n	80019a8 <AutoScanSensor+0x38>
	for(i = 0; i < 9; i++)
 80019e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e8:	3301      	adds	r3, #1
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	ddcd      	ble.n	800198e <AutoScanSensor+0x1e>
	}
	printf("can not find sensor\r\n");
 80019f2:	4808      	ldr	r0, [pc, #32]	@ (8001a14 <AutoScanSensor+0xa4>)
 80019f4:	f00a f980 	bl	800bcf8 <puts>
	printf("please check your connection\r\n");
 80019f8:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <AutoScanSensor+0xa8>)
 80019fa:	f00a f97d 	bl	800bcf8 <puts>
}
 80019fe:	3730      	adds	r7, #48	@ 0x30
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdb0      	pop	{r4, r5, r7, pc}
 8001a04:	0800e464 	.word	0x0800e464
 8001a08:	24000010 	.word	0x24000010
 8001a0c:	240004bc 	.word	0x240004bc
 8001a10:	0800e410 	.word	0x0800e410
 8001a14:	0800e42c 	.word	0x0800e42c
 8001a18:	0800e444 	.word	0x0800e444

08001a1c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a22:	463b      	mov	r3, r7
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a2e:	f001 fc33 	bl	8003298 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a32:	2301      	movs	r3, #1
 8001a34:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a3e:	231f      	movs	r3, #31
 8001a40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a42:	2387      	movs	r3, #135	@ 0x87
 8001a44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a52:	2301      	movs	r3, #1
 8001a54:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fc51 	bl	8003308 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a66:	2004      	movs	r0, #4
 8001a68:	f001 fc2e 	bl	80032c8 <HAL_MPU_Enable>

}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <Error_Handler+0x8>

08001a80 <ring_buffer_init>:
//ring_buffer.c
#include "ring_buffer.h"

void ring_buffer_init(ring_buffer *p_ring_buf){
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    p_ring_buf->head = 0;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    p_ring_buf->tail = 0;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <ring_buffer_put>:

//add data to the ring buffer 
uint8_t ring_buffer_put(ring_buffer *p_ring_buf, uint8_t data){
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (p_ring_buf->head + 1 ) % RING_BUFFER_SIZE; // increments by one and becomes 0 when reached buffer size (should wraparound at max int val) 
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	425a      	negs	r2, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	bf58      	it	pl
 8001ac2:	4253      	negpl	r3, r2
 8001ac4:	81fb      	strh	r3, [r7, #14]
    if (next == p_ring_buf->tail){
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	89fa      	ldrh	r2, [r7, #14]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d101      	bne.n	8001ad8 <ring_buffer_put+0x34>
        return 0; // when its full 
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e00c      	b.n	8001af2 <ring_buffer_put+0x4e>
    }
    p_ring_buf->buffer[p_ring_buf->head]= data;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	545a      	strb	r2, [r3, r1]
    p_ring_buf->head = next;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	89fa      	ldrh	r2, [r7, #14]
 8001aec:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    return 1; // succcess
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <ring_buffer_get>:

//get data from the ring buffer
uint8_t ring_buffer_get(ring_buffer *p_ring_buf, uint8_t *data){
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
    if (p_ring_buf->head == p_ring_buf->tail) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d101      	bne.n	8001b20 <ring_buffer_get+0x22>
        return 0; // Buffer empty
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e017      	b.n	8001b50 <ring_buffer_get+0x52>
    }
    *data = p_ring_buf->buffer[p_ring_buf->tail];
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	5c9a      	ldrb	r2, [r3, r2]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	701a      	strb	r2, [r3, #0]
    p_ring_buf->tail = (p_ring_buf->tail+1)%RING_BUFFER_SIZE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	425a      	negs	r2, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	bf58      	it	pl
 8001b44:	4253      	negpl	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    return 1; // read
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <rudder_init>:

#include "rudder_control.h"
#include "servo_controls.h"
void rudder_init(TIM_HandleTypeDef *htim, uint32_t channel) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
    rudder_htim = htim;
 8001b66:	4a06      	ldr	r2, [pc, #24]	@ (8001b80 <rudder_init+0x24>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6013      	str	r3, [r2, #0]
    rudder_channel = channel;
 8001b6c:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <rudder_init+0x28>)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6013      	str	r3, [r2, #0]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	2400074c 	.word	0x2400074c
 8001b84:	24000750 	.word	0x24000750

08001b88 <rudder_move_to>:
    } else {
        rudder_target_angle = rudder_straight;
    }
}

void rudder_move_to(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
    if (fabsf(rudder_target_angle - rudder_current_angle) > 1) {
 8001b8c:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <rudder_move_to+0x88>)
 8001b8e:	ed93 7a00 	vldr	s14, [r3]
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <rudder_move_to+0x8c>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9c:	eef0 7ae7 	vabs.f32	s15, s15
 8001ba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bac:	dc00      	bgt.n	8001bb0 <rudder_move_to+0x28>
        } else {
            rudder_current_angle -= 1;
        }
        set_servo_angle(rudder_htim, rudder_channel, rudder_current_angle);
    }
}
 8001bae:	e02c      	b.n	8001c0a <rudder_move_to+0x82>
        if (rudder_current_angle < rudder_target_angle) {
 8001bb0:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <rudder_move_to+0x8c>)
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <rudder_move_to+0x88>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d50a      	bpl.n	8001bdc <rudder_move_to+0x54>
            rudder_current_angle += 1;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <rudder_move_to+0x8c>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <rudder_move_to+0x8c>)
 8001bd6:	edc3 7a00 	vstr	s15, [r3]
 8001bda:	e009      	b.n	8001bf0 <rudder_move_to+0x68>
            rudder_current_angle -= 1;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <rudder_move_to+0x8c>)
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001be6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <rudder_move_to+0x8c>)
 8001bec:	edc3 7a00 	vstr	s15, [r3]
        set_servo_angle(rudder_htim, rudder_channel, rudder_current_angle);
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <rudder_move_to+0x90>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a09      	ldr	r2, [pc, #36]	@ (8001c1c <rudder_move_to+0x94>)
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	4906      	ldr	r1, [pc, #24]	@ (8001c14 <rudder_move_to+0x8c>)
 8001bfa:	edd1 7a00 	vldr	s15, [r1]
 8001bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f80b 	bl	8001c20 <set_servo_angle>
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	24000018 	.word	0x24000018
 8001c14:	24000014 	.word	0x24000014
 8001c18:	2400074c 	.word	0x2400074c
 8001c1c:	24000750 	.word	0x24000750

08001c20 <set_servo_angle>:
#include "servo_controls.h"
#include "stdint.h"



 void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim 
     the maths maybe works like 1.5 ms pulse width is neutral with .5 and 2.5 being either end
     so we have a 1us count so 500us/1ms -> 500 counts and 2500us -> 2500 counts*/
    if (angle < 0.0f) angle = 0.0f;
 8001c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d502      	bpl.n	8001c42 <set_servo_angle+0x22>
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
    if (angle > 180.0f) angle = 180.0f; //limits
 8001c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c46:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001d10 <set_servo_angle+0xf0>
 8001c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	dd01      	ble.n	8001c58 <set_servo_angle+0x38>
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <set_servo_angle+0xf4>)
 8001c56:	607b      	str	r3, [r7, #4]
    
    float min_pulse = 500.0f;
 8001c58:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <set_servo_angle+0xf8>)
 8001c5a:	61fb      	str	r3, [r7, #28]
    float max_pulse = 2500.0f;
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d1c <set_servo_angle+0xfc>)
 8001c5e:	61bb      	str	r3, [r7, #24]
     
    uint32_t pulse_width = min_pulse +(angle*((max_pulse - min_pulse)/180.0f));
 8001c60:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c64:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001d10 <set_servo_angle+0xf0>
 8001c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c88:	ee17 3a90 	vmov	r3, s15
 8001c8c:	617b      	str	r3, [r7, #20]
    uint32_t rounded_pulse_width = (uint32_t)(pulse_width + 0.5f); 
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c98:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca4:	ee17 3a90 	vmov	r3, s15
 8001ca8:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d104      	bne.n	8001cba <set_servo_angle+0x9a>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	635a      	str	r2, [r3, #52]	@ 0x34
  
  }
 8001cb8:	e023      	b.n	8001d02 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d104      	bne.n	8001cca <set_servo_angle+0xaa>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6393      	str	r3, [r2, #56]	@ 0x38
  }
 8001cc8:	e01b      	b.n	8001d02 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d104      	bne.n	8001cda <set_servo_angle+0xba>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	63d3      	str	r3, [r2, #60]	@ 0x3c
  }
 8001cd8:	e013      	b.n	8001d02 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b0c      	cmp	r3, #12
 8001cde:	d104      	bne.n	8001cea <set_servo_angle+0xca>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 8001ce8:	e00b      	b.n	8001d02 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d104      	bne.n	8001cfa <set_servo_angle+0xda>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
 8001cf8:	e003      	b.n	8001d02 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	65d3      	str	r3, [r2, #92]	@ 0x5c
  }
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	43340000 	.word	0x43340000
 8001d14:	43340000 	.word	0x43340000
 8001d18:	43fa0000 	.word	0x43fa0000
 8001d1c:	451c4000 	.word	0x451c4000

08001d20 <set_servo_angle_gradual>:
  void set_servo_angle_gradual(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim and the channel*/
     uint32_t current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); // returns current pulse width(between 500 and 2500)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <set_servo_angle_gradual+0x1c>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3a:	e01e      	b.n	8001d7a <set_servo_angle_gradual+0x5a>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d103      	bne.n	8001d4a <set_servo_angle_gradual+0x2a>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d48:	e017      	b.n	8001d7a <set_servo_angle_gradual+0x5a>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d103      	bne.n	8001d58 <set_servo_angle_gradual+0x38>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d56:	e010      	b.n	8001d7a <set_servo_angle_gradual+0x5a>
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d103      	bne.n	8001d66 <set_servo_angle_gradual+0x46>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	e009      	b.n	8001d7a <set_servo_angle_gradual+0x5a>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d103      	bne.n	8001d74 <set_servo_angle_gradual+0x54>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	e002      	b.n	8001d7a <set_servo_angle_gradual+0x5a>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7a:	617b      	str	r3, [r7, #20]
     uint32_t desired_pulse_width = 500 +(angle*((2500-500)/180));
 8001d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d80:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d88:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001f28 <set_servo_angle_gradual+0x208>
 8001d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	613b      	str	r3, [r7, #16]
     while (desired_pulse_width != current_pulse_width){
 8001d9a:	e0ba      	b.n	8001f12 <set_servo_angle_gradual+0x1f2>
        if (desired_pulse_width > current_pulse_width){
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d959      	bls.n	8001e58 <set_servo_angle_gradual+0x138>
            current_pulse_width++; 
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
            __HAL_TIM_SET_COMPARE(htim, channel, current_pulse_width);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d104      	bne.n	8001dba <set_servo_angle_gradual+0x9a>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001db8:	e023      	b.n	8001e02 <set_servo_angle_gradual+0xe2>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d104      	bne.n	8001dca <set_servo_angle_gradual+0xaa>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	6393      	str	r3, [r2, #56]	@ 0x38
 8001dc8:	e01b      	b.n	8001e02 <set_servo_angle_gradual+0xe2>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d104      	bne.n	8001dda <set_servo_angle_gradual+0xba>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001dd8:	e013      	b.n	8001e02 <set_servo_angle_gradual+0xe2>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d104      	bne.n	8001dea <set_servo_angle_gradual+0xca>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de8:	e00b      	b.n	8001e02 <set_servo_angle_gradual+0xe2>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d104      	bne.n	8001dfa <set_servo_angle_gradual+0xda>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001df8:	e003      	b.n	8001e02 <set_servo_angle_gradual+0xe2>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	65d3      	str	r3, [r2, #92]	@ 0x5c
            HAL_Delay(10);
 8001e02:	200a      	movs	r0, #10
 8001e04:	f001 f914 	bl	8003030 <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <set_servo_angle_gradual+0xf6>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e14:	e01e      	b.n	8001e54 <set_servo_angle_gradual+0x134>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d103      	bne.n	8001e24 <set_servo_angle_gradual+0x104>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e22:	e017      	b.n	8001e54 <set_servo_angle_gradual+0x134>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d103      	bne.n	8001e32 <set_servo_angle_gradual+0x112>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e30:	e010      	b.n	8001e54 <set_servo_angle_gradual+0x134>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d103      	bne.n	8001e40 <set_servo_angle_gradual+0x120>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	e009      	b.n	8001e54 <set_servo_angle_gradual+0x134>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d103      	bne.n	8001e4e <set_servo_angle_gradual+0x12e>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4c:	e002      	b.n	8001e54 <set_servo_angle_gradual+0x134>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e05c      	b.n	8001f12 <set_servo_angle_gradual+0x1f2>

        }
        else if (desired_pulse_width < current_pulse_width)
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d258      	bcs.n	8001f12 <set_servo_angle_gradual+0x1f2>
        {
            current_pulse_width--; 
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
            __HAL_TIM_SET_COMPARE(htim, channel, current_pulse_width);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d104      	bne.n	8001e76 <set_servo_angle_gradual+0x156>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e74:	e023      	b.n	8001ebe <set_servo_angle_gradual+0x19e>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d104      	bne.n	8001e86 <set_servo_angle_gradual+0x166>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e84:	e01b      	b.n	8001ebe <set_servo_angle_gradual+0x19e>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d104      	bne.n	8001e96 <set_servo_angle_gradual+0x176>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e94:	e013      	b.n	8001ebe <set_servo_angle_gradual+0x19e>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d104      	bne.n	8001ea6 <set_servo_angle_gradual+0x186>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea4:	e00b      	b.n	8001ebe <set_servo_angle_gradual+0x19e>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d104      	bne.n	8001eb6 <set_servo_angle_gradual+0x196>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb4:	e003      	b.n	8001ebe <set_servo_angle_gradual+0x19e>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	65d3      	str	r3, [r2, #92]	@ 0x5c

            HAL_Delay(3);
 8001ebe:	2003      	movs	r0, #3
 8001ec0:	f001 f8b6 	bl	8003030 <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); 
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <set_servo_angle_gradual+0x1b2>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed0:	e01e      	b.n	8001f10 <set_servo_angle_gradual+0x1f0>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d103      	bne.n	8001ee0 <set_servo_angle_gradual+0x1c0>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ede:	e017      	b.n	8001f10 <set_servo_angle_gradual+0x1f0>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d103      	bne.n	8001eee <set_servo_angle_gradual+0x1ce>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eec:	e010      	b.n	8001f10 <set_servo_angle_gradual+0x1f0>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d103      	bne.n	8001efc <set_servo_angle_gradual+0x1dc>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	e009      	b.n	8001f10 <set_servo_angle_gradual+0x1f0>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d103      	bne.n	8001f0a <set_servo_angle_gradual+0x1ea>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	e002      	b.n	8001f10 <set_servo_angle_gradual+0x1f0>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f10:	617b      	str	r3, [r7, #20]
     while (desired_pulse_width != current_pulse_width){
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	f47f af40 	bne.w	8001d9c <set_servo_angle_gradual+0x7c>
        }
      
    }
  }
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	43fa0000 	.word	0x43fa0000
 8001f2c:	00000000 	.word	0x00000000

08001f30 <copy_wind_pos>:
  void copy_wind_pos(ServoController *ctrl, float wind_angle){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	ed87 0a00 	vstr	s0, [r7]
    float adj_angle=  fmod(wind_angle, 180.0f);  //all opposite angles are the same so 200 degrees = 20 degrees 
 8001f3c:	edd7 7a00 	vldr	s15, [r7]
 8001f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f44:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001fa0 <copy_wind_pos+0x70>
 8001f48:	eeb0 0b47 	vmov.f64	d0, d7
 8001f4c:	f00b ffd4 	bl	800def8 <fmod>
 8001f50:	eeb0 7b40 	vmov.f64	d7, d0
 8001f54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f58:	edc7 7a03 	vstr	s15, [r7, #12]
    
    // explicit case for 180 degrees
    if(wind_angle >= 180.0f && adj_angle == 0.0f) {
 8001f5c:	edd7 7a00 	vldr	s15, [r7]
 8001f60:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001fa8 <copy_wind_pos+0x78>
 8001f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	db08      	blt.n	8001f80 <copy_wind_pos+0x50>
 8001f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	d101      	bne.n	8001f80 <copy_wind_pos+0x50>
      adj_angle = 180.0f;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <copy_wind_pos+0x7c>)
 8001f7e:	60fb      	str	r3, [r7, #12]
    }
    
    //set_servo_angle(ctrl->htim, ctrl->channel, adj_angle);
    set_servo_angle_gradual(ctrl->htim, ctrl->channel, adj_angle);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4610      	mov	r0, r2
 8001f90:	f7ff fec6 	bl	8001d20 <set_servo_angle_gradual>
  

    //set_servo_angle();
  }
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	40668000 	.word	0x40668000
 8001fa8:	43340000 	.word	0x43340000
 8001fac:	43340000 	.word	0x43340000

08001fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <HAL_MspInit+0x30>)
 8001fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fbc:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <HAL_MspInit+0x30>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_MspInit+0x30>)
 8001fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	58024400 	.word	0x58024400

08001fe4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0b8      	sub	sp, #224	@ 0xe0
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	22b8      	movs	r2, #184	@ 0xb8
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f009 ff79 	bl	800befc <memset>
  if(hi2c->Instance==I2C1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a27      	ldr	r2, [pc, #156]	@ (80020ac <HAL_I2C_MspInit+0xc8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d146      	bne.n	80020a2 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002014:	f04f 0208 	mov.w	r2, #8
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002026:	f107 0310 	add.w	r3, r7, #16
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fe96 	bl	8005d5c <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002036:	f7ff fd1d 	bl	8001a74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <HAL_I2C_MspInit+0xcc>)
 800203c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002040:	4a1b      	ldr	r2, [pc, #108]	@ (80020b0 <HAL_I2C_MspInit+0xcc>)
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800204a:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <HAL_I2C_MspInit+0xcc>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002058:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800205c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002060:	2312      	movs	r3, #18
 8002062:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002072:	2304      	movs	r3, #4
 8002074:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800207c:	4619      	mov	r1, r3
 800207e:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <HAL_I2C_MspInit+0xd0>)
 8002080:	f001 fee6 	bl	8003e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <HAL_I2C_MspInit+0xcc>)
 8002086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800208a:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <HAL_I2C_MspInit+0xcc>)
 800208c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002090:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_I2C_MspInit+0xcc>)
 8002096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800209a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020a2:	bf00      	nop
 80020a4:	37e0      	adds	r7, #224	@ 0xe0
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40005400 	.word	0x40005400
 80020b0:	58024400 	.word	0x58024400
 80020b4:	58020400 	.word	0x58020400

080020b8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a16      	ldr	r2, [pc, #88]	@ (8002120 <HAL_TIM_PWM_MspInit+0x68>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10f      	bne.n	80020ea <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ca:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <HAL_TIM_PWM_MspInit+0x6c>)
 80020cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <HAL_TIM_PWM_MspInit+0x6c>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020da:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <HAL_TIM_PWM_MspInit+0x6c>)
 80020dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020e8:	e013      	b.n	8002112 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f2:	d10e      	bne.n	8002112 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_TIM_PWM_MspInit+0x6c>)
 80020f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <HAL_TIM_PWM_MspInit+0x6c>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002104:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <HAL_TIM_PWM_MspInit+0x6c>)
 8002106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000
 8002124:	58024400 	.word	0x58024400

08002128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a25      	ldr	r2, [pc, #148]	@ (80021dc <HAL_TIM_MspPostInit+0xb4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d120      	bne.n	800218c <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800214a:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <HAL_TIM_MspPostInit+0xb8>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002150:	4a23      	ldr	r2, [pc, #140]	@ (80021e0 <HAL_TIM_MspPostInit+0xb8>)
 8002152:	f043 0310 	orr.w	r3, r3, #16
 8002156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800215a:	4b21      	ldr	r3, [pc, #132]	@ (80021e0 <HAL_TIM_MspPostInit+0xb8>)
 800215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002168:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800217a:	2301      	movs	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4817      	ldr	r0, [pc, #92]	@ (80021e4 <HAL_TIM_MspPostInit+0xbc>)
 8002186:	f001 fe63 	bl	8003e50 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800218a:	e023      	b.n	80021d4 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002194:	d11e      	bne.n	80021d4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <HAL_TIM_MspPostInit+0xb8>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219c:	4a10      	ldr	r2, [pc, #64]	@ (80021e0 <HAL_TIM_MspPostInit+0xb8>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_TIM_MspPostInit+0xb8>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021b4:	2320      	movs	r3, #32
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c4:	2301      	movs	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	@ (80021e8 <HAL_TIM_MspPostInit+0xc0>)
 80021d0:	f001 fe3e 	bl	8003e50 <HAL_GPIO_Init>
}
 80021d4:	bf00      	nop
 80021d6:	3728      	adds	r7, #40	@ 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010000 	.word	0x40010000
 80021e0:	58024400 	.word	0x58024400
 80021e4:	58021000 	.word	0x58021000
 80021e8:	58020000 	.word	0x58020000

080021ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0bc      	sub	sp, #240	@ 0xf0
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002204:	f107 0320 	add.w	r3, r7, #32
 8002208:	22b8      	movs	r2, #184	@ 0xb8
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f009 fe75 	bl	800befc <memset>
  if(huart->Instance==USART1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7f      	ldr	r2, [pc, #508]	@ (8002414 <HAL_UART_MspInit+0x228>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d14f      	bne.n	80022bc <HAL_UART_MspInit+0xd0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800221c:	f04f 0201 	mov.w	r2, #1
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800222e:	f107 0320 	add.w	r3, r7, #32
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fd92 	bl	8005d5c <HAL_RCCEx_PeriphCLKConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800223e:	f7ff fc19 	bl	8001a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002242:	4b75      	ldr	r3, [pc, #468]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 8002244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002248:	4a73      	ldr	r2, [pc, #460]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 800224a:	f043 0310 	orr.w	r3, r3, #16
 800224e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002252:	4b71      	ldr	r3, [pc, #452]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 8002254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b6d      	ldr	r3, [pc, #436]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 8002262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002266:	4a6c      	ldr	r2, [pc, #432]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002270:	4b69      	ldr	r3, [pc, #420]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 8002272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800227e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002298:	2307      	movs	r3, #7
 800229a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022a2:	4619      	mov	r1, r3
 80022a4:	485d      	ldr	r0, [pc, #372]	@ (800241c <HAL_UART_MspInit+0x230>)
 80022a6:	f001 fdd3 	bl	8003e50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	2025      	movs	r0, #37	@ 0x25
 80022b0:	f000 ffbd 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022b4:	2025      	movs	r0, #37	@ 0x25
 80022b6:	f000 ffd4 	bl	8003262 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80022ba:	e0a7      	b.n	800240c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a57      	ldr	r2, [pc, #348]	@ (8002420 <HAL_UART_MspInit+0x234>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d14e      	bne.n	8002364 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022c6:	f04f 0202 	mov.w	r2, #2
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 fd3d 	bl	8005d5c <HAL_RCCEx_PeriphCLKConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_UART_MspInit+0x100>
      Error_Handler();
 80022e8:	f7ff fbc4 	bl	8001a74 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 80022ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022f2:	4a49      	ldr	r2, [pc, #292]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022fc:	4b46      	ldr	r3, [pc, #280]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 80022fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800230a:	4b43      	ldr	r3, [pc, #268]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002310:	4a41      	ldr	r2, [pc, #260]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800231a:	4b3f      	ldr	r3, [pc, #252]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 800231c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002328:	2360      	movs	r3, #96	@ 0x60
 800232a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002340:	2307      	movs	r3, #7
 8002342:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002346:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800234a:	4619      	mov	r1, r3
 800234c:	4835      	ldr	r0, [pc, #212]	@ (8002424 <HAL_UART_MspInit+0x238>)
 800234e:	f001 fd7f 	bl	8003e50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2026      	movs	r0, #38	@ 0x26
 8002358:	f000 ff69 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800235c:	2026      	movs	r0, #38	@ 0x26
 800235e:	f000 ff80 	bl	8003262 <HAL_NVIC_EnableIRQ>
}
 8002362:	e053      	b.n	800240c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a2f      	ldr	r2, [pc, #188]	@ (8002428 <HAL_UART_MspInit+0x23c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d14e      	bne.n	800240c <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800236e:	f04f 0202 	mov.w	r2, #2
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002380:	f107 0320 	add.w	r3, r7, #32
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fce9 	bl	8005d5c <HAL_RCCEx_PeriphCLKConfig>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002390:	f7ff fb70 	bl	8001a74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002394:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 8002396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800239a:	4a1f      	ldr	r2, [pc, #124]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 80023a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b2:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 80023b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b8:	4a17      	ldr	r2, [pc, #92]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 80023ba:	f043 0308 	orr.w	r3, r3, #8
 80023be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023c2:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <HAL_UART_MspInit+0x22c>)
 80023c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ea:	2307      	movs	r3, #7
 80023ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023f4:	4619      	mov	r1, r3
 80023f6:	480b      	ldr	r0, [pc, #44]	@ (8002424 <HAL_UART_MspInit+0x238>)
 80023f8:	f001 fd2a 	bl	8003e50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	2027      	movs	r0, #39	@ 0x27
 8002402:	f000 ff14 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002406:	2027      	movs	r0, #39	@ 0x27
 8002408:	f000 ff2b 	bl	8003262 <HAL_NVIC_EnableIRQ>
}
 800240c:	bf00      	nop
 800240e:	37f0      	adds	r7, #240	@ 0xf0
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40011000 	.word	0x40011000
 8002418:	58024400 	.word	0x58024400
 800241c:	58020000 	.word	0x58020000
 8002420:	40004400 	.word	0x40004400
 8002424:	58020c00 	.word	0x58020c00
 8002428:	40004800 	.word	0x40004800

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <NMI_Handler+0x4>

08002434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <HardFault_Handler+0x4>

0800243c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <MemManage_Handler+0x4>

08002444 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <BusFault_Handler+0x4>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <UsageFault_Handler+0x4>

08002454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002482:	f000 fdb5 	bl	8002ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002490:	4802      	ldr	r0, [pc, #8]	@ (800249c <USART1_IRQHandler+0x10>)
 8002492:	f006 faa7 	bl	80089e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	24000300 	.word	0x24000300

080024a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <USART2_IRQHandler+0x10>)
 80024a6:	f006 fa9d 	bl	80089e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	24000394 	.word	0x24000394

080024b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024b8:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <USART3_IRQHandler+0x10>)
 80024ba:	f006 fa93 	bl	80089e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	24000428 	.word	0x24000428

080024c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return 1;
 80024cc:	2301      	movs	r3, #1
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_kill>:

int _kill(int pid, int sig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024e2:	f009 fd5d 	bl	800bfa0 <__errno>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2216      	movs	r2, #22
 80024ea:	601a      	str	r2, [r3, #0]
  return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_exit>:

void _exit (int status)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ffe7 	bl	80024d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800250a:	bf00      	nop
 800250c:	e7fd      	b.n	800250a <_exit+0x12>

0800250e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e00a      	b.n	8002536 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002520:	f3af 8000 	nop.w
 8002524:	4601      	mov	r1, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	60ba      	str	r2, [r7, #8]
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3301      	adds	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	dbf0      	blt.n	8002520 <_read+0x12>
  }

  return len;
 800253e:	687b      	ldr	r3, [r7, #4]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e009      	b.n	800256e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	60ba      	str	r2, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f980 	bl	8000868 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	dbf1      	blt.n	800255a <_write+0x12>
  }
  return len;
 8002576:	687b      	ldr	r3, [r7, #4]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_close>:

int _close(int file)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025a8:	605a      	str	r2, [r3, #4]
  return 0;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_isatty>:

int _isatty(int file)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c0:	2301      	movs	r3, #1
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f0:	4a14      	ldr	r2, [pc, #80]	@ (8002644 <_sbrk+0x5c>)
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <_sbrk+0x60>)
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025fc:	4b13      	ldr	r3, [pc, #76]	@ (800264c <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <_sbrk+0x64>)
 8002606:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <_sbrk+0x68>)
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d207      	bcs.n	8002628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002618:	f009 fcc2 	bl	800bfa0 <__errno>
 800261c:	4603      	mov	r3, r0
 800261e:	220c      	movs	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	e009      	b.n	800263c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002628:	4b08      	ldr	r3, [pc, #32]	@ (800264c <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262e:	4b07      	ldr	r3, [pc, #28]	@ (800264c <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	4a05      	ldr	r2, [pc, #20]	@ (800264c <_sbrk+0x64>)
 8002638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	24050000 	.word	0x24050000
 8002648:	00000400 	.word	0x00000400
 800264c:	24000754 	.word	0x24000754
 8002650:	24000ae8 	.word	0x24000ae8

08002654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002658:	4b3e      	ldr	r3, [pc, #248]	@ (8002754 <SystemInit+0x100>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265e:	4a3d      	ldr	r2, [pc, #244]	@ (8002754 <SystemInit+0x100>)
 8002660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002668:	4b3b      	ldr	r3, [pc, #236]	@ (8002758 <SystemInit+0x104>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	2b06      	cmp	r3, #6
 8002672:	d807      	bhi.n	8002684 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002674:	4b38      	ldr	r3, [pc, #224]	@ (8002758 <SystemInit+0x104>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 030f 	bic.w	r3, r3, #15
 800267c:	4a36      	ldr	r2, [pc, #216]	@ (8002758 <SystemInit+0x104>)
 800267e:	f043 0307 	orr.w	r3, r3, #7
 8002682:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002684:	4b35      	ldr	r3, [pc, #212]	@ (800275c <SystemInit+0x108>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a34      	ldr	r2, [pc, #208]	@ (800275c <SystemInit+0x108>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002690:	4b32      	ldr	r3, [pc, #200]	@ (800275c <SystemInit+0x108>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002696:	4b31      	ldr	r3, [pc, #196]	@ (800275c <SystemInit+0x108>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4930      	ldr	r1, [pc, #192]	@ (800275c <SystemInit+0x108>)
 800269c:	4b30      	ldr	r3, [pc, #192]	@ (8002760 <SystemInit+0x10c>)
 800269e:	4013      	ands	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002758 <SystemInit+0x104>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002758 <SystemInit+0x104>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 030f 	bic.w	r3, r3, #15
 80026b6:	4a28      	ldr	r2, [pc, #160]	@ (8002758 <SystemInit+0x104>)
 80026b8:	f043 0307 	orr.w	r3, r3, #7
 80026bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026be:	4b27      	ldr	r3, [pc, #156]	@ (800275c <SystemInit+0x108>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026c4:	4b25      	ldr	r3, [pc, #148]	@ (800275c <SystemInit+0x108>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026ca:	4b24      	ldr	r3, [pc, #144]	@ (800275c <SystemInit+0x108>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026d0:	4b22      	ldr	r3, [pc, #136]	@ (800275c <SystemInit+0x108>)
 80026d2:	4a24      	ldr	r2, [pc, #144]	@ (8002764 <SystemInit+0x110>)
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026d6:	4b21      	ldr	r3, [pc, #132]	@ (800275c <SystemInit+0x108>)
 80026d8:	4a23      	ldr	r2, [pc, #140]	@ (8002768 <SystemInit+0x114>)
 80026da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026dc:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <SystemInit+0x108>)
 80026de:	4a23      	ldr	r2, [pc, #140]	@ (800276c <SystemInit+0x118>)
 80026e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026e2:	4b1e      	ldr	r3, [pc, #120]	@ (800275c <SystemInit+0x108>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	@ (800275c <SystemInit+0x108>)
 80026ea:	4a20      	ldr	r2, [pc, #128]	@ (800276c <SystemInit+0x118>)
 80026ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026ee:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <SystemInit+0x108>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026f4:	4b19      	ldr	r3, [pc, #100]	@ (800275c <SystemInit+0x108>)
 80026f6:	4a1d      	ldr	r2, [pc, #116]	@ (800276c <SystemInit+0x118>)
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026fa:	4b18      	ldr	r3, [pc, #96]	@ (800275c <SystemInit+0x108>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002700:	4b16      	ldr	r3, [pc, #88]	@ (800275c <SystemInit+0x108>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a15      	ldr	r2, [pc, #84]	@ (800275c <SystemInit+0x108>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800270c:	4b13      	ldr	r3, [pc, #76]	@ (800275c <SystemInit+0x108>)
 800270e:	2200      	movs	r2, #0
 8002710:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002712:	4b12      	ldr	r3, [pc, #72]	@ (800275c <SystemInit+0x108>)
 8002714:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d113      	bne.n	8002748 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002720:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <SystemInit+0x108>)
 8002722:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002726:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <SystemInit+0x108>)
 8002728:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800272c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002730:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <SystemInit+0x11c>)
 8002732:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002736:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <SystemInit+0x108>)
 800273a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800273e:	4a07      	ldr	r2, [pc, #28]	@ (800275c <SystemInit+0x108>)
 8002740:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002744:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00
 8002758:	52002000 	.word	0x52002000
 800275c:	58024400 	.word	0x58024400
 8002760:	eaf6ed7f 	.word	0xeaf6ed7f
 8002764:	02020200 	.word	0x02020200
 8002768:	01ff0000 	.word	0x01ff0000
 800276c:	01010280 	.word	0x01010280
 8002770:	52004000 	.word	0x52004000

08002774 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002778:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <ExitRun0Mode+0x2c>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <ExitRun0Mode+0x2c>)
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002784:	bf00      	nop
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <ExitRun0Mode+0x2c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f9      	beq.n	8002786 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	58024800 	.word	0x58024800

080027a4 <__CRC16>:
    0x40
};


static uint16_t __CRC16(uint8_t *puchMsg, uint16_t usDataLen)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
    uint8_t uchCRCHi = 0xFF;
 80027b0:	23ff      	movs	r3, #255	@ 0xff
 80027b2:	75fb      	strb	r3, [r7, #23]
    uint8_t uchCRCLo = 0xFF;
 80027b4:	23ff      	movs	r3, #255	@ 0xff
 80027b6:	75bb      	strb	r3, [r7, #22]
    uint8_t uIndex;
    int i = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
    uchCRCHi = 0xFF;
 80027bc:	23ff      	movs	r3, #255	@ 0xff
 80027be:	75fb      	strb	r3, [r7, #23]
    uchCRCLo = 0xFF;
 80027c0:	23ff      	movs	r3, #255	@ 0xff
 80027c2:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 80027c4:	e013      	b.n	80027ee <__CRC16+0x4a>
    {
        uIndex = uchCRCHi ^ puchMsg[i];
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	4053      	eors	r3, r2
 80027d2:	73fb      	strb	r3, [r7, #15]
        uchCRCHi = uchCRCLo ^ __auchCRCHi[uIndex];
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <__CRC16+0x70>)
 80027d8:	5cd2      	ldrb	r2, [r2, r3]
 80027da:	7dbb      	ldrb	r3, [r7, #22]
 80027dc:	4053      	eors	r3, r2
 80027de:	75fb      	strb	r3, [r7, #23]
        uchCRCLo = __auchCRCLo[uIndex] ;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <__CRC16+0x74>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	3301      	adds	r3, #1
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	dbe7      	blt.n	80027c6 <__CRC16+0x22>
    }
    return (uint16_t)(((uint16_t)uchCRCHi << 8) | (uint16_t)uchCRCLo) ;
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	7dbb      	ldrb	r3, [r7, #22]
 8002800:	b21b      	sxth	r3, r3
 8002802:	4313      	orrs	r3, r2
 8002804:	b21b      	sxth	r3, r3
 8002806:	b29b      	uxth	r3, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	0800e498 	.word	0x0800e498
 8002818:	0800e598 	.word	0x0800e598

0800281c <__CaliSum>:
static uint8_t __CaliSum(uint8_t *data, uint32_t len)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint8_t ucCheck = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	72fb      	strb	r3, [r7, #11]
    for(i=0; i<len; i++) ucCheck += *(data + i);
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e009      	b.n	8002844 <__CaliSum+0x28>
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	7afb      	ldrb	r3, [r7, #11]
 800283a:	4413      	add	r3, r2
 800283c:	72fb      	strb	r3, [r7, #11]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3301      	adds	r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d3f1      	bcc.n	8002830 <__CaliSum+0x14>
    return ucCheck;
 800284c:	7afb      	ldrb	r3, [r7, #11]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <WitSerialWriteRegister>:
int32_t WitSerialWriteRegister(SerialWrite Write_func)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    if(!Write_func)return WIT_HAL_INVAL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <WitSerialWriteRegister+0x14>
 800286a:	f06f 0305 	mvn.w	r3, #5
 800286e:	e003      	b.n	8002878 <WitSerialWriteRegister+0x1c>
    p_WitSerialWriteFunc = Write_func;
 8002870:	4a04      	ldr	r2, [pc, #16]	@ (8002884 <WitSerialWriteRegister+0x28>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	24000758 	.word	0x24000758

08002888 <CopeWitData>:
static void CopeWitData(uint8_t ucIndex, uint16_t *p_data, uint32_t uiLen)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	@ 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	73fb      	strb	r3, [r7, #15]
    uint32_t uiReg1 = 0, uiReg2 = 0, uiReg1Len = 0, uiReg2Len = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
    uint16_t *p_usReg1Val = p_data;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	617b      	str	r3, [r7, #20]
    uint16_t *p_usReg2Val = p_data+3;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3306      	adds	r3, #6
 80028ae:	613b      	str	r3, [r7, #16]
    
    uiReg1Len = 4;
 80028b0:	2304      	movs	r3, #4
 80028b2:	61fb      	str	r3, [r7, #28]
    switch(ucIndex)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	3b50      	subs	r3, #80	@ 0x50
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	f200 8080 	bhi.w	80029be <CopeWitData+0x136>
 80028be:	a201      	add	r2, pc, #4	@ (adr r2, 80028c4 <CopeWitData+0x3c>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	08002929 	.word	0x08002929
 80028c8:	08002905 	.word	0x08002905
 80028cc:	0800292f 	.word	0x0800292f
 80028d0:	08002917 	.word	0x08002917
 80028d4:	08002935 	.word	0x08002935
 80028d8:	0800293b 	.word	0x0800293b
 80028dc:	08002941 	.word	0x08002941
 80028e0:	08002947 	.word	0x08002947
 80028e4:	0800294d 	.word	0x0800294d
 80028e8:	08002953 	.word	0x08002953
 80028ec:	08002959 	.word	0x08002959
 80028f0:	080029bf 	.word	0x080029bf
 80028f4:	080029bf 	.word	0x080029bf
 80028f8:	080029bf 	.word	0x080029bf
 80028fc:	080029bf 	.word	0x080029bf
 8002900:	0800295f 	.word	0x0800295f
    {
        case WIT_ACC:   uiReg1 = AX;    uiReg1Len = 3;  uiReg2 = TEMP;  uiReg2Len = 1;  break;
 8002904:	2334      	movs	r3, #52	@ 0x34
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
 8002908:	2303      	movs	r3, #3
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	2340      	movs	r3, #64	@ 0x40
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	2301      	movs	r3, #1
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	e027      	b.n	8002966 <CopeWitData+0xde>
        case WIT_ANGLE: uiReg1 = Roll;  uiReg1Len = 3;  uiReg2 = VERSION;  uiReg2Len = 1;  break;
 8002916:	233d      	movs	r3, #61	@ 0x3d
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
 800291a:	2303      	movs	r3, #3
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	232e      	movs	r3, #46	@ 0x2e
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	2301      	movs	r3, #1
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	e01e      	b.n	8002966 <CopeWitData+0xde>
        case WIT_TIME:  uiReg1 = YYMM;	break;
 8002928:	2330      	movs	r3, #48	@ 0x30
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
 800292c:	e01b      	b.n	8002966 <CopeWitData+0xde>
        case WIT_GYRO:  uiReg1 = GX;  break;
 800292e:	2337      	movs	r3, #55	@ 0x37
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
 8002932:	e018      	b.n	8002966 <CopeWitData+0xde>
        case WIT_MAGNETIC: uiReg1 = HX;  break;
 8002934:	233a      	movs	r3, #58	@ 0x3a
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
 8002938:	e015      	b.n	8002966 <CopeWitData+0xde>
        case WIT_DPORT: uiReg1 = D0Status;  break;
 800293a:	2341      	movs	r3, #65	@ 0x41
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
 800293e:	e012      	b.n	8002966 <CopeWitData+0xde>
        case WIT_PRESS: uiReg1 = PressureL;  break;
 8002940:	2345      	movs	r3, #69	@ 0x45
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
 8002944:	e00f      	b.n	8002966 <CopeWitData+0xde>
        case WIT_GPS:   uiReg1 = LonL;  break;
 8002946:	2349      	movs	r3, #73	@ 0x49
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
 800294a:	e00c      	b.n	8002966 <CopeWitData+0xde>
        case WIT_VELOCITY: uiReg1 = GPSHeight;  break;
 800294c:	234d      	movs	r3, #77	@ 0x4d
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002950:	e009      	b.n	8002966 <CopeWitData+0xde>
        case WIT_QUATER:    uiReg1 = q0;  break;
 8002952:	2351      	movs	r3, #81	@ 0x51
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
 8002956:	e006      	b.n	8002966 <CopeWitData+0xde>
        case WIT_GSA:   uiReg1 = SVNUM;  break;
 8002958:	2355      	movs	r3, #85	@ 0x55
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
 800295c:	e003      	b.n	8002966 <CopeWitData+0xde>
        case WIT_REGVALUE:  uiReg1 = s_uiReadRegIndex;  break;
 800295e:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <CopeWitData+0x140>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
 8002964:	bf00      	nop
		default:
			return ;

    }
    if(uiLen == 3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d103      	bne.n	8002974 <CopeWitData+0xec>
    {
        uiReg1Len = 3;
 800296c:	2303      	movs	r3, #3
 800296e:	61fb      	str	r3, [r7, #28]
        uiReg2Len = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
    }
    if(uiReg1Len)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00e      	beq.n	8002998 <CopeWitData+0x110>
	{
		memcpy(&sReg[uiReg1], p_usReg1Val, uiReg1Len<<1);
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4a13      	ldr	r2, [pc, #76]	@ (80029cc <CopeWitData+0x144>)
 8002980:	1898      	adds	r0, r3, r2
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	461a      	mov	r2, r3
 8002988:	6979      	ldr	r1, [r7, #20]
 800298a:	f009 fb36 	bl	800bffa <memcpy>
		p_WitRegUpdateCbFunc(uiReg1, uiReg1Len);
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <CopeWitData+0x148>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69f9      	ldr	r1, [r7, #28]
 8002994:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002996:	4798      	blx	r3
	}
    if(uiReg2Len)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <CopeWitData+0x138>
	{
		memcpy(&sReg[uiReg2], p_usReg2Val, uiReg2Len<<1);
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4a0a      	ldr	r2, [pc, #40]	@ (80029cc <CopeWitData+0x144>)
 80029a4:	1898      	adds	r0, r3, r2
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	461a      	mov	r2, r3
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	f009 fb24 	bl	800bffa <memcpy>
		p_WitRegUpdateCbFunc(uiReg2, uiReg2Len);
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <CopeWitData+0x148>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	6a38      	ldr	r0, [r7, #32]
 80029ba:	4798      	blx	r3
 80029bc:	e000      	b.n	80029c0 <CopeWitData+0x138>
			return ;
 80029be:	bf00      	nop
	}
}
 80029c0:	3728      	adds	r7, #40	@ 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	24000870 	.word	0x24000870
 80029cc:	24000874 	.word	0x24000874
 80029d0:	24000764 	.word	0x24000764

080029d4 <WitSerialDataIn>:

void WitSerialDataIn(uint8_t ucData)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
    uint16_t usCRC16, usTemp, i, usData[4];
    uint8_t ucSum;

    if(p_WitRegUpdateCbFunc == NULL)return ;
 80029de:	4b8d      	ldr	r3, [pc, #564]	@ (8002c14 <WitSerialDataIn+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 810f 	beq.w	8002c06 <WitSerialDataIn+0x232>
    s_ucWitDataBuff[s_uiWitDataCnt++] = ucData;
 80029e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002c18 <WitSerialDataIn+0x244>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	498a      	ldr	r1, [pc, #552]	@ (8002c18 <WitSerialDataIn+0x244>)
 80029f0:	600a      	str	r2, [r1, #0]
 80029f2:	498a      	ldr	r1, [pc, #552]	@ (8002c1c <WitSerialDataIn+0x248>)
 80029f4:	79fa      	ldrb	r2, [r7, #7]
 80029f6:	54ca      	strb	r2, [r1, r3]
    switch(s_uiProtoclo)
 80029f8:	4b89      	ldr	r3, [pc, #548]	@ (8002c20 <WitSerialDataIn+0x24c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	f200 80f9 	bhi.w	8002bf4 <WitSerialDataIn+0x220>
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	f080 80ef 	bcs.w	8002be6 <WitSerialDataIn+0x212>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <WitSerialDataIn+0x3e>
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d06f      	beq.n	8002af0 <WitSerialDataIn+0x11c>
 8002a10:	e0f0      	b.n	8002bf4 <WitSerialDataIn+0x220>
    {
        case WIT_PROTOCOL_NORMAL:
            if(s_ucWitDataBuff[0] != 0x55)
 8002a12:	4b82      	ldr	r3, [pc, #520]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b55      	cmp	r3, #85	@ 0x55
 8002a18:	d00c      	beq.n	8002a34 <WitSerialDataIn+0x60>
            {
                s_uiWitDataCnt--;
 8002a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	4a7d      	ldr	r2, [pc, #500]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002a22:	6013      	str	r3, [r2, #0]
                memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002a24:	4b7c      	ldr	r3, [pc, #496]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	497e      	ldr	r1, [pc, #504]	@ (8002c24 <WitSerialDataIn+0x250>)
 8002a2c:	487b      	ldr	r0, [pc, #492]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002a2e:	f009 fae4 	bl	800bffa <memcpy>
                return ;
 8002a32:	e0eb      	b.n	8002c0c <WitSerialDataIn+0x238>
            }
            if(s_uiWitDataCnt >= 11)
 8002a34:	4b78      	ldr	r3, [pc, #480]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b0a      	cmp	r3, #10
 8002a3a:	f240 80d8 	bls.w	8002bee <WitSerialDataIn+0x21a>
            {
                ucSum = __CaliSum(s_ucWitDataBuff, 10);
 8002a3e:	210a      	movs	r1, #10
 8002a40:	4876      	ldr	r0, [pc, #472]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002a42:	f7ff feeb 	bl	800281c <__CaliSum>
 8002a46:	4603      	mov	r3, r0
 8002a48:	747b      	strb	r3, [r7, #17]
                if(ucSum != s_ucWitDataBuff[10])
 8002a4a:	4b74      	ldr	r3, [pc, #464]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002a4c:	7a9b      	ldrb	r3, [r3, #10]
 8002a4e:	7c7a      	ldrb	r2, [r7, #17]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d00c      	beq.n	8002a6e <WitSerialDataIn+0x9a>
                {
                    s_uiWitDataCnt--;
 8002a54:	4b70      	ldr	r3, [pc, #448]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	4a6f      	ldr	r2, [pc, #444]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002a5c:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002a5e:	4b6e      	ldr	r3, [pc, #440]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	496f      	ldr	r1, [pc, #444]	@ (8002c24 <WitSerialDataIn+0x250>)
 8002a66:	486d      	ldr	r0, [pc, #436]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002a68:	f009 fac7 	bl	800bffa <memcpy>
                    return ;
 8002a6c:	e0ce      	b.n	8002c0c <WitSerialDataIn+0x238>
                }
                usData[0] = ((uint16_t)s_ucWitDataBuff[3] << 8) | s_ucWitDataBuff[2];
 8002a6e:	4b6b      	ldr	r3, [pc, #428]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002a70:	78db      	ldrb	r3, [r3, #3]
 8002a72:	b21b      	sxth	r3, r3
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	b21a      	sxth	r2, r3
 8002a78:	4b68      	ldr	r3, [pc, #416]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002a7a:	789b      	ldrb	r3, [r3, #2]
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	813b      	strh	r3, [r7, #8]
                usData[1] = ((uint16_t)s_ucWitDataBuff[5] << 8) | s_ucWitDataBuff[4];
 8002a86:	4b65      	ldr	r3, [pc, #404]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002a88:	795b      	ldrb	r3, [r3, #5]
 8002a8a:	b21b      	sxth	r3, r3
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	4b62      	ldr	r3, [pc, #392]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002a92:	791b      	ldrb	r3, [r3, #4]
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b21b      	sxth	r3, r3
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	817b      	strh	r3, [r7, #10]
                usData[2] = ((uint16_t)s_ucWitDataBuff[7] << 8) | s_ucWitDataBuff[6];
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002aa0:	79db      	ldrb	r3, [r3, #7]
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	4b5c      	ldr	r3, [pc, #368]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002aaa:	799b      	ldrb	r3, [r3, #6]
 8002aac:	b21b      	sxth	r3, r3
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	b21b      	sxth	r3, r3
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	81bb      	strh	r3, [r7, #12]
                usData[3] = ((uint16_t)s_ucWitDataBuff[9] << 8) | s_ucWitDataBuff[8];
 8002ab6:	4b59      	ldr	r3, [pc, #356]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002ab8:	7a5b      	ldrb	r3, [r3, #9]
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	b21a      	sxth	r2, r3
 8002ac0:	4b56      	ldr	r3, [pc, #344]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002ac2:	7a1b      	ldrb	r3, [r3, #8]
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	81fb      	strh	r3, [r7, #14]
                CopeWitData(s_ucWitDataBuff[1], usData, 4);
 8002ace:	4b53      	ldr	r3, [pc, #332]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002ad0:	785b      	ldrb	r3, [r3, #1]
 8002ad2:	f107 0108 	add.w	r1, r7, #8
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fed5 	bl	8002888 <CopeWitData>
                printf(usData);
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f009 f898 	bl	800bc18 <iprintf>
                s_uiWitDataCnt = 0;
 8002ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
            }
        break;
 8002aee:	e07e      	b.n	8002bee <WitSerialDataIn+0x21a>
        case WIT_PROTOCOL_MODBUS:
            if(s_uiWitDataCnt > 2)
 8002af0:	4b49      	ldr	r3, [pc, #292]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d97c      	bls.n	8002bf2 <WitSerialDataIn+0x21e>
            {
                if(s_ucWitDataBuff[1] != FuncR)
 8002af8:	4b48      	ldr	r3, [pc, #288]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d00c      	beq.n	8002b1a <WitSerialDataIn+0x146>
                {
                    s_uiWitDataCnt--;
 8002b00:	4b45      	ldr	r3, [pc, #276]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	4a44      	ldr	r2, [pc, #272]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b08:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002b0a:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4944      	ldr	r1, [pc, #272]	@ (8002c24 <WitSerialDataIn+0x250>)
 8002b12:	4842      	ldr	r0, [pc, #264]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002b14:	f009 fa71 	bl	800bffa <memcpy>
                    return ;
 8002b18:	e078      	b.n	8002c0c <WitSerialDataIn+0x238>
                }
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 8002b1a:	4b40      	ldr	r3, [pc, #256]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002b1c:	789b      	ldrb	r3, [r3, #2]
 8002b1e:	3305      	adds	r3, #5
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b3d      	ldr	r3, [pc, #244]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d86f      	bhi.n	8002c0a <WitSerialDataIn+0x236>
                usTemp = ((uint16_t)s_ucWitDataBuff[s_uiWitDataCnt-2] << 8) | s_ucWitDataBuff[s_uiWitDataCnt-1];
 8002b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3b02      	subs	r3, #2
 8002b30:	4a3a      	ldr	r2, [pc, #232]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	b21a      	sxth	r2, r3
 8002b3a:	4b37      	ldr	r3, [pc, #220]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	4936      	ldr	r1, [pc, #216]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	82bb      	strh	r3, [r7, #20]
                usCRC16 = __CRC16(s_ucWitDataBuff, s_uiWitDataCnt-2);
 8002b4c:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b02      	subs	r3, #2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	4830      	ldr	r0, [pc, #192]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002b5a:	f7ff fe23 	bl	80027a4 <__CRC16>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	827b      	strh	r3, [r7, #18]
                if(usTemp != usCRC16)
 8002b62:	8aba      	ldrh	r2, [r7, #20]
 8002b64:	8a7b      	ldrh	r3, [r7, #18]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d00c      	beq.n	8002b84 <WitSerialDataIn+0x1b0>
                {
                    s_uiWitDataCnt--;
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	4a29      	ldr	r2, [pc, #164]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b72:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002b74:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	492a      	ldr	r1, [pc, #168]	@ (8002c24 <WitSerialDataIn+0x250>)
 8002b7c:	4827      	ldr	r0, [pc, #156]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002b7e:	f009 fa3c 	bl	800bffa <memcpy>
                    return ;
 8002b82:	e043      	b.n	8002c0c <WitSerialDataIn+0x238>
                }
                usTemp = s_ucWitDataBuff[2] >> 1;
 8002b84:	4b25      	ldr	r3, [pc, #148]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002b86:	789b      	ldrb	r3, [r3, #2]
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	82bb      	strh	r3, [r7, #20]
                for(i = 0; i < usTemp; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	82fb      	strh	r3, [r7, #22]
 8002b92:	e019      	b.n	8002bc8 <WitSerialDataIn+0x1f4>
                {
                    sReg[i+s_uiReadRegIndex] = ((uint16_t)s_ucWitDataBuff[(i<<1)+3] << 8) | s_ucWitDataBuff[(i<<1)+4];
 8002b94:	8afb      	ldrh	r3, [r7, #22]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	3303      	adds	r3, #3
 8002b9a:	4a20      	ldr	r2, [pc, #128]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	b219      	sxth	r1, r3
 8002ba4:	8afb      	ldrh	r3, [r7, #22]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	3304      	adds	r3, #4
 8002baa:	4a1c      	ldr	r2, [pc, #112]	@ (8002c1c <WitSerialDataIn+0x248>)
 8002bac:	5cd3      	ldrb	r3, [r2, r3]
 8002bae:	b21a      	sxth	r2, r3
 8002bb0:	8af8      	ldrh	r0, [r7, #22]
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <WitSerialDataIn+0x254>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4403      	add	r3, r0
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	b211      	sxth	r1, r2
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <WitSerialDataIn+0x258>)
 8002bbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < usTemp; i++)
 8002bc2:	8afb      	ldrh	r3, [r7, #22]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	82fb      	strh	r3, [r7, #22]
 8002bc8:	8afa      	ldrh	r2, [r7, #22]
 8002bca:	8abb      	ldrh	r3, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d3e1      	bcc.n	8002b94 <WitSerialDataIn+0x1c0>
                }
                p_WitRegUpdateCbFunc(s_uiReadRegIndex, usTemp);
 8002bd0:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <WitSerialDataIn+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a14      	ldr	r2, [pc, #80]	@ (8002c28 <WitSerialDataIn+0x254>)
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	8ab9      	ldrh	r1, [r7, #20]
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4798      	blx	r3
                s_uiWitDataCnt = 0;
 8002bde:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
            }
        break;
 8002be4:	e005      	b.n	8002bf2 <WitSerialDataIn+0x21e>
        case WIT_PROTOCOL_CAN:
        case WIT_PROTOCOL_I2C:
        s_uiWitDataCnt = 0;
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
        break;
 8002bec:	e002      	b.n	8002bf4 <WitSerialDataIn+0x220>
        break;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <WitSerialDataIn+0x220>
        break;
 8002bf2:	bf00      	nop
    }
    if(s_uiWitDataCnt == WIT_DATA_BUFF_SIZE)s_uiWitDataCnt = 0;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bfc:	d106      	bne.n	8002c0c <WitSerialDataIn+0x238>
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <WitSerialDataIn+0x244>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e002      	b.n	8002c0c <WitSerialDataIn+0x238>
    if(p_WitRegUpdateCbFunc == NULL)return ;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <WitSerialDataIn+0x238>
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 8002c0a:	bf00      	nop
}
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	24000764 	.word	0x24000764
 8002c18:	24000868 	.word	0x24000868
 8002c1c:	24000768 	.word	0x24000768
 8002c20:	2400086c 	.word	0x2400086c
 8002c24:	24000769 	.word	0x24000769
 8002c28:	24000870 	.word	0x24000870
 8002c2c:	24000874 	.word	0x24000874

08002c30 <WitRegisterCallBack>:
        case WIT_PROTOCOL_I2C:
            break;
    }
}
int32_t WitRegisterCallBack(RegUpdateCb update_func)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    if(!update_func)return WIT_HAL_INVAL;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <WitRegisterCallBack+0x14>
 8002c3e:	f06f 0305 	mvn.w	r3, #5
 8002c42:	e003      	b.n	8002c4c <WitRegisterCallBack+0x1c>
    p_WitRegUpdateCbFunc = update_func;
 8002c44:	4a04      	ldr	r2, [pc, #16]	@ (8002c58 <WitRegisterCallBack+0x28>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	24000764 	.word	0x24000764

08002c5c <WitReadReg>:
            return WIT_HAL_INVAL;        
    }
    return WIT_HAL_OK;
}
int32_t WitReadReg(uint32_t uiReg, uint32_t uiReadNum)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
    uint16_t usTemp, i;
    uint8_t ucBuff[8];
    if((uiReg + uiReadNum) >= REGSIZE)return WIT_HAL_INVAL;
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	2b8f      	cmp	r3, #143	@ 0x8f
 8002c6e:	d902      	bls.n	8002c76 <WitReadReg+0x1a>
 8002c70:	f06f 0305 	mvn.w	r3, #5
 8002c74:	e0e5      	b.n	8002e42 <WitReadReg+0x1e6>
    switch(s_uiProtoclo)
 8002c76:	4b75      	ldr	r3, [pc, #468]	@ (8002e4c <WitReadReg+0x1f0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	f200 80d9 	bhi.w	8002e32 <WitReadReg+0x1d6>
 8002c80:	a201      	add	r2, pc, #4	@ (adr r2, 8002c88 <WitReadReg+0x2c>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002cdd 	.word	0x08002cdd
 8002c90:	08002d55 	.word	0x08002d55
 8002c94:	08002d9b 	.word	0x08002d9b
    {
        case WIT_PROTOCOL_NORMAL:
            if(uiReadNum > 4)return WIT_HAL_INVAL;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d902      	bls.n	8002ca4 <WitReadReg+0x48>
 8002c9e:	f06f 0305 	mvn.w	r3, #5
 8002ca2:	e0ce      	b.n	8002e42 <WitReadReg+0x1e6>
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e50 <WitReadReg+0x1f4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <WitReadReg+0x56>
 8002cac:	f06f 0304 	mvn.w	r3, #4
 8002cb0:	e0c7      	b.n	8002e42 <WitReadReg+0x1e6>
            ucBuff[0] = 0xFF;
 8002cb2:	23ff      	movs	r3, #255	@ 0xff
 8002cb4:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8002cb6:	23aa      	movs	r3, #170	@ 0xaa
 8002cb8:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8002cba:	2327      	movs	r3, #39	@ 0x27
 8002cbc:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	743b      	strb	r3, [r7, #16]
            p_WitSerialWriteFunc(ucBuff, 5);
 8002ccc:	4b60      	ldr	r3, [pc, #384]	@ (8002e50 <WitReadReg+0x1f4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f107 020c 	add.w	r2, r7, #12
 8002cd4:	2105      	movs	r1, #5
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4798      	blx	r3
            break;
 8002cda:	e0ae      	b.n	8002e3a <WitReadReg+0x1de>
        case WIT_PROTOCOL_MODBUS:
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8002cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8002e50 <WitReadReg+0x1f4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <WitReadReg+0x8e>
 8002ce4:	f06f 0304 	mvn.w	r3, #4
 8002ce8:	e0ab      	b.n	8002e42 <WitReadReg+0x1e6>
            usTemp = uiReadNum << 1;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	82bb      	strh	r3, [r7, #20]
            if((usTemp + 5) > WIT_DATA_BUFF_SIZE)return WIT_HAL_NOMEM;
 8002cf2:	8abb      	ldrh	r3, [r7, #20]
 8002cf4:	2bfb      	cmp	r3, #251	@ 0xfb
 8002cf6:	d902      	bls.n	8002cfe <WitReadReg+0xa2>
 8002cf8:	f06f 0303 	mvn.w	r3, #3
 8002cfc:	e0a1      	b.n	8002e42 <WitReadReg+0x1e6>
            ucBuff[0] = s_ucAddr;
 8002cfe:	4b55      	ldr	r3, [pc, #340]	@ (8002e54 <WitReadReg+0x1f8>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = FuncR;
 8002d04:	2303      	movs	r3, #3
 8002d06:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = uiReg >> 8;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xFF;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReadNum >> 8;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	743b      	strb	r3, [r7, #16]
            ucBuff[5] = uiReadNum & 0xff;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	747b      	strb	r3, [r7, #17]
            usTemp = __CRC16(ucBuff, 6);
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	2106      	movs	r1, #6
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fd3a 	bl	80027a4 <__CRC16>
 8002d30:	4603      	mov	r3, r0
 8002d32:	82bb      	strh	r3, [r7, #20]
            ucBuff[6] = usTemp >> 8;
 8002d34:	8abb      	ldrh	r3, [r7, #20]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	74bb      	strb	r3, [r7, #18]
            ucBuff[7] = usTemp & 0xff;
 8002d3e:	8abb      	ldrh	r3, [r7, #20]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	74fb      	strb	r3, [r7, #19]
            p_WitSerialWriteFunc(ucBuff, 8);
 8002d44:	4b42      	ldr	r3, [pc, #264]	@ (8002e50 <WitReadReg+0x1f4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f107 020c 	add.w	r2, r7, #12
 8002d4c:	2108      	movs	r1, #8
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4798      	blx	r3
            break;
 8002d52:	e072      	b.n	8002e3a <WitReadReg+0x1de>
        case WIT_PROTOCOL_CAN:
            if(uiReadNum > 3)return WIT_HAL_INVAL;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d902      	bls.n	8002d60 <WitReadReg+0x104>
 8002d5a:	f06f 0305 	mvn.w	r3, #5
 8002d5e:	e070      	b.n	8002e42 <WitReadReg+0x1e6>
            if(p_WitCanWriteFunc == NULL)return WIT_HAL_EMPTY;
 8002d60:	4b3d      	ldr	r3, [pc, #244]	@ (8002e58 <WitReadReg+0x1fc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <WitReadReg+0x112>
 8002d68:	f06f 0304 	mvn.w	r3, #4
 8002d6c:	e069      	b.n	8002e42 <WitReadReg+0x1e6>
            ucBuff[0] = 0xFF;
 8002d6e:	23ff      	movs	r3, #255	@ 0xff
 8002d70:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8002d72:	23aa      	movs	r3, #170	@ 0xaa
 8002d74:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8002d76:	2327      	movs	r3, #39	@ 0x27
 8002d78:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	743b      	strb	r3, [r7, #16]
            p_WitCanWriteFunc(s_ucAddr, ucBuff, 5);
 8002d88:	4b33      	ldr	r3, [pc, #204]	@ (8002e58 <WitReadReg+0x1fc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a31      	ldr	r2, [pc, #196]	@ (8002e54 <WitReadReg+0x1f8>)
 8002d8e:	7810      	ldrb	r0, [r2, #0]
 8002d90:	f107 010c 	add.w	r1, r7, #12
 8002d94:	2205      	movs	r2, #5
 8002d96:	4798      	blx	r3
            break;
 8002d98:	e04f      	b.n	8002e3a <WitReadReg+0x1de>
        case WIT_PROTOCOL_I2C:
            if(p_WitI2cReadFunc == NULL)return WIT_HAL_EMPTY;
 8002d9a:	4b30      	ldr	r3, [pc, #192]	@ (8002e5c <WitReadReg+0x200>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <WitReadReg+0x14c>
 8002da2:	f06f 0304 	mvn.w	r3, #4
 8002da6:	e04c      	b.n	8002e42 <WitReadReg+0x1e6>
            usTemp = uiReadNum << 1;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	82bb      	strh	r3, [r7, #20]
            if(WIT_DATA_BUFF_SIZE < usTemp)return WIT_HAL_NOMEM;
 8002db0:	8abb      	ldrh	r3, [r7, #20]
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db6:	d902      	bls.n	8002dbe <WitReadReg+0x162>
 8002db8:	f06f 0303 	mvn.w	r3, #3
 8002dbc:	e041      	b.n	8002e42 <WitReadReg+0x1e6>
            if(p_WitI2cReadFunc(s_ucAddr << 1, uiReg, s_ucWitDataBuff, usTemp) == 1)
 8002dbe:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <WitReadReg+0x200>)
 8002dc0:	681c      	ldr	r4, [r3, #0]
 8002dc2:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <WitReadReg+0x1f8>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	b2d8      	uxtb	r0, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	b2d9      	uxtb	r1, r3
 8002dce:	8abb      	ldrh	r3, [r7, #20]
 8002dd0:	4a23      	ldr	r2, [pc, #140]	@ (8002e60 <WitReadReg+0x204>)
 8002dd2:	47a0      	blx	r4
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d12e      	bne.n	8002e38 <WitReadReg+0x1dc>
            {
                if(p_WitRegUpdateCbFunc == NULL)return WIT_HAL_EMPTY;
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <WitReadReg+0x208>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <WitReadReg+0x18c>
 8002de2:	f06f 0304 	mvn.w	r3, #4
 8002de6:	e02c      	b.n	8002e42 <WitReadReg+0x1e6>
                for(i = 0; i < uiReadNum; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	82fb      	strh	r3, [r7, #22]
 8002dec:	e017      	b.n	8002e1e <WitReadReg+0x1c2>
                {
                    sReg[i+uiReg] = ((uint16_t)s_ucWitDataBuff[(i<<1)+1] << 8) | s_ucWitDataBuff[i<<1];
 8002dee:	8afb      	ldrh	r3, [r7, #22]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	3301      	adds	r3, #1
 8002df4:	4a1a      	ldr	r2, [pc, #104]	@ (8002e60 <WitReadReg+0x204>)
 8002df6:	5cd3      	ldrb	r3, [r2, r3]
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	b219      	sxth	r1, r3
 8002dfe:	8afb      	ldrh	r3, [r7, #22]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4a17      	ldr	r2, [pc, #92]	@ (8002e60 <WitReadReg+0x204>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	b21a      	sxth	r2, r3
 8002e08:	8af8      	ldrh	r0, [r7, #22]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4403      	add	r3, r0
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	b211      	sxth	r1, r2
 8002e12:	4a15      	ldr	r2, [pc, #84]	@ (8002e68 <WitReadReg+0x20c>)
 8002e14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < uiReadNum; i++)
 8002e18:	8afb      	ldrh	r3, [r7, #22]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	82fb      	strh	r3, [r7, #22]
 8002e1e:	8afb      	ldrh	r3, [r7, #22]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d8e3      	bhi.n	8002dee <WitReadReg+0x192>
                }
                p_WitRegUpdateCbFunc(uiReg, uiReadNum);
 8002e26:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <WitReadReg+0x208>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6839      	ldr	r1, [r7, #0]
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
            }
			
            break;
 8002e30:	e002      	b.n	8002e38 <WitReadReg+0x1dc>
		default: 
            return WIT_HAL_INVAL;
 8002e32:	f06f 0305 	mvn.w	r3, #5
 8002e36:	e004      	b.n	8002e42 <WitReadReg+0x1e6>
            break;
 8002e38:	bf00      	nop
    }
    s_uiReadRegIndex = uiReg;
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e6c <WitReadReg+0x210>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6013      	str	r3, [r2, #0]

    return WIT_HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd90      	pop	{r4, r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2400086c 	.word	0x2400086c
 8002e50:	24000758 	.word	0x24000758
 8002e54:	24000024 	.word	0x24000024
 8002e58:	24000760 	.word	0x24000760
 8002e5c:	2400075c 	.word	0x2400075c
 8002e60:	24000768 	.word	0x24000768
 8002e64:	24000764 	.word	0x24000764
 8002e68:	24000874 	.word	0x24000874
 8002e6c:	24000870 	.word	0x24000870

08002e70 <WitInit>:
int32_t WitInit(uint32_t uiProtocol, uint8_t ucAddr)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
	if(uiProtocol > WIT_PROTOCOL_I2C)return WIT_HAL_INVAL;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d902      	bls.n	8002e88 <WitInit+0x18>
 8002e82:	f06f 0305 	mvn.w	r3, #5
 8002e86:	e009      	b.n	8002e9c <WitInit+0x2c>
    s_uiProtoclo = uiProtocol;
 8002e88:	4a07      	ldr	r2, [pc, #28]	@ (8002ea8 <WitInit+0x38>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
    s_ucAddr = ucAddr;
 8002e8e:	4a07      	ldr	r2, [pc, #28]	@ (8002eac <WitInit+0x3c>)
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	7013      	strb	r3, [r2, #0]
    s_uiWitDataCnt = 0;
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <WitInit+0x40>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
    return WIT_HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	2400086c 	.word	0x2400086c
 8002eac:	24000024 	.word	0x24000024
 8002eb0:	24000868 	.word	0x24000868

08002eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002eb4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002ef0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002eb8:	f7ff fc5c 	bl	8002774 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ebc:	f7ff fbca 	bl	8002654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec0:	480c      	ldr	r0, [pc, #48]	@ (8002ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ec2:	490d      	ldr	r1, [pc, #52]	@ (8002ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8002efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec8:	e002      	b.n	8002ed0 <LoopCopyDataInit>

08002eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ece:	3304      	adds	r3, #4

08002ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed4:	d3f9      	bcc.n	8002eca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8002f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002edc:	e001      	b.n	8002ee2 <LoopFillZerobss>

08002ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee0:	3204      	adds	r2, #4

08002ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee4:	d3fb      	bcc.n	8002ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ee6:	f009 f861 	bl	800bfac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eea:	f7fd feb1 	bl	8000c50 <main>
  bx  lr
 8002eee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ef0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ef4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ef8:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8002efc:	0800ea58 	.word	0x0800ea58
  ldr r2, =_sbss
 8002f00:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8002f04:	24000ae4 	.word	0x24000ae4

08002f08 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f08:	e7fe      	b.n	8002f08 <ADC3_IRQHandler>
	...

08002f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f12:	2003      	movs	r0, #3
 8002f14:	f000 f980 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f18:	f002 fd4a 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b15      	ldr	r3, [pc, #84]	@ (8002f74 <HAL_Init+0x68>)
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	4913      	ldr	r1, [pc, #76]	@ (8002f78 <HAL_Init+0x6c>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
 8002f34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f36:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <HAL_Init+0x68>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f78 <HAL_Init+0x6c>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f7c <HAL_Init+0x70>)
 8002f4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f50:	4a0b      	ldr	r2, [pc, #44]	@ (8002f80 <HAL_Init+0x74>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f56:	200f      	movs	r0, #15
 8002f58:	f000 f814 	bl	8002f84 <HAL_InitTick>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e002      	b.n	8002f6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f66:	f7ff f823 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	58024400 	.word	0x58024400
 8002f78:	0800e488 	.word	0x0800e488
 8002f7c:	24000020 	.word	0x24000020
 8002f80:	2400001c 	.word	0x2400001c

08002f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f8c:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <HAL_InitTick+0x60>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e021      	b.n	8002fdc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f98:	4b13      	ldr	r3, [pc, #76]	@ (8002fe8 <HAL_InitTick+0x64>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <HAL_InitTick+0x60>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f965 	bl	800327e <HAL_SYSTICK_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00e      	b.n	8002fdc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b0f      	cmp	r3, #15
 8002fc2:	d80a      	bhi.n	8002fda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f000 f92f 	bl	800322e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd0:	4a06      	ldr	r2, [pc, #24]	@ (8002fec <HAL_InitTick+0x68>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	2400002c 	.word	0x2400002c
 8002fe8:	2400001c 	.word	0x2400001c
 8002fec:	24000028 	.word	0x24000028

08002ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_IncTick+0x20>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_IncTick+0x24>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	4a04      	ldr	r2, [pc, #16]	@ (8003014 <HAL_IncTick+0x24>)
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	2400002c 	.word	0x2400002c
 8003014:	24000994 	.word	0x24000994

08003018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return uwTick;
 800301c:	4b03      	ldr	r3, [pc, #12]	@ (800302c <HAL_GetTick+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	24000994 	.word	0x24000994

08003030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff ffee 	bl	8003018 <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d005      	beq.n	8003056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800304a:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <HAL_Delay+0x44>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003056:	bf00      	nop
 8003058:	f7ff ffde 	bl	8003018 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	429a      	cmp	r2, r3
 8003066:	d8f7      	bhi.n	8003058 <HAL_Delay+0x28>
  {
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	2400002c 	.word	0x2400002c

08003078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <__NVIC_SetPriorityGrouping+0x40>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003094:	4013      	ands	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a6:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <__NVIC_SetPriorityGrouping+0x40>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	60d3      	str	r3, [r2, #12]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00
 80030bc:	05fa0000 	.word	0x05fa0000

080030c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c4:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <__NVIC_GetPriorityGrouping+0x18>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	f003 0307 	and.w	r3, r3, #7
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	db0b      	blt.n	8003106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	4907      	ldr	r1, [pc, #28]	@ (8003114 <__NVIC_EnableIRQ+0x38>)
 80030f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2001      	movs	r0, #1
 80030fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100

08003118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003128:	2b00      	cmp	r3, #0
 800312a:	db0a      	blt.n	8003142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	490c      	ldr	r1, [pc, #48]	@ (8003164 <__NVIC_SetPriority+0x4c>)
 8003132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003136:	0112      	lsls	r2, r2, #4
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	440b      	add	r3, r1
 800313c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003140:	e00a      	b.n	8003158 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4908      	ldr	r1, [pc, #32]	@ (8003168 <__NVIC_SetPriority+0x50>)
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	3b04      	subs	r3, #4
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	440b      	add	r3, r1
 8003156:	761a      	strb	r2, [r3, #24]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000e100 	.word	0xe000e100
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	@ 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f1c3 0307 	rsb	r3, r3, #7
 8003186:	2b04      	cmp	r3, #4
 8003188:	bf28      	it	cs
 800318a:	2304      	movcs	r3, #4
 800318c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3304      	adds	r3, #4
 8003192:	2b06      	cmp	r3, #6
 8003194:	d902      	bls.n	800319c <NVIC_EncodePriority+0x30>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3b03      	subs	r3, #3
 800319a:	e000      	b.n	800319e <NVIC_EncodePriority+0x32>
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	401a      	ands	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	43d9      	mvns	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	4313      	orrs	r3, r2
         );
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3724      	adds	r7, #36	@ 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e4:	d301      	bcc.n	80031ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00f      	b.n	800320a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <SysTick_Config+0x40>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f2:	210f      	movs	r1, #15
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	f7ff ff8e 	bl	8003118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031fc:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <SysTick_Config+0x40>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003202:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <SysTick_Config+0x40>)
 8003204:	2207      	movs	r2, #7
 8003206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	e000e010 	.word	0xe000e010

08003218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff29 	bl	8003078 <__NVIC_SetPriorityGrouping>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800323c:	f7ff ff40 	bl	80030c0 <__NVIC_GetPriorityGrouping>
 8003240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	6978      	ldr	r0, [r7, #20]
 8003248:	f7ff ff90 	bl	800316c <NVIC_EncodePriority>
 800324c:	4602      	mov	r2, r0
 800324e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff5f 	bl	8003118 <__NVIC_SetPriority>
}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800326c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff33 	bl	80030dc <__NVIC_EnableIRQ>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ffa4 	bl	80031d4 <SysTick_Config>
 800328c:	4603      	mov	r3, r0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800329c:	f3bf 8f5f 	dmb	sy
}
 80032a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80032a2:	4b07      	ldr	r3, [pc, #28]	@ (80032c0 <HAL_MPU_Disable+0x28>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	4a06      	ldr	r2, [pc, #24]	@ (80032c0 <HAL_MPU_Disable+0x28>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80032ae:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_MPU_Disable+0x2c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000ed00 	.word	0xe000ed00
 80032c4:	e000ed90 	.word	0xe000ed90

080032c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80032d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003300 <HAL_MPU_Enable+0x38>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80032da:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <HAL_MPU_Enable+0x3c>)
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	4a09      	ldr	r2, [pc, #36]	@ (8003304 <HAL_MPU_Enable+0x3c>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80032e6:	f3bf 8f4f 	dsb	sy
}
 80032ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032ec:	f3bf 8f6f 	isb	sy
}
 80032f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000ed90 	.word	0xe000ed90
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	785a      	ldrb	r2, [r3, #1]
 8003314:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_MPU_ConfigRegion+0x7c>)
 8003316:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003318:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <HAL_MPU_ConfigRegion+0x7c>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	4a19      	ldr	r2, [pc, #100]	@ (8003384 <HAL_MPU_ConfigRegion+0x7c>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003324:	4a17      	ldr	r2, [pc, #92]	@ (8003384 <HAL_MPU_ConfigRegion+0x7c>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7b1b      	ldrb	r3, [r3, #12]
 8003330:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7adb      	ldrb	r3, [r3, #11]
 8003336:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003338:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7a9b      	ldrb	r3, [r3, #10]
 800333e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003340:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7b5b      	ldrb	r3, [r3, #13]
 8003346:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003348:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7b9b      	ldrb	r3, [r3, #14]
 800334e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003350:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7bdb      	ldrb	r3, [r3, #15]
 8003356:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003358:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7a5b      	ldrb	r3, [r3, #9]
 800335e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003360:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7a1b      	ldrb	r3, [r3, #8]
 8003366:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003368:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003370:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003372:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003374:	6113      	str	r3, [r2, #16]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed90 	.word	0xe000ed90

08003388 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff fe42 	bl	8003018 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e2dc      	b.n	800395a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d008      	beq.n	80033be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2280      	movs	r2, #128	@ 0x80
 80033b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e2cd      	b.n	800395a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a76      	ldr	r2, [pc, #472]	@ (800359c <HAL_DMA_Abort+0x214>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d04a      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a74      	ldr	r2, [pc, #464]	@ (80035a0 <HAL_DMA_Abort+0x218>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d045      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a73      	ldr	r2, [pc, #460]	@ (80035a4 <HAL_DMA_Abort+0x21c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d040      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a71      	ldr	r2, [pc, #452]	@ (80035a8 <HAL_DMA_Abort+0x220>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d03b      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a70      	ldr	r2, [pc, #448]	@ (80035ac <HAL_DMA_Abort+0x224>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d036      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6e      	ldr	r2, [pc, #440]	@ (80035b0 <HAL_DMA_Abort+0x228>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d031      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6d      	ldr	r2, [pc, #436]	@ (80035b4 <HAL_DMA_Abort+0x22c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d02c      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a6b      	ldr	r2, [pc, #428]	@ (80035b8 <HAL_DMA_Abort+0x230>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d027      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6a      	ldr	r2, [pc, #424]	@ (80035bc <HAL_DMA_Abort+0x234>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d022      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a68      	ldr	r2, [pc, #416]	@ (80035c0 <HAL_DMA_Abort+0x238>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01d      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a67      	ldr	r2, [pc, #412]	@ (80035c4 <HAL_DMA_Abort+0x23c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d018      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a65      	ldr	r2, [pc, #404]	@ (80035c8 <HAL_DMA_Abort+0x240>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a64      	ldr	r2, [pc, #400]	@ (80035cc <HAL_DMA_Abort+0x244>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00e      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a62      	ldr	r2, [pc, #392]	@ (80035d0 <HAL_DMA_Abort+0x248>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a61      	ldr	r2, [pc, #388]	@ (80035d4 <HAL_DMA_Abort+0x24c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_DMA_Abort+0xd6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a5f      	ldr	r2, [pc, #380]	@ (80035d8 <HAL_DMA_Abort+0x250>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_DMA_Abort+0xda>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_DMA_Abort+0xdc>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d013      	beq.n	8003490 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 021e 	bic.w	r2, r2, #30
 8003476:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003486:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e00a      	b.n	80034a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 020e 	bic.w	r2, r2, #14
 800349e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3c      	ldr	r2, [pc, #240]	@ (800359c <HAL_DMA_Abort+0x214>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d072      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a3a      	ldr	r2, [pc, #232]	@ (80035a0 <HAL_DMA_Abort+0x218>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d06d      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a39      	ldr	r2, [pc, #228]	@ (80035a4 <HAL_DMA_Abort+0x21c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d068      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a37      	ldr	r2, [pc, #220]	@ (80035a8 <HAL_DMA_Abort+0x220>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d063      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a36      	ldr	r2, [pc, #216]	@ (80035ac <HAL_DMA_Abort+0x224>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d05e      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a34      	ldr	r2, [pc, #208]	@ (80035b0 <HAL_DMA_Abort+0x228>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d059      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a33      	ldr	r2, [pc, #204]	@ (80035b4 <HAL_DMA_Abort+0x22c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d054      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a31      	ldr	r2, [pc, #196]	@ (80035b8 <HAL_DMA_Abort+0x230>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d04f      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a30      	ldr	r2, [pc, #192]	@ (80035bc <HAL_DMA_Abort+0x234>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d04a      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2e      	ldr	r2, [pc, #184]	@ (80035c0 <HAL_DMA_Abort+0x238>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d045      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a2d      	ldr	r2, [pc, #180]	@ (80035c4 <HAL_DMA_Abort+0x23c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d040      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2b      	ldr	r2, [pc, #172]	@ (80035c8 <HAL_DMA_Abort+0x240>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d03b      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2a      	ldr	r2, [pc, #168]	@ (80035cc <HAL_DMA_Abort+0x244>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d036      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a28      	ldr	r2, [pc, #160]	@ (80035d0 <HAL_DMA_Abort+0x248>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d031      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a27      	ldr	r2, [pc, #156]	@ (80035d4 <HAL_DMA_Abort+0x24c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d02c      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a25      	ldr	r2, [pc, #148]	@ (80035d8 <HAL_DMA_Abort+0x250>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d027      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a24      	ldr	r2, [pc, #144]	@ (80035dc <HAL_DMA_Abort+0x254>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d022      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a22      	ldr	r2, [pc, #136]	@ (80035e0 <HAL_DMA_Abort+0x258>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01d      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a21      	ldr	r2, [pc, #132]	@ (80035e4 <HAL_DMA_Abort+0x25c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d018      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1f      	ldr	r2, [pc, #124]	@ (80035e8 <HAL_DMA_Abort+0x260>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1e      	ldr	r2, [pc, #120]	@ (80035ec <HAL_DMA_Abort+0x264>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00e      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1c      	ldr	r2, [pc, #112]	@ (80035f0 <HAL_DMA_Abort+0x268>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1b      	ldr	r2, [pc, #108]	@ (80035f4 <HAL_DMA_Abort+0x26c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_DMA_Abort+0x20e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a19      	ldr	r2, [pc, #100]	@ (80035f8 <HAL_DMA_Abort+0x270>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d132      	bne.n	80035fc <HAL_DMA_Abort+0x274>
 8003596:	2301      	movs	r3, #1
 8003598:	e031      	b.n	80035fe <HAL_DMA_Abort+0x276>
 800359a:	bf00      	nop
 800359c:	40020010 	.word	0x40020010
 80035a0:	40020028 	.word	0x40020028
 80035a4:	40020040 	.word	0x40020040
 80035a8:	40020058 	.word	0x40020058
 80035ac:	40020070 	.word	0x40020070
 80035b0:	40020088 	.word	0x40020088
 80035b4:	400200a0 	.word	0x400200a0
 80035b8:	400200b8 	.word	0x400200b8
 80035bc:	40020410 	.word	0x40020410
 80035c0:	40020428 	.word	0x40020428
 80035c4:	40020440 	.word	0x40020440
 80035c8:	40020458 	.word	0x40020458
 80035cc:	40020470 	.word	0x40020470
 80035d0:	40020488 	.word	0x40020488
 80035d4:	400204a0 	.word	0x400204a0
 80035d8:	400204b8 	.word	0x400204b8
 80035dc:	58025408 	.word	0x58025408
 80035e0:	5802541c 	.word	0x5802541c
 80035e4:	58025430 	.word	0x58025430
 80035e8:	58025444 	.word	0x58025444
 80035ec:	58025458 	.word	0x58025458
 80035f0:	5802546c 	.word	0x5802546c
 80035f4:	58025480 	.word	0x58025480
 80035f8:	58025494 	.word	0x58025494
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003610:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6d      	ldr	r2, [pc, #436]	@ (80037cc <HAL_DMA_Abort+0x444>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04a      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6b      	ldr	r2, [pc, #428]	@ (80037d0 <HAL_DMA_Abort+0x448>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d045      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6a      	ldr	r2, [pc, #424]	@ (80037d4 <HAL_DMA_Abort+0x44c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d040      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a68      	ldr	r2, [pc, #416]	@ (80037d8 <HAL_DMA_Abort+0x450>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a67      	ldr	r2, [pc, #412]	@ (80037dc <HAL_DMA_Abort+0x454>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d036      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a65      	ldr	r2, [pc, #404]	@ (80037e0 <HAL_DMA_Abort+0x458>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a64      	ldr	r2, [pc, #400]	@ (80037e4 <HAL_DMA_Abort+0x45c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d02c      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a62      	ldr	r2, [pc, #392]	@ (80037e8 <HAL_DMA_Abort+0x460>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a61      	ldr	r2, [pc, #388]	@ (80037ec <HAL_DMA_Abort+0x464>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a5f      	ldr	r2, [pc, #380]	@ (80037f0 <HAL_DMA_Abort+0x468>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a5e      	ldr	r2, [pc, #376]	@ (80037f4 <HAL_DMA_Abort+0x46c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a5c      	ldr	r2, [pc, #368]	@ (80037f8 <HAL_DMA_Abort+0x470>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5b      	ldr	r2, [pc, #364]	@ (80037fc <HAL_DMA_Abort+0x474>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a59      	ldr	r2, [pc, #356]	@ (8003800 <HAL_DMA_Abort+0x478>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a58      	ldr	r2, [pc, #352]	@ (8003804 <HAL_DMA_Abort+0x47c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_Abort+0x32a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a56      	ldr	r2, [pc, #344]	@ (8003808 <HAL_DMA_Abort+0x480>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d108      	bne.n	80036c4 <HAL_DMA_Abort+0x33c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e007      	b.n	80036d4 <HAL_DMA_Abort+0x34c>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036d4:	e013      	b.n	80036fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036d6:	f7ff fc9f 	bl	8003018 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	d90c      	bls.n	80036fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2203      	movs	r2, #3
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e12d      	b.n	800395a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e5      	bne.n	80036d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2f      	ldr	r2, [pc, #188]	@ (80037cc <HAL_DMA_Abort+0x444>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d04a      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2d      	ldr	r2, [pc, #180]	@ (80037d0 <HAL_DMA_Abort+0x448>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d045      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2c      	ldr	r2, [pc, #176]	@ (80037d4 <HAL_DMA_Abort+0x44c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d040      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2a      	ldr	r2, [pc, #168]	@ (80037d8 <HAL_DMA_Abort+0x450>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d03b      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a29      	ldr	r2, [pc, #164]	@ (80037dc <HAL_DMA_Abort+0x454>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d036      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a27      	ldr	r2, [pc, #156]	@ (80037e0 <HAL_DMA_Abort+0x458>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d031      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a26      	ldr	r2, [pc, #152]	@ (80037e4 <HAL_DMA_Abort+0x45c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d02c      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a24      	ldr	r2, [pc, #144]	@ (80037e8 <HAL_DMA_Abort+0x460>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d027      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a23      	ldr	r2, [pc, #140]	@ (80037ec <HAL_DMA_Abort+0x464>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a21      	ldr	r2, [pc, #132]	@ (80037f0 <HAL_DMA_Abort+0x468>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01d      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a20      	ldr	r2, [pc, #128]	@ (80037f4 <HAL_DMA_Abort+0x46c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1e      	ldr	r2, [pc, #120]	@ (80037f8 <HAL_DMA_Abort+0x470>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1d      	ldr	r2, [pc, #116]	@ (80037fc <HAL_DMA_Abort+0x474>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1b      	ldr	r2, [pc, #108]	@ (8003800 <HAL_DMA_Abort+0x478>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1a      	ldr	r2, [pc, #104]	@ (8003804 <HAL_DMA_Abort+0x47c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_DMA_Abort+0x422>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a18      	ldr	r2, [pc, #96]	@ (8003808 <HAL_DMA_Abort+0x480>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_DMA_Abort+0x426>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_DMA_Abort+0x428>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d02b      	beq.n	800380c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	223f      	movs	r2, #63	@ 0x3f
 80037c4:	409a      	lsls	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	e02a      	b.n	8003822 <HAL_DMA_Abort+0x49a>
 80037cc:	40020010 	.word	0x40020010
 80037d0:	40020028 	.word	0x40020028
 80037d4:	40020040 	.word	0x40020040
 80037d8:	40020058 	.word	0x40020058
 80037dc:	40020070 	.word	0x40020070
 80037e0:	40020088 	.word	0x40020088
 80037e4:	400200a0 	.word	0x400200a0
 80037e8:	400200b8 	.word	0x400200b8
 80037ec:	40020410 	.word	0x40020410
 80037f0:	40020428 	.word	0x40020428
 80037f4:	40020440 	.word	0x40020440
 80037f8:	40020458 	.word	0x40020458
 80037fc:	40020470 	.word	0x40020470
 8003800:	40020488 	.word	0x40020488
 8003804:	400204a0 	.word	0x400204a0
 8003808:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003810:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2201      	movs	r2, #1
 800381c:	409a      	lsls	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4f      	ldr	r2, [pc, #316]	@ (8003964 <HAL_DMA_Abort+0x5dc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d072      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4d      	ldr	r2, [pc, #308]	@ (8003968 <HAL_DMA_Abort+0x5e0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d06d      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4c      	ldr	r2, [pc, #304]	@ (800396c <HAL_DMA_Abort+0x5e4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d068      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4a      	ldr	r2, [pc, #296]	@ (8003970 <HAL_DMA_Abort+0x5e8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d063      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a49      	ldr	r2, [pc, #292]	@ (8003974 <HAL_DMA_Abort+0x5ec>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d05e      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a47      	ldr	r2, [pc, #284]	@ (8003978 <HAL_DMA_Abort+0x5f0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d059      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a46      	ldr	r2, [pc, #280]	@ (800397c <HAL_DMA_Abort+0x5f4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d054      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a44      	ldr	r2, [pc, #272]	@ (8003980 <HAL_DMA_Abort+0x5f8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04f      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a43      	ldr	r2, [pc, #268]	@ (8003984 <HAL_DMA_Abort+0x5fc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d04a      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a41      	ldr	r2, [pc, #260]	@ (8003988 <HAL_DMA_Abort+0x600>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d045      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a40      	ldr	r2, [pc, #256]	@ (800398c <HAL_DMA_Abort+0x604>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d040      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3e      	ldr	r2, [pc, #248]	@ (8003990 <HAL_DMA_Abort+0x608>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d03b      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3d      	ldr	r2, [pc, #244]	@ (8003994 <HAL_DMA_Abort+0x60c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d036      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003998 <HAL_DMA_Abort+0x610>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d031      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3a      	ldr	r2, [pc, #232]	@ (800399c <HAL_DMA_Abort+0x614>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d02c      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a38      	ldr	r2, [pc, #224]	@ (80039a0 <HAL_DMA_Abort+0x618>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d027      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a37      	ldr	r2, [pc, #220]	@ (80039a4 <HAL_DMA_Abort+0x61c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d022      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a35      	ldr	r2, [pc, #212]	@ (80039a8 <HAL_DMA_Abort+0x620>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01d      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a34      	ldr	r2, [pc, #208]	@ (80039ac <HAL_DMA_Abort+0x624>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d018      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a32      	ldr	r2, [pc, #200]	@ (80039b0 <HAL_DMA_Abort+0x628>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a31      	ldr	r2, [pc, #196]	@ (80039b4 <HAL_DMA_Abort+0x62c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00e      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2f      	ldr	r2, [pc, #188]	@ (80039b8 <HAL_DMA_Abort+0x630>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d009      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a2e      	ldr	r2, [pc, #184]	@ (80039bc <HAL_DMA_Abort+0x634>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_DMA_Abort+0x58a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a2c      	ldr	r2, [pc, #176]	@ (80039c0 <HAL_DMA_Abort+0x638>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <HAL_DMA_Abort+0x58e>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_DMA_Abort+0x590>
 8003916:	2300      	movs	r3, #0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d015      	beq.n	8003948 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003924:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800393c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003946:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40020010 	.word	0x40020010
 8003968:	40020028 	.word	0x40020028
 800396c:	40020040 	.word	0x40020040
 8003970:	40020058 	.word	0x40020058
 8003974:	40020070 	.word	0x40020070
 8003978:	40020088 	.word	0x40020088
 800397c:	400200a0 	.word	0x400200a0
 8003980:	400200b8 	.word	0x400200b8
 8003984:	40020410 	.word	0x40020410
 8003988:	40020428 	.word	0x40020428
 800398c:	40020440 	.word	0x40020440
 8003990:	40020458 	.word	0x40020458
 8003994:	40020470 	.word	0x40020470
 8003998:	40020488 	.word	0x40020488
 800399c:	400204a0 	.word	0x400204a0
 80039a0:	400204b8 	.word	0x400204b8
 80039a4:	58025408 	.word	0x58025408
 80039a8:	5802541c 	.word	0x5802541c
 80039ac:	58025430 	.word	0x58025430
 80039b0:	58025444 	.word	0x58025444
 80039b4:	58025458 	.word	0x58025458
 80039b8:	5802546c 	.word	0x5802546c
 80039bc:	58025480 	.word	0x58025480
 80039c0:	58025494 	.word	0x58025494

080039c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e237      	b.n	8003e46 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d004      	beq.n	80039ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2280      	movs	r2, #128	@ 0x80
 80039e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e22c      	b.n	8003e46 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003b64 <HAL_DMA_Abort_IT+0x1a0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d04a      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003b68 <HAL_DMA_Abort_IT+0x1a4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d045      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a59      	ldr	r2, [pc, #356]	@ (8003b6c <HAL_DMA_Abort_IT+0x1a8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d040      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a58      	ldr	r2, [pc, #352]	@ (8003b70 <HAL_DMA_Abort_IT+0x1ac>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d03b      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a56      	ldr	r2, [pc, #344]	@ (8003b74 <HAL_DMA_Abort_IT+0x1b0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d036      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a55      	ldr	r2, [pc, #340]	@ (8003b78 <HAL_DMA_Abort_IT+0x1b4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d031      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a53      	ldr	r2, [pc, #332]	@ (8003b7c <HAL_DMA_Abort_IT+0x1b8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d02c      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a52      	ldr	r2, [pc, #328]	@ (8003b80 <HAL_DMA_Abort_IT+0x1bc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d027      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a50      	ldr	r2, [pc, #320]	@ (8003b84 <HAL_DMA_Abort_IT+0x1c0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d022      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a4f      	ldr	r2, [pc, #316]	@ (8003b88 <HAL_DMA_Abort_IT+0x1c4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d01d      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a4d      	ldr	r2, [pc, #308]	@ (8003b8c <HAL_DMA_Abort_IT+0x1c8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d018      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b90 <HAL_DMA_Abort_IT+0x1cc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a4a      	ldr	r2, [pc, #296]	@ (8003b94 <HAL_DMA_Abort_IT+0x1d0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00e      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a49      	ldr	r2, [pc, #292]	@ (8003b98 <HAL_DMA_Abort_IT+0x1d4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d009      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a47      	ldr	r2, [pc, #284]	@ (8003b9c <HAL_DMA_Abort_IT+0x1d8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xc8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a46      	ldr	r2, [pc, #280]	@ (8003ba0 <HAL_DMA_Abort_IT+0x1dc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_DMA_Abort_IT+0xcc>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_DMA_Abort_IT+0xce>
 8003a90:	2300      	movs	r3, #0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8086 	beq.w	8003ba4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8003b64 <HAL_DMA_Abort_IT+0x1a0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d04a      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2e      	ldr	r2, [pc, #184]	@ (8003b68 <HAL_DMA_Abort_IT+0x1a4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d045      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b6c <HAL_DMA_Abort_IT+0x1a8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d040      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b70 <HAL_DMA_Abort_IT+0x1ac>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d03b      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a29      	ldr	r2, [pc, #164]	@ (8003b74 <HAL_DMA_Abort_IT+0x1b0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d036      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a28      	ldr	r2, [pc, #160]	@ (8003b78 <HAL_DMA_Abort_IT+0x1b4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d031      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a26      	ldr	r2, [pc, #152]	@ (8003b7c <HAL_DMA_Abort_IT+0x1b8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02c      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a25      	ldr	r2, [pc, #148]	@ (8003b80 <HAL_DMA_Abort_IT+0x1bc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d027      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <HAL_DMA_Abort_IT+0x1c0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d022      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a22      	ldr	r2, [pc, #136]	@ (8003b88 <HAL_DMA_Abort_IT+0x1c4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d01d      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a20      	ldr	r2, [pc, #128]	@ (8003b8c <HAL_DMA_Abort_IT+0x1c8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d018      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1f      	ldr	r2, [pc, #124]	@ (8003b90 <HAL_DMA_Abort_IT+0x1cc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <HAL_DMA_Abort_IT+0x1d0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00e      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <HAL_DMA_Abort_IT+0x1d4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d009      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1a      	ldr	r2, [pc, #104]	@ (8003b9c <HAL_DMA_Abort_IT+0x1d8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x17c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ba0 <HAL_DMA_Abort_IT+0x1dc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d108      	bne.n	8003b52 <HAL_DMA_Abort_IT+0x18e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e178      	b.n	8003e44 <HAL_DMA_Abort_IT+0x480>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e16f      	b.n	8003e44 <HAL_DMA_Abort_IT+0x480>
 8003b64:	40020010 	.word	0x40020010
 8003b68:	40020028 	.word	0x40020028
 8003b6c:	40020040 	.word	0x40020040
 8003b70:	40020058 	.word	0x40020058
 8003b74:	40020070 	.word	0x40020070
 8003b78:	40020088 	.word	0x40020088
 8003b7c:	400200a0 	.word	0x400200a0
 8003b80:	400200b8 	.word	0x400200b8
 8003b84:	40020410 	.word	0x40020410
 8003b88:	40020428 	.word	0x40020428
 8003b8c:	40020440 	.word	0x40020440
 8003b90:	40020458 	.word	0x40020458
 8003b94:	40020470 	.word	0x40020470
 8003b98:	40020488 	.word	0x40020488
 8003b9c:	400204a0 	.word	0x400204a0
 8003ba0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 020e 	bic.w	r2, r2, #14
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6c      	ldr	r2, [pc, #432]	@ (8003d6c <HAL_DMA_Abort_IT+0x3a8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d04a      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6b      	ldr	r2, [pc, #428]	@ (8003d70 <HAL_DMA_Abort_IT+0x3ac>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d045      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a69      	ldr	r2, [pc, #420]	@ (8003d74 <HAL_DMA_Abort_IT+0x3b0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d040      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a68      	ldr	r2, [pc, #416]	@ (8003d78 <HAL_DMA_Abort_IT+0x3b4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d03b      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a66      	ldr	r2, [pc, #408]	@ (8003d7c <HAL_DMA_Abort_IT+0x3b8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d036      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a65      	ldr	r2, [pc, #404]	@ (8003d80 <HAL_DMA_Abort_IT+0x3bc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d031      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a63      	ldr	r2, [pc, #396]	@ (8003d84 <HAL_DMA_Abort_IT+0x3c0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02c      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a62      	ldr	r2, [pc, #392]	@ (8003d88 <HAL_DMA_Abort_IT+0x3c4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d027      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a60      	ldr	r2, [pc, #384]	@ (8003d8c <HAL_DMA_Abort_IT+0x3c8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d022      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a5f      	ldr	r2, [pc, #380]	@ (8003d90 <HAL_DMA_Abort_IT+0x3cc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d01d      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8003d94 <HAL_DMA_Abort_IT+0x3d0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d018      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5c      	ldr	r2, [pc, #368]	@ (8003d98 <HAL_DMA_Abort_IT+0x3d4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a5a      	ldr	r2, [pc, #360]	@ (8003d9c <HAL_DMA_Abort_IT+0x3d8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00e      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a59      	ldr	r2, [pc, #356]	@ (8003da0 <HAL_DMA_Abort_IT+0x3dc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a57      	ldr	r2, [pc, #348]	@ (8003da4 <HAL_DMA_Abort_IT+0x3e0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x290>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a56      	ldr	r2, [pc, #344]	@ (8003da8 <HAL_DMA_Abort_IT+0x3e4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <HAL_DMA_Abort_IT+0x2a2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e007      	b.n	8003c76 <HAL_DMA_Abort_IT+0x2b2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d6c <HAL_DMA_Abort_IT+0x3a8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d072      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a3a      	ldr	r2, [pc, #232]	@ (8003d70 <HAL_DMA_Abort_IT+0x3ac>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d06d      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a39      	ldr	r2, [pc, #228]	@ (8003d74 <HAL_DMA_Abort_IT+0x3b0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d068      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a37      	ldr	r2, [pc, #220]	@ (8003d78 <HAL_DMA_Abort_IT+0x3b4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d063      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a36      	ldr	r2, [pc, #216]	@ (8003d7c <HAL_DMA_Abort_IT+0x3b8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d05e      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a34      	ldr	r2, [pc, #208]	@ (8003d80 <HAL_DMA_Abort_IT+0x3bc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d059      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a33      	ldr	r2, [pc, #204]	@ (8003d84 <HAL_DMA_Abort_IT+0x3c0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d054      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a31      	ldr	r2, [pc, #196]	@ (8003d88 <HAL_DMA_Abort_IT+0x3c4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d04f      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a30      	ldr	r2, [pc, #192]	@ (8003d8c <HAL_DMA_Abort_IT+0x3c8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d04a      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d90 <HAL_DMA_Abort_IT+0x3cc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d045      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2d      	ldr	r2, [pc, #180]	@ (8003d94 <HAL_DMA_Abort_IT+0x3d0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d040      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d98 <HAL_DMA_Abort_IT+0x3d4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d03b      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d9c <HAL_DMA_Abort_IT+0x3d8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d036      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a28      	ldr	r2, [pc, #160]	@ (8003da0 <HAL_DMA_Abort_IT+0x3dc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d031      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a27      	ldr	r2, [pc, #156]	@ (8003da4 <HAL_DMA_Abort_IT+0x3e0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d02c      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a25      	ldr	r2, [pc, #148]	@ (8003da8 <HAL_DMA_Abort_IT+0x3e4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d027      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a24      	ldr	r2, [pc, #144]	@ (8003dac <HAL_DMA_Abort_IT+0x3e8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d022      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a22      	ldr	r2, [pc, #136]	@ (8003db0 <HAL_DMA_Abort_IT+0x3ec>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01d      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a21      	ldr	r2, [pc, #132]	@ (8003db4 <HAL_DMA_Abort_IT+0x3f0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d018      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1f      	ldr	r2, [pc, #124]	@ (8003db8 <HAL_DMA_Abort_IT+0x3f4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1e      	ldr	r2, [pc, #120]	@ (8003dbc <HAL_DMA_Abort_IT+0x3f8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc0 <HAL_DMA_Abort_IT+0x3fc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc4 <HAL_DMA_Abort_IT+0x400>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x3a2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a19      	ldr	r2, [pc, #100]	@ (8003dc8 <HAL_DMA_Abort_IT+0x404>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d132      	bne.n	8003dcc <HAL_DMA_Abort_IT+0x408>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e031      	b.n	8003dce <HAL_DMA_Abort_IT+0x40a>
 8003d6a:	bf00      	nop
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	58025408 	.word	0x58025408
 8003db0:	5802541c 	.word	0x5802541c
 8003db4:	58025430 	.word	0x58025430
 8003db8:	58025444 	.word	0x58025444
 8003dbc:	58025458 	.word	0x58025458
 8003dc0:	5802546c 	.word	0x5802546c
 8003dc4:	58025480 	.word	0x58025480
 8003dc8:	58025494 	.word	0x58025494
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d028      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003de0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2201      	movs	r2, #1
 8003df2:	409a      	lsls	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00c      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop

08003e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	@ 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e5e:	4b86      	ldr	r3, [pc, #536]	@ (8004078 <HAL_GPIO_Init+0x228>)
 8003e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e62:	e18c      	b.n	800417e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2101      	movs	r1, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 817e 	beq.w	8004178 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d005      	beq.n	8003e94 <HAL_GPIO_Init+0x44>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d130      	bne.n	8003ef6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eca:	2201      	movs	r2, #1
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	f003 0201 	and.w	r2, r3, #1
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d017      	beq.n	8003f32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d123      	bne.n	8003f86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	08da      	lsrs	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3208      	adds	r2, #8
 8003f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	220f      	movs	r2, #15
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	08da      	lsrs	r2, r3, #3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3208      	adds	r2, #8
 8003f80:	69b9      	ldr	r1, [r7, #24]
 8003f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	2203      	movs	r2, #3
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0203 	and.w	r2, r3, #3
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80d8 	beq.w	8004178 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800407c <HAL_GPIO_Init+0x22c>)
 8003fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fce:	4a2b      	ldr	r2, [pc, #172]	@ (800407c <HAL_GPIO_Init+0x22c>)
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003fd8:	4b28      	ldr	r3, [pc, #160]	@ (800407c <HAL_GPIO_Init+0x22c>)
 8003fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fe6:	4a26      	ldr	r2, [pc, #152]	@ (8004080 <HAL_GPIO_Init+0x230>)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3302      	adds	r3, #2
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1d      	ldr	r2, [pc, #116]	@ (8004084 <HAL_GPIO_Init+0x234>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d04a      	beq.n	80040a8 <HAL_GPIO_Init+0x258>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <HAL_GPIO_Init+0x238>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d02b      	beq.n	8004072 <HAL_GPIO_Init+0x222>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <HAL_GPIO_Init+0x23c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d025      	beq.n	800406e <HAL_GPIO_Init+0x21e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1a      	ldr	r2, [pc, #104]	@ (8004090 <HAL_GPIO_Init+0x240>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01f      	beq.n	800406a <HAL_GPIO_Init+0x21a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a19      	ldr	r2, [pc, #100]	@ (8004094 <HAL_GPIO_Init+0x244>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d019      	beq.n	8004066 <HAL_GPIO_Init+0x216>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a18      	ldr	r2, [pc, #96]	@ (8004098 <HAL_GPIO_Init+0x248>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_GPIO_Init+0x212>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a17      	ldr	r2, [pc, #92]	@ (800409c <HAL_GPIO_Init+0x24c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00d      	beq.n	800405e <HAL_GPIO_Init+0x20e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a16      	ldr	r2, [pc, #88]	@ (80040a0 <HAL_GPIO_Init+0x250>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <HAL_GPIO_Init+0x20a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a15      	ldr	r2, [pc, #84]	@ (80040a4 <HAL_GPIO_Init+0x254>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_GPIO_Init+0x206>
 8004052:	2309      	movs	r3, #9
 8004054:	e029      	b.n	80040aa <HAL_GPIO_Init+0x25a>
 8004056:	230a      	movs	r3, #10
 8004058:	e027      	b.n	80040aa <HAL_GPIO_Init+0x25a>
 800405a:	2307      	movs	r3, #7
 800405c:	e025      	b.n	80040aa <HAL_GPIO_Init+0x25a>
 800405e:	2306      	movs	r3, #6
 8004060:	e023      	b.n	80040aa <HAL_GPIO_Init+0x25a>
 8004062:	2305      	movs	r3, #5
 8004064:	e021      	b.n	80040aa <HAL_GPIO_Init+0x25a>
 8004066:	2304      	movs	r3, #4
 8004068:	e01f      	b.n	80040aa <HAL_GPIO_Init+0x25a>
 800406a:	2303      	movs	r3, #3
 800406c:	e01d      	b.n	80040aa <HAL_GPIO_Init+0x25a>
 800406e:	2302      	movs	r3, #2
 8004070:	e01b      	b.n	80040aa <HAL_GPIO_Init+0x25a>
 8004072:	2301      	movs	r3, #1
 8004074:	e019      	b.n	80040aa <HAL_GPIO_Init+0x25a>
 8004076:	bf00      	nop
 8004078:	58000080 	.word	0x58000080
 800407c:	58024400 	.word	0x58024400
 8004080:	58000400 	.word	0x58000400
 8004084:	58020000 	.word	0x58020000
 8004088:	58020400 	.word	0x58020400
 800408c:	58020800 	.word	0x58020800
 8004090:	58020c00 	.word	0x58020c00
 8004094:	58021000 	.word	0x58021000
 8004098:	58021400 	.word	0x58021400
 800409c:	58021800 	.word	0x58021800
 80040a0:	58021c00 	.word	0x58021c00
 80040a4:	58022400 	.word	0x58022400
 80040a8:	2300      	movs	r3, #0
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	f002 0203 	and.w	r2, r2, #3
 80040b0:	0092      	lsls	r2, r2, #2
 80040b2:	4093      	lsls	r3, r2
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ba:	4938      	ldr	r1, [pc, #224]	@ (800419c <HAL_GPIO_Init+0x34c>)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	3302      	adds	r3, #2
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800411c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3301      	adds	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	f47f ae6b 	bne.w	8003e64 <HAL_GPIO_Init+0x14>
  }
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	3724      	adds	r7, #36	@ 0x24
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	58000400 	.word	0x58000400

080041a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
 80041ac:	4613      	mov	r3, r2
 80041ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041b0:	787b      	ldrb	r3, [r7, #1]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80041bc:	e003      	b.n	80041c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041be:	887b      	ldrh	r3, [r7, #2]
 80041c0:	041a      	lsls	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	619a      	str	r2, [r3, #24]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e08b      	b.n	80042fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fef2 	bl	8001fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	@ 0x24
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004224:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004234:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d107      	bne.n	800424e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	e006      	b.n	800425c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800425a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d108      	bne.n	8004276 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	e007      	b.n	8004286 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004284:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <HAL_I2C_Init+0x134>)
 8004292:	430b      	orrs	r3, r1
 8004294:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69d9      	ldr	r1, [r3, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1a      	ldr	r2, [r3, #32]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	02008000 	.word	0x02008000

0800430c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	4608      	mov	r0, r1
 8004316:	4611      	mov	r1, r2
 8004318:	461a      	mov	r2, r3
 800431a:	4603      	mov	r3, r0
 800431c:	817b      	strh	r3, [r7, #10]
 800431e:	460b      	mov	r3, r1
 8004320:	813b      	strh	r3, [r7, #8]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	f040 80f9 	bne.w	8004526 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_I2C_Mem_Write+0x34>
 800433a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004346:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0ed      	b.n	8004528 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_I2C_Mem_Write+0x4e>
 8004356:	2302      	movs	r3, #2
 8004358:	e0e6      	b.n	8004528 <HAL_I2C_Mem_Write+0x21c>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004362:	f7fe fe59 	bl	8003018 <HAL_GetTick>
 8004366:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2319      	movs	r3, #25
 800436e:	2201      	movs	r2, #1
 8004370:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fac3 	bl	8004900 <I2C_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0d1      	b.n	8004528 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2221      	movs	r2, #33	@ 0x21
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2240      	movs	r2, #64	@ 0x40
 8004390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ac:	88f8      	ldrh	r0, [r7, #6]
 80043ae:	893a      	ldrh	r2, [r7, #8]
 80043b0:	8979      	ldrh	r1, [r7, #10]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	4603      	mov	r3, r0
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f9d3 	bl	8004768 <I2C_RequestMemoryWrite>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0a9      	b.n	8004528 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2bff      	cmp	r3, #255	@ 0xff
 80043dc:	d90e      	bls.n	80043fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	22ff      	movs	r2, #255	@ 0xff
 80043e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	8979      	ldrh	r1, [r7, #10]
 80043ec:	2300      	movs	r3, #0
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fc47 	bl	8004c88 <I2C_TransferConfig>
 80043fa:	e00f      	b.n	800441c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	b2da      	uxtb	r2, r3
 800440c:	8979      	ldrh	r1, [r7, #10]
 800440e:	2300      	movs	r3, #0
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fc36 	bl	8004c88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fac6 	bl	80049b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e07b      	b.n	8004528 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d034      	beq.n	80044d4 <HAL_I2C_Mem_Write+0x1c8>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d130      	bne.n	80044d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	2200      	movs	r2, #0
 800447a:	2180      	movs	r1, #128	@ 0x80
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fa3f 	bl	8004900 <I2C_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e04d      	b.n	8004528 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2bff      	cmp	r3, #255	@ 0xff
 8004494:	d90e      	bls.n	80044b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	22ff      	movs	r2, #255	@ 0xff
 800449a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	8979      	ldrh	r1, [r7, #10]
 80044a4:	2300      	movs	r3, #0
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fbeb 	bl	8004c88 <I2C_TransferConfig>
 80044b2:	e00f      	b.n	80044d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	8979      	ldrh	r1, [r7, #10]
 80044c6:	2300      	movs	r3, #0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fbda 	bl	8004c88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d19e      	bne.n	800441c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 faac 	bl	8004a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e01a      	b.n	8004528 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2220      	movs	r2, #32
 80044f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <HAL_I2C_Mem_Write+0x224>)
 8004506:	400b      	ands	r3, r1
 8004508:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004526:	2302      	movs	r3, #2
  }
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	fe00e800 	.word	0xfe00e800

08004534 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	4608      	mov	r0, r1
 800453e:	4611      	mov	r1, r2
 8004540:	461a      	mov	r2, r3
 8004542:	4603      	mov	r3, r0
 8004544:	817b      	strh	r3, [r7, #10]
 8004546:	460b      	mov	r3, r1
 8004548:	813b      	strh	r3, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b20      	cmp	r3, #32
 8004558:	f040 80fd 	bne.w	8004756 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_I2C_Mem_Read+0x34>
 8004562:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800456e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0f1      	b.n	8004758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_I2C_Mem_Read+0x4e>
 800457e:	2302      	movs	r3, #2
 8004580:	e0ea      	b.n	8004758 <HAL_I2C_Mem_Read+0x224>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800458a:	f7fe fd45 	bl	8003018 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2319      	movs	r3, #25
 8004596:	2201      	movs	r2, #1
 8004598:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f9af 	bl	8004900 <I2C_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0d5      	b.n	8004758 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2222      	movs	r2, #34	@ 0x22
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2240      	movs	r2, #64	@ 0x40
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a3a      	ldr	r2, [r7, #32]
 80045c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045d4:	88f8      	ldrh	r0, [r7, #6]
 80045d6:	893a      	ldrh	r2, [r7, #8]
 80045d8:	8979      	ldrh	r1, [r7, #10]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	4603      	mov	r3, r0
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f913 	bl	8004810 <I2C_RequestMemoryRead>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0ad      	b.n	8004758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2bff      	cmp	r3, #255	@ 0xff
 8004604:	d90e      	bls.n	8004624 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	22ff      	movs	r2, #255	@ 0xff
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004610:	b2da      	uxtb	r2, r3
 8004612:	8979      	ldrh	r1, [r7, #10]
 8004614:	4b52      	ldr	r3, [pc, #328]	@ (8004760 <HAL_I2C_Mem_Read+0x22c>)
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fb33 	bl	8004c88 <I2C_TransferConfig>
 8004622:	e00f      	b.n	8004644 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	b2da      	uxtb	r2, r3
 8004634:	8979      	ldrh	r1, [r7, #10]
 8004636:	4b4a      	ldr	r3, [pc, #296]	@ (8004760 <HAL_I2C_Mem_Read+0x22c>)
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fb22 	bl	8004c88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	2200      	movs	r2, #0
 800464c:	2104      	movs	r1, #4
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f956 	bl	8004900 <I2C_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e07c      	b.n	8004758 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d034      	beq.n	8004704 <HAL_I2C_Mem_Read+0x1d0>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d130      	bne.n	8004704 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	2200      	movs	r2, #0
 80046aa:	2180      	movs	r1, #128	@ 0x80
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f927 	bl	8004900 <I2C_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e04d      	b.n	8004758 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2bff      	cmp	r3, #255	@ 0xff
 80046c4:	d90e      	bls.n	80046e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	22ff      	movs	r2, #255	@ 0xff
 80046ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	8979      	ldrh	r1, [r7, #10]
 80046d4:	2300      	movs	r3, #0
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fad3 	bl	8004c88 <I2C_TransferConfig>
 80046e2:	e00f      	b.n	8004704 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	8979      	ldrh	r1, [r7, #10]
 80046f6:	2300      	movs	r3, #0
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 fac2 	bl	8004c88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d19a      	bne.n	8004644 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f994 	bl	8004a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e01a      	b.n	8004758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2220      	movs	r2, #32
 8004728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <HAL_I2C_Mem_Read+0x230>)
 8004736:	400b      	ands	r3, r1
 8004738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	e000      	b.n	8004758 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004756:	2302      	movs	r3, #2
  }
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	80002400 	.word	0x80002400
 8004764:	fe00e800 	.word	0xfe00e800

08004768 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	461a      	mov	r2, r3
 8004776:	4603      	mov	r3, r0
 8004778:	817b      	strh	r3, [r7, #10]
 800477a:	460b      	mov	r3, r1
 800477c:	813b      	strh	r3, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	8979      	ldrh	r1, [r7, #10]
 8004788:	4b20      	ldr	r3, [pc, #128]	@ (800480c <I2C_RequestMemoryWrite+0xa4>)
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fa79 	bl	8004c88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f909 	bl	80049b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e02c      	b.n	8004804 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d105      	bne.n	80047bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047b0:	893b      	ldrh	r3, [r7, #8]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80047ba:	e015      	b.n	80047e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047bc:	893b      	ldrh	r3, [r7, #8]
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	69b9      	ldr	r1, [r7, #24]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f8ef 	bl	80049b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e012      	b.n	8004804 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047de:	893b      	ldrh	r3, [r7, #8]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2200      	movs	r2, #0
 80047f0:	2180      	movs	r1, #128	@ 0x80
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f884 	bl	8004900 <I2C_WaitOnFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	80002000 	.word	0x80002000

08004810 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	4608      	mov	r0, r1
 800481a:	4611      	mov	r1, r2
 800481c:	461a      	mov	r2, r3
 800481e:	4603      	mov	r3, r0
 8004820:	817b      	strh	r3, [r7, #10]
 8004822:	460b      	mov	r3, r1
 8004824:	813b      	strh	r3, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	8979      	ldrh	r1, [r7, #10]
 8004830:	4b20      	ldr	r3, [pc, #128]	@ (80048b4 <I2C_RequestMemoryRead+0xa4>)
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa26 	bl	8004c88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	69b9      	ldr	r1, [r7, #24]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f8b6 	bl	80049b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e02c      	b.n	80048aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d105      	bne.n	8004862 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004856:	893b      	ldrh	r3, [r7, #8]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004860:	e015      	b.n	800488e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004862:	893b      	ldrh	r3, [r7, #8]
 8004864:	0a1b      	lsrs	r3, r3, #8
 8004866:	b29b      	uxth	r3, r3
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	69b9      	ldr	r1, [r7, #24]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f89c 	bl	80049b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e012      	b.n	80048aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004884:	893b      	ldrh	r3, [r7, #8]
 8004886:	b2da      	uxtb	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2200      	movs	r2, #0
 8004896:	2140      	movs	r1, #64	@ 0x40
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f831 	bl	8004900 <I2C_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	80002000 	.word	0x80002000

080048b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d103      	bne.n	80048d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d007      	beq.n	80048f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	619a      	str	r2, [r3, #24]
  }
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004910:	e03b      	b.n	800498a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f8d6 	bl	8004ac8 <I2C_IsErrorOccurred>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e041      	b.n	80049aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d02d      	beq.n	800498a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fe fb73 	bl	8003018 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <I2C_WaitOnFlagUntilTimeout+0x44>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d122      	bne.n	800498a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4013      	ands	r3, r2
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	429a      	cmp	r2, r3
 8004960:	d113      	bne.n	800498a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e00f      	b.n	80049aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699a      	ldr	r2, [r3, #24]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d0b4      	beq.n	8004912 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049be:	e033      	b.n	8004a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f87f 	bl	8004ac8 <I2C_IsErrorOccurred>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e031      	b.n	8004a38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d025      	beq.n	8004a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049dc:	f7fe fb1c 	bl	8003018 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d302      	bcc.n	80049f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d11a      	bne.n	8004a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d013      	beq.n	8004a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a04:	f043 0220 	orr.w	r2, r3, #32
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e007      	b.n	8004a38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d1c4      	bne.n	80049c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a4c:	e02f      	b.n	8004aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f838 	bl	8004ac8 <I2C_IsErrorOccurred>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e02d      	b.n	8004abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fe fad9 	bl	8003018 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d11a      	bne.n	8004aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d013      	beq.n	8004aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e007      	b.n	8004abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d1c8      	bne.n	8004a4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	@ 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d068      	beq.n	8004bc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2210      	movs	r2, #16
 8004afa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004afc:	e049      	b.n	8004b92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d045      	beq.n	8004b92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b06:	f7fe fa87 	bl	8003018 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <I2C_IsErrorOccurred+0x54>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d13a      	bne.n	8004b92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b3e:	d121      	bne.n	8004b84 <I2C_IsErrorOccurred+0xbc>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b46:	d01d      	beq.n	8004b84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d01a      	beq.n	8004b84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b5e:	f7fe fa5b 	bl	8003018 <HAL_GetTick>
 8004b62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b64:	e00e      	b.n	8004b84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b66:	f7fe fa57 	bl	8003018 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b19      	cmp	r3, #25
 8004b72:	d907      	bls.n	8004b84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f043 0320 	orr.w	r3, r3, #32
 8004b7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004b82:	e006      	b.n	8004b92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d1e9      	bne.n	8004b66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d003      	beq.n	8004ba8 <I2C_IsErrorOccurred+0xe0>
 8004ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0aa      	beq.n	8004afe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f043 0304 	orr.w	r3, r3, #4
 8004bbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	f043 0308 	orr.w	r3, r3, #8
 8004c00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00b      	beq.n	8004c34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01c      	beq.n	8004c76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff fe3b 	bl	80048b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c84 <I2C_IsErrorOccurred+0x1bc>)
 8004c4e:	400b      	ands	r3, r1
 8004c50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3728      	adds	r7, #40	@ 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	fe00e800 	.word	0xfe00e800

08004c88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	460b      	mov	r3, r1
 8004c94:	817b      	strh	r3, [r7, #10]
 8004c96:	4613      	mov	r3, r2
 8004c98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c9a:	897b      	ldrh	r3, [r7, #10]
 8004c9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ca0:	7a7b      	ldrb	r3, [r7, #9]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ca8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cb6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	0d5b      	lsrs	r3, r3, #21
 8004cc2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004cc6:	4b08      	ldr	r3, [pc, #32]	@ (8004ce8 <I2C_TransferConfig+0x60>)
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	ea02 0103 	and.w	r1, r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	03ff63ff 	.word	0x03ff63ff

08004cec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d138      	bne.n	8004d74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e032      	b.n	8004d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	@ 0x24
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e000      	b.n	8004d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d139      	bne.n	8004e0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e033      	b.n	8004e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2224      	movs	r2, #36	@ 0x24
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004e24:	4b19      	ldr	r3, [pc, #100]	@ (8004e8c <HAL_PWREx_ConfigSupply+0x70>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d00a      	beq.n	8004e46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e30:	4b16      	ldr	r3, [pc, #88]	@ (8004e8c <HAL_PWREx_ConfigSupply+0x70>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e01f      	b.n	8004e82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e01d      	b.n	8004e82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e46:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <HAL_PWREx_ConfigSupply+0x70>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f023 0207 	bic.w	r2, r3, #7
 8004e4e:	490f      	ldr	r1, [pc, #60]	@ (8004e8c <HAL_PWREx_ConfigSupply+0x70>)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e56:	f7fe f8df 	bl	8003018 <HAL_GetTick>
 8004e5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e5c:	e009      	b.n	8004e72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e5e:	f7fe f8db 	bl	8003018 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e6c:	d901      	bls.n	8004e72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e007      	b.n	8004e82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e72:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_PWREx_ConfigSupply+0x70>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e7e:	d1ee      	bne.n	8004e5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	58024800 	.word	0x58024800

08004e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	@ 0x30
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e3c8      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8087 	beq.w	8004fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb0:	4b88      	ldr	r3, [pc, #544]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eba:	4b86      	ldr	r3, [pc, #536]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d007      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x46>
 8004ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec8:	2b18      	cmp	r3, #24
 8004eca:	d110      	bne.n	8004eee <HAL_RCC_OscConfig+0x5e>
 8004ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d10b      	bne.n	8004eee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d06c      	beq.n	8004fbc <HAL_RCC_OscConfig+0x12c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d168      	bne.n	8004fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e3a2      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x76>
 8004ef8:	4b76      	ldr	r3, [pc, #472]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a75      	ldr	r2, [pc, #468]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	e02e      	b.n	8004f64 <HAL_RCC_OscConfig+0xd4>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x98>
 8004f0e:	4b71      	ldr	r3, [pc, #452]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a70      	ldr	r2, [pc, #448]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6d      	ldr	r2, [pc, #436]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e01d      	b.n	8004f64 <HAL_RCC_OscConfig+0xd4>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCC_OscConfig+0xbc>
 8004f32:	4b68      	ldr	r3, [pc, #416]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a67      	ldr	r2, [pc, #412]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	4b65      	ldr	r3, [pc, #404]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a64      	ldr	r2, [pc, #400]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e00b      	b.n	8004f64 <HAL_RCC_OscConfig+0xd4>
 8004f4c:	4b61      	ldr	r3, [pc, #388]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a60      	ldr	r2, [pc, #384]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	4b5e      	ldr	r3, [pc, #376]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d013      	beq.n	8004f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fe f854 	bl	8003018 <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f74:	f7fe f850 	bl	8003018 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	@ 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e356      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f86:	4b53      	ldr	r3, [pc, #332]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0xe4>
 8004f92:	e014      	b.n	8004fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fe f840 	bl	8003018 <HAL_GetTick>
 8004f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fe f83c 	bl	8003018 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e342      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fae:	4b49      	ldr	r3, [pc, #292]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x10c>
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 808c 	beq.w	80050e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fcc:	4b41      	ldr	r3, [pc, #260]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fda:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x162>
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2b18      	cmp	r3, #24
 8004fe6:	d137      	bne.n	8005058 <HAL_RCC_OscConfig+0x1c8>
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d132      	bne.n	8005058 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ff2:	4b38      	ldr	r3, [pc, #224]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_RCC_OscConfig+0x17a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e314      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800500a:	4b32      	ldr	r3, [pc, #200]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 0219 	bic.w	r2, r3, #25
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	492f      	ldr	r1, [pc, #188]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fd fffc 	bl	8003018 <HAL_GetTick>
 8005020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005024:	f7fd fff8 	bl	8003018 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e2fe      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005036:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005042:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	061b      	lsls	r3, r3, #24
 8005050:	4920      	ldr	r1, [pc, #128]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005052:	4313      	orrs	r3, r2
 8005054:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005056:	e045      	b.n	80050e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d026      	beq.n	80050ae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005060:	4b1c      	ldr	r3, [pc, #112]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 0219 	bic.w	r2, r3, #25
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4919      	ldr	r1, [pc, #100]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 800506e:	4313      	orrs	r3, r2
 8005070:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fd ffd1 	bl	8003018 <HAL_GetTick>
 8005076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800507a:	f7fd ffcd 	bl	8003018 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e2d3      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800508c:	4b11      	ldr	r3, [pc, #68]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005098:	4b0e      	ldr	r3, [pc, #56]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	490b      	ldr	r1, [pc, #44]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]
 80050ac:	e01a      	b.n	80050e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ae:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a08      	ldr	r2, [pc, #32]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fd ffad 	bl	8003018 <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fd ffa9 	bl	8003018 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d903      	bls.n	80050d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e2af      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
 80050d4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050d8:	4b96      	ldr	r3, [pc, #600]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ee      	bne.n	80050c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d06a      	beq.n	80051c6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050f0:	4b90      	ldr	r3, [pc, #576]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050fa:	4b8e      	ldr	r3, [pc, #568]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d007      	beq.n	8005116 <HAL_RCC_OscConfig+0x286>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b18      	cmp	r3, #24
 800510a:	d11b      	bne.n	8005144 <HAL_RCC_OscConfig+0x2b4>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d116      	bne.n	8005144 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005116:	4b87      	ldr	r3, [pc, #540]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_RCC_OscConfig+0x29e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	2b80      	cmp	r3, #128	@ 0x80
 8005128:	d001      	beq.n	800512e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e282      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800512e:	4b81      	ldr	r3, [pc, #516]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	061b      	lsls	r3, r3, #24
 800513c:	497d      	ldr	r1, [pc, #500]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800513e:	4313      	orrs	r3, r2
 8005140:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005142:	e040      	b.n	80051c6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d023      	beq.n	8005194 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800514c:	4b79      	ldr	r3, [pc, #484]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a78      	ldr	r2, [pc, #480]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fd ff5e 	bl	8003018 <HAL_GetTick>
 800515c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005160:	f7fd ff5a 	bl	8003018 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e260      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005172:	4b70      	ldr	r3, [pc, #448]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800517e:	4b6d      	ldr	r3, [pc, #436]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	061b      	lsls	r3, r3, #24
 800518c:	4969      	ldr	r1, [pc, #420]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	60cb      	str	r3, [r1, #12]
 8005192:	e018      	b.n	80051c6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005194:	4b67      	ldr	r3, [pc, #412]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a66      	ldr	r2, [pc, #408]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800519a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800519e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fd ff3a 	bl	8003018 <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051a8:	f7fd ff36 	bl	8003018 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e23c      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051ba:	4b5e      	ldr	r3, [pc, #376]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d036      	beq.n	8005240 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d019      	beq.n	800520e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051da:	4b56      	ldr	r3, [pc, #344]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 80051dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051de:	4a55      	ldr	r2, [pc, #340]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e6:	f7fd ff17 	bl	8003018 <HAL_GetTick>
 80051ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ee:	f7fd ff13 	bl	8003018 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e219      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005200:	4b4c      	ldr	r3, [pc, #304]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x35e>
 800520c:	e018      	b.n	8005240 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800520e:	4b49      	ldr	r3, [pc, #292]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005212:	4a48      	ldr	r2, [pc, #288]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521a:	f7fd fefd 	bl	8003018 <HAL_GetTick>
 800521e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005222:	f7fd fef9 	bl	8003018 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e1ff      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005234:	4b3f      	ldr	r3, [pc, #252]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d036      	beq.n	80052ba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005254:	4b37      	ldr	r3, [pc, #220]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a36      	ldr	r2, [pc, #216]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800525a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800525e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005260:	f7fd feda 	bl	8003018 <HAL_GetTick>
 8005264:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005268:	f7fd fed6 	bl	8003018 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e1dc      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800527a:	4b2e      	ldr	r3, [pc, #184]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x3d8>
 8005286:	e018      	b.n	80052ba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005288:	4b2a      	ldr	r3, [pc, #168]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a29      	ldr	r2, [pc, #164]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800528e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005292:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005294:	f7fd fec0 	bl	8003018 <HAL_GetTick>
 8005298:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800529c:	f7fd febc 	bl	8003018 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e1c2      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052ae:	4b21      	ldr	r3, [pc, #132]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8086 	beq.w	80053d4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80052ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052d4:	f7fd fea0 	bl	8003018 <HAL_GetTick>
 80052d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052dc:	f7fd fe9c 	bl	8003018 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b64      	cmp	r3, #100	@ 0x64
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e1a2      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d106      	bne.n	8005310 <HAL_RCC_OscConfig+0x480>
 8005302:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005306:	4a0b      	ldr	r2, [pc, #44]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	6713      	str	r3, [r2, #112]	@ 0x70
 800530e:	e032      	b.n	8005376 <HAL_RCC_OscConfig+0x4e6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d111      	bne.n	800533c <HAL_RCC_OscConfig+0x4ac>
 8005318:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531c:	4a05      	ldr	r2, [pc, #20]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	6713      	str	r3, [r2, #112]	@ 0x70
 8005324:	4b03      	ldr	r3, [pc, #12]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	4a02      	ldr	r2, [pc, #8]	@ (8005334 <HAL_RCC_OscConfig+0x4a4>)
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005330:	e021      	b.n	8005376 <HAL_RCC_OscConfig+0x4e6>
 8005332:	bf00      	nop
 8005334:	58024400 	.word	0x58024400
 8005338:	58024800 	.word	0x58024800
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b05      	cmp	r3, #5
 8005342:	d10c      	bne.n	800535e <HAL_RCC_OscConfig+0x4ce>
 8005344:	4b83      	ldr	r3, [pc, #524]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005348:	4a82      	ldr	r2, [pc, #520]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005350:	4b80      	ldr	r3, [pc, #512]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005354:	4a7f      	ldr	r2, [pc, #508]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	6713      	str	r3, [r2, #112]	@ 0x70
 800535c:	e00b      	b.n	8005376 <HAL_RCC_OscConfig+0x4e6>
 800535e:	4b7d      	ldr	r3, [pc, #500]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	4a7c      	ldr	r2, [pc, #496]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	6713      	str	r3, [r2, #112]	@ 0x70
 800536a:	4b7a      	ldr	r3, [pc, #488]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 800536c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536e:	4a79      	ldr	r2, [pc, #484]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d015      	beq.n	80053aa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537e:	f7fd fe4b 	bl	8003018 <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005384:	e00a      	b.n	800539c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005386:	f7fd fe47 	bl	8003018 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e14b      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800539c:	4b6d      	ldr	r3, [pc, #436]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ee      	beq.n	8005386 <HAL_RCC_OscConfig+0x4f6>
 80053a8:	e014      	b.n	80053d4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053aa:	f7fd fe35 	bl	8003018 <HAL_GetTick>
 80053ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b2:	f7fd fe31 	bl	8003018 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e135      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053c8:	4b62      	ldr	r3, [pc, #392]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1ee      	bne.n	80053b2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 812a 	beq.w	8005632 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80053de:	4b5d      	ldr	r3, [pc, #372]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053e6:	2b18      	cmp	r3, #24
 80053e8:	f000 80ba 	beq.w	8005560 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	f040 8095 	bne.w	8005520 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f6:	4b57      	ldr	r3, [pc, #348]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a56      	ldr	r2, [pc, #344]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80053fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fd fe09 	bl	8003018 <HAL_GetTick>
 8005406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540a:	f7fd fe05 	bl	8003018 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e10b      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800541c:	4b4d      	ldr	r3, [pc, #308]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f0      	bne.n	800540a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005428:	4b4a      	ldr	r3, [pc, #296]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 800542a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800542c:	4b4a      	ldr	r3, [pc, #296]	@ (8005558 <HAL_RCC_OscConfig+0x6c8>)
 800542e:	4013      	ands	r3, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005438:	0112      	lsls	r2, r2, #4
 800543a:	430a      	orrs	r2, r1
 800543c:	4945      	ldr	r1, [pc, #276]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 800543e:	4313      	orrs	r3, r2
 8005440:	628b      	str	r3, [r1, #40]	@ 0x28
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	3b01      	subs	r3, #1
 8005448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005450:	3b01      	subs	r3, #1
 8005452:	025b      	lsls	r3, r3, #9
 8005454:	b29b      	uxth	r3, r3
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545c:	3b01      	subs	r3, #1
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546a:	3b01      	subs	r3, #1
 800546c:	061b      	lsls	r3, r3, #24
 800546e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005472:	4938      	ldr	r1, [pc, #224]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005474:	4313      	orrs	r3, r2
 8005476:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005478:	4b36      	ldr	r3, [pc, #216]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	4a35      	ldr	r2, [pc, #212]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005484:	4b33      	ldr	r3, [pc, #204]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005488:	4b34      	ldr	r3, [pc, #208]	@ (800555c <HAL_RCC_OscConfig+0x6cc>)
 800548a:	4013      	ands	r3, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005490:	00d2      	lsls	r2, r2, #3
 8005492:	4930      	ldr	r1, [pc, #192]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005494:	4313      	orrs	r3, r2
 8005496:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005498:	4b2e      	ldr	r3, [pc, #184]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	f023 020c 	bic.w	r2, r3, #12
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	492b      	ldr	r1, [pc, #172]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80054aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	f023 0202 	bic.w	r2, r3, #2
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	4927      	ldr	r1, [pc, #156]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054bc:	4b25      	ldr	r3, [pc, #148]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	4a24      	ldr	r2, [pc, #144]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c8:	4b22      	ldr	r3, [pc, #136]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	4a21      	ldr	r2, [pc, #132]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80054d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80054e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ec:	4b19      	ldr	r3, [pc, #100]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a18      	ldr	r2, [pc, #96]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 80054f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fd fd8e 	bl	8003018 <HAL_GetTick>
 80054fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7fd fd8a 	bl	8003018 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e090      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCC_OscConfig+0x670>
 800551e:	e088      	b.n	8005632 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005520:	4b0c      	ldr	r3, [pc, #48]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a0b      	ldr	r2, [pc, #44]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800552a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fd fd74 	bl	8003018 <HAL_GetTick>
 8005530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005534:	f7fd fd70 	bl	8003018 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e076      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005546:	4b03      	ldr	r3, [pc, #12]	@ (8005554 <HAL_RCC_OscConfig+0x6c4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a4>
 8005552:	e06e      	b.n	8005632 <HAL_RCC_OscConfig+0x7a2>
 8005554:	58024400 	.word	0x58024400
 8005558:	fffffc0c 	.word	0xfffffc0c
 800555c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005560:	4b36      	ldr	r3, [pc, #216]	@ (800563c <HAL_RCC_OscConfig+0x7ac>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005566:	4b35      	ldr	r3, [pc, #212]	@ (800563c <HAL_RCC_OscConfig+0x7ac>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	2b01      	cmp	r3, #1
 8005572:	d031      	beq.n	80055d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f003 0203 	and.w	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d12a      	bne.n	80055d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d122      	bne.n	80055d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800559e:	429a      	cmp	r2, r3
 80055a0:	d11a      	bne.n	80055d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	0a5b      	lsrs	r3, r3, #9
 80055a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d111      	bne.n	80055d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	0c1b      	lsrs	r3, r3, #16
 80055b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d108      	bne.n	80055d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	0e1b      	lsrs	r3, r3, #24
 80055ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e02b      	b.n	8005634 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80055dc:	4b17      	ldr	r3, [pc, #92]	@ (800563c <HAL_RCC_OscConfig+0x7ac>)
 80055de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e0:	08db      	lsrs	r3, r3, #3
 80055e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d01f      	beq.n	8005632 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80055f2:	4b12      	ldr	r3, [pc, #72]	@ (800563c <HAL_RCC_OscConfig+0x7ac>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	4a11      	ldr	r2, [pc, #68]	@ (800563c <HAL_RCC_OscConfig+0x7ac>)
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055fe:	f7fd fd0b 	bl	8003018 <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005604:	bf00      	nop
 8005606:	f7fd fd07 	bl	8003018 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	4293      	cmp	r3, r2
 8005610:	d0f9      	beq.n	8005606 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005612:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <HAL_RCC_OscConfig+0x7ac>)
 8005614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005616:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <HAL_RCC_OscConfig+0x7b0>)
 8005618:	4013      	ands	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800561e:	00d2      	lsls	r2, r2, #3
 8005620:	4906      	ldr	r1, [pc, #24]	@ (800563c <HAL_RCC_OscConfig+0x7ac>)
 8005622:	4313      	orrs	r3, r2
 8005624:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005626:	4b05      	ldr	r3, [pc, #20]	@ (800563c <HAL_RCC_OscConfig+0x7ac>)
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	4a04      	ldr	r2, [pc, #16]	@ (800563c <HAL_RCC_OscConfig+0x7ac>)
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3730      	adds	r7, #48	@ 0x30
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	58024400 	.word	0x58024400
 8005640:	ffff0007 	.word	0xffff0007

08005644 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e19c      	b.n	8005992 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005658:	4b8a      	ldr	r3, [pc, #552]	@ (8005884 <HAL_RCC_ClockConfig+0x240>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d910      	bls.n	8005688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b87      	ldr	r3, [pc, #540]	@ (8005884 <HAL_RCC_ClockConfig+0x240>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 020f 	bic.w	r2, r3, #15
 800566e:	4985      	ldr	r1, [pc, #532]	@ (8005884 <HAL_RCC_ClockConfig+0x240>)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b83      	ldr	r3, [pc, #524]	@ (8005884 <HAL_RCC_ClockConfig+0x240>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e184      	b.n	8005992 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d010      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	4b7b      	ldr	r3, [pc, #492]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d908      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056a4:	4b78      	ldr	r3, [pc, #480]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	4975      	ldr	r1, [pc, #468]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d010      	beq.n	80056e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	4b70      	ldr	r3, [pc, #448]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d908      	bls.n	80056e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	496a      	ldr	r1, [pc, #424]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d010      	beq.n	8005712 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699a      	ldr	r2, [r3, #24]
 80056f4:	4b64      	ldr	r3, [pc, #400]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d908      	bls.n	8005712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005700:	4b61      	ldr	r3, [pc, #388]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	495e      	ldr	r1, [pc, #376]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 800570e:	4313      	orrs	r3, r2
 8005710:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69da      	ldr	r2, [r3, #28]
 8005722:	4b59      	ldr	r3, [pc, #356]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800572a:	429a      	cmp	r2, r3
 800572c:	d908      	bls.n	8005740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800572e:	4b56      	ldr	r3, [pc, #344]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	4953      	ldr	r1, [pc, #332]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 800573c:	4313      	orrs	r3, r2
 800573e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d010      	beq.n	800576e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	4b4d      	ldr	r3, [pc, #308]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	429a      	cmp	r2, r3
 800575a:	d908      	bls.n	800576e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800575c:	4b4a      	ldr	r3, [pc, #296]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f023 020f 	bic.w	r2, r3, #15
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4947      	ldr	r1, [pc, #284]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 800576a:	4313      	orrs	r3, r2
 800576c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d055      	beq.n	8005826 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800577a:	4b43      	ldr	r3, [pc, #268]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	4940      	ldr	r1, [pc, #256]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005788:	4313      	orrs	r3, r2
 800578a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d107      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005794:	4b3c      	ldr	r3, [pc, #240]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d121      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0f6      	b.n	8005992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d107      	bne.n	80057bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057ac:	4b36      	ldr	r3, [pc, #216]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d115      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0ea      	b.n	8005992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d107      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057c4:	4b30      	ldr	r3, [pc, #192]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0de      	b.n	8005992 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0d6      	b.n	8005992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057e4:	4b28      	ldr	r3, [pc, #160]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f023 0207 	bic.w	r2, r3, #7
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	4925      	ldr	r1, [pc, #148]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f6:	f7fd fc0f 	bl	8003018 <HAL_GetTick>
 80057fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fc:	e00a      	b.n	8005814 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fe:	f7fd fc0b 	bl	8003018 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e0be      	b.n	8005992 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005814:	4b1c      	ldr	r3, [pc, #112]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	429a      	cmp	r2, r3
 8005824:	d1eb      	bne.n	80057fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d010      	beq.n	8005854 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	4b14      	ldr	r3, [pc, #80]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	429a      	cmp	r2, r3
 8005840:	d208      	bcs.n	8005854 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005842:	4b11      	ldr	r3, [pc, #68]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f023 020f 	bic.w	r2, r3, #15
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	490e      	ldr	r1, [pc, #56]	@ (8005888 <HAL_RCC_ClockConfig+0x244>)
 8005850:	4313      	orrs	r3, r2
 8005852:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005854:	4b0b      	ldr	r3, [pc, #44]	@ (8005884 <HAL_RCC_ClockConfig+0x240>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d214      	bcs.n	800588c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005862:	4b08      	ldr	r3, [pc, #32]	@ (8005884 <HAL_RCC_ClockConfig+0x240>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 020f 	bic.w	r2, r3, #15
 800586a:	4906      	ldr	r1, [pc, #24]	@ (8005884 <HAL_RCC_ClockConfig+0x240>)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	4313      	orrs	r3, r2
 8005870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b04      	ldr	r3, [pc, #16]	@ (8005884 <HAL_RCC_ClockConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d005      	beq.n	800588c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e086      	b.n	8005992 <HAL_RCC_ClockConfig+0x34e>
 8005884:	52002000 	.word	0x52002000
 8005888:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d010      	beq.n	80058ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	4b3f      	ldr	r3, [pc, #252]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d208      	bcs.n	80058ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058a8:	4b3c      	ldr	r3, [pc, #240]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	4939      	ldr	r1, [pc, #228]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d010      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	4b34      	ldr	r3, [pc, #208]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d208      	bcs.n	80058e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058d6:	4b31      	ldr	r3, [pc, #196]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	492e      	ldr	r1, [pc, #184]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d010      	beq.n	8005916 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699a      	ldr	r2, [r3, #24]
 80058f8:	4b28      	ldr	r3, [pc, #160]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005900:	429a      	cmp	r2, r3
 8005902:	d208      	bcs.n	8005916 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005904:	4b25      	ldr	r3, [pc, #148]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	4922      	ldr	r1, [pc, #136]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 8005912:	4313      	orrs	r3, r2
 8005914:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d010      	beq.n	8005944 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	4b1d      	ldr	r3, [pc, #116]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800592e:	429a      	cmp	r2, r3
 8005930:	d208      	bcs.n	8005944 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005932:	4b1a      	ldr	r3, [pc, #104]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	4917      	ldr	r1, [pc, #92]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 8005940:	4313      	orrs	r3, r2
 8005942:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005944:	f000 f834 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8005948:	4602      	mov	r2, r0
 800594a:	4b14      	ldr	r3, [pc, #80]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	4912      	ldr	r1, [pc, #72]	@ (80059a0 <HAL_RCC_ClockConfig+0x35c>)
 8005956:	5ccb      	ldrb	r3, [r1, r3]
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
 8005960:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005962:	4b0e      	ldr	r3, [pc, #56]	@ (800599c <HAL_RCC_ClockConfig+0x358>)
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	4a0d      	ldr	r2, [pc, #52]	@ (80059a0 <HAL_RCC_ClockConfig+0x35c>)
 800596c:	5cd3      	ldrb	r3, [r2, r3]
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
 8005978:	4a0a      	ldr	r2, [pc, #40]	@ (80059a4 <HAL_RCC_ClockConfig+0x360>)
 800597a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800597c:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <HAL_RCC_ClockConfig+0x364>)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005982:	4b0a      	ldr	r3, [pc, #40]	@ (80059ac <HAL_RCC_ClockConfig+0x368>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7fd fafc 	bl	8002f84 <HAL_InitTick>
 800598c:	4603      	mov	r3, r0
 800598e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	58024400 	.word	0x58024400
 80059a0:	0800e488 	.word	0x0800e488
 80059a4:	24000020 	.word	0x24000020
 80059a8:	2400001c 	.word	0x2400001c
 80059ac:	24000028 	.word	0x24000028

080059b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b089      	sub	sp, #36	@ 0x24
 80059b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059b6:	4bb3      	ldr	r3, [pc, #716]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059be:	2b18      	cmp	r3, #24
 80059c0:	f200 8155 	bhi.w	8005c6e <HAL_RCC_GetSysClockFreq+0x2be>
 80059c4:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	08005a31 	.word	0x08005a31
 80059d0:	08005c6f 	.word	0x08005c6f
 80059d4:	08005c6f 	.word	0x08005c6f
 80059d8:	08005c6f 	.word	0x08005c6f
 80059dc:	08005c6f 	.word	0x08005c6f
 80059e0:	08005c6f 	.word	0x08005c6f
 80059e4:	08005c6f 	.word	0x08005c6f
 80059e8:	08005c6f 	.word	0x08005c6f
 80059ec:	08005a57 	.word	0x08005a57
 80059f0:	08005c6f 	.word	0x08005c6f
 80059f4:	08005c6f 	.word	0x08005c6f
 80059f8:	08005c6f 	.word	0x08005c6f
 80059fc:	08005c6f 	.word	0x08005c6f
 8005a00:	08005c6f 	.word	0x08005c6f
 8005a04:	08005c6f 	.word	0x08005c6f
 8005a08:	08005c6f 	.word	0x08005c6f
 8005a0c:	08005a5d 	.word	0x08005a5d
 8005a10:	08005c6f 	.word	0x08005c6f
 8005a14:	08005c6f 	.word	0x08005c6f
 8005a18:	08005c6f 	.word	0x08005c6f
 8005a1c:	08005c6f 	.word	0x08005c6f
 8005a20:	08005c6f 	.word	0x08005c6f
 8005a24:	08005c6f 	.word	0x08005c6f
 8005a28:	08005c6f 	.word	0x08005c6f
 8005a2c:	08005a63 	.word	0x08005a63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a30:	4b94      	ldr	r3, [pc, #592]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a3c:	4b91      	ldr	r3, [pc, #580]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	08db      	lsrs	r3, r3, #3
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	4a90      	ldr	r2, [pc, #576]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a48:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005a4e:	e111      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a50:	4b8d      	ldr	r3, [pc, #564]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a52:	61bb      	str	r3, [r7, #24]
      break;
 8005a54:	e10e      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005a56:	4b8d      	ldr	r3, [pc, #564]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a58:	61bb      	str	r3, [r7, #24]
      break;
 8005a5a:	e10b      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a5e:	61bb      	str	r3, [r7, #24]
      break;
 8005a60:	e108      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a62:	4b88      	ldr	r3, [pc, #544]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a6c:	4b85      	ldr	r3, [pc, #532]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	091b      	lsrs	r3, r3, #4
 8005a72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a78:	4b82      	ldr	r3, [pc, #520]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a82:	4b80      	ldr	r3, [pc, #512]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a86:	08db      	lsrs	r3, r3, #3
 8005a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80e1 	beq.w	8005c68 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	f000 8083 	beq.w	8005bb4 <HAL_RCC_GetSysClockFreq+0x204>
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	f200 80a1 	bhi.w	8005bf8 <HAL_RCC_GetSysClockFreq+0x248>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x114>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d056      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ac2:	e099      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d02d      	beq.n	8005b2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	08db      	lsrs	r3, r3, #3
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	4a6b      	ldr	r2, [pc, #428]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	ee07 3a90 	vmov	s15, r3
 8005ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afa:	4b62      	ldr	r3, [pc, #392]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005b2a:	e087      	b.n	8005c3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3e:	4b51      	ldr	r3, [pc, #324]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b6e:	e065      	b.n	8005c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b82:	4b40      	ldr	r3, [pc, #256]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bb2:	e043      	b.n	8005c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bbe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ca0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bf6:	e021      	b.n	8005c3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005c3c:	4b11      	ldr	r3, [pc, #68]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c40:	0a5b      	lsrs	r3, r3, #9
 8005c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c46:	3301      	adds	r3, #1
 8005c48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c60:	ee17 3a90 	vmov	r3, s15
 8005c64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005c66:	e005      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
      break;
 8005c6c:	e002      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005c6e:	4b07      	ldr	r3, [pc, #28]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c70:	61bb      	str	r3, [r7, #24]
      break;
 8005c72:	bf00      	nop
  }

  return sysclockfreq;
 8005c74:	69bb      	ldr	r3, [r7, #24]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3724      	adds	r7, #36	@ 0x24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	58024400 	.word	0x58024400
 8005c88:	03d09000 	.word	0x03d09000
 8005c8c:	003d0900 	.word	0x003d0900
 8005c90:	017d7840 	.word	0x017d7840
 8005c94:	46000000 	.word	0x46000000
 8005c98:	4c742400 	.word	0x4c742400
 8005c9c:	4a742400 	.word	0x4a742400
 8005ca0:	4bbebc20 	.word	0x4bbebc20

08005ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005caa:	f7ff fe81 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	490f      	ldr	r1, [pc, #60]	@ (8005cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cbc:	5ccb      	ldrb	r3, [r1, r3]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	4a09      	ldr	r2, [pc, #36]	@ (8005cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cd2:	5cd3      	ldrb	r3, [r2, r3]
 8005cd4:	f003 031f 	and.w	r3, r3, #31
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	fa22 f303 	lsr.w	r3, r2, r3
 8005cde:	4a07      	ldr	r2, [pc, #28]	@ (8005cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8005ce0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ce2:	4a07      	ldr	r2, [pc, #28]	@ (8005d00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ce8:	4b04      	ldr	r3, [pc, #16]	@ (8005cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8005cea:	681b      	ldr	r3, [r3, #0]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	0800e488 	.word	0x0800e488
 8005cfc:	24000020 	.word	0x24000020
 8005d00:	2400001c 	.word	0x2400001c

08005d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005d08:	f7ff ffcc 	bl	8005ca4 <HAL_RCC_GetHCLKFreq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	091b      	lsrs	r3, r3, #4
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	4904      	ldr	r1, [pc, #16]	@ (8005d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d1a:	5ccb      	ldrb	r3, [r1, r3]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	58024400 	.word	0x58024400
 8005d2c:	0800e488 	.word	0x0800e488

08005d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005d34:	f7ff ffb6 	bl	8005ca4 <HAL_RCC_GetHCLKFreq>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	0a1b      	lsrs	r3, r3, #8
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	4904      	ldr	r1, [pc, #16]	@ (8005d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d46:	5ccb      	ldrb	r3, [r1, r3]
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	58024400 	.word	0x58024400
 8005d58:	0800e488 	.word	0x0800e488

08005d5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d60:	b0c6      	sub	sp, #280	@ 0x118
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005d80:	2500      	movs	r5, #0
 8005d82:	ea54 0305 	orrs.w	r3, r4, r5
 8005d86:	d049      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d92:	d02f      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d98:	d828      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d9e:	d01a      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005da4:	d822      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dae:	d007      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005db0:	e01c      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db2:	4bab      	ldr	r3, [pc, #684]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	4aaa      	ldr	r2, [pc, #680]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005dbe:	e01a      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 fc25 	bl	8007618 <RCCEx_PLL2_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005dd4:	e00f      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dda:	3328      	adds	r3, #40	@ 0x28
 8005ddc:	2102      	movs	r1, #2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 fccc 	bl	800777c <RCCEx_PLL3_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005dea:	e004      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005df2:	e000      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005dfe:	4b98      	ldr	r3, [pc, #608]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e0c:	4a94      	ldr	r2, [pc, #592]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e12:	e003      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005e28:	f04f 0900 	mov.w	r9, #0
 8005e2c:	ea58 0309 	orrs.w	r3, r8, r9
 8005e30:	d047      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d82a      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e59 	.word	0x08005e59
 8005e48:	08005e67 	.word	0x08005e67
 8005e4c:	08005e7d 	.word	0x08005e7d
 8005e50:	08005e9b 	.word	0x08005e9b
 8005e54:	08005e9b 	.word	0x08005e9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e58:	4b81      	ldr	r3, [pc, #516]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5c:	4a80      	ldr	r2, [pc, #512]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e64:	e01a      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fbd2 	bl	8007618 <RCCEx_PLL2_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e7a:	e00f      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e80:	3328      	adds	r3, #40	@ 0x28
 8005e82:	2100      	movs	r1, #0
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 fc79 	bl	800777c <RCCEx_PLL3_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e90:	e004      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e98:	e000      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ea4:	4b6e      	ldr	r3, [pc, #440]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea8:	f023 0107 	bic.w	r1, r3, #7
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb2:	4a6b      	ldr	r2, [pc, #428]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ebe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005ece:	f04f 0b00 	mov.w	fp, #0
 8005ed2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ed6:	d05b      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005edc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ee0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005ee4:	d03b      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005ee6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005eea:	d834      	bhi.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005eec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ef0:	d037      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005ef2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ef6:	d82e      	bhi.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ef8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005efc:	d033      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005efe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f02:	d828      	bhi.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f08:	d01a      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f0e:	d822      	bhi.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005f14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f18:	d007      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005f1a:	e01c      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f1c:	4b50      	ldr	r3, [pc, #320]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	4a4f      	ldr	r2, [pc, #316]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f28:	e01e      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2e:	3308      	adds	r3, #8
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 fb70 	bl	8007618 <RCCEx_PLL2_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f3e:	e013      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f44:	3328      	adds	r3, #40	@ 0x28
 8005f46:	2100      	movs	r1, #0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 fc17 	bl	800777c <RCCEx_PLL3_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f54:	e008      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f5c:	e004      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f70:	4b3b      	ldr	r3, [pc, #236]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f74:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f80:	4a37      	ldr	r2, [pc, #220]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f82:	430b      	orrs	r3, r1
 8005f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f86:	e003      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005faa:	460b      	mov	r3, r1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	d05d      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005fb8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005fbc:	d03b      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005fbe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005fc2:	d834      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fc8:	d037      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005fca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fce:	d82e      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fd4:	d033      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005fd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fda:	d828      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fe0:	d01a      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fe6:	d822      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ff0:	d007      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005ff2:	e01c      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff8:	4a19      	ldr	r2, [pc, #100]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006000:	e01e      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006006:	3308      	adds	r3, #8
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fb04 	bl	8007618 <RCCEx_PLL2_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006016:	e013      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601c:	3328      	adds	r3, #40	@ 0x28
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f001 fbab 	bl	800777c <RCCEx_PLL3_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800602c:	e008      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006034:	e004      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006036:	bf00      	nop
 8006038:	e002      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800603e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10d      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006048:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800604a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006054:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006058:	4a01      	ldr	r2, [pc, #4]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800605a:	430b      	orrs	r3, r1
 800605c:	6593      	str	r3, [r2, #88]	@ 0x58
 800605e:	e005      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006068:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006078:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006082:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006086:	460b      	mov	r3, r1
 8006088:	4313      	orrs	r3, r2
 800608a:	d03a      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800608c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006092:	2b30      	cmp	r3, #48	@ 0x30
 8006094:	d01f      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006096:	2b30      	cmp	r3, #48	@ 0x30
 8006098:	d819      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800609a:	2b20      	cmp	r3, #32
 800609c:	d00c      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d815      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d019      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80060a6:	2b10      	cmp	r3, #16
 80060a8:	d111      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060aa:	4baa      	ldr	r3, [pc, #680]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ae:	4aa9      	ldr	r2, [pc, #676]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80060b6:	e011      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060bc:	3308      	adds	r3, #8
 80060be:	2102      	movs	r1, #2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 faa9 	bl	8007618 <RCCEx_PLL2_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80060cc:	e006      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060d4:	e002      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80060d6:	bf00      	nop
 80060d8:	e000      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80060da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80060e4:	4b9b      	ldr	r3, [pc, #620]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f2:	4a98      	ldr	r2, [pc, #608]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060f4:	430b      	orrs	r3, r1
 80060f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060f8:	e003      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800610e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006112:	2300      	movs	r3, #0
 8006114:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006118:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800611c:	460b      	mov	r3, r1
 800611e:	4313      	orrs	r3, r2
 8006120:	d051      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800612c:	d035      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800612e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006132:	d82e      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006134:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006138:	d031      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800613a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800613e:	d828      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006144:	d01a      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800614a:	d822      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006154:	d007      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006156:	e01c      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006158:	4b7e      	ldr	r3, [pc, #504]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	4a7d      	ldr	r2, [pc, #500]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800615e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006164:	e01c      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616a:	3308      	adds	r3, #8
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fa52 	bl	8007618 <RCCEx_PLL2_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800617a:	e011      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006180:	3328      	adds	r3, #40	@ 0x28
 8006182:	2100      	movs	r1, #0
 8006184:	4618      	mov	r0, r3
 8006186:	f001 faf9 	bl	800777c <RCCEx_PLL3_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006190:	e006      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006198:	e002      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800619e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b6:	4a67      	ldr	r2, [pc, #412]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061b8:	430b      	orrs	r3, r1
 80061ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80061bc:	e003      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80061d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061d6:	2300      	movs	r3, #0
 80061d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4313      	orrs	r3, r2
 80061e4:	d053      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061f0:	d033      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80061f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061f6:	d82c      	bhi.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80061f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061fc:	d02f      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80061fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006202:	d826      	bhi.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006204:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006208:	d02b      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800620a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800620e:	d820      	bhi.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006214:	d012      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800621a:	d81a      	bhi.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d022      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006224:	d115      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622a:	3308      	adds	r3, #8
 800622c:	2101      	movs	r1, #1
 800622e:	4618      	mov	r0, r3
 8006230:	f001 f9f2 	bl	8007618 <RCCEx_PLL2_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800623a:	e015      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006240:	3328      	adds	r3, #40	@ 0x28
 8006242:	2101      	movs	r1, #1
 8006244:	4618      	mov	r0, r3
 8006246:	f001 fa99 	bl	800777c <RCCEx_PLL3_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006250:	e00a      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006258:	e006      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800625a:	bf00      	nop
 800625c:	e004      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800625e:	bf00      	nop
 8006260:	e002      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006270:	4b38      	ldr	r3, [pc, #224]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006274:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627e:	4a35      	ldr	r2, [pc, #212]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006280:	430b      	orrs	r3, r1
 8006282:	6513      	str	r3, [r2, #80]	@ 0x50
 8006284:	e003      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006286:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800628a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800628e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800629a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800629e:	2300      	movs	r3, #0
 80062a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062a8:	460b      	mov	r3, r1
 80062aa:	4313      	orrs	r3, r2
 80062ac:	d058      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80062b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062ba:	d033      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80062bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062c0:	d82c      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80062c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c6:	d02f      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062cc:	d826      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80062ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062d2:	d02b      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80062d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062d8:	d820      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80062da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062de:	d012      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80062e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062e4:	d81a      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d022      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80062ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ee:	d115      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	3308      	adds	r3, #8
 80062f6:	2101      	movs	r1, #1
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 f98d 	bl	8007618 <RCCEx_PLL2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006304:	e015      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630a:	3328      	adds	r3, #40	@ 0x28
 800630c:	2101      	movs	r1, #1
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fa34 	bl	800777c <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800631a:	e00a      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006322:	e006      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006324:	bf00      	nop
 8006326:	e004      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006328:	bf00      	nop
 800632a:	e002      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10e      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800633a:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006346:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800634a:	4a02      	ldr	r2, [pc, #8]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800634c:	430b      	orrs	r3, r1
 800634e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006352:	bf00      	nop
 8006354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800635c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800636c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006370:	2300      	movs	r3, #0
 8006372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006376:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800637a:	460b      	mov	r3, r1
 800637c:	4313      	orrs	r3, r2
 800637e:	d037      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800638a:	d00e      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800638c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006390:	d816      	bhi.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d018      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006396:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800639a:	d111      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800639c:	4bc4      	ldr	r3, [pc, #784]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	4ac3      	ldr	r2, [pc, #780]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063a8:	e00f      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ae:	3308      	adds	r3, #8
 80063b0:	2101      	movs	r1, #1
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 f930 	bl	8007618 <RCCEx_PLL2_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063be:	e004      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063c6:	e000      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80063c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063d2:	4bb7      	ldr	r3, [pc, #732]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e0:	4ab3      	ldr	r2, [pc, #716]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e2:	430b      	orrs	r3, r1
 80063e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80063e6:	e003      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80063f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80063fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006400:	2300      	movs	r3, #0
 8006402:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006406:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800640a:	460b      	mov	r3, r1
 800640c:	4313      	orrs	r3, r2
 800640e:	d039      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006416:	2b03      	cmp	r3, #3
 8006418:	d81c      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	0800645d 	.word	0x0800645d
 8006424:	08006431 	.word	0x08006431
 8006428:	0800643f 	.word	0x0800643f
 800642c:	0800645d 	.word	0x0800645d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006430:	4b9f      	ldr	r3, [pc, #636]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006434:	4a9e      	ldr	r2, [pc, #632]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800643a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800643c:	e00f      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006442:	3308      	adds	r3, #8
 8006444:	2102      	movs	r1, #2
 8006446:	4618      	mov	r0, r3
 8006448:	f001 f8e6 	bl	8007618 <RCCEx_PLL2_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006452:	e004      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800645a:	e000      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800645c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006466:	4b92      	ldr	r3, [pc, #584]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800646a:	f023 0103 	bic.w	r1, r3, #3
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006474:	4a8e      	ldr	r2, [pc, #568]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006476:	430b      	orrs	r3, r1
 8006478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800647a:	e003      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800649a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f000 8099 	beq.w	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064a6:	4b83      	ldr	r3, [pc, #524]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a82      	ldr	r2, [pc, #520]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064b2:	f7fc fdb1 	bl	8003018 <HAL_GetTick>
 80064b6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064ba:	e00b      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064bc:	f7fc fdac 	bl	8003018 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b64      	cmp	r3, #100	@ 0x64
 80064ca:	d903      	bls.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064d2:	e005      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064d4:	4b77      	ldr	r3, [pc, #476]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0ed      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80064e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d173      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80064e8:	4b71      	ldr	r3, [pc, #452]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064f4:	4053      	eors	r3, r2
 80064f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d015      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064fe:	4b6c      	ldr	r3, [pc, #432]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006506:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800650a:	4b69      	ldr	r3, [pc, #420]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	4a68      	ldr	r2, [pc, #416]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006514:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006516:	4b66      	ldr	r3, [pc, #408]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651a:	4a65      	ldr	r2, [pc, #404]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800651c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006520:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006522:	4a63      	ldr	r2, [pc, #396]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006528:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006536:	d118      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fc fd6e 	bl	8003018 <HAL_GetTick>
 800653c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006540:	e00d      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006542:	f7fc fd69 	bl	8003018 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800654c:	1ad2      	subs	r2, r2, r3
 800654e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006552:	429a      	cmp	r2, r3
 8006554:	d903      	bls.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800655c:	e005      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800655e:	4b54      	ldr	r3, [pc, #336]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0eb      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800656a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800656e:	2b00      	cmp	r3, #0
 8006570:	d129      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800657a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800657e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006582:	d10e      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006584:	4b4a      	ldr	r3, [pc, #296]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006590:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006594:	091a      	lsrs	r2, r3, #4
 8006596:	4b48      	ldr	r3, [pc, #288]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006598:	4013      	ands	r3, r2
 800659a:	4a45      	ldr	r2, [pc, #276]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800659c:	430b      	orrs	r3, r1
 800659e:	6113      	str	r3, [r2, #16]
 80065a0:	e005      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80065a2:	4b43      	ldr	r3, [pc, #268]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	4a42      	ldr	r2, [pc, #264]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065ac:	6113      	str	r3, [r2, #16]
 80065ae:	4b40      	ldr	r3, [pc, #256]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065be:	4a3c      	ldr	r2, [pc, #240]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c4:	e008      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80065ce:	e003      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f002 0301 	and.w	r3, r2, #1
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065e8:	2300      	movs	r3, #0
 80065ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80065f2:	460b      	mov	r3, r1
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f000 808f 	beq.w	8006718 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006600:	2b28      	cmp	r3, #40	@ 0x28
 8006602:	d871      	bhi.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006604:	a201      	add	r2, pc, #4	@ (adr r2, 800660c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	080066f1 	.word	0x080066f1
 8006610:	080066e9 	.word	0x080066e9
 8006614:	080066e9 	.word	0x080066e9
 8006618:	080066e9 	.word	0x080066e9
 800661c:	080066e9 	.word	0x080066e9
 8006620:	080066e9 	.word	0x080066e9
 8006624:	080066e9 	.word	0x080066e9
 8006628:	080066e9 	.word	0x080066e9
 800662c:	080066bd 	.word	0x080066bd
 8006630:	080066e9 	.word	0x080066e9
 8006634:	080066e9 	.word	0x080066e9
 8006638:	080066e9 	.word	0x080066e9
 800663c:	080066e9 	.word	0x080066e9
 8006640:	080066e9 	.word	0x080066e9
 8006644:	080066e9 	.word	0x080066e9
 8006648:	080066e9 	.word	0x080066e9
 800664c:	080066d3 	.word	0x080066d3
 8006650:	080066e9 	.word	0x080066e9
 8006654:	080066e9 	.word	0x080066e9
 8006658:	080066e9 	.word	0x080066e9
 800665c:	080066e9 	.word	0x080066e9
 8006660:	080066e9 	.word	0x080066e9
 8006664:	080066e9 	.word	0x080066e9
 8006668:	080066e9 	.word	0x080066e9
 800666c:	080066f1 	.word	0x080066f1
 8006670:	080066e9 	.word	0x080066e9
 8006674:	080066e9 	.word	0x080066e9
 8006678:	080066e9 	.word	0x080066e9
 800667c:	080066e9 	.word	0x080066e9
 8006680:	080066e9 	.word	0x080066e9
 8006684:	080066e9 	.word	0x080066e9
 8006688:	080066e9 	.word	0x080066e9
 800668c:	080066f1 	.word	0x080066f1
 8006690:	080066e9 	.word	0x080066e9
 8006694:	080066e9 	.word	0x080066e9
 8006698:	080066e9 	.word	0x080066e9
 800669c:	080066e9 	.word	0x080066e9
 80066a0:	080066e9 	.word	0x080066e9
 80066a4:	080066e9 	.word	0x080066e9
 80066a8:	080066e9 	.word	0x080066e9
 80066ac:	080066f1 	.word	0x080066f1
 80066b0:	58024400 	.word	0x58024400
 80066b4:	58024800 	.word	0x58024800
 80066b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c0:	3308      	adds	r3, #8
 80066c2:	2101      	movs	r1, #1
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 ffa7 	bl	8007618 <RCCEx_PLL2_Config>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066d0:	e00f      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	3328      	adds	r3, #40	@ 0x28
 80066d8:	2101      	movs	r1, #1
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 f84e 	bl	800777c <RCCEx_PLL3_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066e6:	e004      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066ee:	e000      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80066f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10a      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80066fa:	4bbf      	ldr	r3, [pc, #764]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006706:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006708:	4abb      	ldr	r2, [pc, #748]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800670a:	430b      	orrs	r3, r1
 800670c:	6553      	str	r3, [r2, #84]	@ 0x54
 800670e:	e003      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006714:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f002 0302 	and.w	r3, r2, #2
 8006724:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006728:	2300      	movs	r3, #0
 800672a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800672e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006732:	460b      	mov	r3, r1
 8006734:	4313      	orrs	r3, r2
 8006736:	d041      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800673e:	2b05      	cmp	r3, #5
 8006740:	d824      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006742:	a201      	add	r2, pc, #4	@ (adr r2, 8006748 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	08006795 	.word	0x08006795
 800674c:	08006761 	.word	0x08006761
 8006750:	08006777 	.word	0x08006777
 8006754:	08006795 	.word	0x08006795
 8006758:	08006795 	.word	0x08006795
 800675c:	08006795 	.word	0x08006795
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006764:	3308      	adds	r3, #8
 8006766:	2101      	movs	r1, #1
 8006768:	4618      	mov	r0, r3
 800676a:	f000 ff55 	bl	8007618 <RCCEx_PLL2_Config>
 800676e:	4603      	mov	r3, r0
 8006770:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006774:	e00f      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677a:	3328      	adds	r3, #40	@ 0x28
 800677c:	2101      	movs	r1, #1
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fffc 	bl	800777c <RCCEx_PLL3_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800678a:	e004      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006792:	e000      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800679e:	4b96      	ldr	r3, [pc, #600]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a2:	f023 0107 	bic.w	r1, r3, #7
 80067a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ac:	4a92      	ldr	r2, [pc, #584]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067ae:	430b      	orrs	r3, r1
 80067b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80067b2:	e003      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f002 0304 	and.w	r3, r2, #4
 80067c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067cc:	2300      	movs	r3, #0
 80067ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067d6:	460b      	mov	r3, r1
 80067d8:	4313      	orrs	r3, r2
 80067da:	d044      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80067dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e4:	2b05      	cmp	r3, #5
 80067e6:	d825      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80067e8:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	0800683d 	.word	0x0800683d
 80067f4:	08006809 	.word	0x08006809
 80067f8:	0800681f 	.word	0x0800681f
 80067fc:	0800683d 	.word	0x0800683d
 8006800:	0800683d 	.word	0x0800683d
 8006804:	0800683d 	.word	0x0800683d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	3308      	adds	r3, #8
 800680e:	2101      	movs	r1, #1
 8006810:	4618      	mov	r0, r3
 8006812:	f000 ff01 	bl	8007618 <RCCEx_PLL2_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800681c:	e00f      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006822:	3328      	adds	r3, #40	@ 0x28
 8006824:	2101      	movs	r1, #1
 8006826:	4618      	mov	r0, r3
 8006828:	f000 ffa8 	bl	800777c <RCCEx_PLL3_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006832:	e004      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800683a:	e000      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800683c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006846:	4b6c      	ldr	r3, [pc, #432]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684a:	f023 0107 	bic.w	r1, r3, #7
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006856:	4a68      	ldr	r2, [pc, #416]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006858:	430b      	orrs	r3, r1
 800685a:	6593      	str	r3, [r2, #88]	@ 0x58
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006862:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f002 0320 	and.w	r3, r2, #32
 8006872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006876:	2300      	movs	r3, #0
 8006878:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800687c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d055      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800688e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006892:	d033      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006898:	d82c      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800689a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689e:	d02f      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a4:	d826      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068aa:	d02b      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80068ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068b0:	d820      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b6:	d012      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80068b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068bc:	d81a      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d022      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80068c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068c6:	d115      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	3308      	adds	r3, #8
 80068ce:	2100      	movs	r1, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fea1 	bl	8007618 <RCCEx_PLL2_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068dc:	e015      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e2:	3328      	adds	r3, #40	@ 0x28
 80068e4:	2102      	movs	r1, #2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 ff48 	bl	800777c <RCCEx_PLL3_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068f2:	e00a      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068fa:	e006      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80068fc:	bf00      	nop
 80068fe:	e004      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006900:	bf00      	nop
 8006902:	e002      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006904:	bf00      	nop
 8006906:	e000      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800690a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10b      	bne.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006912:	4b39      	ldr	r3, [pc, #228]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006916:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006922:	4a35      	ldr	r2, [pc, #212]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006924:	430b      	orrs	r3, r1
 8006926:	6553      	str	r3, [r2, #84]	@ 0x54
 8006928:	e003      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800692e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800693e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006942:	2300      	movs	r3, #0
 8006944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006948:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800694c:	460b      	mov	r3, r1
 800694e:	4313      	orrs	r3, r2
 8006950:	d058      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800695a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800695e:	d033      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006960:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006964:	d82c      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800696a:	d02f      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006970:	d826      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006976:	d02b      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006978:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800697c:	d820      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800697e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006982:	d012      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006988:	d81a      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d022      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800698e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006992:	d115      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006998:	3308      	adds	r3, #8
 800699a:	2100      	movs	r1, #0
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fe3b 	bl	8007618 <RCCEx_PLL2_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069a8:	e015      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ae:	3328      	adds	r3, #40	@ 0x28
 80069b0:	2102      	movs	r1, #2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fee2 	bl	800777c <RCCEx_PLL3_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069be:	e00a      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069c6:	e006      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80069c8:	bf00      	nop
 80069ca:	e004      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80069cc:	bf00      	nop
 80069ce:	e002      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80069d0:	bf00      	nop
 80069d2:	e000      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80069d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10e      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069de:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069ee:	4a02      	ldr	r2, [pc, #8]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069f0:	430b      	orrs	r3, r1
 80069f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80069f4:	e006      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80069f6:	bf00      	nop
 80069f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a14:	2300      	movs	r3, #0
 8006a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4313      	orrs	r3, r2
 8006a22:	d055      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a2c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a30:	d033      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006a32:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a36:	d82c      	bhi.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a3c:	d02f      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a42:	d826      	bhi.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a44:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a48:	d02b      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006a4a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a4e:	d820      	bhi.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a54:	d012      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a5a:	d81a      	bhi.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d022      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a64:	d115      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fdd2 	bl	8007618 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a7a:	e015      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a80:	3328      	adds	r3, #40	@ 0x28
 8006a82:	2102      	movs	r1, #2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fe79 	bl	800777c <RCCEx_PLL3_Config>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a90:	e00a      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a98:	e006      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006a9a:	bf00      	nop
 8006a9c:	e004      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006a9e:	bf00      	nop
 8006aa0:	e002      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006aa2:	bf00      	nop
 8006aa4:	e000      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10b      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ac0:	4a9c      	ldr	r2, [pc, #624]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ac6:	e003      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f002 0308 	and.w	r3, r2, #8
 8006adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ae6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006aea:	460b      	mov	r3, r1
 8006aec:	4313      	orrs	r3, r2
 8006aee:	d01e      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afc:	d10c      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b02:	3328      	adds	r3, #40	@ 0x28
 8006b04:	2102      	movs	r1, #2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fe38 	bl	800777c <RCCEx_PLL3_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006b18:	4b86      	ldr	r3, [pc, #536]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b28:	4a82      	ldr	r2, [pc, #520]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f002 0310 	and.w	r3, r2, #16
 8006b3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b44:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	d01e      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b5a:	d10c      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b60:	3328      	adds	r3, #40	@ 0x28
 8006b62:	2102      	movs	r1, #2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fe09 	bl	800777c <RCCEx_PLL3_Config>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b76:	4b6f      	ldr	r3, [pc, #444]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b86:	4a6b      	ldr	r2, [pc, #428]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b9e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d03e      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb4:	d022      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bba:	d81b      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc4:	d00b      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006bc6:	e015      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bcc:	3308      	adds	r3, #8
 8006bce:	2100      	movs	r1, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fd21 	bl	8007618 <RCCEx_PLL2_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bdc:	e00f      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be2:	3328      	adds	r3, #40	@ 0x28
 8006be4:	2102      	movs	r1, #2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fdc8 	bl	800777c <RCCEx_PLL3_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bf2:	e004      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bfa:	e000      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10b      	bne.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c06:	4b4b      	ldr	r3, [pc, #300]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c16:	4a47      	ldr	r2, [pc, #284]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c1c:	e003      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c32:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c34:	2300      	movs	r3, #0
 8006c36:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	d03b      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c4e:	d01f      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006c50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c54:	d818      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c5a:	d003      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006c5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c60:	d007      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006c62:	e011      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4b33      	ldr	r3, [pc, #204]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	4a32      	ldr	r2, [pc, #200]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c70:	e00f      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c76:	3328      	adds	r3, #40	@ 0x28
 8006c78:	2101      	movs	r1, #1
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fd7e 	bl	800777c <RCCEx_PLL3_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c86:	e004      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c9a:	4b26      	ldr	r3, [pc, #152]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006caa:	4a22      	ldr	r2, [pc, #136]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cc8:	2300      	movs	r3, #0
 8006cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ccc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	d034      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce4:	d007      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006ce6:	e011      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce8:	4b12      	ldr	r3, [pc, #72]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	4a11      	ldr	r2, [pc, #68]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006cf4:	e00e      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fc8a 	bl	8007618 <RCCEx_PLL2_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d0a:	e003      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d1c:	4b05      	ldr	r3, [pc, #20]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d2a:	4a02      	ldr	r2, [pc, #8]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d30:	e006      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006d32:	bf00      	nop
 8006d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d4e:	2300      	movs	r3, #0
 8006d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d52:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d56:	460b      	mov	r3, r1
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	d00c      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	3328      	adds	r3, #40	@ 0x28
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fd09 	bl	800777c <RCCEx_PLL3_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d84:	2300      	movs	r3, #0
 8006d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d88:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	d036      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d9c:	d018      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006da2:	d811      	bhi.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da8:	d014      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dae:	d80b      	bhi.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d011      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db8:	d106      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dba:	4bb7      	ldr	r3, [pc, #732]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	4ab6      	ldr	r2, [pc, #728]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006dc6:	e008      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dce:	e004      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006dd0:	bf00      	nop
 8006dd2:	e002      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006dd4:	bf00      	nop
 8006dd6:	e000      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006de2:	4bad      	ldr	r3, [pc, #692]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006df0:	4aa9      	ldr	r2, [pc, #676]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006df2:	430b      	orrs	r3, r1
 8006df4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006df6:	e003      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e0e:	2300      	movs	r3, #0
 8006e10:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e16:	460b      	mov	r3, r1
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	d009      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e1c:	4b9e      	ldr	r3, [pc, #632]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2a:	4a9b      	ldr	r2, [pc, #620]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e3e:	2300      	movs	r3, #0
 8006e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e46:	460b      	mov	r3, r1
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	d009      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e4c:	4b92      	ldr	r3, [pc, #584]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e50:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e5a:	4a8f      	ldr	r2, [pc, #572]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e6e:	2300      	movs	r3, #0
 8006e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d00e      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e7c:	4b86      	ldr	r3, [pc, #536]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	4a85      	ldr	r2, [pc, #532]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e86:	6113      	str	r3, [r2, #16]
 8006e88:	4b83      	ldr	r3, [pc, #524]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e8a:	6919      	ldr	r1, [r3, #16]
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e94:	4a80      	ldr	r2, [pc, #512]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e96:	430b      	orrs	r3, r1
 8006e98:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	d009      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006eb6:	4b78      	ldr	r3, [pc, #480]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec4:	4a74      	ldr	r2, [pc, #464]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed8:	2300      	movs	r3, #0
 8006eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006edc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	d00a      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef6:	4a68      	ldr	r2, [pc, #416]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	2100      	movs	r1, #0
 8006f06:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f12:	460b      	mov	r3, r1
 8006f14:	4313      	orrs	r3, r2
 8006f16:	d011      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fb79 	bl	8007618 <RCCEx_PLL2_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	2100      	movs	r1, #0
 8006f46:	6239      	str	r1, [r7, #32]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f52:	460b      	mov	r3, r1
 8006f54:	4313      	orrs	r3, r2
 8006f56:	d011      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	2101      	movs	r1, #1
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fb59 	bl	8007618 <RCCEx_PLL2_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	2100      	movs	r1, #0
 8006f86:	61b9      	str	r1, [r7, #24]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d011      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	2102      	movs	r1, #2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fb39 	bl	8007618 <RCCEx_PLL2_Config>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006fac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	6139      	str	r1, [r7, #16]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	d011      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fdc:	3328      	adds	r3, #40	@ 0x28
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fbcb 	bl	800777c <RCCEx_PLL3_Config>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	2100      	movs	r1, #0
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007012:	460b      	mov	r3, r1
 8007014:	4313      	orrs	r3, r2
 8007016:	d011      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701c:	3328      	adds	r3, #40	@ 0x28
 800701e:	2101      	movs	r1, #1
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fbab 	bl	800777c <RCCEx_PLL3_Config>
 8007026:	4603      	mov	r3, r0
 8007028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800702c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	2100      	movs	r1, #0
 8007046:	6039      	str	r1, [r7, #0]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	607b      	str	r3, [r7, #4]
 800704e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007052:	460b      	mov	r3, r1
 8007054:	4313      	orrs	r3, r2
 8007056:	d011      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	3328      	adds	r3, #40	@ 0x28
 800705e:	2102      	movs	r1, #2
 8007060:	4618      	mov	r0, r3
 8007062:	f000 fb8b 	bl	800777c <RCCEx_PLL3_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800706c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800707c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	e000      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
}
 800708a:	4618      	mov	r0, r3
 800708c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007090:	46bd      	mov	sp, r7
 8007092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007096:	bf00      	nop
 8007098:	58024400 	.word	0x58024400

0800709c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070a0:	f7fe fe00 	bl	8005ca4 <HAL_RCC_GetHCLKFreq>
 80070a4:	4602      	mov	r2, r0
 80070a6:	4b06      	ldr	r3, [pc, #24]	@ (80070c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	091b      	lsrs	r3, r3, #4
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	4904      	ldr	r1, [pc, #16]	@ (80070c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070b2:	5ccb      	ldrb	r3, [r1, r3]
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	58024400 	.word	0x58024400
 80070c4:	0800e488 	.word	0x0800e488

080070c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b089      	sub	sp, #36	@ 0x24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070d0:	4ba1      	ldr	r3, [pc, #644]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070da:	4b9f      	ldr	r3, [pc, #636]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070de:	0b1b      	lsrs	r3, r3, #12
 80070e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070e6:	4b9c      	ldr	r3, [pc, #624]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ea:	091b      	lsrs	r3, r3, #4
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80070f2:	4b99      	ldr	r3, [pc, #612]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f6:	08db      	lsrs	r3, r3, #3
 80070f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	fb02 f303 	mul.w	r3, r2, r3
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8111 	beq.w	8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b02      	cmp	r3, #2
 800711a:	f000 8083 	beq.w	8007224 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b02      	cmp	r3, #2
 8007122:	f200 80a1 	bhi.w	8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d056      	beq.n	80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007132:	e099      	b.n	8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007134:	4b88      	ldr	r3, [pc, #544]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d02d      	beq.n	800719c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007140:	4b85      	ldr	r3, [pc, #532]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	08db      	lsrs	r3, r3, #3
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	4a84      	ldr	r2, [pc, #528]	@ (800735c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
 8007150:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716a:	4b7b      	ldr	r3, [pc, #492]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800716c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717a:	ed97 6a03 	vldr	s12, [r7, #12]
 800717e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007196:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800719a:	e087      	b.n	80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ae:	4b6a      	ldr	r3, [pc, #424]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071be:	ed97 6a03 	vldr	s12, [r7, #12]
 80071c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071de:	e065      	b.n	80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	4b59      	ldr	r3, [pc, #356]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007202:	ed97 6a03 	vldr	s12, [r7, #12]
 8007206:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007222:	e043      	b.n	80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007236:	4b48      	ldr	r3, [pc, #288]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007246:	ed97 6a03 	vldr	s12, [r7, #12]
 800724a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800724e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800725a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800725e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007266:	e021      	b.n	80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727a:	4b37      	ldr	r3, [pc, #220]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728a:	ed97 6a03 	vldr	s12, [r7, #12]
 800728e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800729e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80072ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b0:	0a5b      	lsrs	r3, r3, #9
 80072b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d2:	ee17 2a90 	vmov	r2, s15
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072da:	4b1f      	ldr	r3, [pc, #124]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072de:	0c1b      	lsrs	r3, r3, #16
 80072e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072e4:	ee07 3a90 	vmov	s15, r3
 80072e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007300:	ee17 2a90 	vmov	r2, s15
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007308:	4b13      	ldr	r3, [pc, #76]	@ (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800730a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730c:	0e1b      	lsrs	r3, r3, #24
 800730e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800731e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007322:	edd7 6a07 	vldr	s13, [r7, #28]
 8007326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732e:	ee17 2a90 	vmov	r2, s15
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007336:	e008      	b.n	800734a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	609a      	str	r2, [r3, #8]
}
 800734a:	bf00      	nop
 800734c:	3724      	adds	r7, #36	@ 0x24
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	58024400 	.word	0x58024400
 800735c:	03d09000 	.word	0x03d09000
 8007360:	46000000 	.word	0x46000000
 8007364:	4c742400 	.word	0x4c742400
 8007368:	4a742400 	.word	0x4a742400
 800736c:	4bbebc20 	.word	0x4bbebc20

08007370 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007370:	b480      	push	{r7}
 8007372:	b089      	sub	sp, #36	@ 0x24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007378:	4ba1      	ldr	r3, [pc, #644]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007382:	4b9f      	ldr	r3, [pc, #636]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007386:	0d1b      	lsrs	r3, r3, #20
 8007388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800738c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800738e:	4b9c      	ldr	r3, [pc, #624]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800739a:	4b99      	ldr	r3, [pc, #612]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800739c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739e:	08db      	lsrs	r3, r3, #3
 80073a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8111 	beq.w	80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	f000 8083 	beq.w	80074cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	f200 80a1 	bhi.w	8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d056      	beq.n	8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073da:	e099      	b.n	8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073dc:	4b88      	ldr	r3, [pc, #544]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d02d      	beq.n	8007444 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073e8:	4b85      	ldr	r3, [pc, #532]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	08db      	lsrs	r3, r3, #3
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	4a84      	ldr	r2, [pc, #528]	@ (8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
 80073f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007412:	4b7b      	ldr	r3, [pc, #492]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007422:	ed97 6a03 	vldr	s12, [r7, #12]
 8007426:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800742a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007442:	e087      	b.n	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800760c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007456:	4b6a      	ldr	r3, [pc, #424]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007466:	ed97 6a03 	vldr	s12, [r7, #12]
 800746a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800746e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800747a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007486:	e065      	b.n	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749a:	4b59      	ldr	r3, [pc, #356]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ca:	e043      	b.n	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074de:	4b48      	ldr	r3, [pc, #288]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800750e:	e021      	b.n	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800751e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007522:	4b37      	ldr	r3, [pc, #220]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a03 	vldr	s12, [r7, #12]
 8007536:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007552:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007554:	4b2a      	ldr	r3, [pc, #168]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007558:	0a5b      	lsrs	r3, r3, #9
 800755a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800756a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800756e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757a:	ee17 2a90 	vmov	r2, s15
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007582:	4b1f      	ldr	r3, [pc, #124]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007586:	0c1b      	lsrs	r3, r3, #16
 8007588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007594:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759c:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a8:	ee17 2a90 	vmov	r2, s15
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80075b0:	4b13      	ldr	r3, [pc, #76]	@ (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b4:	0e1b      	lsrs	r3, r3, #24
 80075b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d6:	ee17 2a90 	vmov	r2, s15
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075de:	e008      	b.n	80075f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	609a      	str	r2, [r3, #8]
}
 80075f2:	bf00      	nop
 80075f4:	3724      	adds	r7, #36	@ 0x24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	58024400 	.word	0x58024400
 8007604:	03d09000 	.word	0x03d09000
 8007608:	46000000 	.word	0x46000000
 800760c:	4c742400 	.word	0x4c742400
 8007610:	4a742400 	.word	0x4a742400
 8007614:	4bbebc20 	.word	0x4bbebc20

08007618 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007626:	4b53      	ldr	r3, [pc, #332]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 8007628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	2b03      	cmp	r3, #3
 8007630:	d101      	bne.n	8007636 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e099      	b.n	800776a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007636:	4b4f      	ldr	r3, [pc, #316]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a4e      	ldr	r2, [pc, #312]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 800763c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007642:	f7fb fce9 	bl	8003018 <HAL_GetTick>
 8007646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007648:	e008      	b.n	800765c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800764a:	f7fb fce5 	bl	8003018 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e086      	b.n	800776a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800765c:	4b45      	ldr	r3, [pc, #276]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f0      	bne.n	800764a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007668:	4b42      	ldr	r3, [pc, #264]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	031b      	lsls	r3, r3, #12
 8007676:	493f      	ldr	r1, [pc, #252]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 8007678:	4313      	orrs	r3, r2
 800767a:	628b      	str	r3, [r1, #40]	@ 0x28
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	3b01      	subs	r3, #1
 8007682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	3b01      	subs	r3, #1
 800768c:	025b      	lsls	r3, r3, #9
 800768e:	b29b      	uxth	r3, r3
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	3b01      	subs	r3, #1
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	061b      	lsls	r3, r3, #24
 80076a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076ac:	4931      	ldr	r1, [pc, #196]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076b2:	4b30      	ldr	r3, [pc, #192]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	492d      	ldr	r1, [pc, #180]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	f023 0220 	bic.w	r2, r3, #32
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	4928      	ldr	r1, [pc, #160]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076d6:	4b27      	ldr	r3, [pc, #156]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076da:	4a26      	ldr	r2, [pc, #152]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076dc:	f023 0310 	bic.w	r3, r3, #16
 80076e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076e2:	4b24      	ldr	r3, [pc, #144]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076e6:	4b24      	ldr	r3, [pc, #144]	@ (8007778 <RCCEx_PLL2_Config+0x160>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	69d2      	ldr	r2, [r2, #28]
 80076ee:	00d2      	lsls	r2, r2, #3
 80076f0:	4920      	ldr	r1, [pc, #128]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 80076fc:	f043 0310 	orr.w	r3, r3, #16
 8007700:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007708:	4b1a      	ldr	r3, [pc, #104]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	4a19      	ldr	r2, [pc, #100]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 800770e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007714:	e00f      	b.n	8007736 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d106      	bne.n	800772a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800771c:	4b15      	ldr	r3, [pc, #84]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	4a14      	ldr	r2, [pc, #80]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 8007722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007726:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007728:	e005      	b.n	8007736 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800772a:	4b12      	ldr	r3, [pc, #72]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	4a11      	ldr	r2, [pc, #68]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 8007730:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007734:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007736:	4b0f      	ldr	r3, [pc, #60]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a0e      	ldr	r2, [pc, #56]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 800773c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007742:	f7fb fc69 	bl	8003018 <HAL_GetTick>
 8007746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007748:	e008      	b.n	800775c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800774a:	f7fb fc65 	bl	8003018 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e006      	b.n	800776a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800775c:	4b05      	ldr	r3, [pc, #20]	@ (8007774 <RCCEx_PLL2_Config+0x15c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f0      	beq.n	800774a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	58024400 	.word	0x58024400
 8007778:	ffff0007 	.word	0xffff0007

0800777c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800778a:	4b53      	ldr	r3, [pc, #332]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 800778c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b03      	cmp	r3, #3
 8007794:	d101      	bne.n	800779a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e099      	b.n	80078ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800779a:	4b4f      	ldr	r3, [pc, #316]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a4e      	ldr	r2, [pc, #312]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 80077a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a6:	f7fb fc37 	bl	8003018 <HAL_GetTick>
 80077aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077ac:	e008      	b.n	80077c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077ae:	f7fb fc33 	bl	8003018 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e086      	b.n	80078ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077c0:	4b45      	ldr	r3, [pc, #276]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f0      	bne.n	80077ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077cc:	4b42      	ldr	r3, [pc, #264]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 80077ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	051b      	lsls	r3, r3, #20
 80077da:	493f      	ldr	r1, [pc, #252]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	628b      	str	r3, [r1, #40]	@ 0x28
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	025b      	lsls	r3, r3, #9
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	041b      	lsls	r3, r3, #16
 80077fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007802:	431a      	orrs	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	3b01      	subs	r3, #1
 800780a:	061b      	lsls	r3, r3, #24
 800780c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007810:	4931      	ldr	r1, [pc, #196]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007812:	4313      	orrs	r3, r2
 8007814:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007816:	4b30      	ldr	r3, [pc, #192]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	492d      	ldr	r1, [pc, #180]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007824:	4313      	orrs	r3, r2
 8007826:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007828:	4b2b      	ldr	r3, [pc, #172]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	4928      	ldr	r1, [pc, #160]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007836:	4313      	orrs	r3, r2
 8007838:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800783a:	4b27      	ldr	r3, [pc, #156]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 800783c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783e:	4a26      	ldr	r2, [pc, #152]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007844:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007846:	4b24      	ldr	r3, [pc, #144]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800784a:	4b24      	ldr	r3, [pc, #144]	@ (80078dc <RCCEx_PLL3_Config+0x160>)
 800784c:	4013      	ands	r3, r2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	69d2      	ldr	r2, [r2, #28]
 8007852:	00d2      	lsls	r2, r2, #3
 8007854:	4920      	ldr	r1, [pc, #128]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007856:	4313      	orrs	r3, r2
 8007858:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800785a:	4b1f      	ldr	r3, [pc, #124]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	4a1e      	ldr	r2, [pc, #120]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007864:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d106      	bne.n	800787a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800786c:	4b1a      	ldr	r3, [pc, #104]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 800786e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007870:	4a19      	ldr	r2, [pc, #100]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007872:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007878:	e00f      	b.n	800789a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d106      	bne.n	800788e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007880:	4b15      	ldr	r3, [pc, #84]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007884:	4a14      	ldr	r2, [pc, #80]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007886:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800788a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800788c:	e005      	b.n	800789a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800788e:	4b12      	ldr	r3, [pc, #72]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	4a11      	ldr	r2, [pc, #68]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 8007894:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007898:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800789a:	4b0f      	ldr	r3, [pc, #60]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a0e      	ldr	r2, [pc, #56]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 80078a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078a6:	f7fb fbb7 	bl	8003018 <HAL_GetTick>
 80078aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078ac:	e008      	b.n	80078c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078ae:	f7fb fbb3 	bl	8003018 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e006      	b.n	80078ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078c0:	4b05      	ldr	r3, [pc, #20]	@ (80078d8 <RCCEx_PLL3_Config+0x15c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0f0      	beq.n	80078ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	58024400 	.word	0x58024400
 80078dc:	ffff0007 	.word	0xffff0007

080078e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e049      	b.n	8007986 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fa fbd6 	bl	80020b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3304      	adds	r3, #4
 800791c:	4619      	mov	r1, r3
 800791e:	4610      	mov	r0, r2
 8007920:	f000 fa66 	bl	8007df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d109      	bne.n	80079b4 <HAL_TIM_PWM_Start+0x24>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	bf14      	ite	ne
 80079ac:	2301      	movne	r3, #1
 80079ae:	2300      	moveq	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	e03c      	b.n	8007a2e <HAL_TIM_PWM_Start+0x9e>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d109      	bne.n	80079ce <HAL_TIM_PWM_Start+0x3e>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	bf14      	ite	ne
 80079c6:	2301      	movne	r3, #1
 80079c8:	2300      	moveq	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	e02f      	b.n	8007a2e <HAL_TIM_PWM_Start+0x9e>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d109      	bne.n	80079e8 <HAL_TIM_PWM_Start+0x58>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b01      	cmp	r3, #1
 80079de:	bf14      	ite	ne
 80079e0:	2301      	movne	r3, #1
 80079e2:	2300      	moveq	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	e022      	b.n	8007a2e <HAL_TIM_PWM_Start+0x9e>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b0c      	cmp	r3, #12
 80079ec:	d109      	bne.n	8007a02 <HAL_TIM_PWM_Start+0x72>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	bf14      	ite	ne
 80079fa:	2301      	movne	r3, #1
 80079fc:	2300      	moveq	r3, #0
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	e015      	b.n	8007a2e <HAL_TIM_PWM_Start+0x9e>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d109      	bne.n	8007a1c <HAL_TIM_PWM_Start+0x8c>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e008      	b.n	8007a2e <HAL_TIM_PWM_Start+0x9e>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	bf14      	ite	ne
 8007a28:	2301      	movne	r3, #1
 8007a2a:	2300      	moveq	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e0ab      	b.n	8007b8e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d104      	bne.n	8007a46 <HAL_TIM_PWM_Start+0xb6>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a44:	e023      	b.n	8007a8e <HAL_TIM_PWM_Start+0xfe>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d104      	bne.n	8007a56 <HAL_TIM_PWM_Start+0xc6>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a54:	e01b      	b.n	8007a8e <HAL_TIM_PWM_Start+0xfe>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b08      	cmp	r3, #8
 8007a5a:	d104      	bne.n	8007a66 <HAL_TIM_PWM_Start+0xd6>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a64:	e013      	b.n	8007a8e <HAL_TIM_PWM_Start+0xfe>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b0c      	cmp	r3, #12
 8007a6a:	d104      	bne.n	8007a76 <HAL_TIM_PWM_Start+0xe6>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a74:	e00b      	b.n	8007a8e <HAL_TIM_PWM_Start+0xfe>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b10      	cmp	r3, #16
 8007a7a:	d104      	bne.n	8007a86 <HAL_TIM_PWM_Start+0xf6>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a84:	e003      	b.n	8007a8e <HAL_TIM_PWM_Start+0xfe>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2201      	movs	r2, #1
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fd2c 	bl	80084f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8007b98 <HAL_TIM_PWM_Start+0x208>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d013      	beq.n	8007ace <HAL_TIM_PWM_Start+0x13e>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a3c      	ldr	r2, [pc, #240]	@ (8007b9c <HAL_TIM_PWM_Start+0x20c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00e      	beq.n	8007ace <HAL_TIM_PWM_Start+0x13e>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a3a      	ldr	r2, [pc, #232]	@ (8007ba0 <HAL_TIM_PWM_Start+0x210>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_TIM_PWM_Start+0x13e>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a39      	ldr	r2, [pc, #228]	@ (8007ba4 <HAL_TIM_PWM_Start+0x214>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_TIM_PWM_Start+0x13e>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a37      	ldr	r2, [pc, #220]	@ (8007ba8 <HAL_TIM_PWM_Start+0x218>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d101      	bne.n	8007ad2 <HAL_TIM_PWM_Start+0x142>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <HAL_TIM_PWM_Start+0x144>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a2a      	ldr	r2, [pc, #168]	@ (8007b98 <HAL_TIM_PWM_Start+0x208>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d02c      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1bc>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007afa:	d027      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1bc>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a2a      	ldr	r2, [pc, #168]	@ (8007bac <HAL_TIM_PWM_Start+0x21c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d022      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1bc>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a29      	ldr	r2, [pc, #164]	@ (8007bb0 <HAL_TIM_PWM_Start+0x220>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d01d      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1bc>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a27      	ldr	r2, [pc, #156]	@ (8007bb4 <HAL_TIM_PWM_Start+0x224>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d018      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1bc>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b9c <HAL_TIM_PWM_Start+0x20c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d013      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1bc>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a23      	ldr	r2, [pc, #140]	@ (8007bb8 <HAL_TIM_PWM_Start+0x228>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00e      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1bc>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba0 <HAL_TIM_PWM_Start+0x210>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d009      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1bc>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bbc <HAL_TIM_PWM_Start+0x22c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d004      	beq.n	8007b4c <HAL_TIM_PWM_Start+0x1bc>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1e      	ldr	r2, [pc, #120]	@ (8007bc0 <HAL_TIM_PWM_Start+0x230>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d115      	bne.n	8007b78 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	4b1c      	ldr	r3, [pc, #112]	@ (8007bc4 <HAL_TIM_PWM_Start+0x234>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b06      	cmp	r3, #6
 8007b5c:	d015      	beq.n	8007b8a <HAL_TIM_PWM_Start+0x1fa>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b64:	d011      	beq.n	8007b8a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0201 	orr.w	r2, r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b76:	e008      	b.n	8007b8a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0201 	orr.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e000      	b.n	8007b8c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40010400 	.word	0x40010400
 8007ba0:	40014000 	.word	0x40014000
 8007ba4:	40014400 	.word	0x40014400
 8007ba8:	40014800 	.word	0x40014800
 8007bac:	40000400 	.word	0x40000400
 8007bb0:	40000800 	.word	0x40000800
 8007bb4:	40000c00 	.word	0x40000c00
 8007bb8:	40001800 	.word	0x40001800
 8007bbc:	4000e000 	.word	0x4000e000
 8007bc0:	4000e400 	.word	0x4000e400
 8007bc4:	00010007 	.word	0x00010007

08007bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e0ff      	b.n	8007de6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b14      	cmp	r3, #20
 8007bf2:	f200 80f0 	bhi.w	8007dd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c51 	.word	0x08007c51
 8007c00:	08007dd7 	.word	0x08007dd7
 8007c04:	08007dd7 	.word	0x08007dd7
 8007c08:	08007dd7 	.word	0x08007dd7
 8007c0c:	08007c91 	.word	0x08007c91
 8007c10:	08007dd7 	.word	0x08007dd7
 8007c14:	08007dd7 	.word	0x08007dd7
 8007c18:	08007dd7 	.word	0x08007dd7
 8007c1c:	08007cd3 	.word	0x08007cd3
 8007c20:	08007dd7 	.word	0x08007dd7
 8007c24:	08007dd7 	.word	0x08007dd7
 8007c28:	08007dd7 	.word	0x08007dd7
 8007c2c:	08007d13 	.word	0x08007d13
 8007c30:	08007dd7 	.word	0x08007dd7
 8007c34:	08007dd7 	.word	0x08007dd7
 8007c38:	08007dd7 	.word	0x08007dd7
 8007c3c:	08007d55 	.word	0x08007d55
 8007c40:	08007dd7 	.word	0x08007dd7
 8007c44:	08007dd7 	.word	0x08007dd7
 8007c48:	08007dd7 	.word	0x08007dd7
 8007c4c:	08007d95 	.word	0x08007d95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f976 	bl	8007f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0208 	orr.w	r2, r2, #8
 8007c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0204 	bic.w	r2, r2, #4
 8007c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6999      	ldr	r1, [r3, #24]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	619a      	str	r2, [r3, #24]
      break;
 8007c8e:	e0a5      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f9e6 	bl	8008068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699a      	ldr	r2, [r3, #24]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6999      	ldr	r1, [r3, #24]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	021a      	lsls	r2, r3, #8
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	619a      	str	r2, [r3, #24]
      break;
 8007cd0:	e084      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fa4f 	bl	800817c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69da      	ldr	r2, [r3, #28]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f042 0208 	orr.w	r2, r2, #8
 8007cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69da      	ldr	r2, [r3, #28]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0204 	bic.w	r2, r2, #4
 8007cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69d9      	ldr	r1, [r3, #28]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	61da      	str	r2, [r3, #28]
      break;
 8007d10:	e064      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fab7 	bl	800828c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69da      	ldr	r2, [r3, #28]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69d9      	ldr	r1, [r3, #28]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	021a      	lsls	r2, r3, #8
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	61da      	str	r2, [r3, #28]
      break;
 8007d52:	e043      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fb00 	bl	8008360 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0208 	orr.w	r2, r2, #8
 8007d6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0204 	bic.w	r2, r2, #4
 8007d7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	691a      	ldr	r2, [r3, #16]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d92:	e023      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fb44 	bl	8008428 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	021a      	lsls	r2, r3, #8
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007dd4:	e002      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8007dda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop

08007df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a47      	ldr	r2, [pc, #284]	@ (8007f20 <TIM_Base_SetConfig+0x130>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d013      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0e:	d00f      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a44      	ldr	r2, [pc, #272]	@ (8007f24 <TIM_Base_SetConfig+0x134>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00b      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a43      	ldr	r2, [pc, #268]	@ (8007f28 <TIM_Base_SetConfig+0x138>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d007      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a42      	ldr	r2, [pc, #264]	@ (8007f2c <TIM_Base_SetConfig+0x13c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a41      	ldr	r2, [pc, #260]	@ (8007f30 <TIM_Base_SetConfig+0x140>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d108      	bne.n	8007e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a36      	ldr	r2, [pc, #216]	@ (8007f20 <TIM_Base_SetConfig+0x130>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d027      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e50:	d023      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a33      	ldr	r2, [pc, #204]	@ (8007f24 <TIM_Base_SetConfig+0x134>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01f      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a32      	ldr	r2, [pc, #200]	@ (8007f28 <TIM_Base_SetConfig+0x138>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d01b      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a31      	ldr	r2, [pc, #196]	@ (8007f2c <TIM_Base_SetConfig+0x13c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d017      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a30      	ldr	r2, [pc, #192]	@ (8007f30 <TIM_Base_SetConfig+0x140>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2f      	ldr	r2, [pc, #188]	@ (8007f34 <TIM_Base_SetConfig+0x144>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00f      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8007f38 <TIM_Base_SetConfig+0x148>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00b      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a2d      	ldr	r2, [pc, #180]	@ (8007f3c <TIM_Base_SetConfig+0x14c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d007      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f40 <TIM_Base_SetConfig+0x150>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d003      	beq.n	8007e9a <TIM_Base_SetConfig+0xaa>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2b      	ldr	r2, [pc, #172]	@ (8007f44 <TIM_Base_SetConfig+0x154>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d108      	bne.n	8007eac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a14      	ldr	r2, [pc, #80]	@ (8007f20 <TIM_Base_SetConfig+0x130>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d00f      	beq.n	8007ef2 <TIM_Base_SetConfig+0x102>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a16      	ldr	r2, [pc, #88]	@ (8007f30 <TIM_Base_SetConfig+0x140>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00b      	beq.n	8007ef2 <TIM_Base_SetConfig+0x102>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a15      	ldr	r2, [pc, #84]	@ (8007f34 <TIM_Base_SetConfig+0x144>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d007      	beq.n	8007ef2 <TIM_Base_SetConfig+0x102>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a14      	ldr	r2, [pc, #80]	@ (8007f38 <TIM_Base_SetConfig+0x148>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d003      	beq.n	8007ef2 <TIM_Base_SetConfig+0x102>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a13      	ldr	r2, [pc, #76]	@ (8007f3c <TIM_Base_SetConfig+0x14c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d103      	bne.n	8007efa <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	691a      	ldr	r2, [r3, #16]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f043 0204 	orr.w	r2, r3, #4
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	601a      	str	r2, [r3, #0]
}
 8007f12:	bf00      	nop
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40010000 	.word	0x40010000
 8007f24:	40000400 	.word	0x40000400
 8007f28:	40000800 	.word	0x40000800
 8007f2c:	40000c00 	.word	0x40000c00
 8007f30:	40010400 	.word	0x40010400
 8007f34:	40014000 	.word	0x40014000
 8007f38:	40014400 	.word	0x40014400
 8007f3c:	40014800 	.word	0x40014800
 8007f40:	4000e000 	.word	0x4000e000
 8007f44:	4000e400 	.word	0x4000e400

08007f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	f023 0201 	bic.w	r2, r3, #1
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4b37      	ldr	r3, [pc, #220]	@ (8008050 <TIM_OC1_SetConfig+0x108>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f023 0302 	bic.w	r3, r3, #2
 8007f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8008054 <TIM_OC1_SetConfig+0x10c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00f      	beq.n	8007fc4 <TIM_OC1_SetConfig+0x7c>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8008058 <TIM_OC1_SetConfig+0x110>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00b      	beq.n	8007fc4 <TIM_OC1_SetConfig+0x7c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a2b      	ldr	r2, [pc, #172]	@ (800805c <TIM_OC1_SetConfig+0x114>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d007      	beq.n	8007fc4 <TIM_OC1_SetConfig+0x7c>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8008060 <TIM_OC1_SetConfig+0x118>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d003      	beq.n	8007fc4 <TIM_OC1_SetConfig+0x7c>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a29      	ldr	r2, [pc, #164]	@ (8008064 <TIM_OC1_SetConfig+0x11c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d10c      	bne.n	8007fde <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f023 0308 	bic.w	r3, r3, #8
 8007fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f023 0304 	bic.w	r3, r3, #4
 8007fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8008054 <TIM_OC1_SetConfig+0x10c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00f      	beq.n	8008006 <TIM_OC1_SetConfig+0xbe>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8008058 <TIM_OC1_SetConfig+0x110>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d00b      	beq.n	8008006 <TIM_OC1_SetConfig+0xbe>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800805c <TIM_OC1_SetConfig+0x114>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d007      	beq.n	8008006 <TIM_OC1_SetConfig+0xbe>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a19      	ldr	r2, [pc, #100]	@ (8008060 <TIM_OC1_SetConfig+0x118>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d003      	beq.n	8008006 <TIM_OC1_SetConfig+0xbe>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a18      	ldr	r2, [pc, #96]	@ (8008064 <TIM_OC1_SetConfig+0x11c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d111      	bne.n	800802a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800800c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	4313      	orrs	r3, r2
 8008028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	621a      	str	r2, [r3, #32]
}
 8008044:	bf00      	nop
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	fffeff8f 	.word	0xfffeff8f
 8008054:	40010000 	.word	0x40010000
 8008058:	40010400 	.word	0x40010400
 800805c:	40014000 	.word	0x40014000
 8008060:	40014400 	.word	0x40014400
 8008064:	40014800 	.word	0x40014800

08008068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	f023 0210 	bic.w	r2, r3, #16
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4b34      	ldr	r3, [pc, #208]	@ (8008164 <TIM_OC2_SetConfig+0xfc>)
 8008094:	4013      	ands	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800809e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0320 	bic.w	r3, r3, #32
 80080b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a29      	ldr	r2, [pc, #164]	@ (8008168 <TIM_OC2_SetConfig+0x100>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d003      	beq.n	80080d0 <TIM_OC2_SetConfig+0x68>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a28      	ldr	r2, [pc, #160]	@ (800816c <TIM_OC2_SetConfig+0x104>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d10d      	bne.n	80080ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008168 <TIM_OC2_SetConfig+0x100>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00f      	beq.n	8008114 <TIM_OC2_SetConfig+0xac>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a1d      	ldr	r2, [pc, #116]	@ (800816c <TIM_OC2_SetConfig+0x104>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00b      	beq.n	8008114 <TIM_OC2_SetConfig+0xac>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008170 <TIM_OC2_SetConfig+0x108>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d007      	beq.n	8008114 <TIM_OC2_SetConfig+0xac>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a1b      	ldr	r2, [pc, #108]	@ (8008174 <TIM_OC2_SetConfig+0x10c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <TIM_OC2_SetConfig+0xac>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a1a      	ldr	r2, [pc, #104]	@ (8008178 <TIM_OC2_SetConfig+0x110>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d113      	bne.n	800813c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800811a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	621a      	str	r2, [r3, #32]
}
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	feff8fff 	.word	0xfeff8fff
 8008168:	40010000 	.word	0x40010000
 800816c:	40010400 	.word	0x40010400
 8008170:	40014000 	.word	0x40014000
 8008174:	40014400 	.word	0x40014400
 8008178:	40014800 	.word	0x40014800

0800817c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	4b33      	ldr	r3, [pc, #204]	@ (8008274 <TIM_OC3_SetConfig+0xf8>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0303 	bic.w	r3, r3, #3
 80081b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a28      	ldr	r2, [pc, #160]	@ (8008278 <TIM_OC3_SetConfig+0xfc>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d003      	beq.n	80081e2 <TIM_OC3_SetConfig+0x66>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a27      	ldr	r2, [pc, #156]	@ (800827c <TIM_OC3_SetConfig+0x100>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d10d      	bne.n	80081fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a1d      	ldr	r2, [pc, #116]	@ (8008278 <TIM_OC3_SetConfig+0xfc>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00f      	beq.n	8008226 <TIM_OC3_SetConfig+0xaa>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a1c      	ldr	r2, [pc, #112]	@ (800827c <TIM_OC3_SetConfig+0x100>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00b      	beq.n	8008226 <TIM_OC3_SetConfig+0xaa>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a1b      	ldr	r2, [pc, #108]	@ (8008280 <TIM_OC3_SetConfig+0x104>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d007      	beq.n	8008226 <TIM_OC3_SetConfig+0xaa>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a1a      	ldr	r2, [pc, #104]	@ (8008284 <TIM_OC3_SetConfig+0x108>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d003      	beq.n	8008226 <TIM_OC3_SetConfig+0xaa>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a19      	ldr	r2, [pc, #100]	@ (8008288 <TIM_OC3_SetConfig+0x10c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d113      	bne.n	800824e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800822c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	4313      	orrs	r3, r2
 8008240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	621a      	str	r2, [r3, #32]
}
 8008268:	bf00      	nop
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	fffeff8f 	.word	0xfffeff8f
 8008278:	40010000 	.word	0x40010000
 800827c:	40010400 	.word	0x40010400
 8008280:	40014000 	.word	0x40014000
 8008284:	40014400 	.word	0x40014400
 8008288:	40014800 	.word	0x40014800

0800828c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4b24      	ldr	r3, [pc, #144]	@ (8008348 <TIM_OC4_SetConfig+0xbc>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	031b      	lsls	r3, r3, #12
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a19      	ldr	r2, [pc, #100]	@ (800834c <TIM_OC4_SetConfig+0xc0>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00f      	beq.n	800830c <TIM_OC4_SetConfig+0x80>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a18      	ldr	r2, [pc, #96]	@ (8008350 <TIM_OC4_SetConfig+0xc4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00b      	beq.n	800830c <TIM_OC4_SetConfig+0x80>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a17      	ldr	r2, [pc, #92]	@ (8008354 <TIM_OC4_SetConfig+0xc8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d007      	beq.n	800830c <TIM_OC4_SetConfig+0x80>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a16      	ldr	r2, [pc, #88]	@ (8008358 <TIM_OC4_SetConfig+0xcc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d003      	beq.n	800830c <TIM_OC4_SetConfig+0x80>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a15      	ldr	r2, [pc, #84]	@ (800835c <TIM_OC4_SetConfig+0xd0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d109      	bne.n	8008320 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	019b      	lsls	r3, r3, #6
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	feff8fff 	.word	0xfeff8fff
 800834c:	40010000 	.word	0x40010000
 8008350:	40010400 	.word	0x40010400
 8008354:	40014000 	.word	0x40014000
 8008358:	40014400 	.word	0x40014400
 800835c:	40014800 	.word	0x40014800

08008360 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4b21      	ldr	r3, [pc, #132]	@ (8008410 <TIM_OC5_SetConfig+0xb0>)
 800838c:	4013      	ands	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80083a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	041b      	lsls	r3, r3, #16
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a18      	ldr	r2, [pc, #96]	@ (8008414 <TIM_OC5_SetConfig+0xb4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00f      	beq.n	80083d6 <TIM_OC5_SetConfig+0x76>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a17      	ldr	r2, [pc, #92]	@ (8008418 <TIM_OC5_SetConfig+0xb8>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00b      	beq.n	80083d6 <TIM_OC5_SetConfig+0x76>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a16      	ldr	r2, [pc, #88]	@ (800841c <TIM_OC5_SetConfig+0xbc>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d007      	beq.n	80083d6 <TIM_OC5_SetConfig+0x76>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a15      	ldr	r2, [pc, #84]	@ (8008420 <TIM_OC5_SetConfig+0xc0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC5_SetConfig+0x76>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a14      	ldr	r2, [pc, #80]	@ (8008424 <TIM_OC5_SetConfig+0xc4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d109      	bne.n	80083ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	621a      	str	r2, [r3, #32]
}
 8008404:	bf00      	nop
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	fffeff8f 	.word	0xfffeff8f
 8008414:	40010000 	.word	0x40010000
 8008418:	40010400 	.word	0x40010400
 800841c:	40014000 	.word	0x40014000
 8008420:	40014400 	.word	0x40014400
 8008424:	40014800 	.word	0x40014800

08008428 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4b22      	ldr	r3, [pc, #136]	@ (80084dc <TIM_OC6_SetConfig+0xb4>)
 8008454:	4013      	ands	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800846a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	051b      	lsls	r3, r3, #20
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a19      	ldr	r2, [pc, #100]	@ (80084e0 <TIM_OC6_SetConfig+0xb8>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00f      	beq.n	80084a0 <TIM_OC6_SetConfig+0x78>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a18      	ldr	r2, [pc, #96]	@ (80084e4 <TIM_OC6_SetConfig+0xbc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00b      	beq.n	80084a0 <TIM_OC6_SetConfig+0x78>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <TIM_OC6_SetConfig+0xc0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d007      	beq.n	80084a0 <TIM_OC6_SetConfig+0x78>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <TIM_OC6_SetConfig+0xc4>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_OC6_SetConfig+0x78>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a15      	ldr	r2, [pc, #84]	@ (80084f0 <TIM_OC6_SetConfig+0xc8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d109      	bne.n	80084b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	029b      	lsls	r3, r3, #10
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	feff8fff 	.word	0xfeff8fff
 80084e0:	40010000 	.word	0x40010000
 80084e4:	40010400 	.word	0x40010400
 80084e8:	40014000 	.word	0x40014000
 80084ec:	40014400 	.word	0x40014400
 80084f0:	40014800 	.word	0x40014800

080084f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	f003 031f 	and.w	r3, r3, #31
 8008506:	2201      	movs	r2, #1
 8008508:	fa02 f303 	lsl.w	r3, r2, r3
 800850c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a1a      	ldr	r2, [r3, #32]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	43db      	mvns	r3, r3
 8008516:	401a      	ands	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	fa01 f303 	lsl.w	r3, r1, r3
 800852c:	431a      	orrs	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008554:	2302      	movs	r3, #2
 8008556:	e077      	b.n	8008648 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a35      	ldr	r2, [pc, #212]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d004      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a34      	ldr	r2, [pc, #208]	@ (8008658 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d108      	bne.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008592:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a25      	ldr	r2, [pc, #148]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d02c      	beq.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ca:	d027      	beq.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a22      	ldr	r2, [pc, #136]	@ (800865c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d022      	beq.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a21      	ldr	r2, [pc, #132]	@ (8008660 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d01d      	beq.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008664 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d018      	beq.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008658 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d013      	beq.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008668 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d00e      	beq.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a1a      	ldr	r2, [pc, #104]	@ (800866c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d009      	beq.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a18      	ldr	r2, [pc, #96]	@ (8008670 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d004      	beq.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a17      	ldr	r2, [pc, #92]	@ (8008674 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d10c      	bne.n	8008636 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	4313      	orrs	r3, r2
 800862c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	40010000 	.word	0x40010000
 8008658:	40010400 	.word	0x40010400
 800865c:	40000400 	.word	0x40000400
 8008660:	40000800 	.word	0x40000800
 8008664:	40000c00 	.word	0x40000c00
 8008668:	40001800 	.word	0x40001800
 800866c:	40014000 	.word	0x40014000
 8008670:	4000e000 	.word	0x4000e000
 8008674:	4000e400 	.word	0x4000e400

08008678 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008690:	2302      	movs	r3, #2
 8008692:	e073      	b.n	800877c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	041b      	lsls	r3, r3, #16
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	4313      	orrs	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a19      	ldr	r2, [pc, #100]	@ (8008788 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d004      	beq.n	8008730 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a18      	ldr	r2, [pc, #96]	@ (800878c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d11c      	bne.n	800876a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873a:	051b      	lsls	r3, r3, #20
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	40010000 	.word	0x40010000
 800878c:	40010400 	.word	0x40010400

08008790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e042      	b.n	8008828 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7f9 fd19 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2224      	movs	r2, #36	@ 0x24
 80087be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0201 	bic.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 fb64 	bl	8009ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fcf5 	bl	80091d0 <UART_SetConfig>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e01b      	b.n	8008828 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800880e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f042 0201 	orr.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 fbe3 	bl	8009fec <UART_CheckIdleState>
 8008826:	4603      	mov	r3, r0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	@ 0x28
 8008834:	af02      	add	r7, sp, #8
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	4613      	mov	r3, r2
 800883e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008846:	2b20      	cmp	r3, #32
 8008848:	d17b      	bne.n	8008942 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <HAL_UART_Transmit+0x26>
 8008850:	88fb      	ldrh	r3, [r7, #6]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e074      	b.n	8008944 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2221      	movs	r2, #33	@ 0x21
 8008866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800886a:	f7fa fbd5 	bl	8003018 <HAL_GetTick>
 800886e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	88fa      	ldrh	r2, [r7, #6]
 8008874:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	88fa      	ldrh	r2, [r7, #6]
 800887c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008888:	d108      	bne.n	800889c <HAL_UART_Transmit+0x6c>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d104      	bne.n	800889c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	61bb      	str	r3, [r7, #24]
 800889a:	e003      	b.n	80088a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088a4:	e030      	b.n	8008908 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2200      	movs	r2, #0
 80088ae:	2180      	movs	r1, #128	@ 0x80
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f001 fc45 	bl	800a140 <UART_WaitOnFlagUntilTimeout>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2220      	movs	r2, #32
 80088c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e03d      	b.n	8008944 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10b      	bne.n	80088e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	3302      	adds	r3, #2
 80088e2:	61bb      	str	r3, [r7, #24]
 80088e4:	e007      	b.n	80088f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	781a      	ldrb	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	3301      	adds	r3, #1
 80088f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800890e:	b29b      	uxth	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1c8      	bne.n	80088a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2200      	movs	r2, #0
 800891c:	2140      	movs	r1, #64	@ 0x40
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f001 fc0e 	bl	800a140 <UART_WaitOnFlagUntilTimeout>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e006      	b.n	8008944 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	e000      	b.n	8008944 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008942:	2302      	movs	r3, #2
  }
}
 8008944:	4618      	mov	r0, r3
 8008946:	3720      	adds	r7, #32
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	@ 0x28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008960:	2b20      	cmp	r3, #32
 8008962:	d137      	bne.n	80089d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <HAL_UART_Receive_IT+0x24>
 800896a:	88fb      	ldrh	r3, [r7, #6]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e030      	b.n	80089d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a18      	ldr	r2, [pc, #96]	@ (80089e0 <HAL_UART_Receive_IT+0x94>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d01f      	beq.n	80089c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d018      	beq.n	80089c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	613b      	str	r3, [r7, #16]
   return(result);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	623b      	str	r3, [r7, #32]
 80089b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	69f9      	ldr	r1, [r7, #28]
 80089b6:	6a3a      	ldr	r2, [r7, #32]
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e6      	bne.n	8008992 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089c4:	88fb      	ldrh	r3, [r7, #6]
 80089c6:	461a      	mov	r2, r3
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f001 fc26 	bl	800a21c <UART_Start_Receive_IT>
 80089d0:	4603      	mov	r3, r0
 80089d2:	e000      	b.n	80089d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089d4:	2302      	movs	r3, #2
  }
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3728      	adds	r7, #40	@ 0x28
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	58000c00 	.word	0x58000c00

080089e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b0ba      	sub	sp, #232	@ 0xe8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a12:	4013      	ands	r3, r2
 8008a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d11b      	bne.n	8008a58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a24:	f003 0320 	and.w	r3, r3, #32
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d015      	beq.n	8008a58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a30:	f003 0320 	and.w	r3, r3, #32
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d105      	bne.n	8008a44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 8393 	beq.w	8009174 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
      }
      return;
 8008a56:	e38d      	b.n	8009174 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8123 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008a62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a66:	4b8d      	ldr	r3, [pc, #564]	@ (8008c9c <HAL_UART_IRQHandler+0x2b8>)
 8008a68:	4013      	ands	r3, r2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008a6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a72:	4b8b      	ldr	r3, [pc, #556]	@ (8008ca0 <HAL_UART_IRQHandler+0x2bc>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8116 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d011      	beq.n	8008aac <HAL_UART_IRQHandler+0xc8>
 8008a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aa2:	f043 0201 	orr.w	r2, r3, #1
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab0:	f003 0302 	and.w	r3, r3, #2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d011      	beq.n	8008adc <HAL_UART_IRQHandler+0xf8>
 8008ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00b      	beq.n	8008adc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ad2:	f043 0204 	orr.w	r2, r3, #4
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d011      	beq.n	8008b0c <HAL_UART_IRQHandler+0x128>
 8008ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2204      	movs	r2, #4
 8008afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b02:	f043 0202 	orr.w	r2, r3, #2
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d017      	beq.n	8008b48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b1c:	f003 0320 	and.w	r3, r3, #32
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b28:	4b5c      	ldr	r3, [pc, #368]	@ (8008c9c <HAL_UART_IRQHandler+0x2b8>)
 8008b2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2208      	movs	r2, #8
 8008b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3e:	f043 0208 	orr.w	r2, r3, #8
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d012      	beq.n	8008b7a <HAL_UART_IRQHandler+0x196>
 8008b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00c      	beq.n	8008b7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b70:	f043 0220 	orr.w	r2, r3, #32
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 82f9 	beq.w	8009178 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d013      	beq.n	8008bba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d105      	bne.n	8008baa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bce:	2b40      	cmp	r3, #64	@ 0x40
 8008bd0:	d005      	beq.n	8008bde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d054      	beq.n	8008c88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 fc3e 	bl	800a460 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bee:	2b40      	cmp	r3, #64	@ 0x40
 8008bf0:	d146      	bne.n	8008c80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3308      	adds	r3, #8
 8008c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1d9      	bne.n	8008bf2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d017      	beq.n	8008c78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4e:	4a15      	ldr	r2, [pc, #84]	@ (8008ca4 <HAL_UART_IRQHandler+0x2c0>)
 8008c50:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fa feb3 	bl	80039c4 <HAL_DMA_Abort_IT>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d019      	beq.n	8008c98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008c72:	4610      	mov	r0, r2
 8008c74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c76:	e00f      	b.n	8008c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fa93 	bl	80091a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c7e:	e00b      	b.n	8008c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fa8f 	bl	80091a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c86:	e007      	b.n	8008c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa8b 	bl	80091a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008c96:	e26f      	b.n	8009178 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c98:	bf00      	nop
    return;
 8008c9a:	e26d      	b.n	8009178 <HAL_UART_IRQHandler+0x794>
 8008c9c:	10000001 	.word	0x10000001
 8008ca0:	04000120 	.word	0x04000120
 8008ca4:	0800a52d 	.word	0x0800a52d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	f040 8203 	bne.w	80090b8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb6:	f003 0310 	and.w	r3, r3, #16
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 81fc 	beq.w	80090b8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cc4:	f003 0310 	and.w	r3, r3, #16
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 81f5 	beq.w	80090b8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2210      	movs	r2, #16
 8008cd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce0:	2b40      	cmp	r3, #64	@ 0x40
 8008ce2:	f040 816d 	bne.w	8008fc0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4aa4      	ldr	r2, [pc, #656]	@ (8008f80 <HAL_UART_IRQHandler+0x59c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d068      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4aa1      	ldr	r2, [pc, #644]	@ (8008f84 <HAL_UART_IRQHandler+0x5a0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d061      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a9f      	ldr	r2, [pc, #636]	@ (8008f88 <HAL_UART_IRQHandler+0x5a4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d05a      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a9c      	ldr	r2, [pc, #624]	@ (8008f8c <HAL_UART_IRQHandler+0x5a8>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d053      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a9a      	ldr	r2, [pc, #616]	@ (8008f90 <HAL_UART_IRQHandler+0x5ac>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d04c      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a97      	ldr	r2, [pc, #604]	@ (8008f94 <HAL_UART_IRQHandler+0x5b0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d045      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a95      	ldr	r2, [pc, #596]	@ (8008f98 <HAL_UART_IRQHandler+0x5b4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d03e      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a92      	ldr	r2, [pc, #584]	@ (8008f9c <HAL_UART_IRQHandler+0x5b8>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d037      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a90      	ldr	r2, [pc, #576]	@ (8008fa0 <HAL_UART_IRQHandler+0x5bc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d030      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a8d      	ldr	r2, [pc, #564]	@ (8008fa4 <HAL_UART_IRQHandler+0x5c0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d029      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a8b      	ldr	r2, [pc, #556]	@ (8008fa8 <HAL_UART_IRQHandler+0x5c4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d022      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a88      	ldr	r2, [pc, #544]	@ (8008fac <HAL_UART_IRQHandler+0x5c8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d01b      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a86      	ldr	r2, [pc, #536]	@ (8008fb0 <HAL_UART_IRQHandler+0x5cc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d014      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a83      	ldr	r2, [pc, #524]	@ (8008fb4 <HAL_UART_IRQHandler+0x5d0>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00d      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a81      	ldr	r2, [pc, #516]	@ (8008fb8 <HAL_UART_IRQHandler+0x5d4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d006      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x3e2>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a7e      	ldr	r2, [pc, #504]	@ (8008fbc <HAL_UART_IRQHandler+0x5d8>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d106      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x3f0>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	e005      	b.n	8008de0 <HAL_UART_IRQHandler+0x3fc>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 80ad 	beq.w	8008f48 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008df4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	f080 80a5 	bcs.w	8008f48 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e14:	f000 8087 	beq.w	8008f26 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e52:	e841 2300 	strex	r3, r2, [r1]
 8008e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1da      	bne.n	8008e18 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3308      	adds	r3, #8
 8008e68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e74:	f023 0301 	bic.w	r3, r3, #1
 8008e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3308      	adds	r3, #8
 8008e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e1      	bne.n	8008e62 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ec2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ec8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e3      	bne.n	8008e9e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ef4:	f023 0310 	bic.w	r3, r3, #16
 8008ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e4      	bne.n	8008ee4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fa fa31 	bl	8003388 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f939 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008f46:	e119      	b.n	800917c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f52:	429a      	cmp	r2, r3
 8008f54:	f040 8112 	bne.w	800917c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f64:	f040 810a 	bne.w	800917c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f91e 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
      return;
 8008f7c:	e0fe      	b.n	800917c <HAL_UART_IRQHandler+0x798>
 8008f7e:	bf00      	nop
 8008f80:	40020010 	.word	0x40020010
 8008f84:	40020028 	.word	0x40020028
 8008f88:	40020040 	.word	0x40020040
 8008f8c:	40020058 	.word	0x40020058
 8008f90:	40020070 	.word	0x40020070
 8008f94:	40020088 	.word	0x40020088
 8008f98:	400200a0 	.word	0x400200a0
 8008f9c:	400200b8 	.word	0x400200b8
 8008fa0:	40020410 	.word	0x40020410
 8008fa4:	40020428 	.word	0x40020428
 8008fa8:	40020440 	.word	0x40020440
 8008fac:	40020458 	.word	0x40020458
 8008fb0:	40020470 	.word	0x40020470
 8008fb4:	40020488 	.word	0x40020488
 8008fb8:	400204a0 	.word	0x400204a0
 8008fbc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80cf 	beq.w	8009180 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008fe2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 80ca 	beq.w	8009180 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009000:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	461a      	mov	r2, r3
 800900a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800900e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009010:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800901c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e4      	bne.n	8008fec <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3308      	adds	r3, #8
 8009028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	623b      	str	r3, [r7, #32]
   return(result);
 8009032:	6a3a      	ldr	r2, [r7, #32]
 8009034:	4b55      	ldr	r3, [pc, #340]	@ (800918c <HAL_UART_IRQHandler+0x7a8>)
 8009036:	4013      	ands	r3, r2
 8009038:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3308      	adds	r3, #8
 8009042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009046:	633a      	str	r2, [r7, #48]	@ 0x30
 8009048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800904c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e3      	bne.n	8009022 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2220      	movs	r2, #32
 800905e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	e853 3f00 	ldrex	r3, [r3]
 800907a:	60fb      	str	r3, [r7, #12]
   return(result);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 0310 	bic.w	r3, r3, #16
 8009082:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009090:	61fb      	str	r3, [r7, #28]
 8009092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	69b9      	ldr	r1, [r7, #24]
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	617b      	str	r3, [r7, #20]
   return(result);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e4      	bne.n	800906e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2202      	movs	r2, #2
 80090a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f881 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090b6:	e063      	b.n	8009180 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00e      	beq.n	80090e2 <HAL_UART_IRQHandler+0x6fe>
 80090c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d008      	beq.n	80090e2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80090d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 ff84 	bl	800afe8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090e0:	e051      	b.n	8009186 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d014      	beq.n	8009118 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80090ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d105      	bne.n	8009106 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80090fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d008      	beq.n	8009118 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800910a:	2b00      	cmp	r3, #0
 800910c:	d03a      	beq.n	8009184 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	4798      	blx	r3
    }
    return;
 8009116:	e035      	b.n	8009184 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800911c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009120:	2b00      	cmp	r3, #0
 8009122:	d009      	beq.n	8009138 <HAL_UART_IRQHandler+0x754>
 8009124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fa0d 	bl	800a550 <UART_EndTransmit_IT>
    return;
 8009136:	e026      	b.n	8009186 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800913c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d009      	beq.n	8009158 <HAL_UART_IRQHandler+0x774>
 8009144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009148:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 ff5d 	bl	800b010 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009156:	e016      	b.n	8009186 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800915c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d010      	beq.n	8009186 <HAL_UART_IRQHandler+0x7a2>
 8009164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009168:	2b00      	cmp	r3, #0
 800916a:	da0c      	bge.n	8009186 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 ff45 	bl	800affc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009172:	e008      	b.n	8009186 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009174:	bf00      	nop
 8009176:	e006      	b.n	8009186 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009178:	bf00      	nop
 800917a:	e004      	b.n	8009186 <HAL_UART_IRQHandler+0x7a2>
      return;
 800917c:	bf00      	nop
 800917e:	e002      	b.n	8009186 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009180:	bf00      	nop
 8009182:	e000      	b.n	8009186 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009184:	bf00      	nop
  }
}
 8009186:	37e8      	adds	r7, #232	@ 0xe8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	effffffe 	.word	0xeffffffe

08009190 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091d4:	b092      	sub	sp, #72	@ 0x48
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	4bbe      	ldr	r3, [pc, #760]	@ (80094f8 <UART_SetConfig+0x328>)
 8009200:	4013      	ands	r3, r2
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	6812      	ldr	r2, [r2, #0]
 8009206:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009208:	430b      	orrs	r3, r1
 800920a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4ab3      	ldr	r2, [pc, #716]	@ (80094fc <UART_SetConfig+0x32c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d004      	beq.n	800923c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009238:	4313      	orrs	r3, r2
 800923a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	4baf      	ldr	r3, [pc, #700]	@ (8009500 <UART_SetConfig+0x330>)
 8009244:	4013      	ands	r3, r2
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	6812      	ldr	r2, [r2, #0]
 800924a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800924c:	430b      	orrs	r3, r1
 800924e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009256:	f023 010f 	bic.w	r1, r3, #15
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4aa6      	ldr	r2, [pc, #664]	@ (8009504 <UART_SetConfig+0x334>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d177      	bne.n	8009360 <UART_SetConfig+0x190>
 8009270:	4ba5      	ldr	r3, [pc, #660]	@ (8009508 <UART_SetConfig+0x338>)
 8009272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009278:	2b28      	cmp	r3, #40	@ 0x28
 800927a:	d86d      	bhi.n	8009358 <UART_SetConfig+0x188>
 800927c:	a201      	add	r2, pc, #4	@ (adr r2, 8009284 <UART_SetConfig+0xb4>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	08009329 	.word	0x08009329
 8009288:	08009359 	.word	0x08009359
 800928c:	08009359 	.word	0x08009359
 8009290:	08009359 	.word	0x08009359
 8009294:	08009359 	.word	0x08009359
 8009298:	08009359 	.word	0x08009359
 800929c:	08009359 	.word	0x08009359
 80092a0:	08009359 	.word	0x08009359
 80092a4:	08009331 	.word	0x08009331
 80092a8:	08009359 	.word	0x08009359
 80092ac:	08009359 	.word	0x08009359
 80092b0:	08009359 	.word	0x08009359
 80092b4:	08009359 	.word	0x08009359
 80092b8:	08009359 	.word	0x08009359
 80092bc:	08009359 	.word	0x08009359
 80092c0:	08009359 	.word	0x08009359
 80092c4:	08009339 	.word	0x08009339
 80092c8:	08009359 	.word	0x08009359
 80092cc:	08009359 	.word	0x08009359
 80092d0:	08009359 	.word	0x08009359
 80092d4:	08009359 	.word	0x08009359
 80092d8:	08009359 	.word	0x08009359
 80092dc:	08009359 	.word	0x08009359
 80092e0:	08009359 	.word	0x08009359
 80092e4:	08009341 	.word	0x08009341
 80092e8:	08009359 	.word	0x08009359
 80092ec:	08009359 	.word	0x08009359
 80092f0:	08009359 	.word	0x08009359
 80092f4:	08009359 	.word	0x08009359
 80092f8:	08009359 	.word	0x08009359
 80092fc:	08009359 	.word	0x08009359
 8009300:	08009359 	.word	0x08009359
 8009304:	08009349 	.word	0x08009349
 8009308:	08009359 	.word	0x08009359
 800930c:	08009359 	.word	0x08009359
 8009310:	08009359 	.word	0x08009359
 8009314:	08009359 	.word	0x08009359
 8009318:	08009359 	.word	0x08009359
 800931c:	08009359 	.word	0x08009359
 8009320:	08009359 	.word	0x08009359
 8009324:	08009351 	.word	0x08009351
 8009328:	2301      	movs	r3, #1
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932e:	e326      	b.n	800997e <UART_SetConfig+0x7ae>
 8009330:	2304      	movs	r3, #4
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009336:	e322      	b.n	800997e <UART_SetConfig+0x7ae>
 8009338:	2308      	movs	r3, #8
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933e:	e31e      	b.n	800997e <UART_SetConfig+0x7ae>
 8009340:	2310      	movs	r3, #16
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009346:	e31a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009348:	2320      	movs	r3, #32
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e316      	b.n	800997e <UART_SetConfig+0x7ae>
 8009350:	2340      	movs	r3, #64	@ 0x40
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e312      	b.n	800997e <UART_SetConfig+0x7ae>
 8009358:	2380      	movs	r3, #128	@ 0x80
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e30e      	b.n	800997e <UART_SetConfig+0x7ae>
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a69      	ldr	r2, [pc, #420]	@ (800950c <UART_SetConfig+0x33c>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d130      	bne.n	80093cc <UART_SetConfig+0x1fc>
 800936a:	4b67      	ldr	r3, [pc, #412]	@ (8009508 <UART_SetConfig+0x338>)
 800936c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	2b05      	cmp	r3, #5
 8009374:	d826      	bhi.n	80093c4 <UART_SetConfig+0x1f4>
 8009376:	a201      	add	r2, pc, #4	@ (adr r2, 800937c <UART_SetConfig+0x1ac>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	08009395 	.word	0x08009395
 8009380:	0800939d 	.word	0x0800939d
 8009384:	080093a5 	.word	0x080093a5
 8009388:	080093ad 	.word	0x080093ad
 800938c:	080093b5 	.word	0x080093b5
 8009390:	080093bd 	.word	0x080093bd
 8009394:	2300      	movs	r3, #0
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e2f0      	b.n	800997e <UART_SetConfig+0x7ae>
 800939c:	2304      	movs	r3, #4
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e2ec      	b.n	800997e <UART_SetConfig+0x7ae>
 80093a4:	2308      	movs	r3, #8
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e2e8      	b.n	800997e <UART_SetConfig+0x7ae>
 80093ac:	2310      	movs	r3, #16
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e2e4      	b.n	800997e <UART_SetConfig+0x7ae>
 80093b4:	2320      	movs	r3, #32
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e2e0      	b.n	800997e <UART_SetConfig+0x7ae>
 80093bc:	2340      	movs	r3, #64	@ 0x40
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e2dc      	b.n	800997e <UART_SetConfig+0x7ae>
 80093c4:	2380      	movs	r3, #128	@ 0x80
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e2d8      	b.n	800997e <UART_SetConfig+0x7ae>
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a4f      	ldr	r2, [pc, #316]	@ (8009510 <UART_SetConfig+0x340>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d130      	bne.n	8009438 <UART_SetConfig+0x268>
 80093d6:	4b4c      	ldr	r3, [pc, #304]	@ (8009508 <UART_SetConfig+0x338>)
 80093d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	2b05      	cmp	r3, #5
 80093e0:	d826      	bhi.n	8009430 <UART_SetConfig+0x260>
 80093e2:	a201      	add	r2, pc, #4	@ (adr r2, 80093e8 <UART_SetConfig+0x218>)
 80093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e8:	08009401 	.word	0x08009401
 80093ec:	08009409 	.word	0x08009409
 80093f0:	08009411 	.word	0x08009411
 80093f4:	08009419 	.word	0x08009419
 80093f8:	08009421 	.word	0x08009421
 80093fc:	08009429 	.word	0x08009429
 8009400:	2300      	movs	r3, #0
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e2ba      	b.n	800997e <UART_SetConfig+0x7ae>
 8009408:	2304      	movs	r3, #4
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e2b6      	b.n	800997e <UART_SetConfig+0x7ae>
 8009410:	2308      	movs	r3, #8
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e2b2      	b.n	800997e <UART_SetConfig+0x7ae>
 8009418:	2310      	movs	r3, #16
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e2ae      	b.n	800997e <UART_SetConfig+0x7ae>
 8009420:	2320      	movs	r3, #32
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e2aa      	b.n	800997e <UART_SetConfig+0x7ae>
 8009428:	2340      	movs	r3, #64	@ 0x40
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e2a6      	b.n	800997e <UART_SetConfig+0x7ae>
 8009430:	2380      	movs	r3, #128	@ 0x80
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009436:	e2a2      	b.n	800997e <UART_SetConfig+0x7ae>
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a35      	ldr	r2, [pc, #212]	@ (8009514 <UART_SetConfig+0x344>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d130      	bne.n	80094a4 <UART_SetConfig+0x2d4>
 8009442:	4b31      	ldr	r3, [pc, #196]	@ (8009508 <UART_SetConfig+0x338>)
 8009444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009446:	f003 0307 	and.w	r3, r3, #7
 800944a:	2b05      	cmp	r3, #5
 800944c:	d826      	bhi.n	800949c <UART_SetConfig+0x2cc>
 800944e:	a201      	add	r2, pc, #4	@ (adr r2, 8009454 <UART_SetConfig+0x284>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	0800946d 	.word	0x0800946d
 8009458:	08009475 	.word	0x08009475
 800945c:	0800947d 	.word	0x0800947d
 8009460:	08009485 	.word	0x08009485
 8009464:	0800948d 	.word	0x0800948d
 8009468:	08009495 	.word	0x08009495
 800946c:	2300      	movs	r3, #0
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e284      	b.n	800997e <UART_SetConfig+0x7ae>
 8009474:	2304      	movs	r3, #4
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e280      	b.n	800997e <UART_SetConfig+0x7ae>
 800947c:	2308      	movs	r3, #8
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e27c      	b.n	800997e <UART_SetConfig+0x7ae>
 8009484:	2310      	movs	r3, #16
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e278      	b.n	800997e <UART_SetConfig+0x7ae>
 800948c:	2320      	movs	r3, #32
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e274      	b.n	800997e <UART_SetConfig+0x7ae>
 8009494:	2340      	movs	r3, #64	@ 0x40
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e270      	b.n	800997e <UART_SetConfig+0x7ae>
 800949c:	2380      	movs	r3, #128	@ 0x80
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e26c      	b.n	800997e <UART_SetConfig+0x7ae>
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009518 <UART_SetConfig+0x348>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d142      	bne.n	8009534 <UART_SetConfig+0x364>
 80094ae:	4b16      	ldr	r3, [pc, #88]	@ (8009508 <UART_SetConfig+0x338>)
 80094b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	2b05      	cmp	r3, #5
 80094b8:	d838      	bhi.n	800952c <UART_SetConfig+0x35c>
 80094ba:	a201      	add	r2, pc, #4	@ (adr r2, 80094c0 <UART_SetConfig+0x2f0>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	080094d9 	.word	0x080094d9
 80094c4:	080094e1 	.word	0x080094e1
 80094c8:	080094e9 	.word	0x080094e9
 80094cc:	080094f1 	.word	0x080094f1
 80094d0:	0800951d 	.word	0x0800951d
 80094d4:	08009525 	.word	0x08009525
 80094d8:	2300      	movs	r3, #0
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e24e      	b.n	800997e <UART_SetConfig+0x7ae>
 80094e0:	2304      	movs	r3, #4
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e24a      	b.n	800997e <UART_SetConfig+0x7ae>
 80094e8:	2308      	movs	r3, #8
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e246      	b.n	800997e <UART_SetConfig+0x7ae>
 80094f0:	2310      	movs	r3, #16
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e242      	b.n	800997e <UART_SetConfig+0x7ae>
 80094f8:	cfff69f3 	.word	0xcfff69f3
 80094fc:	58000c00 	.word	0x58000c00
 8009500:	11fff4ff 	.word	0x11fff4ff
 8009504:	40011000 	.word	0x40011000
 8009508:	58024400 	.word	0x58024400
 800950c:	40004400 	.word	0x40004400
 8009510:	40004800 	.word	0x40004800
 8009514:	40004c00 	.word	0x40004c00
 8009518:	40005000 	.word	0x40005000
 800951c:	2320      	movs	r3, #32
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e22c      	b.n	800997e <UART_SetConfig+0x7ae>
 8009524:	2340      	movs	r3, #64	@ 0x40
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e228      	b.n	800997e <UART_SetConfig+0x7ae>
 800952c:	2380      	movs	r3, #128	@ 0x80
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e224      	b.n	800997e <UART_SetConfig+0x7ae>
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4ab1      	ldr	r2, [pc, #708]	@ (8009800 <UART_SetConfig+0x630>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d176      	bne.n	800962c <UART_SetConfig+0x45c>
 800953e:	4bb1      	ldr	r3, [pc, #708]	@ (8009804 <UART_SetConfig+0x634>)
 8009540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009546:	2b28      	cmp	r3, #40	@ 0x28
 8009548:	d86c      	bhi.n	8009624 <UART_SetConfig+0x454>
 800954a:	a201      	add	r2, pc, #4	@ (adr r2, 8009550 <UART_SetConfig+0x380>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	080095f5 	.word	0x080095f5
 8009554:	08009625 	.word	0x08009625
 8009558:	08009625 	.word	0x08009625
 800955c:	08009625 	.word	0x08009625
 8009560:	08009625 	.word	0x08009625
 8009564:	08009625 	.word	0x08009625
 8009568:	08009625 	.word	0x08009625
 800956c:	08009625 	.word	0x08009625
 8009570:	080095fd 	.word	0x080095fd
 8009574:	08009625 	.word	0x08009625
 8009578:	08009625 	.word	0x08009625
 800957c:	08009625 	.word	0x08009625
 8009580:	08009625 	.word	0x08009625
 8009584:	08009625 	.word	0x08009625
 8009588:	08009625 	.word	0x08009625
 800958c:	08009625 	.word	0x08009625
 8009590:	08009605 	.word	0x08009605
 8009594:	08009625 	.word	0x08009625
 8009598:	08009625 	.word	0x08009625
 800959c:	08009625 	.word	0x08009625
 80095a0:	08009625 	.word	0x08009625
 80095a4:	08009625 	.word	0x08009625
 80095a8:	08009625 	.word	0x08009625
 80095ac:	08009625 	.word	0x08009625
 80095b0:	0800960d 	.word	0x0800960d
 80095b4:	08009625 	.word	0x08009625
 80095b8:	08009625 	.word	0x08009625
 80095bc:	08009625 	.word	0x08009625
 80095c0:	08009625 	.word	0x08009625
 80095c4:	08009625 	.word	0x08009625
 80095c8:	08009625 	.word	0x08009625
 80095cc:	08009625 	.word	0x08009625
 80095d0:	08009615 	.word	0x08009615
 80095d4:	08009625 	.word	0x08009625
 80095d8:	08009625 	.word	0x08009625
 80095dc:	08009625 	.word	0x08009625
 80095e0:	08009625 	.word	0x08009625
 80095e4:	08009625 	.word	0x08009625
 80095e8:	08009625 	.word	0x08009625
 80095ec:	08009625 	.word	0x08009625
 80095f0:	0800961d 	.word	0x0800961d
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e1c0      	b.n	800997e <UART_SetConfig+0x7ae>
 80095fc:	2304      	movs	r3, #4
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e1bc      	b.n	800997e <UART_SetConfig+0x7ae>
 8009604:	2308      	movs	r3, #8
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e1b8      	b.n	800997e <UART_SetConfig+0x7ae>
 800960c:	2310      	movs	r3, #16
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e1b4      	b.n	800997e <UART_SetConfig+0x7ae>
 8009614:	2320      	movs	r3, #32
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e1b0      	b.n	800997e <UART_SetConfig+0x7ae>
 800961c:	2340      	movs	r3, #64	@ 0x40
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e1ac      	b.n	800997e <UART_SetConfig+0x7ae>
 8009624:	2380      	movs	r3, #128	@ 0x80
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e1a8      	b.n	800997e <UART_SetConfig+0x7ae>
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a75      	ldr	r2, [pc, #468]	@ (8009808 <UART_SetConfig+0x638>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d130      	bne.n	8009698 <UART_SetConfig+0x4c8>
 8009636:	4b73      	ldr	r3, [pc, #460]	@ (8009804 <UART_SetConfig+0x634>)
 8009638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	2b05      	cmp	r3, #5
 8009640:	d826      	bhi.n	8009690 <UART_SetConfig+0x4c0>
 8009642:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <UART_SetConfig+0x478>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009661 	.word	0x08009661
 800964c:	08009669 	.word	0x08009669
 8009650:	08009671 	.word	0x08009671
 8009654:	08009679 	.word	0x08009679
 8009658:	08009681 	.word	0x08009681
 800965c:	08009689 	.word	0x08009689
 8009660:	2300      	movs	r3, #0
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e18a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009668:	2304      	movs	r3, #4
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e186      	b.n	800997e <UART_SetConfig+0x7ae>
 8009670:	2308      	movs	r3, #8
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e182      	b.n	800997e <UART_SetConfig+0x7ae>
 8009678:	2310      	movs	r3, #16
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967e:	e17e      	b.n	800997e <UART_SetConfig+0x7ae>
 8009680:	2320      	movs	r3, #32
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e17a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009688:	2340      	movs	r3, #64	@ 0x40
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968e:	e176      	b.n	800997e <UART_SetConfig+0x7ae>
 8009690:	2380      	movs	r3, #128	@ 0x80
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e172      	b.n	800997e <UART_SetConfig+0x7ae>
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a5b      	ldr	r2, [pc, #364]	@ (800980c <UART_SetConfig+0x63c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d130      	bne.n	8009704 <UART_SetConfig+0x534>
 80096a2:	4b58      	ldr	r3, [pc, #352]	@ (8009804 <UART_SetConfig+0x634>)
 80096a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b05      	cmp	r3, #5
 80096ac:	d826      	bhi.n	80096fc <UART_SetConfig+0x52c>
 80096ae:	a201      	add	r2, pc, #4	@ (adr r2, 80096b4 <UART_SetConfig+0x4e4>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096cd 	.word	0x080096cd
 80096b8:	080096d5 	.word	0x080096d5
 80096bc:	080096dd 	.word	0x080096dd
 80096c0:	080096e5 	.word	0x080096e5
 80096c4:	080096ed 	.word	0x080096ed
 80096c8:	080096f5 	.word	0x080096f5
 80096cc:	2300      	movs	r3, #0
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e154      	b.n	800997e <UART_SetConfig+0x7ae>
 80096d4:	2304      	movs	r3, #4
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e150      	b.n	800997e <UART_SetConfig+0x7ae>
 80096dc:	2308      	movs	r3, #8
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e14c      	b.n	800997e <UART_SetConfig+0x7ae>
 80096e4:	2310      	movs	r3, #16
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e148      	b.n	800997e <UART_SetConfig+0x7ae>
 80096ec:	2320      	movs	r3, #32
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e144      	b.n	800997e <UART_SetConfig+0x7ae>
 80096f4:	2340      	movs	r3, #64	@ 0x40
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e140      	b.n	800997e <UART_SetConfig+0x7ae>
 80096fc:	2380      	movs	r3, #128	@ 0x80
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009702:	e13c      	b.n	800997e <UART_SetConfig+0x7ae>
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a41      	ldr	r2, [pc, #260]	@ (8009810 <UART_SetConfig+0x640>)
 800970a:	4293      	cmp	r3, r2
 800970c:	f040 8082 	bne.w	8009814 <UART_SetConfig+0x644>
 8009710:	4b3c      	ldr	r3, [pc, #240]	@ (8009804 <UART_SetConfig+0x634>)
 8009712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009718:	2b28      	cmp	r3, #40	@ 0x28
 800971a:	d86d      	bhi.n	80097f8 <UART_SetConfig+0x628>
 800971c:	a201      	add	r2, pc, #4	@ (adr r2, 8009724 <UART_SetConfig+0x554>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	080097c9 	.word	0x080097c9
 8009728:	080097f9 	.word	0x080097f9
 800972c:	080097f9 	.word	0x080097f9
 8009730:	080097f9 	.word	0x080097f9
 8009734:	080097f9 	.word	0x080097f9
 8009738:	080097f9 	.word	0x080097f9
 800973c:	080097f9 	.word	0x080097f9
 8009740:	080097f9 	.word	0x080097f9
 8009744:	080097d1 	.word	0x080097d1
 8009748:	080097f9 	.word	0x080097f9
 800974c:	080097f9 	.word	0x080097f9
 8009750:	080097f9 	.word	0x080097f9
 8009754:	080097f9 	.word	0x080097f9
 8009758:	080097f9 	.word	0x080097f9
 800975c:	080097f9 	.word	0x080097f9
 8009760:	080097f9 	.word	0x080097f9
 8009764:	080097d9 	.word	0x080097d9
 8009768:	080097f9 	.word	0x080097f9
 800976c:	080097f9 	.word	0x080097f9
 8009770:	080097f9 	.word	0x080097f9
 8009774:	080097f9 	.word	0x080097f9
 8009778:	080097f9 	.word	0x080097f9
 800977c:	080097f9 	.word	0x080097f9
 8009780:	080097f9 	.word	0x080097f9
 8009784:	080097e1 	.word	0x080097e1
 8009788:	080097f9 	.word	0x080097f9
 800978c:	080097f9 	.word	0x080097f9
 8009790:	080097f9 	.word	0x080097f9
 8009794:	080097f9 	.word	0x080097f9
 8009798:	080097f9 	.word	0x080097f9
 800979c:	080097f9 	.word	0x080097f9
 80097a0:	080097f9 	.word	0x080097f9
 80097a4:	080097e9 	.word	0x080097e9
 80097a8:	080097f9 	.word	0x080097f9
 80097ac:	080097f9 	.word	0x080097f9
 80097b0:	080097f9 	.word	0x080097f9
 80097b4:	080097f9 	.word	0x080097f9
 80097b8:	080097f9 	.word	0x080097f9
 80097bc:	080097f9 	.word	0x080097f9
 80097c0:	080097f9 	.word	0x080097f9
 80097c4:	080097f1 	.word	0x080097f1
 80097c8:	2301      	movs	r3, #1
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ce:	e0d6      	b.n	800997e <UART_SetConfig+0x7ae>
 80097d0:	2304      	movs	r3, #4
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d6:	e0d2      	b.n	800997e <UART_SetConfig+0x7ae>
 80097d8:	2308      	movs	r3, #8
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e0ce      	b.n	800997e <UART_SetConfig+0x7ae>
 80097e0:	2310      	movs	r3, #16
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e0ca      	b.n	800997e <UART_SetConfig+0x7ae>
 80097e8:	2320      	movs	r3, #32
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e0c6      	b.n	800997e <UART_SetConfig+0x7ae>
 80097f0:	2340      	movs	r3, #64	@ 0x40
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e0c2      	b.n	800997e <UART_SetConfig+0x7ae>
 80097f8:	2380      	movs	r3, #128	@ 0x80
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e0be      	b.n	800997e <UART_SetConfig+0x7ae>
 8009800:	40011400 	.word	0x40011400
 8009804:	58024400 	.word	0x58024400
 8009808:	40007800 	.word	0x40007800
 800980c:	40007c00 	.word	0x40007c00
 8009810:	40011800 	.word	0x40011800
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4aad      	ldr	r2, [pc, #692]	@ (8009ad0 <UART_SetConfig+0x900>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d176      	bne.n	800990c <UART_SetConfig+0x73c>
 800981e:	4bad      	ldr	r3, [pc, #692]	@ (8009ad4 <UART_SetConfig+0x904>)
 8009820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009826:	2b28      	cmp	r3, #40	@ 0x28
 8009828:	d86c      	bhi.n	8009904 <UART_SetConfig+0x734>
 800982a:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <UART_SetConfig+0x660>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	080098d5 	.word	0x080098d5
 8009834:	08009905 	.word	0x08009905
 8009838:	08009905 	.word	0x08009905
 800983c:	08009905 	.word	0x08009905
 8009840:	08009905 	.word	0x08009905
 8009844:	08009905 	.word	0x08009905
 8009848:	08009905 	.word	0x08009905
 800984c:	08009905 	.word	0x08009905
 8009850:	080098dd 	.word	0x080098dd
 8009854:	08009905 	.word	0x08009905
 8009858:	08009905 	.word	0x08009905
 800985c:	08009905 	.word	0x08009905
 8009860:	08009905 	.word	0x08009905
 8009864:	08009905 	.word	0x08009905
 8009868:	08009905 	.word	0x08009905
 800986c:	08009905 	.word	0x08009905
 8009870:	080098e5 	.word	0x080098e5
 8009874:	08009905 	.word	0x08009905
 8009878:	08009905 	.word	0x08009905
 800987c:	08009905 	.word	0x08009905
 8009880:	08009905 	.word	0x08009905
 8009884:	08009905 	.word	0x08009905
 8009888:	08009905 	.word	0x08009905
 800988c:	08009905 	.word	0x08009905
 8009890:	080098ed 	.word	0x080098ed
 8009894:	08009905 	.word	0x08009905
 8009898:	08009905 	.word	0x08009905
 800989c:	08009905 	.word	0x08009905
 80098a0:	08009905 	.word	0x08009905
 80098a4:	08009905 	.word	0x08009905
 80098a8:	08009905 	.word	0x08009905
 80098ac:	08009905 	.word	0x08009905
 80098b0:	080098f5 	.word	0x080098f5
 80098b4:	08009905 	.word	0x08009905
 80098b8:	08009905 	.word	0x08009905
 80098bc:	08009905 	.word	0x08009905
 80098c0:	08009905 	.word	0x08009905
 80098c4:	08009905 	.word	0x08009905
 80098c8:	08009905 	.word	0x08009905
 80098cc:	08009905 	.word	0x08009905
 80098d0:	080098fd 	.word	0x080098fd
 80098d4:	2301      	movs	r3, #1
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e050      	b.n	800997e <UART_SetConfig+0x7ae>
 80098dc:	2304      	movs	r3, #4
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e2:	e04c      	b.n	800997e <UART_SetConfig+0x7ae>
 80098e4:	2308      	movs	r3, #8
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ea:	e048      	b.n	800997e <UART_SetConfig+0x7ae>
 80098ec:	2310      	movs	r3, #16
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f2:	e044      	b.n	800997e <UART_SetConfig+0x7ae>
 80098f4:	2320      	movs	r3, #32
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fa:	e040      	b.n	800997e <UART_SetConfig+0x7ae>
 80098fc:	2340      	movs	r3, #64	@ 0x40
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009902:	e03c      	b.n	800997e <UART_SetConfig+0x7ae>
 8009904:	2380      	movs	r3, #128	@ 0x80
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990a:	e038      	b.n	800997e <UART_SetConfig+0x7ae>
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a71      	ldr	r2, [pc, #452]	@ (8009ad8 <UART_SetConfig+0x908>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d130      	bne.n	8009978 <UART_SetConfig+0x7a8>
 8009916:	4b6f      	ldr	r3, [pc, #444]	@ (8009ad4 <UART_SetConfig+0x904>)
 8009918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991a:	f003 0307 	and.w	r3, r3, #7
 800991e:	2b05      	cmp	r3, #5
 8009920:	d826      	bhi.n	8009970 <UART_SetConfig+0x7a0>
 8009922:	a201      	add	r2, pc, #4	@ (adr r2, 8009928 <UART_SetConfig+0x758>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	08009941 	.word	0x08009941
 800992c:	08009949 	.word	0x08009949
 8009930:	08009951 	.word	0x08009951
 8009934:	08009959 	.word	0x08009959
 8009938:	08009961 	.word	0x08009961
 800993c:	08009969 	.word	0x08009969
 8009940:	2302      	movs	r3, #2
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e01a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009948:	2304      	movs	r3, #4
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994e:	e016      	b.n	800997e <UART_SetConfig+0x7ae>
 8009950:	2308      	movs	r3, #8
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e012      	b.n	800997e <UART_SetConfig+0x7ae>
 8009958:	2310      	movs	r3, #16
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995e:	e00e      	b.n	800997e <UART_SetConfig+0x7ae>
 8009960:	2320      	movs	r3, #32
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e00a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009968:	2340      	movs	r3, #64	@ 0x40
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e006      	b.n	800997e <UART_SetConfig+0x7ae>
 8009970:	2380      	movs	r3, #128	@ 0x80
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e002      	b.n	800997e <UART_SetConfig+0x7ae>
 8009978:	2380      	movs	r3, #128	@ 0x80
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a55      	ldr	r2, [pc, #340]	@ (8009ad8 <UART_SetConfig+0x908>)
 8009984:	4293      	cmp	r3, r2
 8009986:	f040 80f8 	bne.w	8009b7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800998a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800998e:	2b20      	cmp	r3, #32
 8009990:	dc46      	bgt.n	8009a20 <UART_SetConfig+0x850>
 8009992:	2b02      	cmp	r3, #2
 8009994:	db75      	blt.n	8009a82 <UART_SetConfig+0x8b2>
 8009996:	3b02      	subs	r3, #2
 8009998:	2b1e      	cmp	r3, #30
 800999a:	d872      	bhi.n	8009a82 <UART_SetConfig+0x8b2>
 800999c:	a201      	add	r2, pc, #4	@ (adr r2, 80099a4 <UART_SetConfig+0x7d4>)
 800999e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a2:	bf00      	nop
 80099a4:	08009a27 	.word	0x08009a27
 80099a8:	08009a83 	.word	0x08009a83
 80099ac:	08009a2f 	.word	0x08009a2f
 80099b0:	08009a83 	.word	0x08009a83
 80099b4:	08009a83 	.word	0x08009a83
 80099b8:	08009a83 	.word	0x08009a83
 80099bc:	08009a3f 	.word	0x08009a3f
 80099c0:	08009a83 	.word	0x08009a83
 80099c4:	08009a83 	.word	0x08009a83
 80099c8:	08009a83 	.word	0x08009a83
 80099cc:	08009a83 	.word	0x08009a83
 80099d0:	08009a83 	.word	0x08009a83
 80099d4:	08009a83 	.word	0x08009a83
 80099d8:	08009a83 	.word	0x08009a83
 80099dc:	08009a4f 	.word	0x08009a4f
 80099e0:	08009a83 	.word	0x08009a83
 80099e4:	08009a83 	.word	0x08009a83
 80099e8:	08009a83 	.word	0x08009a83
 80099ec:	08009a83 	.word	0x08009a83
 80099f0:	08009a83 	.word	0x08009a83
 80099f4:	08009a83 	.word	0x08009a83
 80099f8:	08009a83 	.word	0x08009a83
 80099fc:	08009a83 	.word	0x08009a83
 8009a00:	08009a83 	.word	0x08009a83
 8009a04:	08009a83 	.word	0x08009a83
 8009a08:	08009a83 	.word	0x08009a83
 8009a0c:	08009a83 	.word	0x08009a83
 8009a10:	08009a83 	.word	0x08009a83
 8009a14:	08009a83 	.word	0x08009a83
 8009a18:	08009a83 	.word	0x08009a83
 8009a1c:	08009a75 	.word	0x08009a75
 8009a20:	2b40      	cmp	r3, #64	@ 0x40
 8009a22:	d02a      	beq.n	8009a7a <UART_SetConfig+0x8aa>
 8009a24:	e02d      	b.n	8009a82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a26:	f7fd fb39 	bl	800709c <HAL_RCCEx_GetD3PCLK1Freq>
 8009a2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a2c:	e02f      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fd fb48 	bl	80070c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a3c:	e027      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a3e:	f107 0318 	add.w	r3, r7, #24
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fd fc94 	bl	8007370 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4c:	e01f      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a4e:	4b21      	ldr	r3, [pc, #132]	@ (8009ad4 <UART_SetConfig+0x904>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ad4 <UART_SetConfig+0x904>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	08db      	lsrs	r3, r3, #3
 8009a60:	f003 0303 	and.w	r3, r3, #3
 8009a64:	4a1d      	ldr	r2, [pc, #116]	@ (8009adc <UART_SetConfig+0x90c>)
 8009a66:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a6c:	e00f      	b.n	8009a8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8009adc <UART_SetConfig+0x90c>)
 8009a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a72:	e00c      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a74:	4b1a      	ldr	r3, [pc, #104]	@ (8009ae0 <UART_SetConfig+0x910>)
 8009a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a78:	e009      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a80:	e005      	b.n	8009a8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 81ee 	beq.w	8009e72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9a:	4a12      	ldr	r2, [pc, #72]	@ (8009ae4 <UART_SetConfig+0x914>)
 8009a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aa8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	005b      	lsls	r3, r3, #1
 8009ab2:	4413      	add	r3, r2
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d305      	bcc.n	8009ac6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d910      	bls.n	8009ae8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009acc:	e1d1      	b.n	8009e72 <UART_SetConfig+0xca2>
 8009ace:	bf00      	nop
 8009ad0:	40011c00 	.word	0x40011c00
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	58000c00 	.word	0x58000c00
 8009adc:	03d09000 	.word	0x03d09000
 8009ae0:	003d0900 	.word	0x003d0900
 8009ae4:	0800e698 	.word	0x0800e698
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aea:	2200      	movs	r2, #0
 8009aec:	60bb      	str	r3, [r7, #8]
 8009aee:	60fa      	str	r2, [r7, #12]
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af4:	4ac0      	ldr	r2, [pc, #768]	@ (8009df8 <UART_SetConfig+0xc28>)
 8009af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2200      	movs	r2, #0
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	607a      	str	r2, [r7, #4]
 8009b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b0a:	f7f6 fc69 	bl	80003e0 <__aeabi_uldivmod>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4610      	mov	r0, r2
 8009b14:	4619      	mov	r1, r3
 8009b16:	f04f 0200 	mov.w	r2, #0
 8009b1a:	f04f 0300 	mov.w	r3, #0
 8009b1e:	020b      	lsls	r3, r1, #8
 8009b20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b24:	0202      	lsls	r2, r0, #8
 8009b26:	6979      	ldr	r1, [r7, #20]
 8009b28:	6849      	ldr	r1, [r1, #4]
 8009b2a:	0849      	lsrs	r1, r1, #1
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4605      	mov	r5, r0
 8009b32:	eb12 0804 	adds.w	r8, r2, r4
 8009b36:	eb43 0905 	adc.w	r9, r3, r5
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	469a      	mov	sl, r3
 8009b42:	4693      	mov	fp, r2
 8009b44:	4652      	mov	r2, sl
 8009b46:	465b      	mov	r3, fp
 8009b48:	4640      	mov	r0, r8
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	f7f6 fc48 	bl	80003e0 <__aeabi_uldivmod>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4613      	mov	r3, r2
 8009b56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b5e:	d308      	bcc.n	8009b72 <UART_SetConfig+0x9a2>
 8009b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b66:	d204      	bcs.n	8009b72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b6e:	60da      	str	r2, [r3, #12]
 8009b70:	e17f      	b.n	8009e72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b78:	e17b      	b.n	8009e72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b82:	f040 80bd 	bne.w	8009d00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009b86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	dc48      	bgt.n	8009c20 <UART_SetConfig+0xa50>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	db7b      	blt.n	8009c8a <UART_SetConfig+0xaba>
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d879      	bhi.n	8009c8a <UART_SetConfig+0xaba>
 8009b96:	a201      	add	r2, pc, #4	@ (adr r2, 8009b9c <UART_SetConfig+0x9cc>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009c27 	.word	0x08009c27
 8009ba0:	08009c2f 	.word	0x08009c2f
 8009ba4:	08009c8b 	.word	0x08009c8b
 8009ba8:	08009c8b 	.word	0x08009c8b
 8009bac:	08009c37 	.word	0x08009c37
 8009bb0:	08009c8b 	.word	0x08009c8b
 8009bb4:	08009c8b 	.word	0x08009c8b
 8009bb8:	08009c8b 	.word	0x08009c8b
 8009bbc:	08009c47 	.word	0x08009c47
 8009bc0:	08009c8b 	.word	0x08009c8b
 8009bc4:	08009c8b 	.word	0x08009c8b
 8009bc8:	08009c8b 	.word	0x08009c8b
 8009bcc:	08009c8b 	.word	0x08009c8b
 8009bd0:	08009c8b 	.word	0x08009c8b
 8009bd4:	08009c8b 	.word	0x08009c8b
 8009bd8:	08009c8b 	.word	0x08009c8b
 8009bdc:	08009c57 	.word	0x08009c57
 8009be0:	08009c8b 	.word	0x08009c8b
 8009be4:	08009c8b 	.word	0x08009c8b
 8009be8:	08009c8b 	.word	0x08009c8b
 8009bec:	08009c8b 	.word	0x08009c8b
 8009bf0:	08009c8b 	.word	0x08009c8b
 8009bf4:	08009c8b 	.word	0x08009c8b
 8009bf8:	08009c8b 	.word	0x08009c8b
 8009bfc:	08009c8b 	.word	0x08009c8b
 8009c00:	08009c8b 	.word	0x08009c8b
 8009c04:	08009c8b 	.word	0x08009c8b
 8009c08:	08009c8b 	.word	0x08009c8b
 8009c0c:	08009c8b 	.word	0x08009c8b
 8009c10:	08009c8b 	.word	0x08009c8b
 8009c14:	08009c8b 	.word	0x08009c8b
 8009c18:	08009c8b 	.word	0x08009c8b
 8009c1c:	08009c7d 	.word	0x08009c7d
 8009c20:	2b40      	cmp	r3, #64	@ 0x40
 8009c22:	d02e      	beq.n	8009c82 <UART_SetConfig+0xab2>
 8009c24:	e031      	b.n	8009c8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c26:	f7fc f86d 	bl	8005d04 <HAL_RCC_GetPCLK1Freq>
 8009c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c2c:	e033      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c2e:	f7fc f87f 	bl	8005d30 <HAL_RCC_GetPCLK2Freq>
 8009c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c34:	e02f      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fd fa44 	bl	80070c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c44:	e027      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c46:	f107 0318 	add.w	r3, r7, #24
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fd fb90 	bl	8007370 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c54:	e01f      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c56:	4b69      	ldr	r3, [pc, #420]	@ (8009dfc <UART_SetConfig+0xc2c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c62:	4b66      	ldr	r3, [pc, #408]	@ (8009dfc <UART_SetConfig+0xc2c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	08db      	lsrs	r3, r3, #3
 8009c68:	f003 0303 	and.w	r3, r3, #3
 8009c6c:	4a64      	ldr	r2, [pc, #400]	@ (8009e00 <UART_SetConfig+0xc30>)
 8009c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c74:	e00f      	b.n	8009c96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009c76:	4b62      	ldr	r3, [pc, #392]	@ (8009e00 <UART_SetConfig+0xc30>)
 8009c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7a:	e00c      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c7c:	4b61      	ldr	r3, [pc, #388]	@ (8009e04 <UART_SetConfig+0xc34>)
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c80:	e009      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c88:	e005      	b.n	8009c96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 80ea 	beq.w	8009e72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca2:	4a55      	ldr	r2, [pc, #340]	@ (8009df8 <UART_SetConfig+0xc28>)
 8009ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cb0:	005a      	lsls	r2, r3, #1
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	441a      	add	r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d916      	bls.n	8009cf8 <UART_SetConfig+0xb28>
 8009cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd0:	d212      	bcs.n	8009cf8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f023 030f 	bic.w	r3, r3, #15
 8009cda:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009cea:	4313      	orrs	r3, r2
 8009cec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009cf4:	60da      	str	r2, [r3, #12]
 8009cf6:	e0bc      	b.n	8009e72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009cfe:	e0b8      	b.n	8009e72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d04:	2b20      	cmp	r3, #32
 8009d06:	dc4b      	bgt.n	8009da0 <UART_SetConfig+0xbd0>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f2c0 8087 	blt.w	8009e1c <UART_SetConfig+0xc4c>
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	f200 8084 	bhi.w	8009e1c <UART_SetConfig+0xc4c>
 8009d14:	a201      	add	r2, pc, #4	@ (adr r2, 8009d1c <UART_SetConfig+0xb4c>)
 8009d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1a:	bf00      	nop
 8009d1c:	08009da7 	.word	0x08009da7
 8009d20:	08009daf 	.word	0x08009daf
 8009d24:	08009e1d 	.word	0x08009e1d
 8009d28:	08009e1d 	.word	0x08009e1d
 8009d2c:	08009db7 	.word	0x08009db7
 8009d30:	08009e1d 	.word	0x08009e1d
 8009d34:	08009e1d 	.word	0x08009e1d
 8009d38:	08009e1d 	.word	0x08009e1d
 8009d3c:	08009dc7 	.word	0x08009dc7
 8009d40:	08009e1d 	.word	0x08009e1d
 8009d44:	08009e1d 	.word	0x08009e1d
 8009d48:	08009e1d 	.word	0x08009e1d
 8009d4c:	08009e1d 	.word	0x08009e1d
 8009d50:	08009e1d 	.word	0x08009e1d
 8009d54:	08009e1d 	.word	0x08009e1d
 8009d58:	08009e1d 	.word	0x08009e1d
 8009d5c:	08009dd7 	.word	0x08009dd7
 8009d60:	08009e1d 	.word	0x08009e1d
 8009d64:	08009e1d 	.word	0x08009e1d
 8009d68:	08009e1d 	.word	0x08009e1d
 8009d6c:	08009e1d 	.word	0x08009e1d
 8009d70:	08009e1d 	.word	0x08009e1d
 8009d74:	08009e1d 	.word	0x08009e1d
 8009d78:	08009e1d 	.word	0x08009e1d
 8009d7c:	08009e1d 	.word	0x08009e1d
 8009d80:	08009e1d 	.word	0x08009e1d
 8009d84:	08009e1d 	.word	0x08009e1d
 8009d88:	08009e1d 	.word	0x08009e1d
 8009d8c:	08009e1d 	.word	0x08009e1d
 8009d90:	08009e1d 	.word	0x08009e1d
 8009d94:	08009e1d 	.word	0x08009e1d
 8009d98:	08009e1d 	.word	0x08009e1d
 8009d9c:	08009e0f 	.word	0x08009e0f
 8009da0:	2b40      	cmp	r3, #64	@ 0x40
 8009da2:	d037      	beq.n	8009e14 <UART_SetConfig+0xc44>
 8009da4:	e03a      	b.n	8009e1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009da6:	f7fb ffad 	bl	8005d04 <HAL_RCC_GetPCLK1Freq>
 8009daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dac:	e03c      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dae:	f7fb ffbf 	bl	8005d30 <HAL_RCC_GetPCLK2Freq>
 8009db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009db4:	e038      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fd f984 	bl	80070c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dc4:	e030      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dc6:	f107 0318 	add.w	r3, r7, #24
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fd fad0 	bl	8007370 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dd4:	e028      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dd6:	4b09      	ldr	r3, [pc, #36]	@ (8009dfc <UART_SetConfig+0xc2c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0320 	and.w	r3, r3, #32
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d012      	beq.n	8009e08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009de2:	4b06      	ldr	r3, [pc, #24]	@ (8009dfc <UART_SetConfig+0xc2c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	08db      	lsrs	r3, r3, #3
 8009de8:	f003 0303 	and.w	r3, r3, #3
 8009dec:	4a04      	ldr	r2, [pc, #16]	@ (8009e00 <UART_SetConfig+0xc30>)
 8009dee:	fa22 f303 	lsr.w	r3, r2, r3
 8009df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009df4:	e018      	b.n	8009e28 <UART_SetConfig+0xc58>
 8009df6:	bf00      	nop
 8009df8:	0800e698 	.word	0x0800e698
 8009dfc:	58024400 	.word	0x58024400
 8009e00:	03d09000 	.word	0x03d09000
 8009e04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009e08:	4b24      	ldr	r3, [pc, #144]	@ (8009e9c <UART_SetConfig+0xccc>)
 8009e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e0c:	e00c      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e0e:	4b24      	ldr	r3, [pc, #144]	@ (8009ea0 <UART_SetConfig+0xcd0>)
 8009e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e12:	e009      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e1a:	e005      	b.n	8009e28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e26:	bf00      	nop
    }

    if (pclk != 0U)
 8009e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d021      	beq.n	8009e72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e32:	4a1c      	ldr	r2, [pc, #112]	@ (8009ea4 <UART_SetConfig+0xcd4>)
 8009e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	085b      	lsrs	r3, r3, #1
 8009e46:	441a      	add	r2, r3
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e50:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e54:	2b0f      	cmp	r3, #15
 8009e56:	d909      	bls.n	8009e6c <UART_SetConfig+0xc9c>
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e5e:	d205      	bcs.n	8009e6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	e002      	b.n	8009e72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2200      	movs	r2, #0
 8009e86:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e8e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3748      	adds	r7, #72	@ 0x48
 8009e96:	46bd      	mov	sp, r7
 8009e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e9c:	03d09000 	.word	0x03d09000
 8009ea0:	003d0900 	.word	0x003d0900
 8009ea4:	0800e698 	.word	0x0800e698

08009ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00a      	beq.n	8009ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00a      	beq.n	8009ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef8:	f003 0302 	and.w	r3, r3, #2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00a      	beq.n	8009f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1a:	f003 0304 	and.w	r3, r3, #4
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00a      	beq.n	8009f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3c:	f003 0310 	and.w	r3, r3, #16
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00a      	beq.n	8009f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01a      	beq.n	8009fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fa6:	d10a      	bne.n	8009fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	605a      	str	r2, [r3, #4]
  }
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b098      	sub	sp, #96	@ 0x60
 8009ff0:	af02      	add	r7, sp, #8
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ffc:	f7f9 f80c 	bl	8003018 <HAL_GetTick>
 800a000:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0308 	and.w	r3, r3, #8
 800a00c:	2b08      	cmp	r3, #8
 800a00e:	d12f      	bne.n	800a070 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a018:	2200      	movs	r2, #0
 800a01a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f88e 	bl	800a140 <UART_WaitOnFlagUntilTimeout>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d022      	beq.n	800a070 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a03a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a03e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a048:	647b      	str	r3, [r7, #68]	@ 0x44
 800a04a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a04e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e6      	bne.n	800a02a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e063      	b.n	800a138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d149      	bne.n	800a112 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a07e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a086:	2200      	movs	r2, #0
 800a088:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f857 	bl	800a140 <UART_WaitOnFlagUntilTimeout>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d03c      	beq.n	800a112 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	623b      	str	r3, [r7, #32]
   return(result);
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e6      	bne.n	800a098 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3308      	adds	r3, #8
 800a0d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f023 0301 	bic.w	r3, r3, #1
 800a0e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0ea:	61fa      	str	r2, [r7, #28]
 800a0ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	69b9      	ldr	r1, [r7, #24]
 800a0f0:	69fa      	ldr	r2, [r7, #28]
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e5      	bne.n	800a0ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2220      	movs	r2, #32
 800a102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e012      	b.n	800a138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2220      	movs	r2, #32
 800a116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2220      	movs	r2, #32
 800a11e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3758      	adds	r7, #88	@ 0x58
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	4613      	mov	r3, r2
 800a14e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a150:	e04f      	b.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a158:	d04b      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a15a:	f7f8 ff5d 	bl	8003018 <HAL_GetTick>
 800a15e:	4602      	mov	r2, r0
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	429a      	cmp	r2, r3
 800a168:	d302      	bcc.n	800a170 <UART_WaitOnFlagUntilTimeout+0x30>
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e04e      	b.n	800a212 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0304 	and.w	r3, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d037      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b80      	cmp	r3, #128	@ 0x80
 800a186:	d034      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b40      	cmp	r3, #64	@ 0x40
 800a18c:	d031      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	f003 0308 	and.w	r3, r3, #8
 800a198:	2b08      	cmp	r3, #8
 800a19a:	d110      	bne.n	800a1be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2208      	movs	r2, #8
 800a1a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f95b 	bl	800a460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2208      	movs	r2, #8
 800a1ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e029      	b.n	800a212 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1cc:	d111      	bne.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 f941 	bl	800a460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e00f      	b.n	800a212 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	69da      	ldr	r2, [r3, #28]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	bf0c      	ite	eq
 800a202:	2301      	moveq	r3, #1
 800a204:	2300      	movne	r3, #0
 800a206:	b2db      	uxtb	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d0a0      	beq.n	800a152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b0a3      	sub	sp, #140	@ 0x8c
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	88fa      	ldrh	r2, [r7, #6]
 800a234:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	88fa      	ldrh	r2, [r7, #6]
 800a23c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a24e:	d10e      	bne.n	800a26e <UART_Start_Receive_IT+0x52>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d105      	bne.n	800a264 <UART_Start_Receive_IT+0x48>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a25e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a262:	e02d      	b.n	800a2c0 <UART_Start_Receive_IT+0xa4>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	22ff      	movs	r2, #255	@ 0xff
 800a268:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a26c:	e028      	b.n	800a2c0 <UART_Start_Receive_IT+0xa4>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10d      	bne.n	800a292 <UART_Start_Receive_IT+0x76>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d104      	bne.n	800a288 <UART_Start_Receive_IT+0x6c>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	22ff      	movs	r2, #255	@ 0xff
 800a282:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a286:	e01b      	b.n	800a2c0 <UART_Start_Receive_IT+0xa4>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	227f      	movs	r2, #127	@ 0x7f
 800a28c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a290:	e016      	b.n	800a2c0 <UART_Start_Receive_IT+0xa4>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a29a:	d10d      	bne.n	800a2b8 <UART_Start_Receive_IT+0x9c>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d104      	bne.n	800a2ae <UART_Start_Receive_IT+0x92>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	227f      	movs	r2, #127	@ 0x7f
 800a2a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2ac:	e008      	b.n	800a2c0 <UART_Start_Receive_IT+0xa4>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	223f      	movs	r2, #63	@ 0x3f
 800a2b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2b6:	e003      	b.n	800a2c0 <UART_Start_Receive_IT+0xa4>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2222      	movs	r2, #34	@ 0x22
 800a2cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2da:	e853 3f00 	ldrex	r3, [r3]
 800a2de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a2e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2e2:	f043 0301 	orr.w	r3, r3, #1
 800a2e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a2f4:	673a      	str	r2, [r7, #112]	@ 0x70
 800a2f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a2fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a302:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e3      	bne.n	800a2d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a30c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a310:	d14f      	bne.n	800a3b2 <UART_Start_Receive_IT+0x196>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a318:	88fa      	ldrh	r2, [r7, #6]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d349      	bcc.n	800a3b2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a326:	d107      	bne.n	800a338 <UART_Start_Receive_IT+0x11c>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d103      	bne.n	800a338 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4a47      	ldr	r2, [pc, #284]	@ (800a450 <UART_Start_Receive_IT+0x234>)
 800a334:	675a      	str	r2, [r3, #116]	@ 0x74
 800a336:	e002      	b.n	800a33e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4a46      	ldr	r2, [pc, #280]	@ (800a454 <UART_Start_Receive_IT+0x238>)
 800a33c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01a      	beq.n	800a37c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a34e:	e853 3f00 	ldrex	r3, [r3]
 800a352:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a35a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a36a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a36e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a370:	e841 2300 	strex	r3, r2, [r1]
 800a374:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1e4      	bne.n	800a346 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3308      	adds	r3, #8
 800a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a386:	e853 3f00 	ldrex	r3, [r3]
 800a38a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a392:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3308      	adds	r3, #8
 800a39a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a39c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a39e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3a4:	e841 2300 	strex	r3, r2, [r1]
 800a3a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a3aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e5      	bne.n	800a37c <UART_Start_Receive_IT+0x160>
 800a3b0:	e046      	b.n	800a440 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3ba:	d107      	bne.n	800a3cc <UART_Start_Receive_IT+0x1b0>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d103      	bne.n	800a3cc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4a24      	ldr	r2, [pc, #144]	@ (800a458 <UART_Start_Receive_IT+0x23c>)
 800a3c8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a3ca:	e002      	b.n	800a3d2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4a23      	ldr	r2, [pc, #140]	@ (800a45c <UART_Start_Receive_IT+0x240>)
 800a3d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d019      	beq.n	800a40e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e2:	e853 3f00 	ldrex	r3, [r3]
 800a3e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ea:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a3ee:	677b      	str	r3, [r7, #116]	@ 0x74
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3fa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a400:	e841 2300 	strex	r3, r2, [r1]
 800a404:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e6      	bne.n	800a3da <UART_Start_Receive_IT+0x1be>
 800a40c:	e018      	b.n	800a440 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	e853 3f00 	ldrex	r3, [r3]
 800a41a:	613b      	str	r3, [r7, #16]
   return(result);
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	f043 0320 	orr.w	r3, r3, #32
 800a422:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	461a      	mov	r2, r3
 800a42a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a42c:	623b      	str	r3, [r7, #32]
 800a42e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a430:	69f9      	ldr	r1, [r7, #28]
 800a432:	6a3a      	ldr	r2, [r7, #32]
 800a434:	e841 2300 	strex	r3, r2, [r1]
 800a438:	61bb      	str	r3, [r7, #24]
   return(result);
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1e6      	bne.n	800a40e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	378c      	adds	r7, #140	@ 0x8c
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	0800ac7d 	.word	0x0800ac7d
 800a454:	0800a919 	.word	0x0800a919
 800a458:	0800a761 	.word	0x0800a761
 800a45c:	0800a5a9 	.word	0x0800a5a9

0800a460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a460:	b480      	push	{r7}
 800a462:	b095      	sub	sp, #84	@ 0x54
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a470:	e853 3f00 	ldrex	r3, [r3]
 800a474:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a47c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	461a      	mov	r2, r3
 800a484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a486:	643b      	str	r3, [r7, #64]	@ 0x40
 800a488:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a48c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a48e:	e841 2300 	strex	r3, r2, [r1]
 800a492:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1e6      	bne.n	800a468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	4b1e      	ldr	r3, [pc, #120]	@ (800a528 <UART_EndRxTransfer+0xc8>)
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e5      	bne.n	800a49a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d118      	bne.n	800a508 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f023 0310 	bic.w	r3, r3, #16
 800a4ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4f4:	61bb      	str	r3, [r7, #24]
 800a4f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f8:	6979      	ldr	r1, [r7, #20]
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	613b      	str	r3, [r7, #16]
   return(result);
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e6      	bne.n	800a4d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2220      	movs	r2, #32
 800a50c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a51c:	bf00      	nop
 800a51e:	3754      	adds	r7, #84	@ 0x54
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	effffffe 	.word	0xeffffffe

0800a52c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f7fe fe2e 	bl	80091a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a548:	bf00      	nop
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	60bb      	str	r3, [r7, #8]
   return(result);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a56c:	61fb      	str	r3, [r7, #28]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	61bb      	str	r3, [r7, #24]
 800a578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57a:	6979      	ldr	r1, [r7, #20]
 800a57c:	69ba      	ldr	r2, [r7, #24]
 800a57e:	e841 2300 	strex	r3, r2, [r1]
 800a582:	613b      	str	r3, [r7, #16]
   return(result);
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1e6      	bne.n	800a558 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2220      	movs	r2, #32
 800a58e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7fe fdf9 	bl	8009190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a59e:	bf00      	nop
 800a5a0:	3720      	adds	r7, #32
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b09c      	sub	sp, #112	@ 0x70
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a5b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5c0:	2b22      	cmp	r3, #34	@ 0x22
 800a5c2:	f040 80be 	bne.w	800a742 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a5d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a5d4:	b2d9      	uxtb	r1, r3
 800a5d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5e0:	400a      	ands	r2, r1
 800a5e2:	b2d2      	uxtb	r2, r2
 800a5e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a608:	b29b      	uxth	r3, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f040 80a1 	bne.w	800a752 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a61e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a624:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a62e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a630:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a634:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a63c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e6      	bne.n	800a610 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3308      	adds	r3, #8
 800a648:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64c:	e853 3f00 	ldrex	r3, [r3]
 800a650:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a654:	f023 0301 	bic.w	r3, r3, #1
 800a658:	667b      	str	r3, [r7, #100]	@ 0x64
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3308      	adds	r3, #8
 800a660:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a662:	647a      	str	r2, [r7, #68]	@ 0x44
 800a664:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a666:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a668:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a66a:	e841 2300 	strex	r3, r2, [r1]
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1e5      	bne.n	800a642 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2220      	movs	r2, #32
 800a67a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a33      	ldr	r2, [pc, #204]	@ (800a75c <UART_RxISR_8BIT+0x1b4>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d01f      	beq.n	800a6d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d018      	beq.n	800a6d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6aa:	e853 3f00 	ldrex	r3, [r3]
 800a6ae:	623b      	str	r3, [r7, #32]
   return(result);
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6b6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	461a      	mov	r2, r3
 800a6be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6c8:	e841 2300 	strex	r3, r2, [r1]
 800a6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1e6      	bne.n	800a6a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d12e      	bne.n	800a73a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	e853 3f00 	ldrex	r3, [r3]
 800a6ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 0310 	bic.w	r3, r3, #16
 800a6f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a700:	61fb      	str	r3, [r7, #28]
 800a702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a704:	69b9      	ldr	r1, [r7, #24]
 800a706:	69fa      	ldr	r2, [r7, #28]
 800a708:	e841 2300 	strex	r3, r2, [r1]
 800a70c:	617b      	str	r3, [r7, #20]
   return(result);
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1e6      	bne.n	800a6e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	f003 0310 	and.w	r3, r3, #16
 800a71e:	2b10      	cmp	r3, #16
 800a720:	d103      	bne.n	800a72a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2210      	movs	r2, #16
 800a728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7fe fd40 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a738:	e00b      	b.n	800a752 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7f6 f8e4 	bl	8000908 <HAL_UART_RxCpltCallback>
}
 800a740:	e007      	b.n	800a752 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	699a      	ldr	r2, [r3, #24]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f042 0208 	orr.w	r2, r2, #8
 800a750:	619a      	str	r2, [r3, #24]
}
 800a752:	bf00      	nop
 800a754:	3770      	adds	r7, #112	@ 0x70
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	58000c00 	.word	0x58000c00

0800a760 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b09c      	sub	sp, #112	@ 0x70
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a76e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a778:	2b22      	cmp	r3, #34	@ 0x22
 800a77a:	f040 80be 	bne.w	800a8fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a784:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a78c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a78e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a792:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a796:	4013      	ands	r3, r2
 800a798:	b29a      	uxth	r2, r3
 800a79a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a79c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a2:	1c9a      	adds	r2, r3, #2
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f040 80a1 	bne.w	800a90a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7d0:	e853 3f00 	ldrex	r3, [r3]
 800a7d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7dc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a7ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a7ee:	e841 2300 	strex	r3, r2, [r1]
 800a7f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a7f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1e6      	bne.n	800a7c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3308      	adds	r3, #8
 800a800:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a804:	e853 3f00 	ldrex	r3, [r3]
 800a808:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80c:	f023 0301 	bic.w	r3, r3, #1
 800a810:	663b      	str	r3, [r7, #96]	@ 0x60
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3308      	adds	r3, #8
 800a818:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a81a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a820:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a822:	e841 2300 	strex	r3, r2, [r1]
 800a826:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e5      	bne.n	800a7fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2220      	movs	r2, #32
 800a832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a33      	ldr	r2, [pc, #204]	@ (800a914 <UART_RxISR_16BIT+0x1b4>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d01f      	beq.n	800a88c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d018      	beq.n	800a88c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	e853 3f00 	ldrex	r3, [r3]
 800a866:	61fb      	str	r3, [r7, #28]
   return(result);
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a86e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	461a      	mov	r2, r3
 800a876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a87a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a87e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a880:	e841 2300 	strex	r3, r2, [r1]
 800a884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1e6      	bne.n	800a85a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a890:	2b01      	cmp	r3, #1
 800a892:	d12e      	bne.n	800a8f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f023 0310 	bic.w	r3, r3, #16
 800a8ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8b8:	61bb      	str	r3, [r7, #24]
 800a8ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	6979      	ldr	r1, [r7, #20]
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	e841 2300 	strex	r3, r2, [r1]
 800a8c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e6      	bne.n	800a89a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f003 0310 	and.w	r3, r3, #16
 800a8d6:	2b10      	cmp	r3, #16
 800a8d8:	d103      	bne.n	800a8e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2210      	movs	r2, #16
 800a8e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7fe fc64 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8f0:	e00b      	b.n	800a90a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7f6 f808 	bl	8000908 <HAL_UART_RxCpltCallback>
}
 800a8f8:	e007      	b.n	800a90a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	699a      	ldr	r2, [r3, #24]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f042 0208 	orr.w	r2, r2, #8
 800a908:	619a      	str	r2, [r3, #24]
}
 800a90a:	bf00      	nop
 800a90c:	3770      	adds	r7, #112	@ 0x70
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	58000c00 	.word	0x58000c00

0800a918 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b0ac      	sub	sp, #176	@ 0xb0
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a926:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	69db      	ldr	r3, [r3, #28]
 800a930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a94e:	2b22      	cmp	r3, #34	@ 0x22
 800a950:	f040 8181 	bne.w	800ac56 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a95a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a95e:	e124      	b.n	800abaa <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a966:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a96a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a96e:	b2d9      	uxtb	r1, r3
 800a970:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a974:	b2da      	uxtb	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a97a:	400a      	ands	r2, r1
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a990:	b29b      	uxth	r3, r3
 800a992:	3b01      	subs	r3, #1
 800a994:	b29a      	uxth	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a9a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9aa:	f003 0307 	and.w	r3, r3, #7
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d053      	beq.n	800aa5a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d011      	beq.n	800a9e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a9be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a9c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00b      	beq.n	800a9e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9d8:	f043 0201 	orr.w	r2, r3, #1
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d011      	beq.n	800aa12 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a9ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00b      	beq.n	800aa12 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2202      	movs	r2, #2
 800aa00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa08:	f043 0204 	orr.w	r2, r3, #4
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d011      	beq.n	800aa42 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800aa1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00b      	beq.n	800aa42 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2204      	movs	r2, #4
 800aa30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa38:	f043 0202 	orr.w	r2, r3, #2
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7fe fba9 	bl	80091a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f040 80a1 	bne.w	800abaa <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa70:	e853 3f00 	ldrex	r3, [r3]
 800aa74:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800aa76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	461a      	mov	r2, r3
 800aa86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aa8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa8c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800aa90:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800aa98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e4      	bne.n	800aa68 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800aaae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aab0:	4b6f      	ldr	r3, [pc, #444]	@ (800ac70 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800aab2:	4013      	ands	r3, r2
 800aab4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3308      	adds	r3, #8
 800aabe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aac2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800aac4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800aac8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800aad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e3      	bne.n	800aa9e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2220      	movs	r2, #32
 800aada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a61      	ldr	r2, [pc, #388]	@ (800ac74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d021      	beq.n	800ab38 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01a      	beq.n	800ab38 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab0a:	e853 3f00 	ldrex	r3, [r3]
 800ab0e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ab10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ab24:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab26:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ab32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e4      	bne.n	800ab02 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d130      	bne.n	800aba2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab4e:	e853 3f00 	ldrex	r3, [r3]
 800ab52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab56:	f023 0310 	bic.w	r3, r3, #16
 800ab5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab68:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab70:	e841 2300 	strex	r3, r2, [r1]
 800ab74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1e4      	bne.n	800ab46 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	f003 0310 	and.w	r3, r3, #16
 800ab86:	2b10      	cmp	r3, #16
 800ab88:	d103      	bne.n	800ab92 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2210      	movs	r2, #16
 800ab90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7fe fb0c 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800aba0:	e00e      	b.n	800abc0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7f5 feb0 	bl	8000908 <HAL_UART_RxCpltCallback>
        break;
 800aba8:	e00a      	b.n	800abc0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800abaa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d006      	beq.n	800abc0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800abb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abb6:	f003 0320 	and.w	r3, r3, #32
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f47f aed0 	bne.w	800a960 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abc6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800abca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d049      	beq.n	800ac66 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800abd8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800abdc:	429a      	cmp	r2, r3
 800abde:	d242      	bcs.n	800ac66 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3308      	adds	r3, #8
 800abe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	e853 3f00 	ldrex	r3, [r3]
 800abee:	61fb      	str	r3, [r7, #28]
   return(result);
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3308      	adds	r3, #8
 800ac00:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ac04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac0c:	e841 2300 	strex	r3, r2, [r1]
 800ac10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e3      	bne.n	800abe0 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a17      	ldr	r2, [pc, #92]	@ (800ac78 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ac1c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	e853 3f00 	ldrex	r3, [r3]
 800ac2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f043 0320 	orr.w	r3, r3, #32
 800ac32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ac40:	61bb      	str	r3, [r7, #24]
 800ac42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac44:	6979      	ldr	r1, [r7, #20]
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	e841 2300 	strex	r3, r2, [r1]
 800ac4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e4      	bne.n	800ac1e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac54:	e007      	b.n	800ac66 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	699a      	ldr	r2, [r3, #24]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f042 0208 	orr.w	r2, r2, #8
 800ac64:	619a      	str	r2, [r3, #24]
}
 800ac66:	bf00      	nop
 800ac68:	37b0      	adds	r7, #176	@ 0xb0
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	effffffe 	.word	0xeffffffe
 800ac74:	58000c00 	.word	0x58000c00
 800ac78:	0800a5a9 	.word	0x0800a5a9

0800ac7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b0ae      	sub	sp, #184	@ 0xb8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ac8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acb2:	2b22      	cmp	r3, #34	@ 0x22
 800acb4:	f040 8185 	bne.w	800afc2 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800acbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800acc2:	e128      	b.n	800af16 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acca:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800acd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800acda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800acde:	4013      	ands	r3, r2
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ace6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acec:	1c9a      	adds	r2, r3, #2
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	3b01      	subs	r3, #1
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ad0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d053      	beq.n	800adc2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d011      	beq.n	800ad4a <UART_RxISR_16BIT_FIFOEN+0xce>
 800ad26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00b      	beq.n	800ad4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2201      	movs	r2, #1
 800ad38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad40:	f043 0201 	orr.w	r2, r3, #1
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d011      	beq.n	800ad7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ad56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00b      	beq.n	800ad7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2202      	movs	r2, #2
 800ad68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad70:	f043 0204 	orr.w	r2, r3, #4
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad7e:	f003 0304 	and.w	r3, r3, #4
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d011      	beq.n	800adaa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ad86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00b      	beq.n	800adaa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2204      	movs	r2, #4
 800ad98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ada0:	f043 0202 	orr.w	r2, r3, #2
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d006      	beq.n	800adc2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7fe f9f5 	bl	80091a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adc8:	b29b      	uxth	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f040 80a3 	bne.w	800af16 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800adde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ade0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ade4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	461a      	mov	r2, r3
 800adee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800adf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800adfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e2      	bne.n	800add0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3308      	adds	r3, #8
 800ae10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae14:	e853 3f00 	ldrex	r3, [r3]
 800ae18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae1c:	4b6f      	ldr	r3, [pc, #444]	@ (800afdc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ae1e:	4013      	ands	r3, r2
 800ae20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3308      	adds	r3, #8
 800ae2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ae2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae36:	e841 2300 	strex	r3, r2, [r1]
 800ae3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1e3      	bne.n	800ae0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2220      	movs	r2, #32
 800ae46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a61      	ldr	r2, [pc, #388]	@ (800afe0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d021      	beq.n	800aea4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d01a      	beq.n	800aea4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae76:	e853 3f00 	ldrex	r3, [r3]
 800ae7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae90:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae98:	e841 2300 	strex	r3, r2, [r1]
 800ae9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1e4      	bne.n	800ae6e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d130      	bne.n	800af0e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeba:	e853 3f00 	ldrex	r3, [r3]
 800aebe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec2:	f023 0310 	bic.w	r3, r3, #16
 800aec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aed4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aed6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e4      	bne.n	800aeb2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	f003 0310 	and.w	r3, r3, #16
 800aef2:	2b10      	cmp	r3, #16
 800aef4:	d103      	bne.n	800aefe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2210      	movs	r2, #16
 800aefc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af04:	4619      	mov	r1, r3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7fe f956 	bl	80091b8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800af0c:	e00e      	b.n	800af2c <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f7f5 fcfa 	bl	8000908 <HAL_UART_RxCpltCallback>
        break;
 800af14:	e00a      	b.n	800af2c <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af16:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d006      	beq.n	800af2c <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800af1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af22:	f003 0320 	and.w	r3, r3, #32
 800af26:	2b00      	cmp	r3, #0
 800af28:	f47f aecc 	bne.w	800acc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af32:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800af36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d049      	beq.n	800afd2 <UART_RxISR_16BIT_FIFOEN+0x356>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af44:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800af48:	429a      	cmp	r2, r3
 800af4a:	d242      	bcs.n	800afd2 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	3308      	adds	r3, #8
 800af52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af56:	e853 3f00 	ldrex	r3, [r3]
 800af5a:	623b      	str	r3, [r7, #32]
   return(result);
 800af5c:	6a3b      	ldr	r3, [r7, #32]
 800af5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3308      	adds	r3, #8
 800af6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800af70:	633a      	str	r2, [r7, #48]	@ 0x30
 800af72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af78:	e841 2300 	strex	r3, r2, [r1]
 800af7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e3      	bne.n	800af4c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a17      	ldr	r2, [pc, #92]	@ (800afe4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800af88:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	e853 3f00 	ldrex	r3, [r3]
 800af96:	60fb      	str	r3, [r7, #12]
   return(result);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f043 0320 	orr.w	r3, r3, #32
 800af9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afac:	61fb      	str	r3, [r7, #28]
 800afae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	69b9      	ldr	r1, [r7, #24]
 800afb2:	69fa      	ldr	r2, [r7, #28]
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	617b      	str	r3, [r7, #20]
   return(result);
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1e4      	bne.n	800af8a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800afc0:	e007      	b.n	800afd2 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	699a      	ldr	r2, [r3, #24]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0208 	orr.w	r2, r2, #8
 800afd0:	619a      	str	r2, [r3, #24]
}
 800afd2:	bf00      	nop
 800afd4:	37b8      	adds	r7, #184	@ 0xb8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	effffffe 	.word	0xeffffffe
 800afe0:	58000c00 	.word	0x58000c00
 800afe4:	0800a761 	.word	0x0800a761

0800afe8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b032:	2b01      	cmp	r3, #1
 800b034:	d101      	bne.n	800b03a <HAL_UARTEx_DisableFifoMode+0x16>
 800b036:	2302      	movs	r3, #2
 800b038:	e027      	b.n	800b08a <HAL_UARTEx_DisableFifoMode+0x66>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2224      	movs	r2, #36	@ 0x24
 800b046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f022 0201 	bic.w	r2, r2, #1
 800b060:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b068:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2220      	movs	r2, #32
 800b07c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d101      	bne.n	800b0ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	e02d      	b.n	800b10a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2224      	movs	r2, #36	@ 0x24
 800b0ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 0201 	bic.w	r2, r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f850 	bl	800b190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2220      	movs	r2, #32
 800b0fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b122:	2b01      	cmp	r3, #1
 800b124:	d101      	bne.n	800b12a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b126:	2302      	movs	r3, #2
 800b128:	e02d      	b.n	800b186 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2224      	movs	r2, #36	@ 0x24
 800b136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f022 0201 	bic.w	r2, r2, #1
 800b150:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	683a      	ldr	r2, [r7, #0]
 800b162:	430a      	orrs	r2, r1
 800b164:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f812 	bl	800b190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2220      	movs	r2, #32
 800b178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d108      	bne.n	800b1b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1b0:	e031      	b.n	800b216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1b2:	2310      	movs	r3, #16
 800b1b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1b6:	2310      	movs	r3, #16
 800b1b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	0e5b      	lsrs	r3, r3, #25
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	f003 0307 	and.w	r3, r3, #7
 800b1c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	0f5b      	lsrs	r3, r3, #29
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	f003 0307 	and.w	r3, r3, #7
 800b1d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1da:	7bbb      	ldrb	r3, [r7, #14]
 800b1dc:	7b3a      	ldrb	r2, [r7, #12]
 800b1de:	4911      	ldr	r1, [pc, #68]	@ (800b224 <UARTEx_SetNbDataToProcess+0x94>)
 800b1e0:	5c8a      	ldrb	r2, [r1, r2]
 800b1e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1e6:	7b3a      	ldrb	r2, [r7, #12]
 800b1e8:	490f      	ldr	r1, [pc, #60]	@ (800b228 <UARTEx_SetNbDataToProcess+0x98>)
 800b1ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	7b7a      	ldrb	r2, [r7, #13]
 800b1fc:	4909      	ldr	r1, [pc, #36]	@ (800b224 <UARTEx_SetNbDataToProcess+0x94>)
 800b1fe:	5c8a      	ldrb	r2, [r1, r2]
 800b200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b204:	7b7a      	ldrb	r2, [r7, #13]
 800b206:	4908      	ldr	r1, [pc, #32]	@ (800b228 <UARTEx_SetNbDataToProcess+0x98>)
 800b208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b20a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b20e:	b29a      	uxth	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b216:	bf00      	nop
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	0800e6b0 	.word	0x0800e6b0
 800b228:	0800e6b8 	.word	0x0800e6b8

0800b22c <__cvt>:
 800b22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b22e:	ed2d 8b02 	vpush	{d8}
 800b232:	eeb0 8b40 	vmov.f64	d8, d0
 800b236:	b085      	sub	sp, #20
 800b238:	4617      	mov	r7, r2
 800b23a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b23c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b23e:	ee18 2a90 	vmov	r2, s17
 800b242:	f025 0520 	bic.w	r5, r5, #32
 800b246:	2a00      	cmp	r2, #0
 800b248:	bfb6      	itet	lt
 800b24a:	222d      	movlt	r2, #45	@ 0x2d
 800b24c:	2200      	movge	r2, #0
 800b24e:	eeb1 8b40 	vneglt.f64	d8, d0
 800b252:	2d46      	cmp	r5, #70	@ 0x46
 800b254:	460c      	mov	r4, r1
 800b256:	701a      	strb	r2, [r3, #0]
 800b258:	d004      	beq.n	800b264 <__cvt+0x38>
 800b25a:	2d45      	cmp	r5, #69	@ 0x45
 800b25c:	d100      	bne.n	800b260 <__cvt+0x34>
 800b25e:	3401      	adds	r4, #1
 800b260:	2102      	movs	r1, #2
 800b262:	e000      	b.n	800b266 <__cvt+0x3a>
 800b264:	2103      	movs	r1, #3
 800b266:	ab03      	add	r3, sp, #12
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	ab02      	add	r3, sp, #8
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	4622      	mov	r2, r4
 800b270:	4633      	mov	r3, r6
 800b272:	eeb0 0b48 	vmov.f64	d0, d8
 800b276:	f000 ff57 	bl	800c128 <_dtoa_r>
 800b27a:	2d47      	cmp	r5, #71	@ 0x47
 800b27c:	d114      	bne.n	800b2a8 <__cvt+0x7c>
 800b27e:	07fb      	lsls	r3, r7, #31
 800b280:	d50a      	bpl.n	800b298 <__cvt+0x6c>
 800b282:	1902      	adds	r2, r0, r4
 800b284:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28c:	bf08      	it	eq
 800b28e:	9203      	streq	r2, [sp, #12]
 800b290:	2130      	movs	r1, #48	@ 0x30
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	4293      	cmp	r3, r2
 800b296:	d319      	bcc.n	800b2cc <__cvt+0xa0>
 800b298:	9b03      	ldr	r3, [sp, #12]
 800b29a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b29c:	1a1b      	subs	r3, r3, r0
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	b005      	add	sp, #20
 800b2a2:	ecbd 8b02 	vpop	{d8}
 800b2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2a8:	2d46      	cmp	r5, #70	@ 0x46
 800b2aa:	eb00 0204 	add.w	r2, r0, r4
 800b2ae:	d1e9      	bne.n	800b284 <__cvt+0x58>
 800b2b0:	7803      	ldrb	r3, [r0, #0]
 800b2b2:	2b30      	cmp	r3, #48	@ 0x30
 800b2b4:	d107      	bne.n	800b2c6 <__cvt+0x9a>
 800b2b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2be:	bf1c      	itt	ne
 800b2c0:	f1c4 0401 	rsbne	r4, r4, #1
 800b2c4:	6034      	strne	r4, [r6, #0]
 800b2c6:	6833      	ldr	r3, [r6, #0]
 800b2c8:	441a      	add	r2, r3
 800b2ca:	e7db      	b.n	800b284 <__cvt+0x58>
 800b2cc:	1c5c      	adds	r4, r3, #1
 800b2ce:	9403      	str	r4, [sp, #12]
 800b2d0:	7019      	strb	r1, [r3, #0]
 800b2d2:	e7de      	b.n	800b292 <__cvt+0x66>

0800b2d4 <__exponent>:
 800b2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	bfba      	itte	lt
 800b2da:	4249      	neglt	r1, r1
 800b2dc:	232d      	movlt	r3, #45	@ 0x2d
 800b2de:	232b      	movge	r3, #43	@ 0x2b
 800b2e0:	2909      	cmp	r1, #9
 800b2e2:	7002      	strb	r2, [r0, #0]
 800b2e4:	7043      	strb	r3, [r0, #1]
 800b2e6:	dd29      	ble.n	800b33c <__exponent+0x68>
 800b2e8:	f10d 0307 	add.w	r3, sp, #7
 800b2ec:	461d      	mov	r5, r3
 800b2ee:	270a      	movs	r7, #10
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2f6:	fb07 1416 	mls	r4, r7, r6, r1
 800b2fa:	3430      	adds	r4, #48	@ 0x30
 800b2fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b300:	460c      	mov	r4, r1
 800b302:	2c63      	cmp	r4, #99	@ 0x63
 800b304:	f103 33ff 	add.w	r3, r3, #4294967295
 800b308:	4631      	mov	r1, r6
 800b30a:	dcf1      	bgt.n	800b2f0 <__exponent+0x1c>
 800b30c:	3130      	adds	r1, #48	@ 0x30
 800b30e:	1e94      	subs	r4, r2, #2
 800b310:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b314:	1c41      	adds	r1, r0, #1
 800b316:	4623      	mov	r3, r4
 800b318:	42ab      	cmp	r3, r5
 800b31a:	d30a      	bcc.n	800b332 <__exponent+0x5e>
 800b31c:	f10d 0309 	add.w	r3, sp, #9
 800b320:	1a9b      	subs	r3, r3, r2
 800b322:	42ac      	cmp	r4, r5
 800b324:	bf88      	it	hi
 800b326:	2300      	movhi	r3, #0
 800b328:	3302      	adds	r3, #2
 800b32a:	4403      	add	r3, r0
 800b32c:	1a18      	subs	r0, r3, r0
 800b32e:	b003      	add	sp, #12
 800b330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b332:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b336:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b33a:	e7ed      	b.n	800b318 <__exponent+0x44>
 800b33c:	2330      	movs	r3, #48	@ 0x30
 800b33e:	3130      	adds	r1, #48	@ 0x30
 800b340:	7083      	strb	r3, [r0, #2]
 800b342:	70c1      	strb	r1, [r0, #3]
 800b344:	1d03      	adds	r3, r0, #4
 800b346:	e7f1      	b.n	800b32c <__exponent+0x58>

0800b348 <_printf_float>:
 800b348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34c:	b08d      	sub	sp, #52	@ 0x34
 800b34e:	460c      	mov	r4, r1
 800b350:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b354:	4616      	mov	r6, r2
 800b356:	461f      	mov	r7, r3
 800b358:	4605      	mov	r5, r0
 800b35a:	f000 fdd7 	bl	800bf0c <_localeconv_r>
 800b35e:	f8d0 b000 	ldr.w	fp, [r0]
 800b362:	4658      	mov	r0, fp
 800b364:	f7f5 f834 	bl	80003d0 <strlen>
 800b368:	2300      	movs	r3, #0
 800b36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b36c:	f8d8 3000 	ldr.w	r3, [r8]
 800b370:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b374:	6822      	ldr	r2, [r4, #0]
 800b376:	9005      	str	r0, [sp, #20]
 800b378:	3307      	adds	r3, #7
 800b37a:	f023 0307 	bic.w	r3, r3, #7
 800b37e:	f103 0108 	add.w	r1, r3, #8
 800b382:	f8c8 1000 	str.w	r1, [r8]
 800b386:	ed93 0b00 	vldr	d0, [r3]
 800b38a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b5e8 <_printf_float+0x2a0>
 800b38e:	eeb0 7bc0 	vabs.f64	d7, d0
 800b392:	eeb4 7b46 	vcmp.f64	d7, d6
 800b396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b39e:	dd24      	ble.n	800b3ea <_printf_float+0xa2>
 800b3a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a8:	d502      	bpl.n	800b3b0 <_printf_float+0x68>
 800b3aa:	232d      	movs	r3, #45	@ 0x2d
 800b3ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3b0:	498f      	ldr	r1, [pc, #572]	@ (800b5f0 <_printf_float+0x2a8>)
 800b3b2:	4b90      	ldr	r3, [pc, #576]	@ (800b5f4 <_printf_float+0x2ac>)
 800b3b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b3b8:	bf8c      	ite	hi
 800b3ba:	4688      	movhi	r8, r1
 800b3bc:	4698      	movls	r8, r3
 800b3be:	f022 0204 	bic.w	r2, r2, #4
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	6123      	str	r3, [r4, #16]
 800b3c6:	6022      	str	r2, [r4, #0]
 800b3c8:	f04f 0a00 	mov.w	sl, #0
 800b3cc:	9700      	str	r7, [sp, #0]
 800b3ce:	4633      	mov	r3, r6
 800b3d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	f000 f9d1 	bl	800b77c <_printf_common>
 800b3da:	3001      	adds	r0, #1
 800b3dc:	f040 8089 	bne.w	800b4f2 <_printf_float+0x1aa>
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e4:	b00d      	add	sp, #52	@ 0x34
 800b3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ea:	eeb4 0b40 	vcmp.f64	d0, d0
 800b3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f2:	d709      	bvc.n	800b408 <_printf_float+0xc0>
 800b3f4:	ee10 3a90 	vmov	r3, s1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bfbc      	itt	lt
 800b3fc:	232d      	movlt	r3, #45	@ 0x2d
 800b3fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b402:	497d      	ldr	r1, [pc, #500]	@ (800b5f8 <_printf_float+0x2b0>)
 800b404:	4b7d      	ldr	r3, [pc, #500]	@ (800b5fc <_printf_float+0x2b4>)
 800b406:	e7d5      	b.n	800b3b4 <_printf_float+0x6c>
 800b408:	6863      	ldr	r3, [r4, #4]
 800b40a:	1c59      	adds	r1, r3, #1
 800b40c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b410:	d139      	bne.n	800b486 <_printf_float+0x13e>
 800b412:	2306      	movs	r3, #6
 800b414:	6063      	str	r3, [r4, #4]
 800b416:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b41a:	2300      	movs	r3, #0
 800b41c:	6022      	str	r2, [r4, #0]
 800b41e:	9303      	str	r3, [sp, #12]
 800b420:	ab0a      	add	r3, sp, #40	@ 0x28
 800b422:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b426:	ab09      	add	r3, sp, #36	@ 0x24
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	6861      	ldr	r1, [r4, #4]
 800b42c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b430:	4628      	mov	r0, r5
 800b432:	f7ff fefb 	bl	800b22c <__cvt>
 800b436:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b43a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b43c:	4680      	mov	r8, r0
 800b43e:	d129      	bne.n	800b494 <_printf_float+0x14c>
 800b440:	1cc8      	adds	r0, r1, #3
 800b442:	db02      	blt.n	800b44a <_printf_float+0x102>
 800b444:	6863      	ldr	r3, [r4, #4]
 800b446:	4299      	cmp	r1, r3
 800b448:	dd41      	ble.n	800b4ce <_printf_float+0x186>
 800b44a:	f1a9 0902 	sub.w	r9, r9, #2
 800b44e:	fa5f f989 	uxtb.w	r9, r9
 800b452:	3901      	subs	r1, #1
 800b454:	464a      	mov	r2, r9
 800b456:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b45a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b45c:	f7ff ff3a 	bl	800b2d4 <__exponent>
 800b460:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b462:	1813      	adds	r3, r2, r0
 800b464:	2a01      	cmp	r2, #1
 800b466:	4682      	mov	sl, r0
 800b468:	6123      	str	r3, [r4, #16]
 800b46a:	dc02      	bgt.n	800b472 <_printf_float+0x12a>
 800b46c:	6822      	ldr	r2, [r4, #0]
 800b46e:	07d2      	lsls	r2, r2, #31
 800b470:	d501      	bpl.n	800b476 <_printf_float+0x12e>
 800b472:	3301      	adds	r3, #1
 800b474:	6123      	str	r3, [r4, #16]
 800b476:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d0a6      	beq.n	800b3cc <_printf_float+0x84>
 800b47e:	232d      	movs	r3, #45	@ 0x2d
 800b480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b484:	e7a2      	b.n	800b3cc <_printf_float+0x84>
 800b486:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b48a:	d1c4      	bne.n	800b416 <_printf_float+0xce>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1c2      	bne.n	800b416 <_printf_float+0xce>
 800b490:	2301      	movs	r3, #1
 800b492:	e7bf      	b.n	800b414 <_printf_float+0xcc>
 800b494:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b498:	d9db      	bls.n	800b452 <_printf_float+0x10a>
 800b49a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b49e:	d118      	bne.n	800b4d2 <_printf_float+0x18a>
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	6863      	ldr	r3, [r4, #4]
 800b4a4:	dd0b      	ble.n	800b4be <_printf_float+0x176>
 800b4a6:	6121      	str	r1, [r4, #16]
 800b4a8:	b913      	cbnz	r3, 800b4b0 <_printf_float+0x168>
 800b4aa:	6822      	ldr	r2, [r4, #0]
 800b4ac:	07d0      	lsls	r0, r2, #31
 800b4ae:	d502      	bpl.n	800b4b6 <_printf_float+0x16e>
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	440b      	add	r3, r1
 800b4b4:	6123      	str	r3, [r4, #16]
 800b4b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b4b8:	f04f 0a00 	mov.w	sl, #0
 800b4bc:	e7db      	b.n	800b476 <_printf_float+0x12e>
 800b4be:	b913      	cbnz	r3, 800b4c6 <_printf_float+0x17e>
 800b4c0:	6822      	ldr	r2, [r4, #0]
 800b4c2:	07d2      	lsls	r2, r2, #31
 800b4c4:	d501      	bpl.n	800b4ca <_printf_float+0x182>
 800b4c6:	3302      	adds	r3, #2
 800b4c8:	e7f4      	b.n	800b4b4 <_printf_float+0x16c>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e7f2      	b.n	800b4b4 <_printf_float+0x16c>
 800b4ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b4d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	db05      	blt.n	800b4e4 <_printf_float+0x19c>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	6121      	str	r1, [r4, #16]
 800b4dc:	07d8      	lsls	r0, r3, #31
 800b4de:	d5ea      	bpl.n	800b4b6 <_printf_float+0x16e>
 800b4e0:	1c4b      	adds	r3, r1, #1
 800b4e2:	e7e7      	b.n	800b4b4 <_printf_float+0x16c>
 800b4e4:	2900      	cmp	r1, #0
 800b4e6:	bfd4      	ite	le
 800b4e8:	f1c1 0202 	rsble	r2, r1, #2
 800b4ec:	2201      	movgt	r2, #1
 800b4ee:	4413      	add	r3, r2
 800b4f0:	e7e0      	b.n	800b4b4 <_printf_float+0x16c>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	055a      	lsls	r2, r3, #21
 800b4f6:	d407      	bmi.n	800b508 <_printf_float+0x1c0>
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	4642      	mov	r2, r8
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	d12a      	bne.n	800b55c <_printf_float+0x214>
 800b506:	e76b      	b.n	800b3e0 <_printf_float+0x98>
 800b508:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b50c:	f240 80e0 	bls.w	800b6d0 <_printf_float+0x388>
 800b510:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b514:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b51c:	d133      	bne.n	800b586 <_printf_float+0x23e>
 800b51e:	4a38      	ldr	r2, [pc, #224]	@ (800b600 <_printf_float+0x2b8>)
 800b520:	2301      	movs	r3, #1
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	47b8      	blx	r7
 800b528:	3001      	adds	r0, #1
 800b52a:	f43f af59 	beq.w	800b3e0 <_printf_float+0x98>
 800b52e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b532:	4543      	cmp	r3, r8
 800b534:	db02      	blt.n	800b53c <_printf_float+0x1f4>
 800b536:	6823      	ldr	r3, [r4, #0]
 800b538:	07d8      	lsls	r0, r3, #31
 800b53a:	d50f      	bpl.n	800b55c <_printf_float+0x214>
 800b53c:	9b05      	ldr	r3, [sp, #20]
 800b53e:	465a      	mov	r2, fp
 800b540:	4631      	mov	r1, r6
 800b542:	4628      	mov	r0, r5
 800b544:	47b8      	blx	r7
 800b546:	3001      	adds	r0, #1
 800b548:	f43f af4a 	beq.w	800b3e0 <_printf_float+0x98>
 800b54c:	f04f 0900 	mov.w	r9, #0
 800b550:	f108 38ff 	add.w	r8, r8, #4294967295
 800b554:	f104 0a1a 	add.w	sl, r4, #26
 800b558:	45c8      	cmp	r8, r9
 800b55a:	dc09      	bgt.n	800b570 <_printf_float+0x228>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	079b      	lsls	r3, r3, #30
 800b560:	f100 8107 	bmi.w	800b772 <_printf_float+0x42a>
 800b564:	68e0      	ldr	r0, [r4, #12]
 800b566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b568:	4298      	cmp	r0, r3
 800b56a:	bfb8      	it	lt
 800b56c:	4618      	movlt	r0, r3
 800b56e:	e739      	b.n	800b3e4 <_printf_float+0x9c>
 800b570:	2301      	movs	r3, #1
 800b572:	4652      	mov	r2, sl
 800b574:	4631      	mov	r1, r6
 800b576:	4628      	mov	r0, r5
 800b578:	47b8      	blx	r7
 800b57a:	3001      	adds	r0, #1
 800b57c:	f43f af30 	beq.w	800b3e0 <_printf_float+0x98>
 800b580:	f109 0901 	add.w	r9, r9, #1
 800b584:	e7e8      	b.n	800b558 <_printf_float+0x210>
 800b586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dc3b      	bgt.n	800b604 <_printf_float+0x2bc>
 800b58c:	4a1c      	ldr	r2, [pc, #112]	@ (800b600 <_printf_float+0x2b8>)
 800b58e:	2301      	movs	r3, #1
 800b590:	4631      	mov	r1, r6
 800b592:	4628      	mov	r0, r5
 800b594:	47b8      	blx	r7
 800b596:	3001      	adds	r0, #1
 800b598:	f43f af22 	beq.w	800b3e0 <_printf_float+0x98>
 800b59c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b5a0:	ea59 0303 	orrs.w	r3, r9, r3
 800b5a4:	d102      	bne.n	800b5ac <_printf_float+0x264>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	07d9      	lsls	r1, r3, #31
 800b5aa:	d5d7      	bpl.n	800b55c <_printf_float+0x214>
 800b5ac:	9b05      	ldr	r3, [sp, #20]
 800b5ae:	465a      	mov	r2, fp
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	47b8      	blx	r7
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	f43f af12 	beq.w	800b3e0 <_printf_float+0x98>
 800b5bc:	f04f 0a00 	mov.w	sl, #0
 800b5c0:	f104 0b1a 	add.w	fp, r4, #26
 800b5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c6:	425b      	negs	r3, r3
 800b5c8:	4553      	cmp	r3, sl
 800b5ca:	dc01      	bgt.n	800b5d0 <_printf_float+0x288>
 800b5cc:	464b      	mov	r3, r9
 800b5ce:	e794      	b.n	800b4fa <_printf_float+0x1b2>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	465a      	mov	r2, fp
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	47b8      	blx	r7
 800b5da:	3001      	adds	r0, #1
 800b5dc:	f43f af00 	beq.w	800b3e0 <_printf_float+0x98>
 800b5e0:	f10a 0a01 	add.w	sl, sl, #1
 800b5e4:	e7ee      	b.n	800b5c4 <_printf_float+0x27c>
 800b5e6:	bf00      	nop
 800b5e8:	ffffffff 	.word	0xffffffff
 800b5ec:	7fefffff 	.word	0x7fefffff
 800b5f0:	0800e6c4 	.word	0x0800e6c4
 800b5f4:	0800e6c0 	.word	0x0800e6c0
 800b5f8:	0800e6cc 	.word	0x0800e6cc
 800b5fc:	0800e6c8 	.word	0x0800e6c8
 800b600:	0800e6d0 	.word	0x0800e6d0
 800b604:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b606:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b60a:	4553      	cmp	r3, sl
 800b60c:	bfa8      	it	ge
 800b60e:	4653      	movge	r3, sl
 800b610:	2b00      	cmp	r3, #0
 800b612:	4699      	mov	r9, r3
 800b614:	dc37      	bgt.n	800b686 <_printf_float+0x33e>
 800b616:	2300      	movs	r3, #0
 800b618:	9307      	str	r3, [sp, #28]
 800b61a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b61e:	f104 021a 	add.w	r2, r4, #26
 800b622:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b624:	9907      	ldr	r1, [sp, #28]
 800b626:	9306      	str	r3, [sp, #24]
 800b628:	eba3 0309 	sub.w	r3, r3, r9
 800b62c:	428b      	cmp	r3, r1
 800b62e:	dc31      	bgt.n	800b694 <_printf_float+0x34c>
 800b630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b632:	459a      	cmp	sl, r3
 800b634:	dc3b      	bgt.n	800b6ae <_printf_float+0x366>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	07da      	lsls	r2, r3, #31
 800b63a:	d438      	bmi.n	800b6ae <_printf_float+0x366>
 800b63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b63e:	ebaa 0903 	sub.w	r9, sl, r3
 800b642:	9b06      	ldr	r3, [sp, #24]
 800b644:	ebaa 0303 	sub.w	r3, sl, r3
 800b648:	4599      	cmp	r9, r3
 800b64a:	bfa8      	it	ge
 800b64c:	4699      	movge	r9, r3
 800b64e:	f1b9 0f00 	cmp.w	r9, #0
 800b652:	dc34      	bgt.n	800b6be <_printf_float+0x376>
 800b654:	f04f 0800 	mov.w	r8, #0
 800b658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b65c:	f104 0b1a 	add.w	fp, r4, #26
 800b660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b662:	ebaa 0303 	sub.w	r3, sl, r3
 800b666:	eba3 0309 	sub.w	r3, r3, r9
 800b66a:	4543      	cmp	r3, r8
 800b66c:	f77f af76 	ble.w	800b55c <_printf_float+0x214>
 800b670:	2301      	movs	r3, #1
 800b672:	465a      	mov	r2, fp
 800b674:	4631      	mov	r1, r6
 800b676:	4628      	mov	r0, r5
 800b678:	47b8      	blx	r7
 800b67a:	3001      	adds	r0, #1
 800b67c:	f43f aeb0 	beq.w	800b3e0 <_printf_float+0x98>
 800b680:	f108 0801 	add.w	r8, r8, #1
 800b684:	e7ec      	b.n	800b660 <_printf_float+0x318>
 800b686:	4642      	mov	r2, r8
 800b688:	4631      	mov	r1, r6
 800b68a:	4628      	mov	r0, r5
 800b68c:	47b8      	blx	r7
 800b68e:	3001      	adds	r0, #1
 800b690:	d1c1      	bne.n	800b616 <_printf_float+0x2ce>
 800b692:	e6a5      	b.n	800b3e0 <_printf_float+0x98>
 800b694:	2301      	movs	r3, #1
 800b696:	4631      	mov	r1, r6
 800b698:	4628      	mov	r0, r5
 800b69a:	9206      	str	r2, [sp, #24]
 800b69c:	47b8      	blx	r7
 800b69e:	3001      	adds	r0, #1
 800b6a0:	f43f ae9e 	beq.w	800b3e0 <_printf_float+0x98>
 800b6a4:	9b07      	ldr	r3, [sp, #28]
 800b6a6:	9a06      	ldr	r2, [sp, #24]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	9307      	str	r3, [sp, #28]
 800b6ac:	e7b9      	b.n	800b622 <_printf_float+0x2da>
 800b6ae:	9b05      	ldr	r3, [sp, #20]
 800b6b0:	465a      	mov	r2, fp
 800b6b2:	4631      	mov	r1, r6
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	47b8      	blx	r7
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d1bf      	bne.n	800b63c <_printf_float+0x2f4>
 800b6bc:	e690      	b.n	800b3e0 <_printf_float+0x98>
 800b6be:	9a06      	ldr	r2, [sp, #24]
 800b6c0:	464b      	mov	r3, r9
 800b6c2:	4442      	add	r2, r8
 800b6c4:	4631      	mov	r1, r6
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	47b8      	blx	r7
 800b6ca:	3001      	adds	r0, #1
 800b6cc:	d1c2      	bne.n	800b654 <_printf_float+0x30c>
 800b6ce:	e687      	b.n	800b3e0 <_printf_float+0x98>
 800b6d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b6d4:	f1b9 0f01 	cmp.w	r9, #1
 800b6d8:	dc01      	bgt.n	800b6de <_printf_float+0x396>
 800b6da:	07db      	lsls	r3, r3, #31
 800b6dc:	d536      	bpl.n	800b74c <_printf_float+0x404>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	47b8      	blx	r7
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	f43f ae79 	beq.w	800b3e0 <_printf_float+0x98>
 800b6ee:	9b05      	ldr	r3, [sp, #20]
 800b6f0:	465a      	mov	r2, fp
 800b6f2:	4631      	mov	r1, r6
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	47b8      	blx	r7
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	f43f ae71 	beq.w	800b3e0 <_printf_float+0x98>
 800b6fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b702:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b70e:	d018      	beq.n	800b742 <_printf_float+0x3fa>
 800b710:	464b      	mov	r3, r9
 800b712:	f108 0201 	add.w	r2, r8, #1
 800b716:	4631      	mov	r1, r6
 800b718:	4628      	mov	r0, r5
 800b71a:	47b8      	blx	r7
 800b71c:	3001      	adds	r0, #1
 800b71e:	d10c      	bne.n	800b73a <_printf_float+0x3f2>
 800b720:	e65e      	b.n	800b3e0 <_printf_float+0x98>
 800b722:	2301      	movs	r3, #1
 800b724:	465a      	mov	r2, fp
 800b726:	4631      	mov	r1, r6
 800b728:	4628      	mov	r0, r5
 800b72a:	47b8      	blx	r7
 800b72c:	3001      	adds	r0, #1
 800b72e:	f43f ae57 	beq.w	800b3e0 <_printf_float+0x98>
 800b732:	f108 0801 	add.w	r8, r8, #1
 800b736:	45c8      	cmp	r8, r9
 800b738:	dbf3      	blt.n	800b722 <_printf_float+0x3da>
 800b73a:	4653      	mov	r3, sl
 800b73c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b740:	e6dc      	b.n	800b4fc <_printf_float+0x1b4>
 800b742:	f04f 0800 	mov.w	r8, #0
 800b746:	f104 0b1a 	add.w	fp, r4, #26
 800b74a:	e7f4      	b.n	800b736 <_printf_float+0x3ee>
 800b74c:	2301      	movs	r3, #1
 800b74e:	4642      	mov	r2, r8
 800b750:	e7e1      	b.n	800b716 <_printf_float+0x3ce>
 800b752:	2301      	movs	r3, #1
 800b754:	464a      	mov	r2, r9
 800b756:	4631      	mov	r1, r6
 800b758:	4628      	mov	r0, r5
 800b75a:	47b8      	blx	r7
 800b75c:	3001      	adds	r0, #1
 800b75e:	f43f ae3f 	beq.w	800b3e0 <_printf_float+0x98>
 800b762:	f108 0801 	add.w	r8, r8, #1
 800b766:	68e3      	ldr	r3, [r4, #12]
 800b768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b76a:	1a5b      	subs	r3, r3, r1
 800b76c:	4543      	cmp	r3, r8
 800b76e:	dcf0      	bgt.n	800b752 <_printf_float+0x40a>
 800b770:	e6f8      	b.n	800b564 <_printf_float+0x21c>
 800b772:	f04f 0800 	mov.w	r8, #0
 800b776:	f104 0919 	add.w	r9, r4, #25
 800b77a:	e7f4      	b.n	800b766 <_printf_float+0x41e>

0800b77c <_printf_common>:
 800b77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	4616      	mov	r6, r2
 800b782:	4698      	mov	r8, r3
 800b784:	688a      	ldr	r2, [r1, #8]
 800b786:	690b      	ldr	r3, [r1, #16]
 800b788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b78c:	4293      	cmp	r3, r2
 800b78e:	bfb8      	it	lt
 800b790:	4613      	movlt	r3, r2
 800b792:	6033      	str	r3, [r6, #0]
 800b794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b798:	4607      	mov	r7, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	b10a      	cbz	r2, 800b7a2 <_printf_common+0x26>
 800b79e:	3301      	adds	r3, #1
 800b7a0:	6033      	str	r3, [r6, #0]
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	0699      	lsls	r1, r3, #26
 800b7a6:	bf42      	ittt	mi
 800b7a8:	6833      	ldrmi	r3, [r6, #0]
 800b7aa:	3302      	addmi	r3, #2
 800b7ac:	6033      	strmi	r3, [r6, #0]
 800b7ae:	6825      	ldr	r5, [r4, #0]
 800b7b0:	f015 0506 	ands.w	r5, r5, #6
 800b7b4:	d106      	bne.n	800b7c4 <_printf_common+0x48>
 800b7b6:	f104 0a19 	add.w	sl, r4, #25
 800b7ba:	68e3      	ldr	r3, [r4, #12]
 800b7bc:	6832      	ldr	r2, [r6, #0]
 800b7be:	1a9b      	subs	r3, r3, r2
 800b7c0:	42ab      	cmp	r3, r5
 800b7c2:	dc26      	bgt.n	800b812 <_printf_common+0x96>
 800b7c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7c8:	6822      	ldr	r2, [r4, #0]
 800b7ca:	3b00      	subs	r3, #0
 800b7cc:	bf18      	it	ne
 800b7ce:	2301      	movne	r3, #1
 800b7d0:	0692      	lsls	r2, r2, #26
 800b7d2:	d42b      	bmi.n	800b82c <_printf_common+0xb0>
 800b7d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7d8:	4641      	mov	r1, r8
 800b7da:	4638      	mov	r0, r7
 800b7dc:	47c8      	blx	r9
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d01e      	beq.n	800b820 <_printf_common+0xa4>
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	6922      	ldr	r2, [r4, #16]
 800b7e6:	f003 0306 	and.w	r3, r3, #6
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	bf02      	ittt	eq
 800b7ee:	68e5      	ldreq	r5, [r4, #12]
 800b7f0:	6833      	ldreq	r3, [r6, #0]
 800b7f2:	1aed      	subeq	r5, r5, r3
 800b7f4:	68a3      	ldr	r3, [r4, #8]
 800b7f6:	bf0c      	ite	eq
 800b7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7fc:	2500      	movne	r5, #0
 800b7fe:	4293      	cmp	r3, r2
 800b800:	bfc4      	itt	gt
 800b802:	1a9b      	subgt	r3, r3, r2
 800b804:	18ed      	addgt	r5, r5, r3
 800b806:	2600      	movs	r6, #0
 800b808:	341a      	adds	r4, #26
 800b80a:	42b5      	cmp	r5, r6
 800b80c:	d11a      	bne.n	800b844 <_printf_common+0xc8>
 800b80e:	2000      	movs	r0, #0
 800b810:	e008      	b.n	800b824 <_printf_common+0xa8>
 800b812:	2301      	movs	r3, #1
 800b814:	4652      	mov	r2, sl
 800b816:	4641      	mov	r1, r8
 800b818:	4638      	mov	r0, r7
 800b81a:	47c8      	blx	r9
 800b81c:	3001      	adds	r0, #1
 800b81e:	d103      	bne.n	800b828 <_printf_common+0xac>
 800b820:	f04f 30ff 	mov.w	r0, #4294967295
 800b824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b828:	3501      	adds	r5, #1
 800b82a:	e7c6      	b.n	800b7ba <_printf_common+0x3e>
 800b82c:	18e1      	adds	r1, r4, r3
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	2030      	movs	r0, #48	@ 0x30
 800b832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b836:	4422      	add	r2, r4
 800b838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b83c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b840:	3302      	adds	r3, #2
 800b842:	e7c7      	b.n	800b7d4 <_printf_common+0x58>
 800b844:	2301      	movs	r3, #1
 800b846:	4622      	mov	r2, r4
 800b848:	4641      	mov	r1, r8
 800b84a:	4638      	mov	r0, r7
 800b84c:	47c8      	blx	r9
 800b84e:	3001      	adds	r0, #1
 800b850:	d0e6      	beq.n	800b820 <_printf_common+0xa4>
 800b852:	3601      	adds	r6, #1
 800b854:	e7d9      	b.n	800b80a <_printf_common+0x8e>
	...

0800b858 <_printf_i>:
 800b858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	7e0f      	ldrb	r7, [r1, #24]
 800b85e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b860:	2f78      	cmp	r7, #120	@ 0x78
 800b862:	4691      	mov	r9, r2
 800b864:	4680      	mov	r8, r0
 800b866:	460c      	mov	r4, r1
 800b868:	469a      	mov	sl, r3
 800b86a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b86e:	d807      	bhi.n	800b880 <_printf_i+0x28>
 800b870:	2f62      	cmp	r7, #98	@ 0x62
 800b872:	d80a      	bhi.n	800b88a <_printf_i+0x32>
 800b874:	2f00      	cmp	r7, #0
 800b876:	f000 80d1 	beq.w	800ba1c <_printf_i+0x1c4>
 800b87a:	2f58      	cmp	r7, #88	@ 0x58
 800b87c:	f000 80b8 	beq.w	800b9f0 <_printf_i+0x198>
 800b880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b888:	e03a      	b.n	800b900 <_printf_i+0xa8>
 800b88a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b88e:	2b15      	cmp	r3, #21
 800b890:	d8f6      	bhi.n	800b880 <_printf_i+0x28>
 800b892:	a101      	add	r1, pc, #4	@ (adr r1, 800b898 <_printf_i+0x40>)
 800b894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b898:	0800b8f1 	.word	0x0800b8f1
 800b89c:	0800b905 	.word	0x0800b905
 800b8a0:	0800b881 	.word	0x0800b881
 800b8a4:	0800b881 	.word	0x0800b881
 800b8a8:	0800b881 	.word	0x0800b881
 800b8ac:	0800b881 	.word	0x0800b881
 800b8b0:	0800b905 	.word	0x0800b905
 800b8b4:	0800b881 	.word	0x0800b881
 800b8b8:	0800b881 	.word	0x0800b881
 800b8bc:	0800b881 	.word	0x0800b881
 800b8c0:	0800b881 	.word	0x0800b881
 800b8c4:	0800ba03 	.word	0x0800ba03
 800b8c8:	0800b92f 	.word	0x0800b92f
 800b8cc:	0800b9bd 	.word	0x0800b9bd
 800b8d0:	0800b881 	.word	0x0800b881
 800b8d4:	0800b881 	.word	0x0800b881
 800b8d8:	0800ba25 	.word	0x0800ba25
 800b8dc:	0800b881 	.word	0x0800b881
 800b8e0:	0800b92f 	.word	0x0800b92f
 800b8e4:	0800b881 	.word	0x0800b881
 800b8e8:	0800b881 	.word	0x0800b881
 800b8ec:	0800b9c5 	.word	0x0800b9c5
 800b8f0:	6833      	ldr	r3, [r6, #0]
 800b8f2:	1d1a      	adds	r2, r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6032      	str	r2, [r6, #0]
 800b8f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b900:	2301      	movs	r3, #1
 800b902:	e09c      	b.n	800ba3e <_printf_i+0x1e6>
 800b904:	6833      	ldr	r3, [r6, #0]
 800b906:	6820      	ldr	r0, [r4, #0]
 800b908:	1d19      	adds	r1, r3, #4
 800b90a:	6031      	str	r1, [r6, #0]
 800b90c:	0606      	lsls	r6, r0, #24
 800b90e:	d501      	bpl.n	800b914 <_printf_i+0xbc>
 800b910:	681d      	ldr	r5, [r3, #0]
 800b912:	e003      	b.n	800b91c <_printf_i+0xc4>
 800b914:	0645      	lsls	r5, r0, #25
 800b916:	d5fb      	bpl.n	800b910 <_printf_i+0xb8>
 800b918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b91c:	2d00      	cmp	r5, #0
 800b91e:	da03      	bge.n	800b928 <_printf_i+0xd0>
 800b920:	232d      	movs	r3, #45	@ 0x2d
 800b922:	426d      	negs	r5, r5
 800b924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b928:	4858      	ldr	r0, [pc, #352]	@ (800ba8c <_printf_i+0x234>)
 800b92a:	230a      	movs	r3, #10
 800b92c:	e011      	b.n	800b952 <_printf_i+0xfa>
 800b92e:	6821      	ldr	r1, [r4, #0]
 800b930:	6833      	ldr	r3, [r6, #0]
 800b932:	0608      	lsls	r0, r1, #24
 800b934:	f853 5b04 	ldr.w	r5, [r3], #4
 800b938:	d402      	bmi.n	800b940 <_printf_i+0xe8>
 800b93a:	0649      	lsls	r1, r1, #25
 800b93c:	bf48      	it	mi
 800b93e:	b2ad      	uxthmi	r5, r5
 800b940:	2f6f      	cmp	r7, #111	@ 0x6f
 800b942:	4852      	ldr	r0, [pc, #328]	@ (800ba8c <_printf_i+0x234>)
 800b944:	6033      	str	r3, [r6, #0]
 800b946:	bf14      	ite	ne
 800b948:	230a      	movne	r3, #10
 800b94a:	2308      	moveq	r3, #8
 800b94c:	2100      	movs	r1, #0
 800b94e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b952:	6866      	ldr	r6, [r4, #4]
 800b954:	60a6      	str	r6, [r4, #8]
 800b956:	2e00      	cmp	r6, #0
 800b958:	db05      	blt.n	800b966 <_printf_i+0x10e>
 800b95a:	6821      	ldr	r1, [r4, #0]
 800b95c:	432e      	orrs	r6, r5
 800b95e:	f021 0104 	bic.w	r1, r1, #4
 800b962:	6021      	str	r1, [r4, #0]
 800b964:	d04b      	beq.n	800b9fe <_printf_i+0x1a6>
 800b966:	4616      	mov	r6, r2
 800b968:	fbb5 f1f3 	udiv	r1, r5, r3
 800b96c:	fb03 5711 	mls	r7, r3, r1, r5
 800b970:	5dc7      	ldrb	r7, [r0, r7]
 800b972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b976:	462f      	mov	r7, r5
 800b978:	42bb      	cmp	r3, r7
 800b97a:	460d      	mov	r5, r1
 800b97c:	d9f4      	bls.n	800b968 <_printf_i+0x110>
 800b97e:	2b08      	cmp	r3, #8
 800b980:	d10b      	bne.n	800b99a <_printf_i+0x142>
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	07df      	lsls	r7, r3, #31
 800b986:	d508      	bpl.n	800b99a <_printf_i+0x142>
 800b988:	6923      	ldr	r3, [r4, #16]
 800b98a:	6861      	ldr	r1, [r4, #4]
 800b98c:	4299      	cmp	r1, r3
 800b98e:	bfde      	ittt	le
 800b990:	2330      	movle	r3, #48	@ 0x30
 800b992:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b996:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b99a:	1b92      	subs	r2, r2, r6
 800b99c:	6122      	str	r2, [r4, #16]
 800b99e:	f8cd a000 	str.w	sl, [sp]
 800b9a2:	464b      	mov	r3, r9
 800b9a4:	aa03      	add	r2, sp, #12
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	f7ff fee7 	bl	800b77c <_printf_common>
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	d14a      	bne.n	800ba48 <_printf_i+0x1f0>
 800b9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b6:	b004      	add	sp, #16
 800b9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	f043 0320 	orr.w	r3, r3, #32
 800b9c2:	6023      	str	r3, [r4, #0]
 800b9c4:	4832      	ldr	r0, [pc, #200]	@ (800ba90 <_printf_i+0x238>)
 800b9c6:	2778      	movs	r7, #120	@ 0x78
 800b9c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	6831      	ldr	r1, [r6, #0]
 800b9d0:	061f      	lsls	r7, r3, #24
 800b9d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9d6:	d402      	bmi.n	800b9de <_printf_i+0x186>
 800b9d8:	065f      	lsls	r7, r3, #25
 800b9da:	bf48      	it	mi
 800b9dc:	b2ad      	uxthmi	r5, r5
 800b9de:	6031      	str	r1, [r6, #0]
 800b9e0:	07d9      	lsls	r1, r3, #31
 800b9e2:	bf44      	itt	mi
 800b9e4:	f043 0320 	orrmi.w	r3, r3, #32
 800b9e8:	6023      	strmi	r3, [r4, #0]
 800b9ea:	b11d      	cbz	r5, 800b9f4 <_printf_i+0x19c>
 800b9ec:	2310      	movs	r3, #16
 800b9ee:	e7ad      	b.n	800b94c <_printf_i+0xf4>
 800b9f0:	4826      	ldr	r0, [pc, #152]	@ (800ba8c <_printf_i+0x234>)
 800b9f2:	e7e9      	b.n	800b9c8 <_printf_i+0x170>
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	f023 0320 	bic.w	r3, r3, #32
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	e7f6      	b.n	800b9ec <_printf_i+0x194>
 800b9fe:	4616      	mov	r6, r2
 800ba00:	e7bd      	b.n	800b97e <_printf_i+0x126>
 800ba02:	6833      	ldr	r3, [r6, #0]
 800ba04:	6825      	ldr	r5, [r4, #0]
 800ba06:	6961      	ldr	r1, [r4, #20]
 800ba08:	1d18      	adds	r0, r3, #4
 800ba0a:	6030      	str	r0, [r6, #0]
 800ba0c:	062e      	lsls	r6, r5, #24
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	d501      	bpl.n	800ba16 <_printf_i+0x1be>
 800ba12:	6019      	str	r1, [r3, #0]
 800ba14:	e002      	b.n	800ba1c <_printf_i+0x1c4>
 800ba16:	0668      	lsls	r0, r5, #25
 800ba18:	d5fb      	bpl.n	800ba12 <_printf_i+0x1ba>
 800ba1a:	8019      	strh	r1, [r3, #0]
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	4616      	mov	r6, r2
 800ba22:	e7bc      	b.n	800b99e <_printf_i+0x146>
 800ba24:	6833      	ldr	r3, [r6, #0]
 800ba26:	1d1a      	adds	r2, r3, #4
 800ba28:	6032      	str	r2, [r6, #0]
 800ba2a:	681e      	ldr	r6, [r3, #0]
 800ba2c:	6862      	ldr	r2, [r4, #4]
 800ba2e:	2100      	movs	r1, #0
 800ba30:	4630      	mov	r0, r6
 800ba32:	f7f4 fc7d 	bl	8000330 <memchr>
 800ba36:	b108      	cbz	r0, 800ba3c <_printf_i+0x1e4>
 800ba38:	1b80      	subs	r0, r0, r6
 800ba3a:	6060      	str	r0, [r4, #4]
 800ba3c:	6863      	ldr	r3, [r4, #4]
 800ba3e:	6123      	str	r3, [r4, #16]
 800ba40:	2300      	movs	r3, #0
 800ba42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba46:	e7aa      	b.n	800b99e <_printf_i+0x146>
 800ba48:	6923      	ldr	r3, [r4, #16]
 800ba4a:	4632      	mov	r2, r6
 800ba4c:	4649      	mov	r1, r9
 800ba4e:	4640      	mov	r0, r8
 800ba50:	47d0      	blx	sl
 800ba52:	3001      	adds	r0, #1
 800ba54:	d0ad      	beq.n	800b9b2 <_printf_i+0x15a>
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	079b      	lsls	r3, r3, #30
 800ba5a:	d413      	bmi.n	800ba84 <_printf_i+0x22c>
 800ba5c:	68e0      	ldr	r0, [r4, #12]
 800ba5e:	9b03      	ldr	r3, [sp, #12]
 800ba60:	4298      	cmp	r0, r3
 800ba62:	bfb8      	it	lt
 800ba64:	4618      	movlt	r0, r3
 800ba66:	e7a6      	b.n	800b9b6 <_printf_i+0x15e>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	4632      	mov	r2, r6
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	4640      	mov	r0, r8
 800ba70:	47d0      	blx	sl
 800ba72:	3001      	adds	r0, #1
 800ba74:	d09d      	beq.n	800b9b2 <_printf_i+0x15a>
 800ba76:	3501      	adds	r5, #1
 800ba78:	68e3      	ldr	r3, [r4, #12]
 800ba7a:	9903      	ldr	r1, [sp, #12]
 800ba7c:	1a5b      	subs	r3, r3, r1
 800ba7e:	42ab      	cmp	r3, r5
 800ba80:	dcf2      	bgt.n	800ba68 <_printf_i+0x210>
 800ba82:	e7eb      	b.n	800ba5c <_printf_i+0x204>
 800ba84:	2500      	movs	r5, #0
 800ba86:	f104 0619 	add.w	r6, r4, #25
 800ba8a:	e7f5      	b.n	800ba78 <_printf_i+0x220>
 800ba8c:	0800e6d2 	.word	0x0800e6d2
 800ba90:	0800e6e3 	.word	0x0800e6e3

0800ba94 <std>:
 800ba94:	2300      	movs	r3, #0
 800ba96:	b510      	push	{r4, lr}
 800ba98:	4604      	mov	r4, r0
 800ba9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baa2:	6083      	str	r3, [r0, #8]
 800baa4:	8181      	strh	r1, [r0, #12]
 800baa6:	6643      	str	r3, [r0, #100]	@ 0x64
 800baa8:	81c2      	strh	r2, [r0, #14]
 800baaa:	6183      	str	r3, [r0, #24]
 800baac:	4619      	mov	r1, r3
 800baae:	2208      	movs	r2, #8
 800bab0:	305c      	adds	r0, #92	@ 0x5c
 800bab2:	f000 fa23 	bl	800befc <memset>
 800bab6:	4b0d      	ldr	r3, [pc, #52]	@ (800baec <std+0x58>)
 800bab8:	6263      	str	r3, [r4, #36]	@ 0x24
 800baba:	4b0d      	ldr	r3, [pc, #52]	@ (800baf0 <std+0x5c>)
 800babc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800babe:	4b0d      	ldr	r3, [pc, #52]	@ (800baf4 <std+0x60>)
 800bac0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bac2:	4b0d      	ldr	r3, [pc, #52]	@ (800baf8 <std+0x64>)
 800bac4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bac6:	4b0d      	ldr	r3, [pc, #52]	@ (800bafc <std+0x68>)
 800bac8:	6224      	str	r4, [r4, #32]
 800baca:	429c      	cmp	r4, r3
 800bacc:	d006      	beq.n	800badc <std+0x48>
 800bace:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bad2:	4294      	cmp	r4, r2
 800bad4:	d002      	beq.n	800badc <std+0x48>
 800bad6:	33d0      	adds	r3, #208	@ 0xd0
 800bad8:	429c      	cmp	r4, r3
 800bada:	d105      	bne.n	800bae8 <std+0x54>
 800badc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae4:	f000 ba86 	b.w	800bff4 <__retarget_lock_init_recursive>
 800bae8:	bd10      	pop	{r4, pc}
 800baea:	bf00      	nop
 800baec:	0800bd4d 	.word	0x0800bd4d
 800baf0:	0800bd6f 	.word	0x0800bd6f
 800baf4:	0800bda7 	.word	0x0800bda7
 800baf8:	0800bdcb 	.word	0x0800bdcb
 800bafc:	24000998 	.word	0x24000998

0800bb00 <stdio_exit_handler>:
 800bb00:	4a02      	ldr	r2, [pc, #8]	@ (800bb0c <stdio_exit_handler+0xc>)
 800bb02:	4903      	ldr	r1, [pc, #12]	@ (800bb10 <stdio_exit_handler+0x10>)
 800bb04:	4803      	ldr	r0, [pc, #12]	@ (800bb14 <stdio_exit_handler+0x14>)
 800bb06:	f000 b869 	b.w	800bbdc <_fwalk_sglue>
 800bb0a:	bf00      	nop
 800bb0c:	24000030 	.word	0x24000030
 800bb10:	0800db15 	.word	0x0800db15
 800bb14:	24000040 	.word	0x24000040

0800bb18 <cleanup_stdio>:
 800bb18:	6841      	ldr	r1, [r0, #4]
 800bb1a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb4c <cleanup_stdio+0x34>)
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	b510      	push	{r4, lr}
 800bb20:	4604      	mov	r4, r0
 800bb22:	d001      	beq.n	800bb28 <cleanup_stdio+0x10>
 800bb24:	f001 fff6 	bl	800db14 <_fflush_r>
 800bb28:	68a1      	ldr	r1, [r4, #8]
 800bb2a:	4b09      	ldr	r3, [pc, #36]	@ (800bb50 <cleanup_stdio+0x38>)
 800bb2c:	4299      	cmp	r1, r3
 800bb2e:	d002      	beq.n	800bb36 <cleanup_stdio+0x1e>
 800bb30:	4620      	mov	r0, r4
 800bb32:	f001 ffef 	bl	800db14 <_fflush_r>
 800bb36:	68e1      	ldr	r1, [r4, #12]
 800bb38:	4b06      	ldr	r3, [pc, #24]	@ (800bb54 <cleanup_stdio+0x3c>)
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	d004      	beq.n	800bb48 <cleanup_stdio+0x30>
 800bb3e:	4620      	mov	r0, r4
 800bb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb44:	f001 bfe6 	b.w	800db14 <_fflush_r>
 800bb48:	bd10      	pop	{r4, pc}
 800bb4a:	bf00      	nop
 800bb4c:	24000998 	.word	0x24000998
 800bb50:	24000a00 	.word	0x24000a00
 800bb54:	24000a68 	.word	0x24000a68

0800bb58 <global_stdio_init.part.0>:
 800bb58:	b510      	push	{r4, lr}
 800bb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb88 <global_stdio_init.part.0+0x30>)
 800bb5c:	4c0b      	ldr	r4, [pc, #44]	@ (800bb8c <global_stdio_init.part.0+0x34>)
 800bb5e:	4a0c      	ldr	r2, [pc, #48]	@ (800bb90 <global_stdio_init.part.0+0x38>)
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	4620      	mov	r0, r4
 800bb64:	2200      	movs	r2, #0
 800bb66:	2104      	movs	r1, #4
 800bb68:	f7ff ff94 	bl	800ba94 <std>
 800bb6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb70:	2201      	movs	r2, #1
 800bb72:	2109      	movs	r1, #9
 800bb74:	f7ff ff8e 	bl	800ba94 <std>
 800bb78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb82:	2112      	movs	r1, #18
 800bb84:	f7ff bf86 	b.w	800ba94 <std>
 800bb88:	24000ad0 	.word	0x24000ad0
 800bb8c:	24000998 	.word	0x24000998
 800bb90:	0800bb01 	.word	0x0800bb01

0800bb94 <__sfp_lock_acquire>:
 800bb94:	4801      	ldr	r0, [pc, #4]	@ (800bb9c <__sfp_lock_acquire+0x8>)
 800bb96:	f000 ba2e 	b.w	800bff6 <__retarget_lock_acquire_recursive>
 800bb9a:	bf00      	nop
 800bb9c:	24000ad9 	.word	0x24000ad9

0800bba0 <__sfp_lock_release>:
 800bba0:	4801      	ldr	r0, [pc, #4]	@ (800bba8 <__sfp_lock_release+0x8>)
 800bba2:	f000 ba29 	b.w	800bff8 <__retarget_lock_release_recursive>
 800bba6:	bf00      	nop
 800bba8:	24000ad9 	.word	0x24000ad9

0800bbac <__sinit>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	4604      	mov	r4, r0
 800bbb0:	f7ff fff0 	bl	800bb94 <__sfp_lock_acquire>
 800bbb4:	6a23      	ldr	r3, [r4, #32]
 800bbb6:	b11b      	cbz	r3, 800bbc0 <__sinit+0x14>
 800bbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbbc:	f7ff bff0 	b.w	800bba0 <__sfp_lock_release>
 800bbc0:	4b04      	ldr	r3, [pc, #16]	@ (800bbd4 <__sinit+0x28>)
 800bbc2:	6223      	str	r3, [r4, #32]
 800bbc4:	4b04      	ldr	r3, [pc, #16]	@ (800bbd8 <__sinit+0x2c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1f5      	bne.n	800bbb8 <__sinit+0xc>
 800bbcc:	f7ff ffc4 	bl	800bb58 <global_stdio_init.part.0>
 800bbd0:	e7f2      	b.n	800bbb8 <__sinit+0xc>
 800bbd2:	bf00      	nop
 800bbd4:	0800bb19 	.word	0x0800bb19
 800bbd8:	24000ad0 	.word	0x24000ad0

0800bbdc <_fwalk_sglue>:
 800bbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe0:	4607      	mov	r7, r0
 800bbe2:	4688      	mov	r8, r1
 800bbe4:	4614      	mov	r4, r2
 800bbe6:	2600      	movs	r6, #0
 800bbe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbec:	f1b9 0901 	subs.w	r9, r9, #1
 800bbf0:	d505      	bpl.n	800bbfe <_fwalk_sglue+0x22>
 800bbf2:	6824      	ldr	r4, [r4, #0]
 800bbf4:	2c00      	cmp	r4, #0
 800bbf6:	d1f7      	bne.n	800bbe8 <_fwalk_sglue+0xc>
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfe:	89ab      	ldrh	r3, [r5, #12]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d907      	bls.n	800bc14 <_fwalk_sglue+0x38>
 800bc04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	d003      	beq.n	800bc14 <_fwalk_sglue+0x38>
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	4638      	mov	r0, r7
 800bc10:	47c0      	blx	r8
 800bc12:	4306      	orrs	r6, r0
 800bc14:	3568      	adds	r5, #104	@ 0x68
 800bc16:	e7e9      	b.n	800bbec <_fwalk_sglue+0x10>

0800bc18 <iprintf>:
 800bc18:	b40f      	push	{r0, r1, r2, r3}
 800bc1a:	b507      	push	{r0, r1, r2, lr}
 800bc1c:	4906      	ldr	r1, [pc, #24]	@ (800bc38 <iprintf+0x20>)
 800bc1e:	ab04      	add	r3, sp, #16
 800bc20:	6808      	ldr	r0, [r1, #0]
 800bc22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc26:	6881      	ldr	r1, [r0, #8]
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	f001 fdd7 	bl	800d7dc <_vfiprintf_r>
 800bc2e:	b003      	add	sp, #12
 800bc30:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc34:	b004      	add	sp, #16
 800bc36:	4770      	bx	lr
 800bc38:	2400003c 	.word	0x2400003c

0800bc3c <putchar>:
 800bc3c:	4b02      	ldr	r3, [pc, #8]	@ (800bc48 <putchar+0xc>)
 800bc3e:	4601      	mov	r1, r0
 800bc40:	6818      	ldr	r0, [r3, #0]
 800bc42:	6882      	ldr	r2, [r0, #8]
 800bc44:	f001 bff0 	b.w	800dc28 <_putc_r>
 800bc48:	2400003c 	.word	0x2400003c

0800bc4c <_puts_r>:
 800bc4c:	6a03      	ldr	r3, [r0, #32]
 800bc4e:	b570      	push	{r4, r5, r6, lr}
 800bc50:	6884      	ldr	r4, [r0, #8]
 800bc52:	4605      	mov	r5, r0
 800bc54:	460e      	mov	r6, r1
 800bc56:	b90b      	cbnz	r3, 800bc5c <_puts_r+0x10>
 800bc58:	f7ff ffa8 	bl	800bbac <__sinit>
 800bc5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc5e:	07db      	lsls	r3, r3, #31
 800bc60:	d405      	bmi.n	800bc6e <_puts_r+0x22>
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	0598      	lsls	r0, r3, #22
 800bc66:	d402      	bmi.n	800bc6e <_puts_r+0x22>
 800bc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc6a:	f000 f9c4 	bl	800bff6 <__retarget_lock_acquire_recursive>
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	0719      	lsls	r1, r3, #28
 800bc72:	d502      	bpl.n	800bc7a <_puts_r+0x2e>
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d135      	bne.n	800bce6 <_puts_r+0x9a>
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f000 f8e7 	bl	800be50 <__swsetup_r>
 800bc82:	b380      	cbz	r0, 800bce6 <_puts_r+0x9a>
 800bc84:	f04f 35ff 	mov.w	r5, #4294967295
 800bc88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc8a:	07da      	lsls	r2, r3, #31
 800bc8c:	d405      	bmi.n	800bc9a <_puts_r+0x4e>
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	059b      	lsls	r3, r3, #22
 800bc92:	d402      	bmi.n	800bc9a <_puts_r+0x4e>
 800bc94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc96:	f000 f9af 	bl	800bff8 <__retarget_lock_release_recursive>
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	bd70      	pop	{r4, r5, r6, pc}
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da04      	bge.n	800bcac <_puts_r+0x60>
 800bca2:	69a2      	ldr	r2, [r4, #24]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	dc17      	bgt.n	800bcd8 <_puts_r+0x8c>
 800bca8:	290a      	cmp	r1, #10
 800bcaa:	d015      	beq.n	800bcd8 <_puts_r+0x8c>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	6022      	str	r2, [r4, #0]
 800bcb2:	7019      	strb	r1, [r3, #0]
 800bcb4:	68a3      	ldr	r3, [r4, #8]
 800bcb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	60a3      	str	r3, [r4, #8]
 800bcbe:	2900      	cmp	r1, #0
 800bcc0:	d1ed      	bne.n	800bc9e <_puts_r+0x52>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	da11      	bge.n	800bcea <_puts_r+0x9e>
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	210a      	movs	r1, #10
 800bcca:	4628      	mov	r0, r5
 800bccc:	f000 f881 	bl	800bdd2 <__swbuf_r>
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d0d7      	beq.n	800bc84 <_puts_r+0x38>
 800bcd4:	250a      	movs	r5, #10
 800bcd6:	e7d7      	b.n	800bc88 <_puts_r+0x3c>
 800bcd8:	4622      	mov	r2, r4
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f000 f879 	bl	800bdd2 <__swbuf_r>
 800bce0:	3001      	adds	r0, #1
 800bce2:	d1e7      	bne.n	800bcb4 <_puts_r+0x68>
 800bce4:	e7ce      	b.n	800bc84 <_puts_r+0x38>
 800bce6:	3e01      	subs	r6, #1
 800bce8:	e7e4      	b.n	800bcb4 <_puts_r+0x68>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	6022      	str	r2, [r4, #0]
 800bcf0:	220a      	movs	r2, #10
 800bcf2:	701a      	strb	r2, [r3, #0]
 800bcf4:	e7ee      	b.n	800bcd4 <_puts_r+0x88>
	...

0800bcf8 <puts>:
 800bcf8:	4b02      	ldr	r3, [pc, #8]	@ (800bd04 <puts+0xc>)
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	6818      	ldr	r0, [r3, #0]
 800bcfe:	f7ff bfa5 	b.w	800bc4c <_puts_r>
 800bd02:	bf00      	nop
 800bd04:	2400003c 	.word	0x2400003c

0800bd08 <siprintf>:
 800bd08:	b40e      	push	{r1, r2, r3}
 800bd0a:	b510      	push	{r4, lr}
 800bd0c:	b09d      	sub	sp, #116	@ 0x74
 800bd0e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bd10:	9002      	str	r0, [sp, #8]
 800bd12:	9006      	str	r0, [sp, #24]
 800bd14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bd18:	480a      	ldr	r0, [pc, #40]	@ (800bd44 <siprintf+0x3c>)
 800bd1a:	9107      	str	r1, [sp, #28]
 800bd1c:	9104      	str	r1, [sp, #16]
 800bd1e:	490a      	ldr	r1, [pc, #40]	@ (800bd48 <siprintf+0x40>)
 800bd20:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd24:	9105      	str	r1, [sp, #20]
 800bd26:	2400      	movs	r4, #0
 800bd28:	a902      	add	r1, sp, #8
 800bd2a:	6800      	ldr	r0, [r0, #0]
 800bd2c:	9301      	str	r3, [sp, #4]
 800bd2e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bd30:	f001 fc2e 	bl	800d590 <_svfiprintf_r>
 800bd34:	9b02      	ldr	r3, [sp, #8]
 800bd36:	701c      	strb	r4, [r3, #0]
 800bd38:	b01d      	add	sp, #116	@ 0x74
 800bd3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd3e:	b003      	add	sp, #12
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	2400003c 	.word	0x2400003c
 800bd48:	ffff0208 	.word	0xffff0208

0800bd4c <__sread>:
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	460c      	mov	r4, r1
 800bd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd54:	f000 f900 	bl	800bf58 <_read_r>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	bfab      	itete	ge
 800bd5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd5e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd60:	181b      	addge	r3, r3, r0
 800bd62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd66:	bfac      	ite	ge
 800bd68:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd6a:	81a3      	strhlt	r3, [r4, #12]
 800bd6c:	bd10      	pop	{r4, pc}

0800bd6e <__swrite>:
 800bd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd72:	461f      	mov	r7, r3
 800bd74:	898b      	ldrh	r3, [r1, #12]
 800bd76:	05db      	lsls	r3, r3, #23
 800bd78:	4605      	mov	r5, r0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	4616      	mov	r6, r2
 800bd7e:	d505      	bpl.n	800bd8c <__swrite+0x1e>
 800bd80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd84:	2302      	movs	r3, #2
 800bd86:	2200      	movs	r2, #0
 800bd88:	f000 f8d4 	bl	800bf34 <_lseek_r>
 800bd8c:	89a3      	ldrh	r3, [r4, #12]
 800bd8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	4632      	mov	r2, r6
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bda2:	f000 b8eb 	b.w	800bf7c <_write_r>

0800bda6 <__sseek>:
 800bda6:	b510      	push	{r4, lr}
 800bda8:	460c      	mov	r4, r1
 800bdaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdae:	f000 f8c1 	bl	800bf34 <_lseek_r>
 800bdb2:	1c43      	adds	r3, r0, #1
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	bf15      	itete	ne
 800bdb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bdba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bdbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bdc2:	81a3      	strheq	r3, [r4, #12]
 800bdc4:	bf18      	it	ne
 800bdc6:	81a3      	strhne	r3, [r4, #12]
 800bdc8:	bd10      	pop	{r4, pc}

0800bdca <__sclose>:
 800bdca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdce:	f000 b8a1 	b.w	800bf14 <_close_r>

0800bdd2 <__swbuf_r>:
 800bdd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd4:	460e      	mov	r6, r1
 800bdd6:	4614      	mov	r4, r2
 800bdd8:	4605      	mov	r5, r0
 800bdda:	b118      	cbz	r0, 800bde4 <__swbuf_r+0x12>
 800bddc:	6a03      	ldr	r3, [r0, #32]
 800bdde:	b90b      	cbnz	r3, 800bde4 <__swbuf_r+0x12>
 800bde0:	f7ff fee4 	bl	800bbac <__sinit>
 800bde4:	69a3      	ldr	r3, [r4, #24]
 800bde6:	60a3      	str	r3, [r4, #8]
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	071a      	lsls	r2, r3, #28
 800bdec:	d501      	bpl.n	800bdf2 <__swbuf_r+0x20>
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	b943      	cbnz	r3, 800be04 <__swbuf_r+0x32>
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f000 f82b 	bl	800be50 <__swsetup_r>
 800bdfa:	b118      	cbz	r0, 800be04 <__swbuf_r+0x32>
 800bdfc:	f04f 37ff 	mov.w	r7, #4294967295
 800be00:	4638      	mov	r0, r7
 800be02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	6922      	ldr	r2, [r4, #16]
 800be08:	1a98      	subs	r0, r3, r2
 800be0a:	6963      	ldr	r3, [r4, #20]
 800be0c:	b2f6      	uxtb	r6, r6
 800be0e:	4283      	cmp	r3, r0
 800be10:	4637      	mov	r7, r6
 800be12:	dc05      	bgt.n	800be20 <__swbuf_r+0x4e>
 800be14:	4621      	mov	r1, r4
 800be16:	4628      	mov	r0, r5
 800be18:	f001 fe7c 	bl	800db14 <_fflush_r>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d1ed      	bne.n	800bdfc <__swbuf_r+0x2a>
 800be20:	68a3      	ldr	r3, [r4, #8]
 800be22:	3b01      	subs	r3, #1
 800be24:	60a3      	str	r3, [r4, #8]
 800be26:	6823      	ldr	r3, [r4, #0]
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	6022      	str	r2, [r4, #0]
 800be2c:	701e      	strb	r6, [r3, #0]
 800be2e:	6962      	ldr	r2, [r4, #20]
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	429a      	cmp	r2, r3
 800be34:	d004      	beq.n	800be40 <__swbuf_r+0x6e>
 800be36:	89a3      	ldrh	r3, [r4, #12]
 800be38:	07db      	lsls	r3, r3, #31
 800be3a:	d5e1      	bpl.n	800be00 <__swbuf_r+0x2e>
 800be3c:	2e0a      	cmp	r6, #10
 800be3e:	d1df      	bne.n	800be00 <__swbuf_r+0x2e>
 800be40:	4621      	mov	r1, r4
 800be42:	4628      	mov	r0, r5
 800be44:	f001 fe66 	bl	800db14 <_fflush_r>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d0d9      	beq.n	800be00 <__swbuf_r+0x2e>
 800be4c:	e7d6      	b.n	800bdfc <__swbuf_r+0x2a>
	...

0800be50 <__swsetup_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4b29      	ldr	r3, [pc, #164]	@ (800bef8 <__swsetup_r+0xa8>)
 800be54:	4605      	mov	r5, r0
 800be56:	6818      	ldr	r0, [r3, #0]
 800be58:	460c      	mov	r4, r1
 800be5a:	b118      	cbz	r0, 800be64 <__swsetup_r+0x14>
 800be5c:	6a03      	ldr	r3, [r0, #32]
 800be5e:	b90b      	cbnz	r3, 800be64 <__swsetup_r+0x14>
 800be60:	f7ff fea4 	bl	800bbac <__sinit>
 800be64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be68:	0719      	lsls	r1, r3, #28
 800be6a:	d422      	bmi.n	800beb2 <__swsetup_r+0x62>
 800be6c:	06da      	lsls	r2, r3, #27
 800be6e:	d407      	bmi.n	800be80 <__swsetup_r+0x30>
 800be70:	2209      	movs	r2, #9
 800be72:	602a      	str	r2, [r5, #0]
 800be74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be78:	81a3      	strh	r3, [r4, #12]
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295
 800be7e:	e033      	b.n	800bee8 <__swsetup_r+0x98>
 800be80:	0758      	lsls	r0, r3, #29
 800be82:	d512      	bpl.n	800beaa <__swsetup_r+0x5a>
 800be84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be86:	b141      	cbz	r1, 800be9a <__swsetup_r+0x4a>
 800be88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be8c:	4299      	cmp	r1, r3
 800be8e:	d002      	beq.n	800be96 <__swsetup_r+0x46>
 800be90:	4628      	mov	r0, r5
 800be92:	f000 fea7 	bl	800cbe4 <_free_r>
 800be96:	2300      	movs	r3, #0
 800be98:	6363      	str	r3, [r4, #52]	@ 0x34
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bea0:	81a3      	strh	r3, [r4, #12]
 800bea2:	2300      	movs	r3, #0
 800bea4:	6063      	str	r3, [r4, #4]
 800bea6:	6923      	ldr	r3, [r4, #16]
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	f043 0308 	orr.w	r3, r3, #8
 800beb0:	81a3      	strh	r3, [r4, #12]
 800beb2:	6923      	ldr	r3, [r4, #16]
 800beb4:	b94b      	cbnz	r3, 800beca <__swsetup_r+0x7a>
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bec0:	d003      	beq.n	800beca <__swsetup_r+0x7a>
 800bec2:	4621      	mov	r1, r4
 800bec4:	4628      	mov	r0, r5
 800bec6:	f001 fe73 	bl	800dbb0 <__smakebuf_r>
 800beca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bece:	f013 0201 	ands.w	r2, r3, #1
 800bed2:	d00a      	beq.n	800beea <__swsetup_r+0x9a>
 800bed4:	2200      	movs	r2, #0
 800bed6:	60a2      	str	r2, [r4, #8]
 800bed8:	6962      	ldr	r2, [r4, #20]
 800beda:	4252      	negs	r2, r2
 800bedc:	61a2      	str	r2, [r4, #24]
 800bede:	6922      	ldr	r2, [r4, #16]
 800bee0:	b942      	cbnz	r2, 800bef4 <__swsetup_r+0xa4>
 800bee2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bee6:	d1c5      	bne.n	800be74 <__swsetup_r+0x24>
 800bee8:	bd38      	pop	{r3, r4, r5, pc}
 800beea:	0799      	lsls	r1, r3, #30
 800beec:	bf58      	it	pl
 800beee:	6962      	ldrpl	r2, [r4, #20]
 800bef0:	60a2      	str	r2, [r4, #8]
 800bef2:	e7f4      	b.n	800bede <__swsetup_r+0x8e>
 800bef4:	2000      	movs	r0, #0
 800bef6:	e7f7      	b.n	800bee8 <__swsetup_r+0x98>
 800bef8:	2400003c 	.word	0x2400003c

0800befc <memset>:
 800befc:	4402      	add	r2, r0
 800befe:	4603      	mov	r3, r0
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d100      	bne.n	800bf06 <memset+0xa>
 800bf04:	4770      	bx	lr
 800bf06:	f803 1b01 	strb.w	r1, [r3], #1
 800bf0a:	e7f9      	b.n	800bf00 <memset+0x4>

0800bf0c <_localeconv_r>:
 800bf0c:	4800      	ldr	r0, [pc, #0]	@ (800bf10 <_localeconv_r+0x4>)
 800bf0e:	4770      	bx	lr
 800bf10:	2400017c 	.word	0x2400017c

0800bf14 <_close_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4d06      	ldr	r5, [pc, #24]	@ (800bf30 <_close_r+0x1c>)
 800bf18:	2300      	movs	r3, #0
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	4608      	mov	r0, r1
 800bf1e:	602b      	str	r3, [r5, #0]
 800bf20:	f7f6 fb2e 	bl	8002580 <_close>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d102      	bne.n	800bf2e <_close_r+0x1a>
 800bf28:	682b      	ldr	r3, [r5, #0]
 800bf2a:	b103      	cbz	r3, 800bf2e <_close_r+0x1a>
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	bd38      	pop	{r3, r4, r5, pc}
 800bf30:	24000ad4 	.word	0x24000ad4

0800bf34 <_lseek_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4d07      	ldr	r5, [pc, #28]	@ (800bf54 <_lseek_r+0x20>)
 800bf38:	4604      	mov	r4, r0
 800bf3a:	4608      	mov	r0, r1
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	2200      	movs	r2, #0
 800bf40:	602a      	str	r2, [r5, #0]
 800bf42:	461a      	mov	r2, r3
 800bf44:	f7f6 fb43 	bl	80025ce <_lseek>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d102      	bne.n	800bf52 <_lseek_r+0x1e>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	b103      	cbz	r3, 800bf52 <_lseek_r+0x1e>
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	24000ad4 	.word	0x24000ad4

0800bf58 <_read_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	4d07      	ldr	r5, [pc, #28]	@ (800bf78 <_read_r+0x20>)
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	4608      	mov	r0, r1
 800bf60:	4611      	mov	r1, r2
 800bf62:	2200      	movs	r2, #0
 800bf64:	602a      	str	r2, [r5, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	f7f6 fad1 	bl	800250e <_read>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d102      	bne.n	800bf76 <_read_r+0x1e>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	b103      	cbz	r3, 800bf76 <_read_r+0x1e>
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	24000ad4 	.word	0x24000ad4

0800bf7c <_write_r>:
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	4d07      	ldr	r5, [pc, #28]	@ (800bf9c <_write_r+0x20>)
 800bf80:	4604      	mov	r4, r0
 800bf82:	4608      	mov	r0, r1
 800bf84:	4611      	mov	r1, r2
 800bf86:	2200      	movs	r2, #0
 800bf88:	602a      	str	r2, [r5, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	f7f6 fadc 	bl	8002548 <_write>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_write_r+0x1e>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_write_r+0x1e>
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	24000ad4 	.word	0x24000ad4

0800bfa0 <__errno>:
 800bfa0:	4b01      	ldr	r3, [pc, #4]	@ (800bfa8 <__errno+0x8>)
 800bfa2:	6818      	ldr	r0, [r3, #0]
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	2400003c 	.word	0x2400003c

0800bfac <__libc_init_array>:
 800bfac:	b570      	push	{r4, r5, r6, lr}
 800bfae:	4d0d      	ldr	r5, [pc, #52]	@ (800bfe4 <__libc_init_array+0x38>)
 800bfb0:	4c0d      	ldr	r4, [pc, #52]	@ (800bfe8 <__libc_init_array+0x3c>)
 800bfb2:	1b64      	subs	r4, r4, r5
 800bfb4:	10a4      	asrs	r4, r4, #2
 800bfb6:	2600      	movs	r6, #0
 800bfb8:	42a6      	cmp	r6, r4
 800bfba:	d109      	bne.n	800bfd0 <__libc_init_array+0x24>
 800bfbc:	4d0b      	ldr	r5, [pc, #44]	@ (800bfec <__libc_init_array+0x40>)
 800bfbe:	4c0c      	ldr	r4, [pc, #48]	@ (800bff0 <__libc_init_array+0x44>)
 800bfc0:	f002 f8c8 	bl	800e154 <_init>
 800bfc4:	1b64      	subs	r4, r4, r5
 800bfc6:	10a4      	asrs	r4, r4, #2
 800bfc8:	2600      	movs	r6, #0
 800bfca:	42a6      	cmp	r6, r4
 800bfcc:	d105      	bne.n	800bfda <__libc_init_array+0x2e>
 800bfce:	bd70      	pop	{r4, r5, r6, pc}
 800bfd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfd4:	4798      	blx	r3
 800bfd6:	3601      	adds	r6, #1
 800bfd8:	e7ee      	b.n	800bfb8 <__libc_init_array+0xc>
 800bfda:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfde:	4798      	blx	r3
 800bfe0:	3601      	adds	r6, #1
 800bfe2:	e7f2      	b.n	800bfca <__libc_init_array+0x1e>
 800bfe4:	0800ea50 	.word	0x0800ea50
 800bfe8:	0800ea50 	.word	0x0800ea50
 800bfec:	0800ea50 	.word	0x0800ea50
 800bff0:	0800ea54 	.word	0x0800ea54

0800bff4 <__retarget_lock_init_recursive>:
 800bff4:	4770      	bx	lr

0800bff6 <__retarget_lock_acquire_recursive>:
 800bff6:	4770      	bx	lr

0800bff8 <__retarget_lock_release_recursive>:
 800bff8:	4770      	bx	lr

0800bffa <memcpy>:
 800bffa:	440a      	add	r2, r1
 800bffc:	4291      	cmp	r1, r2
 800bffe:	f100 33ff 	add.w	r3, r0, #4294967295
 800c002:	d100      	bne.n	800c006 <memcpy+0xc>
 800c004:	4770      	bx	lr
 800c006:	b510      	push	{r4, lr}
 800c008:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c00c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c010:	4291      	cmp	r1, r2
 800c012:	d1f9      	bne.n	800c008 <memcpy+0xe>
 800c014:	bd10      	pop	{r4, pc}

0800c016 <quorem>:
 800c016:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01a:	6903      	ldr	r3, [r0, #16]
 800c01c:	690c      	ldr	r4, [r1, #16]
 800c01e:	42a3      	cmp	r3, r4
 800c020:	4607      	mov	r7, r0
 800c022:	db7e      	blt.n	800c122 <quorem+0x10c>
 800c024:	3c01      	subs	r4, #1
 800c026:	f101 0814 	add.w	r8, r1, #20
 800c02a:	00a3      	lsls	r3, r4, #2
 800c02c:	f100 0514 	add.w	r5, r0, #20
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c036:	9301      	str	r3, [sp, #4]
 800c038:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c03c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c040:	3301      	adds	r3, #1
 800c042:	429a      	cmp	r2, r3
 800c044:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c048:	fbb2 f6f3 	udiv	r6, r2, r3
 800c04c:	d32e      	bcc.n	800c0ac <quorem+0x96>
 800c04e:	f04f 0a00 	mov.w	sl, #0
 800c052:	46c4      	mov	ip, r8
 800c054:	46ae      	mov	lr, r5
 800c056:	46d3      	mov	fp, sl
 800c058:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c05c:	b298      	uxth	r0, r3
 800c05e:	fb06 a000 	mla	r0, r6, r0, sl
 800c062:	0c02      	lsrs	r2, r0, #16
 800c064:	0c1b      	lsrs	r3, r3, #16
 800c066:	fb06 2303 	mla	r3, r6, r3, r2
 800c06a:	f8de 2000 	ldr.w	r2, [lr]
 800c06e:	b280      	uxth	r0, r0
 800c070:	b292      	uxth	r2, r2
 800c072:	1a12      	subs	r2, r2, r0
 800c074:	445a      	add	r2, fp
 800c076:	f8de 0000 	ldr.w	r0, [lr]
 800c07a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c07e:	b29b      	uxth	r3, r3
 800c080:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c084:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c088:	b292      	uxth	r2, r2
 800c08a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c08e:	45e1      	cmp	r9, ip
 800c090:	f84e 2b04 	str.w	r2, [lr], #4
 800c094:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c098:	d2de      	bcs.n	800c058 <quorem+0x42>
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	58eb      	ldr	r3, [r5, r3]
 800c09e:	b92b      	cbnz	r3, 800c0ac <quorem+0x96>
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	3b04      	subs	r3, #4
 800c0a4:	429d      	cmp	r5, r3
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	d32f      	bcc.n	800c10a <quorem+0xf4>
 800c0aa:	613c      	str	r4, [r7, #16]
 800c0ac:	4638      	mov	r0, r7
 800c0ae:	f001 f90b 	bl	800d2c8 <__mcmp>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	db25      	blt.n	800c102 <quorem+0xec>
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0be:	f8d1 c000 	ldr.w	ip, [r1]
 800c0c2:	fa1f fe82 	uxth.w	lr, r2
 800c0c6:	fa1f f38c 	uxth.w	r3, ip
 800c0ca:	eba3 030e 	sub.w	r3, r3, lr
 800c0ce:	4403      	add	r3, r0
 800c0d0:	0c12      	lsrs	r2, r2, #16
 800c0d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c0d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0e0:	45c1      	cmp	r9, r8
 800c0e2:	f841 3b04 	str.w	r3, [r1], #4
 800c0e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0ea:	d2e6      	bcs.n	800c0ba <quorem+0xa4>
 800c0ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0f4:	b922      	cbnz	r2, 800c100 <quorem+0xea>
 800c0f6:	3b04      	subs	r3, #4
 800c0f8:	429d      	cmp	r5, r3
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	d30b      	bcc.n	800c116 <quorem+0x100>
 800c0fe:	613c      	str	r4, [r7, #16]
 800c100:	3601      	adds	r6, #1
 800c102:	4630      	mov	r0, r6
 800c104:	b003      	add	sp, #12
 800c106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10a:	6812      	ldr	r2, [r2, #0]
 800c10c:	3b04      	subs	r3, #4
 800c10e:	2a00      	cmp	r2, #0
 800c110:	d1cb      	bne.n	800c0aa <quorem+0x94>
 800c112:	3c01      	subs	r4, #1
 800c114:	e7c6      	b.n	800c0a4 <quorem+0x8e>
 800c116:	6812      	ldr	r2, [r2, #0]
 800c118:	3b04      	subs	r3, #4
 800c11a:	2a00      	cmp	r2, #0
 800c11c:	d1ef      	bne.n	800c0fe <quorem+0xe8>
 800c11e:	3c01      	subs	r4, #1
 800c120:	e7ea      	b.n	800c0f8 <quorem+0xe2>
 800c122:	2000      	movs	r0, #0
 800c124:	e7ee      	b.n	800c104 <quorem+0xee>
	...

0800c128 <_dtoa_r>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	ed2d 8b02 	vpush	{d8}
 800c130:	69c7      	ldr	r7, [r0, #28]
 800c132:	b091      	sub	sp, #68	@ 0x44
 800c134:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c138:	ec55 4b10 	vmov	r4, r5, d0
 800c13c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c13e:	9107      	str	r1, [sp, #28]
 800c140:	4681      	mov	r9, r0
 800c142:	9209      	str	r2, [sp, #36]	@ 0x24
 800c144:	930d      	str	r3, [sp, #52]	@ 0x34
 800c146:	b97f      	cbnz	r7, 800c168 <_dtoa_r+0x40>
 800c148:	2010      	movs	r0, #16
 800c14a:	f000 fd95 	bl	800cc78 <malloc>
 800c14e:	4602      	mov	r2, r0
 800c150:	f8c9 001c 	str.w	r0, [r9, #28]
 800c154:	b920      	cbnz	r0, 800c160 <_dtoa_r+0x38>
 800c156:	4ba0      	ldr	r3, [pc, #640]	@ (800c3d8 <_dtoa_r+0x2b0>)
 800c158:	21ef      	movs	r1, #239	@ 0xef
 800c15a:	48a0      	ldr	r0, [pc, #640]	@ (800c3dc <_dtoa_r+0x2b4>)
 800c15c:	f001 fde4 	bl	800dd28 <__assert_func>
 800c160:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c164:	6007      	str	r7, [r0, #0]
 800c166:	60c7      	str	r7, [r0, #12]
 800c168:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c16c:	6819      	ldr	r1, [r3, #0]
 800c16e:	b159      	cbz	r1, 800c188 <_dtoa_r+0x60>
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	604a      	str	r2, [r1, #4]
 800c174:	2301      	movs	r3, #1
 800c176:	4093      	lsls	r3, r2
 800c178:	608b      	str	r3, [r1, #8]
 800c17a:	4648      	mov	r0, r9
 800c17c:	f000 fe72 	bl	800ce64 <_Bfree>
 800c180:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c184:	2200      	movs	r2, #0
 800c186:	601a      	str	r2, [r3, #0]
 800c188:	1e2b      	subs	r3, r5, #0
 800c18a:	bfbb      	ittet	lt
 800c18c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c190:	9303      	strlt	r3, [sp, #12]
 800c192:	2300      	movge	r3, #0
 800c194:	2201      	movlt	r2, #1
 800c196:	bfac      	ite	ge
 800c198:	6033      	strge	r3, [r6, #0]
 800c19a:	6032      	strlt	r2, [r6, #0]
 800c19c:	4b90      	ldr	r3, [pc, #576]	@ (800c3e0 <_dtoa_r+0x2b8>)
 800c19e:	9e03      	ldr	r6, [sp, #12]
 800c1a0:	43b3      	bics	r3, r6
 800c1a2:	d110      	bne.n	800c1c6 <_dtoa_r+0x9e>
 800c1a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c1b0:	4323      	orrs	r3, r4
 800c1b2:	f000 84e6 	beq.w	800cb82 <_dtoa_r+0xa5a>
 800c1b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c1b8:	4f8a      	ldr	r7, [pc, #552]	@ (800c3e4 <_dtoa_r+0x2bc>)
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f000 84e8 	beq.w	800cb90 <_dtoa_r+0xa68>
 800c1c0:	1cfb      	adds	r3, r7, #3
 800c1c2:	f000 bce3 	b.w	800cb8c <_dtoa_r+0xa64>
 800c1c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c1ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d2:	d10a      	bne.n	800c1ea <_dtoa_r+0xc2>
 800c1d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	6013      	str	r3, [r2, #0]
 800c1da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c1dc:	b113      	cbz	r3, 800c1e4 <_dtoa_r+0xbc>
 800c1de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c1e0:	4b81      	ldr	r3, [pc, #516]	@ (800c3e8 <_dtoa_r+0x2c0>)
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	4f81      	ldr	r7, [pc, #516]	@ (800c3ec <_dtoa_r+0x2c4>)
 800c1e6:	f000 bcd3 	b.w	800cb90 <_dtoa_r+0xa68>
 800c1ea:	aa0e      	add	r2, sp, #56	@ 0x38
 800c1ec:	a90f      	add	r1, sp, #60	@ 0x3c
 800c1ee:	4648      	mov	r0, r9
 800c1f0:	eeb0 0b48 	vmov.f64	d0, d8
 800c1f4:	f001 f918 	bl	800d428 <__d2b>
 800c1f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c1fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1fe:	9001      	str	r0, [sp, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d045      	beq.n	800c290 <_dtoa_r+0x168>
 800c204:	eeb0 7b48 	vmov.f64	d7, d8
 800c208:	ee18 1a90 	vmov	r1, s17
 800c20c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c210:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c214:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c218:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c21c:	2500      	movs	r5, #0
 800c21e:	ee07 1a90 	vmov	s15, r1
 800c222:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c226:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c3c0 <_dtoa_r+0x298>
 800c22a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c22e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c3c8 <_dtoa_r+0x2a0>
 800c232:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c236:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c3d0 <_dtoa_r+0x2a8>
 800c23a:	ee07 3a90 	vmov	s15, r3
 800c23e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c242:	eeb0 7b46 	vmov.f64	d7, d6
 800c246:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c24a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c24e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c256:	ee16 8a90 	vmov	r8, s13
 800c25a:	d508      	bpl.n	800c26e <_dtoa_r+0x146>
 800c25c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c260:	eeb4 6b47 	vcmp.f64	d6, d7
 800c264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c268:	bf18      	it	ne
 800c26a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c26e:	f1b8 0f16 	cmp.w	r8, #22
 800c272:	d82b      	bhi.n	800c2cc <_dtoa_r+0x1a4>
 800c274:	495e      	ldr	r1, [pc, #376]	@ (800c3f0 <_dtoa_r+0x2c8>)
 800c276:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c27a:	ed91 7b00 	vldr	d7, [r1]
 800c27e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c286:	d501      	bpl.n	800c28c <_dtoa_r+0x164>
 800c288:	f108 38ff 	add.w	r8, r8, #4294967295
 800c28c:	2100      	movs	r1, #0
 800c28e:	e01e      	b.n	800c2ce <_dtoa_r+0x1a6>
 800c290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c292:	4413      	add	r3, r2
 800c294:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c298:	2920      	cmp	r1, #32
 800c29a:	bfc1      	itttt	gt
 800c29c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c2a0:	408e      	lslgt	r6, r1
 800c2a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c2a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c2aa:	bfd6      	itet	le
 800c2ac:	f1c1 0120 	rsble	r1, r1, #32
 800c2b0:	4331      	orrgt	r1, r6
 800c2b2:	fa04 f101 	lslle.w	r1, r4, r1
 800c2b6:	ee07 1a90 	vmov	s15, r1
 800c2ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	ee17 1a90 	vmov	r1, s15
 800c2c4:	2501      	movs	r5, #1
 800c2c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c2ca:	e7a8      	b.n	800c21e <_dtoa_r+0xf6>
 800c2cc:	2101      	movs	r1, #1
 800c2ce:	1ad2      	subs	r2, r2, r3
 800c2d0:	1e53      	subs	r3, r2, #1
 800c2d2:	9306      	str	r3, [sp, #24]
 800c2d4:	bf45      	ittet	mi
 800c2d6:	f1c2 0301 	rsbmi	r3, r2, #1
 800c2da:	9304      	strmi	r3, [sp, #16]
 800c2dc:	2300      	movpl	r3, #0
 800c2de:	2300      	movmi	r3, #0
 800c2e0:	bf4c      	ite	mi
 800c2e2:	9306      	strmi	r3, [sp, #24]
 800c2e4:	9304      	strpl	r3, [sp, #16]
 800c2e6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ea:	910c      	str	r1, [sp, #48]	@ 0x30
 800c2ec:	db18      	blt.n	800c320 <_dtoa_r+0x1f8>
 800c2ee:	9b06      	ldr	r3, [sp, #24]
 800c2f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c2f4:	4443      	add	r3, r8
 800c2f6:	9306      	str	r3, [sp, #24]
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	9a07      	ldr	r2, [sp, #28]
 800c2fc:	2a09      	cmp	r2, #9
 800c2fe:	d845      	bhi.n	800c38c <_dtoa_r+0x264>
 800c300:	2a05      	cmp	r2, #5
 800c302:	bfc4      	itt	gt
 800c304:	3a04      	subgt	r2, #4
 800c306:	9207      	strgt	r2, [sp, #28]
 800c308:	9a07      	ldr	r2, [sp, #28]
 800c30a:	f1a2 0202 	sub.w	r2, r2, #2
 800c30e:	bfcc      	ite	gt
 800c310:	2400      	movgt	r4, #0
 800c312:	2401      	movle	r4, #1
 800c314:	2a03      	cmp	r2, #3
 800c316:	d844      	bhi.n	800c3a2 <_dtoa_r+0x27a>
 800c318:	e8df f002 	tbb	[pc, r2]
 800c31c:	0b173634 	.word	0x0b173634
 800c320:	9b04      	ldr	r3, [sp, #16]
 800c322:	2200      	movs	r2, #0
 800c324:	eba3 0308 	sub.w	r3, r3, r8
 800c328:	9304      	str	r3, [sp, #16]
 800c32a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c32c:	f1c8 0300 	rsb	r3, r8, #0
 800c330:	e7e3      	b.n	800c2fa <_dtoa_r+0x1d2>
 800c332:	2201      	movs	r2, #1
 800c334:	9208      	str	r2, [sp, #32]
 800c336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c338:	eb08 0b02 	add.w	fp, r8, r2
 800c33c:	f10b 0a01 	add.w	sl, fp, #1
 800c340:	4652      	mov	r2, sl
 800c342:	2a01      	cmp	r2, #1
 800c344:	bfb8      	it	lt
 800c346:	2201      	movlt	r2, #1
 800c348:	e006      	b.n	800c358 <_dtoa_r+0x230>
 800c34a:	2201      	movs	r2, #1
 800c34c:	9208      	str	r2, [sp, #32]
 800c34e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c350:	2a00      	cmp	r2, #0
 800c352:	dd29      	ble.n	800c3a8 <_dtoa_r+0x280>
 800c354:	4693      	mov	fp, r2
 800c356:	4692      	mov	sl, r2
 800c358:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c35c:	2100      	movs	r1, #0
 800c35e:	2004      	movs	r0, #4
 800c360:	f100 0614 	add.w	r6, r0, #20
 800c364:	4296      	cmp	r6, r2
 800c366:	d926      	bls.n	800c3b6 <_dtoa_r+0x28e>
 800c368:	6079      	str	r1, [r7, #4]
 800c36a:	4648      	mov	r0, r9
 800c36c:	9305      	str	r3, [sp, #20]
 800c36e:	f000 fd39 	bl	800cde4 <_Balloc>
 800c372:	9b05      	ldr	r3, [sp, #20]
 800c374:	4607      	mov	r7, r0
 800c376:	2800      	cmp	r0, #0
 800c378:	d13e      	bne.n	800c3f8 <_dtoa_r+0x2d0>
 800c37a:	4b1e      	ldr	r3, [pc, #120]	@ (800c3f4 <_dtoa_r+0x2cc>)
 800c37c:	4602      	mov	r2, r0
 800c37e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c382:	e6ea      	b.n	800c15a <_dtoa_r+0x32>
 800c384:	2200      	movs	r2, #0
 800c386:	e7e1      	b.n	800c34c <_dtoa_r+0x224>
 800c388:	2200      	movs	r2, #0
 800c38a:	e7d3      	b.n	800c334 <_dtoa_r+0x20c>
 800c38c:	2401      	movs	r4, #1
 800c38e:	2200      	movs	r2, #0
 800c390:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c394:	f04f 3bff 	mov.w	fp, #4294967295
 800c398:	2100      	movs	r1, #0
 800c39a:	46da      	mov	sl, fp
 800c39c:	2212      	movs	r2, #18
 800c39e:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3a0:	e7da      	b.n	800c358 <_dtoa_r+0x230>
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	9208      	str	r2, [sp, #32]
 800c3a6:	e7f5      	b.n	800c394 <_dtoa_r+0x26c>
 800c3a8:	f04f 0b01 	mov.w	fp, #1
 800c3ac:	46da      	mov	sl, fp
 800c3ae:	465a      	mov	r2, fp
 800c3b0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c3b4:	e7d0      	b.n	800c358 <_dtoa_r+0x230>
 800c3b6:	3101      	adds	r1, #1
 800c3b8:	0040      	lsls	r0, r0, #1
 800c3ba:	e7d1      	b.n	800c360 <_dtoa_r+0x238>
 800c3bc:	f3af 8000 	nop.w
 800c3c0:	636f4361 	.word	0x636f4361
 800c3c4:	3fd287a7 	.word	0x3fd287a7
 800c3c8:	8b60c8b3 	.word	0x8b60c8b3
 800c3cc:	3fc68a28 	.word	0x3fc68a28
 800c3d0:	509f79fb 	.word	0x509f79fb
 800c3d4:	3fd34413 	.word	0x3fd34413
 800c3d8:	0800e701 	.word	0x0800e701
 800c3dc:	0800e718 	.word	0x0800e718
 800c3e0:	7ff00000 	.word	0x7ff00000
 800c3e4:	0800e6fd 	.word	0x0800e6fd
 800c3e8:	0800e6d1 	.word	0x0800e6d1
 800c3ec:	0800e6d0 	.word	0x0800e6d0
 800c3f0:	0800e868 	.word	0x0800e868
 800c3f4:	0800e770 	.word	0x0800e770
 800c3f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c3fc:	f1ba 0f0e 	cmp.w	sl, #14
 800c400:	6010      	str	r0, [r2, #0]
 800c402:	d86e      	bhi.n	800c4e2 <_dtoa_r+0x3ba>
 800c404:	2c00      	cmp	r4, #0
 800c406:	d06c      	beq.n	800c4e2 <_dtoa_r+0x3ba>
 800c408:	f1b8 0f00 	cmp.w	r8, #0
 800c40c:	f340 80b4 	ble.w	800c578 <_dtoa_r+0x450>
 800c410:	4ac8      	ldr	r2, [pc, #800]	@ (800c734 <_dtoa_r+0x60c>)
 800c412:	f008 010f 	and.w	r1, r8, #15
 800c416:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c41a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c41e:	ed92 7b00 	vldr	d7, [r2]
 800c422:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c426:	f000 809b 	beq.w	800c560 <_dtoa_r+0x438>
 800c42a:	4ac3      	ldr	r2, [pc, #780]	@ (800c738 <_dtoa_r+0x610>)
 800c42c:	ed92 6b08 	vldr	d6, [r2, #32]
 800c430:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c434:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c438:	f001 010f 	and.w	r1, r1, #15
 800c43c:	2203      	movs	r2, #3
 800c43e:	48be      	ldr	r0, [pc, #760]	@ (800c738 <_dtoa_r+0x610>)
 800c440:	2900      	cmp	r1, #0
 800c442:	f040 808f 	bne.w	800c564 <_dtoa_r+0x43c>
 800c446:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c44a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c44e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c452:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c454:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c458:	2900      	cmp	r1, #0
 800c45a:	f000 80b3 	beq.w	800c5c4 <_dtoa_r+0x49c>
 800c45e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c462:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c46a:	f140 80ab 	bpl.w	800c5c4 <_dtoa_r+0x49c>
 800c46e:	f1ba 0f00 	cmp.w	sl, #0
 800c472:	f000 80a7 	beq.w	800c5c4 <_dtoa_r+0x49c>
 800c476:	f1bb 0f00 	cmp.w	fp, #0
 800c47a:	dd30      	ble.n	800c4de <_dtoa_r+0x3b6>
 800c47c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c480:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c484:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c488:	f108 31ff 	add.w	r1, r8, #4294967295
 800c48c:	9105      	str	r1, [sp, #20]
 800c48e:	3201      	adds	r2, #1
 800c490:	465c      	mov	r4, fp
 800c492:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c496:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c49a:	ee07 2a90 	vmov	s15, r2
 800c49e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c4a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c4a6:	ee15 2a90 	vmov	r2, s11
 800c4aa:	ec51 0b15 	vmov	r0, r1, d5
 800c4ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c4b2:	2c00      	cmp	r4, #0
 800c4b4:	f040 808a 	bne.w	800c5cc <_dtoa_r+0x4a4>
 800c4b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c4bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c4c0:	ec41 0b17 	vmov	d7, r0, r1
 800c4c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4cc:	f300 826a 	bgt.w	800c9a4 <_dtoa_r+0x87c>
 800c4d0:	eeb1 7b47 	vneg.f64	d7, d7
 800c4d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4dc:	d423      	bmi.n	800c526 <_dtoa_r+0x3fe>
 800c4de:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c4e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c4e4:	2a00      	cmp	r2, #0
 800c4e6:	f2c0 8129 	blt.w	800c73c <_dtoa_r+0x614>
 800c4ea:	f1b8 0f0e 	cmp.w	r8, #14
 800c4ee:	f300 8125 	bgt.w	800c73c <_dtoa_r+0x614>
 800c4f2:	4b90      	ldr	r3, [pc, #576]	@ (800c734 <_dtoa_r+0x60c>)
 800c4f4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c4f8:	ed93 6b00 	vldr	d6, [r3]
 800c4fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f280 80c8 	bge.w	800c694 <_dtoa_r+0x56c>
 800c504:	f1ba 0f00 	cmp.w	sl, #0
 800c508:	f300 80c4 	bgt.w	800c694 <_dtoa_r+0x56c>
 800c50c:	d10b      	bne.n	800c526 <_dtoa_r+0x3fe>
 800c50e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c512:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c516:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c51a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c522:	f2c0 823c 	blt.w	800c99e <_dtoa_r+0x876>
 800c526:	2400      	movs	r4, #0
 800c528:	4625      	mov	r5, r4
 800c52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c52c:	43db      	mvns	r3, r3
 800c52e:	9305      	str	r3, [sp, #20]
 800c530:	463e      	mov	r6, r7
 800c532:	f04f 0800 	mov.w	r8, #0
 800c536:	4621      	mov	r1, r4
 800c538:	4648      	mov	r0, r9
 800c53a:	f000 fc93 	bl	800ce64 <_Bfree>
 800c53e:	2d00      	cmp	r5, #0
 800c540:	f000 80a2 	beq.w	800c688 <_dtoa_r+0x560>
 800c544:	f1b8 0f00 	cmp.w	r8, #0
 800c548:	d005      	beq.n	800c556 <_dtoa_r+0x42e>
 800c54a:	45a8      	cmp	r8, r5
 800c54c:	d003      	beq.n	800c556 <_dtoa_r+0x42e>
 800c54e:	4641      	mov	r1, r8
 800c550:	4648      	mov	r0, r9
 800c552:	f000 fc87 	bl	800ce64 <_Bfree>
 800c556:	4629      	mov	r1, r5
 800c558:	4648      	mov	r0, r9
 800c55a:	f000 fc83 	bl	800ce64 <_Bfree>
 800c55e:	e093      	b.n	800c688 <_dtoa_r+0x560>
 800c560:	2202      	movs	r2, #2
 800c562:	e76c      	b.n	800c43e <_dtoa_r+0x316>
 800c564:	07cc      	lsls	r4, r1, #31
 800c566:	d504      	bpl.n	800c572 <_dtoa_r+0x44a>
 800c568:	ed90 6b00 	vldr	d6, [r0]
 800c56c:	3201      	adds	r2, #1
 800c56e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c572:	1049      	asrs	r1, r1, #1
 800c574:	3008      	adds	r0, #8
 800c576:	e763      	b.n	800c440 <_dtoa_r+0x318>
 800c578:	d022      	beq.n	800c5c0 <_dtoa_r+0x498>
 800c57a:	f1c8 0100 	rsb	r1, r8, #0
 800c57e:	4a6d      	ldr	r2, [pc, #436]	@ (800c734 <_dtoa_r+0x60c>)
 800c580:	f001 000f 	and.w	r0, r1, #15
 800c584:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c588:	ed92 7b00 	vldr	d7, [r2]
 800c58c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c590:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c594:	4868      	ldr	r0, [pc, #416]	@ (800c738 <_dtoa_r+0x610>)
 800c596:	1109      	asrs	r1, r1, #4
 800c598:	2400      	movs	r4, #0
 800c59a:	2202      	movs	r2, #2
 800c59c:	b929      	cbnz	r1, 800c5aa <_dtoa_r+0x482>
 800c59e:	2c00      	cmp	r4, #0
 800c5a0:	f43f af57 	beq.w	800c452 <_dtoa_r+0x32a>
 800c5a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5a8:	e753      	b.n	800c452 <_dtoa_r+0x32a>
 800c5aa:	07ce      	lsls	r6, r1, #31
 800c5ac:	d505      	bpl.n	800c5ba <_dtoa_r+0x492>
 800c5ae:	ed90 6b00 	vldr	d6, [r0]
 800c5b2:	3201      	adds	r2, #1
 800c5b4:	2401      	movs	r4, #1
 800c5b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5ba:	1049      	asrs	r1, r1, #1
 800c5bc:	3008      	adds	r0, #8
 800c5be:	e7ed      	b.n	800c59c <_dtoa_r+0x474>
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	e746      	b.n	800c452 <_dtoa_r+0x32a>
 800c5c4:	f8cd 8014 	str.w	r8, [sp, #20]
 800c5c8:	4654      	mov	r4, sl
 800c5ca:	e762      	b.n	800c492 <_dtoa_r+0x36a>
 800c5cc:	4a59      	ldr	r2, [pc, #356]	@ (800c734 <_dtoa_r+0x60c>)
 800c5ce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c5d2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c5d6:	9a08      	ldr	r2, [sp, #32]
 800c5d8:	ec41 0b17 	vmov	d7, r0, r1
 800c5dc:	443c      	add	r4, r7
 800c5de:	b34a      	cbz	r2, 800c634 <_dtoa_r+0x50c>
 800c5e0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c5e4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c5e8:	463e      	mov	r6, r7
 800c5ea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c5ee:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c5f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c5f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c5fa:	ee14 2a90 	vmov	r2, s9
 800c5fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c602:	3230      	adds	r2, #48	@ 0x30
 800c604:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c608:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c610:	f806 2b01 	strb.w	r2, [r6], #1
 800c614:	d438      	bmi.n	800c688 <_dtoa_r+0x560>
 800c616:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c61a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c622:	d46e      	bmi.n	800c702 <_dtoa_r+0x5da>
 800c624:	42a6      	cmp	r6, r4
 800c626:	f43f af5a 	beq.w	800c4de <_dtoa_r+0x3b6>
 800c62a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c62e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c632:	e7e0      	b.n	800c5f6 <_dtoa_r+0x4ce>
 800c634:	4621      	mov	r1, r4
 800c636:	463e      	mov	r6, r7
 800c638:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c63c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c640:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c644:	ee14 2a90 	vmov	r2, s9
 800c648:	3230      	adds	r2, #48	@ 0x30
 800c64a:	f806 2b01 	strb.w	r2, [r6], #1
 800c64e:	42a6      	cmp	r6, r4
 800c650:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c654:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c658:	d119      	bne.n	800c68e <_dtoa_r+0x566>
 800c65a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c65e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c662:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c66a:	dc4a      	bgt.n	800c702 <_dtoa_r+0x5da>
 800c66c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c670:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c678:	f57f af31 	bpl.w	800c4de <_dtoa_r+0x3b6>
 800c67c:	460e      	mov	r6, r1
 800c67e:	3901      	subs	r1, #1
 800c680:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c684:	2b30      	cmp	r3, #48	@ 0x30
 800c686:	d0f9      	beq.n	800c67c <_dtoa_r+0x554>
 800c688:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c68c:	e027      	b.n	800c6de <_dtoa_r+0x5b6>
 800c68e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c692:	e7d5      	b.n	800c640 <_dtoa_r+0x518>
 800c694:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c698:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c69c:	463e      	mov	r6, r7
 800c69e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c6a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c6a6:	ee15 3a10 	vmov	r3, s10
 800c6aa:	3330      	adds	r3, #48	@ 0x30
 800c6ac:	f806 3b01 	strb.w	r3, [r6], #1
 800c6b0:	1bf3      	subs	r3, r6, r7
 800c6b2:	459a      	cmp	sl, r3
 800c6b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c6b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c6bc:	d132      	bne.n	800c724 <_dtoa_r+0x5fc>
 800c6be:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c6c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ca:	dc18      	bgt.n	800c6fe <_dtoa_r+0x5d6>
 800c6cc:	eeb4 7b46 	vcmp.f64	d7, d6
 800c6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d4:	d103      	bne.n	800c6de <_dtoa_r+0x5b6>
 800c6d6:	ee15 3a10 	vmov	r3, s10
 800c6da:	07db      	lsls	r3, r3, #31
 800c6dc:	d40f      	bmi.n	800c6fe <_dtoa_r+0x5d6>
 800c6de:	9901      	ldr	r1, [sp, #4]
 800c6e0:	4648      	mov	r0, r9
 800c6e2:	f000 fbbf 	bl	800ce64 <_Bfree>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c6ea:	7033      	strb	r3, [r6, #0]
 800c6ec:	f108 0301 	add.w	r3, r8, #1
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 824b 	beq.w	800cb90 <_dtoa_r+0xa68>
 800c6fa:	601e      	str	r6, [r3, #0]
 800c6fc:	e248      	b.n	800cb90 <_dtoa_r+0xa68>
 800c6fe:	f8cd 8014 	str.w	r8, [sp, #20]
 800c702:	4633      	mov	r3, r6
 800c704:	461e      	mov	r6, r3
 800c706:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c70a:	2a39      	cmp	r2, #57	@ 0x39
 800c70c:	d106      	bne.n	800c71c <_dtoa_r+0x5f4>
 800c70e:	429f      	cmp	r7, r3
 800c710:	d1f8      	bne.n	800c704 <_dtoa_r+0x5dc>
 800c712:	9a05      	ldr	r2, [sp, #20]
 800c714:	3201      	adds	r2, #1
 800c716:	9205      	str	r2, [sp, #20]
 800c718:	2230      	movs	r2, #48	@ 0x30
 800c71a:	703a      	strb	r2, [r7, #0]
 800c71c:	781a      	ldrb	r2, [r3, #0]
 800c71e:	3201      	adds	r2, #1
 800c720:	701a      	strb	r2, [r3, #0]
 800c722:	e7b1      	b.n	800c688 <_dtoa_r+0x560>
 800c724:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c728:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c730:	d1b5      	bne.n	800c69e <_dtoa_r+0x576>
 800c732:	e7d4      	b.n	800c6de <_dtoa_r+0x5b6>
 800c734:	0800e868 	.word	0x0800e868
 800c738:	0800e840 	.word	0x0800e840
 800c73c:	9908      	ldr	r1, [sp, #32]
 800c73e:	2900      	cmp	r1, #0
 800c740:	f000 80e9 	beq.w	800c916 <_dtoa_r+0x7ee>
 800c744:	9907      	ldr	r1, [sp, #28]
 800c746:	2901      	cmp	r1, #1
 800c748:	f300 80cb 	bgt.w	800c8e2 <_dtoa_r+0x7ba>
 800c74c:	2d00      	cmp	r5, #0
 800c74e:	f000 80c4 	beq.w	800c8da <_dtoa_r+0x7b2>
 800c752:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c756:	9e04      	ldr	r6, [sp, #16]
 800c758:	461c      	mov	r4, r3
 800c75a:	9305      	str	r3, [sp, #20]
 800c75c:	9b04      	ldr	r3, [sp, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	9304      	str	r3, [sp, #16]
 800c762:	9b06      	ldr	r3, [sp, #24]
 800c764:	2101      	movs	r1, #1
 800c766:	4413      	add	r3, r2
 800c768:	4648      	mov	r0, r9
 800c76a:	9306      	str	r3, [sp, #24]
 800c76c:	f000 fc2e 	bl	800cfcc <__i2b>
 800c770:	9b05      	ldr	r3, [sp, #20]
 800c772:	4605      	mov	r5, r0
 800c774:	b166      	cbz	r6, 800c790 <_dtoa_r+0x668>
 800c776:	9a06      	ldr	r2, [sp, #24]
 800c778:	2a00      	cmp	r2, #0
 800c77a:	dd09      	ble.n	800c790 <_dtoa_r+0x668>
 800c77c:	42b2      	cmp	r2, r6
 800c77e:	9904      	ldr	r1, [sp, #16]
 800c780:	bfa8      	it	ge
 800c782:	4632      	movge	r2, r6
 800c784:	1a89      	subs	r1, r1, r2
 800c786:	9104      	str	r1, [sp, #16]
 800c788:	9906      	ldr	r1, [sp, #24]
 800c78a:	1ab6      	subs	r6, r6, r2
 800c78c:	1a8a      	subs	r2, r1, r2
 800c78e:	9206      	str	r2, [sp, #24]
 800c790:	b30b      	cbz	r3, 800c7d6 <_dtoa_r+0x6ae>
 800c792:	9a08      	ldr	r2, [sp, #32]
 800c794:	2a00      	cmp	r2, #0
 800c796:	f000 80c5 	beq.w	800c924 <_dtoa_r+0x7fc>
 800c79a:	2c00      	cmp	r4, #0
 800c79c:	f000 80bf 	beq.w	800c91e <_dtoa_r+0x7f6>
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	4622      	mov	r2, r4
 800c7a4:	4648      	mov	r0, r9
 800c7a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7a8:	f000 fcc8 	bl	800d13c <__pow5mult>
 800c7ac:	9a01      	ldr	r2, [sp, #4]
 800c7ae:	4601      	mov	r1, r0
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	4648      	mov	r0, r9
 800c7b4:	f000 fc20 	bl	800cff8 <__multiply>
 800c7b8:	9901      	ldr	r1, [sp, #4]
 800c7ba:	9005      	str	r0, [sp, #20]
 800c7bc:	4648      	mov	r0, r9
 800c7be:	f000 fb51 	bl	800ce64 <_Bfree>
 800c7c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7c4:	1b1b      	subs	r3, r3, r4
 800c7c6:	f000 80b0 	beq.w	800c92a <_dtoa_r+0x802>
 800c7ca:	9905      	ldr	r1, [sp, #20]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	4648      	mov	r0, r9
 800c7d0:	f000 fcb4 	bl	800d13c <__pow5mult>
 800c7d4:	9001      	str	r0, [sp, #4]
 800c7d6:	2101      	movs	r1, #1
 800c7d8:	4648      	mov	r0, r9
 800c7da:	f000 fbf7 	bl	800cfcc <__i2b>
 800c7de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 81da 	beq.w	800cb9c <_dtoa_r+0xa74>
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	4648      	mov	r0, r9
 800c7ee:	f000 fca5 	bl	800d13c <__pow5mult>
 800c7f2:	9b07      	ldr	r3, [sp, #28]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	f300 80a0 	bgt.w	800c93c <_dtoa_r+0x814>
 800c7fc:	9b02      	ldr	r3, [sp, #8]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f040 8096 	bne.w	800c930 <_dtoa_r+0x808>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c80a:	2a00      	cmp	r2, #0
 800c80c:	f040 8092 	bne.w	800c934 <_dtoa_r+0x80c>
 800c810:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c814:	0d12      	lsrs	r2, r2, #20
 800c816:	0512      	lsls	r2, r2, #20
 800c818:	2a00      	cmp	r2, #0
 800c81a:	f000 808d 	beq.w	800c938 <_dtoa_r+0x810>
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	3301      	adds	r3, #1
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	9b06      	ldr	r3, [sp, #24]
 800c826:	3301      	adds	r3, #1
 800c828:	9306      	str	r3, [sp, #24]
 800c82a:	2301      	movs	r3, #1
 800c82c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c82e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c830:	2b00      	cmp	r3, #0
 800c832:	f000 81b9 	beq.w	800cba8 <_dtoa_r+0xa80>
 800c836:	6922      	ldr	r2, [r4, #16]
 800c838:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c83c:	6910      	ldr	r0, [r2, #16]
 800c83e:	f000 fb79 	bl	800cf34 <__hi0bits>
 800c842:	f1c0 0020 	rsb	r0, r0, #32
 800c846:	9b06      	ldr	r3, [sp, #24]
 800c848:	4418      	add	r0, r3
 800c84a:	f010 001f 	ands.w	r0, r0, #31
 800c84e:	f000 8081 	beq.w	800c954 <_dtoa_r+0x82c>
 800c852:	f1c0 0220 	rsb	r2, r0, #32
 800c856:	2a04      	cmp	r2, #4
 800c858:	dd73      	ble.n	800c942 <_dtoa_r+0x81a>
 800c85a:	9b04      	ldr	r3, [sp, #16]
 800c85c:	f1c0 001c 	rsb	r0, r0, #28
 800c860:	4403      	add	r3, r0
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	9b06      	ldr	r3, [sp, #24]
 800c866:	4406      	add	r6, r0
 800c868:	4403      	add	r3, r0
 800c86a:	9306      	str	r3, [sp, #24]
 800c86c:	9b04      	ldr	r3, [sp, #16]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	dd05      	ble.n	800c87e <_dtoa_r+0x756>
 800c872:	9901      	ldr	r1, [sp, #4]
 800c874:	461a      	mov	r2, r3
 800c876:	4648      	mov	r0, r9
 800c878:	f000 fcba 	bl	800d1f0 <__lshift>
 800c87c:	9001      	str	r0, [sp, #4]
 800c87e:	9b06      	ldr	r3, [sp, #24]
 800c880:	2b00      	cmp	r3, #0
 800c882:	dd05      	ble.n	800c890 <_dtoa_r+0x768>
 800c884:	4621      	mov	r1, r4
 800c886:	461a      	mov	r2, r3
 800c888:	4648      	mov	r0, r9
 800c88a:	f000 fcb1 	bl	800d1f0 <__lshift>
 800c88e:	4604      	mov	r4, r0
 800c890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c892:	2b00      	cmp	r3, #0
 800c894:	d060      	beq.n	800c958 <_dtoa_r+0x830>
 800c896:	9801      	ldr	r0, [sp, #4]
 800c898:	4621      	mov	r1, r4
 800c89a:	f000 fd15 	bl	800d2c8 <__mcmp>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	da5a      	bge.n	800c958 <_dtoa_r+0x830>
 800c8a2:	f108 33ff 	add.w	r3, r8, #4294967295
 800c8a6:	9305      	str	r3, [sp, #20]
 800c8a8:	9901      	ldr	r1, [sp, #4]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	220a      	movs	r2, #10
 800c8ae:	4648      	mov	r0, r9
 800c8b0:	f000 fafa 	bl	800cea8 <__multadd>
 800c8b4:	9b08      	ldr	r3, [sp, #32]
 800c8b6:	9001      	str	r0, [sp, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 8177 	beq.w	800cbac <_dtoa_r+0xa84>
 800c8be:	4629      	mov	r1, r5
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	220a      	movs	r2, #10
 800c8c4:	4648      	mov	r0, r9
 800c8c6:	f000 faef 	bl	800cea8 <__multadd>
 800c8ca:	f1bb 0f00 	cmp.w	fp, #0
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	dc6e      	bgt.n	800c9b0 <_dtoa_r+0x888>
 800c8d2:	9b07      	ldr	r3, [sp, #28]
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	dc48      	bgt.n	800c96a <_dtoa_r+0x842>
 800c8d8:	e06a      	b.n	800c9b0 <_dtoa_r+0x888>
 800c8da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c8e0:	e739      	b.n	800c756 <_dtoa_r+0x62e>
 800c8e2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c8e6:	42a3      	cmp	r3, r4
 800c8e8:	db07      	blt.n	800c8fa <_dtoa_r+0x7d2>
 800c8ea:	f1ba 0f00 	cmp.w	sl, #0
 800c8ee:	eba3 0404 	sub.w	r4, r3, r4
 800c8f2:	db0b      	blt.n	800c90c <_dtoa_r+0x7e4>
 800c8f4:	9e04      	ldr	r6, [sp, #16]
 800c8f6:	4652      	mov	r2, sl
 800c8f8:	e72f      	b.n	800c75a <_dtoa_r+0x632>
 800c8fa:	1ae2      	subs	r2, r4, r3
 800c8fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8fe:	9e04      	ldr	r6, [sp, #16]
 800c900:	4413      	add	r3, r2
 800c902:	930a      	str	r3, [sp, #40]	@ 0x28
 800c904:	4652      	mov	r2, sl
 800c906:	4623      	mov	r3, r4
 800c908:	2400      	movs	r4, #0
 800c90a:	e726      	b.n	800c75a <_dtoa_r+0x632>
 800c90c:	9a04      	ldr	r2, [sp, #16]
 800c90e:	eba2 060a 	sub.w	r6, r2, sl
 800c912:	2200      	movs	r2, #0
 800c914:	e721      	b.n	800c75a <_dtoa_r+0x632>
 800c916:	9e04      	ldr	r6, [sp, #16]
 800c918:	9d08      	ldr	r5, [sp, #32]
 800c91a:	461c      	mov	r4, r3
 800c91c:	e72a      	b.n	800c774 <_dtoa_r+0x64c>
 800c91e:	9a01      	ldr	r2, [sp, #4]
 800c920:	9205      	str	r2, [sp, #20]
 800c922:	e752      	b.n	800c7ca <_dtoa_r+0x6a2>
 800c924:	9901      	ldr	r1, [sp, #4]
 800c926:	461a      	mov	r2, r3
 800c928:	e751      	b.n	800c7ce <_dtoa_r+0x6a6>
 800c92a:	9b05      	ldr	r3, [sp, #20]
 800c92c:	9301      	str	r3, [sp, #4]
 800c92e:	e752      	b.n	800c7d6 <_dtoa_r+0x6ae>
 800c930:	2300      	movs	r3, #0
 800c932:	e77b      	b.n	800c82c <_dtoa_r+0x704>
 800c934:	9b02      	ldr	r3, [sp, #8]
 800c936:	e779      	b.n	800c82c <_dtoa_r+0x704>
 800c938:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c93a:	e778      	b.n	800c82e <_dtoa_r+0x706>
 800c93c:	2300      	movs	r3, #0
 800c93e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c940:	e779      	b.n	800c836 <_dtoa_r+0x70e>
 800c942:	d093      	beq.n	800c86c <_dtoa_r+0x744>
 800c944:	9b04      	ldr	r3, [sp, #16]
 800c946:	321c      	adds	r2, #28
 800c948:	4413      	add	r3, r2
 800c94a:	9304      	str	r3, [sp, #16]
 800c94c:	9b06      	ldr	r3, [sp, #24]
 800c94e:	4416      	add	r6, r2
 800c950:	4413      	add	r3, r2
 800c952:	e78a      	b.n	800c86a <_dtoa_r+0x742>
 800c954:	4602      	mov	r2, r0
 800c956:	e7f5      	b.n	800c944 <_dtoa_r+0x81c>
 800c958:	f1ba 0f00 	cmp.w	sl, #0
 800c95c:	f8cd 8014 	str.w	r8, [sp, #20]
 800c960:	46d3      	mov	fp, sl
 800c962:	dc21      	bgt.n	800c9a8 <_dtoa_r+0x880>
 800c964:	9b07      	ldr	r3, [sp, #28]
 800c966:	2b02      	cmp	r3, #2
 800c968:	dd1e      	ble.n	800c9a8 <_dtoa_r+0x880>
 800c96a:	f1bb 0f00 	cmp.w	fp, #0
 800c96e:	f47f addc 	bne.w	800c52a <_dtoa_r+0x402>
 800c972:	4621      	mov	r1, r4
 800c974:	465b      	mov	r3, fp
 800c976:	2205      	movs	r2, #5
 800c978:	4648      	mov	r0, r9
 800c97a:	f000 fa95 	bl	800cea8 <__multadd>
 800c97e:	4601      	mov	r1, r0
 800c980:	4604      	mov	r4, r0
 800c982:	9801      	ldr	r0, [sp, #4]
 800c984:	f000 fca0 	bl	800d2c8 <__mcmp>
 800c988:	2800      	cmp	r0, #0
 800c98a:	f77f adce 	ble.w	800c52a <_dtoa_r+0x402>
 800c98e:	463e      	mov	r6, r7
 800c990:	2331      	movs	r3, #49	@ 0x31
 800c992:	f806 3b01 	strb.w	r3, [r6], #1
 800c996:	9b05      	ldr	r3, [sp, #20]
 800c998:	3301      	adds	r3, #1
 800c99a:	9305      	str	r3, [sp, #20]
 800c99c:	e5c9      	b.n	800c532 <_dtoa_r+0x40a>
 800c99e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c9a2:	4654      	mov	r4, sl
 800c9a4:	4625      	mov	r5, r4
 800c9a6:	e7f2      	b.n	800c98e <_dtoa_r+0x866>
 800c9a8:	9b08      	ldr	r3, [sp, #32]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 8102 	beq.w	800cbb4 <_dtoa_r+0xa8c>
 800c9b0:	2e00      	cmp	r6, #0
 800c9b2:	dd05      	ble.n	800c9c0 <_dtoa_r+0x898>
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4632      	mov	r2, r6
 800c9b8:	4648      	mov	r0, r9
 800c9ba:	f000 fc19 	bl	800d1f0 <__lshift>
 800c9be:	4605      	mov	r5, r0
 800c9c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d058      	beq.n	800ca78 <_dtoa_r+0x950>
 800c9c6:	6869      	ldr	r1, [r5, #4]
 800c9c8:	4648      	mov	r0, r9
 800c9ca:	f000 fa0b 	bl	800cde4 <_Balloc>
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	b928      	cbnz	r0, 800c9de <_dtoa_r+0x8b6>
 800c9d2:	4b82      	ldr	r3, [pc, #520]	@ (800cbdc <_dtoa_r+0xab4>)
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c9da:	f7ff bbbe 	b.w	800c15a <_dtoa_r+0x32>
 800c9de:	692a      	ldr	r2, [r5, #16]
 800c9e0:	3202      	adds	r2, #2
 800c9e2:	0092      	lsls	r2, r2, #2
 800c9e4:	f105 010c 	add.w	r1, r5, #12
 800c9e8:	300c      	adds	r0, #12
 800c9ea:	f7ff fb06 	bl	800bffa <memcpy>
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	4631      	mov	r1, r6
 800c9f2:	4648      	mov	r0, r9
 800c9f4:	f000 fbfc 	bl	800d1f0 <__lshift>
 800c9f8:	1c7b      	adds	r3, r7, #1
 800c9fa:	9304      	str	r3, [sp, #16]
 800c9fc:	eb07 030b 	add.w	r3, r7, fp
 800ca00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca02:	9b02      	ldr	r3, [sp, #8]
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	46a8      	mov	r8, r5
 800ca0a:	9308      	str	r3, [sp, #32]
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	9b04      	ldr	r3, [sp, #16]
 800ca10:	9801      	ldr	r0, [sp, #4]
 800ca12:	4621      	mov	r1, r4
 800ca14:	f103 3bff 	add.w	fp, r3, #4294967295
 800ca18:	f7ff fafd 	bl	800c016 <quorem>
 800ca1c:	4641      	mov	r1, r8
 800ca1e:	9002      	str	r0, [sp, #8]
 800ca20:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ca24:	9801      	ldr	r0, [sp, #4]
 800ca26:	f000 fc4f 	bl	800d2c8 <__mcmp>
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	9006      	str	r0, [sp, #24]
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4648      	mov	r0, r9
 800ca32:	f000 fc65 	bl	800d300 <__mdiff>
 800ca36:	68c2      	ldr	r2, [r0, #12]
 800ca38:	4606      	mov	r6, r0
 800ca3a:	b9fa      	cbnz	r2, 800ca7c <_dtoa_r+0x954>
 800ca3c:	4601      	mov	r1, r0
 800ca3e:	9801      	ldr	r0, [sp, #4]
 800ca40:	f000 fc42 	bl	800d2c8 <__mcmp>
 800ca44:	4602      	mov	r2, r0
 800ca46:	4631      	mov	r1, r6
 800ca48:	4648      	mov	r0, r9
 800ca4a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ca4c:	f000 fa0a 	bl	800ce64 <_Bfree>
 800ca50:	9b07      	ldr	r3, [sp, #28]
 800ca52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca54:	9e04      	ldr	r6, [sp, #16]
 800ca56:	ea42 0103 	orr.w	r1, r2, r3
 800ca5a:	9b08      	ldr	r3, [sp, #32]
 800ca5c:	4319      	orrs	r1, r3
 800ca5e:	d10f      	bne.n	800ca80 <_dtoa_r+0x958>
 800ca60:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ca64:	d028      	beq.n	800cab8 <_dtoa_r+0x990>
 800ca66:	9b06      	ldr	r3, [sp, #24]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	dd02      	ble.n	800ca72 <_dtoa_r+0x94a>
 800ca6c:	9b02      	ldr	r3, [sp, #8]
 800ca6e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ca72:	f88b a000 	strb.w	sl, [fp]
 800ca76:	e55e      	b.n	800c536 <_dtoa_r+0x40e>
 800ca78:	4628      	mov	r0, r5
 800ca7a:	e7bd      	b.n	800c9f8 <_dtoa_r+0x8d0>
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	e7e2      	b.n	800ca46 <_dtoa_r+0x91e>
 800ca80:	9b06      	ldr	r3, [sp, #24]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	db04      	blt.n	800ca90 <_dtoa_r+0x968>
 800ca86:	9907      	ldr	r1, [sp, #28]
 800ca88:	430b      	orrs	r3, r1
 800ca8a:	9908      	ldr	r1, [sp, #32]
 800ca8c:	430b      	orrs	r3, r1
 800ca8e:	d120      	bne.n	800cad2 <_dtoa_r+0x9aa>
 800ca90:	2a00      	cmp	r2, #0
 800ca92:	ddee      	ble.n	800ca72 <_dtoa_r+0x94a>
 800ca94:	9901      	ldr	r1, [sp, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	4648      	mov	r0, r9
 800ca9a:	f000 fba9 	bl	800d1f0 <__lshift>
 800ca9e:	4621      	mov	r1, r4
 800caa0:	9001      	str	r0, [sp, #4]
 800caa2:	f000 fc11 	bl	800d2c8 <__mcmp>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	dc03      	bgt.n	800cab2 <_dtoa_r+0x98a>
 800caaa:	d1e2      	bne.n	800ca72 <_dtoa_r+0x94a>
 800caac:	f01a 0f01 	tst.w	sl, #1
 800cab0:	d0df      	beq.n	800ca72 <_dtoa_r+0x94a>
 800cab2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cab6:	d1d9      	bne.n	800ca6c <_dtoa_r+0x944>
 800cab8:	2339      	movs	r3, #57	@ 0x39
 800caba:	f88b 3000 	strb.w	r3, [fp]
 800cabe:	4633      	mov	r3, r6
 800cac0:	461e      	mov	r6, r3
 800cac2:	3b01      	subs	r3, #1
 800cac4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cac8:	2a39      	cmp	r2, #57	@ 0x39
 800caca:	d052      	beq.n	800cb72 <_dtoa_r+0xa4a>
 800cacc:	3201      	adds	r2, #1
 800cace:	701a      	strb	r2, [r3, #0]
 800cad0:	e531      	b.n	800c536 <_dtoa_r+0x40e>
 800cad2:	2a00      	cmp	r2, #0
 800cad4:	dd07      	ble.n	800cae6 <_dtoa_r+0x9be>
 800cad6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cada:	d0ed      	beq.n	800cab8 <_dtoa_r+0x990>
 800cadc:	f10a 0301 	add.w	r3, sl, #1
 800cae0:	f88b 3000 	strb.w	r3, [fp]
 800cae4:	e527      	b.n	800c536 <_dtoa_r+0x40e>
 800cae6:	9b04      	ldr	r3, [sp, #16]
 800cae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caea:	f803 ac01 	strb.w	sl, [r3, #-1]
 800caee:	4293      	cmp	r3, r2
 800caf0:	d029      	beq.n	800cb46 <_dtoa_r+0xa1e>
 800caf2:	9901      	ldr	r1, [sp, #4]
 800caf4:	2300      	movs	r3, #0
 800caf6:	220a      	movs	r2, #10
 800caf8:	4648      	mov	r0, r9
 800cafa:	f000 f9d5 	bl	800cea8 <__multadd>
 800cafe:	45a8      	cmp	r8, r5
 800cb00:	9001      	str	r0, [sp, #4]
 800cb02:	f04f 0300 	mov.w	r3, #0
 800cb06:	f04f 020a 	mov.w	r2, #10
 800cb0a:	4641      	mov	r1, r8
 800cb0c:	4648      	mov	r0, r9
 800cb0e:	d107      	bne.n	800cb20 <_dtoa_r+0x9f8>
 800cb10:	f000 f9ca 	bl	800cea8 <__multadd>
 800cb14:	4680      	mov	r8, r0
 800cb16:	4605      	mov	r5, r0
 800cb18:	9b04      	ldr	r3, [sp, #16]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	9304      	str	r3, [sp, #16]
 800cb1e:	e776      	b.n	800ca0e <_dtoa_r+0x8e6>
 800cb20:	f000 f9c2 	bl	800cea8 <__multadd>
 800cb24:	4629      	mov	r1, r5
 800cb26:	4680      	mov	r8, r0
 800cb28:	2300      	movs	r3, #0
 800cb2a:	220a      	movs	r2, #10
 800cb2c:	4648      	mov	r0, r9
 800cb2e:	f000 f9bb 	bl	800cea8 <__multadd>
 800cb32:	4605      	mov	r5, r0
 800cb34:	e7f0      	b.n	800cb18 <_dtoa_r+0x9f0>
 800cb36:	f1bb 0f00 	cmp.w	fp, #0
 800cb3a:	bfcc      	ite	gt
 800cb3c:	465e      	movgt	r6, fp
 800cb3e:	2601      	movle	r6, #1
 800cb40:	443e      	add	r6, r7
 800cb42:	f04f 0800 	mov.w	r8, #0
 800cb46:	9901      	ldr	r1, [sp, #4]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	4648      	mov	r0, r9
 800cb4c:	f000 fb50 	bl	800d1f0 <__lshift>
 800cb50:	4621      	mov	r1, r4
 800cb52:	9001      	str	r0, [sp, #4]
 800cb54:	f000 fbb8 	bl	800d2c8 <__mcmp>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	dcb0      	bgt.n	800cabe <_dtoa_r+0x996>
 800cb5c:	d102      	bne.n	800cb64 <_dtoa_r+0xa3c>
 800cb5e:	f01a 0f01 	tst.w	sl, #1
 800cb62:	d1ac      	bne.n	800cabe <_dtoa_r+0x996>
 800cb64:	4633      	mov	r3, r6
 800cb66:	461e      	mov	r6, r3
 800cb68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb6c:	2a30      	cmp	r2, #48	@ 0x30
 800cb6e:	d0fa      	beq.n	800cb66 <_dtoa_r+0xa3e>
 800cb70:	e4e1      	b.n	800c536 <_dtoa_r+0x40e>
 800cb72:	429f      	cmp	r7, r3
 800cb74:	d1a4      	bne.n	800cac0 <_dtoa_r+0x998>
 800cb76:	9b05      	ldr	r3, [sp, #20]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	9305      	str	r3, [sp, #20]
 800cb7c:	2331      	movs	r3, #49	@ 0x31
 800cb7e:	703b      	strb	r3, [r7, #0]
 800cb80:	e4d9      	b.n	800c536 <_dtoa_r+0x40e>
 800cb82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb84:	4f16      	ldr	r7, [pc, #88]	@ (800cbe0 <_dtoa_r+0xab8>)
 800cb86:	b11b      	cbz	r3, 800cb90 <_dtoa_r+0xa68>
 800cb88:	f107 0308 	add.w	r3, r7, #8
 800cb8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	4638      	mov	r0, r7
 800cb92:	b011      	add	sp, #68	@ 0x44
 800cb94:	ecbd 8b02 	vpop	{d8}
 800cb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9c:	9b07      	ldr	r3, [sp, #28]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	f77f ae2c 	ble.w	800c7fc <_dtoa_r+0x6d4>
 800cba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cba6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cba8:	2001      	movs	r0, #1
 800cbaa:	e64c      	b.n	800c846 <_dtoa_r+0x71e>
 800cbac:	f1bb 0f00 	cmp.w	fp, #0
 800cbb0:	f77f aed8 	ble.w	800c964 <_dtoa_r+0x83c>
 800cbb4:	463e      	mov	r6, r7
 800cbb6:	9801      	ldr	r0, [sp, #4]
 800cbb8:	4621      	mov	r1, r4
 800cbba:	f7ff fa2c 	bl	800c016 <quorem>
 800cbbe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cbc2:	f806 ab01 	strb.w	sl, [r6], #1
 800cbc6:	1bf2      	subs	r2, r6, r7
 800cbc8:	4593      	cmp	fp, r2
 800cbca:	ddb4      	ble.n	800cb36 <_dtoa_r+0xa0e>
 800cbcc:	9901      	ldr	r1, [sp, #4]
 800cbce:	2300      	movs	r3, #0
 800cbd0:	220a      	movs	r2, #10
 800cbd2:	4648      	mov	r0, r9
 800cbd4:	f000 f968 	bl	800cea8 <__multadd>
 800cbd8:	9001      	str	r0, [sp, #4]
 800cbda:	e7ec      	b.n	800cbb6 <_dtoa_r+0xa8e>
 800cbdc:	0800e770 	.word	0x0800e770
 800cbe0:	0800e6f4 	.word	0x0800e6f4

0800cbe4 <_free_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	2900      	cmp	r1, #0
 800cbea:	d041      	beq.n	800cc70 <_free_r+0x8c>
 800cbec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf0:	1f0c      	subs	r4, r1, #4
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	bfb8      	it	lt
 800cbf6:	18e4      	addlt	r4, r4, r3
 800cbf8:	f000 f8e8 	bl	800cdcc <__malloc_lock>
 800cbfc:	4a1d      	ldr	r2, [pc, #116]	@ (800cc74 <_free_r+0x90>)
 800cbfe:	6813      	ldr	r3, [r2, #0]
 800cc00:	b933      	cbnz	r3, 800cc10 <_free_r+0x2c>
 800cc02:	6063      	str	r3, [r4, #4]
 800cc04:	6014      	str	r4, [r2, #0]
 800cc06:	4628      	mov	r0, r5
 800cc08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc0c:	f000 b8e4 	b.w	800cdd8 <__malloc_unlock>
 800cc10:	42a3      	cmp	r3, r4
 800cc12:	d908      	bls.n	800cc26 <_free_r+0x42>
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	1821      	adds	r1, r4, r0
 800cc18:	428b      	cmp	r3, r1
 800cc1a:	bf01      	itttt	eq
 800cc1c:	6819      	ldreq	r1, [r3, #0]
 800cc1e:	685b      	ldreq	r3, [r3, #4]
 800cc20:	1809      	addeq	r1, r1, r0
 800cc22:	6021      	streq	r1, [r4, #0]
 800cc24:	e7ed      	b.n	800cc02 <_free_r+0x1e>
 800cc26:	461a      	mov	r2, r3
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	b10b      	cbz	r3, 800cc30 <_free_r+0x4c>
 800cc2c:	42a3      	cmp	r3, r4
 800cc2e:	d9fa      	bls.n	800cc26 <_free_r+0x42>
 800cc30:	6811      	ldr	r1, [r2, #0]
 800cc32:	1850      	adds	r0, r2, r1
 800cc34:	42a0      	cmp	r0, r4
 800cc36:	d10b      	bne.n	800cc50 <_free_r+0x6c>
 800cc38:	6820      	ldr	r0, [r4, #0]
 800cc3a:	4401      	add	r1, r0
 800cc3c:	1850      	adds	r0, r2, r1
 800cc3e:	4283      	cmp	r3, r0
 800cc40:	6011      	str	r1, [r2, #0]
 800cc42:	d1e0      	bne.n	800cc06 <_free_r+0x22>
 800cc44:	6818      	ldr	r0, [r3, #0]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	6053      	str	r3, [r2, #4]
 800cc4a:	4408      	add	r0, r1
 800cc4c:	6010      	str	r0, [r2, #0]
 800cc4e:	e7da      	b.n	800cc06 <_free_r+0x22>
 800cc50:	d902      	bls.n	800cc58 <_free_r+0x74>
 800cc52:	230c      	movs	r3, #12
 800cc54:	602b      	str	r3, [r5, #0]
 800cc56:	e7d6      	b.n	800cc06 <_free_r+0x22>
 800cc58:	6820      	ldr	r0, [r4, #0]
 800cc5a:	1821      	adds	r1, r4, r0
 800cc5c:	428b      	cmp	r3, r1
 800cc5e:	bf04      	itt	eq
 800cc60:	6819      	ldreq	r1, [r3, #0]
 800cc62:	685b      	ldreq	r3, [r3, #4]
 800cc64:	6063      	str	r3, [r4, #4]
 800cc66:	bf04      	itt	eq
 800cc68:	1809      	addeq	r1, r1, r0
 800cc6a:	6021      	streq	r1, [r4, #0]
 800cc6c:	6054      	str	r4, [r2, #4]
 800cc6e:	e7ca      	b.n	800cc06 <_free_r+0x22>
 800cc70:	bd38      	pop	{r3, r4, r5, pc}
 800cc72:	bf00      	nop
 800cc74:	24000ae0 	.word	0x24000ae0

0800cc78 <malloc>:
 800cc78:	4b02      	ldr	r3, [pc, #8]	@ (800cc84 <malloc+0xc>)
 800cc7a:	4601      	mov	r1, r0
 800cc7c:	6818      	ldr	r0, [r3, #0]
 800cc7e:	f000 b825 	b.w	800cccc <_malloc_r>
 800cc82:	bf00      	nop
 800cc84:	2400003c 	.word	0x2400003c

0800cc88 <sbrk_aligned>:
 800cc88:	b570      	push	{r4, r5, r6, lr}
 800cc8a:	4e0f      	ldr	r6, [pc, #60]	@ (800ccc8 <sbrk_aligned+0x40>)
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	6831      	ldr	r1, [r6, #0]
 800cc90:	4605      	mov	r5, r0
 800cc92:	b911      	cbnz	r1, 800cc9a <sbrk_aligned+0x12>
 800cc94:	f001 f838 	bl	800dd08 <_sbrk_r>
 800cc98:	6030      	str	r0, [r6, #0]
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	f001 f833 	bl	800dd08 <_sbrk_r>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	d103      	bne.n	800ccae <sbrk_aligned+0x26>
 800cca6:	f04f 34ff 	mov.w	r4, #4294967295
 800ccaa:	4620      	mov	r0, r4
 800ccac:	bd70      	pop	{r4, r5, r6, pc}
 800ccae:	1cc4      	adds	r4, r0, #3
 800ccb0:	f024 0403 	bic.w	r4, r4, #3
 800ccb4:	42a0      	cmp	r0, r4
 800ccb6:	d0f8      	beq.n	800ccaa <sbrk_aligned+0x22>
 800ccb8:	1a21      	subs	r1, r4, r0
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f001 f824 	bl	800dd08 <_sbrk_r>
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	d1f2      	bne.n	800ccaa <sbrk_aligned+0x22>
 800ccc4:	e7ef      	b.n	800cca6 <sbrk_aligned+0x1e>
 800ccc6:	bf00      	nop
 800ccc8:	24000adc 	.word	0x24000adc

0800cccc <_malloc_r>:
 800cccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd0:	1ccd      	adds	r5, r1, #3
 800ccd2:	f025 0503 	bic.w	r5, r5, #3
 800ccd6:	3508      	adds	r5, #8
 800ccd8:	2d0c      	cmp	r5, #12
 800ccda:	bf38      	it	cc
 800ccdc:	250c      	movcc	r5, #12
 800ccde:	2d00      	cmp	r5, #0
 800cce0:	4606      	mov	r6, r0
 800cce2:	db01      	blt.n	800cce8 <_malloc_r+0x1c>
 800cce4:	42a9      	cmp	r1, r5
 800cce6:	d904      	bls.n	800ccf2 <_malloc_r+0x26>
 800cce8:	230c      	movs	r3, #12
 800ccea:	6033      	str	r3, [r6, #0]
 800ccec:	2000      	movs	r0, #0
 800ccee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cdc8 <_malloc_r+0xfc>
 800ccf6:	f000 f869 	bl	800cdcc <__malloc_lock>
 800ccfa:	f8d8 3000 	ldr.w	r3, [r8]
 800ccfe:	461c      	mov	r4, r3
 800cd00:	bb44      	cbnz	r4, 800cd54 <_malloc_r+0x88>
 800cd02:	4629      	mov	r1, r5
 800cd04:	4630      	mov	r0, r6
 800cd06:	f7ff ffbf 	bl	800cc88 <sbrk_aligned>
 800cd0a:	1c43      	adds	r3, r0, #1
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	d158      	bne.n	800cdc2 <_malloc_r+0xf6>
 800cd10:	f8d8 4000 	ldr.w	r4, [r8]
 800cd14:	4627      	mov	r7, r4
 800cd16:	2f00      	cmp	r7, #0
 800cd18:	d143      	bne.n	800cda2 <_malloc_r+0xd6>
 800cd1a:	2c00      	cmp	r4, #0
 800cd1c:	d04b      	beq.n	800cdb6 <_malloc_r+0xea>
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	4639      	mov	r1, r7
 800cd22:	4630      	mov	r0, r6
 800cd24:	eb04 0903 	add.w	r9, r4, r3
 800cd28:	f000 ffee 	bl	800dd08 <_sbrk_r>
 800cd2c:	4581      	cmp	r9, r0
 800cd2e:	d142      	bne.n	800cdb6 <_malloc_r+0xea>
 800cd30:	6821      	ldr	r1, [r4, #0]
 800cd32:	1a6d      	subs	r5, r5, r1
 800cd34:	4629      	mov	r1, r5
 800cd36:	4630      	mov	r0, r6
 800cd38:	f7ff ffa6 	bl	800cc88 <sbrk_aligned>
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d03a      	beq.n	800cdb6 <_malloc_r+0xea>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	442b      	add	r3, r5
 800cd44:	6023      	str	r3, [r4, #0]
 800cd46:	f8d8 3000 	ldr.w	r3, [r8]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	bb62      	cbnz	r2, 800cda8 <_malloc_r+0xdc>
 800cd4e:	f8c8 7000 	str.w	r7, [r8]
 800cd52:	e00f      	b.n	800cd74 <_malloc_r+0xa8>
 800cd54:	6822      	ldr	r2, [r4, #0]
 800cd56:	1b52      	subs	r2, r2, r5
 800cd58:	d420      	bmi.n	800cd9c <_malloc_r+0xd0>
 800cd5a:	2a0b      	cmp	r2, #11
 800cd5c:	d917      	bls.n	800cd8e <_malloc_r+0xc2>
 800cd5e:	1961      	adds	r1, r4, r5
 800cd60:	42a3      	cmp	r3, r4
 800cd62:	6025      	str	r5, [r4, #0]
 800cd64:	bf18      	it	ne
 800cd66:	6059      	strne	r1, [r3, #4]
 800cd68:	6863      	ldr	r3, [r4, #4]
 800cd6a:	bf08      	it	eq
 800cd6c:	f8c8 1000 	streq.w	r1, [r8]
 800cd70:	5162      	str	r2, [r4, r5]
 800cd72:	604b      	str	r3, [r1, #4]
 800cd74:	4630      	mov	r0, r6
 800cd76:	f000 f82f 	bl	800cdd8 <__malloc_unlock>
 800cd7a:	f104 000b 	add.w	r0, r4, #11
 800cd7e:	1d23      	adds	r3, r4, #4
 800cd80:	f020 0007 	bic.w	r0, r0, #7
 800cd84:	1ac2      	subs	r2, r0, r3
 800cd86:	bf1c      	itt	ne
 800cd88:	1a1b      	subne	r3, r3, r0
 800cd8a:	50a3      	strne	r3, [r4, r2]
 800cd8c:	e7af      	b.n	800ccee <_malloc_r+0x22>
 800cd8e:	6862      	ldr	r2, [r4, #4]
 800cd90:	42a3      	cmp	r3, r4
 800cd92:	bf0c      	ite	eq
 800cd94:	f8c8 2000 	streq.w	r2, [r8]
 800cd98:	605a      	strne	r2, [r3, #4]
 800cd9a:	e7eb      	b.n	800cd74 <_malloc_r+0xa8>
 800cd9c:	4623      	mov	r3, r4
 800cd9e:	6864      	ldr	r4, [r4, #4]
 800cda0:	e7ae      	b.n	800cd00 <_malloc_r+0x34>
 800cda2:	463c      	mov	r4, r7
 800cda4:	687f      	ldr	r7, [r7, #4]
 800cda6:	e7b6      	b.n	800cd16 <_malloc_r+0x4a>
 800cda8:	461a      	mov	r2, r3
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	42a3      	cmp	r3, r4
 800cdae:	d1fb      	bne.n	800cda8 <_malloc_r+0xdc>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	6053      	str	r3, [r2, #4]
 800cdb4:	e7de      	b.n	800cd74 <_malloc_r+0xa8>
 800cdb6:	230c      	movs	r3, #12
 800cdb8:	6033      	str	r3, [r6, #0]
 800cdba:	4630      	mov	r0, r6
 800cdbc:	f000 f80c 	bl	800cdd8 <__malloc_unlock>
 800cdc0:	e794      	b.n	800ccec <_malloc_r+0x20>
 800cdc2:	6005      	str	r5, [r0, #0]
 800cdc4:	e7d6      	b.n	800cd74 <_malloc_r+0xa8>
 800cdc6:	bf00      	nop
 800cdc8:	24000ae0 	.word	0x24000ae0

0800cdcc <__malloc_lock>:
 800cdcc:	4801      	ldr	r0, [pc, #4]	@ (800cdd4 <__malloc_lock+0x8>)
 800cdce:	f7ff b912 	b.w	800bff6 <__retarget_lock_acquire_recursive>
 800cdd2:	bf00      	nop
 800cdd4:	24000ad8 	.word	0x24000ad8

0800cdd8 <__malloc_unlock>:
 800cdd8:	4801      	ldr	r0, [pc, #4]	@ (800cde0 <__malloc_unlock+0x8>)
 800cdda:	f7ff b90d 	b.w	800bff8 <__retarget_lock_release_recursive>
 800cdde:	bf00      	nop
 800cde0:	24000ad8 	.word	0x24000ad8

0800cde4 <_Balloc>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	69c6      	ldr	r6, [r0, #28]
 800cde8:	4604      	mov	r4, r0
 800cdea:	460d      	mov	r5, r1
 800cdec:	b976      	cbnz	r6, 800ce0c <_Balloc+0x28>
 800cdee:	2010      	movs	r0, #16
 800cdf0:	f7ff ff42 	bl	800cc78 <malloc>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	61e0      	str	r0, [r4, #28]
 800cdf8:	b920      	cbnz	r0, 800ce04 <_Balloc+0x20>
 800cdfa:	4b18      	ldr	r3, [pc, #96]	@ (800ce5c <_Balloc+0x78>)
 800cdfc:	4818      	ldr	r0, [pc, #96]	@ (800ce60 <_Balloc+0x7c>)
 800cdfe:	216b      	movs	r1, #107	@ 0x6b
 800ce00:	f000 ff92 	bl	800dd28 <__assert_func>
 800ce04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce08:	6006      	str	r6, [r0, #0]
 800ce0a:	60c6      	str	r6, [r0, #12]
 800ce0c:	69e6      	ldr	r6, [r4, #28]
 800ce0e:	68f3      	ldr	r3, [r6, #12]
 800ce10:	b183      	cbz	r3, 800ce34 <_Balloc+0x50>
 800ce12:	69e3      	ldr	r3, [r4, #28]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce1a:	b9b8      	cbnz	r0, 800ce4c <_Balloc+0x68>
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	fa01 f605 	lsl.w	r6, r1, r5
 800ce22:	1d72      	adds	r2, r6, #5
 800ce24:	0092      	lsls	r2, r2, #2
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 ff9c 	bl	800dd64 <_calloc_r>
 800ce2c:	b160      	cbz	r0, 800ce48 <_Balloc+0x64>
 800ce2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce32:	e00e      	b.n	800ce52 <_Balloc+0x6e>
 800ce34:	2221      	movs	r2, #33	@ 0x21
 800ce36:	2104      	movs	r1, #4
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 ff93 	bl	800dd64 <_calloc_r>
 800ce3e:	69e3      	ldr	r3, [r4, #28]
 800ce40:	60f0      	str	r0, [r6, #12]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1e4      	bne.n	800ce12 <_Balloc+0x2e>
 800ce48:	2000      	movs	r0, #0
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	6802      	ldr	r2, [r0, #0]
 800ce4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce52:	2300      	movs	r3, #0
 800ce54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce58:	e7f7      	b.n	800ce4a <_Balloc+0x66>
 800ce5a:	bf00      	nop
 800ce5c:	0800e701 	.word	0x0800e701
 800ce60:	0800e781 	.word	0x0800e781

0800ce64 <_Bfree>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	69c6      	ldr	r6, [r0, #28]
 800ce68:	4605      	mov	r5, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	b976      	cbnz	r6, 800ce8c <_Bfree+0x28>
 800ce6e:	2010      	movs	r0, #16
 800ce70:	f7ff ff02 	bl	800cc78 <malloc>
 800ce74:	4602      	mov	r2, r0
 800ce76:	61e8      	str	r0, [r5, #28]
 800ce78:	b920      	cbnz	r0, 800ce84 <_Bfree+0x20>
 800ce7a:	4b09      	ldr	r3, [pc, #36]	@ (800cea0 <_Bfree+0x3c>)
 800ce7c:	4809      	ldr	r0, [pc, #36]	@ (800cea4 <_Bfree+0x40>)
 800ce7e:	218f      	movs	r1, #143	@ 0x8f
 800ce80:	f000 ff52 	bl	800dd28 <__assert_func>
 800ce84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce88:	6006      	str	r6, [r0, #0]
 800ce8a:	60c6      	str	r6, [r0, #12]
 800ce8c:	b13c      	cbz	r4, 800ce9e <_Bfree+0x3a>
 800ce8e:	69eb      	ldr	r3, [r5, #28]
 800ce90:	6862      	ldr	r2, [r4, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce98:	6021      	str	r1, [r4, #0]
 800ce9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
 800cea0:	0800e701 	.word	0x0800e701
 800cea4:	0800e781 	.word	0x0800e781

0800cea8 <__multadd>:
 800cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceac:	690d      	ldr	r5, [r1, #16]
 800ceae:	4607      	mov	r7, r0
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	461e      	mov	r6, r3
 800ceb4:	f101 0c14 	add.w	ip, r1, #20
 800ceb8:	2000      	movs	r0, #0
 800ceba:	f8dc 3000 	ldr.w	r3, [ip]
 800cebe:	b299      	uxth	r1, r3
 800cec0:	fb02 6101 	mla	r1, r2, r1, r6
 800cec4:	0c1e      	lsrs	r6, r3, #16
 800cec6:	0c0b      	lsrs	r3, r1, #16
 800cec8:	fb02 3306 	mla	r3, r2, r6, r3
 800cecc:	b289      	uxth	r1, r1
 800cece:	3001      	adds	r0, #1
 800ced0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ced4:	4285      	cmp	r5, r0
 800ced6:	f84c 1b04 	str.w	r1, [ip], #4
 800ceda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cede:	dcec      	bgt.n	800ceba <__multadd+0x12>
 800cee0:	b30e      	cbz	r6, 800cf26 <__multadd+0x7e>
 800cee2:	68a3      	ldr	r3, [r4, #8]
 800cee4:	42ab      	cmp	r3, r5
 800cee6:	dc19      	bgt.n	800cf1c <__multadd+0x74>
 800cee8:	6861      	ldr	r1, [r4, #4]
 800ceea:	4638      	mov	r0, r7
 800ceec:	3101      	adds	r1, #1
 800ceee:	f7ff ff79 	bl	800cde4 <_Balloc>
 800cef2:	4680      	mov	r8, r0
 800cef4:	b928      	cbnz	r0, 800cf02 <__multadd+0x5a>
 800cef6:	4602      	mov	r2, r0
 800cef8:	4b0c      	ldr	r3, [pc, #48]	@ (800cf2c <__multadd+0x84>)
 800cefa:	480d      	ldr	r0, [pc, #52]	@ (800cf30 <__multadd+0x88>)
 800cefc:	21ba      	movs	r1, #186	@ 0xba
 800cefe:	f000 ff13 	bl	800dd28 <__assert_func>
 800cf02:	6922      	ldr	r2, [r4, #16]
 800cf04:	3202      	adds	r2, #2
 800cf06:	f104 010c 	add.w	r1, r4, #12
 800cf0a:	0092      	lsls	r2, r2, #2
 800cf0c:	300c      	adds	r0, #12
 800cf0e:	f7ff f874 	bl	800bffa <memcpy>
 800cf12:	4621      	mov	r1, r4
 800cf14:	4638      	mov	r0, r7
 800cf16:	f7ff ffa5 	bl	800ce64 <_Bfree>
 800cf1a:	4644      	mov	r4, r8
 800cf1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf20:	3501      	adds	r5, #1
 800cf22:	615e      	str	r6, [r3, #20]
 800cf24:	6125      	str	r5, [r4, #16]
 800cf26:	4620      	mov	r0, r4
 800cf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2c:	0800e770 	.word	0x0800e770
 800cf30:	0800e781 	.word	0x0800e781

0800cf34 <__hi0bits>:
 800cf34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf38:	4603      	mov	r3, r0
 800cf3a:	bf36      	itet	cc
 800cf3c:	0403      	lslcc	r3, r0, #16
 800cf3e:	2000      	movcs	r0, #0
 800cf40:	2010      	movcc	r0, #16
 800cf42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf46:	bf3c      	itt	cc
 800cf48:	021b      	lslcc	r3, r3, #8
 800cf4a:	3008      	addcc	r0, #8
 800cf4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf50:	bf3c      	itt	cc
 800cf52:	011b      	lslcc	r3, r3, #4
 800cf54:	3004      	addcc	r0, #4
 800cf56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf5a:	bf3c      	itt	cc
 800cf5c:	009b      	lslcc	r3, r3, #2
 800cf5e:	3002      	addcc	r0, #2
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	db05      	blt.n	800cf70 <__hi0bits+0x3c>
 800cf64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf68:	f100 0001 	add.w	r0, r0, #1
 800cf6c:	bf08      	it	eq
 800cf6e:	2020      	moveq	r0, #32
 800cf70:	4770      	bx	lr

0800cf72 <__lo0bits>:
 800cf72:	6803      	ldr	r3, [r0, #0]
 800cf74:	4602      	mov	r2, r0
 800cf76:	f013 0007 	ands.w	r0, r3, #7
 800cf7a:	d00b      	beq.n	800cf94 <__lo0bits+0x22>
 800cf7c:	07d9      	lsls	r1, r3, #31
 800cf7e:	d421      	bmi.n	800cfc4 <__lo0bits+0x52>
 800cf80:	0798      	lsls	r0, r3, #30
 800cf82:	bf49      	itett	mi
 800cf84:	085b      	lsrmi	r3, r3, #1
 800cf86:	089b      	lsrpl	r3, r3, #2
 800cf88:	2001      	movmi	r0, #1
 800cf8a:	6013      	strmi	r3, [r2, #0]
 800cf8c:	bf5c      	itt	pl
 800cf8e:	6013      	strpl	r3, [r2, #0]
 800cf90:	2002      	movpl	r0, #2
 800cf92:	4770      	bx	lr
 800cf94:	b299      	uxth	r1, r3
 800cf96:	b909      	cbnz	r1, 800cf9c <__lo0bits+0x2a>
 800cf98:	0c1b      	lsrs	r3, r3, #16
 800cf9a:	2010      	movs	r0, #16
 800cf9c:	b2d9      	uxtb	r1, r3
 800cf9e:	b909      	cbnz	r1, 800cfa4 <__lo0bits+0x32>
 800cfa0:	3008      	adds	r0, #8
 800cfa2:	0a1b      	lsrs	r3, r3, #8
 800cfa4:	0719      	lsls	r1, r3, #28
 800cfa6:	bf04      	itt	eq
 800cfa8:	091b      	lsreq	r3, r3, #4
 800cfaa:	3004      	addeq	r0, #4
 800cfac:	0799      	lsls	r1, r3, #30
 800cfae:	bf04      	itt	eq
 800cfb0:	089b      	lsreq	r3, r3, #2
 800cfb2:	3002      	addeq	r0, #2
 800cfb4:	07d9      	lsls	r1, r3, #31
 800cfb6:	d403      	bmi.n	800cfc0 <__lo0bits+0x4e>
 800cfb8:	085b      	lsrs	r3, r3, #1
 800cfba:	f100 0001 	add.w	r0, r0, #1
 800cfbe:	d003      	beq.n	800cfc8 <__lo0bits+0x56>
 800cfc0:	6013      	str	r3, [r2, #0]
 800cfc2:	4770      	bx	lr
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	4770      	bx	lr
 800cfc8:	2020      	movs	r0, #32
 800cfca:	4770      	bx	lr

0800cfcc <__i2b>:
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	460c      	mov	r4, r1
 800cfd0:	2101      	movs	r1, #1
 800cfd2:	f7ff ff07 	bl	800cde4 <_Balloc>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	b928      	cbnz	r0, 800cfe6 <__i2b+0x1a>
 800cfda:	4b05      	ldr	r3, [pc, #20]	@ (800cff0 <__i2b+0x24>)
 800cfdc:	4805      	ldr	r0, [pc, #20]	@ (800cff4 <__i2b+0x28>)
 800cfde:	f240 1145 	movw	r1, #325	@ 0x145
 800cfe2:	f000 fea1 	bl	800dd28 <__assert_func>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	6144      	str	r4, [r0, #20]
 800cfea:	6103      	str	r3, [r0, #16]
 800cfec:	bd10      	pop	{r4, pc}
 800cfee:	bf00      	nop
 800cff0:	0800e770 	.word	0x0800e770
 800cff4:	0800e781 	.word	0x0800e781

0800cff8 <__multiply>:
 800cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	4617      	mov	r7, r2
 800cffe:	690a      	ldr	r2, [r1, #16]
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	429a      	cmp	r2, r3
 800d004:	bfa8      	it	ge
 800d006:	463b      	movge	r3, r7
 800d008:	4689      	mov	r9, r1
 800d00a:	bfa4      	itt	ge
 800d00c:	460f      	movge	r7, r1
 800d00e:	4699      	movge	r9, r3
 800d010:	693d      	ldr	r5, [r7, #16]
 800d012:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	6879      	ldr	r1, [r7, #4]
 800d01a:	eb05 060a 	add.w	r6, r5, sl
 800d01e:	42b3      	cmp	r3, r6
 800d020:	b085      	sub	sp, #20
 800d022:	bfb8      	it	lt
 800d024:	3101      	addlt	r1, #1
 800d026:	f7ff fedd 	bl	800cde4 <_Balloc>
 800d02a:	b930      	cbnz	r0, 800d03a <__multiply+0x42>
 800d02c:	4602      	mov	r2, r0
 800d02e:	4b41      	ldr	r3, [pc, #260]	@ (800d134 <__multiply+0x13c>)
 800d030:	4841      	ldr	r0, [pc, #260]	@ (800d138 <__multiply+0x140>)
 800d032:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d036:	f000 fe77 	bl	800dd28 <__assert_func>
 800d03a:	f100 0414 	add.w	r4, r0, #20
 800d03e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d042:	4623      	mov	r3, r4
 800d044:	2200      	movs	r2, #0
 800d046:	4573      	cmp	r3, lr
 800d048:	d320      	bcc.n	800d08c <__multiply+0x94>
 800d04a:	f107 0814 	add.w	r8, r7, #20
 800d04e:	f109 0114 	add.w	r1, r9, #20
 800d052:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d056:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d05a:	9302      	str	r3, [sp, #8]
 800d05c:	1beb      	subs	r3, r5, r7
 800d05e:	3b15      	subs	r3, #21
 800d060:	f023 0303 	bic.w	r3, r3, #3
 800d064:	3304      	adds	r3, #4
 800d066:	3715      	adds	r7, #21
 800d068:	42bd      	cmp	r5, r7
 800d06a:	bf38      	it	cc
 800d06c:	2304      	movcc	r3, #4
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	9b02      	ldr	r3, [sp, #8]
 800d072:	9103      	str	r1, [sp, #12]
 800d074:	428b      	cmp	r3, r1
 800d076:	d80c      	bhi.n	800d092 <__multiply+0x9a>
 800d078:	2e00      	cmp	r6, #0
 800d07a:	dd03      	ble.n	800d084 <__multiply+0x8c>
 800d07c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d080:	2b00      	cmp	r3, #0
 800d082:	d055      	beq.n	800d130 <__multiply+0x138>
 800d084:	6106      	str	r6, [r0, #16]
 800d086:	b005      	add	sp, #20
 800d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08c:	f843 2b04 	str.w	r2, [r3], #4
 800d090:	e7d9      	b.n	800d046 <__multiply+0x4e>
 800d092:	f8b1 a000 	ldrh.w	sl, [r1]
 800d096:	f1ba 0f00 	cmp.w	sl, #0
 800d09a:	d01f      	beq.n	800d0dc <__multiply+0xe4>
 800d09c:	46c4      	mov	ip, r8
 800d09e:	46a1      	mov	r9, r4
 800d0a0:	2700      	movs	r7, #0
 800d0a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d0a6:	f8d9 3000 	ldr.w	r3, [r9]
 800d0aa:	fa1f fb82 	uxth.w	fp, r2
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d0b4:	443b      	add	r3, r7
 800d0b6:	f8d9 7000 	ldr.w	r7, [r9]
 800d0ba:	0c12      	lsrs	r2, r2, #16
 800d0bc:	0c3f      	lsrs	r7, r7, #16
 800d0be:	fb0a 7202 	mla	r2, sl, r2, r7
 800d0c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0cc:	4565      	cmp	r5, ip
 800d0ce:	f849 3b04 	str.w	r3, [r9], #4
 800d0d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d0d6:	d8e4      	bhi.n	800d0a2 <__multiply+0xaa>
 800d0d8:	9b01      	ldr	r3, [sp, #4]
 800d0da:	50e7      	str	r7, [r4, r3]
 800d0dc:	9b03      	ldr	r3, [sp, #12]
 800d0de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0e2:	3104      	adds	r1, #4
 800d0e4:	f1b9 0f00 	cmp.w	r9, #0
 800d0e8:	d020      	beq.n	800d12c <__multiply+0x134>
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	4647      	mov	r7, r8
 800d0ee:	46a4      	mov	ip, r4
 800d0f0:	f04f 0a00 	mov.w	sl, #0
 800d0f4:	f8b7 b000 	ldrh.w	fp, [r7]
 800d0f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d0fc:	fb09 220b 	mla	r2, r9, fp, r2
 800d100:	4452      	add	r2, sl
 800d102:	b29b      	uxth	r3, r3
 800d104:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d108:	f84c 3b04 	str.w	r3, [ip], #4
 800d10c:	f857 3b04 	ldr.w	r3, [r7], #4
 800d110:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d114:	f8bc 3000 	ldrh.w	r3, [ip]
 800d118:	fb09 330a 	mla	r3, r9, sl, r3
 800d11c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d120:	42bd      	cmp	r5, r7
 800d122:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d126:	d8e5      	bhi.n	800d0f4 <__multiply+0xfc>
 800d128:	9a01      	ldr	r2, [sp, #4]
 800d12a:	50a3      	str	r3, [r4, r2]
 800d12c:	3404      	adds	r4, #4
 800d12e:	e79f      	b.n	800d070 <__multiply+0x78>
 800d130:	3e01      	subs	r6, #1
 800d132:	e7a1      	b.n	800d078 <__multiply+0x80>
 800d134:	0800e770 	.word	0x0800e770
 800d138:	0800e781 	.word	0x0800e781

0800d13c <__pow5mult>:
 800d13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d140:	4615      	mov	r5, r2
 800d142:	f012 0203 	ands.w	r2, r2, #3
 800d146:	4607      	mov	r7, r0
 800d148:	460e      	mov	r6, r1
 800d14a:	d007      	beq.n	800d15c <__pow5mult+0x20>
 800d14c:	4c25      	ldr	r4, [pc, #148]	@ (800d1e4 <__pow5mult+0xa8>)
 800d14e:	3a01      	subs	r2, #1
 800d150:	2300      	movs	r3, #0
 800d152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d156:	f7ff fea7 	bl	800cea8 <__multadd>
 800d15a:	4606      	mov	r6, r0
 800d15c:	10ad      	asrs	r5, r5, #2
 800d15e:	d03d      	beq.n	800d1dc <__pow5mult+0xa0>
 800d160:	69fc      	ldr	r4, [r7, #28]
 800d162:	b97c      	cbnz	r4, 800d184 <__pow5mult+0x48>
 800d164:	2010      	movs	r0, #16
 800d166:	f7ff fd87 	bl	800cc78 <malloc>
 800d16a:	4602      	mov	r2, r0
 800d16c:	61f8      	str	r0, [r7, #28]
 800d16e:	b928      	cbnz	r0, 800d17c <__pow5mult+0x40>
 800d170:	4b1d      	ldr	r3, [pc, #116]	@ (800d1e8 <__pow5mult+0xac>)
 800d172:	481e      	ldr	r0, [pc, #120]	@ (800d1ec <__pow5mult+0xb0>)
 800d174:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d178:	f000 fdd6 	bl	800dd28 <__assert_func>
 800d17c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d180:	6004      	str	r4, [r0, #0]
 800d182:	60c4      	str	r4, [r0, #12]
 800d184:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d188:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d18c:	b94c      	cbnz	r4, 800d1a2 <__pow5mult+0x66>
 800d18e:	f240 2171 	movw	r1, #625	@ 0x271
 800d192:	4638      	mov	r0, r7
 800d194:	f7ff ff1a 	bl	800cfcc <__i2b>
 800d198:	2300      	movs	r3, #0
 800d19a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d19e:	4604      	mov	r4, r0
 800d1a0:	6003      	str	r3, [r0, #0]
 800d1a2:	f04f 0900 	mov.w	r9, #0
 800d1a6:	07eb      	lsls	r3, r5, #31
 800d1a8:	d50a      	bpl.n	800d1c0 <__pow5mult+0x84>
 800d1aa:	4631      	mov	r1, r6
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	f7ff ff22 	bl	800cff8 <__multiply>
 800d1b4:	4631      	mov	r1, r6
 800d1b6:	4680      	mov	r8, r0
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	f7ff fe53 	bl	800ce64 <_Bfree>
 800d1be:	4646      	mov	r6, r8
 800d1c0:	106d      	asrs	r5, r5, #1
 800d1c2:	d00b      	beq.n	800d1dc <__pow5mult+0xa0>
 800d1c4:	6820      	ldr	r0, [r4, #0]
 800d1c6:	b938      	cbnz	r0, 800d1d8 <__pow5mult+0x9c>
 800d1c8:	4622      	mov	r2, r4
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	f7ff ff13 	bl	800cff8 <__multiply>
 800d1d2:	6020      	str	r0, [r4, #0]
 800d1d4:	f8c0 9000 	str.w	r9, [r0]
 800d1d8:	4604      	mov	r4, r0
 800d1da:	e7e4      	b.n	800d1a6 <__pow5mult+0x6a>
 800d1dc:	4630      	mov	r0, r6
 800d1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1e2:	bf00      	nop
 800d1e4:	0800e834 	.word	0x0800e834
 800d1e8:	0800e701 	.word	0x0800e701
 800d1ec:	0800e781 	.word	0x0800e781

0800d1f0 <__lshift>:
 800d1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	6849      	ldr	r1, [r1, #4]
 800d1f8:	6923      	ldr	r3, [r4, #16]
 800d1fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	4607      	mov	r7, r0
 800d202:	4691      	mov	r9, r2
 800d204:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d208:	f108 0601 	add.w	r6, r8, #1
 800d20c:	42b3      	cmp	r3, r6
 800d20e:	db0b      	blt.n	800d228 <__lshift+0x38>
 800d210:	4638      	mov	r0, r7
 800d212:	f7ff fde7 	bl	800cde4 <_Balloc>
 800d216:	4605      	mov	r5, r0
 800d218:	b948      	cbnz	r0, 800d22e <__lshift+0x3e>
 800d21a:	4602      	mov	r2, r0
 800d21c:	4b28      	ldr	r3, [pc, #160]	@ (800d2c0 <__lshift+0xd0>)
 800d21e:	4829      	ldr	r0, [pc, #164]	@ (800d2c4 <__lshift+0xd4>)
 800d220:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d224:	f000 fd80 	bl	800dd28 <__assert_func>
 800d228:	3101      	adds	r1, #1
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	e7ee      	b.n	800d20c <__lshift+0x1c>
 800d22e:	2300      	movs	r3, #0
 800d230:	f100 0114 	add.w	r1, r0, #20
 800d234:	f100 0210 	add.w	r2, r0, #16
 800d238:	4618      	mov	r0, r3
 800d23a:	4553      	cmp	r3, sl
 800d23c:	db33      	blt.n	800d2a6 <__lshift+0xb6>
 800d23e:	6920      	ldr	r0, [r4, #16]
 800d240:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d244:	f104 0314 	add.w	r3, r4, #20
 800d248:	f019 091f 	ands.w	r9, r9, #31
 800d24c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d250:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d254:	d02b      	beq.n	800d2ae <__lshift+0xbe>
 800d256:	f1c9 0e20 	rsb	lr, r9, #32
 800d25a:	468a      	mov	sl, r1
 800d25c:	2200      	movs	r2, #0
 800d25e:	6818      	ldr	r0, [r3, #0]
 800d260:	fa00 f009 	lsl.w	r0, r0, r9
 800d264:	4310      	orrs	r0, r2
 800d266:	f84a 0b04 	str.w	r0, [sl], #4
 800d26a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d26e:	459c      	cmp	ip, r3
 800d270:	fa22 f20e 	lsr.w	r2, r2, lr
 800d274:	d8f3      	bhi.n	800d25e <__lshift+0x6e>
 800d276:	ebac 0304 	sub.w	r3, ip, r4
 800d27a:	3b15      	subs	r3, #21
 800d27c:	f023 0303 	bic.w	r3, r3, #3
 800d280:	3304      	adds	r3, #4
 800d282:	f104 0015 	add.w	r0, r4, #21
 800d286:	4560      	cmp	r0, ip
 800d288:	bf88      	it	hi
 800d28a:	2304      	movhi	r3, #4
 800d28c:	50ca      	str	r2, [r1, r3]
 800d28e:	b10a      	cbz	r2, 800d294 <__lshift+0xa4>
 800d290:	f108 0602 	add.w	r6, r8, #2
 800d294:	3e01      	subs	r6, #1
 800d296:	4638      	mov	r0, r7
 800d298:	612e      	str	r6, [r5, #16]
 800d29a:	4621      	mov	r1, r4
 800d29c:	f7ff fde2 	bl	800ce64 <_Bfree>
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	e7c5      	b.n	800d23a <__lshift+0x4a>
 800d2ae:	3904      	subs	r1, #4
 800d2b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2b8:	459c      	cmp	ip, r3
 800d2ba:	d8f9      	bhi.n	800d2b0 <__lshift+0xc0>
 800d2bc:	e7ea      	b.n	800d294 <__lshift+0xa4>
 800d2be:	bf00      	nop
 800d2c0:	0800e770 	.word	0x0800e770
 800d2c4:	0800e781 	.word	0x0800e781

0800d2c8 <__mcmp>:
 800d2c8:	690a      	ldr	r2, [r1, #16]
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	6900      	ldr	r0, [r0, #16]
 800d2ce:	1a80      	subs	r0, r0, r2
 800d2d0:	b530      	push	{r4, r5, lr}
 800d2d2:	d10e      	bne.n	800d2f2 <__mcmp+0x2a>
 800d2d4:	3314      	adds	r3, #20
 800d2d6:	3114      	adds	r1, #20
 800d2d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2e8:	4295      	cmp	r5, r2
 800d2ea:	d003      	beq.n	800d2f4 <__mcmp+0x2c>
 800d2ec:	d205      	bcs.n	800d2fa <__mcmp+0x32>
 800d2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f2:	bd30      	pop	{r4, r5, pc}
 800d2f4:	42a3      	cmp	r3, r4
 800d2f6:	d3f3      	bcc.n	800d2e0 <__mcmp+0x18>
 800d2f8:	e7fb      	b.n	800d2f2 <__mcmp+0x2a>
 800d2fa:	2001      	movs	r0, #1
 800d2fc:	e7f9      	b.n	800d2f2 <__mcmp+0x2a>
	...

0800d300 <__mdiff>:
 800d300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d304:	4689      	mov	r9, r1
 800d306:	4606      	mov	r6, r0
 800d308:	4611      	mov	r1, r2
 800d30a:	4648      	mov	r0, r9
 800d30c:	4614      	mov	r4, r2
 800d30e:	f7ff ffdb 	bl	800d2c8 <__mcmp>
 800d312:	1e05      	subs	r5, r0, #0
 800d314:	d112      	bne.n	800d33c <__mdiff+0x3c>
 800d316:	4629      	mov	r1, r5
 800d318:	4630      	mov	r0, r6
 800d31a:	f7ff fd63 	bl	800cde4 <_Balloc>
 800d31e:	4602      	mov	r2, r0
 800d320:	b928      	cbnz	r0, 800d32e <__mdiff+0x2e>
 800d322:	4b3f      	ldr	r3, [pc, #252]	@ (800d420 <__mdiff+0x120>)
 800d324:	f240 2137 	movw	r1, #567	@ 0x237
 800d328:	483e      	ldr	r0, [pc, #248]	@ (800d424 <__mdiff+0x124>)
 800d32a:	f000 fcfd 	bl	800dd28 <__assert_func>
 800d32e:	2301      	movs	r3, #1
 800d330:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d334:	4610      	mov	r0, r2
 800d336:	b003      	add	sp, #12
 800d338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33c:	bfbc      	itt	lt
 800d33e:	464b      	movlt	r3, r9
 800d340:	46a1      	movlt	r9, r4
 800d342:	4630      	mov	r0, r6
 800d344:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d348:	bfba      	itte	lt
 800d34a:	461c      	movlt	r4, r3
 800d34c:	2501      	movlt	r5, #1
 800d34e:	2500      	movge	r5, #0
 800d350:	f7ff fd48 	bl	800cde4 <_Balloc>
 800d354:	4602      	mov	r2, r0
 800d356:	b918      	cbnz	r0, 800d360 <__mdiff+0x60>
 800d358:	4b31      	ldr	r3, [pc, #196]	@ (800d420 <__mdiff+0x120>)
 800d35a:	f240 2145 	movw	r1, #581	@ 0x245
 800d35e:	e7e3      	b.n	800d328 <__mdiff+0x28>
 800d360:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d364:	6926      	ldr	r6, [r4, #16]
 800d366:	60c5      	str	r5, [r0, #12]
 800d368:	f109 0310 	add.w	r3, r9, #16
 800d36c:	f109 0514 	add.w	r5, r9, #20
 800d370:	f104 0e14 	add.w	lr, r4, #20
 800d374:	f100 0b14 	add.w	fp, r0, #20
 800d378:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d37c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d380:	9301      	str	r3, [sp, #4]
 800d382:	46d9      	mov	r9, fp
 800d384:	f04f 0c00 	mov.w	ip, #0
 800d388:	9b01      	ldr	r3, [sp, #4]
 800d38a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d38e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d392:	9301      	str	r3, [sp, #4]
 800d394:	fa1f f38a 	uxth.w	r3, sl
 800d398:	4619      	mov	r1, r3
 800d39a:	b283      	uxth	r3, r0
 800d39c:	1acb      	subs	r3, r1, r3
 800d39e:	0c00      	lsrs	r0, r0, #16
 800d3a0:	4463      	add	r3, ip
 800d3a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d3a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d3b0:	4576      	cmp	r6, lr
 800d3b2:	f849 3b04 	str.w	r3, [r9], #4
 800d3b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3ba:	d8e5      	bhi.n	800d388 <__mdiff+0x88>
 800d3bc:	1b33      	subs	r3, r6, r4
 800d3be:	3b15      	subs	r3, #21
 800d3c0:	f023 0303 	bic.w	r3, r3, #3
 800d3c4:	3415      	adds	r4, #21
 800d3c6:	3304      	adds	r3, #4
 800d3c8:	42a6      	cmp	r6, r4
 800d3ca:	bf38      	it	cc
 800d3cc:	2304      	movcc	r3, #4
 800d3ce:	441d      	add	r5, r3
 800d3d0:	445b      	add	r3, fp
 800d3d2:	461e      	mov	r6, r3
 800d3d4:	462c      	mov	r4, r5
 800d3d6:	4544      	cmp	r4, r8
 800d3d8:	d30e      	bcc.n	800d3f8 <__mdiff+0xf8>
 800d3da:	f108 0103 	add.w	r1, r8, #3
 800d3de:	1b49      	subs	r1, r1, r5
 800d3e0:	f021 0103 	bic.w	r1, r1, #3
 800d3e4:	3d03      	subs	r5, #3
 800d3e6:	45a8      	cmp	r8, r5
 800d3e8:	bf38      	it	cc
 800d3ea:	2100      	movcc	r1, #0
 800d3ec:	440b      	add	r3, r1
 800d3ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3f2:	b191      	cbz	r1, 800d41a <__mdiff+0x11a>
 800d3f4:	6117      	str	r7, [r2, #16]
 800d3f6:	e79d      	b.n	800d334 <__mdiff+0x34>
 800d3f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3fc:	46e6      	mov	lr, ip
 800d3fe:	0c08      	lsrs	r0, r1, #16
 800d400:	fa1c fc81 	uxtah	ip, ip, r1
 800d404:	4471      	add	r1, lr
 800d406:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d40a:	b289      	uxth	r1, r1
 800d40c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d410:	f846 1b04 	str.w	r1, [r6], #4
 800d414:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d418:	e7dd      	b.n	800d3d6 <__mdiff+0xd6>
 800d41a:	3f01      	subs	r7, #1
 800d41c:	e7e7      	b.n	800d3ee <__mdiff+0xee>
 800d41e:	bf00      	nop
 800d420:	0800e770 	.word	0x0800e770
 800d424:	0800e781 	.word	0x0800e781

0800d428 <__d2b>:
 800d428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d42c:	460f      	mov	r7, r1
 800d42e:	2101      	movs	r1, #1
 800d430:	ec59 8b10 	vmov	r8, r9, d0
 800d434:	4616      	mov	r6, r2
 800d436:	f7ff fcd5 	bl	800cde4 <_Balloc>
 800d43a:	4604      	mov	r4, r0
 800d43c:	b930      	cbnz	r0, 800d44c <__d2b+0x24>
 800d43e:	4602      	mov	r2, r0
 800d440:	4b23      	ldr	r3, [pc, #140]	@ (800d4d0 <__d2b+0xa8>)
 800d442:	4824      	ldr	r0, [pc, #144]	@ (800d4d4 <__d2b+0xac>)
 800d444:	f240 310f 	movw	r1, #783	@ 0x30f
 800d448:	f000 fc6e 	bl	800dd28 <__assert_func>
 800d44c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d454:	b10d      	cbz	r5, 800d45a <__d2b+0x32>
 800d456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d45a:	9301      	str	r3, [sp, #4]
 800d45c:	f1b8 0300 	subs.w	r3, r8, #0
 800d460:	d023      	beq.n	800d4aa <__d2b+0x82>
 800d462:	4668      	mov	r0, sp
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	f7ff fd84 	bl	800cf72 <__lo0bits>
 800d46a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d46e:	b1d0      	cbz	r0, 800d4a6 <__d2b+0x7e>
 800d470:	f1c0 0320 	rsb	r3, r0, #32
 800d474:	fa02 f303 	lsl.w	r3, r2, r3
 800d478:	430b      	orrs	r3, r1
 800d47a:	40c2      	lsrs	r2, r0
 800d47c:	6163      	str	r3, [r4, #20]
 800d47e:	9201      	str	r2, [sp, #4]
 800d480:	9b01      	ldr	r3, [sp, #4]
 800d482:	61a3      	str	r3, [r4, #24]
 800d484:	2b00      	cmp	r3, #0
 800d486:	bf0c      	ite	eq
 800d488:	2201      	moveq	r2, #1
 800d48a:	2202      	movne	r2, #2
 800d48c:	6122      	str	r2, [r4, #16]
 800d48e:	b1a5      	cbz	r5, 800d4ba <__d2b+0x92>
 800d490:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d494:	4405      	add	r5, r0
 800d496:	603d      	str	r5, [r7, #0]
 800d498:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d49c:	6030      	str	r0, [r6, #0]
 800d49e:	4620      	mov	r0, r4
 800d4a0:	b003      	add	sp, #12
 800d4a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4a6:	6161      	str	r1, [r4, #20]
 800d4a8:	e7ea      	b.n	800d480 <__d2b+0x58>
 800d4aa:	a801      	add	r0, sp, #4
 800d4ac:	f7ff fd61 	bl	800cf72 <__lo0bits>
 800d4b0:	9b01      	ldr	r3, [sp, #4]
 800d4b2:	6163      	str	r3, [r4, #20]
 800d4b4:	3020      	adds	r0, #32
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	e7e8      	b.n	800d48c <__d2b+0x64>
 800d4ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4c2:	6038      	str	r0, [r7, #0]
 800d4c4:	6918      	ldr	r0, [r3, #16]
 800d4c6:	f7ff fd35 	bl	800cf34 <__hi0bits>
 800d4ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4ce:	e7e5      	b.n	800d49c <__d2b+0x74>
 800d4d0:	0800e770 	.word	0x0800e770
 800d4d4:	0800e781 	.word	0x0800e781

0800d4d8 <__ssputs_r>:
 800d4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4dc:	688e      	ldr	r6, [r1, #8]
 800d4de:	461f      	mov	r7, r3
 800d4e0:	42be      	cmp	r6, r7
 800d4e2:	680b      	ldr	r3, [r1, #0]
 800d4e4:	4682      	mov	sl, r0
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	4690      	mov	r8, r2
 800d4ea:	d82d      	bhi.n	800d548 <__ssputs_r+0x70>
 800d4ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4f4:	d026      	beq.n	800d544 <__ssputs_r+0x6c>
 800d4f6:	6965      	ldr	r5, [r4, #20]
 800d4f8:	6909      	ldr	r1, [r1, #16]
 800d4fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4fe:	eba3 0901 	sub.w	r9, r3, r1
 800d502:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d506:	1c7b      	adds	r3, r7, #1
 800d508:	444b      	add	r3, r9
 800d50a:	106d      	asrs	r5, r5, #1
 800d50c:	429d      	cmp	r5, r3
 800d50e:	bf38      	it	cc
 800d510:	461d      	movcc	r5, r3
 800d512:	0553      	lsls	r3, r2, #21
 800d514:	d527      	bpl.n	800d566 <__ssputs_r+0x8e>
 800d516:	4629      	mov	r1, r5
 800d518:	f7ff fbd8 	bl	800cccc <_malloc_r>
 800d51c:	4606      	mov	r6, r0
 800d51e:	b360      	cbz	r0, 800d57a <__ssputs_r+0xa2>
 800d520:	6921      	ldr	r1, [r4, #16]
 800d522:	464a      	mov	r2, r9
 800d524:	f7fe fd69 	bl	800bffa <memcpy>
 800d528:	89a3      	ldrh	r3, [r4, #12]
 800d52a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d52e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d532:	81a3      	strh	r3, [r4, #12]
 800d534:	6126      	str	r6, [r4, #16]
 800d536:	6165      	str	r5, [r4, #20]
 800d538:	444e      	add	r6, r9
 800d53a:	eba5 0509 	sub.w	r5, r5, r9
 800d53e:	6026      	str	r6, [r4, #0]
 800d540:	60a5      	str	r5, [r4, #8]
 800d542:	463e      	mov	r6, r7
 800d544:	42be      	cmp	r6, r7
 800d546:	d900      	bls.n	800d54a <__ssputs_r+0x72>
 800d548:	463e      	mov	r6, r7
 800d54a:	6820      	ldr	r0, [r4, #0]
 800d54c:	4632      	mov	r2, r6
 800d54e:	4641      	mov	r1, r8
 800d550:	f000 fb9e 	bl	800dc90 <memmove>
 800d554:	68a3      	ldr	r3, [r4, #8]
 800d556:	1b9b      	subs	r3, r3, r6
 800d558:	60a3      	str	r3, [r4, #8]
 800d55a:	6823      	ldr	r3, [r4, #0]
 800d55c:	4433      	add	r3, r6
 800d55e:	6023      	str	r3, [r4, #0]
 800d560:	2000      	movs	r0, #0
 800d562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d566:	462a      	mov	r2, r5
 800d568:	f000 fc22 	bl	800ddb0 <_realloc_r>
 800d56c:	4606      	mov	r6, r0
 800d56e:	2800      	cmp	r0, #0
 800d570:	d1e0      	bne.n	800d534 <__ssputs_r+0x5c>
 800d572:	6921      	ldr	r1, [r4, #16]
 800d574:	4650      	mov	r0, sl
 800d576:	f7ff fb35 	bl	800cbe4 <_free_r>
 800d57a:	230c      	movs	r3, #12
 800d57c:	f8ca 3000 	str.w	r3, [sl]
 800d580:	89a3      	ldrh	r3, [r4, #12]
 800d582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d586:	81a3      	strh	r3, [r4, #12]
 800d588:	f04f 30ff 	mov.w	r0, #4294967295
 800d58c:	e7e9      	b.n	800d562 <__ssputs_r+0x8a>
	...

0800d590 <_svfiprintf_r>:
 800d590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d594:	4698      	mov	r8, r3
 800d596:	898b      	ldrh	r3, [r1, #12]
 800d598:	061b      	lsls	r3, r3, #24
 800d59a:	b09d      	sub	sp, #116	@ 0x74
 800d59c:	4607      	mov	r7, r0
 800d59e:	460d      	mov	r5, r1
 800d5a0:	4614      	mov	r4, r2
 800d5a2:	d510      	bpl.n	800d5c6 <_svfiprintf_r+0x36>
 800d5a4:	690b      	ldr	r3, [r1, #16]
 800d5a6:	b973      	cbnz	r3, 800d5c6 <_svfiprintf_r+0x36>
 800d5a8:	2140      	movs	r1, #64	@ 0x40
 800d5aa:	f7ff fb8f 	bl	800cccc <_malloc_r>
 800d5ae:	6028      	str	r0, [r5, #0]
 800d5b0:	6128      	str	r0, [r5, #16]
 800d5b2:	b930      	cbnz	r0, 800d5c2 <_svfiprintf_r+0x32>
 800d5b4:	230c      	movs	r3, #12
 800d5b6:	603b      	str	r3, [r7, #0]
 800d5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5bc:	b01d      	add	sp, #116	@ 0x74
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c2:	2340      	movs	r3, #64	@ 0x40
 800d5c4:	616b      	str	r3, [r5, #20]
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ca:	2320      	movs	r3, #32
 800d5cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5d4:	2330      	movs	r3, #48	@ 0x30
 800d5d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d774 <_svfiprintf_r+0x1e4>
 800d5da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5de:	f04f 0901 	mov.w	r9, #1
 800d5e2:	4623      	mov	r3, r4
 800d5e4:	469a      	mov	sl, r3
 800d5e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5ea:	b10a      	cbz	r2, 800d5f0 <_svfiprintf_r+0x60>
 800d5ec:	2a25      	cmp	r2, #37	@ 0x25
 800d5ee:	d1f9      	bne.n	800d5e4 <_svfiprintf_r+0x54>
 800d5f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d5f4:	d00b      	beq.n	800d60e <_svfiprintf_r+0x7e>
 800d5f6:	465b      	mov	r3, fp
 800d5f8:	4622      	mov	r2, r4
 800d5fa:	4629      	mov	r1, r5
 800d5fc:	4638      	mov	r0, r7
 800d5fe:	f7ff ff6b 	bl	800d4d8 <__ssputs_r>
 800d602:	3001      	adds	r0, #1
 800d604:	f000 80a7 	beq.w	800d756 <_svfiprintf_r+0x1c6>
 800d608:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d60a:	445a      	add	r2, fp
 800d60c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d60e:	f89a 3000 	ldrb.w	r3, [sl]
 800d612:	2b00      	cmp	r3, #0
 800d614:	f000 809f 	beq.w	800d756 <_svfiprintf_r+0x1c6>
 800d618:	2300      	movs	r3, #0
 800d61a:	f04f 32ff 	mov.w	r2, #4294967295
 800d61e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d622:	f10a 0a01 	add.w	sl, sl, #1
 800d626:	9304      	str	r3, [sp, #16]
 800d628:	9307      	str	r3, [sp, #28]
 800d62a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d62e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d630:	4654      	mov	r4, sl
 800d632:	2205      	movs	r2, #5
 800d634:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d638:	484e      	ldr	r0, [pc, #312]	@ (800d774 <_svfiprintf_r+0x1e4>)
 800d63a:	f7f2 fe79 	bl	8000330 <memchr>
 800d63e:	9a04      	ldr	r2, [sp, #16]
 800d640:	b9d8      	cbnz	r0, 800d67a <_svfiprintf_r+0xea>
 800d642:	06d0      	lsls	r0, r2, #27
 800d644:	bf44      	itt	mi
 800d646:	2320      	movmi	r3, #32
 800d648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d64c:	0711      	lsls	r1, r2, #28
 800d64e:	bf44      	itt	mi
 800d650:	232b      	movmi	r3, #43	@ 0x2b
 800d652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d656:	f89a 3000 	ldrb.w	r3, [sl]
 800d65a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d65c:	d015      	beq.n	800d68a <_svfiprintf_r+0xfa>
 800d65e:	9a07      	ldr	r2, [sp, #28]
 800d660:	4654      	mov	r4, sl
 800d662:	2000      	movs	r0, #0
 800d664:	f04f 0c0a 	mov.w	ip, #10
 800d668:	4621      	mov	r1, r4
 800d66a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d66e:	3b30      	subs	r3, #48	@ 0x30
 800d670:	2b09      	cmp	r3, #9
 800d672:	d94b      	bls.n	800d70c <_svfiprintf_r+0x17c>
 800d674:	b1b0      	cbz	r0, 800d6a4 <_svfiprintf_r+0x114>
 800d676:	9207      	str	r2, [sp, #28]
 800d678:	e014      	b.n	800d6a4 <_svfiprintf_r+0x114>
 800d67a:	eba0 0308 	sub.w	r3, r0, r8
 800d67e:	fa09 f303 	lsl.w	r3, r9, r3
 800d682:	4313      	orrs	r3, r2
 800d684:	9304      	str	r3, [sp, #16]
 800d686:	46a2      	mov	sl, r4
 800d688:	e7d2      	b.n	800d630 <_svfiprintf_r+0xa0>
 800d68a:	9b03      	ldr	r3, [sp, #12]
 800d68c:	1d19      	adds	r1, r3, #4
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	9103      	str	r1, [sp, #12]
 800d692:	2b00      	cmp	r3, #0
 800d694:	bfbb      	ittet	lt
 800d696:	425b      	neglt	r3, r3
 800d698:	f042 0202 	orrlt.w	r2, r2, #2
 800d69c:	9307      	strge	r3, [sp, #28]
 800d69e:	9307      	strlt	r3, [sp, #28]
 800d6a0:	bfb8      	it	lt
 800d6a2:	9204      	strlt	r2, [sp, #16]
 800d6a4:	7823      	ldrb	r3, [r4, #0]
 800d6a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6a8:	d10a      	bne.n	800d6c0 <_svfiprintf_r+0x130>
 800d6aa:	7863      	ldrb	r3, [r4, #1]
 800d6ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6ae:	d132      	bne.n	800d716 <_svfiprintf_r+0x186>
 800d6b0:	9b03      	ldr	r3, [sp, #12]
 800d6b2:	1d1a      	adds	r2, r3, #4
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	9203      	str	r2, [sp, #12]
 800d6b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6bc:	3402      	adds	r4, #2
 800d6be:	9305      	str	r3, [sp, #20]
 800d6c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d784 <_svfiprintf_r+0x1f4>
 800d6c4:	7821      	ldrb	r1, [r4, #0]
 800d6c6:	2203      	movs	r2, #3
 800d6c8:	4650      	mov	r0, sl
 800d6ca:	f7f2 fe31 	bl	8000330 <memchr>
 800d6ce:	b138      	cbz	r0, 800d6e0 <_svfiprintf_r+0x150>
 800d6d0:	9b04      	ldr	r3, [sp, #16]
 800d6d2:	eba0 000a 	sub.w	r0, r0, sl
 800d6d6:	2240      	movs	r2, #64	@ 0x40
 800d6d8:	4082      	lsls	r2, r0
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	3401      	adds	r4, #1
 800d6de:	9304      	str	r3, [sp, #16]
 800d6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6e4:	4824      	ldr	r0, [pc, #144]	@ (800d778 <_svfiprintf_r+0x1e8>)
 800d6e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6ea:	2206      	movs	r2, #6
 800d6ec:	f7f2 fe20 	bl	8000330 <memchr>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d036      	beq.n	800d762 <_svfiprintf_r+0x1d2>
 800d6f4:	4b21      	ldr	r3, [pc, #132]	@ (800d77c <_svfiprintf_r+0x1ec>)
 800d6f6:	bb1b      	cbnz	r3, 800d740 <_svfiprintf_r+0x1b0>
 800d6f8:	9b03      	ldr	r3, [sp, #12]
 800d6fa:	3307      	adds	r3, #7
 800d6fc:	f023 0307 	bic.w	r3, r3, #7
 800d700:	3308      	adds	r3, #8
 800d702:	9303      	str	r3, [sp, #12]
 800d704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d706:	4433      	add	r3, r6
 800d708:	9309      	str	r3, [sp, #36]	@ 0x24
 800d70a:	e76a      	b.n	800d5e2 <_svfiprintf_r+0x52>
 800d70c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d710:	460c      	mov	r4, r1
 800d712:	2001      	movs	r0, #1
 800d714:	e7a8      	b.n	800d668 <_svfiprintf_r+0xd8>
 800d716:	2300      	movs	r3, #0
 800d718:	3401      	adds	r4, #1
 800d71a:	9305      	str	r3, [sp, #20]
 800d71c:	4619      	mov	r1, r3
 800d71e:	f04f 0c0a 	mov.w	ip, #10
 800d722:	4620      	mov	r0, r4
 800d724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d728:	3a30      	subs	r2, #48	@ 0x30
 800d72a:	2a09      	cmp	r2, #9
 800d72c:	d903      	bls.n	800d736 <_svfiprintf_r+0x1a6>
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d0c6      	beq.n	800d6c0 <_svfiprintf_r+0x130>
 800d732:	9105      	str	r1, [sp, #20]
 800d734:	e7c4      	b.n	800d6c0 <_svfiprintf_r+0x130>
 800d736:	fb0c 2101 	mla	r1, ip, r1, r2
 800d73a:	4604      	mov	r4, r0
 800d73c:	2301      	movs	r3, #1
 800d73e:	e7f0      	b.n	800d722 <_svfiprintf_r+0x192>
 800d740:	ab03      	add	r3, sp, #12
 800d742:	9300      	str	r3, [sp, #0]
 800d744:	462a      	mov	r2, r5
 800d746:	4b0e      	ldr	r3, [pc, #56]	@ (800d780 <_svfiprintf_r+0x1f0>)
 800d748:	a904      	add	r1, sp, #16
 800d74a:	4638      	mov	r0, r7
 800d74c:	f7fd fdfc 	bl	800b348 <_printf_float>
 800d750:	1c42      	adds	r2, r0, #1
 800d752:	4606      	mov	r6, r0
 800d754:	d1d6      	bne.n	800d704 <_svfiprintf_r+0x174>
 800d756:	89ab      	ldrh	r3, [r5, #12]
 800d758:	065b      	lsls	r3, r3, #25
 800d75a:	f53f af2d 	bmi.w	800d5b8 <_svfiprintf_r+0x28>
 800d75e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d760:	e72c      	b.n	800d5bc <_svfiprintf_r+0x2c>
 800d762:	ab03      	add	r3, sp, #12
 800d764:	9300      	str	r3, [sp, #0]
 800d766:	462a      	mov	r2, r5
 800d768:	4b05      	ldr	r3, [pc, #20]	@ (800d780 <_svfiprintf_r+0x1f0>)
 800d76a:	a904      	add	r1, sp, #16
 800d76c:	4638      	mov	r0, r7
 800d76e:	f7fe f873 	bl	800b858 <_printf_i>
 800d772:	e7ed      	b.n	800d750 <_svfiprintf_r+0x1c0>
 800d774:	0800e7da 	.word	0x0800e7da
 800d778:	0800e7e4 	.word	0x0800e7e4
 800d77c:	0800b349 	.word	0x0800b349
 800d780:	0800d4d9 	.word	0x0800d4d9
 800d784:	0800e7e0 	.word	0x0800e7e0

0800d788 <__sfputc_r>:
 800d788:	6893      	ldr	r3, [r2, #8]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	b410      	push	{r4}
 800d790:	6093      	str	r3, [r2, #8]
 800d792:	da08      	bge.n	800d7a6 <__sfputc_r+0x1e>
 800d794:	6994      	ldr	r4, [r2, #24]
 800d796:	42a3      	cmp	r3, r4
 800d798:	db01      	blt.n	800d79e <__sfputc_r+0x16>
 800d79a:	290a      	cmp	r1, #10
 800d79c:	d103      	bne.n	800d7a6 <__sfputc_r+0x1e>
 800d79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7a2:	f7fe bb16 	b.w	800bdd2 <__swbuf_r>
 800d7a6:	6813      	ldr	r3, [r2, #0]
 800d7a8:	1c58      	adds	r0, r3, #1
 800d7aa:	6010      	str	r0, [r2, #0]
 800d7ac:	7019      	strb	r1, [r3, #0]
 800d7ae:	4608      	mov	r0, r1
 800d7b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <__sfputs_r>:
 800d7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	460f      	mov	r7, r1
 800d7bc:	4614      	mov	r4, r2
 800d7be:	18d5      	adds	r5, r2, r3
 800d7c0:	42ac      	cmp	r4, r5
 800d7c2:	d101      	bne.n	800d7c8 <__sfputs_r+0x12>
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	e007      	b.n	800d7d8 <__sfputs_r+0x22>
 800d7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7cc:	463a      	mov	r2, r7
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	f7ff ffda 	bl	800d788 <__sfputc_r>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	d1f3      	bne.n	800d7c0 <__sfputs_r+0xa>
 800d7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7dc <_vfiprintf_r>:
 800d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	460d      	mov	r5, r1
 800d7e2:	b09d      	sub	sp, #116	@ 0x74
 800d7e4:	4614      	mov	r4, r2
 800d7e6:	4698      	mov	r8, r3
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	b118      	cbz	r0, 800d7f4 <_vfiprintf_r+0x18>
 800d7ec:	6a03      	ldr	r3, [r0, #32]
 800d7ee:	b90b      	cbnz	r3, 800d7f4 <_vfiprintf_r+0x18>
 800d7f0:	f7fe f9dc 	bl	800bbac <__sinit>
 800d7f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7f6:	07d9      	lsls	r1, r3, #31
 800d7f8:	d405      	bmi.n	800d806 <_vfiprintf_r+0x2a>
 800d7fa:	89ab      	ldrh	r3, [r5, #12]
 800d7fc:	059a      	lsls	r2, r3, #22
 800d7fe:	d402      	bmi.n	800d806 <_vfiprintf_r+0x2a>
 800d800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d802:	f7fe fbf8 	bl	800bff6 <__retarget_lock_acquire_recursive>
 800d806:	89ab      	ldrh	r3, [r5, #12]
 800d808:	071b      	lsls	r3, r3, #28
 800d80a:	d501      	bpl.n	800d810 <_vfiprintf_r+0x34>
 800d80c:	692b      	ldr	r3, [r5, #16]
 800d80e:	b99b      	cbnz	r3, 800d838 <_vfiprintf_r+0x5c>
 800d810:	4629      	mov	r1, r5
 800d812:	4630      	mov	r0, r6
 800d814:	f7fe fb1c 	bl	800be50 <__swsetup_r>
 800d818:	b170      	cbz	r0, 800d838 <_vfiprintf_r+0x5c>
 800d81a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d81c:	07dc      	lsls	r4, r3, #31
 800d81e:	d504      	bpl.n	800d82a <_vfiprintf_r+0x4e>
 800d820:	f04f 30ff 	mov.w	r0, #4294967295
 800d824:	b01d      	add	sp, #116	@ 0x74
 800d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	89ab      	ldrh	r3, [r5, #12]
 800d82c:	0598      	lsls	r0, r3, #22
 800d82e:	d4f7      	bmi.n	800d820 <_vfiprintf_r+0x44>
 800d830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d832:	f7fe fbe1 	bl	800bff8 <__retarget_lock_release_recursive>
 800d836:	e7f3      	b.n	800d820 <_vfiprintf_r+0x44>
 800d838:	2300      	movs	r3, #0
 800d83a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d83c:	2320      	movs	r3, #32
 800d83e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d842:	f8cd 800c 	str.w	r8, [sp, #12]
 800d846:	2330      	movs	r3, #48	@ 0x30
 800d848:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d9f8 <_vfiprintf_r+0x21c>
 800d84c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d850:	f04f 0901 	mov.w	r9, #1
 800d854:	4623      	mov	r3, r4
 800d856:	469a      	mov	sl, r3
 800d858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d85c:	b10a      	cbz	r2, 800d862 <_vfiprintf_r+0x86>
 800d85e:	2a25      	cmp	r2, #37	@ 0x25
 800d860:	d1f9      	bne.n	800d856 <_vfiprintf_r+0x7a>
 800d862:	ebba 0b04 	subs.w	fp, sl, r4
 800d866:	d00b      	beq.n	800d880 <_vfiprintf_r+0xa4>
 800d868:	465b      	mov	r3, fp
 800d86a:	4622      	mov	r2, r4
 800d86c:	4629      	mov	r1, r5
 800d86e:	4630      	mov	r0, r6
 800d870:	f7ff ffa1 	bl	800d7b6 <__sfputs_r>
 800d874:	3001      	adds	r0, #1
 800d876:	f000 80a7 	beq.w	800d9c8 <_vfiprintf_r+0x1ec>
 800d87a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d87c:	445a      	add	r2, fp
 800d87e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d880:	f89a 3000 	ldrb.w	r3, [sl]
 800d884:	2b00      	cmp	r3, #0
 800d886:	f000 809f 	beq.w	800d9c8 <_vfiprintf_r+0x1ec>
 800d88a:	2300      	movs	r3, #0
 800d88c:	f04f 32ff 	mov.w	r2, #4294967295
 800d890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d894:	f10a 0a01 	add.w	sl, sl, #1
 800d898:	9304      	str	r3, [sp, #16]
 800d89a:	9307      	str	r3, [sp, #28]
 800d89c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8a2:	4654      	mov	r4, sl
 800d8a4:	2205      	movs	r2, #5
 800d8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8aa:	4853      	ldr	r0, [pc, #332]	@ (800d9f8 <_vfiprintf_r+0x21c>)
 800d8ac:	f7f2 fd40 	bl	8000330 <memchr>
 800d8b0:	9a04      	ldr	r2, [sp, #16]
 800d8b2:	b9d8      	cbnz	r0, 800d8ec <_vfiprintf_r+0x110>
 800d8b4:	06d1      	lsls	r1, r2, #27
 800d8b6:	bf44      	itt	mi
 800d8b8:	2320      	movmi	r3, #32
 800d8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8be:	0713      	lsls	r3, r2, #28
 800d8c0:	bf44      	itt	mi
 800d8c2:	232b      	movmi	r3, #43	@ 0x2b
 800d8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d8cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8ce:	d015      	beq.n	800d8fc <_vfiprintf_r+0x120>
 800d8d0:	9a07      	ldr	r2, [sp, #28]
 800d8d2:	4654      	mov	r4, sl
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	f04f 0c0a 	mov.w	ip, #10
 800d8da:	4621      	mov	r1, r4
 800d8dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8e0:	3b30      	subs	r3, #48	@ 0x30
 800d8e2:	2b09      	cmp	r3, #9
 800d8e4:	d94b      	bls.n	800d97e <_vfiprintf_r+0x1a2>
 800d8e6:	b1b0      	cbz	r0, 800d916 <_vfiprintf_r+0x13a>
 800d8e8:	9207      	str	r2, [sp, #28]
 800d8ea:	e014      	b.n	800d916 <_vfiprintf_r+0x13a>
 800d8ec:	eba0 0308 	sub.w	r3, r0, r8
 800d8f0:	fa09 f303 	lsl.w	r3, r9, r3
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	9304      	str	r3, [sp, #16]
 800d8f8:	46a2      	mov	sl, r4
 800d8fa:	e7d2      	b.n	800d8a2 <_vfiprintf_r+0xc6>
 800d8fc:	9b03      	ldr	r3, [sp, #12]
 800d8fe:	1d19      	adds	r1, r3, #4
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	9103      	str	r1, [sp, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	bfbb      	ittet	lt
 800d908:	425b      	neglt	r3, r3
 800d90a:	f042 0202 	orrlt.w	r2, r2, #2
 800d90e:	9307      	strge	r3, [sp, #28]
 800d910:	9307      	strlt	r3, [sp, #28]
 800d912:	bfb8      	it	lt
 800d914:	9204      	strlt	r2, [sp, #16]
 800d916:	7823      	ldrb	r3, [r4, #0]
 800d918:	2b2e      	cmp	r3, #46	@ 0x2e
 800d91a:	d10a      	bne.n	800d932 <_vfiprintf_r+0x156>
 800d91c:	7863      	ldrb	r3, [r4, #1]
 800d91e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d920:	d132      	bne.n	800d988 <_vfiprintf_r+0x1ac>
 800d922:	9b03      	ldr	r3, [sp, #12]
 800d924:	1d1a      	adds	r2, r3, #4
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	9203      	str	r2, [sp, #12]
 800d92a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d92e:	3402      	adds	r4, #2
 800d930:	9305      	str	r3, [sp, #20]
 800d932:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800da08 <_vfiprintf_r+0x22c>
 800d936:	7821      	ldrb	r1, [r4, #0]
 800d938:	2203      	movs	r2, #3
 800d93a:	4650      	mov	r0, sl
 800d93c:	f7f2 fcf8 	bl	8000330 <memchr>
 800d940:	b138      	cbz	r0, 800d952 <_vfiprintf_r+0x176>
 800d942:	9b04      	ldr	r3, [sp, #16]
 800d944:	eba0 000a 	sub.w	r0, r0, sl
 800d948:	2240      	movs	r2, #64	@ 0x40
 800d94a:	4082      	lsls	r2, r0
 800d94c:	4313      	orrs	r3, r2
 800d94e:	3401      	adds	r4, #1
 800d950:	9304      	str	r3, [sp, #16]
 800d952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d956:	4829      	ldr	r0, [pc, #164]	@ (800d9fc <_vfiprintf_r+0x220>)
 800d958:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d95c:	2206      	movs	r2, #6
 800d95e:	f7f2 fce7 	bl	8000330 <memchr>
 800d962:	2800      	cmp	r0, #0
 800d964:	d03f      	beq.n	800d9e6 <_vfiprintf_r+0x20a>
 800d966:	4b26      	ldr	r3, [pc, #152]	@ (800da00 <_vfiprintf_r+0x224>)
 800d968:	bb1b      	cbnz	r3, 800d9b2 <_vfiprintf_r+0x1d6>
 800d96a:	9b03      	ldr	r3, [sp, #12]
 800d96c:	3307      	adds	r3, #7
 800d96e:	f023 0307 	bic.w	r3, r3, #7
 800d972:	3308      	adds	r3, #8
 800d974:	9303      	str	r3, [sp, #12]
 800d976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d978:	443b      	add	r3, r7
 800d97a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d97c:	e76a      	b.n	800d854 <_vfiprintf_r+0x78>
 800d97e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d982:	460c      	mov	r4, r1
 800d984:	2001      	movs	r0, #1
 800d986:	e7a8      	b.n	800d8da <_vfiprintf_r+0xfe>
 800d988:	2300      	movs	r3, #0
 800d98a:	3401      	adds	r4, #1
 800d98c:	9305      	str	r3, [sp, #20]
 800d98e:	4619      	mov	r1, r3
 800d990:	f04f 0c0a 	mov.w	ip, #10
 800d994:	4620      	mov	r0, r4
 800d996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d99a:	3a30      	subs	r2, #48	@ 0x30
 800d99c:	2a09      	cmp	r2, #9
 800d99e:	d903      	bls.n	800d9a8 <_vfiprintf_r+0x1cc>
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d0c6      	beq.n	800d932 <_vfiprintf_r+0x156>
 800d9a4:	9105      	str	r1, [sp, #20]
 800d9a6:	e7c4      	b.n	800d932 <_vfiprintf_r+0x156>
 800d9a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e7f0      	b.n	800d994 <_vfiprintf_r+0x1b8>
 800d9b2:	ab03      	add	r3, sp, #12
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	462a      	mov	r2, r5
 800d9b8:	4b12      	ldr	r3, [pc, #72]	@ (800da04 <_vfiprintf_r+0x228>)
 800d9ba:	a904      	add	r1, sp, #16
 800d9bc:	4630      	mov	r0, r6
 800d9be:	f7fd fcc3 	bl	800b348 <_printf_float>
 800d9c2:	4607      	mov	r7, r0
 800d9c4:	1c78      	adds	r0, r7, #1
 800d9c6:	d1d6      	bne.n	800d976 <_vfiprintf_r+0x19a>
 800d9c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9ca:	07d9      	lsls	r1, r3, #31
 800d9cc:	d405      	bmi.n	800d9da <_vfiprintf_r+0x1fe>
 800d9ce:	89ab      	ldrh	r3, [r5, #12]
 800d9d0:	059a      	lsls	r2, r3, #22
 800d9d2:	d402      	bmi.n	800d9da <_vfiprintf_r+0x1fe>
 800d9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9d6:	f7fe fb0f 	bl	800bff8 <__retarget_lock_release_recursive>
 800d9da:	89ab      	ldrh	r3, [r5, #12]
 800d9dc:	065b      	lsls	r3, r3, #25
 800d9de:	f53f af1f 	bmi.w	800d820 <_vfiprintf_r+0x44>
 800d9e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9e4:	e71e      	b.n	800d824 <_vfiprintf_r+0x48>
 800d9e6:	ab03      	add	r3, sp, #12
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	462a      	mov	r2, r5
 800d9ec:	4b05      	ldr	r3, [pc, #20]	@ (800da04 <_vfiprintf_r+0x228>)
 800d9ee:	a904      	add	r1, sp, #16
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	f7fd ff31 	bl	800b858 <_printf_i>
 800d9f6:	e7e4      	b.n	800d9c2 <_vfiprintf_r+0x1e6>
 800d9f8:	0800e7da 	.word	0x0800e7da
 800d9fc:	0800e7e4 	.word	0x0800e7e4
 800da00:	0800b349 	.word	0x0800b349
 800da04:	0800d7b7 	.word	0x0800d7b7
 800da08:	0800e7e0 	.word	0x0800e7e0

0800da0c <__sflush_r>:
 800da0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da14:	0716      	lsls	r6, r2, #28
 800da16:	4605      	mov	r5, r0
 800da18:	460c      	mov	r4, r1
 800da1a:	d454      	bmi.n	800dac6 <__sflush_r+0xba>
 800da1c:	684b      	ldr	r3, [r1, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	dc02      	bgt.n	800da28 <__sflush_r+0x1c>
 800da22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da24:	2b00      	cmp	r3, #0
 800da26:	dd48      	ble.n	800daba <__sflush_r+0xae>
 800da28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da2a:	2e00      	cmp	r6, #0
 800da2c:	d045      	beq.n	800daba <__sflush_r+0xae>
 800da2e:	2300      	movs	r3, #0
 800da30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da34:	682f      	ldr	r7, [r5, #0]
 800da36:	6a21      	ldr	r1, [r4, #32]
 800da38:	602b      	str	r3, [r5, #0]
 800da3a:	d030      	beq.n	800da9e <__sflush_r+0x92>
 800da3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	0759      	lsls	r1, r3, #29
 800da42:	d505      	bpl.n	800da50 <__sflush_r+0x44>
 800da44:	6863      	ldr	r3, [r4, #4]
 800da46:	1ad2      	subs	r2, r2, r3
 800da48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da4a:	b10b      	cbz	r3, 800da50 <__sflush_r+0x44>
 800da4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da4e:	1ad2      	subs	r2, r2, r3
 800da50:	2300      	movs	r3, #0
 800da52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da54:	6a21      	ldr	r1, [r4, #32]
 800da56:	4628      	mov	r0, r5
 800da58:	47b0      	blx	r6
 800da5a:	1c43      	adds	r3, r0, #1
 800da5c:	89a3      	ldrh	r3, [r4, #12]
 800da5e:	d106      	bne.n	800da6e <__sflush_r+0x62>
 800da60:	6829      	ldr	r1, [r5, #0]
 800da62:	291d      	cmp	r1, #29
 800da64:	d82b      	bhi.n	800dabe <__sflush_r+0xb2>
 800da66:	4a2a      	ldr	r2, [pc, #168]	@ (800db10 <__sflush_r+0x104>)
 800da68:	40ca      	lsrs	r2, r1
 800da6a:	07d6      	lsls	r6, r2, #31
 800da6c:	d527      	bpl.n	800dabe <__sflush_r+0xb2>
 800da6e:	2200      	movs	r2, #0
 800da70:	6062      	str	r2, [r4, #4]
 800da72:	04d9      	lsls	r1, r3, #19
 800da74:	6922      	ldr	r2, [r4, #16]
 800da76:	6022      	str	r2, [r4, #0]
 800da78:	d504      	bpl.n	800da84 <__sflush_r+0x78>
 800da7a:	1c42      	adds	r2, r0, #1
 800da7c:	d101      	bne.n	800da82 <__sflush_r+0x76>
 800da7e:	682b      	ldr	r3, [r5, #0]
 800da80:	b903      	cbnz	r3, 800da84 <__sflush_r+0x78>
 800da82:	6560      	str	r0, [r4, #84]	@ 0x54
 800da84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da86:	602f      	str	r7, [r5, #0]
 800da88:	b1b9      	cbz	r1, 800daba <__sflush_r+0xae>
 800da8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da8e:	4299      	cmp	r1, r3
 800da90:	d002      	beq.n	800da98 <__sflush_r+0x8c>
 800da92:	4628      	mov	r0, r5
 800da94:	f7ff f8a6 	bl	800cbe4 <_free_r>
 800da98:	2300      	movs	r3, #0
 800da9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800da9c:	e00d      	b.n	800daba <__sflush_r+0xae>
 800da9e:	2301      	movs	r3, #1
 800daa0:	4628      	mov	r0, r5
 800daa2:	47b0      	blx	r6
 800daa4:	4602      	mov	r2, r0
 800daa6:	1c50      	adds	r0, r2, #1
 800daa8:	d1c9      	bne.n	800da3e <__sflush_r+0x32>
 800daaa:	682b      	ldr	r3, [r5, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d0c6      	beq.n	800da3e <__sflush_r+0x32>
 800dab0:	2b1d      	cmp	r3, #29
 800dab2:	d001      	beq.n	800dab8 <__sflush_r+0xac>
 800dab4:	2b16      	cmp	r3, #22
 800dab6:	d11e      	bne.n	800daf6 <__sflush_r+0xea>
 800dab8:	602f      	str	r7, [r5, #0]
 800daba:	2000      	movs	r0, #0
 800dabc:	e022      	b.n	800db04 <__sflush_r+0xf8>
 800dabe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dac2:	b21b      	sxth	r3, r3
 800dac4:	e01b      	b.n	800dafe <__sflush_r+0xf2>
 800dac6:	690f      	ldr	r7, [r1, #16]
 800dac8:	2f00      	cmp	r7, #0
 800daca:	d0f6      	beq.n	800daba <__sflush_r+0xae>
 800dacc:	0793      	lsls	r3, r2, #30
 800dace:	680e      	ldr	r6, [r1, #0]
 800dad0:	bf08      	it	eq
 800dad2:	694b      	ldreq	r3, [r1, #20]
 800dad4:	600f      	str	r7, [r1, #0]
 800dad6:	bf18      	it	ne
 800dad8:	2300      	movne	r3, #0
 800dada:	eba6 0807 	sub.w	r8, r6, r7
 800dade:	608b      	str	r3, [r1, #8]
 800dae0:	f1b8 0f00 	cmp.w	r8, #0
 800dae4:	dde9      	ble.n	800daba <__sflush_r+0xae>
 800dae6:	6a21      	ldr	r1, [r4, #32]
 800dae8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800daea:	4643      	mov	r3, r8
 800daec:	463a      	mov	r2, r7
 800daee:	4628      	mov	r0, r5
 800daf0:	47b0      	blx	r6
 800daf2:	2800      	cmp	r0, #0
 800daf4:	dc08      	bgt.n	800db08 <__sflush_r+0xfc>
 800daf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dafe:	81a3      	strh	r3, [r4, #12]
 800db00:	f04f 30ff 	mov.w	r0, #4294967295
 800db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db08:	4407      	add	r7, r0
 800db0a:	eba8 0800 	sub.w	r8, r8, r0
 800db0e:	e7e7      	b.n	800dae0 <__sflush_r+0xd4>
 800db10:	20400001 	.word	0x20400001

0800db14 <_fflush_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	690b      	ldr	r3, [r1, #16]
 800db18:	4605      	mov	r5, r0
 800db1a:	460c      	mov	r4, r1
 800db1c:	b913      	cbnz	r3, 800db24 <_fflush_r+0x10>
 800db1e:	2500      	movs	r5, #0
 800db20:	4628      	mov	r0, r5
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	b118      	cbz	r0, 800db2e <_fflush_r+0x1a>
 800db26:	6a03      	ldr	r3, [r0, #32]
 800db28:	b90b      	cbnz	r3, 800db2e <_fflush_r+0x1a>
 800db2a:	f7fe f83f 	bl	800bbac <__sinit>
 800db2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0f3      	beq.n	800db1e <_fflush_r+0xa>
 800db36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db38:	07d0      	lsls	r0, r2, #31
 800db3a:	d404      	bmi.n	800db46 <_fflush_r+0x32>
 800db3c:	0599      	lsls	r1, r3, #22
 800db3e:	d402      	bmi.n	800db46 <_fflush_r+0x32>
 800db40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db42:	f7fe fa58 	bl	800bff6 <__retarget_lock_acquire_recursive>
 800db46:	4628      	mov	r0, r5
 800db48:	4621      	mov	r1, r4
 800db4a:	f7ff ff5f 	bl	800da0c <__sflush_r>
 800db4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db50:	07da      	lsls	r2, r3, #31
 800db52:	4605      	mov	r5, r0
 800db54:	d4e4      	bmi.n	800db20 <_fflush_r+0xc>
 800db56:	89a3      	ldrh	r3, [r4, #12]
 800db58:	059b      	lsls	r3, r3, #22
 800db5a:	d4e1      	bmi.n	800db20 <_fflush_r+0xc>
 800db5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db5e:	f7fe fa4b 	bl	800bff8 <__retarget_lock_release_recursive>
 800db62:	e7dd      	b.n	800db20 <_fflush_r+0xc>

0800db64 <__swhatbuf_r>:
 800db64:	b570      	push	{r4, r5, r6, lr}
 800db66:	460c      	mov	r4, r1
 800db68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db6c:	2900      	cmp	r1, #0
 800db6e:	b096      	sub	sp, #88	@ 0x58
 800db70:	4615      	mov	r5, r2
 800db72:	461e      	mov	r6, r3
 800db74:	da0d      	bge.n	800db92 <__swhatbuf_r+0x2e>
 800db76:	89a3      	ldrh	r3, [r4, #12]
 800db78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db7c:	f04f 0100 	mov.w	r1, #0
 800db80:	bf14      	ite	ne
 800db82:	2340      	movne	r3, #64	@ 0x40
 800db84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db88:	2000      	movs	r0, #0
 800db8a:	6031      	str	r1, [r6, #0]
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	b016      	add	sp, #88	@ 0x58
 800db90:	bd70      	pop	{r4, r5, r6, pc}
 800db92:	466a      	mov	r2, sp
 800db94:	f000 f896 	bl	800dcc4 <_fstat_r>
 800db98:	2800      	cmp	r0, #0
 800db9a:	dbec      	blt.n	800db76 <__swhatbuf_r+0x12>
 800db9c:	9901      	ldr	r1, [sp, #4]
 800db9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dba6:	4259      	negs	r1, r3
 800dba8:	4159      	adcs	r1, r3
 800dbaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbae:	e7eb      	b.n	800db88 <__swhatbuf_r+0x24>

0800dbb0 <__smakebuf_r>:
 800dbb0:	898b      	ldrh	r3, [r1, #12]
 800dbb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbb4:	079d      	lsls	r5, r3, #30
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	460c      	mov	r4, r1
 800dbba:	d507      	bpl.n	800dbcc <__smakebuf_r+0x1c>
 800dbbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	6123      	str	r3, [r4, #16]
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	6163      	str	r3, [r4, #20]
 800dbc8:	b003      	add	sp, #12
 800dbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbcc:	ab01      	add	r3, sp, #4
 800dbce:	466a      	mov	r2, sp
 800dbd0:	f7ff ffc8 	bl	800db64 <__swhatbuf_r>
 800dbd4:	9f00      	ldr	r7, [sp, #0]
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	4639      	mov	r1, r7
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f7ff f876 	bl	800cccc <_malloc_r>
 800dbe0:	b948      	cbnz	r0, 800dbf6 <__smakebuf_r+0x46>
 800dbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbe6:	059a      	lsls	r2, r3, #22
 800dbe8:	d4ee      	bmi.n	800dbc8 <__smakebuf_r+0x18>
 800dbea:	f023 0303 	bic.w	r3, r3, #3
 800dbee:	f043 0302 	orr.w	r3, r3, #2
 800dbf2:	81a3      	strh	r3, [r4, #12]
 800dbf4:	e7e2      	b.n	800dbbc <__smakebuf_r+0xc>
 800dbf6:	89a3      	ldrh	r3, [r4, #12]
 800dbf8:	6020      	str	r0, [r4, #0]
 800dbfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbfe:	81a3      	strh	r3, [r4, #12]
 800dc00:	9b01      	ldr	r3, [sp, #4]
 800dc02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc06:	b15b      	cbz	r3, 800dc20 <__smakebuf_r+0x70>
 800dc08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f000 f86b 	bl	800dce8 <_isatty_r>
 800dc12:	b128      	cbz	r0, 800dc20 <__smakebuf_r+0x70>
 800dc14:	89a3      	ldrh	r3, [r4, #12]
 800dc16:	f023 0303 	bic.w	r3, r3, #3
 800dc1a:	f043 0301 	orr.w	r3, r3, #1
 800dc1e:	81a3      	strh	r3, [r4, #12]
 800dc20:	89a3      	ldrh	r3, [r4, #12]
 800dc22:	431d      	orrs	r5, r3
 800dc24:	81a5      	strh	r5, [r4, #12]
 800dc26:	e7cf      	b.n	800dbc8 <__smakebuf_r+0x18>

0800dc28 <_putc_r>:
 800dc28:	b570      	push	{r4, r5, r6, lr}
 800dc2a:	460d      	mov	r5, r1
 800dc2c:	4614      	mov	r4, r2
 800dc2e:	4606      	mov	r6, r0
 800dc30:	b118      	cbz	r0, 800dc3a <_putc_r+0x12>
 800dc32:	6a03      	ldr	r3, [r0, #32]
 800dc34:	b90b      	cbnz	r3, 800dc3a <_putc_r+0x12>
 800dc36:	f7fd ffb9 	bl	800bbac <__sinit>
 800dc3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc3c:	07d8      	lsls	r0, r3, #31
 800dc3e:	d405      	bmi.n	800dc4c <_putc_r+0x24>
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	0599      	lsls	r1, r3, #22
 800dc44:	d402      	bmi.n	800dc4c <_putc_r+0x24>
 800dc46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc48:	f7fe f9d5 	bl	800bff6 <__retarget_lock_acquire_recursive>
 800dc4c:	68a3      	ldr	r3, [r4, #8]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	60a3      	str	r3, [r4, #8]
 800dc54:	da05      	bge.n	800dc62 <_putc_r+0x3a>
 800dc56:	69a2      	ldr	r2, [r4, #24]
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	db12      	blt.n	800dc82 <_putc_r+0x5a>
 800dc5c:	b2eb      	uxtb	r3, r5
 800dc5e:	2b0a      	cmp	r3, #10
 800dc60:	d00f      	beq.n	800dc82 <_putc_r+0x5a>
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	6022      	str	r2, [r4, #0]
 800dc68:	701d      	strb	r5, [r3, #0]
 800dc6a:	b2ed      	uxtb	r5, r5
 800dc6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc6e:	07da      	lsls	r2, r3, #31
 800dc70:	d405      	bmi.n	800dc7e <_putc_r+0x56>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	059b      	lsls	r3, r3, #22
 800dc76:	d402      	bmi.n	800dc7e <_putc_r+0x56>
 800dc78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc7a:	f7fe f9bd 	bl	800bff8 <__retarget_lock_release_recursive>
 800dc7e:	4628      	mov	r0, r5
 800dc80:	bd70      	pop	{r4, r5, r6, pc}
 800dc82:	4629      	mov	r1, r5
 800dc84:	4622      	mov	r2, r4
 800dc86:	4630      	mov	r0, r6
 800dc88:	f7fe f8a3 	bl	800bdd2 <__swbuf_r>
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	e7ed      	b.n	800dc6c <_putc_r+0x44>

0800dc90 <memmove>:
 800dc90:	4288      	cmp	r0, r1
 800dc92:	b510      	push	{r4, lr}
 800dc94:	eb01 0402 	add.w	r4, r1, r2
 800dc98:	d902      	bls.n	800dca0 <memmove+0x10>
 800dc9a:	4284      	cmp	r4, r0
 800dc9c:	4623      	mov	r3, r4
 800dc9e:	d807      	bhi.n	800dcb0 <memmove+0x20>
 800dca0:	1e43      	subs	r3, r0, #1
 800dca2:	42a1      	cmp	r1, r4
 800dca4:	d008      	beq.n	800dcb8 <memmove+0x28>
 800dca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcae:	e7f8      	b.n	800dca2 <memmove+0x12>
 800dcb0:	4402      	add	r2, r0
 800dcb2:	4601      	mov	r1, r0
 800dcb4:	428a      	cmp	r2, r1
 800dcb6:	d100      	bne.n	800dcba <memmove+0x2a>
 800dcb8:	bd10      	pop	{r4, pc}
 800dcba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcc2:	e7f7      	b.n	800dcb4 <memmove+0x24>

0800dcc4 <_fstat_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4d07      	ldr	r5, [pc, #28]	@ (800dce4 <_fstat_r+0x20>)
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4604      	mov	r4, r0
 800dccc:	4608      	mov	r0, r1
 800dcce:	4611      	mov	r1, r2
 800dcd0:	602b      	str	r3, [r5, #0]
 800dcd2:	f7f4 fc61 	bl	8002598 <_fstat>
 800dcd6:	1c43      	adds	r3, r0, #1
 800dcd8:	d102      	bne.n	800dce0 <_fstat_r+0x1c>
 800dcda:	682b      	ldr	r3, [r5, #0]
 800dcdc:	b103      	cbz	r3, 800dce0 <_fstat_r+0x1c>
 800dcde:	6023      	str	r3, [r4, #0]
 800dce0:	bd38      	pop	{r3, r4, r5, pc}
 800dce2:	bf00      	nop
 800dce4:	24000ad4 	.word	0x24000ad4

0800dce8 <_isatty_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d06      	ldr	r5, [pc, #24]	@ (800dd04 <_isatty_r+0x1c>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	602b      	str	r3, [r5, #0]
 800dcf4:	f7f4 fc60 	bl	80025b8 <_isatty>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_isatty_r+0x1a>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_isatty_r+0x1a>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	24000ad4 	.word	0x24000ad4

0800dd08 <_sbrk_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	4d06      	ldr	r5, [pc, #24]	@ (800dd24 <_sbrk_r+0x1c>)
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	4604      	mov	r4, r0
 800dd10:	4608      	mov	r0, r1
 800dd12:	602b      	str	r3, [r5, #0]
 800dd14:	f7f4 fc68 	bl	80025e8 <_sbrk>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	d102      	bne.n	800dd22 <_sbrk_r+0x1a>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	b103      	cbz	r3, 800dd22 <_sbrk_r+0x1a>
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	bd38      	pop	{r3, r4, r5, pc}
 800dd24:	24000ad4 	.word	0x24000ad4

0800dd28 <__assert_func>:
 800dd28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd2a:	4614      	mov	r4, r2
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	4b09      	ldr	r3, [pc, #36]	@ (800dd54 <__assert_func+0x2c>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4605      	mov	r5, r0
 800dd34:	68d8      	ldr	r0, [r3, #12]
 800dd36:	b14c      	cbz	r4, 800dd4c <__assert_func+0x24>
 800dd38:	4b07      	ldr	r3, [pc, #28]	@ (800dd58 <__assert_func+0x30>)
 800dd3a:	9100      	str	r1, [sp, #0]
 800dd3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd40:	4906      	ldr	r1, [pc, #24]	@ (800dd5c <__assert_func+0x34>)
 800dd42:	462b      	mov	r3, r5
 800dd44:	f000 f870 	bl	800de28 <fiprintf>
 800dd48:	f000 f880 	bl	800de4c <abort>
 800dd4c:	4b04      	ldr	r3, [pc, #16]	@ (800dd60 <__assert_func+0x38>)
 800dd4e:	461c      	mov	r4, r3
 800dd50:	e7f3      	b.n	800dd3a <__assert_func+0x12>
 800dd52:	bf00      	nop
 800dd54:	2400003c 	.word	0x2400003c
 800dd58:	0800e7f5 	.word	0x0800e7f5
 800dd5c:	0800e802 	.word	0x0800e802
 800dd60:	0800e830 	.word	0x0800e830

0800dd64 <_calloc_r>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	fba1 5402 	umull	r5, r4, r1, r2
 800dd6a:	b934      	cbnz	r4, 800dd7a <_calloc_r+0x16>
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	f7fe ffad 	bl	800cccc <_malloc_r>
 800dd72:	4606      	mov	r6, r0
 800dd74:	b928      	cbnz	r0, 800dd82 <_calloc_r+0x1e>
 800dd76:	4630      	mov	r0, r6
 800dd78:	bd70      	pop	{r4, r5, r6, pc}
 800dd7a:	220c      	movs	r2, #12
 800dd7c:	6002      	str	r2, [r0, #0]
 800dd7e:	2600      	movs	r6, #0
 800dd80:	e7f9      	b.n	800dd76 <_calloc_r+0x12>
 800dd82:	462a      	mov	r2, r5
 800dd84:	4621      	mov	r1, r4
 800dd86:	f7fe f8b9 	bl	800befc <memset>
 800dd8a:	e7f4      	b.n	800dd76 <_calloc_r+0x12>

0800dd8c <__ascii_mbtowc>:
 800dd8c:	b082      	sub	sp, #8
 800dd8e:	b901      	cbnz	r1, 800dd92 <__ascii_mbtowc+0x6>
 800dd90:	a901      	add	r1, sp, #4
 800dd92:	b142      	cbz	r2, 800dda6 <__ascii_mbtowc+0x1a>
 800dd94:	b14b      	cbz	r3, 800ddaa <__ascii_mbtowc+0x1e>
 800dd96:	7813      	ldrb	r3, [r2, #0]
 800dd98:	600b      	str	r3, [r1, #0]
 800dd9a:	7812      	ldrb	r2, [r2, #0]
 800dd9c:	1e10      	subs	r0, r2, #0
 800dd9e:	bf18      	it	ne
 800dda0:	2001      	movne	r0, #1
 800dda2:	b002      	add	sp, #8
 800dda4:	4770      	bx	lr
 800dda6:	4610      	mov	r0, r2
 800dda8:	e7fb      	b.n	800dda2 <__ascii_mbtowc+0x16>
 800ddaa:	f06f 0001 	mvn.w	r0, #1
 800ddae:	e7f8      	b.n	800dda2 <__ascii_mbtowc+0x16>

0800ddb0 <_realloc_r>:
 800ddb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb4:	4607      	mov	r7, r0
 800ddb6:	4614      	mov	r4, r2
 800ddb8:	460d      	mov	r5, r1
 800ddba:	b921      	cbnz	r1, 800ddc6 <_realloc_r+0x16>
 800ddbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	f7fe bf83 	b.w	800cccc <_malloc_r>
 800ddc6:	b92a      	cbnz	r2, 800ddd4 <_realloc_r+0x24>
 800ddc8:	f7fe ff0c 	bl	800cbe4 <_free_r>
 800ddcc:	4625      	mov	r5, r4
 800ddce:	4628      	mov	r0, r5
 800ddd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd4:	f000 f841 	bl	800de5a <_malloc_usable_size_r>
 800ddd8:	4284      	cmp	r4, r0
 800ddda:	4606      	mov	r6, r0
 800dddc:	d802      	bhi.n	800dde4 <_realloc_r+0x34>
 800ddde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dde2:	d8f4      	bhi.n	800ddce <_realloc_r+0x1e>
 800dde4:	4621      	mov	r1, r4
 800dde6:	4638      	mov	r0, r7
 800dde8:	f7fe ff70 	bl	800cccc <_malloc_r>
 800ddec:	4680      	mov	r8, r0
 800ddee:	b908      	cbnz	r0, 800ddf4 <_realloc_r+0x44>
 800ddf0:	4645      	mov	r5, r8
 800ddf2:	e7ec      	b.n	800ddce <_realloc_r+0x1e>
 800ddf4:	42b4      	cmp	r4, r6
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	bf28      	it	cs
 800ddfc:	4632      	movcs	r2, r6
 800ddfe:	f7fe f8fc 	bl	800bffa <memcpy>
 800de02:	4629      	mov	r1, r5
 800de04:	4638      	mov	r0, r7
 800de06:	f7fe feed 	bl	800cbe4 <_free_r>
 800de0a:	e7f1      	b.n	800ddf0 <_realloc_r+0x40>

0800de0c <__ascii_wctomb>:
 800de0c:	4603      	mov	r3, r0
 800de0e:	4608      	mov	r0, r1
 800de10:	b141      	cbz	r1, 800de24 <__ascii_wctomb+0x18>
 800de12:	2aff      	cmp	r2, #255	@ 0xff
 800de14:	d904      	bls.n	800de20 <__ascii_wctomb+0x14>
 800de16:	228a      	movs	r2, #138	@ 0x8a
 800de18:	601a      	str	r2, [r3, #0]
 800de1a:	f04f 30ff 	mov.w	r0, #4294967295
 800de1e:	4770      	bx	lr
 800de20:	700a      	strb	r2, [r1, #0]
 800de22:	2001      	movs	r0, #1
 800de24:	4770      	bx	lr
	...

0800de28 <fiprintf>:
 800de28:	b40e      	push	{r1, r2, r3}
 800de2a:	b503      	push	{r0, r1, lr}
 800de2c:	4601      	mov	r1, r0
 800de2e:	ab03      	add	r3, sp, #12
 800de30:	4805      	ldr	r0, [pc, #20]	@ (800de48 <fiprintf+0x20>)
 800de32:	f853 2b04 	ldr.w	r2, [r3], #4
 800de36:	6800      	ldr	r0, [r0, #0]
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	f7ff fccf 	bl	800d7dc <_vfiprintf_r>
 800de3e:	b002      	add	sp, #8
 800de40:	f85d eb04 	ldr.w	lr, [sp], #4
 800de44:	b003      	add	sp, #12
 800de46:	4770      	bx	lr
 800de48:	2400003c 	.word	0x2400003c

0800de4c <abort>:
 800de4c:	b508      	push	{r3, lr}
 800de4e:	2006      	movs	r0, #6
 800de50:	f000 f834 	bl	800debc <raise>
 800de54:	2001      	movs	r0, #1
 800de56:	f7f4 fb4f 	bl	80024f8 <_exit>

0800de5a <_malloc_usable_size_r>:
 800de5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de5e:	1f18      	subs	r0, r3, #4
 800de60:	2b00      	cmp	r3, #0
 800de62:	bfbc      	itt	lt
 800de64:	580b      	ldrlt	r3, [r1, r0]
 800de66:	18c0      	addlt	r0, r0, r3
 800de68:	4770      	bx	lr

0800de6a <_raise_r>:
 800de6a:	291f      	cmp	r1, #31
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	4605      	mov	r5, r0
 800de70:	460c      	mov	r4, r1
 800de72:	d904      	bls.n	800de7e <_raise_r+0x14>
 800de74:	2316      	movs	r3, #22
 800de76:	6003      	str	r3, [r0, #0]
 800de78:	f04f 30ff 	mov.w	r0, #4294967295
 800de7c:	bd38      	pop	{r3, r4, r5, pc}
 800de7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de80:	b112      	cbz	r2, 800de88 <_raise_r+0x1e>
 800de82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de86:	b94b      	cbnz	r3, 800de9c <_raise_r+0x32>
 800de88:	4628      	mov	r0, r5
 800de8a:	f000 f831 	bl	800def0 <_getpid_r>
 800de8e:	4622      	mov	r2, r4
 800de90:	4601      	mov	r1, r0
 800de92:	4628      	mov	r0, r5
 800de94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de98:	f000 b818 	b.w	800decc <_kill_r>
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d00a      	beq.n	800deb6 <_raise_r+0x4c>
 800dea0:	1c59      	adds	r1, r3, #1
 800dea2:	d103      	bne.n	800deac <_raise_r+0x42>
 800dea4:	2316      	movs	r3, #22
 800dea6:	6003      	str	r3, [r0, #0]
 800dea8:	2001      	movs	r0, #1
 800deaa:	e7e7      	b.n	800de7c <_raise_r+0x12>
 800deac:	2100      	movs	r1, #0
 800deae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800deb2:	4620      	mov	r0, r4
 800deb4:	4798      	blx	r3
 800deb6:	2000      	movs	r0, #0
 800deb8:	e7e0      	b.n	800de7c <_raise_r+0x12>
	...

0800debc <raise>:
 800debc:	4b02      	ldr	r3, [pc, #8]	@ (800dec8 <raise+0xc>)
 800debe:	4601      	mov	r1, r0
 800dec0:	6818      	ldr	r0, [r3, #0]
 800dec2:	f7ff bfd2 	b.w	800de6a <_raise_r>
 800dec6:	bf00      	nop
 800dec8:	2400003c 	.word	0x2400003c

0800decc <_kill_r>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	4d07      	ldr	r5, [pc, #28]	@ (800deec <_kill_r+0x20>)
 800ded0:	2300      	movs	r3, #0
 800ded2:	4604      	mov	r4, r0
 800ded4:	4608      	mov	r0, r1
 800ded6:	4611      	mov	r1, r2
 800ded8:	602b      	str	r3, [r5, #0]
 800deda:	f7f4 fafd 	bl	80024d8 <_kill>
 800dede:	1c43      	adds	r3, r0, #1
 800dee0:	d102      	bne.n	800dee8 <_kill_r+0x1c>
 800dee2:	682b      	ldr	r3, [r5, #0]
 800dee4:	b103      	cbz	r3, 800dee8 <_kill_r+0x1c>
 800dee6:	6023      	str	r3, [r4, #0]
 800dee8:	bd38      	pop	{r3, r4, r5, pc}
 800deea:	bf00      	nop
 800deec:	24000ad4 	.word	0x24000ad4

0800def0 <_getpid_r>:
 800def0:	f7f4 baea 	b.w	80024c8 <_getpid>
 800def4:	0000      	movs	r0, r0
	...

0800def8 <fmod>:
 800def8:	b508      	push	{r3, lr}
 800defa:	ed2d 8b04 	vpush	{d8-d9}
 800defe:	eeb0 9b40 	vmov.f64	d9, d0
 800df02:	eeb0 8b41 	vmov.f64	d8, d1
 800df06:	f000 f81b 	bl	800df40 <__ieee754_fmod>
 800df0a:	eeb4 9b48 	vcmp.f64	d9, d8
 800df0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df12:	d60c      	bvs.n	800df2e <fmod+0x36>
 800df14:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800df38 <fmod+0x40>
 800df18:	eeb4 8b49 	vcmp.f64	d8, d9
 800df1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df20:	d105      	bne.n	800df2e <fmod+0x36>
 800df22:	f7fe f83d 	bl	800bfa0 <__errno>
 800df26:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800df2a:	2321      	movs	r3, #33	@ 0x21
 800df2c:	6003      	str	r3, [r0, #0]
 800df2e:	ecbd 8b04 	vpop	{d8-d9}
 800df32:	bd08      	pop	{r3, pc}
 800df34:	f3af 8000 	nop.w
	...

0800df40 <__ieee754_fmod>:
 800df40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df44:	ed8d 1b00 	vstr	d1, [sp]
 800df48:	e9dd 0600 	ldrd	r0, r6, [sp]
 800df4c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800df50:	ea50 0305 	orrs.w	r3, r0, r5
 800df54:	4686      	mov	lr, r0
 800df56:	d00d      	beq.n	800df74 <__ieee754_fmod+0x34>
 800df58:	ee10 ca90 	vmov	ip, s1
 800df5c:	4b77      	ldr	r3, [pc, #476]	@ (800e13c <__ieee754_fmod+0x1fc>)
 800df5e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800df62:	4598      	cmp	r8, r3
 800df64:	d806      	bhi.n	800df74 <__ieee754_fmod+0x34>
 800df66:	4243      	negs	r3, r0
 800df68:	4a75      	ldr	r2, [pc, #468]	@ (800e140 <__ieee754_fmod+0x200>)
 800df6a:	4303      	orrs	r3, r0
 800df6c:	ea45 73d3 	orr.w	r3, r5, r3, lsr #31
 800df70:	4293      	cmp	r3, r2
 800df72:	d908      	bls.n	800df86 <__ieee754_fmod+0x46>
 800df74:	ed9d 7b00 	vldr	d7, [sp]
 800df78:	ee20 7b07 	vmul.f64	d7, d0, d7
 800df7c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800df80:	b003      	add	sp, #12
 800df82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df86:	ee10 9a10 	vmov	r9, s0
 800df8a:	45a8      	cmp	r8, r5
 800df8c:	464f      	mov	r7, r9
 800df8e:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800df92:	dc09      	bgt.n	800dfa8 <__ieee754_fmod+0x68>
 800df94:	dbf4      	blt.n	800df80 <__ieee754_fmod+0x40>
 800df96:	4548      	cmp	r0, r9
 800df98:	d8f2      	bhi.n	800df80 <__ieee754_fmod+0x40>
 800df9a:	d105      	bne.n	800dfa8 <__ieee754_fmod+0x68>
 800df9c:	4b69      	ldr	r3, [pc, #420]	@ (800e144 <__ieee754_fmod+0x204>)
 800df9e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800dfa2:	ed93 0b00 	vldr	d0, [r3]
 800dfa6:	e7eb      	b.n	800df80 <__ieee754_fmod+0x40>
 800dfa8:	4965      	ldr	r1, [pc, #404]	@ (800e140 <__ieee754_fmod+0x200>)
 800dfaa:	ea1c 0f01 	tst.w	ip, r1
 800dfae:	d14a      	bne.n	800e046 <__ieee754_fmod+0x106>
 800dfb0:	f1b8 0f00 	cmp.w	r8, #0
 800dfb4:	d13f      	bne.n	800e036 <__ieee754_fmod+0xf6>
 800dfb6:	4a64      	ldr	r2, [pc, #400]	@ (800e148 <__ieee754_fmod+0x208>)
 800dfb8:	464b      	mov	r3, r9
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	dc38      	bgt.n	800e030 <__ieee754_fmod+0xf0>
 800dfbe:	420e      	tst	r6, r1
 800dfc0:	d150      	bne.n	800e064 <__ieee754_fmod+0x124>
 800dfc2:	2d00      	cmp	r5, #0
 800dfc4:	d147      	bne.n	800e056 <__ieee754_fmod+0x116>
 800dfc6:	4b60      	ldr	r3, [pc, #384]	@ (800e148 <__ieee754_fmod+0x208>)
 800dfc8:	4601      	mov	r1, r0
 800dfca:	2900      	cmp	r1, #0
 800dfcc:	dc40      	bgt.n	800e050 <__ieee754_fmod+0x110>
 800dfce:	495f      	ldr	r1, [pc, #380]	@ (800e14c <__ieee754_fmod+0x20c>)
 800dfd0:	428a      	cmp	r2, r1
 800dfd2:	db4b      	blt.n	800e06c <__ieee754_fmod+0x12c>
 800dfd4:	f3cc 0113 	ubfx	r1, ip, #0, #20
 800dfd8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800dfdc:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 800e14c <__ieee754_fmod+0x20c>
 800dfe0:	4563      	cmp	r3, ip
 800dfe2:	db58      	blt.n	800e096 <__ieee754_fmod+0x156>
 800dfe4:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800dfe8:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800dfec:	1ad0      	subs	r0, r2, r3
 800dfee:	1b8a      	subs	r2, r1, r6
 800dff0:	eba7 050e 	sub.w	r5, r7, lr
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d164      	bne.n	800e0c2 <__ieee754_fmod+0x182>
 800dff8:	4577      	cmp	r7, lr
 800dffa:	bf38      	it	cc
 800dffc:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800e000:	2a00      	cmp	r2, #0
 800e002:	bfbc      	itt	lt
 800e004:	463d      	movlt	r5, r7
 800e006:	460a      	movlt	r2, r1
 800e008:	ea52 0105 	orrs.w	r1, r2, r5
 800e00c:	d0c6      	beq.n	800df9c <__ieee754_fmod+0x5c>
 800e00e:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800e012:	db6b      	blt.n	800e0ec <__ieee754_fmod+0x1ac>
 800e014:	494d      	ldr	r1, [pc, #308]	@ (800e14c <__ieee754_fmod+0x20c>)
 800e016:	428b      	cmp	r3, r1
 800e018:	db6e      	blt.n	800e0f8 <__ieee754_fmod+0x1b8>
 800e01a:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800e01e:	4322      	orrs	r2, r4
 800e020:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800e024:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800e028:	4628      	mov	r0, r5
 800e02a:	ec41 0b10 	vmov	d0, r0, r1
 800e02e:	e7a7      	b.n	800df80 <__ieee754_fmod+0x40>
 800e030:	3a01      	subs	r2, #1
 800e032:	005b      	lsls	r3, r3, #1
 800e034:	e7c1      	b.n	800dfba <__ieee754_fmod+0x7a>
 800e036:	4a45      	ldr	r2, [pc, #276]	@ (800e14c <__ieee754_fmod+0x20c>)
 800e038:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	ddbe      	ble.n	800dfbe <__ieee754_fmod+0x7e>
 800e040:	3a01      	subs	r2, #1
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	e7fa      	b.n	800e03c <__ieee754_fmod+0xfc>
 800e046:	ea4f 5228 	mov.w	r2, r8, asr #20
 800e04a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e04e:	e7b6      	b.n	800dfbe <__ieee754_fmod+0x7e>
 800e050:	3b01      	subs	r3, #1
 800e052:	0049      	lsls	r1, r1, #1
 800e054:	e7b9      	b.n	800dfca <__ieee754_fmod+0x8a>
 800e056:	4b3d      	ldr	r3, [pc, #244]	@ (800e14c <__ieee754_fmod+0x20c>)
 800e058:	02e9      	lsls	r1, r5, #11
 800e05a:	2900      	cmp	r1, #0
 800e05c:	ddb7      	ble.n	800dfce <__ieee754_fmod+0x8e>
 800e05e:	3b01      	subs	r3, #1
 800e060:	0049      	lsls	r1, r1, #1
 800e062:	e7fa      	b.n	800e05a <__ieee754_fmod+0x11a>
 800e064:	152b      	asrs	r3, r5, #20
 800e066:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e06a:	e7b0      	b.n	800dfce <__ieee754_fmod+0x8e>
 800e06c:	eba1 0c02 	sub.w	ip, r1, r2
 800e070:	f1bc 0f1f 	cmp.w	ip, #31
 800e074:	dc09      	bgt.n	800e08a <__ieee754_fmod+0x14a>
 800e076:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800e07a:	fa08 f70c 	lsl.w	r7, r8, ip
 800e07e:	fa29 f101 	lsr.w	r1, r9, r1
 800e082:	4339      	orrs	r1, r7
 800e084:	fa09 f70c 	lsl.w	r7, r9, ip
 800e088:	e7a8      	b.n	800dfdc <__ieee754_fmod+0x9c>
 800e08a:	4931      	ldr	r1, [pc, #196]	@ (800e150 <__ieee754_fmod+0x210>)
 800e08c:	1a89      	subs	r1, r1, r2
 800e08e:	fa09 f101 	lsl.w	r1, r9, r1
 800e092:	2700      	movs	r7, #0
 800e094:	e7a2      	b.n	800dfdc <__ieee754_fmod+0x9c>
 800e096:	ebac 0c03 	sub.w	ip, ip, r3
 800e09a:	f1bc 0f1f 	cmp.w	ip, #31
 800e09e:	dc09      	bgt.n	800e0b4 <__ieee754_fmod+0x174>
 800e0a0:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800e0a4:	fa05 f50c 	lsl.w	r5, r5, ip
 800e0a8:	fa20 f606 	lsr.w	r6, r0, r6
 800e0ac:	432e      	orrs	r6, r5
 800e0ae:	fa00 fe0c 	lsl.w	lr, r0, ip
 800e0b2:	e79b      	b.n	800dfec <__ieee754_fmod+0xac>
 800e0b4:	4e26      	ldr	r6, [pc, #152]	@ (800e150 <__ieee754_fmod+0x210>)
 800e0b6:	1af6      	subs	r6, r6, r3
 800e0b8:	fa00 f606 	lsl.w	r6, r0, r6
 800e0bc:	f04f 0e00 	mov.w	lr, #0
 800e0c0:	e794      	b.n	800dfec <__ieee754_fmod+0xac>
 800e0c2:	4577      	cmp	r7, lr
 800e0c4:	bf38      	it	cc
 800e0c6:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800e0ca:	2a00      	cmp	r2, #0
 800e0cc:	da05      	bge.n	800e0da <__ieee754_fmod+0x19a>
 800e0ce:	0ffa      	lsrs	r2, r7, #31
 800e0d0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e0d4:	007f      	lsls	r7, r7, #1
 800e0d6:	3801      	subs	r0, #1
 800e0d8:	e789      	b.n	800dfee <__ieee754_fmod+0xae>
 800e0da:	ea52 0105 	orrs.w	r1, r2, r5
 800e0de:	f43f af5d 	beq.w	800df9c <__ieee754_fmod+0x5c>
 800e0e2:	0fe9      	lsrs	r1, r5, #31
 800e0e4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800e0e8:	006f      	lsls	r7, r5, #1
 800e0ea:	e7f4      	b.n	800e0d6 <__ieee754_fmod+0x196>
 800e0ec:	0fe9      	lsrs	r1, r5, #31
 800e0ee:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e0f2:	006d      	lsls	r5, r5, #1
 800e0f4:	3b01      	subs	r3, #1
 800e0f6:	e78a      	b.n	800e00e <__ieee754_fmod+0xce>
 800e0f8:	1ac9      	subs	r1, r1, r3
 800e0fa:	2914      	cmp	r1, #20
 800e0fc:	dc0a      	bgt.n	800e114 <__ieee754_fmod+0x1d4>
 800e0fe:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800e102:	fa02 f303 	lsl.w	r3, r2, r3
 800e106:	40cd      	lsrs	r5, r1
 800e108:	432b      	orrs	r3, r5
 800e10a:	410a      	asrs	r2, r1
 800e10c:	ea42 0104 	orr.w	r1, r2, r4
 800e110:	4618      	mov	r0, r3
 800e112:	e78a      	b.n	800e02a <__ieee754_fmod+0xea>
 800e114:	291f      	cmp	r1, #31
 800e116:	dc07      	bgt.n	800e128 <__ieee754_fmod+0x1e8>
 800e118:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800e11c:	40cd      	lsrs	r5, r1
 800e11e:	fa02 f303 	lsl.w	r3, r2, r3
 800e122:	432b      	orrs	r3, r5
 800e124:	4622      	mov	r2, r4
 800e126:	e7f1      	b.n	800e10c <__ieee754_fmod+0x1cc>
 800e128:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800e12c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800e130:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800e134:	33e2      	adds	r3, #226	@ 0xe2
 800e136:	fa42 f303 	asr.w	r3, r2, r3
 800e13a:	e7f3      	b.n	800e124 <__ieee754_fmod+0x1e4>
 800e13c:	7fefffff 	.word	0x7fefffff
 800e140:	7ff00000 	.word	0x7ff00000
 800e144:	0800ea38 	.word	0x0800ea38
 800e148:	fffffbed 	.word	0xfffffbed
 800e14c:	fffffc02 	.word	0xfffffc02
 800e150:	fffffbe2 	.word	0xfffffbe2

0800e154 <_init>:
 800e154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e156:	bf00      	nop
 800e158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e15a:	bc08      	pop	{r3}
 800e15c:	469e      	mov	lr, r3
 800e15e:	4770      	bx	lr

0800e160 <_fini>:
 800e160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e162:	bf00      	nop
 800e164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e166:	bc08      	pop	{r3}
 800e168:	469e      	mov	lr, r3
 800e16a:	4770      	bx	lr
