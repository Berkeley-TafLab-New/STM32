
STM32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df24  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  0800e1f8  0800e1f8  0000f1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ead0  0800ead0  0000fad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ead8  0800ead8  0000fad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800eadc  0800eadc  0000fadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  24000000  0800eae0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008ec  240001e4  0800ecc4  000101e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ad0  0800ecc4  00010ad0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bf1e  00000000  00000000  00010212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003612  00000000  00000000  0002c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001660  00000000  00000000  0002f748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001183  00000000  00000000  00030da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003588f  00000000  00000000  00031f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001eb81  00000000  00000000  000677ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015209e  00000000  00000000  0008633b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d83d9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ff0  00000000  00000000  001d841c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001df40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e1dc 	.word	0x0800e1dc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e8 	.word	0x240001e8
 800030c:	0800e1dc 	.word	0x0800e1dc

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <AS5600_read_angle>:
 */

#include "AS5600.h"
#include "stdint.h"

HAL_StatusTypeDef AS5600_read_angle(I2C_HandleTypeDef *hi2c, float *angle){
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af04      	add	r7, sp, #16
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    
    HAL_StatusTypeDef ret ;
    uint8_t angle_buff[2]; // hold the 2 bits from the Raw Angle 
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG, I2C_MEMADD_SIZE_8BIT,angle_buff,2,HAL_MAX_DELAY);//HAL_MAX_DELAY is blockling 
 8000716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	2302      	movs	r3, #2
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2301      	movs	r3, #1
 8000728:	220c      	movs	r2, #12
 800072a:	216c      	movs	r1, #108	@ 0x6c
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f003 ff45 	bl	80045bc <HAL_I2C_Mem_Read>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK){
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <AS5600_read_angle+0x38>
    	handle_error(ret);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f87e 	bl	8000840 <handle_error>
    }
    uint16_t raw_angle = (((angle_buff[0]<<8)|angle_buff[1])&0x0FFF);
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	b21b      	sxth	r3, r3
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	7a7b      	ldrb	r3, [r7, #9]
 800074e:	b21b      	sxth	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b21b      	sxth	r3, r3
 8000754:	b29b      	uxth	r3, r3
 8000756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800075a:	81bb      	strh	r3, [r7, #12]

    *angle = 360.0f*((float)raw_angle/4096.0f);
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000766:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000788 <AS5600_read_angle+0x7c>
 800076a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800078c <AS5600_read_angle+0x80>
 8000772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	45800000 	.word	0x45800000
 800078c:	43b40000 	.word	0x43b40000

08000790 <AS5600_config_ZPOS>:
    }
}



HAL_StatusTypeDef AS5600_config_ZPOS(I2C_HandleTypeDef *hi2c) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af04      	add	r7, sp, #16
 8000796:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t angle_buff;

    // Read current raw angle
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG,
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	461a      	mov	r2, r3
 800079c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	2302      	movs	r3, #2
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	220c      	movs	r2, #12
 80007ac:	216c      	movs	r1, #108	@ 0x6c
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f003 ff04 	bl	80045bc <HAL_I2C_Mem_Read>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73bb      	strb	r3, [r7, #14]
                          I2C_MEMADD_SIZE_8BIT, angle_buff, 2, HAL_MAX_DELAY);
    if (ret != HAL_OK) {
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <AS5600_config_ZPOS+0x3a>
        handle_error(ret);
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f83d 	bl	8000840 <handle_error>
        return ret;
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	e036      	b.n	8000838 <AS5600_config_ZPOS+0xa8>
    }

    // Extract 12-bit raw angle
    uint16_t raw_angle = ((angle_buff << 8) | angle_buff) & 0x0FFF;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	461a      	mov	r2, r3
 80007d0:	0212      	lsls	r2, r2, #8
 80007d2:	4413      	add	r3, r2
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007da:	81bb      	strh	r3, [r7, #12]

    // Split into ZPOS register values
    uint8_t zpos_data = {
        (uint8_t)((raw_angle >> 8) & 0x0F),  // High byte (4 bits)
 80007dc:	89bb      	ldrh	r3, [r7, #12]
 80007de:	0a1b      	lsrs	r3, r3, #8
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	b2db      	uxtb	r3, r3
    uint8_t zpos_data = {
 80007ea:	72fb      	strb	r3, [r7, #11]
        (uint8_t)(raw_angle & 0xFF)          // Low byte (8 bits)
    };

    // Write to ZPOS registers
    ret = HAL_I2C_Mem_Write(hi2c, (AS5600_ADRESS<<1), AS5600_ZPOS_HI_REG,
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007f0:	9302      	str	r3, [sp, #8]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	f107 030b 	add.w	r3, r7, #11
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2301      	movs	r3, #1
 80007fe:	2201      	movs	r2, #1
 8000800:	216c      	movs	r1, #108	@ 0x6c
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f003 fdc6 	bl	8004394 <HAL_I2C_Mem_Write>
 8000808:	4603      	mov	r3, r0
 800080a:	73bb      	strb	r3, [r7, #14]
                           I2C_MEMADD_SIZE_8BIT, &zpos_data, 1, HAL_MAX_DELAY);
    if (ret != HAL_OK) return ret;
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <AS5600_config_ZPOS+0x86>
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	e010      	b.n	8000838 <AS5600_config_ZPOS+0xa8>

    ret = HAL_I2C_Mem_Write(hi2c, (AS5600_ADRESS<<1), AS5600_ZPOS_LO_REG,
 8000816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800081a:	9302      	str	r3, [sp, #8]
 800081c:	2301      	movs	r3, #1
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	f107 030b 	add.w	r3, r7, #11
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2202      	movs	r2, #2
 800082a:	216c      	movs	r1, #108	@ 0x6c
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f003 fdb1 	bl	8004394 <HAL_I2C_Mem_Write>
 8000832:	4603      	mov	r3, r0
 8000834:	73bb      	strb	r3, [r7, #14]
                           I2C_MEMADD_SIZE_8BIT, &zpos_data, 1, HAL_MAX_DELAY);
    return ret;
 8000836:	7bbb      	ldrb	r3, [r7, #14]

    }
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <handle_error>:





void handle_error(HAL_StatusTypeDef status) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d004      	beq.n	800085a <handle_error+0x1a>
        // Implement error handling logic (e.g., log error or reset I²C bus)
        printf("I2C Error: %d\n", status);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4619      	mov	r1, r3
 8000854:	4803      	ldr	r0, [pc, #12]	@ (8000864 <handle_error+0x24>)
 8000856:	f00b fa45 	bl	800bce4 <iprintf>
    }
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	0800e23c 	.word	0x0800e23c

08000868 <__io_putchar>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000870:	1d39      	adds	r1, r7, #4
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000876:	2201      	movs	r2, #1
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <__io_putchar+0x20>)
 800087a:	f008 f81d 	bl	80088b8 <HAL_UART_Transmit>
     //HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1); //enable to get debug over STLINK

    return ch;
 800087e:	687b      	ldr	r3, [r7, #4]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000380 	.word	0x24000380

0800088c <System_Init>:
//uart interrupt ring buffer init
void System_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  // Initialize ring buffer
  ring_buffer_init(&uart_ring_buffer);
 8000890:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <System_Init+0x4c>)
 8000892:	f001 f8e5 	bl	8001a60 <ring_buffer_init>
  ring_buffer_init(&uart2_ring_buffer);
 8000896:	4811      	ldr	r0, [pc, #68]	@ (80008dc <System_Init+0x50>)
 8000898:	f001 f8e2 	bl	8001a60 <ring_buffer_init>

  // Start UART reception in interrupt mode
  HAL_UART_Receive_IT(&huart3, &rx_data_s, 1); // initialising Stlink interrupts
 800089c:	2201      	movs	r2, #1
 800089e:	4910      	ldr	r1, [pc, #64]	@ (80008e0 <System_Init+0x54>)
 80008a0:	4810      	ldr	r0, [pc, #64]	@ (80008e4 <System_Init+0x58>)
 80008a2:	f008 f897 	bl	80089d4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data_uart2, 1); // initialising XBee interrupts
 80008a6:	2201      	movs	r2, #1
 80008a8:	490f      	ldr	r1, [pc, #60]	@ (80008e8 <System_Init+0x5c>)
 80008aa:	4810      	ldr	r0, [pc, #64]	@ (80008ec <System_Init+0x60>)
 80008ac:	f008 f892 	bl	80089d4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &ucRxData, 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	490f      	ldr	r1, [pc, #60]	@ (80008f0 <System_Init+0x64>)
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <System_Init+0x68>)
 80008b6:	f008 f88d 	bl	80089d4 <HAL_UART_Receive_IT>

  //Start the rudder
  // Initialize rudder control
  rudder_init(&htim1, TIM_CHANNEL_2);
 80008ba:	2104      	movs	r1, #4
 80008bc:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <System_Init+0x6c>)
 80008be:	f001 f93d 	bl	8001b3c <rudder_init>

  // Set initial rudder position
  rudder_set_target_angle(rudder_get_straight());
 80008c2:	f001 f9d7 	bl	8001c74 <rudder_get_straight>
 80008c6:	eef0 7a40 	vmov.f32	s15, s0
 80008ca:	eeb0 0a67 	vmov.f32	s0, s15
 80008ce:	f001 f95d 	bl	8001b8c <rudder_set_target_angle>

 }
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	240004ac 	.word	0x240004ac
 80008dc:	240005b0 	.word	0x240005b0
 80008e0:	240006b5 	.word	0x240006b5
 80008e4:	24000414 	.word	0x24000414
 80008e8:	240006b4 	.word	0x240006b4
 80008ec:	24000380 	.word	0x24000380
 80008f0:	240006b6 	.word	0x240006b6
 80008f4:	240002ec 	.word	0x240002ec
 80008f8:	24000254 	.word	0x24000254

080008fc <HAL_UART_RxCpltCallback>:
 

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	ed2d 8b02 	vpush	{d8}
 8000902:	b096      	sub	sp, #88	@ 0x58
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]


  if(huart->Instance==USART1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4ab5      	ldr	r2, [pc, #724]	@ (8000be4 <HAL_UART_RxCpltCallback+0x2e8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d109      	bne.n	8000926 <HAL_UART_RxCpltCallback+0x2a>
	   {
	       WitSerialDataIn(ucRxData);
 8000912:	4bb5      	ldr	r3, [pc, #724]	@ (8000be8 <HAL_UART_RxCpltCallback+0x2ec>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f002 f8a0 	bl	8002a5c <WitSerialDataIn>
	       UART_Start_Receive_IT(huart, &ucRxData, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	49b2      	ldr	r1, [pc, #712]	@ (8000be8 <HAL_UART_RxCpltCallback+0x2ec>)
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f009 fcbf 	bl	800a2a4 <UART_Start_Receive_IT>
	   }


  if (huart->Instance == USART3) { // Ensure this is for the correct UART instance
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4ab0      	ldr	r2, [pc, #704]	@ (8000bec <HAL_UART_RxCpltCallback+0x2f0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d161      	bne.n	80009f4 <HAL_UART_RxCpltCallback+0xf8>
      // Add received byte to the ring buffer
      ring_buffer_put(&uart_ring_buffer, rx_data_s);
 8000930:	4baf      	ldr	r3, [pc, #700]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2f4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	48af      	ldr	r0, [pc, #700]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000938:	f001 f8a4 	bl	8001a84 <ring_buffer_put>

      // Check if we received a carriage return '\r' (end of command)
      if (rx_data_s == '\r') {
 800093c:	4bac      	ldr	r3, [pc, #688]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2f4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b0d      	cmp	r3, #13
 8000942:	d152      	bne.n	80009ea <HAL_UART_RxCpltCallback+0xee>
          uint8_t data;
          uint16_t index = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
          // Extract the command from the ring buffer
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 800094a:	e009      	b.n	8000960 <HAL_UART_RxCpltCallback+0x64>
              command_buffer[index++] = (char)data;
 800094c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	f8a7 2056 	strh.w	r2, [r7, #86]	@ 0x56
 8000956:	461a      	mov	r2, r3
 8000958:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800095c:	4ba6      	ldr	r3, [pc, #664]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2fc>)
 800095e:	5499      	strb	r1, [r3, r2]
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000960:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8000964:	4619      	mov	r1, r3
 8000966:	48a3      	ldr	r0, [pc, #652]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000968:	f001 f8b9 	bl	8001ade <ring_buffer_get>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d007      	beq.n	8000982 <HAL_UART_RxCpltCallback+0x86>
 8000972:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000976:	2b0d      	cmp	r3, #13
 8000978:	d003      	beq.n	8000982 <HAL_UART_RxCpltCallback+0x86>
 800097a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800097e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000980:	d9e4      	bls.n	800094c <HAL_UART_RxCpltCallback+0x50>
          }
          command_buffer[index] = '\0'; // Null-terminate the string
 8000982:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000986:	4a9c      	ldr	r2, [pc, #624]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2fc>)
 8000988:	2100      	movs	r1, #0
 800098a:	54d1      	strb	r1, [r2, r3]
          // Process the command
          const char *response;
          if (strcmp(command_buffer, "hello") == 0) {
 800098c:	499b      	ldr	r1, [pc, #620]	@ (8000bfc <HAL_UART_RxCpltCallback+0x300>)
 800098e:	489a      	ldr	r0, [pc, #616]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2fc>)
 8000990:	f7ff fcbe 	bl	8000310 <strcmp>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d102      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0xa4>
              response = "Hello to you too!\n";
 800099a:	4b99      	ldr	r3, [pc, #612]	@ (8000c00 <HAL_UART_RxCpltCallback+0x304>)
 800099c:	653b      	str	r3, [r7, #80]	@ 0x50
 800099e:	e014      	b.n	80009ca <HAL_UART_RxCpltCallback+0xce>
          } else if (strcmp(command_buffer, "setzerouart") == 0) {
 80009a0:	4998      	ldr	r1, [pc, #608]	@ (8000c04 <HAL_UART_RxCpltCallback+0x308>)
 80009a2:	4895      	ldr	r0, [pc, #596]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2fc>)
 80009a4:	f7ff fcb4 	bl	8000310 <strcmp>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10b      	bne.n	80009c6 <HAL_UART_RxCpltCallback+0xca>
              if (AS5600_config_ZPOS(&hi2c1) == HAL_OK) {
 80009ae:	4896      	ldr	r0, [pc, #600]	@ (8000c08 <HAL_UART_RxCpltCallback+0x30c>)
 80009b0:	f7ff feee 	bl	8000790 <AS5600_config_ZPOS>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d102      	bne.n	80009c0 <HAL_UART_RxCpltCallback+0xc4>
                  response = "ZPOS set successfully.\n";
 80009ba:	4b94      	ldr	r3, [pc, #592]	@ (8000c0c <HAL_UART_RxCpltCallback+0x310>)
 80009bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80009be:	e004      	b.n	80009ca <HAL_UART_RxCpltCallback+0xce>
              } else {
                  response = "Failed to set ZPOS.\n";
 80009c0:	4b93      	ldr	r3, [pc, #588]	@ (8000c10 <HAL_UART_RxCpltCallback+0x314>)
 80009c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80009c4:	e001      	b.n	80009ca <HAL_UART_RxCpltCallback+0xce>
              }
          } else {
              response = "Uh oh, something didn't work...\n";
 80009c6:	4b93      	ldr	r3, [pc, #588]	@ (8000c14 <HAL_UART_RxCpltCallback+0x318>)
 80009c8:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          // Transmit the response
          HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 80009ca:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80009cc:	f7ff fd00 	bl	80003d0 <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80009da:	488f      	ldr	r0, [pc, #572]	@ (8000c18 <HAL_UART_RxCpltCallback+0x31c>)
 80009dc:	f007 ff6c 	bl	80088b8 <HAL_UART_Transmit>
          // Clear the command buffer for reuse
          memset(command_buffer, 0, COMMAND_MAX_LENGTH);
 80009e0:	2240      	movs	r2, #64	@ 0x40
 80009e2:	2100      	movs	r1, #0
 80009e4:	4884      	ldr	r0, [pc, #528]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2fc>)
 80009e6:	f00b f9f5 	bl	800bdd4 <memset>
      }
      // Re-enable UART interrupt for next byte reception
      HAL_UART_Receive_IT(&huart3, &rx_data_s, 1);
 80009ea:	2201      	movs	r2, #1
 80009ec:	4980      	ldr	r1, [pc, #512]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2f4>)
 80009ee:	488a      	ldr	r0, [pc, #552]	@ (8000c18 <HAL_UART_RxCpltCallback+0x31c>)
 80009f0:	f007 fff0 	bl	80089d4 <HAL_UART_Receive_IT>
  }
    
  if (huart->Instance == USART2) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a88      	ldr	r2, [pc, #544]	@ (8000c1c <HAL_UART_RxCpltCallback+0x320>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	f040 80ec 	bne.w	8000bd8 <HAL_UART_RxCpltCallback+0x2dc>
    ring_buffer_put(&uart2_ring_buffer, rx_data_uart2);
 8000a00:	4b87      	ldr	r3, [pc, #540]	@ (8000c20 <HAL_UART_RxCpltCallback+0x324>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4887      	ldr	r0, [pc, #540]	@ (8000c24 <HAL_UART_RxCpltCallback+0x328>)
 8000a08:	f001 f83c 	bl	8001a84 <ring_buffer_put>



    //adding manual rudder controls

    if (rx_data_uart2 == '[') {
 8000a0c:	4b84      	ldr	r3, [pc, #528]	@ (8000c20 <HAL_UART_RxCpltCallback+0x324>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b5b      	cmp	r3, #91	@ 0x5b
 8000a12:	d13f      	bne.n	8000a94 <HAL_UART_RxCpltCallback+0x198>
            // Move rudder left
            float angle = rudder_get_target_angle();
 8000a14:	f001 f920 	bl	8001c58 <rudder_get_target_angle>
 8000a18:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
            angle -= 5.0f;
 8000a1c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000a20:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000a24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a28:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
            
            float min = rudder_get_straight() - rudder_get_range();
 8000a2c:	f001 f922 	bl	8001c74 <rudder_get_straight>
 8000a30:	eeb0 8a40 	vmov.f32	s16, s0
 8000a34:	f001 f92c 	bl	8001c90 <rudder_get_range>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000a40:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            if (angle < min)
 8000a44:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000a48:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a54:	d501      	bpl.n	8000a5a <HAL_UART_RxCpltCallback+0x15e>
            {
              angle = min;
 8000a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
            rudder_set_target_angle(angle);
 8000a5a:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8000a5e:	f001 f895 	bl	8001b8c <rudder_set_target_angle>
            
            char response[40];
            sprintf(response, "Rudder LEFT: %.1f degrees\r\n", angle);
 8000a62:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000a66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a6a:	f107 000c 	add.w	r0, r7, #12
 8000a6e:	ec53 2b17 	vmov	r2, r3, d7
 8000a72:	496d      	ldr	r1, [pc, #436]	@ (8000c28 <HAL_UART_RxCpltCallback+0x32c>)
 8000a74:	f00b f852 	bl	800bb1c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), 100);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fca7 	bl	80003d0 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f107 010c 	add.w	r1, r7, #12
 8000a8a:	2364      	movs	r3, #100	@ 0x64
 8000a8c:	4867      	ldr	r0, [pc, #412]	@ (8000c2c <HAL_UART_RxCpltCallback+0x330>)
 8000a8e:	f007 ff13 	bl	80088b8 <HAL_UART_Transmit>
 8000a92:	e042      	b.n	8000b1a <HAL_UART_RxCpltCallback+0x21e>
            

        }
        else if (rx_data_uart2 == ']') {
 8000a94:	4b62      	ldr	r3, [pc, #392]	@ (8000c20 <HAL_UART_RxCpltCallback+0x324>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b5d      	cmp	r3, #93	@ 0x5d
 8000a9a:	d13e      	bne.n	8000b1a <HAL_UART_RxCpltCallback+0x21e>
            // Move rudder right
            float angle = rudder_get_target_angle();
 8000a9c:	f001 f8dc 	bl	8001c58 <rudder_get_target_angle>
 8000aa0:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
            angle += 5.0f;
 8000aa4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000aa8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000aac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ab0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
            
            float max = rudder_get_straight() + rudder_get_range();
 8000ab4:	f001 f8de 	bl	8001c74 <rudder_get_straight>
 8000ab8:	eeb0 8a40 	vmov.f32	s16, s0
 8000abc:	f001 f8e8 	bl	8001c90 <rudder_get_range>
 8000ac0:	eef0 7a40 	vmov.f32	s15, s0
 8000ac4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000ac8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            if (angle > max) 
 8000acc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000ad0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000adc:	dd01      	ble.n	8000ae2 <HAL_UART_RxCpltCallback+0x1e6>
            {
              angle = max;
 8000ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
            }
            
            rudder_set_target_angle(angle);
 8000ae2:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8000ae6:	f001 f851 	bl	8001b8c <rudder_set_target_angle>
            
            char response[40];
            sprintf(response, "Rudder RIGHT: %.1f degrees\r\n", angle);
 8000aea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af2:	f107 000c 	add.w	r0, r7, #12
 8000af6:	ec53 2b17 	vmov	r2, r3, d7
 8000afa:	494d      	ldr	r1, [pc, #308]	@ (8000c30 <HAL_UART_RxCpltCallback+0x334>)
 8000afc:	f00b f80e 	bl	800bb1c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), 100);
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc63 	bl	80003d0 <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	f107 010c 	add.w	r1, r7, #12
 8000b12:	2364      	movs	r3, #100	@ 0x64
 8000b14:	4845      	ldr	r0, [pc, #276]	@ (8000c2c <HAL_UART_RxCpltCallback+0x330>)
 8000b16:	f007 fecf 	bl	80088b8 <HAL_UART_Transmit>
            
        }

    if (rx_data_uart2 == '\r') {
 8000b1a:	4b41      	ldr	r3, [pc, #260]	@ (8000c20 <HAL_UART_RxCpltCallback+0x324>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b0d      	cmp	r3, #13
 8000b20:	d155      	bne.n	8000bce <HAL_UART_RxCpltCallback+0x2d2>
        uint8_t data;
        uint16_t index = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

        while (ring_buffer_get(&uart2_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000b28:	e009      	b.n	8000b3e <HAL_UART_RxCpltCallback+0x242>
            command_buffer_xbee[index++] = (char)data;
 8000b2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8000b34:	461a      	mov	r2, r3
 8000b36:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c34 <HAL_UART_RxCpltCallback+0x338>)
 8000b3c:	5499      	strb	r1, [r3, r2]
        while (ring_buffer_get(&uart2_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000b3e:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8000b42:	4619      	mov	r1, r3
 8000b44:	4837      	ldr	r0, [pc, #220]	@ (8000c24 <HAL_UART_RxCpltCallback+0x328>)
 8000b46:	f000 ffca 	bl	8001ade <ring_buffer_get>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d007      	beq.n	8000b60 <HAL_UART_RxCpltCallback+0x264>
 8000b50:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000b54:	2b0d      	cmp	r3, #13
 8000b56:	d003      	beq.n	8000b60 <HAL_UART_RxCpltCallback+0x264>
 8000b58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000b5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8000b5e:	d9e4      	bls.n	8000b2a <HAL_UART_RxCpltCallback+0x22e>
        }
        command_buffer_xbee[index] = '\0';
 8000b60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000b64:	4a33      	ldr	r2, [pc, #204]	@ (8000c34 <HAL_UART_RxCpltCallback+0x338>)
 8000b66:	2100      	movs	r1, #0
 8000b68:	54d1      	strb	r1, [r2, r3]

        const char *response;
        if (strcmp(command_buffer_xbee, "hello") == 0) {
 8000b6a:	4924      	ldr	r1, [pc, #144]	@ (8000bfc <HAL_UART_RxCpltCallback+0x300>)
 8000b6c:	4831      	ldr	r0, [pc, #196]	@ (8000c34 <HAL_UART_RxCpltCallback+0x338>)
 8000b6e:	f7ff fbcf 	bl	8000310 <strcmp>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <HAL_UART_RxCpltCallback+0x282>
            response = "Hello to you Xbee!\n";
 8000b78:	4b2f      	ldr	r3, [pc, #188]	@ (8000c38 <HAL_UART_RxCpltCallback+0x33c>)
 8000b7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b7c:	e014      	b.n	8000ba8 <HAL_UART_RxCpltCallback+0x2ac>
        } else if (strcmp(command_buffer_xbee, "setzero") == 0) { // make it a switch case
 8000b7e:	492f      	ldr	r1, [pc, #188]	@ (8000c3c <HAL_UART_RxCpltCallback+0x340>)
 8000b80:	482c      	ldr	r0, [pc, #176]	@ (8000c34 <HAL_UART_RxCpltCallback+0x338>)
 8000b82:	f7ff fbc5 	bl	8000310 <strcmp>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10b      	bne.n	8000ba4 <HAL_UART_RxCpltCallback+0x2a8>
            if (AS5600_config_ZPOS(&hi2c1) == HAL_OK) {
 8000b8c:	481e      	ldr	r0, [pc, #120]	@ (8000c08 <HAL_UART_RxCpltCallback+0x30c>)
 8000b8e:	f7ff fdff 	bl	8000790 <AS5600_config_ZPOS>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <HAL_UART_RxCpltCallback+0x2a2>
                response = "ZPOS set successfully via xbee.\n";
 8000b98:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <HAL_UART_RxCpltCallback+0x344>)
 8000b9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b9c:	e004      	b.n	8000ba8 <HAL_UART_RxCpltCallback+0x2ac>
            } else {
                response = "Failed to set ZPOS via Xbee.\n";
 8000b9e:	4b29      	ldr	r3, [pc, #164]	@ (8000c44 <HAL_UART_RxCpltCallback+0x348>)
 8000ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8000ba2:	e001      	b.n	8000ba8 <HAL_UART_RxCpltCallback+0x2ac>
            }
        } else {
            response = "Unrecognized command from XBee\n";
 8000ba4:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <HAL_UART_RxCpltCallback+0x34c>)
 8000ba6:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000ba8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000baa:	f7ff fc11 	bl	80003d0 <strlen>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000bb8:	481c      	ldr	r0, [pc, #112]	@ (8000c2c <HAL_UART_RxCpltCallback+0x330>)
 8000bba:	f007 fe7d 	bl	80088b8 <HAL_UART_Transmit>
        printf(response);
 8000bbe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000bc0:	f00b f890 	bl	800bce4 <iprintf>
        memset(command_buffer_xbee, 0, COMMAND_MAX_LENGTH);
 8000bc4:	2240      	movs	r2, #64	@ 0x40
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	481a      	ldr	r0, [pc, #104]	@ (8000c34 <HAL_UART_RxCpltCallback+0x338>)
 8000bca:	f00b f903 	bl	800bdd4 <memset>
    }


    //HAL_UART_Receive_IT(&huart2, &rx_data_uart2, 1); // Restart interrupt
    UART_Start_Receive_IT(huart, &rx_data_uart2, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4913      	ldr	r1, [pc, #76]	@ (8000c20 <HAL_UART_RxCpltCallback+0x324>)
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f009 fb66 	bl	800a2a4 <UART_Start_Receive_IT>

  }


 }
 8000bd8:	bf00      	nop
 8000bda:	3758      	adds	r7, #88	@ 0x58
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	ecbd 8b02 	vpop	{d8}
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40011000 	.word	0x40011000
 8000be8:	240006b6 	.word	0x240006b6
 8000bec:	40004800 	.word	0x40004800
 8000bf0:	240006b5 	.word	0x240006b5
 8000bf4:	240004ac 	.word	0x240004ac
 8000bf8:	240006b8 	.word	0x240006b8
 8000bfc:	0800e24c 	.word	0x0800e24c
 8000c00:	0800e254 	.word	0x0800e254
 8000c04:	0800e268 	.word	0x0800e268
 8000c08:	24000200 	.word	0x24000200
 8000c0c:	0800e274 	.word	0x0800e274
 8000c10:	0800e28c 	.word	0x0800e28c
 8000c14:	0800e2a4 	.word	0x0800e2a4
 8000c18:	24000414 	.word	0x24000414
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	240006b4 	.word	0x240006b4
 8000c24:	240005b0 	.word	0x240005b0
 8000c28:	0800e2c8 	.word	0x0800e2c8
 8000c2c:	24000380 	.word	0x24000380
 8000c30:	0800e2e4 	.word	0x0800e2e4
 8000c34:	240006f8 	.word	0x240006f8
 8000c38:	0800e304 	.word	0x0800e304
 8000c3c:	0800e318 	.word	0x0800e318
 8000c40:	0800e320 	.word	0x0800e320
 8000c44:	0800e344 	.word	0x0800e344
 8000c48:	0800e364 	.word	0x0800e364

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b0ad      	sub	sp, #180	@ 0xb4
 8000c50:	af06      	add	r7, sp, #24
  float fAcc[3], fGyro[3], fAngle[3], fYaw;
  int i;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c52:	f000 fed3 	bl	80019fc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c56:	f002 f99d 	bl	8002f94 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5a:	f000 faab 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5e:	f000 fd21 	bl	80016a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c62:	f000 fb45 	bl	80012f0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000c66:	f000 fcd1 	bl	800160c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000c6a:	f000 fc83 	bl	8001574 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c6e:	f000 faff 	bl	8001270 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c72:	f000 fc33 	bl	80014dc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c76:	f000 fbd7 	bl	8001428 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  WitInit(WIT_PROTOCOL_NORMAL, 0x50);
 8000c7a:	2150      	movs	r1, #80	@ 0x50
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f002 f93b 	bl	8002ef8 <WitInit>
  WitSerialWriteRegister(SensorUartSend);
 8000c82:	482c      	ldr	r0, [pc, #176]	@ (8000d34 <main+0xe8>)
 8000c84:	f001 fe2e 	bl	80028e4 <WitSerialWriteRegister>
  WitRegisterCallBack(CopeSensorData);
 8000c88:	482b      	ldr	r0, [pc, #172]	@ (8000d38 <main+0xec>)
 8000c8a:	f002 f815 	bl	8002cb8 <WitRegisterCallBack>

  System_Init();
 8000c8e:	f7ff fdfd 	bl	800088c <System_Init>
  AutoScanSensor();
 8000c92:	f000 fe5d 	bl	8001950 <AutoScanSensor>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//sail
 8000c96:	2100      	movs	r1, #0
 8000c98:	4828      	ldr	r0, [pc, #160]	@ (8000d3c <main+0xf0>)
 8000c9a:	f006 febd 	bl	8007a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//propellor
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4827      	ldr	r0, [pc, #156]	@ (8000d40 <main+0xf4>)
 8000ca2:	f006 feb9 	bl	8007a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//rudder
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <main+0xf0>)
 8000caa:	f006 feb5 	bl	8007a18 <HAL_TIM_PWM_Start>


  float angle;
  char str[] = "System Booted";
 8000cae:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <main+0xf8>)
 8000cb0:	f107 0414 	add.w	r4, r7, #20
 8000cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb6:	c407      	stmia	r4!, {r0, r1, r2}
 8000cb8:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 2000);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fb86 	bl	80003d0 <strlen>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	f107 0114 	add.w	r1, r7, #20
 8000ccc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cd0:	481d      	ldr	r0, [pc, #116]	@ (8000d48 <main+0xfc>)
 8000cd2:	f007 fdf1 	bl	80088b8 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000cd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cda:	f002 f9ed 	bl	80030b8 <HAL_Delay>
  ServoController sail_servo;
  sail_servo.htim= &htim1;
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <main+0xf0>)
 8000ce0:	60fb      	str	r3, [r7, #12]
  sail_servo.channel = TIM_CHANNEL_1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef i2c_status = AS5600_read_angle(&hi2c1, &angle);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4817      	ldr	r0, [pc, #92]	@ (8000d4c <main+0x100>)
 8000cee:	f7ff fd0d 	bl	800070c <AS5600_read_angle>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	  if (i2c_status== HAL_OK){
		 // printf("the angle is %f \n", angle);
	  }
	  
	  if (i2c_status != HAL_OK) {
 8000cf8:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <main+0xbc>
	      printf("Error reading angle from AS5600\n");
 8000d00:	4813      	ldr	r0, [pc, #76]	@ (8000d50 <main+0x104>)
 8000d02:	f00b f85f 	bl	800bdc4 <puts>
	      continue; // Skip to the next iteration
 8000d06:	e24b      	b.n	80011a0 <main+0x554>
	  }
    
	  copy_wind_pos(&sail_servo, angle);
 8000d08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f950 	bl	8001fb8 <copy_wind_pos>
	  rudder_update();
 8000d18:	f000 ff86 	bl	8001c28 <rudder_update>

    if(s_cDataUpdate)
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d54 <main+0x108>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0e0      	beq.n	8000ce6 <main+0x9a>
    		{
    			printf("3");
 8000d24:	2033      	movs	r0, #51	@ 0x33
 8000d26:	f00a ffef 	bl	800bd08 <putchar>
            // Assumes AX, AY, AZ are sequential registers starting at AX
            // Assumes GX, GY, GZ are sequential registers starting at GX
            // Assumes Roll, Pitch, Yaw are sequential registers starting at Roll
    			for(i = 0; i < 3; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d30:	e065      	b.n	8000dfe <main+0x1b2>
 8000d32:	bf00      	nop
 8000d34:	080017f5 	.word	0x080017f5
 8000d38:	0800181d 	.word	0x0800181d
 8000d3c:	24000254 	.word	0x24000254
 8000d40:	240002a0 	.word	0x240002a0
 8000d44:	0800e488 	.word	0x0800e488
 8000d48:	24000414 	.word	0x24000414
 8000d4c:	24000200 	.word	0x24000200
 8000d50:	0800e384 	.word	0x0800e384
 8000d54:	240004a8 	.word	0x240004a8
    			{
    				fAcc[i] = sReg[AX+i] / 32768.0f * 16.0f;
 8000d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d5c:	3334      	adds	r3, #52	@ 0x34
 8000d5e:	4adc      	ldr	r2, [pc, #880]	@ (80010d0 <main+0x484>)
 8000d60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d6c:	eddf 6ad9 	vldr	s13, [pc, #868]	@ 80010d4 <main+0x488>
 8000d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d74:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	3398      	adds	r3, #152	@ 0x98
 8000d84:	443b      	add	r3, r7
 8000d86:	3b58      	subs	r3, #88	@ 0x58
 8000d88:	edc3 7a00 	vstr	s15, [r3]
    				fGyro[i] = sReg[GX+i] / 32768.0f * 2000.0f;
 8000d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d90:	3337      	adds	r3, #55	@ 0x37
 8000d92:	4acf      	ldr	r2, [pc, #828]	@ (80010d0 <main+0x484>)
 8000d94:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da0:	eddf 6acc 	vldr	s13, [pc, #816]	@ 80010d4 <main+0x488>
 8000da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000da8:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 80010d8 <main+0x48c>
 8000dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	3398      	adds	r3, #152	@ 0x98
 8000db8:	443b      	add	r3, r7
 8000dba:	3b64      	subs	r3, #100	@ 0x64
 8000dbc:	edc3 7a00 	vstr	s15, [r3]
    				fAngle[i] = sReg[Roll+i] / 32768.0f * 180.0f;
 8000dc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dc4:	333d      	adds	r3, #61	@ 0x3d
 8000dc6:	4ac2      	ldr	r2, [pc, #776]	@ (80010d0 <main+0x484>)
 8000dc8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd4:	eddf 6abf 	vldr	s13, [pc, #764]	@ 80010d4 <main+0x488>
 8000dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ddc:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 80010dc <main+0x490>
 8000de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	3398      	adds	r3, #152	@ 0x98
 8000dec:	443b      	add	r3, r7
 8000dee:	3b70      	subs	r3, #112	@ 0x70
 8000df0:	edc3 7a00 	vstr	s15, [r3]
    			for(i = 0; i < 3; i++)
 8000df4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000dfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	dda8      	ble.n	8000d58 <main+0x10c>
				// Use int32_t for intermediate signed 32-bit values
				// Use uint16_t cast for low words when combining to avoid sign extension issues
				// Use float for final calculated values

				// Longitude & Latitude Calculation
				int32_t iLon = ((int32_t)(short)sReg[LonH] << 16) | (uint16_t)sReg[LonL];
 8000e06:	4bb2      	ldr	r3, [pc, #712]	@ (80010d0 <main+0x484>)
 8000e08:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8000e0c:	041b      	lsls	r3, r3, #16
 8000e0e:	4ab0      	ldr	r2, [pc, #704]	@ (80010d0 <main+0x484>)
 8000e10:	f9b2 2092 	ldrsh.w	r2, [r2, #146]	@ 0x92
 8000e14:	b292      	uxth	r2, r2
 8000e16:	4313      	orrs	r3, r2
 8000e18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				int32_t iLat = ((int32_t)(short)sReg[LatH] << 16) | (uint16_t)sReg[LatL];
 8000e1c:	4bac      	ldr	r3, [pc, #688]	@ (80010d0 <main+0x484>)
 8000e1e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 8000e22:	041b      	lsls	r3, r3, #16
 8000e24:	4aaa      	ldr	r2, [pc, #680]	@ (80010d0 <main+0x484>)
 8000e26:	f9b2 2096 	ldrsh.w	r2, [r2, #150]	@ 0x96
 8000e2a:	b292      	uxth	r2, r2
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

				// Convert from ddmm.mmmmm format (scaled by 100000) to decimal degrees
				float fLon_deg = (float)(iLon / 10000000); // Extract degrees (dd)
 8000e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e36:	4aaa      	ldr	r2, [pc, #680]	@ (80010e0 <main+0x494>)
 8000e38:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3c:	1592      	asrs	r2, r2, #22
 8000e3e:	17db      	asrs	r3, r3, #31
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
				float fLon_min = (float)((iLon % 10000000) / 100000.0f); // Extract minutes (mm.mmmmm)
 8000e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e52:	4aa3      	ldr	r2, [pc, #652]	@ (80010e0 <main+0x494>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1591      	asrs	r1, r2, #22
 8000e5a:	17da      	asrs	r2, r3, #31
 8000e5c:	1a8a      	subs	r2, r1, r2
 8000e5e:	49a1      	ldr	r1, [pc, #644]	@ (80010e4 <main+0x498>)
 8000e60:	fb01 f202 	mul.w	r2, r1, r2
 8000e64:	1a9a      	subs	r2, r3, r2
 8000e66:	ee07 2a90 	vmov	s15, r2
 8000e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e6e:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80010e8 <main+0x49c>
 8000e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e76:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
				float fLongitude = fLon_deg + fLon_min / 60.0f;
 8000e7a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8000e7e:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 80010ec <main+0x4a0>
 8000e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e86:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

				float fLat_deg = (float)(iLat / 10000000); // Extract degrees (dd)
 8000e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000e96:	4a92      	ldr	r2, [pc, #584]	@ (80010e0 <main+0x494>)
 8000e98:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9c:	1592      	asrs	r2, r2, #22
 8000e9e:	17db      	asrs	r3, r3, #31
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eaa:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
				float fLat_min = (float)((iLat % 10000000) / 100000.0f); // Extract minutes (mm.mmmmm)
 8000eae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000eb2:	4a8b      	ldr	r2, [pc, #556]	@ (80010e0 <main+0x494>)
 8000eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb8:	1591      	asrs	r1, r2, #22
 8000eba:	17da      	asrs	r2, r3, #31
 8000ebc:	1a8a      	subs	r2, r1, r2
 8000ebe:	4989      	ldr	r1, [pc, #548]	@ (80010e4 <main+0x498>)
 8000ec0:	fb01 f202 	mul.w	r2, r1, r2
 8000ec4:	1a9a      	subs	r2, r3, r2
 8000ec6:	ee07 2a90 	vmov	s15, r2
 8000eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ece:	eddf 6a86 	vldr	s13, [pc, #536]	@ 80010e8 <main+0x49c>
 8000ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
				float fLatitude = fLat_deg + fLat_min / 60.0f;
 8000eda:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000ede:	eddf 6a83 	vldr	s13, [pc, #524]	@ 80010ec <main+0x4a0>
 8000ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee6:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8000eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eee:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

				// GPS Altitude (m)
				float fGpsAltitude = (float)(short)sReg[GPSHeight] / 10.0f;
 8000ef2:	4b77      	ldr	r3, [pc, #476]	@ (80010d0 <main+0x484>)
 8000ef4:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f00:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f08:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

				// GPS Heading/Course (°). Note: This is course over ground, not magnetic heading.
				float fGpsCourse = (float)(short)sReg[GPSYAW] / 100.0f;
 8000f0c:	4b70      	ldr	r3, [pc, #448]	@ (80010d0 <main+0x484>)
 8000f0e:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1a:	eddf 6a75 	vldr	s13, [pc, #468]	@ 80010f0 <main+0x4a4>
 8000f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f22:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

				// GPS Ground Speed (km/h)
				int32_t iGpsSpeed = ((int32_t)(short)sReg[GPSVH] << 16) | (uint16_t)sReg[GPSVL];
 8000f26:	4b6a      	ldr	r3, [pc, #424]	@ (80010d0 <main+0x484>)
 8000f28:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	4a68      	ldr	r2, [pc, #416]	@ (80010d0 <main+0x484>)
 8000f30:	f9b2 209e 	ldrsh.w	r2, [r2, #158]	@ 0x9e
 8000f34:	b292      	uxth	r2, r2
 8000f36:	4313      	orrs	r3, r2
 8000f38:	667b      	str	r3, [r7, #100]	@ 0x64
				float fGpsSpeed_kmh = (float)iGpsSpeed / 1000.0f;
 8000f3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f44:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80010f4 <main+0x4a8>
 8000f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

				// Satellite Info & Accuracy Metrics
				int iSatellites = (uint16_t)sReg[SVNUM]; // Number of satellites is likely unsigned
 8000f50:	4b5f      	ldr	r3, [pc, #380]	@ (80010d0 <main+0x484>)
 8000f52:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
				float fPDOP = (float)(short)sReg[PDOP] / 100.0f;
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80010d0 <main+0x484>)
 8000f5c:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8000f60:	ee07 3a90 	vmov	s15, r3
 8000f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f68:	eddf 6a61 	vldr	s13, [pc, #388]	@ 80010f0 <main+0x4a4>
 8000f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f70:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
				float fHDOP = (float)(short)sReg[HDOP] / 100.0f;
 8000f74:	4b56      	ldr	r3, [pc, #344]	@ (80010d0 <main+0x484>)
 8000f76:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f82:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80010f0 <main+0x4a4>
 8000f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
				float fVDOP = (float)(short)sReg[VDOP] / 100.0f;
 8000f8e:	4b50      	ldr	r3, [pc, #320]	@ (80010d0 <main+0x484>)
 8000f90:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f9c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80010f0 <main+0x4a4>
 8000fa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50


    			if(s_cDataUpdate & ACC_UPDATE)
 8000fa8:	4b53      	ldr	r3, [pc, #332]	@ (80010f8 <main+0x4ac>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01b      	beq.n	8000fec <main+0x3a0>
    			{
    				printf("acc:%.3f %.3f %.3f\r\n", fAcc[0], fAcc[1], fAcc[2]);
 8000fb4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000fb8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fbc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000fc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc4:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8000fc8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000fcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000fd0:	ed8d 7b00 	vstr	d7, [sp]
 8000fd4:	ec53 2b15 	vmov	r2, r3, d5
 8000fd8:	4848      	ldr	r0, [pc, #288]	@ (80010fc <main+0x4b0>)
 8000fda:	f00a fe83 	bl	800bce4 <iprintf>
    				s_cDataUpdate &= ~ACC_UPDATE;
 8000fde:	4b46      	ldr	r3, [pc, #280]	@ (80010f8 <main+0x4ac>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f023 0301 	bic.w	r3, r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b43      	ldr	r3, [pc, #268]	@ (80010f8 <main+0x4ac>)
 8000fea:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & GYRO_UPDATE)
 8000fec:	4b42      	ldr	r3, [pc, #264]	@ (80010f8 <main+0x4ac>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d01b      	beq.n	8001030 <main+0x3e4>
    			{
    				printf("gyro:%.3f %.3f %.3f\r\n", fGyro[0], fGyro[1], fGyro[2]);
 8000ff8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ffc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001000:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001004:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001008:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800100c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001010:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001014:	ed8d 7b00 	vstr	d7, [sp]
 8001018:	ec53 2b15 	vmov	r2, r3, d5
 800101c:	4838      	ldr	r0, [pc, #224]	@ (8001100 <main+0x4b4>)
 800101e:	f00a fe61 	bl	800bce4 <iprintf>
    				s_cDataUpdate &= ~GYRO_UPDATE;
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <main+0x4ac>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f023 0302 	bic.w	r3, r3, #2
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <main+0x4ac>)
 800102e:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & ANGLE_UPDATE)
 8001030:	4b31      	ldr	r3, [pc, #196]	@ (80010f8 <main+0x4ac>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d033      	beq.n	80010a4 <main+0x458>
    			{
                    fYaw = (float)((unsigned short)sReg[Yaw]) / 32768 * 180.0;
 800103c:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <main+0x484>)
 800103e:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	@ 0x7e
 8001042:	b29b      	uxth	r3, r3
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80010d4 <main+0x488>
 8001050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001054:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80010dc <main+0x490>
 8001058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    				printf("angle:%.3f %.3f %.3f(%.3f)\r\n", fAngle[0], fAngle[1], fAngle[2], fYaw);
 8001060:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001064:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8001068:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800106c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001070:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001074:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001078:	edd7 5a13 	vldr	s11, [r7, #76]	@ 0x4c
 800107c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001080:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001084:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001088:	ed8d 7b00 	vstr	d7, [sp]
 800108c:	ec53 2b14 	vmov	r2, r3, d4
 8001090:	481c      	ldr	r0, [pc, #112]	@ (8001104 <main+0x4b8>)
 8001092:	f00a fe27 	bl	800bce4 <iprintf>
    				s_cDataUpdate &= ~ANGLE_UPDATE;
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <main+0x4ac>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	f023 0304 	bic.w	r3, r3, #4
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <main+0x4ac>)
 80010a2:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & MAG_UPDATE)
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <main+0x4ac>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d034      	beq.n	800111a <main+0x4ce>
    			{
    				printf("mag:%d %d %d\r\n", sReg[HX], sReg[HY], sReg[HZ]);
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <main+0x484>)
 80010b2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 80010b6:	4619      	mov	r1, r3
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <main+0x484>)
 80010ba:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 80010be:	461a      	mov	r2, r3
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <main+0x484>)
 80010c2:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 80010c6:	4810      	ldr	r0, [pc, #64]	@ (8001108 <main+0x4bc>)
 80010c8:	f00a fe0c 	bl	800bce4 <iprintf>
 80010cc:	e01e      	b.n	800110c <main+0x4c0>
 80010ce:	bf00      	nop
 80010d0:	24000860 	.word	0x24000860
 80010d4:	47000000 	.word	0x47000000
 80010d8:	44fa0000 	.word	0x44fa0000
 80010dc:	43340000 	.word	0x43340000
 80010e0:	6b5fca6b 	.word	0x6b5fca6b
 80010e4:	00989680 	.word	0x00989680
 80010e8:	47c35000 	.word	0x47c35000
 80010ec:	42700000 	.word	0x42700000
 80010f0:	42c80000 	.word	0x42c80000
 80010f4:	447a0000 	.word	0x447a0000
 80010f8:	240004a8 	.word	0x240004a8
 80010fc:	0800e3a4 	.word	0x0800e3a4
 8001100:	0800e3bc 	.word	0x0800e3bc
 8001104:	0800e3d4 	.word	0x0800e3d4
 8001108:	0800e3f4 	.word	0x0800e3f4
    				s_cDataUpdate &= ~MAG_UPDATE;
 800110c:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <main+0x558>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f023 0308 	bic.w	r3, r3, #8
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <main+0x558>)
 8001118:	701a      	strb	r2, [r3, #0]
    			}
				if(s_cDataUpdate & GPS_UPDATE)
 800111a:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <main+0x558>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d039      	beq.n	800119a <main+0x54e>
				  {
								// Print the GPS data
					printf("GPS Lat: %.6f, Lon: %.6f, Alt: %.1fm\r\n", fLatitude, fLongitude, fGpsAltitude);
 8001126:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800112a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800112e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001132:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001136:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800113a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800113e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001142:	ed8d 7b00 	vstr	d7, [sp]
 8001146:	ec53 2b15 	vmov	r2, r3, d5
 800114a:	4817      	ldr	r0, [pc, #92]	@ (80011a8 <main+0x55c>)
 800114c:	f00a fdca 	bl	800bce4 <iprintf>
					printf("GPS Spd: %.3fkm/h, Course: %.2fdeg\r\n", fGpsSpeed_kmh, fGpsCourse);
 8001150:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001154:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001158:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800115c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001160:	ed8d 7b00 	vstr	d7, [sp]
 8001164:	ec53 2b16 	vmov	r2, r3, d6
 8001168:	4810      	ldr	r0, [pc, #64]	@ (80011ac <main+0x560>)
 800116a:	f00a fdbb 	bl	800bce4 <iprintf>
					printf("GPS Sats: %d, PDOP: %.2f, HDOP: %.2f, VDOP: %.2f\r\n", iSatellites, fPDOP, fHDOP, fVDOP);
 800116e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001172:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001176:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800117a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117e:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001182:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001186:	ed8d 6b02 	vstr	d6, [sp, #8]
 800118a:	ed8d 7b00 	vstr	d7, [sp]
 800118e:	ec53 2b15 	vmov	r2, r3, d5
 8001192:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001194:	4806      	ldr	r0, [pc, #24]	@ (80011b0 <main+0x564>)
 8001196:	f00a fda5 	bl	800bce4 <iprintf>

					// Clear the GPS update flag
					//s_cDataUpdate &= ~GPS_UPDATE;
				}

                s_cDataUpdate = 0;
 800119a:	4b02      	ldr	r3, [pc, #8]	@ (80011a4 <main+0x558>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
  {
 80011a0:	e5a1      	b.n	8000ce6 <main+0x9a>
 80011a2:	bf00      	nop
 80011a4:	240004a8 	.word	0x240004a8
 80011a8:	0800e404 	.word	0x0800e404
 80011ac:	0800e42c 	.word	0x0800e42c
 80011b0:	0800e454 	.word	0x0800e454

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09c      	sub	sp, #112	@ 0x70
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011be:	224c      	movs	r2, #76	@ 0x4c
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00a fe06 	bl	800bdd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2220      	movs	r2, #32
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00a fe00 	bl	800bdd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011d4:	2002      	movs	r0, #2
 80011d6:	f003 fe65 	bl	8004ea4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <SystemClock_Config+0xb8>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011e6:	4a21      	ldr	r2, [pc, #132]	@ (800126c <SystemClock_Config+0xb8>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <SystemClock_Config+0xb8>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011fa:	bf00      	nop
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <SystemClock_Config+0xb8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001208:	d1f8      	bne.n	80011fc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120a:	2302      	movs	r3, #2
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800120e:	2301      	movs	r3, #1
 8001210:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001212:	2340      	movs	r3, #64	@ 0x40
 8001214:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001216:	2300      	movs	r3, #0
 8001218:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fe7a 	bl	8004f18 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800122a:	f000 fc13 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	233f      	movs	r3, #63	@ 0x3f
 8001230:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001242:	2340      	movs	r3, #64	@ 0x40
 8001244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f004 fa39 	bl	80056cc <HAL_RCC_ClockConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001260:	f000 fbf8 	bl	8001a54 <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3770      	adds	r7, #112	@ 0x70
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	58024800 	.word	0x58024800

08001270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <MX_I2C1_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <MX_I2C1_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_I2C1_Init+0x74>)
 800127c:	4a1b      	ldr	r2, [pc, #108]	@ (80012ec <MX_I2C1_Init+0x7c>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <MX_I2C1_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_I2C1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012aa:	480e      	ldr	r0, [pc, #56]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012ac:	f002 ffd6 	bl	800425c <HAL_I2C_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b6:	f000 fbcd 	bl	8001a54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012be:	f003 fd59 	bl	8004d74 <HAL_I2CEx_ConfigAnalogFilter>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c8:	f000 fbc4 	bl	8001a54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012d0:	f003 fd9b 	bl	8004e0a <HAL_I2CEx_ConfigDigitalFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 fbbb 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	24000200 	.word	0x24000200
 80012e8:	40005400 	.word	0x40005400
 80012ec:	00707cbb 	.word	0x00707cbb

080012f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b098      	sub	sp, #96	@ 0x60
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001302:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2234      	movs	r2, #52	@ 0x34
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f00a fd59 	bl	800bdd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001322:	4b3f      	ldr	r3, [pc, #252]	@ (8001420 <MX_TIM1_Init+0x130>)
 8001324:	4a3f      	ldr	r2, [pc, #252]	@ (8001424 <MX_TIM1_Init+0x134>)
 8001326:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8001328:	4b3d      	ldr	r3, [pc, #244]	@ (8001420 <MX_TIM1_Init+0x130>)
 800132a:	223f      	movs	r2, #63	@ 0x3f
 800132c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b3c      	ldr	r3, [pc, #240]	@ (8001420 <MX_TIM1_Init+0x130>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001334:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <MX_TIM1_Init+0x130>)
 8001336:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800133a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b38      	ldr	r3, [pc, #224]	@ (8001420 <MX_TIM1_Init+0x130>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001342:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <MX_TIM1_Init+0x130>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b35      	ldr	r3, [pc, #212]	@ (8001420 <MX_TIM1_Init+0x130>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800134e:	4834      	ldr	r0, [pc, #208]	@ (8001420 <MX_TIM1_Init+0x130>)
 8001350:	f006 fb0a 	bl	8007968 <HAL_TIM_PWM_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800135a:	f000 fb7b 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800136e:	4619      	mov	r1, r3
 8001370:	482b      	ldr	r0, [pc, #172]	@ (8001420 <MX_TIM1_Init+0x130>)
 8001372:	f007 f929 	bl	80085c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800137c:	f000 fb6a 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001380:	2360      	movs	r3, #96	@ 0x60
 8001382:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8001384:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800138e:	2300      	movs	r3, #0
 8001390:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013a2:	2200      	movs	r2, #0
 80013a4:	4619      	mov	r1, r3
 80013a6:	481e      	ldr	r0, [pc, #120]	@ (8001420 <MX_TIM1_Init+0x130>)
 80013a8:	f006 fc52 	bl	8007c50 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80013b2:	f000 fb4f 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013ba:	2204      	movs	r2, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4818      	ldr	r0, [pc, #96]	@ (8001420 <MX_TIM1_Init+0x130>)
 80013c0:	f006 fc46 	bl	8007c50 <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80013ca:	f000 fb43 	bl	8001a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	@ (8001420 <MX_TIM1_Init+0x130>)
 8001404:	f007 f97c 	bl	8008700 <HAL_TIMEx_ConfigBreakDeadTime>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 800140e:	f000 fb21 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001412:	4803      	ldr	r0, [pc, #12]	@ (8001420 <MX_TIM1_Init+0x130>)
 8001414:	f000 fecc 	bl	80021b0 <HAL_TIM_MspPostInit>

}
 8001418:	bf00      	nop
 800141a:	3760      	adds	r7, #96	@ 0x60
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	24000254 	.word	0x24000254
 8001424:	40010000 	.word	0x40010000

08001428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	615a      	str	r2, [r3, #20]
 800144a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 800144e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001456:	223f      	movs	r2, #63	@ 0x3f
 8001458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001460:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001462:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001474:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001476:	f006 fa77 	bl	8007968 <HAL_TIM_PWM_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 fae8 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 8001494:	f007 f898 	bl	80085c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800149e:	f000 fad9 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a2:	2360      	movs	r3, #96	@ 0x60
 80014a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 80014a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	4807      	ldr	r0, [pc, #28]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 80014bc:	f006 fbc8 	bl	8007c50 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80014c6:	f000 fac5 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ca:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <MX_TIM2_Init+0xb0>)
 80014cc:	f000 fe70 	bl	80021b0 <HAL_TIM_MspPostInit>

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	240002a0 	.word	0x240002a0

080014dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e0:	4b22      	ldr	r3, [pc, #136]	@ (800156c <MX_USART1_UART_Init+0x90>)
 80014e2:	4a23      	ldr	r2, [pc, #140]	@ (8001570 <MX_USART1_UART_Init+0x94>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <MX_USART1_UART_Init+0x90>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <MX_USART1_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <MX_USART1_UART_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <MX_USART1_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_USART1_UART_Init+0x90>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <MX_USART1_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_USART1_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_USART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_USART1_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_USART1_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001524:	4811      	ldr	r0, [pc, #68]	@ (800156c <MX_USART1_UART_Init+0x90>)
 8001526:	f007 f977 	bl	8008818 <HAL_UART_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001530:	f000 fa90 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	480d      	ldr	r0, [pc, #52]	@ (800156c <MX_USART1_UART_Init+0x90>)
 8001538:	f009 fdf1 	bl	800b11e <HAL_UARTEx_SetTxFifoThreshold>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001542:	f000 fa87 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001546:	2100      	movs	r1, #0
 8001548:	4808      	ldr	r0, [pc, #32]	@ (800156c <MX_USART1_UART_Init+0x90>)
 800154a:	f009 fe26 	bl	800b19a <HAL_UARTEx_SetRxFifoThreshold>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 fa7e 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_USART1_UART_Init+0x90>)
 800155a:	f009 fda7 	bl	800b0ac <HAL_UARTEx_DisableFifoMode>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001564:	f000 fa76 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	240002ec 	.word	0x240002ec
 8001570:	40011000 	.word	0x40011000

08001574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 800157a:	4a23      	ldr	r2, [pc, #140]	@ (8001608 <MX_USART2_UART_Init+0x94>)
 800157c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b6:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015bc:	4811      	ldr	r0, [pc, #68]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 80015be:	f007 f92b 	bl	8008818 <HAL_UART_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015c8:	f000 fa44 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	480d      	ldr	r0, [pc, #52]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 80015d0:	f009 fda5 	bl	800b11e <HAL_UARTEx_SetTxFifoThreshold>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015da:	f000 fa3b 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015de:	2100      	movs	r1, #0
 80015e0:	4808      	ldr	r0, [pc, #32]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 80015e2:	f009 fdda 	bl	800b19a <HAL_UARTEx_SetRxFifoThreshold>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015ec:	f000 fa32 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	@ (8001604 <MX_USART2_UART_Init+0x90>)
 80015f2:	f009 fd5b 	bl	800b0ac <HAL_UARTEx_DisableFifoMode>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 fa2a 	bl	8001a54 <Error_Handler>
  	  //UART_Start_Receive_IT(&huart2, &ucRxData, 1);
      //HAL_UART_Receive_IT(&huart1, &ucRxData, 1);

  /* USER CODE END USART2_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	24000380 	.word	0x24000380
 8001608:	40004400 	.word	0x40004400

0800160c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001612:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <MX_USART3_UART_Init+0x94>)
 8001614:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001616:	4b21      	ldr	r3, [pc, #132]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800161c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001654:	4811      	ldr	r0, [pc, #68]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001656:	f007 f8df 	bl	8008818 <HAL_UART_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001660:	f000 f9f8 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	480d      	ldr	r0, [pc, #52]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001668:	f009 fd59 	bl	800b11e <HAL_UARTEx_SetTxFifoThreshold>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001672:	f000 f9ef 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4808      	ldr	r0, [pc, #32]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800167a:	f009 fd8e 	bl	800b19a <HAL_UARTEx_SetRxFifoThreshold>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001684:	f000 f9e6 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800168a:	f009 fd0f 	bl	800b0ac <HAL_UARTEx_DisableFifoMode>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001694:	f000 f9de 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24000414 	.word	0x24000414
 80016a0:	40004800 	.word	0x40004800

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b4a      	ldr	r3, [pc, #296]	@ (80017e4 <MX_GPIO_Init+0x140>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c0:	4a48      	ldr	r2, [pc, #288]	@ (80017e4 <MX_GPIO_Init+0x140>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ca:	4b46      	ldr	r3, [pc, #280]	@ (80017e4 <MX_GPIO_Init+0x140>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d8:	4b42      	ldr	r3, [pc, #264]	@ (80017e4 <MX_GPIO_Init+0x140>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	4a41      	ldr	r2, [pc, #260]	@ (80017e4 <MX_GPIO_Init+0x140>)
 80016e0:	f043 0310 	orr.w	r3, r3, #16
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e8:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <MX_GPIO_Init+0x140>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f6:	4b3b      	ldr	r3, [pc, #236]	@ (80017e4 <MX_GPIO_Init+0x140>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fc:	4a39      	ldr	r2, [pc, #228]	@ (80017e4 <MX_GPIO_Init+0x140>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001706:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <MX_GPIO_Init+0x140>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001714:	4b33      	ldr	r3, [pc, #204]	@ (80017e4 <MX_GPIO_Init+0x140>)
 8001716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171a:	4a32      	ldr	r2, [pc, #200]	@ (80017e4 <MX_GPIO_Init+0x140>)
 800171c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001724:	4b2f      	ldr	r3, [pc, #188]	@ (80017e4 <MX_GPIO_Init+0x140>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <MX_GPIO_Init+0x140>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001738:	4a2a      	ldr	r2, [pc, #168]	@ (80017e4 <MX_GPIO_Init+0x140>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001742:	4b28      	ldr	r3, [pc, #160]	@ (80017e4 <MX_GPIO_Init+0x140>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2180      	movs	r1, #128	@ 0x80
 8001754:	4824      	ldr	r0, [pc, #144]	@ (80017e8 <MX_GPIO_Init+0x144>)
 8001756:	f002 fd67 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800175a:	2380      	movs	r3, #128	@ 0x80
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	481d      	ldr	r0, [pc, #116]	@ (80017e8 <MX_GPIO_Init+0x144>)
 8001772:	f002 fbb1 	bl	8003ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
   /* Configure USART3 TX (PD8) and RX (PD9) */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001776:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001784:	2302      	movs	r3, #2
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3; // AF7 for USART3
 8001788:	2307      	movs	r3, #7
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4816      	ldr	r0, [pc, #88]	@ (80017ec <MX_GPIO_Init+0x148>)
 8001794:	f002 fba0 	bl	8003ed8 <HAL_GPIO_Init>

  /* Configure USART2 TX (PD5) and RX (PD6) */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001798:	2360      	movs	r3, #96	@ 0x60
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a4:	2302      	movs	r3, #2
 80017a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // AF7 for USART2
 80017a8:	2307      	movs	r3, #7
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	480e      	ldr	r0, [pc, #56]	@ (80017ec <MX_GPIO_Init+0x148>)
 80017b4:	f002 fb90 	bl	8003ed8 <HAL_GPIO_Init>


  /* Configure USART1 TX (PA9) and RX (PA10) */
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80017b8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Or GPIO_PULLUP for RX if needed
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c6:	2302      	movs	r3, #2
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // AF7 for USART1
 80017ca:	2307      	movs	r3, #7
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4806      	ldr	r0, [pc, #24]	@ (80017f0 <MX_GPIO_Init+0x14c>)
 80017d6:	f002 fb7f 	bl	8003ed8 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_USART1 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	@ 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	58024400 	.word	0x58024400
 80017e8:	58021800 	.word	0x58021800
 80017ec:	58020c00 	.word	0x58020c00
 80017f0:	58020000 	.word	0x58020000

080017f4 <SensorUartSend>:

/* USER CODE BEGIN 4 */

static void SensorUartSend(uint8_t *p_data, uint32_t uiSize)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart3, p_data, uiSize, uiSize*4);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b29a      	uxth	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4803      	ldr	r0, [pc, #12]	@ (8001818 <SensorUartSend+0x24>)
 800180a:	f007 f855 	bl	80088b8 <HAL_UART_Transmit>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000414 	.word	0x24000414

0800181c <CopeSensorData>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	int i;
    for(i = 0; i < uiRegNum; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e083      	b.n	8001934 <CopeSensorData+0x118>
    {
        switch(uiReg)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b36      	subs	r3, #54	@ 0x36
 8001830:	2b22      	cmp	r3, #34	@ 0x22
 8001832:	d871      	bhi.n	8001918 <CopeSensorData+0xfc>
 8001834:	a201      	add	r2, pc, #4	@ (adr r2, 800183c <CopeSensorData+0x20>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	080018c9 	.word	0x080018c9
 8001840:	08001919 	.word	0x08001919
 8001844:	08001919 	.word	0x08001919
 8001848:	080018d9 	.word	0x080018d9
 800184c:	08001919 	.word	0x08001919
 8001850:	08001919 	.word	0x08001919
 8001854:	080018e9 	.word	0x080018e9
 8001858:	08001919 	.word	0x08001919
 800185c:	08001919 	.word	0x08001919
 8001860:	080018f9 	.word	0x080018f9
 8001864:	08001919 	.word	0x08001919
 8001868:	08001919 	.word	0x08001919
 800186c:	08001919 	.word	0x08001919
 8001870:	08001919 	.word	0x08001919
 8001874:	08001919 	.word	0x08001919
 8001878:	08001919 	.word	0x08001919
 800187c:	08001919 	.word	0x08001919
 8001880:	08001919 	.word	0x08001919
 8001884:	08001919 	.word	0x08001919
 8001888:	08001909 	.word	0x08001909
 800188c:	08001909 	.word	0x08001909
 8001890:	08001909 	.word	0x08001909
 8001894:	08001909 	.word	0x08001909
 8001898:	08001909 	.word	0x08001909
 800189c:	08001909 	.word	0x08001909
 80018a0:	08001909 	.word	0x08001909
 80018a4:	08001909 	.word	0x08001909
 80018a8:	08001919 	.word	0x08001919
 80018ac:	08001919 	.word	0x08001919
 80018b0:	08001919 	.word	0x08001919
 80018b4:	08001919 	.word	0x08001919
 80018b8:	08001909 	.word	0x08001909
 80018bc:	08001909 	.word	0x08001909
 80018c0:	08001909 	.word	0x08001909
 80018c4:	08001909 	.word	0x08001909
        {
            case AZ:
				s_cDataUpdate |= ACC_UPDATE;
 80018c8:	4b20      	ldr	r3, [pc, #128]	@ (800194c <CopeSensorData+0x130>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <CopeSensorData+0x130>)
 80018d4:	701a      	strb	r2, [r3, #0]
            break;
 80018d6:	e027      	b.n	8001928 <CopeSensorData+0x10c>
            case GZ:
				s_cDataUpdate |= GYRO_UPDATE;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <CopeSensorData+0x130>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <CopeSensorData+0x130>)
 80018e4:	701a      	strb	r2, [r3, #0]
            break;
 80018e6:	e01f      	b.n	8001928 <CopeSensorData+0x10c>
            case HZ:
				s_cDataUpdate |= MAG_UPDATE;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <CopeSensorData+0x130>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <CopeSensorData+0x130>)
 80018f4:	701a      	strb	r2, [r3, #0]
            break;
 80018f6:	e017      	b.n	8001928 <CopeSensorData+0x10c>
            case Yaw:
				s_cDataUpdate |= ANGLE_UPDATE;
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <CopeSensorData+0x130>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <CopeSensorData+0x130>)
 8001904:	701a      	strb	r2, [r3, #0]
            break;
 8001906:	e00f      	b.n	8001928 <CopeSensorData+0x10c>
            case GPSVH:
            case SVNUM:
            case PDOP:
            case HDOP:
            case VDOP:
        s_cDataUpdate |= GPS_UPDATE;
 8001908:	4b10      	ldr	r3, [pc, #64]	@ (800194c <CopeSensorData+0x130>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <CopeSensorData+0x130>)
 8001914:	701a      	strb	r2, [r3, #0]
            break;
 8001916:	e007      	b.n	8001928 <CopeSensorData+0x10c>

            default:
				s_cDataUpdate |= READ_UPDATE;
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <CopeSensorData+0x130>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <CopeSensorData+0x130>)
 8001924:	701a      	strb	r2, [r3, #0]
			break;
 8001926:	bf00      	nop
        }
		uiReg++;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3301      	adds	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
    for(i = 0; i < uiRegNum; i++)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	3301      	adds	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	f63f af77 	bhi.w	800182c <CopeSensorData+0x10>
    }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	240004a8 	.word	0x240004a8

08001950 <AutoScanSensor>:

static void AutoScanSensor(void)
{
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b08c      	sub	sp, #48	@ 0x30
 8001954:	af00      	add	r7, sp, #0
	const uint32_t c_uiBaud[9] = {4800, 9600, 19200, 38400, 57600, 115200, 230400, 460800, 921600};
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <AutoScanSensor+0x94>)
 8001958:	1d3c      	adds	r4, r7, #4
 800195a:	461d      	mov	r5, r3
 800195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001964:	682b      	ldr	r3, [r5, #0]
 8001966:	6023      	str	r3, [r4, #0]
	int i, iRetry;
	
	for(i = 0; i < 9; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800196c:	e02e      	b.n	80019cc <AutoScanSensor+0x7c>
	{
        uiBuad = c_uiBaud[i]; // literal waste of time for loop only kept it around cause it looks like a nice blocking loading sequence in serial
 800196e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	3330      	adds	r3, #48	@ 0x30
 8001974:	443b      	add	r3, r7
 8001976:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800197a:	4a1b      	ldr	r2, [pc, #108]	@ (80019e8 <AutoScanSensor+0x98>)
 800197c:	6013      	str	r3, [r2, #0]
        HAL_Delay(250); // Settling time
 800197e:	20fa      	movs	r0, #250	@ 0xfa
 8001980:	f001 fb9a 	bl	80030b8 <HAL_Delay>
		iRetry = 2;
 8001984:	2302      	movs	r3, #2
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
		do
		{
			s_cDataUpdate = 0;
 8001988:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <AutoScanSensor+0x9c>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
			WitReadReg(AX, 3);
 800198e:	2103      	movs	r1, #3
 8001990:	2034      	movs	r0, #52	@ 0x34
 8001992:	f001 f9a7 	bl	8002ce4 <WitReadReg>
			HAL_Delay(200);
 8001996:	20c8      	movs	r0, #200	@ 0xc8
 8001998:	f001 fb8e 	bl	80030b8 <HAL_Delay>
			if(s_cDataUpdate != 0)
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <AutoScanSensor+0x9c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00a      	beq.n	80019ba <AutoScanSensor+0x6a>
			{
				printf("%lu baud find sensor\r\n\r\n", c_uiBaud[i]);
 80019a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	3330      	adds	r3, #48	@ 0x30
 80019aa:	443b      	add	r3, r7
 80019ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80019b0:	4619      	mov	r1, r3
 80019b2:	480f      	ldr	r0, [pc, #60]	@ (80019f0 <AutoScanSensor+0xa0>)
 80019b4:	f00a f996 	bl	800bce4 <iprintf>
 80019b8:	e011      	b.n	80019de <AutoScanSensor+0x8e>
				return ;
			}
			iRetry--;
 80019ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019bc:	3b01      	subs	r3, #1
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
		}while(iRetry);		
 80019c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e0      	bne.n	8001988 <AutoScanSensor+0x38>
	for(i = 0; i < 9; i++)
 80019c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c8:	3301      	adds	r3, #1
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	ddcd      	ble.n	800196e <AutoScanSensor+0x1e>
	}
	printf("can not find sensor\r\n");
 80019d2:	4808      	ldr	r0, [pc, #32]	@ (80019f4 <AutoScanSensor+0xa4>)
 80019d4:	f00a f9f6 	bl	800bdc4 <puts>
	printf("please check your connection\r\n");
 80019d8:	4807      	ldr	r0, [pc, #28]	@ (80019f8 <AutoScanSensor+0xa8>)
 80019da:	f00a f9f3 	bl	800bdc4 <puts>
}
 80019de:	3730      	adds	r7, #48	@ 0x30
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bdb0      	pop	{r4, r5, r7, pc}
 80019e4:	0800e4ec 	.word	0x0800e4ec
 80019e8:	24000000 	.word	0x24000000
 80019ec:	240004a8 	.word	0x240004a8
 80019f0:	0800e498 	.word	0x0800e498
 80019f4:	0800e4b4 	.word	0x0800e4b4
 80019f8:	0800e4cc 	.word	0x0800e4cc

080019fc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a02:	463b      	mov	r3, r7
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a0e:	f001 fc87 	bl	8003320 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a1e:	231f      	movs	r3, #31
 8001a20:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a22:	2387      	movs	r3, #135	@ 0x87
 8001a24:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a32:	2301      	movs	r3, #1
 8001a34:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fca5 	bl	8003390 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a46:	2004      	movs	r0, #4
 8001a48:	f001 fc82 	bl	8003350 <HAL_MPU_Enable>

}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <Error_Handler+0x8>

08001a60 <ring_buffer_init>:
//ring_buffer.c
#include "ring_buffer.h"

void ring_buffer_init(ring_buffer *p_ring_buf){
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    p_ring_buf->head = 0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    p_ring_buf->tail = 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <ring_buffer_put>:

//add data to the ring buffer 
uint8_t ring_buffer_put(ring_buffer *p_ring_buf, uint8_t data){
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (p_ring_buf->head + 1 ) % RING_BUFFER_SIZE; // increments by one and becomes 0 when reached buffer size (should wraparound at max int val) 
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	425a      	negs	r2, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	bf58      	it	pl
 8001aa2:	4253      	negpl	r3, r2
 8001aa4:	81fb      	strh	r3, [r7, #14]
    if (next == p_ring_buf->tail){
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	89fa      	ldrh	r2, [r7, #14]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d101      	bne.n	8001ab8 <ring_buffer_put+0x34>
        return 0; // when its full 
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e00c      	b.n	8001ad2 <ring_buffer_put+0x4e>
    }
    p_ring_buf->buffer[p_ring_buf->head]= data;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	545a      	strb	r2, [r3, r1]
    p_ring_buf->head = next;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	89fa      	ldrh	r2, [r7, #14]
 8001acc:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    return 1; // succcess
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <ring_buffer_get>:

//get data from the ring buffer
uint8_t ring_buffer_get(ring_buffer *p_ring_buf, uint8_t *data){
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
    if (p_ring_buf->head == p_ring_buf->tail) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d101      	bne.n	8001b00 <ring_buffer_get+0x22>
        return 0; // Buffer empty
 8001afc:	2300      	movs	r3, #0
 8001afe:	e017      	b.n	8001b30 <ring_buffer_get+0x52>
    }
    *data = p_ring_buf->buffer[p_ring_buf->tail];
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	5c9a      	ldrb	r2, [r3, r2]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	701a      	strb	r2, [r3, #0]
    p_ring_buf->tail = (p_ring_buf->tail+1)%RING_BUFFER_SIZE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	425a      	negs	r2, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	bf58      	it	pl
 8001b24:	4253      	negpl	r3, r2
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    return 1; // read
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <rudder_init>:
 
 static float rudder_target_angle = 90.0f;
 static const float rudder_straight = 90.0f;
 static const float rudder_range = 45.0f;
 
 void rudder_init(TIM_HandleTypeDef *htim, uint32_t channel) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
     rudder_htim = htim;
 8001b46:	4a0d      	ldr	r2, [pc, #52]	@ (8001b7c <rudder_init+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6013      	str	r3, [r2, #0]
     rudder_channel = channel;
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b80 <rudder_init+0x44>)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6013      	str	r3, [r2, #0]
     rudder_target_angle = rudder_straight;
 8001b52:	4a0c      	ldr	r2, [pc, #48]	@ (8001b84 <rudder_init+0x48>)
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <rudder_init+0x4c>)
 8001b56:	601a      	str	r2, [r3, #0]
     set_servo_angle(rudder_htim, rudder_channel, rudder_target_angle);
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <rudder_init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a08      	ldr	r2, [pc, #32]	@ (8001b80 <rudder_init+0x44>)
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	4909      	ldr	r1, [pc, #36]	@ (8001b88 <rudder_init+0x4c>)
 8001b62:	edd1 7a00 	vldr	s15, [r1]
 8001b66:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 f89d 	bl	8001cac <set_servo_angle>
 }
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24000738 	.word	0x24000738
 8001b80:	2400073c 	.word	0x2400073c
 8001b84:	42b40000 	.word	0x42b40000
 8001b88:	24000004 	.word	0x24000004

08001b8c <rudder_set_target_angle>:
 
 void rudder_set_target_angle(float angle) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	ed87 0a01 	vstr	s0, [r7, #4]
     if (angle < (rudder_straight - rudder_range)) {
 8001b96:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001c14 <rudder_set_target_angle+0x88>
 8001b9a:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8001c18 <rudder_set_target_angle+0x8c>
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	d508      	bpl.n	8001bc2 <rudder_set_target_angle+0x36>
         angle = rudder_straight - rudder_range;
 8001bb0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001c14 <rudder_set_target_angle+0x88>
 8001bb4:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8001c18 <rudder_set_target_angle+0x8c>
 8001bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bc0:	e014      	b.n	8001bec <rudder_set_target_angle+0x60>
     } else if (angle > (rudder_straight + rudder_range)) {
 8001bc2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001c14 <rudder_set_target_angle+0x88>
 8001bc6:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8001c18 <rudder_set_target_angle+0x8c>
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	dd07      	ble.n	8001bec <rudder_set_target_angle+0x60>
         angle = rudder_straight + rudder_range;
 8001bdc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001c14 <rudder_set_target_angle+0x88>
 8001be0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8001c18 <rudder_set_target_angle+0x8c>
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	edc7 7a01 	vstr	s15, [r7, #4]
     }
     rudder_target_angle = angle;
 8001bec:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <rudder_set_target_angle+0x90>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
     set_servo_angle(rudder_htim, rudder_channel, rudder_target_angle);
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <rudder_set_target_angle+0x94>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <rudder_set_target_angle+0x98>)
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <rudder_set_target_angle+0x90>)
 8001bfc:	edd1 7a00 	vldr	s15, [r1]
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f850 	bl	8001cac <set_servo_angle>
 }
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	42b40000 	.word	0x42b40000
 8001c18:	42340000 	.word	0x42340000
 8001c1c:	24000004 	.word	0x24000004
 8001c20:	24000738 	.word	0x24000738
 8001c24:	2400073c 	.word	0x2400073c

08001c28 <rudder_update>:
 
 void rudder_update(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
     set_servo_angle(rudder_htim, rudder_channel, rudder_target_angle);
 8001c2c:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <rudder_update+0x24>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <rudder_update+0x28>)
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4907      	ldr	r1, [pc, #28]	@ (8001c54 <rudder_update+0x2c>)
 8001c36:	edd1 7a00 	vldr	s15, [r1]
 8001c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f833 	bl	8001cac <set_servo_angle>
 }
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	24000738 	.word	0x24000738
 8001c50:	2400073c 	.word	0x2400073c
 8001c54:	24000004 	.word	0x24000004

08001c58 <rudder_get_target_angle>:


 float rudder_get_target_angle(void) {
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
     return rudder_target_angle;
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <rudder_get_target_angle+0x18>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	ee07 3a90 	vmov	s15, r3
 }
 8001c64:	eeb0 0a67 	vmov.f32	s0, s15
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	24000004 	.word	0x24000004

08001c74 <rudder_get_straight>:
 
 float rudder_get_straight(void) {
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
     return rudder_straight;
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <rudder_get_straight+0x18>)
 8001c7a:	ee07 3a90 	vmov	s15, r3
 }
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	42b40000 	.word	0x42b40000

08001c90 <rudder_get_range>:
 
 float rudder_get_range(void) {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
     return rudder_range;
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <rudder_get_range+0x18>)
 8001c96:	ee07 3a90 	vmov	s15, r3
 }
 8001c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	42340000 	.word	0x42340000

08001cac <set_servo_angle>:
#include "servo_controls.h"
#include "stdint.h"



 void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim 
     the maths maybe works like 1.5 ms pulse width is neutral with .5 and 2.5 being either end
     so we have a 1us count so 500us/1ms -> 500 counts and 2500us -> 2500 counts*/
    if (angle < 0.0f) angle = 0.0f;
 8001cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d502      	bpl.n	8001cce <set_servo_angle+0x22>
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
    if (angle > 180.0f) angle = 180.0f; //limits
 8001cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001d9c <set_servo_angle+0xf0>
 8001cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dd01      	ble.n	8001ce4 <set_servo_angle+0x38>
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8001da0 <set_servo_angle+0xf4>)
 8001ce2:	607b      	str	r3, [r7, #4]
    
    float min_pulse = 500.0f;
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <set_servo_angle+0xf8>)
 8001ce6:	61fb      	str	r3, [r7, #28]
    float max_pulse = 2500.0f;
 8001ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8001da8 <set_servo_angle+0xfc>)
 8001cea:	61bb      	str	r3, [r7, #24]
     
    uint32_t pulse_width = min_pulse +(angle*((max_pulse - min_pulse)/180.0f));
 8001cec:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001d9c <set_servo_angle+0xf0>
 8001cfc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d14:	ee17 3a90 	vmov	r3, s15
 8001d18:	617b      	str	r3, [r7, #20]
    uint32_t rounded_pulse_width = (uint32_t)(pulse_width + 0.5f); 
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d24:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001d28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d30:	ee17 3a90 	vmov	r3, s15
 8001d34:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d104      	bne.n	8001d46 <set_servo_angle+0x9a>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	635a      	str	r2, [r3, #52]	@ 0x34
  
  }
 8001d44:	e023      	b.n	8001d8e <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d104      	bne.n	8001d56 <set_servo_angle+0xaa>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	6393      	str	r3, [r2, #56]	@ 0x38
  }
 8001d54:	e01b      	b.n	8001d8e <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d104      	bne.n	8001d66 <set_servo_angle+0xba>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	63d3      	str	r3, [r2, #60]	@ 0x3c
  }
 8001d64:	e013      	b.n	8001d8e <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d104      	bne.n	8001d76 <set_servo_angle+0xca>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 8001d74:	e00b      	b.n	8001d8e <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d104      	bne.n	8001d86 <set_servo_angle+0xda>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6593      	str	r3, [r2, #88]	@ 0x58
  }
 8001d84:	e003      	b.n	8001d8e <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	65d3      	str	r3, [r2, #92]	@ 0x5c
  }
 8001d8e:	bf00      	nop
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	43340000 	.word	0x43340000
 8001da0:	43340000 	.word	0x43340000
 8001da4:	43fa0000 	.word	0x43fa0000
 8001da8:	451c4000 	.word	0x451c4000

08001dac <set_servo_angle_gradual>:
  void set_servo_angle_gradual(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim and the channel*/
     uint32_t current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); // returns current pulse width(between 500 and 2500)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d103      	bne.n	8001dc8 <set_servo_angle_gradual+0x1c>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc6:	e01e      	b.n	8001e06 <set_servo_angle_gradual+0x5a>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d103      	bne.n	8001dd6 <set_servo_angle_gradual+0x2a>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd4:	e017      	b.n	8001e06 <set_servo_angle_gradual+0x5a>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d103      	bne.n	8001de4 <set_servo_angle_gradual+0x38>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de2:	e010      	b.n	8001e06 <set_servo_angle_gradual+0x5a>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d103      	bne.n	8001df2 <set_servo_angle_gradual+0x46>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	e009      	b.n	8001e06 <set_servo_angle_gradual+0x5a>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	d103      	bne.n	8001e00 <set_servo_angle_gradual+0x54>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	e002      	b.n	8001e06 <set_servo_angle_gradual+0x5a>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e06:	617b      	str	r3, [r7, #20]
     uint32_t desired_pulse_width = 500 +(angle*((2500-500)/180));
 8001e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0c:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e14:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001fb4 <set_servo_angle_gradual+0x208>
 8001e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e20:	ee17 3a90 	vmov	r3, s15
 8001e24:	613b      	str	r3, [r7, #16]
     while (desired_pulse_width != current_pulse_width){
 8001e26:	e0ba      	b.n	8001f9e <set_servo_angle_gradual+0x1f2>
        if (desired_pulse_width > current_pulse_width){
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d959      	bls.n	8001ee4 <set_servo_angle_gradual+0x138>
            current_pulse_width++; 
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
            __HAL_TIM_SET_COMPARE(htim, channel, current_pulse_width);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <set_servo_angle_gradual+0x9a>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e44:	e023      	b.n	8001e8e <set_servo_angle_gradual+0xe2>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d104      	bne.n	8001e56 <set_servo_angle_gradual+0xaa>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e54:	e01b      	b.n	8001e8e <set_servo_angle_gradual+0xe2>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d104      	bne.n	8001e66 <set_servo_angle_gradual+0xba>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e64:	e013      	b.n	8001e8e <set_servo_angle_gradual+0xe2>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b0c      	cmp	r3, #12
 8001e6a:	d104      	bne.n	8001e76 <set_servo_angle_gradual+0xca>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e74:	e00b      	b.n	8001e8e <set_servo_angle_gradual+0xe2>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b10      	cmp	r3, #16
 8001e7a:	d104      	bne.n	8001e86 <set_servo_angle_gradual+0xda>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e84:	e003      	b.n	8001e8e <set_servo_angle_gradual+0xe2>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	65d3      	str	r3, [r2, #92]	@ 0x5c
            HAL_Delay(10);
 8001e8e:	200a      	movs	r0, #10
 8001e90:	f001 f912 	bl	80030b8 <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <set_servo_angle_gradual+0xf6>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea0:	e01e      	b.n	8001ee0 <set_servo_angle_gradual+0x134>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d103      	bne.n	8001eb0 <set_servo_angle_gradual+0x104>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eae:	e017      	b.n	8001ee0 <set_servo_angle_gradual+0x134>
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d103      	bne.n	8001ebe <set_servo_angle_gradual+0x112>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ebc:	e010      	b.n	8001ee0 <set_servo_angle_gradual+0x134>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d103      	bne.n	8001ecc <set_servo_angle_gradual+0x120>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	e009      	b.n	8001ee0 <set_servo_angle_gradual+0x134>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d103      	bne.n	8001eda <set_servo_angle_gradual+0x12e>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed8:	e002      	b.n	8001ee0 <set_servo_angle_gradual+0x134>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e05c      	b.n	8001f9e <set_servo_angle_gradual+0x1f2>

        }
        else if (desired_pulse_width < current_pulse_width)
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d258      	bcs.n	8001f9e <set_servo_angle_gradual+0x1f2>
        {
            current_pulse_width--; 
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
            __HAL_TIM_SET_COMPARE(htim, channel, current_pulse_width);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d104      	bne.n	8001f02 <set_servo_angle_gradual+0x156>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f00:	e023      	b.n	8001f4a <set_servo_angle_gradual+0x19e>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d104      	bne.n	8001f12 <set_servo_angle_gradual+0x166>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001f10:	e01b      	b.n	8001f4a <set_servo_angle_gradual+0x19e>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d104      	bne.n	8001f22 <set_servo_angle_gradual+0x176>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001f20:	e013      	b.n	8001f4a <set_servo_angle_gradual+0x19e>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d104      	bne.n	8001f32 <set_servo_angle_gradual+0x186>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f30:	e00b      	b.n	8001f4a <set_servo_angle_gradual+0x19e>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b10      	cmp	r3, #16
 8001f36:	d104      	bne.n	8001f42 <set_servo_angle_gradual+0x196>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f40:	e003      	b.n	8001f4a <set_servo_angle_gradual+0x19e>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	65d3      	str	r3, [r2, #92]	@ 0x5c

            HAL_Delay(3);
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	f001 f8b4 	bl	80030b8 <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); 
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <set_servo_angle_gradual+0x1b2>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5c:	e01e      	b.n	8001f9c <set_servo_angle_gradual+0x1f0>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d103      	bne.n	8001f6c <set_servo_angle_gradual+0x1c0>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6a:	e017      	b.n	8001f9c <set_servo_angle_gradual+0x1f0>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d103      	bne.n	8001f7a <set_servo_angle_gradual+0x1ce>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f78:	e010      	b.n	8001f9c <set_servo_angle_gradual+0x1f0>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	d103      	bne.n	8001f88 <set_servo_angle_gradual+0x1dc>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	e009      	b.n	8001f9c <set_servo_angle_gradual+0x1f0>
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d103      	bne.n	8001f96 <set_servo_angle_gradual+0x1ea>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f94:	e002      	b.n	8001f9c <set_servo_angle_gradual+0x1f0>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	617b      	str	r3, [r7, #20]
     while (desired_pulse_width != current_pulse_width){
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	f47f af40 	bne.w	8001e28 <set_servo_angle_gradual+0x7c>
        }
      
    }
  }
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	43fa0000 	.word	0x43fa0000

08001fb8 <copy_wind_pos>:
  void copy_wind_pos(ServoController *ctrl, float wind_angle){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	ed87 0a00 	vstr	s0, [r7]
    float adj_angle=  fmod(wind_angle, 180.0f);  //all opposite angles are the same so 200 degrees = 20 degrees 
 8001fc4:	edd7 7a00 	vldr	s15, [r7]
 8001fc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fcc:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8002028 <copy_wind_pos+0x70>
 8001fd0:	eeb0 0b47 	vmov.f64	d0, d7
 8001fd4:	f00b ffd4 	bl	800df80 <fmod>
 8001fd8:	eeb0 7b40 	vmov.f64	d7, d0
 8001fdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fe0:	edc7 7a03 	vstr	s15, [r7, #12]
    
    // explicit case for 180 degrees
    if(wind_angle >= 180.0f && adj_angle == 0.0f) {
 8001fe4:	edd7 7a00 	vldr	s15, [r7]
 8001fe8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002030 <copy_wind_pos+0x78>
 8001fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	db08      	blt.n	8002008 <copy_wind_pos+0x50>
 8001ff6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ffa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	d101      	bne.n	8002008 <copy_wind_pos+0x50>
      adj_angle = 180.0f;
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <copy_wind_pos+0x7c>)
 8002006:	60fb      	str	r3, [r7, #12]
    }
    
    //set_servo_angle(ctrl->htim, ctrl->channel, adj_angle);
    set_servo_angle_gradual(ctrl->htim, ctrl->channel, adj_angle);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	ed97 0a03 	vldr	s0, [r7, #12]
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f7ff fec8 	bl	8001dac <set_servo_angle_gradual>
  

    //set_servo_angle();
  }
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	f3af 8000 	nop.w
 8002028:	00000000 	.word	0x00000000
 800202c:	40668000 	.word	0x40668000
 8002030:	43340000 	.word	0x43340000
 8002034:	43340000 	.word	0x43340000

08002038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <HAL_MspInit+0x30>)
 8002040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002044:	4a08      	ldr	r2, [pc, #32]	@ (8002068 <HAL_MspInit+0x30>)
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_MspInit+0x30>)
 8002050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	58024400 	.word	0x58024400

0800206c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0b8      	sub	sp, #224	@ 0xe0
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	22b8      	movs	r2, #184	@ 0xb8
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f009 fea1 	bl	800bdd4 <memset>
  if(hi2c->Instance==I2C1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a27      	ldr	r2, [pc, #156]	@ (8002134 <HAL_I2C_MspInit+0xc8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d146      	bne.n	800212a <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800209c:	f04f 0208 	mov.w	r2, #8
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fe96 	bl	8005de4 <HAL_RCCEx_PeriphCLKConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80020be:	f7ff fcc9 	bl	8001a54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_I2C_MspInit+0xcc>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002138 <HAL_I2C_MspInit+0xcc>)
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_I2C_MspInit+0xcc>)
 80020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e8:	2312      	movs	r3, #18
 80020ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020fa:	2304      	movs	r3, #4
 80020fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002104:	4619      	mov	r1, r3
 8002106:	480d      	ldr	r0, [pc, #52]	@ (800213c <HAL_I2C_MspInit+0xd0>)
 8002108:	f001 fee6 	bl	8003ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800210c:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_I2C_MspInit+0xcc>)
 800210e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002112:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <HAL_I2C_MspInit+0xcc>)
 8002114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_I2C_MspInit+0xcc>)
 800211e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800212a:	bf00      	nop
 800212c:	37e0      	adds	r7, #224	@ 0xe0
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40005400 	.word	0x40005400
 8002138:	58024400 	.word	0x58024400
 800213c:	58020400 	.word	0x58020400

08002140 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a16      	ldr	r2, [pc, #88]	@ (80021a8 <HAL_TIM_PWM_MspInit+0x68>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d10f      	bne.n	8002172 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <HAL_TIM_PWM_MspInit+0x6c>)
 8002154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <HAL_TIM_PWM_MspInit+0x6c>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002162:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_TIM_PWM_MspInit+0x6c>)
 8002164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002170:	e013      	b.n	800219a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217a:	d10e      	bne.n	800219a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_TIM_PWM_MspInit+0x6c>)
 800217e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002182:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <HAL_TIM_PWM_MspInit+0x6c>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <HAL_TIM_PWM_MspInit+0x6c>)
 800218e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40010000 	.word	0x40010000
 80021ac:	58024400 	.word	0x58024400

080021b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	@ 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a25      	ldr	r2, [pc, #148]	@ (8002264 <HAL_TIM_MspPostInit+0xb4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d120      	bne.n	8002214 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021d2:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <HAL_TIM_MspPostInit+0xb8>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	4a23      	ldr	r2, [pc, #140]	@ (8002268 <HAL_TIM_MspPostInit+0xb8>)
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_TIM_MspPostInit+0xb8>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80021f0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002202:	2301      	movs	r3, #1
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4817      	ldr	r0, [pc, #92]	@ (800226c <HAL_TIM_MspPostInit+0xbc>)
 800220e:	f001 fe63 	bl	8003ed8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002212:	e023      	b.n	800225c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800221c:	d11e      	bne.n	800225c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_TIM_MspPostInit+0xb8>)
 8002220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002224:	4a10      	ldr	r2, [pc, #64]	@ (8002268 <HAL_TIM_MspPostInit+0xb8>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800222e:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <HAL_TIM_MspPostInit+0xb8>)
 8002230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800223c:	2320      	movs	r3, #32
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800224c:	2301      	movs	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4806      	ldr	r0, [pc, #24]	@ (8002270 <HAL_TIM_MspPostInit+0xc0>)
 8002258:	f001 fe3e 	bl	8003ed8 <HAL_GPIO_Init>
}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	@ 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40010000 	.word	0x40010000
 8002268:	58024400 	.word	0x58024400
 800226c:	58021000 	.word	0x58021000
 8002270:	58020000 	.word	0x58020000

08002274 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0bc      	sub	sp, #240	@ 0xf0
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0320 	add.w	r3, r7, #32
 8002290:	22b8      	movs	r2, #184	@ 0xb8
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f009 fd9d 	bl	800bdd4 <memset>
  if(huart->Instance==USART1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7f      	ldr	r2, [pc, #508]	@ (800249c <HAL_UART_MspInit+0x228>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d14f      	bne.n	8002344 <HAL_UART_MspInit+0xd0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022a4:	f04f 0201 	mov.w	r2, #1
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b6:	f107 0320 	add.w	r3, r7, #32
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fd92 	bl	8005de4 <HAL_RCCEx_PeriphCLKConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022c6:	f7ff fbc5 	bl	8001a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ca:	4b75      	ldr	r3, [pc, #468]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 80022cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022d0:	4a73      	ldr	r2, [pc, #460]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022da:	4b71      	ldr	r3, [pc, #452]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 80022dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	4b6d      	ldr	r3, [pc, #436]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ee:	4a6c      	ldr	r2, [pc, #432]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f8:	4b69      	ldr	r3, [pc, #420]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002306:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800230a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002320:	2307      	movs	r3, #7
 8002322:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800232a:	4619      	mov	r1, r3
 800232c:	485d      	ldr	r0, [pc, #372]	@ (80024a4 <HAL_UART_MspInit+0x230>)
 800232e:	f001 fdd3 	bl	8003ed8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2025      	movs	r0, #37	@ 0x25
 8002338:	f000 ffbd 	bl	80032b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800233c:	2025      	movs	r0, #37	@ 0x25
 800233e:	f000 ffd4 	bl	80032ea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002342:	e0a7      	b.n	8002494 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a57      	ldr	r2, [pc, #348]	@ (80024a8 <HAL_UART_MspInit+0x234>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d14e      	bne.n	80023ec <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800234e:	f04f 0202 	mov.w	r2, #2
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002360:	f107 0320 	add.w	r3, r7, #32
 8002364:	4618      	mov	r0, r3
 8002366:	f003 fd3d 	bl	8005de4 <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8002370:	f7ff fb70 	bl	8001a54 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002374:	4b4a      	ldr	r3, [pc, #296]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 8002376:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800237a:	4a49      	ldr	r2, [pc, #292]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 800237c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002380:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002384:	4b46      	ldr	r3, [pc, #280]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 8002386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002392:	4b43      	ldr	r3, [pc, #268]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002398:	4a41      	ldr	r2, [pc, #260]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 800239a:	f043 0308 	orr.w	r3, r3, #8
 800239e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023a2:	4b3f      	ldr	r3, [pc, #252]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 80023a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023b0:	2360      	movs	r3, #96	@ 0x60
 80023b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c8:	2307      	movs	r3, #7
 80023ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023d2:	4619      	mov	r1, r3
 80023d4:	4835      	ldr	r0, [pc, #212]	@ (80024ac <HAL_UART_MspInit+0x238>)
 80023d6:	f001 fd7f 	bl	8003ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2026      	movs	r0, #38	@ 0x26
 80023e0:	f000 ff69 	bl	80032b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023e4:	2026      	movs	r0, #38	@ 0x26
 80023e6:	f000 ff80 	bl	80032ea <HAL_NVIC_EnableIRQ>
}
 80023ea:	e053      	b.n	8002494 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2f      	ldr	r2, [pc, #188]	@ (80024b0 <HAL_UART_MspInit+0x23c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d14e      	bne.n	8002494 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023f6:	f04f 0202 	mov.w	r2, #2
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002408:	f107 0320 	add.w	r3, r7, #32
 800240c:	4618      	mov	r0, r3
 800240e:	f003 fce9 	bl	8005de4 <HAL_RCCEx_PeriphCLKConfig>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002418:	f7ff fb1c 	bl	8001a54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800241c:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 800241e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002422:	4a1f      	ldr	r2, [pc, #124]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002428:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800242c:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 800242e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243a:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002440:	4a17      	ldr	r2, [pc, #92]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 8002442:	f043 0308 	orr.w	r3, r3, #8
 8002446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_UART_MspInit+0x22c>)
 800244c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002458:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800245c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002472:	2307      	movs	r3, #7
 8002474:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002478:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800247c:	4619      	mov	r1, r3
 800247e:	480b      	ldr	r0, [pc, #44]	@ (80024ac <HAL_UART_MspInit+0x238>)
 8002480:	f001 fd2a 	bl	8003ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	2027      	movs	r0, #39	@ 0x27
 800248a:	f000 ff14 	bl	80032b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800248e:	2027      	movs	r0, #39	@ 0x27
 8002490:	f000 ff2b 	bl	80032ea <HAL_NVIC_EnableIRQ>
}
 8002494:	bf00      	nop
 8002496:	37f0      	adds	r7, #240	@ 0xf0
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40011000 	.word	0x40011000
 80024a0:	58024400 	.word	0x58024400
 80024a4:	58020000 	.word	0x58020000
 80024a8:	40004400 	.word	0x40004400
 80024ac:	58020c00 	.word	0x58020c00
 80024b0:	40004800 	.word	0x40004800

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <NMI_Handler+0x4>

080024bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <MemManage_Handler+0x4>

080024cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <BusFault_Handler+0x4>

080024d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <UsageFault_Handler+0x4>

080024dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250a:	f000 fdb5 	bl	8003078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002518:	4802      	ldr	r0, [pc, #8]	@ (8002524 <USART1_IRQHandler+0x10>)
 800251a:	f006 faa7 	bl	8008a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	240002ec 	.word	0x240002ec

08002528 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800252c:	4802      	ldr	r0, [pc, #8]	@ (8002538 <USART2_IRQHandler+0x10>)
 800252e:	f006 fa9d 	bl	8008a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	24000380 	.word	0x24000380

0800253c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <USART3_IRQHandler+0x10>)
 8002542:	f006 fa93 	bl	8008a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	24000414 	.word	0x24000414

08002550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return 1;
 8002554:	2301      	movs	r3, #1
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_kill>:

int _kill(int pid, int sig)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800256a:	f009 fc3b 	bl	800bde4 <__errno>
 800256e:	4603      	mov	r3, r0
 8002570:	2216      	movs	r2, #22
 8002572:	601a      	str	r2, [r3, #0]
  return -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_exit>:

void _exit (int status)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002588:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ffe7 	bl	8002560 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002592:	bf00      	nop
 8002594:	e7fd      	b.n	8002592 <_exit+0x12>

08002596 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	e00a      	b.n	80025be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025a8:	f3af 8000 	nop.w
 80025ac:	4601      	mov	r1, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	60ba      	str	r2, [r7, #8]
 80025b4:	b2ca      	uxtb	r2, r1
 80025b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3301      	adds	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dbf0      	blt.n	80025a8 <_read+0x12>
  }

  return len;
 80025c6:	687b      	ldr	r3, [r7, #4]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e009      	b.n	80025f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	60ba      	str	r2, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe f93c 	bl	8000868 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3301      	adds	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	dbf1      	blt.n	80025e2 <_write+0x12>
  }
  return len;
 80025fe:	687b      	ldr	r3, [r7, #4]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <_close>:

int _close(int file)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002630:	605a      	str	r2, [r3, #4]
  return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_isatty>:

int _isatty(int file)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002648:	2301      	movs	r3, #1
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	@ (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	@ (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f009 fba0 	bl	800bde4 <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	@ (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	24050000 	.word	0x24050000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	24000740 	.word	0x24000740
 80026d8:	24000ad0 	.word	0x24000ad0

080026dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026e0:	4b3e      	ldr	r3, [pc, #248]	@ (80027dc <SystemInit+0x100>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e6:	4a3d      	ldr	r2, [pc, #244]	@ (80027dc <SystemInit+0x100>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026f0:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <SystemInit+0x104>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d807      	bhi.n	800270c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026fc:	4b38      	ldr	r3, [pc, #224]	@ (80027e0 <SystemInit+0x104>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 030f 	bic.w	r3, r3, #15
 8002704:	4a36      	ldr	r2, [pc, #216]	@ (80027e0 <SystemInit+0x104>)
 8002706:	f043 0307 	orr.w	r3, r3, #7
 800270a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800270c:	4b35      	ldr	r3, [pc, #212]	@ (80027e4 <SystemInit+0x108>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a34      	ldr	r2, [pc, #208]	@ (80027e4 <SystemInit+0x108>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002718:	4b32      	ldr	r3, [pc, #200]	@ (80027e4 <SystemInit+0x108>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800271e:	4b31      	ldr	r3, [pc, #196]	@ (80027e4 <SystemInit+0x108>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4930      	ldr	r1, [pc, #192]	@ (80027e4 <SystemInit+0x108>)
 8002724:	4b30      	ldr	r3, [pc, #192]	@ (80027e8 <SystemInit+0x10c>)
 8002726:	4013      	ands	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800272a:	4b2d      	ldr	r3, [pc, #180]	@ (80027e0 <SystemInit+0x104>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002736:	4b2a      	ldr	r3, [pc, #168]	@ (80027e0 <SystemInit+0x104>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 030f 	bic.w	r3, r3, #15
 800273e:	4a28      	ldr	r2, [pc, #160]	@ (80027e0 <SystemInit+0x104>)
 8002740:	f043 0307 	orr.w	r3, r3, #7
 8002744:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002746:	4b27      	ldr	r3, [pc, #156]	@ (80027e4 <SystemInit+0x108>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800274c:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <SystemInit+0x108>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <SystemInit+0x108>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002758:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <SystemInit+0x108>)
 800275a:	4a24      	ldr	r2, [pc, #144]	@ (80027ec <SystemInit+0x110>)
 800275c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800275e:	4b21      	ldr	r3, [pc, #132]	@ (80027e4 <SystemInit+0x108>)
 8002760:	4a23      	ldr	r2, [pc, #140]	@ (80027f0 <SystemInit+0x114>)
 8002762:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002764:	4b1f      	ldr	r3, [pc, #124]	@ (80027e4 <SystemInit+0x108>)
 8002766:	4a23      	ldr	r2, [pc, #140]	@ (80027f4 <SystemInit+0x118>)
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800276a:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <SystemInit+0x108>)
 800276c:	2200      	movs	r2, #0
 800276e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002770:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <SystemInit+0x108>)
 8002772:	4a20      	ldr	r2, [pc, #128]	@ (80027f4 <SystemInit+0x118>)
 8002774:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <SystemInit+0x108>)
 8002778:	2200      	movs	r2, #0
 800277a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <SystemInit+0x108>)
 800277e:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <SystemInit+0x118>)
 8002780:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <SystemInit+0x108>)
 8002784:	2200      	movs	r2, #0
 8002786:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <SystemInit+0x108>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a15      	ldr	r2, [pc, #84]	@ (80027e4 <SystemInit+0x108>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002792:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <SystemInit+0x108>)
 8002796:	2200      	movs	r2, #0
 8002798:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800279a:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <SystemInit+0x108>)
 800279c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d113      	bne.n	80027d0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <SystemInit+0x108>)
 80027aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027ae:	4a0d      	ldr	r2, [pc, #52]	@ (80027e4 <SystemInit+0x108>)
 80027b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <SystemInit+0x11c>)
 80027ba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027be:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80027c0:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <SystemInit+0x108>)
 80027c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027c6:	4a07      	ldr	r2, [pc, #28]	@ (80027e4 <SystemInit+0x108>)
 80027c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00
 80027e0:	52002000 	.word	0x52002000
 80027e4:	58024400 	.word	0x58024400
 80027e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80027ec:	02020200 	.word	0x02020200
 80027f0:	01ff0000 	.word	0x01ff0000
 80027f4:	01010280 	.word	0x01010280
 80027f8:	52004000 	.word	0x52004000

080027fc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002800:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <ExitRun0Mode+0x2c>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <ExitRun0Mode+0x2c>)
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800280c:	bf00      	nop
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <ExitRun0Mode+0x2c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f9      	beq.n	800280e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	58024800 	.word	0x58024800

0800282c <__CRC16>:
    0x40
};


static uint16_t __CRC16(uint8_t *puchMsg, uint16_t usDataLen)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
    uint8_t uchCRCHi = 0xFF;
 8002838:	23ff      	movs	r3, #255	@ 0xff
 800283a:	75fb      	strb	r3, [r7, #23]
    uint8_t uchCRCLo = 0xFF;
 800283c:	23ff      	movs	r3, #255	@ 0xff
 800283e:	75bb      	strb	r3, [r7, #22]
    uint8_t uIndex;
    int i = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
    uchCRCHi = 0xFF;
 8002844:	23ff      	movs	r3, #255	@ 0xff
 8002846:	75fb      	strb	r3, [r7, #23]
    uchCRCLo = 0xFF;
 8002848:	23ff      	movs	r3, #255	@ 0xff
 800284a:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 800284c:	e013      	b.n	8002876 <__CRC16+0x4a>
    {
        uIndex = uchCRCHi ^ puchMsg[i];
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	4053      	eors	r3, r2
 800285a:	73fb      	strb	r3, [r7, #15]
        uchCRCHi = uchCRCLo ^ __auchCRCHi[uIndex];
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	4a0f      	ldr	r2, [pc, #60]	@ (800289c <__CRC16+0x70>)
 8002860:	5cd2      	ldrb	r2, [r2, r3]
 8002862:	7dbb      	ldrb	r3, [r7, #22]
 8002864:	4053      	eors	r3, r2
 8002866:	75fb      	strb	r3, [r7, #23]
        uchCRCLo = __auchCRCLo[uIndex] ;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <__CRC16+0x74>)
 800286c:	5cd3      	ldrb	r3, [r2, r3]
 800286e:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	3301      	adds	r3, #1
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	429a      	cmp	r2, r3
 800287c:	dbe7      	blt.n	800284e <__CRC16+0x22>
    }
    return (uint16_t)(((uint16_t)uchCRCHi << 8) | (uint16_t)uchCRCLo) ;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	b21b      	sxth	r3, r3
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	b21a      	sxth	r2, r3
 8002886:	7dbb      	ldrb	r3, [r7, #22]
 8002888:	b21b      	sxth	r3, r3
 800288a:	4313      	orrs	r3, r2
 800288c:	b21b      	sxth	r3, r3
 800288e:	b29b      	uxth	r3, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	0800e520 	.word	0x0800e520
 80028a0:	0800e620 	.word	0x0800e620

080028a4 <__CaliSum>:
static uint8_t __CaliSum(uint8_t *data, uint32_t len)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint8_t ucCheck = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	72fb      	strb	r3, [r7, #11]
    for(i=0; i<len; i++) ucCheck += *(data + i);
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	e009      	b.n	80028cc <__CaliSum+0x28>
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4413      	add	r3, r2
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	7afb      	ldrb	r3, [r7, #11]
 80028c2:	4413      	add	r3, r2
 80028c4:	72fb      	strb	r3, [r7, #11]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3301      	adds	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3f1      	bcc.n	80028b8 <__CaliSum+0x14>
    return ucCheck;
 80028d4:	7afb      	ldrb	r3, [r7, #11]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <WitSerialWriteRegister>:
int32_t WitSerialWriteRegister(SerialWrite Write_func)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
    if(!Write_func)return WIT_HAL_INVAL;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <WitSerialWriteRegister+0x14>
 80028f2:	f06f 0305 	mvn.w	r3, #5
 80028f6:	e003      	b.n	8002900 <WitSerialWriteRegister+0x1c>
    p_WitSerialWriteFunc = Write_func;
 80028f8:	4a04      	ldr	r2, [pc, #16]	@ (800290c <WitSerialWriteRegister+0x28>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	24000744 	.word	0x24000744

08002910 <CopeWitData>:
static void CopeWitData(uint8_t ucIndex, uint16_t *p_data, uint32_t uiLen)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	@ 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	73fb      	strb	r3, [r7, #15]
    uint32_t uiReg1 = 0, uiReg2 = 0, uiReg1Len = 0, uiReg2Len = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
    uint16_t *p_usReg1Val = p_data;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	617b      	str	r3, [r7, #20]
    uint16_t *p_usReg2Val = p_data+3;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3306      	adds	r3, #6
 8002936:	613b      	str	r3, [r7, #16]
    
    uiReg1Len = 4;
 8002938:	2304      	movs	r3, #4
 800293a:	61fb      	str	r3, [r7, #28]
    switch(ucIndex)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	3b50      	subs	r3, #80	@ 0x50
 8002940:	2b0f      	cmp	r3, #15
 8002942:	f200 8080 	bhi.w	8002a46 <CopeWitData+0x136>
 8002946:	a201      	add	r2, pc, #4	@ (adr r2, 800294c <CopeWitData+0x3c>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	080029b1 	.word	0x080029b1
 8002950:	0800298d 	.word	0x0800298d
 8002954:	080029b7 	.word	0x080029b7
 8002958:	0800299f 	.word	0x0800299f
 800295c:	080029bd 	.word	0x080029bd
 8002960:	080029c3 	.word	0x080029c3
 8002964:	080029c9 	.word	0x080029c9
 8002968:	080029cf 	.word	0x080029cf
 800296c:	080029d5 	.word	0x080029d5
 8002970:	080029db 	.word	0x080029db
 8002974:	080029e1 	.word	0x080029e1
 8002978:	08002a47 	.word	0x08002a47
 800297c:	08002a47 	.word	0x08002a47
 8002980:	08002a47 	.word	0x08002a47
 8002984:	08002a47 	.word	0x08002a47
 8002988:	080029e7 	.word	0x080029e7
    {
        case WIT_ACC:   uiReg1 = AX;    uiReg1Len = 3;  uiReg2 = TEMP;  uiReg2Len = 1;  break;
 800298c:	2334      	movs	r3, #52	@ 0x34
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002990:	2303      	movs	r3, #3
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	2340      	movs	r3, #64	@ 0x40
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	2301      	movs	r3, #1
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	e027      	b.n	80029ee <CopeWitData+0xde>
        case WIT_ANGLE: uiReg1 = Roll;  uiReg1Len = 3;  uiReg2 = VERSION;  uiReg2Len = 1;  break;
 800299e:	233d      	movs	r3, #61	@ 0x3d
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a2:	2303      	movs	r3, #3
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	232e      	movs	r3, #46	@ 0x2e
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	2301      	movs	r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	e01e      	b.n	80029ee <CopeWitData+0xde>
        case WIT_TIME:  uiReg1 = YYMM;	break;
 80029b0:	2330      	movs	r3, #48	@ 0x30
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029b4:	e01b      	b.n	80029ee <CopeWitData+0xde>
        case WIT_GYRO:  uiReg1 = GX;  break;
 80029b6:	2337      	movs	r3, #55	@ 0x37
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ba:	e018      	b.n	80029ee <CopeWitData+0xde>
        case WIT_MAGNETIC: uiReg1 = HX;  break;
 80029bc:	233a      	movs	r3, #58	@ 0x3a
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c0:	e015      	b.n	80029ee <CopeWitData+0xde>
        case WIT_DPORT: uiReg1 = D0Status;  break;
 80029c2:	2341      	movs	r3, #65	@ 0x41
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c6:	e012      	b.n	80029ee <CopeWitData+0xde>
        case WIT_PRESS: uiReg1 = PressureL;  break;
 80029c8:	2345      	movs	r3, #69	@ 0x45
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	e00f      	b.n	80029ee <CopeWitData+0xde>
        case WIT_GPS:   uiReg1 = LonL;  break;
 80029ce:	2349      	movs	r3, #73	@ 0x49
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d2:	e00c      	b.n	80029ee <CopeWitData+0xde>
        case WIT_VELOCITY: uiReg1 = GPSHeight;  break;
 80029d4:	234d      	movs	r3, #77	@ 0x4d
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d8:	e009      	b.n	80029ee <CopeWitData+0xde>
        case WIT_QUATER:    uiReg1 = q0;  break;
 80029da:	2351      	movs	r3, #81	@ 0x51
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029de:	e006      	b.n	80029ee <CopeWitData+0xde>
        case WIT_GSA:   uiReg1 = SVNUM;  break;
 80029e0:	2355      	movs	r3, #85	@ 0x55
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e4:	e003      	b.n	80029ee <CopeWitData+0xde>
        case WIT_REGVALUE:  uiReg1 = s_uiReadRegIndex;  break;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <CopeWitData+0x140>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ec:	bf00      	nop
		default:
			return ;

    }
    if(uiLen == 3)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d103      	bne.n	80029fc <CopeWitData+0xec>
    {
        uiReg1Len = 3;
 80029f4:	2303      	movs	r3, #3
 80029f6:	61fb      	str	r3, [r7, #28]
        uiReg2Len = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
    }
    if(uiReg1Len)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00e      	beq.n	8002a20 <CopeWitData+0x110>
	{
		memcpy(&sReg[uiReg1], p_usReg1Val, uiReg1Len<<1);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <CopeWitData+0x144>)
 8002a08:	1898      	adds	r0, r3, r2
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6979      	ldr	r1, [r7, #20]
 8002a12:	f009 fa19 	bl	800be48 <memcpy>
		p_WitRegUpdateCbFunc(uiReg1, uiReg1Len);
 8002a16:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <CopeWitData+0x148>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69f9      	ldr	r1, [r7, #28]
 8002a1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a1e:	4798      	blx	r3
	}
    if(uiReg2Len)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d010      	beq.n	8002a48 <CopeWitData+0x138>
	{
		memcpy(&sReg[uiReg2], p_usReg2Val, uiReg2Len<<1);
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <CopeWitData+0x144>)
 8002a2c:	1898      	adds	r0, r3, r2
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	461a      	mov	r2, r3
 8002a34:	6939      	ldr	r1, [r7, #16]
 8002a36:	f009 fa07 	bl	800be48 <memcpy>
		p_WitRegUpdateCbFunc(uiReg2, uiReg2Len);
 8002a3a:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <CopeWitData+0x148>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	6a38      	ldr	r0, [r7, #32]
 8002a42:	4798      	blx	r3
 8002a44:	e000      	b.n	8002a48 <CopeWitData+0x138>
			return ;
 8002a46:	bf00      	nop
	}
}
 8002a48:	3728      	adds	r7, #40	@ 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2400085c 	.word	0x2400085c
 8002a54:	24000860 	.word	0x24000860
 8002a58:	24000750 	.word	0x24000750

08002a5c <WitSerialDataIn>:

void WitSerialDataIn(uint8_t ucData)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
    uint16_t usCRC16, usTemp, i, usData[4];
    uint8_t ucSum;

    if(p_WitRegUpdateCbFunc == NULL)return ;
 8002a66:	4b8d      	ldr	r3, [pc, #564]	@ (8002c9c <WitSerialDataIn+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 810f 	beq.w	8002c8e <WitSerialDataIn+0x232>
    s_ucWitDataBuff[s_uiWitDataCnt++] = ucData;
 8002a70:	4b8b      	ldr	r3, [pc, #556]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	498a      	ldr	r1, [pc, #552]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002a78:	600a      	str	r2, [r1, #0]
 8002a7a:	498a      	ldr	r1, [pc, #552]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002a7c:	79fa      	ldrb	r2, [r7, #7]
 8002a7e:	54ca      	strb	r2, [r1, r3]
    switch(s_uiProtoclo)
 8002a80:	4b89      	ldr	r3, [pc, #548]	@ (8002ca8 <WitSerialDataIn+0x24c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	f200 80f9 	bhi.w	8002c7c <WitSerialDataIn+0x220>
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	f080 80ef 	bcs.w	8002c6e <WitSerialDataIn+0x212>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <WitSerialDataIn+0x3e>
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d06f      	beq.n	8002b78 <WitSerialDataIn+0x11c>
 8002a98:	e0f0      	b.n	8002c7c <WitSerialDataIn+0x220>
    {
        case WIT_PROTOCOL_NORMAL:
            if(s_ucWitDataBuff[0] != 0x55)
 8002a9a:	4b82      	ldr	r3, [pc, #520]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b55      	cmp	r3, #85	@ 0x55
 8002aa0:	d00c      	beq.n	8002abc <WitSerialDataIn+0x60>
            {
                s_uiWitDataCnt--;
 8002aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	4a7d      	ldr	r2, [pc, #500]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002aaa:	6013      	str	r3, [r2, #0]
                memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002aac:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	497e      	ldr	r1, [pc, #504]	@ (8002cac <WitSerialDataIn+0x250>)
 8002ab4:	487b      	ldr	r0, [pc, #492]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002ab6:	f009 f9c7 	bl	800be48 <memcpy>
                return ;
 8002aba:	e0eb      	b.n	8002c94 <WitSerialDataIn+0x238>
            }
            if(s_uiWitDataCnt >= 11)
 8002abc:	4b78      	ldr	r3, [pc, #480]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b0a      	cmp	r3, #10
 8002ac2:	f240 80d8 	bls.w	8002c76 <WitSerialDataIn+0x21a>
            {
                ucSum = __CaliSum(s_ucWitDataBuff, 10);
 8002ac6:	210a      	movs	r1, #10
 8002ac8:	4876      	ldr	r0, [pc, #472]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002aca:	f7ff feeb 	bl	80028a4 <__CaliSum>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	747b      	strb	r3, [r7, #17]
                if(ucSum != s_ucWitDataBuff[10])
 8002ad2:	4b74      	ldr	r3, [pc, #464]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002ad4:	7a9b      	ldrb	r3, [r3, #10]
 8002ad6:	7c7a      	ldrb	r2, [r7, #17]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d00c      	beq.n	8002af6 <WitSerialDataIn+0x9a>
                {
                    s_uiWitDataCnt--;
 8002adc:	4b70      	ldr	r3, [pc, #448]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	4a6f      	ldr	r2, [pc, #444]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002ae4:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	496f      	ldr	r1, [pc, #444]	@ (8002cac <WitSerialDataIn+0x250>)
 8002aee:	486d      	ldr	r0, [pc, #436]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002af0:	f009 f9aa 	bl	800be48 <memcpy>
                    return ;
 8002af4:	e0ce      	b.n	8002c94 <WitSerialDataIn+0x238>
                }
                usData[0] = ((uint16_t)s_ucWitDataBuff[3] << 8) | s_ucWitDataBuff[2];
 8002af6:	4b6b      	ldr	r3, [pc, #428]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002af8:	78db      	ldrb	r3, [r3, #3]
 8002afa:	b21b      	sxth	r3, r3
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	b21a      	sxth	r2, r3
 8002b00:	4b68      	ldr	r3, [pc, #416]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b02:	789b      	ldrb	r3, [r3, #2]
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	4313      	orrs	r3, r2
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	813b      	strh	r3, [r7, #8]
                usData[1] = ((uint16_t)s_ucWitDataBuff[5] << 8) | s_ucWitDataBuff[4];
 8002b0e:	4b65      	ldr	r3, [pc, #404]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b10:	795b      	ldrb	r3, [r3, #5]
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	b21a      	sxth	r2, r3
 8002b18:	4b62      	ldr	r3, [pc, #392]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b1a:	791b      	ldrb	r3, [r3, #4]
 8002b1c:	b21b      	sxth	r3, r3
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	b21b      	sxth	r3, r3
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	817b      	strh	r3, [r7, #10]
                usData[2] = ((uint16_t)s_ucWitDataBuff[7] << 8) | s_ucWitDataBuff[6];
 8002b26:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b28:	79db      	ldrb	r3, [r3, #7]
 8002b2a:	b21b      	sxth	r3, r3
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	b21a      	sxth	r2, r3
 8002b30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b32:	799b      	ldrb	r3, [r3, #6]
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	4313      	orrs	r3, r2
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	81bb      	strh	r3, [r7, #12]
                usData[3] = ((uint16_t)s_ucWitDataBuff[9] << 8) | s_ucWitDataBuff[8];
 8002b3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b40:	7a5b      	ldrb	r3, [r3, #9]
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	b21a      	sxth	r2, r3
 8002b48:	4b56      	ldr	r3, [pc, #344]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b4a:	7a1b      	ldrb	r3, [r3, #8]
 8002b4c:	b21b      	sxth	r3, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b21b      	sxth	r3, r3
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	81fb      	strh	r3, [r7, #14]
                CopeWitData(s_ucWitDataBuff[1], usData, 4);
 8002b56:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b58:	785b      	ldrb	r3, [r3, #1]
 8002b5a:	f107 0108 	add.w	r1, r7, #8
 8002b5e:	2204      	movs	r2, #4
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fed5 	bl	8002910 <CopeWitData>
                printf(usData);
 8002b66:	f107 0308 	add.w	r3, r7, #8
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f009 f8ba 	bl	800bce4 <iprintf>
                s_uiWitDataCnt = 0;
 8002b70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
            }
        break;
 8002b76:	e07e      	b.n	8002c76 <WitSerialDataIn+0x21a>
        case WIT_PROTOCOL_MODBUS:
            if(s_uiWitDataCnt > 2)
 8002b78:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d97c      	bls.n	8002c7a <WitSerialDataIn+0x21e>
            {
                if(s_ucWitDataBuff[1] != FuncR)
 8002b80:	4b48      	ldr	r3, [pc, #288]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b82:	785b      	ldrb	r3, [r3, #1]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d00c      	beq.n	8002ba2 <WitSerialDataIn+0x146>
                {
                    s_uiWitDataCnt--;
 8002b88:	4b45      	ldr	r3, [pc, #276]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	4a44      	ldr	r2, [pc, #272]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002b90:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4944      	ldr	r1, [pc, #272]	@ (8002cac <WitSerialDataIn+0x250>)
 8002b9a:	4842      	ldr	r0, [pc, #264]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002b9c:	f009 f954 	bl	800be48 <memcpy>
                    return ;
 8002ba0:	e078      	b.n	8002c94 <WitSerialDataIn+0x238>
                }
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 8002ba2:	4b40      	ldr	r3, [pc, #256]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002ba4:	789b      	ldrb	r3, [r3, #2]
 8002ba6:	3305      	adds	r3, #5
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d86f      	bhi.n	8002c92 <WitSerialDataIn+0x236>
                usTemp = ((uint16_t)s_ucWitDataBuff[s_uiWitDataCnt-2] << 8) | s_ucWitDataBuff[s_uiWitDataCnt-1];
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3b02      	subs	r3, #2
 8002bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002bba:	5cd3      	ldrb	r3, [r2, r3]
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	b21a      	sxth	r2, r3
 8002bc2:	4b37      	ldr	r3, [pc, #220]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	4936      	ldr	r1, [pc, #216]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	b21b      	sxth	r3, r3
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	82bb      	strh	r3, [r7, #20]
                usCRC16 = __CRC16(s_ucWitDataBuff, s_uiWitDataCnt-2);
 8002bd4:	4b32      	ldr	r3, [pc, #200]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b02      	subs	r3, #2
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	4619      	mov	r1, r3
 8002be0:	4830      	ldr	r0, [pc, #192]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002be2:	f7ff fe23 	bl	800282c <__CRC16>
 8002be6:	4603      	mov	r3, r0
 8002be8:	827b      	strh	r3, [r7, #18]
                if(usTemp != usCRC16)
 8002bea:	8aba      	ldrh	r2, [r7, #20]
 8002bec:	8a7b      	ldrh	r3, [r7, #18]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d00c      	beq.n	8002c0c <WitSerialDataIn+0x1b0>
                {
                    s_uiWitDataCnt--;
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	4a29      	ldr	r2, [pc, #164]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002bfa:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002bfc:	4b28      	ldr	r3, [pc, #160]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	492a      	ldr	r1, [pc, #168]	@ (8002cac <WitSerialDataIn+0x250>)
 8002c04:	4827      	ldr	r0, [pc, #156]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002c06:	f009 f91f 	bl	800be48 <memcpy>
                    return ;
 8002c0a:	e043      	b.n	8002c94 <WitSerialDataIn+0x238>
                }
                usTemp = s_ucWitDataBuff[2] >> 1;
 8002c0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002c0e:	789b      	ldrb	r3, [r3, #2]
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	82bb      	strh	r3, [r7, #20]
                for(i = 0; i < usTemp; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	82fb      	strh	r3, [r7, #22]
 8002c1a:	e019      	b.n	8002c50 <WitSerialDataIn+0x1f4>
                {
                    sReg[i+s_uiReadRegIndex] = ((uint16_t)s_ucWitDataBuff[(i<<1)+3] << 8) | s_ucWitDataBuff[(i<<1)+4];
 8002c1c:	8afb      	ldrh	r3, [r7, #22]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	3303      	adds	r3, #3
 8002c22:	4a20      	ldr	r2, [pc, #128]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	b219      	sxth	r1, r3
 8002c2c:	8afb      	ldrh	r3, [r7, #22]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	3304      	adds	r3, #4
 8002c32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <WitSerialDataIn+0x248>)
 8002c34:	5cd3      	ldrb	r3, [r2, r3]
 8002c36:	b21a      	sxth	r2, r3
 8002c38:	8af8      	ldrh	r0, [r7, #22]
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <WitSerialDataIn+0x254>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4403      	add	r3, r0
 8002c40:	430a      	orrs	r2, r1
 8002c42:	b211      	sxth	r1, r2
 8002c44:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb4 <WitSerialDataIn+0x258>)
 8002c46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < usTemp; i++)
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	82fb      	strh	r3, [r7, #22]
 8002c50:	8afa      	ldrh	r2, [r7, #22]
 8002c52:	8abb      	ldrh	r3, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3e1      	bcc.n	8002c1c <WitSerialDataIn+0x1c0>
                }
                p_WitRegUpdateCbFunc(s_uiReadRegIndex, usTemp);
 8002c58:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <WitSerialDataIn+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a14      	ldr	r2, [pc, #80]	@ (8002cb0 <WitSerialDataIn+0x254>)
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	8ab9      	ldrh	r1, [r7, #20]
 8002c62:	4610      	mov	r0, r2
 8002c64:	4798      	blx	r3
                s_uiWitDataCnt = 0;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
            }
        break;
 8002c6c:	e005      	b.n	8002c7a <WitSerialDataIn+0x21e>
        case WIT_PROTOCOL_CAN:
        case WIT_PROTOCOL_I2C:
        s_uiWitDataCnt = 0;
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
        break;
 8002c74:	e002      	b.n	8002c7c <WitSerialDataIn+0x220>
        break;
 8002c76:	bf00      	nop
 8002c78:	e000      	b.n	8002c7c <WitSerialDataIn+0x220>
        break;
 8002c7a:	bf00      	nop
    }
    if(s_uiWitDataCnt == WIT_DATA_BUFF_SIZE)s_uiWitDataCnt = 0;
 8002c7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c84:	d106      	bne.n	8002c94 <WitSerialDataIn+0x238>
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <WitSerialDataIn+0x244>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e002      	b.n	8002c94 <WitSerialDataIn+0x238>
    if(p_WitRegUpdateCbFunc == NULL)return ;
 8002c8e:	bf00      	nop
 8002c90:	e000      	b.n	8002c94 <WitSerialDataIn+0x238>
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 8002c92:	bf00      	nop
}
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	24000750 	.word	0x24000750
 8002ca0:	24000854 	.word	0x24000854
 8002ca4:	24000754 	.word	0x24000754
 8002ca8:	24000858 	.word	0x24000858
 8002cac:	24000755 	.word	0x24000755
 8002cb0:	2400085c 	.word	0x2400085c
 8002cb4:	24000860 	.word	0x24000860

08002cb8 <WitRegisterCallBack>:
        case WIT_PROTOCOL_I2C:
            break;
    }
}
int32_t WitRegisterCallBack(RegUpdateCb update_func)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
    if(!update_func)return WIT_HAL_INVAL;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <WitRegisterCallBack+0x14>
 8002cc6:	f06f 0305 	mvn.w	r3, #5
 8002cca:	e003      	b.n	8002cd4 <WitRegisterCallBack+0x1c>
    p_WitRegUpdateCbFunc = update_func;
 8002ccc:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <WitRegisterCallBack+0x28>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	24000750 	.word	0x24000750

08002ce4 <WitReadReg>:
            return WIT_HAL_INVAL;        
    }
    return WIT_HAL_OK;
}
int32_t WitReadReg(uint32_t uiReg, uint32_t uiReadNum)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
    uint16_t usTemp, i;
    uint8_t ucBuff[8];
    if((uiReg + uiReadNum) >= REGSIZE)return WIT_HAL_INVAL;
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	2b8f      	cmp	r3, #143	@ 0x8f
 8002cf6:	d902      	bls.n	8002cfe <WitReadReg+0x1a>
 8002cf8:	f06f 0305 	mvn.w	r3, #5
 8002cfc:	e0e5      	b.n	8002eca <WitReadReg+0x1e6>
    switch(s_uiProtoclo)
 8002cfe:	4b75      	ldr	r3, [pc, #468]	@ (8002ed4 <WitReadReg+0x1f0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	f200 80d9 	bhi.w	8002eba <WitReadReg+0x1d6>
 8002d08:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <WitReadReg+0x2c>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002d65 	.word	0x08002d65
 8002d18:	08002ddd 	.word	0x08002ddd
 8002d1c:	08002e23 	.word	0x08002e23
    {
        case WIT_PROTOCOL_NORMAL:
            if(uiReadNum > 4)return WIT_HAL_INVAL;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d902      	bls.n	8002d2c <WitReadReg+0x48>
 8002d26:	f06f 0305 	mvn.w	r3, #5
 8002d2a:	e0ce      	b.n	8002eca <WitReadReg+0x1e6>
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed8 <WitReadReg+0x1f4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <WitReadReg+0x56>
 8002d34:	f06f 0304 	mvn.w	r3, #4
 8002d38:	e0c7      	b.n	8002eca <WitReadReg+0x1e6>
            ucBuff[0] = 0xFF;
 8002d3a:	23ff      	movs	r3, #255	@ 0xff
 8002d3c:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8002d3e:	23aa      	movs	r3, #170	@ 0xaa
 8002d40:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8002d42:	2327      	movs	r3, #39	@ 0x27
 8002d44:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	743b      	strb	r3, [r7, #16]
            p_WitSerialWriteFunc(ucBuff, 5);
 8002d54:	4b60      	ldr	r3, [pc, #384]	@ (8002ed8 <WitReadReg+0x1f4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f107 020c 	add.w	r2, r7, #12
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4798      	blx	r3
            break;
 8002d62:	e0ae      	b.n	8002ec2 <WitReadReg+0x1de>
        case WIT_PROTOCOL_MODBUS:
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8002d64:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed8 <WitReadReg+0x1f4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <WitReadReg+0x8e>
 8002d6c:	f06f 0304 	mvn.w	r3, #4
 8002d70:	e0ab      	b.n	8002eca <WitReadReg+0x1e6>
            usTemp = uiReadNum << 1;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	82bb      	strh	r3, [r7, #20]
            if((usTemp + 5) > WIT_DATA_BUFF_SIZE)return WIT_HAL_NOMEM;
 8002d7a:	8abb      	ldrh	r3, [r7, #20]
 8002d7c:	2bfb      	cmp	r3, #251	@ 0xfb
 8002d7e:	d902      	bls.n	8002d86 <WitReadReg+0xa2>
 8002d80:	f06f 0303 	mvn.w	r3, #3
 8002d84:	e0a1      	b.n	8002eca <WitReadReg+0x1e6>
            ucBuff[0] = s_ucAddr;
 8002d86:	4b55      	ldr	r3, [pc, #340]	@ (8002edc <WitReadReg+0x1f8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = FuncR;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = uiReg >> 8;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xFF;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReadNum >> 8;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	743b      	strb	r3, [r7, #16]
            ucBuff[5] = uiReadNum & 0xff;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	747b      	strb	r3, [r7, #17]
            usTemp = __CRC16(ucBuff, 6);
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	2106      	movs	r1, #6
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fd3a 	bl	800282c <__CRC16>
 8002db8:	4603      	mov	r3, r0
 8002dba:	82bb      	strh	r3, [r7, #20]
            ucBuff[6] = usTemp >> 8;
 8002dbc:	8abb      	ldrh	r3, [r7, #20]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	74bb      	strb	r3, [r7, #18]
            ucBuff[7] = usTemp & 0xff;
 8002dc6:	8abb      	ldrh	r3, [r7, #20]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	74fb      	strb	r3, [r7, #19]
            p_WitSerialWriteFunc(ucBuff, 8);
 8002dcc:	4b42      	ldr	r3, [pc, #264]	@ (8002ed8 <WitReadReg+0x1f4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f107 020c 	add.w	r2, r7, #12
 8002dd4:	2108      	movs	r1, #8
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4798      	blx	r3
            break;
 8002dda:	e072      	b.n	8002ec2 <WitReadReg+0x1de>
        case WIT_PROTOCOL_CAN:
            if(uiReadNum > 3)return WIT_HAL_INVAL;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d902      	bls.n	8002de8 <WitReadReg+0x104>
 8002de2:	f06f 0305 	mvn.w	r3, #5
 8002de6:	e070      	b.n	8002eca <WitReadReg+0x1e6>
            if(p_WitCanWriteFunc == NULL)return WIT_HAL_EMPTY;
 8002de8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <WitReadReg+0x1fc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <WitReadReg+0x112>
 8002df0:	f06f 0304 	mvn.w	r3, #4
 8002df4:	e069      	b.n	8002eca <WitReadReg+0x1e6>
            ucBuff[0] = 0xFF;
 8002df6:	23ff      	movs	r3, #255	@ 0xff
 8002df8:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8002dfa:	23aa      	movs	r3, #170	@ 0xaa
 8002dfc:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8002dfe:	2327      	movs	r3, #39	@ 0x27
 8002e00:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	743b      	strb	r3, [r7, #16]
            p_WitCanWriteFunc(s_ucAddr, ucBuff, 5);
 8002e10:	4b33      	ldr	r3, [pc, #204]	@ (8002ee0 <WitReadReg+0x1fc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a31      	ldr	r2, [pc, #196]	@ (8002edc <WitReadReg+0x1f8>)
 8002e16:	7810      	ldrb	r0, [r2, #0]
 8002e18:	f107 010c 	add.w	r1, r7, #12
 8002e1c:	2205      	movs	r2, #5
 8002e1e:	4798      	blx	r3
            break;
 8002e20:	e04f      	b.n	8002ec2 <WitReadReg+0x1de>
        case WIT_PROTOCOL_I2C:
            if(p_WitI2cReadFunc == NULL)return WIT_HAL_EMPTY;
 8002e22:	4b30      	ldr	r3, [pc, #192]	@ (8002ee4 <WitReadReg+0x200>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <WitReadReg+0x14c>
 8002e2a:	f06f 0304 	mvn.w	r3, #4
 8002e2e:	e04c      	b.n	8002eca <WitReadReg+0x1e6>
            usTemp = uiReadNum << 1;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	82bb      	strh	r3, [r7, #20]
            if(WIT_DATA_BUFF_SIZE < usTemp)return WIT_HAL_NOMEM;
 8002e38:	8abb      	ldrh	r3, [r7, #20]
 8002e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3e:	d902      	bls.n	8002e46 <WitReadReg+0x162>
 8002e40:	f06f 0303 	mvn.w	r3, #3
 8002e44:	e041      	b.n	8002eca <WitReadReg+0x1e6>
            if(p_WitI2cReadFunc(s_ucAddr << 1, uiReg, s_ucWitDataBuff, usTemp) == 1)
 8002e46:	4b27      	ldr	r3, [pc, #156]	@ (8002ee4 <WitReadReg+0x200>)
 8002e48:	681c      	ldr	r4, [r3, #0]
 8002e4a:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <WitReadReg+0x1f8>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	b2d8      	uxtb	r0, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	b2d9      	uxtb	r1, r3
 8002e56:	8abb      	ldrh	r3, [r7, #20]
 8002e58:	4a23      	ldr	r2, [pc, #140]	@ (8002ee8 <WitReadReg+0x204>)
 8002e5a:	47a0      	blx	r4
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d12e      	bne.n	8002ec0 <WitReadReg+0x1dc>
            {
                if(p_WitRegUpdateCbFunc == NULL)return WIT_HAL_EMPTY;
 8002e62:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <WitReadReg+0x208>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <WitReadReg+0x18c>
 8002e6a:	f06f 0304 	mvn.w	r3, #4
 8002e6e:	e02c      	b.n	8002eca <WitReadReg+0x1e6>
                for(i = 0; i < uiReadNum; i++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	82fb      	strh	r3, [r7, #22]
 8002e74:	e017      	b.n	8002ea6 <WitReadReg+0x1c2>
                {
                    sReg[i+uiReg] = ((uint16_t)s_ucWitDataBuff[(i<<1)+1] << 8) | s_ucWitDataBuff[i<<1];
 8002e76:	8afb      	ldrh	r3, [r7, #22]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee8 <WitReadReg+0x204>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	b21b      	sxth	r3, r3
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	b219      	sxth	r1, r3
 8002e86:	8afb      	ldrh	r3, [r7, #22]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ee8 <WitReadReg+0x204>)
 8002e8c:	5cd3      	ldrb	r3, [r2, r3]
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	8af8      	ldrh	r0, [r7, #22]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4403      	add	r3, r0
 8002e96:	430a      	orrs	r2, r1
 8002e98:	b211      	sxth	r1, r2
 8002e9a:	4a15      	ldr	r2, [pc, #84]	@ (8002ef0 <WitReadReg+0x20c>)
 8002e9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < uiReadNum; i++)
 8002ea0:	8afb      	ldrh	r3, [r7, #22]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	82fb      	strh	r3, [r7, #22]
 8002ea6:	8afb      	ldrh	r3, [r7, #22]
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d8e3      	bhi.n	8002e76 <WitReadReg+0x192>
                }
                p_WitRegUpdateCbFunc(uiReg, uiReadNum);
 8002eae:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <WitReadReg+0x208>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6839      	ldr	r1, [r7, #0]
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
            }
			
            break;
 8002eb8:	e002      	b.n	8002ec0 <WitReadReg+0x1dc>
		default: 
            return WIT_HAL_INVAL;
 8002eba:	f06f 0305 	mvn.w	r3, #5
 8002ebe:	e004      	b.n	8002eca <WitReadReg+0x1e6>
            break;
 8002ec0:	bf00      	nop
    }
    s_uiReadRegIndex = uiReg;
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef4 <WitReadReg+0x210>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6013      	str	r3, [r2, #0]

    return WIT_HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	24000858 	.word	0x24000858
 8002ed8:	24000744 	.word	0x24000744
 8002edc:	24000010 	.word	0x24000010
 8002ee0:	2400074c 	.word	0x2400074c
 8002ee4:	24000748 	.word	0x24000748
 8002ee8:	24000754 	.word	0x24000754
 8002eec:	24000750 	.word	0x24000750
 8002ef0:	24000860 	.word	0x24000860
 8002ef4:	2400085c 	.word	0x2400085c

08002ef8 <WitInit>:
int32_t WitInit(uint32_t uiProtocol, uint8_t ucAddr)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
	if(uiProtocol > WIT_PROTOCOL_I2C)return WIT_HAL_INVAL;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d902      	bls.n	8002f10 <WitInit+0x18>
 8002f0a:	f06f 0305 	mvn.w	r3, #5
 8002f0e:	e009      	b.n	8002f24 <WitInit+0x2c>
    s_uiProtoclo = uiProtocol;
 8002f10:	4a07      	ldr	r2, [pc, #28]	@ (8002f30 <WitInit+0x38>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6013      	str	r3, [r2, #0]
    s_ucAddr = ucAddr;
 8002f16:	4a07      	ldr	r2, [pc, #28]	@ (8002f34 <WitInit+0x3c>)
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	7013      	strb	r3, [r2, #0]
    s_uiWitDataCnt = 0;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <WitInit+0x40>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
    return WIT_HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	24000858 	.word	0x24000858
 8002f34:	24000010 	.word	0x24000010
 8002f38:	24000854 	.word	0x24000854

08002f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f3c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002f78 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002f40:	f7ff fc5c 	bl	80027fc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f44:	f7ff fbca 	bl	80026dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f48:	480c      	ldr	r0, [pc, #48]	@ (8002f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f4a:	490d      	ldr	r1, [pc, #52]	@ (8002f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f50:	e002      	b.n	8002f58 <LoopCopyDataInit>

08002f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f56:	3304      	adds	r3, #4

08002f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f5c:	d3f9      	bcc.n	8002f52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f60:	4c0a      	ldr	r4, [pc, #40]	@ (8002f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f64:	e001      	b.n	8002f6a <LoopFillZerobss>

08002f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f68:	3204      	adds	r2, #4

08002f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f6c:	d3fb      	bcc.n	8002f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f6e:	f008 ff3f 	bl	800bdf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f72:	f7fd fe6b 	bl	8000c4c <main>
  bx  lr
 8002f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f78:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002f7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f80:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8002f84:	0800eae0 	.word	0x0800eae0
  ldr r2, =_sbss
 8002f88:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8002f8c:	24000ad0 	.word	0x24000ad0

08002f90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f90:	e7fe      	b.n	8002f90 <ADC3_IRQHandler>
	...

08002f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	f000 f980 	bl	80032a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fa0:	f002 fd4a 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <HAL_Init+0x68>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	4913      	ldr	r1, [pc, #76]	@ (8003000 <HAL_Init+0x6c>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <HAL_Init+0x68>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8003000 <HAL_Init+0x6c>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8003004 <HAL_Init+0x70>)
 8002fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8003008 <HAL_Init+0x74>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fde:	200f      	movs	r0, #15
 8002fe0:	f000 f814 	bl	800300c <HAL_InitTick>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e002      	b.n	8002ff4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002fee:	f7ff f823 	bl	8002038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	58024400 	.word	0x58024400
 8003000:	0800e510 	.word	0x0800e510
 8003004:	2400000c 	.word	0x2400000c
 8003008:	24000008 	.word	0x24000008

0800300c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003014:	4b15      	ldr	r3, [pc, #84]	@ (800306c <HAL_InitTick+0x60>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e021      	b.n	8003064 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003020:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <HAL_InitTick+0x64>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <HAL_InitTick+0x60>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800302e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f965 	bl	8003306 <HAL_SYSTICK_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e00e      	b.n	8003064 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b0f      	cmp	r3, #15
 800304a:	d80a      	bhi.n	8003062 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800304c:	2200      	movs	r2, #0
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003054:	f000 f92f 	bl	80032b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003058:	4a06      	ldr	r2, [pc, #24]	@ (8003074 <HAL_InitTick+0x68>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	24000018 	.word	0x24000018
 8003070:	24000008 	.word	0x24000008
 8003074:	24000014 	.word	0x24000014

08003078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800307c:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_IncTick+0x20>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	4b06      	ldr	r3, [pc, #24]	@ (800309c <HAL_IncTick+0x24>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4413      	add	r3, r2
 8003088:	4a04      	ldr	r2, [pc, #16]	@ (800309c <HAL_IncTick+0x24>)
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	24000018 	.word	0x24000018
 800309c:	24000980 	.word	0x24000980

080030a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return uwTick;
 80030a4:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <HAL_GetTick+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	24000980 	.word	0x24000980

080030b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c0:	f7ff ffee 	bl	80030a0 <HAL_GetTick>
 80030c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030d0:	d005      	beq.n	80030de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030d2:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <HAL_Delay+0x44>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030de:	bf00      	nop
 80030e0:	f7ff ffde 	bl	80030a0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d8f7      	bhi.n	80030e0 <HAL_Delay+0x28>
  {
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	24000018 	.word	0x24000018

08003100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <__NVIC_SetPriorityGrouping+0x40>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800311c:	4013      	ands	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 800312a:	4313      	orrs	r3, r2
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <__NVIC_SetPriorityGrouping+0x40>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00
 8003144:	05fa0000 	.word	0x05fa0000

08003148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800314c:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <__NVIC_GetPriorityGrouping+0x18>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 0307 	and.w	r3, r3, #7
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800316e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003172:	2b00      	cmp	r3, #0
 8003174:	db0b      	blt.n	800318e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	f003 021f 	and.w	r2, r3, #31
 800317c:	4907      	ldr	r1, [pc, #28]	@ (800319c <__NVIC_EnableIRQ+0x38>)
 800317e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2001      	movs	r0, #1
 8003186:	fa00 f202 	lsl.w	r2, r0, r2
 800318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000e100 	.word	0xe000e100

080031a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	6039      	str	r1, [r7, #0]
 80031aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db0a      	blt.n	80031ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	490c      	ldr	r1, [pc, #48]	@ (80031ec <__NVIC_SetPriority+0x4c>)
 80031ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	440b      	add	r3, r1
 80031c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c8:	e00a      	b.n	80031e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4908      	ldr	r1, [pc, #32]	@ (80031f0 <__NVIC_SetPriority+0x50>)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	3b04      	subs	r3, #4
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	440b      	add	r3, r1
 80031de:	761a      	strb	r2, [r3, #24]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000e100 	.word	0xe000e100
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f1c3 0307 	rsb	r3, r3, #7
 800320e:	2b04      	cmp	r3, #4
 8003210:	bf28      	it	cs
 8003212:	2304      	movcs	r3, #4
 8003214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3304      	adds	r3, #4
 800321a:	2b06      	cmp	r3, #6
 800321c:	d902      	bls.n	8003224 <NVIC_EncodePriority+0x30>
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3b03      	subs	r3, #3
 8003222:	e000      	b.n	8003226 <NVIC_EncodePriority+0x32>
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	401a      	ands	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800323c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43d9      	mvns	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	4313      	orrs	r3, r2
         );
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	@ 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3b01      	subs	r3, #1
 8003268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800326c:	d301      	bcc.n	8003272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326e:	2301      	movs	r3, #1
 8003270:	e00f      	b.n	8003292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003272:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <SysTick_Config+0x40>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800327a:	210f      	movs	r1, #15
 800327c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003280:	f7ff ff8e 	bl	80031a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <SysTick_Config+0x40>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800328a:	4b04      	ldr	r3, [pc, #16]	@ (800329c <SysTick_Config+0x40>)
 800328c:	2207      	movs	r2, #7
 800328e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	e000e010 	.word	0xe000e010

080032a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ff29 	bl	8003100 <__NVIC_SetPriorityGrouping>
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b086      	sub	sp, #24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	4603      	mov	r3, r0
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff40 	bl	8003148 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff90 	bl	80031f4 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5f 	bl	80031a0 <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff33 	bl	8003164 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa4 	bl	800325c <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003324:	f3bf 8f5f 	dmb	sy
}
 8003328:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800332a:	4b07      	ldr	r3, [pc, #28]	@ (8003348 <HAL_MPU_Disable+0x28>)
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	4a06      	ldr	r2, [pc, #24]	@ (8003348 <HAL_MPU_Disable+0x28>)
 8003330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003334:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003336:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_MPU_Disable+0x2c>)
 8003338:	2200      	movs	r2, #0
 800333a:	605a      	str	r2, [r3, #4]
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00
 800334c:	e000ed90 	.word	0xe000ed90

08003350 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003358:	4a0b      	ldr	r2, [pc, #44]	@ (8003388 <HAL_MPU_Enable+0x38>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003362:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_MPU_Enable+0x3c>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	4a09      	ldr	r2, [pc, #36]	@ (800338c <HAL_MPU_Enable+0x3c>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800336e:	f3bf 8f4f 	dsb	sy
}
 8003372:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003374:	f3bf 8f6f 	isb	sy
}
 8003378:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000ed90 	.word	0xe000ed90
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	785a      	ldrb	r2, [r3, #1]
 800339c:	4b1b      	ldr	r3, [pc, #108]	@ (800340c <HAL_MPU_ConfigRegion+0x7c>)
 800339e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80033a0:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <HAL_MPU_ConfigRegion+0x7c>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	4a19      	ldr	r2, [pc, #100]	@ (800340c <HAL_MPU_ConfigRegion+0x7c>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80033ac:	4a17      	ldr	r2, [pc, #92]	@ (800340c <HAL_MPU_ConfigRegion+0x7c>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7b1b      	ldrb	r3, [r3, #12]
 80033b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7adb      	ldrb	r3, [r3, #11]
 80033be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	7a9b      	ldrb	r3, [r3, #10]
 80033c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7b5b      	ldrb	r3, [r3, #13]
 80033ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7b9b      	ldrb	r3, [r3, #14]
 80033d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7bdb      	ldrb	r3, [r3, #15]
 80033de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	7a5b      	ldrb	r3, [r3, #9]
 80033e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7a1b      	ldrb	r3, [r3, #8]
 80033ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	7812      	ldrb	r2, [r2, #0]
 80033f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033f8:	4a04      	ldr	r2, [pc, #16]	@ (800340c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033fc:	6113      	str	r3, [r2, #16]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000ed90 	.word	0xe000ed90

08003410 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003418:	f7ff fe42 	bl	80030a0 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e2dc      	b.n	80039e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d008      	beq.n	8003446 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2280      	movs	r2, #128	@ 0x80
 8003438:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e2cd      	b.n	80039e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a76      	ldr	r2, [pc, #472]	@ (8003624 <HAL_DMA_Abort+0x214>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d04a      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a74      	ldr	r2, [pc, #464]	@ (8003628 <HAL_DMA_Abort+0x218>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d045      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a73      	ldr	r2, [pc, #460]	@ (800362c <HAL_DMA_Abort+0x21c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d040      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a71      	ldr	r2, [pc, #452]	@ (8003630 <HAL_DMA_Abort+0x220>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d03b      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a70      	ldr	r2, [pc, #448]	@ (8003634 <HAL_DMA_Abort+0x224>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d036      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a6e      	ldr	r2, [pc, #440]	@ (8003638 <HAL_DMA_Abort+0x228>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d031      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6d      	ldr	r2, [pc, #436]	@ (800363c <HAL_DMA_Abort+0x22c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d02c      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a6b      	ldr	r2, [pc, #428]	@ (8003640 <HAL_DMA_Abort+0x230>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d027      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6a      	ldr	r2, [pc, #424]	@ (8003644 <HAL_DMA_Abort+0x234>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d022      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a68      	ldr	r2, [pc, #416]	@ (8003648 <HAL_DMA_Abort+0x238>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01d      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a67      	ldr	r2, [pc, #412]	@ (800364c <HAL_DMA_Abort+0x23c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d018      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a65      	ldr	r2, [pc, #404]	@ (8003650 <HAL_DMA_Abort+0x240>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a64      	ldr	r2, [pc, #400]	@ (8003654 <HAL_DMA_Abort+0x244>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00e      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a62      	ldr	r2, [pc, #392]	@ (8003658 <HAL_DMA_Abort+0x248>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d009      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a61      	ldr	r2, [pc, #388]	@ (800365c <HAL_DMA_Abort+0x24c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003660 <HAL_DMA_Abort+0x250>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_DMA_Abort+0xda>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_DMA_Abort+0xdc>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 021e 	bic.w	r2, r2, #30
 80034fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800350e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e00a      	b.n	800352e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 020e 	bic.w	r2, r2, #14
 8003526:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a3c      	ldr	r2, [pc, #240]	@ (8003624 <HAL_DMA_Abort+0x214>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d072      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3a      	ldr	r2, [pc, #232]	@ (8003628 <HAL_DMA_Abort+0x218>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d06d      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a39      	ldr	r2, [pc, #228]	@ (800362c <HAL_DMA_Abort+0x21c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d068      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a37      	ldr	r2, [pc, #220]	@ (8003630 <HAL_DMA_Abort+0x220>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d063      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a36      	ldr	r2, [pc, #216]	@ (8003634 <HAL_DMA_Abort+0x224>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d05e      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a34      	ldr	r2, [pc, #208]	@ (8003638 <HAL_DMA_Abort+0x228>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d059      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a33      	ldr	r2, [pc, #204]	@ (800363c <HAL_DMA_Abort+0x22c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d054      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a31      	ldr	r2, [pc, #196]	@ (8003640 <HAL_DMA_Abort+0x230>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d04f      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a30      	ldr	r2, [pc, #192]	@ (8003644 <HAL_DMA_Abort+0x234>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04a      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2e      	ldr	r2, [pc, #184]	@ (8003648 <HAL_DMA_Abort+0x238>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d045      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2d      	ldr	r2, [pc, #180]	@ (800364c <HAL_DMA_Abort+0x23c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d040      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <HAL_DMA_Abort+0x240>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d03b      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003654 <HAL_DMA_Abort+0x244>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d036      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a28      	ldr	r2, [pc, #160]	@ (8003658 <HAL_DMA_Abort+0x248>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d031      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a27      	ldr	r2, [pc, #156]	@ (800365c <HAL_DMA_Abort+0x24c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d02c      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a25      	ldr	r2, [pc, #148]	@ (8003660 <HAL_DMA_Abort+0x250>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d027      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a24      	ldr	r2, [pc, #144]	@ (8003664 <HAL_DMA_Abort+0x254>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a22      	ldr	r2, [pc, #136]	@ (8003668 <HAL_DMA_Abort+0x258>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01d      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a21      	ldr	r2, [pc, #132]	@ (800366c <HAL_DMA_Abort+0x25c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003670 <HAL_DMA_Abort+0x260>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003674 <HAL_DMA_Abort+0x264>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1c      	ldr	r2, [pc, #112]	@ (8003678 <HAL_DMA_Abort+0x268>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1b      	ldr	r2, [pc, #108]	@ (800367c <HAL_DMA_Abort+0x26c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_DMA_Abort+0x270>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d132      	bne.n	8003684 <HAL_DMA_Abort+0x274>
 800361e:	2301      	movs	r3, #1
 8003620:	e031      	b.n	8003686 <HAL_DMA_Abort+0x276>
 8003622:	bf00      	nop
 8003624:	40020010 	.word	0x40020010
 8003628:	40020028 	.word	0x40020028
 800362c:	40020040 	.word	0x40020040
 8003630:	40020058 	.word	0x40020058
 8003634:	40020070 	.word	0x40020070
 8003638:	40020088 	.word	0x40020088
 800363c:	400200a0 	.word	0x400200a0
 8003640:	400200b8 	.word	0x400200b8
 8003644:	40020410 	.word	0x40020410
 8003648:	40020428 	.word	0x40020428
 800364c:	40020440 	.word	0x40020440
 8003650:	40020458 	.word	0x40020458
 8003654:	40020470 	.word	0x40020470
 8003658:	40020488 	.word	0x40020488
 800365c:	400204a0 	.word	0x400204a0
 8003660:	400204b8 	.word	0x400204b8
 8003664:	58025408 	.word	0x58025408
 8003668:	5802541c 	.word	0x5802541c
 800366c:	58025430 	.word	0x58025430
 8003670:	58025444 	.word	0x58025444
 8003674:	58025458 	.word	0x58025458
 8003678:	5802546c 	.word	0x5802546c
 800367c:	58025480 	.word	0x58025480
 8003680:	58025494 	.word	0x58025494
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003698:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6d      	ldr	r2, [pc, #436]	@ (8003854 <HAL_DMA_Abort+0x444>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d04a      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003858 <HAL_DMA_Abort+0x448>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d045      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6a      	ldr	r2, [pc, #424]	@ (800385c <HAL_DMA_Abort+0x44c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d040      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a68      	ldr	r2, [pc, #416]	@ (8003860 <HAL_DMA_Abort+0x450>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d03b      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a67      	ldr	r2, [pc, #412]	@ (8003864 <HAL_DMA_Abort+0x454>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d036      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a65      	ldr	r2, [pc, #404]	@ (8003868 <HAL_DMA_Abort+0x458>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d031      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a64      	ldr	r2, [pc, #400]	@ (800386c <HAL_DMA_Abort+0x45c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d02c      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a62      	ldr	r2, [pc, #392]	@ (8003870 <HAL_DMA_Abort+0x460>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d027      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a61      	ldr	r2, [pc, #388]	@ (8003874 <HAL_DMA_Abort+0x464>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d022      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003878 <HAL_DMA_Abort+0x468>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01d      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a5e      	ldr	r2, [pc, #376]	@ (800387c <HAL_DMA_Abort+0x46c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d018      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a5c      	ldr	r2, [pc, #368]	@ (8003880 <HAL_DMA_Abort+0x470>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a5b      	ldr	r2, [pc, #364]	@ (8003884 <HAL_DMA_Abort+0x474>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00e      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a59      	ldr	r2, [pc, #356]	@ (8003888 <HAL_DMA_Abort+0x478>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a58      	ldr	r2, [pc, #352]	@ (800388c <HAL_DMA_Abort+0x47c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a56      	ldr	r2, [pc, #344]	@ (8003890 <HAL_DMA_Abort+0x480>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d108      	bne.n	800374c <HAL_DMA_Abort+0x33c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e007      	b.n	800375c <HAL_DMA_Abort+0x34c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800375c:	e013      	b.n	8003786 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800375e:	f7ff fc9f 	bl	80030a0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b05      	cmp	r3, #5
 800376a:	d90c      	bls.n	8003786 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2203      	movs	r2, #3
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e12d      	b.n	80039e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e5      	bne.n	800375e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2f      	ldr	r2, [pc, #188]	@ (8003854 <HAL_DMA_Abort+0x444>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d04a      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003858 <HAL_DMA_Abort+0x448>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d045      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2c      	ldr	r2, [pc, #176]	@ (800385c <HAL_DMA_Abort+0x44c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d040      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003860 <HAL_DMA_Abort+0x450>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d03b      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a29      	ldr	r2, [pc, #164]	@ (8003864 <HAL_DMA_Abort+0x454>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d036      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a27      	ldr	r2, [pc, #156]	@ (8003868 <HAL_DMA_Abort+0x458>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d031      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a26      	ldr	r2, [pc, #152]	@ (800386c <HAL_DMA_Abort+0x45c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d02c      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a24      	ldr	r2, [pc, #144]	@ (8003870 <HAL_DMA_Abort+0x460>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d027      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a23      	ldr	r2, [pc, #140]	@ (8003874 <HAL_DMA_Abort+0x464>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a21      	ldr	r2, [pc, #132]	@ (8003878 <HAL_DMA_Abort+0x468>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01d      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a20      	ldr	r2, [pc, #128]	@ (800387c <HAL_DMA_Abort+0x46c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1e      	ldr	r2, [pc, #120]	@ (8003880 <HAL_DMA_Abort+0x470>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1d      	ldr	r2, [pc, #116]	@ (8003884 <HAL_DMA_Abort+0x474>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1b      	ldr	r2, [pc, #108]	@ (8003888 <HAL_DMA_Abort+0x478>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1a      	ldr	r2, [pc, #104]	@ (800388c <HAL_DMA_Abort+0x47c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a18      	ldr	r2, [pc, #96]	@ (8003890 <HAL_DMA_Abort+0x480>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d101      	bne.n	8003836 <HAL_DMA_Abort+0x426>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_DMA_Abort+0x428>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02b      	beq.n	8003894 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003840:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	223f      	movs	r2, #63	@ 0x3f
 800384c:	409a      	lsls	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	609a      	str	r2, [r3, #8]
 8003852:	e02a      	b.n	80038aa <HAL_DMA_Abort+0x49a>
 8003854:	40020010 	.word	0x40020010
 8003858:	40020028 	.word	0x40020028
 800385c:	40020040 	.word	0x40020040
 8003860:	40020058 	.word	0x40020058
 8003864:	40020070 	.word	0x40020070
 8003868:	40020088 	.word	0x40020088
 800386c:	400200a0 	.word	0x400200a0
 8003870:	400200b8 	.word	0x400200b8
 8003874:	40020410 	.word	0x40020410
 8003878:	40020428 	.word	0x40020428
 800387c:	40020440 	.word	0x40020440
 8003880:	40020458 	.word	0x40020458
 8003884:	40020470 	.word	0x40020470
 8003888:	40020488 	.word	0x40020488
 800388c:	400204a0 	.word	0x400204a0
 8003890:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003898:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	2201      	movs	r2, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a4f      	ldr	r2, [pc, #316]	@ (80039ec <HAL_DMA_Abort+0x5dc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d072      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a4d      	ldr	r2, [pc, #308]	@ (80039f0 <HAL_DMA_Abort+0x5e0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d06d      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a4c      	ldr	r2, [pc, #304]	@ (80039f4 <HAL_DMA_Abort+0x5e4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d068      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a4a      	ldr	r2, [pc, #296]	@ (80039f8 <HAL_DMA_Abort+0x5e8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d063      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a49      	ldr	r2, [pc, #292]	@ (80039fc <HAL_DMA_Abort+0x5ec>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d05e      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a47      	ldr	r2, [pc, #284]	@ (8003a00 <HAL_DMA_Abort+0x5f0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d059      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a46      	ldr	r2, [pc, #280]	@ (8003a04 <HAL_DMA_Abort+0x5f4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d054      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a44      	ldr	r2, [pc, #272]	@ (8003a08 <HAL_DMA_Abort+0x5f8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d04f      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a43      	ldr	r2, [pc, #268]	@ (8003a0c <HAL_DMA_Abort+0x5fc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d04a      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a41      	ldr	r2, [pc, #260]	@ (8003a10 <HAL_DMA_Abort+0x600>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d045      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a40      	ldr	r2, [pc, #256]	@ (8003a14 <HAL_DMA_Abort+0x604>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d040      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a18 <HAL_DMA_Abort+0x608>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d03b      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a3d      	ldr	r2, [pc, #244]	@ (8003a1c <HAL_DMA_Abort+0x60c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d036      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3b      	ldr	r2, [pc, #236]	@ (8003a20 <HAL_DMA_Abort+0x610>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d031      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a24 <HAL_DMA_Abort+0x614>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d02c      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a38      	ldr	r2, [pc, #224]	@ (8003a28 <HAL_DMA_Abort+0x618>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d027      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a37      	ldr	r2, [pc, #220]	@ (8003a2c <HAL_DMA_Abort+0x61c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a35      	ldr	r2, [pc, #212]	@ (8003a30 <HAL_DMA_Abort+0x620>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a34      	ldr	r2, [pc, #208]	@ (8003a34 <HAL_DMA_Abort+0x624>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a32      	ldr	r2, [pc, #200]	@ (8003a38 <HAL_DMA_Abort+0x628>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a31      	ldr	r2, [pc, #196]	@ (8003a3c <HAL_DMA_Abort+0x62c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2f      	ldr	r2, [pc, #188]	@ (8003a40 <HAL_DMA_Abort+0x630>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a44 <HAL_DMA_Abort+0x634>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2c      	ldr	r2, [pc, #176]	@ (8003a48 <HAL_DMA_Abort+0x638>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <HAL_DMA_Abort+0x58e>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_DMA_Abort+0x590>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00c      	beq.n	80039d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40020010 	.word	0x40020010
 80039f0:	40020028 	.word	0x40020028
 80039f4:	40020040 	.word	0x40020040
 80039f8:	40020058 	.word	0x40020058
 80039fc:	40020070 	.word	0x40020070
 8003a00:	40020088 	.word	0x40020088
 8003a04:	400200a0 	.word	0x400200a0
 8003a08:	400200b8 	.word	0x400200b8
 8003a0c:	40020410 	.word	0x40020410
 8003a10:	40020428 	.word	0x40020428
 8003a14:	40020440 	.word	0x40020440
 8003a18:	40020458 	.word	0x40020458
 8003a1c:	40020470 	.word	0x40020470
 8003a20:	40020488 	.word	0x40020488
 8003a24:	400204a0 	.word	0x400204a0
 8003a28:	400204b8 	.word	0x400204b8
 8003a2c:	58025408 	.word	0x58025408
 8003a30:	5802541c 	.word	0x5802541c
 8003a34:	58025430 	.word	0x58025430
 8003a38:	58025444 	.word	0x58025444
 8003a3c:	58025458 	.word	0x58025458
 8003a40:	5802546c 	.word	0x5802546c
 8003a44:	58025480 	.word	0x58025480
 8003a48:	58025494 	.word	0x58025494

08003a4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e237      	b.n	8003ece <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d004      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2280      	movs	r2, #128	@ 0x80
 8003a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e22c      	b.n	8003ece <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5c      	ldr	r2, [pc, #368]	@ (8003bec <HAL_DMA_Abort_IT+0x1a0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04a      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf0 <HAL_DMA_Abort_IT+0x1a4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d045      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a59      	ldr	r2, [pc, #356]	@ (8003bf4 <HAL_DMA_Abort_IT+0x1a8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d040      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a58      	ldr	r2, [pc, #352]	@ (8003bf8 <HAL_DMA_Abort_IT+0x1ac>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d03b      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a56      	ldr	r2, [pc, #344]	@ (8003bfc <HAL_DMA_Abort_IT+0x1b0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d036      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a55      	ldr	r2, [pc, #340]	@ (8003c00 <HAL_DMA_Abort_IT+0x1b4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d031      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a53      	ldr	r2, [pc, #332]	@ (8003c04 <HAL_DMA_Abort_IT+0x1b8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02c      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a52      	ldr	r2, [pc, #328]	@ (8003c08 <HAL_DMA_Abort_IT+0x1bc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d027      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a50      	ldr	r2, [pc, #320]	@ (8003c0c <HAL_DMA_Abort_IT+0x1c0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d022      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4f      	ldr	r2, [pc, #316]	@ (8003c10 <HAL_DMA_Abort_IT+0x1c4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d01d      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a4d      	ldr	r2, [pc, #308]	@ (8003c14 <HAL_DMA_Abort_IT+0x1c8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d018      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8003c18 <HAL_DMA_Abort_IT+0x1cc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a4a      	ldr	r2, [pc, #296]	@ (8003c1c <HAL_DMA_Abort_IT+0x1d0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a49      	ldr	r2, [pc, #292]	@ (8003c20 <HAL_DMA_Abort_IT+0x1d4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d009      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a47      	ldr	r2, [pc, #284]	@ (8003c24 <HAL_DMA_Abort_IT+0x1d8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a46      	ldr	r2, [pc, #280]	@ (8003c28 <HAL_DMA_Abort_IT+0x1dc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <HAL_DMA_Abort_IT+0xcc>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_DMA_Abort_IT+0xce>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8086 	beq.w	8003c2c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2204      	movs	r2, #4
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bec <HAL_DMA_Abort_IT+0x1a0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04a      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf0 <HAL_DMA_Abort_IT+0x1a4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d045      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2c      	ldr	r2, [pc, #176]	@ (8003bf4 <HAL_DMA_Abort_IT+0x1a8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d040      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <HAL_DMA_Abort_IT+0x1ac>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d03b      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a29      	ldr	r2, [pc, #164]	@ (8003bfc <HAL_DMA_Abort_IT+0x1b0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d036      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a28      	ldr	r2, [pc, #160]	@ (8003c00 <HAL_DMA_Abort_IT+0x1b4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d031      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a26      	ldr	r2, [pc, #152]	@ (8003c04 <HAL_DMA_Abort_IT+0x1b8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d02c      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a25      	ldr	r2, [pc, #148]	@ (8003c08 <HAL_DMA_Abort_IT+0x1bc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d027      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	@ (8003c0c <HAL_DMA_Abort_IT+0x1c0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a22      	ldr	r2, [pc, #136]	@ (8003c10 <HAL_DMA_Abort_IT+0x1c4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a20      	ldr	r2, [pc, #128]	@ (8003c14 <HAL_DMA_Abort_IT+0x1c8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c18 <HAL_DMA_Abort_IT+0x1cc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c1c <HAL_DMA_Abort_IT+0x1d0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1c      	ldr	r2, [pc, #112]	@ (8003c20 <HAL_DMA_Abort_IT+0x1d4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c24 <HAL_DMA_Abort_IT+0x1d8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a19      	ldr	r2, [pc, #100]	@ (8003c28 <HAL_DMA_Abort_IT+0x1dc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <HAL_DMA_Abort_IT+0x18e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e178      	b.n	8003ecc <HAL_DMA_Abort_IT+0x480>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e16f      	b.n	8003ecc <HAL_DMA_Abort_IT+0x480>
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 020e 	bic.w	r2, r2, #14
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6c      	ldr	r2, [pc, #432]	@ (8003df4 <HAL_DMA_Abort_IT+0x3a8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d04a      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a6b      	ldr	r2, [pc, #428]	@ (8003df8 <HAL_DMA_Abort_IT+0x3ac>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d045      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a69      	ldr	r2, [pc, #420]	@ (8003dfc <HAL_DMA_Abort_IT+0x3b0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d040      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a68      	ldr	r2, [pc, #416]	@ (8003e00 <HAL_DMA_Abort_IT+0x3b4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d03b      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a66      	ldr	r2, [pc, #408]	@ (8003e04 <HAL_DMA_Abort_IT+0x3b8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d036      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a65      	ldr	r2, [pc, #404]	@ (8003e08 <HAL_DMA_Abort_IT+0x3bc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d031      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a63      	ldr	r2, [pc, #396]	@ (8003e0c <HAL_DMA_Abort_IT+0x3c0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02c      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a62      	ldr	r2, [pc, #392]	@ (8003e10 <HAL_DMA_Abort_IT+0x3c4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d027      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a60      	ldr	r2, [pc, #384]	@ (8003e14 <HAL_DMA_Abort_IT+0x3c8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d022      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8003e18 <HAL_DMA_Abort_IT+0x3cc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01d      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5d      	ldr	r2, [pc, #372]	@ (8003e1c <HAL_DMA_Abort_IT+0x3d0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d018      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5c      	ldr	r2, [pc, #368]	@ (8003e20 <HAL_DMA_Abort_IT+0x3d4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d013      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e24 <HAL_DMA_Abort_IT+0x3d8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a59      	ldr	r2, [pc, #356]	@ (8003e28 <HAL_DMA_Abort_IT+0x3dc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a57      	ldr	r2, [pc, #348]	@ (8003e2c <HAL_DMA_Abort_IT+0x3e0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a56      	ldr	r2, [pc, #344]	@ (8003e30 <HAL_DMA_Abort_IT+0x3e4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d108      	bne.n	8003cee <HAL_DMA_Abort_IT+0x2a2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e007      	b.n	8003cfe <HAL_DMA_Abort_IT+0x2b2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3c      	ldr	r2, [pc, #240]	@ (8003df4 <HAL_DMA_Abort_IT+0x3a8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d072      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003df8 <HAL_DMA_Abort_IT+0x3ac>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d06d      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a39      	ldr	r2, [pc, #228]	@ (8003dfc <HAL_DMA_Abort_IT+0x3b0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d068      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a37      	ldr	r2, [pc, #220]	@ (8003e00 <HAL_DMA_Abort_IT+0x3b4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d063      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a36      	ldr	r2, [pc, #216]	@ (8003e04 <HAL_DMA_Abort_IT+0x3b8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d05e      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a34      	ldr	r2, [pc, #208]	@ (8003e08 <HAL_DMA_Abort_IT+0x3bc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d059      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a33      	ldr	r2, [pc, #204]	@ (8003e0c <HAL_DMA_Abort_IT+0x3c0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d054      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a31      	ldr	r2, [pc, #196]	@ (8003e10 <HAL_DMA_Abort_IT+0x3c4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d04f      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a30      	ldr	r2, [pc, #192]	@ (8003e14 <HAL_DMA_Abort_IT+0x3c8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d04a      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e18 <HAL_DMA_Abort_IT+0x3cc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d045      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2d      	ldr	r2, [pc, #180]	@ (8003e1c <HAL_DMA_Abort_IT+0x3d0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d040      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	@ (8003e20 <HAL_DMA_Abort_IT+0x3d4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d03b      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <HAL_DMA_Abort_IT+0x3d8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d036      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a28      	ldr	r2, [pc, #160]	@ (8003e28 <HAL_DMA_Abort_IT+0x3dc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d031      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a27      	ldr	r2, [pc, #156]	@ (8003e2c <HAL_DMA_Abort_IT+0x3e0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d02c      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a25      	ldr	r2, [pc, #148]	@ (8003e30 <HAL_DMA_Abort_IT+0x3e4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d027      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a24      	ldr	r2, [pc, #144]	@ (8003e34 <HAL_DMA_Abort_IT+0x3e8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	@ (8003e38 <HAL_DMA_Abort_IT+0x3ec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01d      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	@ (8003e3c <HAL_DMA_Abort_IT+0x3f0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <HAL_DMA_Abort_IT+0x3f4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	@ (8003e44 <HAL_DMA_Abort_IT+0x3f8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e48 <HAL_DMA_Abort_IT+0x3fc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	@ (8003e4c <HAL_DMA_Abort_IT+0x400>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	@ (8003e50 <HAL_DMA_Abort_IT+0x404>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d132      	bne.n	8003e54 <HAL_DMA_Abort_IT+0x408>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e031      	b.n	8003e56 <HAL_DMA_Abort_IT+0x40a>
 8003df2:	bf00      	nop
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8
 8003e34:	58025408 	.word	0x58025408
 8003e38:	5802541c 	.word	0x5802541c
 8003e3c:	58025430 	.word	0x58025430
 8003e40:	58025444 	.word	0x58025444
 8003e44:	58025458 	.word	0x58025458
 8003e48:	5802546c 	.word	0x5802546c
 8003e4c:	58025480 	.word	0x58025480
 8003e50:	58025494 	.word	0x58025494
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d028      	beq.n	8003eac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e68:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e88:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00c      	beq.n	8003eac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ea0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003eaa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop

08003ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	@ 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ee6:	4b86      	ldr	r3, [pc, #536]	@ (8004100 <HAL_GPIO_Init+0x228>)
 8003ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003eea:	e18c      	b.n	8004206 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 817e 	beq.w	8004200 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d005      	beq.n	8003f1c <HAL_GPIO_Init+0x44>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d130      	bne.n	8003f7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f52:	2201      	movs	r2, #1
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 0201 	and.w	r2, r3, #1
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d017      	beq.n	8003fba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2203      	movs	r2, #3
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d123      	bne.n	800400e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	08da      	lsrs	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3208      	adds	r2, #8
 8003fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	220f      	movs	r2, #15
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	08da      	lsrs	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3208      	adds	r2, #8
 8004008:	69b9      	ldr	r1, [r7, #24]
 800400a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0203 	and.w	r2, r3, #3
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80d8 	beq.w	8004200 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004050:	4b2c      	ldr	r3, [pc, #176]	@ (8004104 <HAL_GPIO_Init+0x22c>)
 8004052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004056:	4a2b      	ldr	r2, [pc, #172]	@ (8004104 <HAL_GPIO_Init+0x22c>)
 8004058:	f043 0302 	orr.w	r3, r3, #2
 800405c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004060:	4b28      	ldr	r3, [pc, #160]	@ (8004104 <HAL_GPIO_Init+0x22c>)
 8004062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800406e:	4a26      	ldr	r2, [pc, #152]	@ (8004108 <HAL_GPIO_Init+0x230>)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	3302      	adds	r3, #2
 8004076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	220f      	movs	r2, #15
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a1d      	ldr	r2, [pc, #116]	@ (800410c <HAL_GPIO_Init+0x234>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d04a      	beq.n	8004130 <HAL_GPIO_Init+0x258>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1c      	ldr	r2, [pc, #112]	@ (8004110 <HAL_GPIO_Init+0x238>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d02b      	beq.n	80040fa <HAL_GPIO_Init+0x222>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004114 <HAL_GPIO_Init+0x23c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d025      	beq.n	80040f6 <HAL_GPIO_Init+0x21e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004118 <HAL_GPIO_Init+0x240>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01f      	beq.n	80040f2 <HAL_GPIO_Init+0x21a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a19      	ldr	r2, [pc, #100]	@ (800411c <HAL_GPIO_Init+0x244>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d019      	beq.n	80040ee <HAL_GPIO_Init+0x216>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_GPIO_Init+0x248>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_GPIO_Init+0x212>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a17      	ldr	r2, [pc, #92]	@ (8004124 <HAL_GPIO_Init+0x24c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00d      	beq.n	80040e6 <HAL_GPIO_Init+0x20e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a16      	ldr	r2, [pc, #88]	@ (8004128 <HAL_GPIO_Init+0x250>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d007      	beq.n	80040e2 <HAL_GPIO_Init+0x20a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a15      	ldr	r2, [pc, #84]	@ (800412c <HAL_GPIO_Init+0x254>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <HAL_GPIO_Init+0x206>
 80040da:	2309      	movs	r3, #9
 80040dc:	e029      	b.n	8004132 <HAL_GPIO_Init+0x25a>
 80040de:	230a      	movs	r3, #10
 80040e0:	e027      	b.n	8004132 <HAL_GPIO_Init+0x25a>
 80040e2:	2307      	movs	r3, #7
 80040e4:	e025      	b.n	8004132 <HAL_GPIO_Init+0x25a>
 80040e6:	2306      	movs	r3, #6
 80040e8:	e023      	b.n	8004132 <HAL_GPIO_Init+0x25a>
 80040ea:	2305      	movs	r3, #5
 80040ec:	e021      	b.n	8004132 <HAL_GPIO_Init+0x25a>
 80040ee:	2304      	movs	r3, #4
 80040f0:	e01f      	b.n	8004132 <HAL_GPIO_Init+0x25a>
 80040f2:	2303      	movs	r3, #3
 80040f4:	e01d      	b.n	8004132 <HAL_GPIO_Init+0x25a>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e01b      	b.n	8004132 <HAL_GPIO_Init+0x25a>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e019      	b.n	8004132 <HAL_GPIO_Init+0x25a>
 80040fe:	bf00      	nop
 8004100:	58000080 	.word	0x58000080
 8004104:	58024400 	.word	0x58024400
 8004108:	58000400 	.word	0x58000400
 800410c:	58020000 	.word	0x58020000
 8004110:	58020400 	.word	0x58020400
 8004114:	58020800 	.word	0x58020800
 8004118:	58020c00 	.word	0x58020c00
 800411c:	58021000 	.word	0x58021000
 8004120:	58021400 	.word	0x58021400
 8004124:	58021800 	.word	0x58021800
 8004128:	58021c00 	.word	0x58021c00
 800412c:	58022400 	.word	0x58022400
 8004130:	2300      	movs	r3, #0
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	f002 0203 	and.w	r2, r2, #3
 8004138:	0092      	lsls	r2, r2, #2
 800413a:	4093      	lsls	r3, r2
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004142:	4938      	ldr	r1, [pc, #224]	@ (8004224 <HAL_GPIO_Init+0x34c>)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	089b      	lsrs	r3, r3, #2
 8004148:	3302      	adds	r3, #2
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004176:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80041a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	3301      	adds	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f ae6b 	bne.w	8003eec <HAL_GPIO_Init+0x14>
  }
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	3724      	adds	r7, #36	@ 0x24
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	58000400 	.word	0x58000400

08004228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
 8004234:	4613      	mov	r3, r2
 8004236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004238:	787b      	ldrb	r3, [r7, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004244:	e003      	b.n	800424e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	041a      	lsls	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e08b      	b.n	8004386 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fef2 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	@ 0x24
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	e006      	b.n	80042e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80042e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d108      	bne.n	80042fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	e007      	b.n	800430e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800430c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b1d      	ldr	r3, [pc, #116]	@ (8004390 <HAL_I2C_Init+0x134>)
 800431a:	430b      	orrs	r3, r1
 800431c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800432c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69d9      	ldr	r1, [r3, #28]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1a      	ldr	r2, [r3, #32]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	02008000 	.word	0x02008000

08004394 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	461a      	mov	r2, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	817b      	strh	r3, [r7, #10]
 80043a6:	460b      	mov	r3, r1
 80043a8:	813b      	strh	r3, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	f040 80f9 	bne.w	80045ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_I2C_Mem_Write+0x34>
 80043c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d105      	bne.n	80043d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0ed      	b.n	80045b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Mem_Write+0x4e>
 80043de:	2302      	movs	r3, #2
 80043e0:	e0e6      	b.n	80045b0 <HAL_I2C_Mem_Write+0x21c>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043ea:	f7fe fe59 	bl	80030a0 <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2319      	movs	r3, #25
 80043f6:	2201      	movs	r2, #1
 80043f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fac3 	bl	8004988 <I2C_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0d1      	b.n	80045b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2221      	movs	r2, #33	@ 0x21
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2240      	movs	r2, #64	@ 0x40
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800442c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004434:	88f8      	ldrh	r0, [r7, #6]
 8004436:	893a      	ldrh	r2, [r7, #8]
 8004438:	8979      	ldrh	r1, [r7, #10]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	4603      	mov	r3, r0
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f9d3 	bl	80047f0 <I2C_RequestMemoryWrite>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0a9      	b.n	80045b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2bff      	cmp	r3, #255	@ 0xff
 8004464:	d90e      	bls.n	8004484 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	22ff      	movs	r2, #255	@ 0xff
 800446a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004470:	b2da      	uxtb	r2, r3
 8004472:	8979      	ldrh	r1, [r7, #10]
 8004474:	2300      	movs	r3, #0
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fc47 	bl	8004d10 <I2C_TransferConfig>
 8004482:	e00f      	b.n	80044a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004492:	b2da      	uxtb	r2, r3
 8004494:	8979      	ldrh	r1, [r7, #10]
 8004496:	2300      	movs	r3, #0
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fc36 	bl	8004d10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fac6 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e07b      	b.n	80045b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d034      	beq.n	800455c <HAL_I2C_Mem_Write+0x1c8>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d130      	bne.n	800455c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	2200      	movs	r2, #0
 8004502:	2180      	movs	r1, #128	@ 0x80
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fa3f 	bl	8004988 <I2C_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e04d      	b.n	80045b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2bff      	cmp	r3, #255	@ 0xff
 800451c:	d90e      	bls.n	800453c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	22ff      	movs	r2, #255	@ 0xff
 8004522:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004528:	b2da      	uxtb	r2, r3
 800452a:	8979      	ldrh	r1, [r7, #10]
 800452c:	2300      	movs	r3, #0
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fbeb 	bl	8004d10 <I2C_TransferConfig>
 800453a:	e00f      	b.n	800455c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454a:	b2da      	uxtb	r2, r3
 800454c:	8979      	ldrh	r1, [r7, #10]
 800454e:	2300      	movs	r3, #0
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fbda 	bl	8004d10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d19e      	bne.n	80044a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 faac 	bl	8004ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e01a      	b.n	80045b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2220      	movs	r2, #32
 8004580:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <HAL_I2C_Mem_Write+0x224>)
 800458e:	400b      	ands	r3, r1
 8004590:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e000      	b.n	80045b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
  }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	fe00e800 	.word	0xfe00e800

080045bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	817b      	strh	r3, [r7, #10]
 80045ce:	460b      	mov	r3, r1
 80045d0:	813b      	strh	r3, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	f040 80fd 	bne.w	80047de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_I2C_Mem_Read+0x34>
 80045ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0f1      	b.n	80047e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_I2C_Mem_Read+0x4e>
 8004606:	2302      	movs	r3, #2
 8004608:	e0ea      	b.n	80047e0 <HAL_I2C_Mem_Read+0x224>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004612:	f7fe fd45 	bl	80030a0 <HAL_GetTick>
 8004616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2319      	movs	r3, #25
 800461e:	2201      	movs	r2, #1
 8004620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f9af 	bl	8004988 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0d5      	b.n	80047e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2222      	movs	r2, #34	@ 0x22
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2240      	movs	r2, #64	@ 0x40
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004654:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800465c:	88f8      	ldrh	r0, [r7, #6]
 800465e:	893a      	ldrh	r2, [r7, #8]
 8004660:	8979      	ldrh	r1, [r7, #10]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	4603      	mov	r3, r0
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f913 	bl	8004898 <I2C_RequestMemoryRead>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0ad      	b.n	80047e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2bff      	cmp	r3, #255	@ 0xff
 800468c:	d90e      	bls.n	80046ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	22ff      	movs	r2, #255	@ 0xff
 8004692:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004698:	b2da      	uxtb	r2, r3
 800469a:	8979      	ldrh	r1, [r7, #10]
 800469c:	4b52      	ldr	r3, [pc, #328]	@ (80047e8 <HAL_I2C_Mem_Read+0x22c>)
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fb33 	bl	8004d10 <I2C_TransferConfig>
 80046aa:	e00f      	b.n	80046cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	8979      	ldrh	r1, [r7, #10]
 80046be:	4b4a      	ldr	r3, [pc, #296]	@ (80047e8 <HAL_I2C_Mem_Read+0x22c>)
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fb22 	bl	8004d10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	2200      	movs	r2, #0
 80046d4:	2104      	movs	r1, #4
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f956 	bl	8004988 <I2C_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e07c      	b.n	80047e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d034      	beq.n	800478c <HAL_I2C_Mem_Read+0x1d0>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d130      	bne.n	800478c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004730:	2200      	movs	r2, #0
 8004732:	2180      	movs	r1, #128	@ 0x80
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f927 	bl	8004988 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e04d      	b.n	80047e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2bff      	cmp	r3, #255	@ 0xff
 800474c:	d90e      	bls.n	800476c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	22ff      	movs	r2, #255	@ 0xff
 8004752:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	b2da      	uxtb	r2, r3
 800475a:	8979      	ldrh	r1, [r7, #10]
 800475c:	2300      	movs	r3, #0
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fad3 	bl	8004d10 <I2C_TransferConfig>
 800476a:	e00f      	b.n	800478c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800477a:	b2da      	uxtb	r2, r3
 800477c:	8979      	ldrh	r1, [r7, #10]
 800477e:	2300      	movs	r3, #0
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fac2 	bl	8004d10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d19a      	bne.n	80046cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f994 	bl	8004ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e01a      	b.n	80047e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2220      	movs	r2, #32
 80047b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6859      	ldr	r1, [r3, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <HAL_I2C_Mem_Read+0x230>)
 80047be:	400b      	ands	r3, r1
 80047c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	80002400 	.word	0x80002400
 80047ec:	fe00e800 	.word	0xfe00e800

080047f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	460b      	mov	r3, r1
 8004804:	813b      	strh	r3, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	8979      	ldrh	r1, [r7, #10]
 8004810:	4b20      	ldr	r3, [pc, #128]	@ (8004894 <I2C_RequestMemoryWrite+0xa4>)
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fa79 	bl	8004d10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	69b9      	ldr	r1, [r7, #24]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f909 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e02c      	b.n	800488c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004838:	893b      	ldrh	r3, [r7, #8]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	629a      	str	r2, [r3, #40]	@ 0x28
 8004842:	e015      	b.n	8004870 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004844:	893b      	ldrh	r3, [r7, #8]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	b29b      	uxth	r3, r3
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	69b9      	ldr	r1, [r7, #24]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f8ef 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e012      	b.n	800488c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004866:	893b      	ldrh	r3, [r7, #8]
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2200      	movs	r2, #0
 8004878:	2180      	movs	r1, #128	@ 0x80
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f884 	bl	8004988 <I2C_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	80002000 	.word	0x80002000

08004898 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	4608      	mov	r0, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	817b      	strh	r3, [r7, #10]
 80048aa:	460b      	mov	r3, r1
 80048ac:	813b      	strh	r3, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	8979      	ldrh	r1, [r7, #10]
 80048b8:	4b20      	ldr	r3, [pc, #128]	@ (800493c <I2C_RequestMemoryRead+0xa4>)
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fa26 	bl	8004d10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	69b9      	ldr	r1, [r7, #24]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f8b6 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e02c      	b.n	8004932 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d105      	bne.n	80048ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048de:	893b      	ldrh	r3, [r7, #8]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048e8:	e015      	b.n	8004916 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048ea:	893b      	ldrh	r3, [r7, #8]
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	69b9      	ldr	r1, [r7, #24]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f89c 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e012      	b.n	8004932 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800490c:	893b      	ldrh	r3, [r7, #8]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2200      	movs	r2, #0
 800491e:	2140      	movs	r1, #64	@ 0x40
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f831 	bl	8004988 <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	80002000 	.word	0x80002000

08004940 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	d103      	bne.n	800495e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d007      	beq.n	800497c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	619a      	str	r2, [r3, #24]
  }
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	4613      	mov	r3, r2
 8004996:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004998:	e03b      	b.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f8d6 	bl	8004b50 <I2C_IsErrorOccurred>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e041      	b.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049b4:	d02d      	beq.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b6:	f7fe fb73 	bl	80030a0 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d122      	bne.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d113      	bne.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e00f      	b.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d0b4      	beq.n	800499a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a46:	e033      	b.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f87f 	bl	8004b50 <I2C_IsErrorOccurred>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e031      	b.n	8004ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a62:	d025      	beq.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a64:	f7fe fb1c 	bl	80030a0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d11a      	bne.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d013      	beq.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e007      	b.n	8004ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d1c4      	bne.n	8004a48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ad4:	e02f      	b.n	8004b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f838 	bl	8004b50 <I2C_IsErrorOccurred>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e02d      	b.n	8004b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fe fad9 	bl	80030a0 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11a      	bne.n	8004b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d013      	beq.n	8004b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e007      	b.n	8004b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d1c8      	bne.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	@ 0x28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d068      	beq.n	8004c4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2210      	movs	r2, #16
 8004b82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b84:	e049      	b.n	8004c1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b8c:	d045      	beq.n	8004c1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b8e:	f7fe fa87 	bl	80030a0 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <I2C_IsErrorOccurred+0x54>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d13a      	bne.n	8004c1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bc6:	d121      	bne.n	8004c0c <I2C_IsErrorOccurred+0xbc>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bce:	d01d      	beq.n	8004c0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d01a      	beq.n	8004c0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004be4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004be6:	f7fe fa5b 	bl	80030a0 <HAL_GetTick>
 8004bea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bec:	e00e      	b.n	8004c0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bee:	f7fe fa57 	bl	80030a0 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b19      	cmp	r3, #25
 8004bfa:	d907      	bls.n	8004c0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f043 0320 	orr.w	r3, r3, #32
 8004c02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004c0a:	e006      	b.n	8004c1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d1e9      	bne.n	8004bee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d003      	beq.n	8004c30 <I2C_IsErrorOccurred+0xe0>
 8004c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0aa      	beq.n	8004b86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	f043 0304 	orr.w	r3, r3, #4
 8004c46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	f043 0308 	orr.w	r3, r3, #8
 8004c88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00b      	beq.n	8004cbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	f043 0302 	orr.w	r3, r3, #2
 8004caa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01c      	beq.n	8004cfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff fe3b 	bl	8004940 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <I2C_IsErrorOccurred+0x1bc>)
 8004cd6:	400b      	ands	r3, r1
 8004cd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3728      	adds	r7, #40	@ 0x28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	fe00e800 	.word	0xfe00e800

08004d10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	817b      	strh	r3, [r7, #10]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d22:	897b      	ldrh	r3, [r7, #10]
 8004d24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d28:	7a7b      	ldrb	r3, [r7, #9]
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d30:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d3e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	0d5b      	lsrs	r3, r3, #21
 8004d4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004d4e:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <I2C_TransferConfig+0x60>)
 8004d50:	430b      	orrs	r3, r1
 8004d52:	43db      	mvns	r3, r3
 8004d54:	ea02 0103 	and.w	r1, r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	03ff63ff 	.word	0x03ff63ff

08004d74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d138      	bne.n	8004dfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e032      	b.n	8004dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2224      	movs	r2, #36	@ 0x24
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d139      	bne.n	8004e94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e033      	b.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2224      	movs	r2, #36	@ 0x24
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004eac:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d00a      	beq.n	8004ece <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004eb8:	4b16      	ldr	r3, [pc, #88]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d001      	beq.n	8004eca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e01f      	b.n	8004f0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e01d      	b.n	8004f0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ece:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f023 0207 	bic.w	r2, r3, #7
 8004ed6:	490f      	ldr	r1, [pc, #60]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ede:	f7fe f8df 	bl	80030a0 <HAL_GetTick>
 8004ee2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ee4:	e009      	b.n	8004efa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ee6:	f7fe f8db 	bl	80030a0 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ef4:	d901      	bls.n	8004efa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e007      	b.n	8004f0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004efa:	4b06      	ldr	r3, [pc, #24]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f06:	d1ee      	bne.n	8004ee6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	58024800 	.word	0x58024800

08004f18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	@ 0x30
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e3c8      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8087 	beq.w	8005046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f38:	4b88      	ldr	r3, [pc, #544]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f42:	4b86      	ldr	r3, [pc, #536]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d007      	beq.n	8004f5e <HAL_RCC_OscConfig+0x46>
 8004f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f50:	2b18      	cmp	r3, #24
 8004f52:	d110      	bne.n	8004f76 <HAL_RCC_OscConfig+0x5e>
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d10b      	bne.n	8004f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d06c      	beq.n	8005044 <HAL_RCC_OscConfig+0x12c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d168      	bne.n	8005044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e3a2      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCC_OscConfig+0x76>
 8004f80:	4b76      	ldr	r3, [pc, #472]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a75      	ldr	r2, [pc, #468]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	e02e      	b.n	8004fec <HAL_RCC_OscConfig+0xd4>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x98>
 8004f96:	4b71      	ldr	r3, [pc, #452]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a70      	ldr	r2, [pc, #448]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a6d      	ldr	r2, [pc, #436]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e01d      	b.n	8004fec <HAL_RCC_OscConfig+0xd4>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0xbc>
 8004fba:	4b68      	ldr	r3, [pc, #416]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a67      	ldr	r2, [pc, #412]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b65      	ldr	r3, [pc, #404]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a64      	ldr	r2, [pc, #400]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e00b      	b.n	8004fec <HAL_RCC_OscConfig+0xd4>
 8004fd4:	4b61      	ldr	r3, [pc, #388]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a60      	ldr	r2, [pc, #384]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fe f854 	bl	80030a0 <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fe f850 	bl	80030a0 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	@ 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e356      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800500e:	4b53      	ldr	r3, [pc, #332]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0xe4>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fe f840 	bl	80030a0 <HAL_GetTick>
 8005020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005024:	f7fe f83c 	bl	80030a0 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	@ 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e342      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005036:	4b49      	ldr	r3, [pc, #292]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x10c>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 808c 	beq.w	800516c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005054:	4b41      	ldr	r3, [pc, #260]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800505c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800505e:	4b3f      	ldr	r3, [pc, #252]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <HAL_RCC_OscConfig+0x162>
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	2b18      	cmp	r3, #24
 800506e:	d137      	bne.n	80050e0 <HAL_RCC_OscConfig+0x1c8>
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d132      	bne.n	80050e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800507a:	4b38      	ldr	r3, [pc, #224]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_RCC_OscConfig+0x17a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e314      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005092:	4b32      	ldr	r3, [pc, #200]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 0219 	bic.w	r2, r3, #25
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	492f      	ldr	r1, [pc, #188]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd fffc 	bl	80030a0 <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ac:	f7fd fff8 	bl	80030a0 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e2fe      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050be:	4b27      	ldr	r3, [pc, #156]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ca:	4b24      	ldr	r3, [pc, #144]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	4920      	ldr	r1, [pc, #128]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050de:	e045      	b.n	800516c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d026      	beq.n	8005136 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050e8:	4b1c      	ldr	r3, [pc, #112]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f023 0219 	bic.w	r2, r3, #25
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4919      	ldr	r1, [pc, #100]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd ffd1 	bl	80030a0 <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fd ffcd 	bl	80030a0 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e2d3      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005114:	4b11      	ldr	r3, [pc, #68]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005120:	4b0e      	ldr	r3, [pc, #56]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	061b      	lsls	r3, r3, #24
 800512e:	490b      	ldr	r1, [pc, #44]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005130:	4313      	orrs	r3, r2
 8005132:	604b      	str	r3, [r1, #4]
 8005134:	e01a      	b.n	800516c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005136:	4b09      	ldr	r3, [pc, #36]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a08      	ldr	r2, [pc, #32]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fd ffad 	bl	80030a0 <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514a:	f7fd ffa9 	bl	80030a0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d903      	bls.n	8005160 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e2af      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
 800515c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005160:	4b96      	ldr	r3, [pc, #600]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ee      	bne.n	800514a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	d06a      	beq.n	800524e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005178:	4b90      	ldr	r3, [pc, #576]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005180:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005182:	4b8e      	ldr	r3, [pc, #568]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b08      	cmp	r3, #8
 800518c:	d007      	beq.n	800519e <HAL_RCC_OscConfig+0x286>
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b18      	cmp	r3, #24
 8005192:	d11b      	bne.n	80051cc <HAL_RCC_OscConfig+0x2b4>
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d116      	bne.n	80051cc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800519e:	4b87      	ldr	r3, [pc, #540]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_RCC_OscConfig+0x29e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b80      	cmp	r3, #128	@ 0x80
 80051b0:	d001      	beq.n	80051b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e282      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051b6:	4b81      	ldr	r3, [pc, #516]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	061b      	lsls	r3, r3, #24
 80051c4:	497d      	ldr	r1, [pc, #500]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051ca:	e040      	b.n	800524e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d023      	beq.n	800521c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051d4:	4b79      	ldr	r3, [pc, #484]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a78      	ldr	r2, [pc, #480]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd ff5e 	bl	80030a0 <HAL_GetTick>
 80051e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051e8:	f7fd ff5a 	bl	80030a0 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e260      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051fa:	4b70      	ldr	r3, [pc, #448]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005206:	4b6d      	ldr	r3, [pc, #436]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	061b      	lsls	r3, r3, #24
 8005214:	4969      	ldr	r1, [pc, #420]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	60cb      	str	r3, [r1, #12]
 800521a:	e018      	b.n	800524e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800521c:	4b67      	ldr	r3, [pc, #412]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a66      	ldr	r2, [pc, #408]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fd ff3a 	bl	80030a0 <HAL_GetTick>
 800522c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005230:	f7fd ff36 	bl	80030a0 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e23c      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005242:	4b5e      	ldr	r3, [pc, #376]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d036      	beq.n	80052c8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d019      	beq.n	8005296 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005262:	4b56      	ldr	r3, [pc, #344]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005266:	4a55      	ldr	r2, [pc, #340]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526e:	f7fd ff17 	bl	80030a0 <HAL_GetTick>
 8005272:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005276:	f7fd ff13 	bl	80030a0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e219      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005288:	4b4c      	ldr	r3, [pc, #304]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800528a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x35e>
 8005294:	e018      	b.n	80052c8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005296:	4b49      	ldr	r3, [pc, #292]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529a:	4a48      	ldr	r2, [pc, #288]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fd fefd 	bl	80030a0 <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052aa:	f7fd fef9 	bl	80030a0 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e1ff      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052bc:	4b3f      	ldr	r3, [pc, #252]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80052be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d036      	beq.n	8005342 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d019      	beq.n	8005310 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052dc:	4b37      	ldr	r3, [pc, #220]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a36      	ldr	r2, [pc, #216]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80052e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052e8:	f7fd feda 	bl	80030a0 <HAL_GetTick>
 80052ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052f0:	f7fd fed6 	bl	80030a0 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e1dc      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005302:	4b2e      	ldr	r3, [pc, #184]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x3d8>
 800530e:	e018      	b.n	8005342 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005310:	4b2a      	ldr	r3, [pc, #168]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a29      	ldr	r2, [pc, #164]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800531a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800531c:	f7fd fec0 	bl	80030a0 <HAL_GetTick>
 8005320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005324:	f7fd febc 	bl	80030a0 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e1c2      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005336:	4b21      	ldr	r3, [pc, #132]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8086 	beq.w	800545c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005350:	4b1b      	ldr	r3, [pc, #108]	@ (80053c0 <HAL_RCC_OscConfig+0x4a8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1a      	ldr	r2, [pc, #104]	@ (80053c0 <HAL_RCC_OscConfig+0x4a8>)
 8005356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800535a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800535c:	f7fd fea0 	bl	80030a0 <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005364:	f7fd fe9c 	bl	80030a0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	@ 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e1a2      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005376:	4b12      	ldr	r3, [pc, #72]	@ (80053c0 <HAL_RCC_OscConfig+0x4a8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d106      	bne.n	8005398 <HAL_RCC_OscConfig+0x480>
 800538a:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538e:	4a0b      	ldr	r2, [pc, #44]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	6713      	str	r3, [r2, #112]	@ 0x70
 8005396:	e032      	b.n	80053fe <HAL_RCC_OscConfig+0x4e6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d111      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4ac>
 80053a0:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a4:	4a05      	ldr	r2, [pc, #20]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ac:	4b03      	ldr	r3, [pc, #12]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b0:	4a02      	ldr	r2, [pc, #8]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80053b2:	f023 0304 	bic.w	r3, r3, #4
 80053b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b8:	e021      	b.n	80053fe <HAL_RCC_OscConfig+0x4e6>
 80053ba:	bf00      	nop
 80053bc:	58024400 	.word	0x58024400
 80053c0:	58024800 	.word	0x58024800
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	d10c      	bne.n	80053e6 <HAL_RCC_OscConfig+0x4ce>
 80053cc:	4b83      	ldr	r3, [pc, #524]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d0:	4a82      	ldr	r2, [pc, #520]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d8:	4b80      	ldr	r3, [pc, #512]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053dc:	4a7f      	ldr	r2, [pc, #508]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053de:	f043 0301 	orr.w	r3, r3, #1
 80053e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e4:	e00b      	b.n	80053fe <HAL_RCC_OscConfig+0x4e6>
 80053e6:	4b7d      	ldr	r3, [pc, #500]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ea:	4a7c      	ldr	r2, [pc, #496]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f2:	4b7a      	ldr	r3, [pc, #488]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f6:	4a79      	ldr	r2, [pc, #484]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d015      	beq.n	8005432 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005406:	f7fd fe4b 	bl	80030a0 <HAL_GetTick>
 800540a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800540c:	e00a      	b.n	8005424 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fd fe47 	bl	80030a0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e14b      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005424:	4b6d      	ldr	r3, [pc, #436]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ee      	beq.n	800540e <HAL_RCC_OscConfig+0x4f6>
 8005430:	e014      	b.n	800545c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005432:	f7fd fe35 	bl	80030a0 <HAL_GetTick>
 8005436:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005438:	e00a      	b.n	8005450 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543a:	f7fd fe31 	bl	80030a0 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005448:	4293      	cmp	r3, r2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e135      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005450:	4b62      	ldr	r3, [pc, #392]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ee      	bne.n	800543a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 812a 	beq.w	80056ba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005466:	4b5d      	ldr	r3, [pc, #372]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800546e:	2b18      	cmp	r3, #24
 8005470:	f000 80ba 	beq.w	80055e8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	2b02      	cmp	r3, #2
 800547a:	f040 8095 	bne.w	80055a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547e:	4b57      	ldr	r3, [pc, #348]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a56      	ldr	r2, [pc, #344]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548a:	f7fd fe09 	bl	80030a0 <HAL_GetTick>
 800548e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005492:	f7fd fe05 	bl	80030a0 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e10b      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054a4:	4b4d      	ldr	r3, [pc, #308]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f0      	bne.n	8005492 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054b0:	4b4a      	ldr	r3, [pc, #296]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80054b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054b4:	4b4a      	ldr	r3, [pc, #296]	@ (80055e0 <HAL_RCC_OscConfig+0x6c8>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054c0:	0112      	lsls	r2, r2, #4
 80054c2:	430a      	orrs	r2, r1
 80054c4:	4945      	ldr	r1, [pc, #276]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	628b      	str	r3, [r1, #40]	@ 0x28
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	3b01      	subs	r3, #1
 80054d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d8:	3b01      	subs	r3, #1
 80054da:	025b      	lsls	r3, r3, #9
 80054dc:	b29b      	uxth	r3, r3
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e4:	3b01      	subs	r3, #1
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	3b01      	subs	r3, #1
 80054f4:	061b      	lsls	r3, r3, #24
 80054f6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054fa:	4938      	ldr	r1, [pc, #224]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005500:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	4a35      	ldr	r2, [pc, #212]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800550c:	4b33      	ldr	r3, [pc, #204]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800550e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005510:	4b34      	ldr	r3, [pc, #208]	@ (80055e4 <HAL_RCC_OscConfig+0x6cc>)
 8005512:	4013      	ands	r3, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005518:	00d2      	lsls	r2, r2, #3
 800551a:	4930      	ldr	r1, [pc, #192]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800551c:	4313      	orrs	r3, r2
 800551e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005520:	4b2e      	ldr	r3, [pc, #184]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	f023 020c 	bic.w	r2, r3, #12
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552c:	492b      	ldr	r1, [pc, #172]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800552e:	4313      	orrs	r3, r2
 8005530:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005532:	4b2a      	ldr	r3, [pc, #168]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	f023 0202 	bic.w	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553e:	4927      	ldr	r1, [pc, #156]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005540:	4313      	orrs	r3, r2
 8005542:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005544:	4b25      	ldr	r3, [pc, #148]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	4a24      	ldr	r2, [pc, #144]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800554a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800554e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4b22      	ldr	r3, [pc, #136]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	4a21      	ldr	r2, [pc, #132]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800555c:	4b1f      	ldr	r3, [pc, #124]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4a1e      	ldr	r2, [pc, #120]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005562:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005568:	4b1c      	ldr	r3, [pc, #112]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	4a1b      	ldr	r2, [pc, #108]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800556e:	f043 0301 	orr.w	r3, r3, #1
 8005572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005574:	4b19      	ldr	r3, [pc, #100]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a18      	ldr	r2, [pc, #96]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800557a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800557e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fd fd8e 	bl	80030a0 <HAL_GetTick>
 8005584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005588:	f7fd fd8a 	bl	80030a0 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e090      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800559a:	4b10      	ldr	r3, [pc, #64]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x670>
 80055a6:	e088      	b.n	80056ba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a8:	4b0c      	ldr	r3, [pc, #48]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a0b      	ldr	r2, [pc, #44]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80055ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fd fd74 	bl	80030a0 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055bc:	f7fd fd70 	bl	80030a0 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e076      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ce:	4b03      	ldr	r3, [pc, #12]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a4>
 80055da:	e06e      	b.n	80056ba <HAL_RCC_OscConfig+0x7a2>
 80055dc:	58024400 	.word	0x58024400
 80055e0:	fffffc0c 	.word	0xfffffc0c
 80055e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055e8:	4b36      	ldr	r3, [pc, #216]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055ee:	4b35      	ldr	r3, [pc, #212]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d031      	beq.n	8005660 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f003 0203 	and.w	r2, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d12a      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d122      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d11a      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	0a5b      	lsrs	r3, r3, #9
 800562e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005636:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d111      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	0c1b      	lsrs	r3, r3, #16
 8005640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d108      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	0e1b      	lsrs	r3, r3, #24
 8005652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e02b      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005664:	4b17      	ldr	r3, [pc, #92]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 8005666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005668:	08db      	lsrs	r3, r3, #3
 800566a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800566e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	429a      	cmp	r2, r3
 8005678:	d01f      	beq.n	80056ba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800567a:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	4a11      	ldr	r2, [pc, #68]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005686:	f7fd fd0b 	bl	80030a0 <HAL_GetTick>
 800568a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800568c:	bf00      	nop
 800568e:	f7fd fd07 	bl	80030a0 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	4293      	cmp	r3, r2
 8005698:	d0f9      	beq.n	800568e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800569a:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 800569c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800569e:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <HAL_RCC_OscConfig+0x7b0>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056a6:	00d2      	lsls	r2, r2, #3
 80056a8:	4906      	ldr	r1, [pc, #24]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80056ae:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3730      	adds	r7, #48	@ 0x30
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	58024400 	.word	0x58024400
 80056c8:	ffff0007 	.word	0xffff0007

080056cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e19c      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056e0:	4b8a      	ldr	r3, [pc, #552]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d910      	bls.n	8005710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b87      	ldr	r3, [pc, #540]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f023 020f 	bic.w	r2, r3, #15
 80056f6:	4985      	ldr	r1, [pc, #532]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	4b83      	ldr	r3, [pc, #524]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e184      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d010      	beq.n	800573e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	4b7b      	ldr	r3, [pc, #492]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005728:	429a      	cmp	r2, r3
 800572a:	d908      	bls.n	800573e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800572c:	4b78      	ldr	r3, [pc, #480]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	4975      	ldr	r1, [pc, #468]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800573a:	4313      	orrs	r3, r2
 800573c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d010      	beq.n	800576c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	4b70      	ldr	r3, [pc, #448]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005756:	429a      	cmp	r2, r3
 8005758:	d908      	bls.n	800576c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800575a:	4b6d      	ldr	r3, [pc, #436]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	496a      	ldr	r1, [pc, #424]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005768:	4313      	orrs	r3, r2
 800576a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	d010      	beq.n	800579a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	4b64      	ldr	r3, [pc, #400]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005784:	429a      	cmp	r2, r3
 8005786:	d908      	bls.n	800579a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005788:	4b61      	ldr	r3, [pc, #388]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	495e      	ldr	r1, [pc, #376]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005796:	4313      	orrs	r3, r2
 8005798:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d010      	beq.n	80057c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	4b59      	ldr	r3, [pc, #356]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d908      	bls.n	80057c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057b6:	4b56      	ldr	r3, [pc, #344]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	4953      	ldr	r1, [pc, #332]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d010      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d908      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f023 020f 	bic.w	r2, r3, #15
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4947      	ldr	r1, [pc, #284]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d055      	beq.n	80058ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005802:	4b43      	ldr	r3, [pc, #268]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4940      	ldr	r1, [pc, #256]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005810:	4313      	orrs	r3, r2
 8005812:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d107      	bne.n	800582c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581c:	4b3c      	ldr	r3, [pc, #240]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d121      	bne.n	800586c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0f6      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d107      	bne.n	8005844 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005834:	4b36      	ldr	r3, [pc, #216]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d115      	bne.n	800586c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0ea      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d107      	bne.n	800585c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800584c:	4b30      	ldr	r3, [pc, #192]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0de      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800585c:	4b2c      	ldr	r3, [pc, #176]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0d6      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800586c:	4b28      	ldr	r3, [pc, #160]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f023 0207 	bic.w	r2, r3, #7
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4925      	ldr	r1, [pc, #148]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800587a:	4313      	orrs	r3, r2
 800587c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587e:	f7fd fc0f 	bl	80030a0 <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005884:	e00a      	b.n	800589c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005886:	f7fd fc0b 	bl	80030a0 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005894:	4293      	cmp	r3, r2
 8005896:	d901      	bls.n	800589c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e0be      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589c:	4b1c      	ldr	r3, [pc, #112]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d1eb      	bne.n	8005886 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d010      	beq.n	80058dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	4b14      	ldr	r3, [pc, #80]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d208      	bcs.n	80058dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ca:	4b11      	ldr	r3, [pc, #68]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f023 020f 	bic.w	r2, r3, #15
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	490e      	ldr	r1, [pc, #56]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058dc:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d214      	bcs.n	8005914 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ea:	4b08      	ldr	r3, [pc, #32]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 020f 	bic.w	r2, r3, #15
 80058f2:	4906      	ldr	r1, [pc, #24]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b04      	ldr	r3, [pc, #16]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d005      	beq.n	8005914 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e086      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
 800590c:	52002000 	.word	0x52002000
 8005910:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d010      	beq.n	8005942 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	4b3f      	ldr	r3, [pc, #252]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800592c:	429a      	cmp	r2, r3
 800592e:	d208      	bcs.n	8005942 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005930:	4b3c      	ldr	r3, [pc, #240]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	4939      	ldr	r1, [pc, #228]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 800593e:	4313      	orrs	r3, r2
 8005940:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d010      	beq.n	8005970 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	4b34      	ldr	r3, [pc, #208]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800595a:	429a      	cmp	r2, r3
 800595c:	d208      	bcs.n	8005970 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800595e:	4b31      	ldr	r3, [pc, #196]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	492e      	ldr	r1, [pc, #184]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 800596c:	4313      	orrs	r3, r2
 800596e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d010      	beq.n	800599e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	4b28      	ldr	r3, [pc, #160]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005988:	429a      	cmp	r2, r3
 800598a:	d208      	bcs.n	800599e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800598c:	4b25      	ldr	r3, [pc, #148]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	4922      	ldr	r1, [pc, #136]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 800599a:	4313      	orrs	r3, r2
 800599c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d010      	beq.n	80059cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69da      	ldr	r2, [r3, #28]
 80059ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d208      	bcs.n	80059cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	4917      	ldr	r1, [pc, #92]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80059cc:	f000 f834 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b14      	ldr	r3, [pc, #80]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	4912      	ldr	r1, [pc, #72]	@ (8005a28 <HAL_RCC_ClockConfig+0x35c>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
 80059e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005a28 <HAL_RCC_ClockConfig+0x35c>)
 80059f4:	5cd3      	ldrb	r3, [r2, r3]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005a00:	4a0a      	ldr	r2, [pc, #40]	@ (8005a2c <HAL_RCC_ClockConfig+0x360>)
 8005a02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a04:	4a0a      	ldr	r2, [pc, #40]	@ (8005a30 <HAL_RCC_ClockConfig+0x364>)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <HAL_RCC_ClockConfig+0x368>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fd fafc 	bl	800300c <HAL_InitTick>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	58024400 	.word	0x58024400
 8005a28:	0800e510 	.word	0x0800e510
 8005a2c:	2400000c 	.word	0x2400000c
 8005a30:	24000008 	.word	0x24000008
 8005a34:	24000014 	.word	0x24000014

08005a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	@ 0x24
 8005a3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a3e:	4bb3      	ldr	r3, [pc, #716]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a46:	2b18      	cmp	r3, #24
 8005a48:	f200 8155 	bhi.w	8005cf6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005ab9 	.word	0x08005ab9
 8005a58:	08005cf7 	.word	0x08005cf7
 8005a5c:	08005cf7 	.word	0x08005cf7
 8005a60:	08005cf7 	.word	0x08005cf7
 8005a64:	08005cf7 	.word	0x08005cf7
 8005a68:	08005cf7 	.word	0x08005cf7
 8005a6c:	08005cf7 	.word	0x08005cf7
 8005a70:	08005cf7 	.word	0x08005cf7
 8005a74:	08005adf 	.word	0x08005adf
 8005a78:	08005cf7 	.word	0x08005cf7
 8005a7c:	08005cf7 	.word	0x08005cf7
 8005a80:	08005cf7 	.word	0x08005cf7
 8005a84:	08005cf7 	.word	0x08005cf7
 8005a88:	08005cf7 	.word	0x08005cf7
 8005a8c:	08005cf7 	.word	0x08005cf7
 8005a90:	08005cf7 	.word	0x08005cf7
 8005a94:	08005ae5 	.word	0x08005ae5
 8005a98:	08005cf7 	.word	0x08005cf7
 8005a9c:	08005cf7 	.word	0x08005cf7
 8005aa0:	08005cf7 	.word	0x08005cf7
 8005aa4:	08005cf7 	.word	0x08005cf7
 8005aa8:	08005cf7 	.word	0x08005cf7
 8005aac:	08005cf7 	.word	0x08005cf7
 8005ab0:	08005cf7 	.word	0x08005cf7
 8005ab4:	08005aeb 	.word	0x08005aeb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ab8:	4b94      	ldr	r3, [pc, #592]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d009      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ac4:	4b91      	ldr	r3, [pc, #580]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	08db      	lsrs	r3, r3, #3
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	4a90      	ldr	r2, [pc, #576]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ad6:	e111      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ad8:	4b8d      	ldr	r3, [pc, #564]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ada:	61bb      	str	r3, [r7, #24]
      break;
 8005adc:	e10e      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005ade:	4b8d      	ldr	r3, [pc, #564]	@ (8005d14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ae0:	61bb      	str	r3, [r7, #24]
      break;
 8005ae2:	e10b      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ae6:	61bb      	str	r3, [r7, #24]
      break;
 8005ae8:	e108      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aea:	4b88      	ldr	r3, [pc, #544]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005af4:	4b85      	ldr	r3, [pc, #532]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005afe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b00:	4b82      	ldr	r3, [pc, #520]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b0a:	4b80      	ldr	r3, [pc, #512]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0e:	08db      	lsrs	r3, r3, #3
 8005b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80e1 	beq.w	8005cf0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	f000 8083 	beq.w	8005c3c <HAL_RCC_GetSysClockFreq+0x204>
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	f200 80a1 	bhi.w	8005c80 <HAL_RCC_GetSysClockFreq+0x248>
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_RCC_GetSysClockFreq+0x114>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d056      	beq.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b4a:	e099      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d02d      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b58:	4b6c      	ldr	r3, [pc, #432]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	08db      	lsrs	r3, r3, #3
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	4a6b      	ldr	r2, [pc, #428]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	ee07 3a90 	vmov	s15, r3
 8005b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b82:	4b62      	ldr	r3, [pc, #392]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b96:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005bb2:	e087      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bbe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005d20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc6:	4b51      	ldr	r3, [pc, #324]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bda:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bf6:	e065      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005d24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0a:	4b40      	ldr	r3, [pc, #256]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c3a:	e043      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005d28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c7e:	e021      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005d24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	4b1e      	ldr	r3, [pc, #120]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ca6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005cc4:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc8:	0a5b      	lsrs	r3, r3, #9
 8005cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cce:	3301      	adds	r3, #1
 8005cd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce8:	ee17 3a90 	vmov	r3, s15
 8005cec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005cee:	e005      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
      break;
 8005cf4:	e002      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005cf6:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cf8:	61bb      	str	r3, [r7, #24]
      break;
 8005cfa:	bf00      	nop
  }

  return sysclockfreq;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3724      	adds	r7, #36	@ 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	03d09000 	.word	0x03d09000
 8005d14:	003d0900 	.word	0x003d0900
 8005d18:	017d7840 	.word	0x017d7840
 8005d1c:	46000000 	.word	0x46000000
 8005d20:	4c742400 	.word	0x4c742400
 8005d24:	4a742400 	.word	0x4a742400
 8005d28:	4bbebc20 	.word	0x4bbebc20

08005d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d32:	f7ff fe81 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 8005d36:	4602      	mov	r2, r0
 8005d38:	4b10      	ldr	r3, [pc, #64]	@ (8005d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	490f      	ldr	r1, [pc, #60]	@ (8005d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d44:	5ccb      	ldrb	r3, [r1, r3]
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d50:	4b0a      	ldr	r3, [pc, #40]	@ (8005d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	4a09      	ldr	r2, [pc, #36]	@ (8005d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d5a:	5cd3      	ldrb	r3, [r2, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	fa22 f303 	lsr.w	r3, r2, r3
 8005d66:	4a07      	ldr	r2, [pc, #28]	@ (8005d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d6a:	4a07      	ldr	r2, [pc, #28]	@ (8005d88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d70:	4b04      	ldr	r3, [pc, #16]	@ (8005d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d72:	681b      	ldr	r3, [r3, #0]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	58024400 	.word	0x58024400
 8005d80:	0800e510 	.word	0x0800e510
 8005d84:	2400000c 	.word	0x2400000c
 8005d88:	24000008 	.word	0x24000008

08005d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005d90:	f7ff ffcc 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d94:	4602      	mov	r2, r0
 8005d96:	4b06      	ldr	r3, [pc, #24]	@ (8005db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	091b      	lsrs	r3, r3, #4
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	4904      	ldr	r1, [pc, #16]	@ (8005db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005da2:	5ccb      	ldrb	r3, [r1, r3]
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	58024400 	.word	0x58024400
 8005db4:	0800e510 	.word	0x0800e510

08005db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005dbc:	f7ff ffb6 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	4b06      	ldr	r3, [pc, #24]	@ (8005ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	4904      	ldr	r1, [pc, #16]	@ (8005de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dce:	5ccb      	ldrb	r3, [r1, r3]
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	58024400 	.word	0x58024400
 8005de0:	0800e510 	.word	0x0800e510

08005de4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de8:	b0c6      	sub	sp, #280	@ 0x118
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005df6:	2300      	movs	r3, #0
 8005df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005e08:	2500      	movs	r5, #0
 8005e0a:	ea54 0305 	orrs.w	r3, r4, r5
 8005e0e:	d049      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e1a:	d02f      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e20:	d828      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e26:	d01a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e2c:	d822      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e36:	d007      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e38:	e01c      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3a:	4bab      	ldr	r3, [pc, #684]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3e:	4aaa      	ldr	r2, [pc, #680]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e46:	e01a      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2102      	movs	r1, #2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fc25 	bl	80076a0 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00f      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e62:	3328      	adds	r3, #40	@ 0x28
 8005e64:	2102      	movs	r1, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 fccc 	bl	8007804 <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e72:	e004      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e86:	4b98      	ldr	r3, [pc, #608]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e94:	4a94      	ldr	r2, [pc, #592]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e96:	430b      	orrs	r3, r1
 8005e98:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e9a:	e003      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005eb0:	f04f 0900 	mov.w	r9, #0
 8005eb4:	ea58 0309 	orrs.w	r3, r8, r9
 8005eb8:	d047      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d82a      	bhi.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005ee1 	.word	0x08005ee1
 8005ed0:	08005eef 	.word	0x08005eef
 8005ed4:	08005f05 	.word	0x08005f05
 8005ed8:	08005f23 	.word	0x08005f23
 8005edc:	08005f23 	.word	0x08005f23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee0:	4b81      	ldr	r3, [pc, #516]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee4:	4a80      	ldr	r2, [pc, #512]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eec:	e01a      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fbd2 	bl	80076a0 <RCCEx_PLL2_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f02:	e00f      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f08:	3328      	adds	r3, #40	@ 0x28
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 fc79 	bl	8007804 <RCCEx_PLL3_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f18:	e004      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f20:	e000      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f2c:	4b6e      	ldr	r3, [pc, #440]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f30:	f023 0107 	bic.w	r1, r3, #7
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3a:	4a6b      	ldr	r2, [pc, #428]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f40:	e003      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005f56:	f04f 0b00 	mov.w	fp, #0
 8005f5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f5e:	d05b      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f68:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005f6c:	d03b      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005f6e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005f72:	d834      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f78:	d037      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005f7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f7e:	d82e      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f84:	d033      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f8a:	d828      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f90:	d01a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f96:	d822      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005f9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fa0:	d007      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005fa2:	e01c      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa4:	4b50      	ldr	r3, [pc, #320]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fb0:	e01e      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fb70 	bl	80076a0 <RCCEx_PLL2_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005fc6:	e013      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fcc:	3328      	adds	r3, #40	@ 0x28
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fc17 	bl	8007804 <RCCEx_PLL3_Config>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fe4:	e004      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fe6:	bf00      	nop
 8005fe8:	e002      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fea:	bf00      	nop
 8005fec:	e000      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006008:	4a37      	ldr	r2, [pc, #220]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800600a:	430b      	orrs	r3, r1
 800600c:	6593      	str	r3, [r2, #88]	@ 0x58
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800602e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d05d      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006040:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006044:	d03b      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006046:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800604a:	d834      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800604c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006050:	d037      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006056:	d82e      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006058:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800605c:	d033      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800605e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006062:	d828      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006068:	d01a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800606a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800606e:	d822      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006078:	d007      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800607a:	e01c      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800607c:	4b1a      	ldr	r3, [pc, #104]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800607e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006080:	4a19      	ldr	r2, [pc, #100]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006088:	e01e      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608e:	3308      	adds	r3, #8
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f001 fb04 	bl	80076a0 <RCCEx_PLL2_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800609e:	e013      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a4:	3328      	adds	r3, #40	@ 0x28
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fbab 	bl	8007804 <RCCEx_PLL3_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060b4:	e008      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060bc:	e004      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80060be:	bf00      	nop
 80060c0:	e002      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80060c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10d      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80060d0:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060e0:	4a01      	ldr	r2, [pc, #4]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060e2:	430b      	orrs	r3, r1
 80060e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060e6:	e005      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80060e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80060f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006100:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006104:	2300      	movs	r3, #0
 8006106:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800610a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800610e:	460b      	mov	r3, r1
 8006110:	4313      	orrs	r3, r2
 8006112:	d03a      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	2b30      	cmp	r3, #48	@ 0x30
 800611c:	d01f      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800611e:	2b30      	cmp	r3, #48	@ 0x30
 8006120:	d819      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006122:	2b20      	cmp	r3, #32
 8006124:	d00c      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006126:	2b20      	cmp	r3, #32
 8006128:	d815      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d019      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800612e:	2b10      	cmp	r3, #16
 8006130:	d111      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006132:	4baa      	ldr	r3, [pc, #680]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	4aa9      	ldr	r2, [pc, #676]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800613c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800613e:	e011      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006144:	3308      	adds	r3, #8
 8006146:	2102      	movs	r1, #2
 8006148:	4618      	mov	r0, r3
 800614a:	f001 faa9 	bl	80076a0 <RCCEx_PLL2_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006154:	e006      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800616c:	4b9b      	ldr	r3, [pc, #620]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800616e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006170:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617a:	4a98      	ldr	r2, [pc, #608]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800617c:	430b      	orrs	r3, r1
 800617e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006180:	e003      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006186:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800618a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006196:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800619a:	2300      	movs	r3, #0
 800619c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d051      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061b4:	d035      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80061b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ba:	d82e      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80061bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061c0:	d031      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80061c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061c6:	d828      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80061c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061cc:	d01a      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80061ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061d2:	d822      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80061d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061dc:	d007      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80061de:	e01c      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e0:	4b7e      	ldr	r3, [pc, #504]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	4a7d      	ldr	r2, [pc, #500]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061ec:	e01c      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	3308      	adds	r3, #8
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 fa52 	bl	80076a0 <RCCEx_PLL2_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006202:	e011      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	3328      	adds	r3, #40	@ 0x28
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f001 faf9 	bl	8007804 <RCCEx_PLL3_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006218:	e006      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006220:	e002      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006230:	4b6a      	ldr	r3, [pc, #424]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006234:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800623e:	4a67      	ldr	r2, [pc, #412]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006240:	430b      	orrs	r3, r1
 8006242:	6513      	str	r3, [r2, #80]	@ 0x50
 8006244:	e003      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800624a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800625a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006264:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006268:	460b      	mov	r3, r1
 800626a:	4313      	orrs	r3, r2
 800626c:	d053      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006278:	d033      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800627a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800627e:	d82c      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006280:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006284:	d02f      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006286:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800628a:	d826      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800628c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006290:	d02b      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006292:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006296:	d820      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800629c:	d012      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800629e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a2:	d81a      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d022      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80062a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ac:	d115      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b2:	3308      	adds	r3, #8
 80062b4:	2101      	movs	r1, #1
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 f9f2 	bl	80076a0 <RCCEx_PLL2_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80062c2:	e015      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c8:	3328      	adds	r3, #40	@ 0x28
 80062ca:	2101      	movs	r1, #1
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 fa99 	bl	8007804 <RCCEx_PLL3_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80062d8:	e00a      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062e2:	bf00      	nop
 80062e4:	e004      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062f8:	4b38      	ldr	r3, [pc, #224]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006306:	4a35      	ldr	r2, [pc, #212]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006308:	430b      	orrs	r3, r1
 800630a:	6513      	str	r3, [r2, #80]	@ 0x50
 800630c:	e003      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006312:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006326:	2300      	movs	r3, #0
 8006328:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800632c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d058      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800633e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006342:	d033      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006348:	d82c      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634e:	d02f      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006354:	d826      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006356:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800635a:	d02b      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800635c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006360:	d820      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006366:	d012      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800636c:	d81a      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d022      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006376:	d115      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	3308      	adds	r3, #8
 800637e:	2101      	movs	r1, #1
 8006380:	4618      	mov	r0, r3
 8006382:	f001 f98d 	bl	80076a0 <RCCEx_PLL2_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800638c:	e015      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	3328      	adds	r3, #40	@ 0x28
 8006394:	2101      	movs	r1, #1
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fa34 	bl	8007804 <RCCEx_PLL3_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063a2:	e00a      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063aa:	e006      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063ac:	bf00      	nop
 80063ae:	e004      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063b0:	bf00      	nop
 80063b2:	e002      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063b4:	bf00      	nop
 80063b6:	e000      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10e      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80063c2:	4b06      	ldr	r3, [pc, #24]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063d2:	4a02      	ldr	r2, [pc, #8]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80063d8:	e006      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80063da:	bf00      	nop
 80063dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80063f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063f8:	2300      	movs	r3, #0
 80063fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006402:	460b      	mov	r3, r1
 8006404:	4313      	orrs	r3, r2
 8006406:	d037      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800640e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006412:	d00e      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006418:	d816      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d018      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800641e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006422:	d111      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006424:	4bc4      	ldr	r3, [pc, #784]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006428:	4ac3      	ldr	r2, [pc, #780]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800642a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800642e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006430:	e00f      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006436:	3308      	adds	r3, #8
 8006438:	2101      	movs	r1, #1
 800643a:	4618      	mov	r0, r3
 800643c:	f001 f930 	bl	80076a0 <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006446:	e004      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800644e:	e000      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800645a:	4bb7      	ldr	r3, [pc, #732]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800645c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006468:	4ab3      	ldr	r2, [pc, #716]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800646a:	430b      	orrs	r3, r1
 800646c:	6513      	str	r3, [r2, #80]	@ 0x50
 800646e:	e003      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006474:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006484:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800648e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006492:	460b      	mov	r3, r1
 8006494:	4313      	orrs	r3, r2
 8006496:	d039      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d81c      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80064a2:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064e5 	.word	0x080064e5
 80064ac:	080064b9 	.word	0x080064b9
 80064b0:	080064c7 	.word	0x080064c7
 80064b4:	080064e5 	.word	0x080064e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b8:	4b9f      	ldr	r3, [pc, #636]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	4a9e      	ldr	r2, [pc, #632]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80064c4:	e00f      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ca:	3308      	adds	r3, #8
 80064cc:	2102      	movs	r1, #2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 f8e6 	bl	80076a0 <RCCEx_PLL2_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80064da:	e004      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064e2:	e000      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80064e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064ee:	4b92      	ldr	r3, [pc, #584]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f2:	f023 0103 	bic.w	r1, r3, #3
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064fc:	4a8e      	ldr	r2, [pc, #568]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064fe:	430b      	orrs	r3, r1
 8006500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006502:	e003      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800651c:	2300      	movs	r3, #0
 800651e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006522:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006526:	460b      	mov	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	f000 8099 	beq.w	8006660 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800652e:	4b83      	ldr	r3, [pc, #524]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a82      	ldr	r2, [pc, #520]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800653a:	f7fc fdb1 	bl	80030a0 <HAL_GetTick>
 800653e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006542:	e00b      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006544:	f7fc fdac 	bl	80030a0 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b64      	cmp	r3, #100	@ 0x64
 8006552:	d903      	bls.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800655a:	e005      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800655c:	4b77      	ldr	r3, [pc, #476]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0ed      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800656c:	2b00      	cmp	r3, #0
 800656e:	d173      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006570:	4b71      	ldr	r3, [pc, #452]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006572:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800657c:	4053      	eors	r3, r2
 800657e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006582:	2b00      	cmp	r3, #0
 8006584:	d015      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006586:	4b6c      	ldr	r3, [pc, #432]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800658a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006592:	4b69      	ldr	r3, [pc, #420]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006596:	4a68      	ldr	r2, [pc, #416]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800659c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800659e:	4b66      	ldr	r3, [pc, #408]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a2:	4a65      	ldr	r2, [pc, #404]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065aa:	4a63      	ldr	r2, [pc, #396]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065be:	d118      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fc fd6e 	bl	80030a0 <HAL_GetTick>
 80065c4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065c8:	e00d      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ca:	f7fc fd69 	bl	80030a0 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80065da:	429a      	cmp	r2, r3
 80065dc:	d903      	bls.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80065e4:	e005      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065e6:	4b54      	ldr	r3, [pc, #336]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0eb      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80065f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d129      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800660a:	d10e      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800660c:	4b4a      	ldr	r3, [pc, #296]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006618:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800661c:	091a      	lsrs	r2, r3, #4
 800661e:	4b48      	ldr	r3, [pc, #288]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006620:	4013      	ands	r3, r2
 8006622:	4a45      	ldr	r2, [pc, #276]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006624:	430b      	orrs	r3, r1
 8006626:	6113      	str	r3, [r2, #16]
 8006628:	e005      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800662a:	4b43      	ldr	r3, [pc, #268]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	4a42      	ldr	r2, [pc, #264]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006630:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006634:	6113      	str	r3, [r2, #16]
 8006636:	4b40      	ldr	r3, [pc, #256]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006638:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006646:	4a3c      	ldr	r2, [pc, #240]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006648:	430b      	orrs	r3, r1
 800664a:	6713      	str	r3, [r2, #112]	@ 0x70
 800664c:	e008      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800664e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006652:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006656:	e003      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f002 0301 	and.w	r3, r2, #1
 800666c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006676:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800667a:	460b      	mov	r3, r1
 800667c:	4313      	orrs	r3, r2
 800667e:	f000 808f 	beq.w	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006686:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006688:	2b28      	cmp	r3, #40	@ 0x28
 800668a:	d871      	bhi.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800668c:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	08006779 	.word	0x08006779
 8006698:	08006771 	.word	0x08006771
 800669c:	08006771 	.word	0x08006771
 80066a0:	08006771 	.word	0x08006771
 80066a4:	08006771 	.word	0x08006771
 80066a8:	08006771 	.word	0x08006771
 80066ac:	08006771 	.word	0x08006771
 80066b0:	08006771 	.word	0x08006771
 80066b4:	08006745 	.word	0x08006745
 80066b8:	08006771 	.word	0x08006771
 80066bc:	08006771 	.word	0x08006771
 80066c0:	08006771 	.word	0x08006771
 80066c4:	08006771 	.word	0x08006771
 80066c8:	08006771 	.word	0x08006771
 80066cc:	08006771 	.word	0x08006771
 80066d0:	08006771 	.word	0x08006771
 80066d4:	0800675b 	.word	0x0800675b
 80066d8:	08006771 	.word	0x08006771
 80066dc:	08006771 	.word	0x08006771
 80066e0:	08006771 	.word	0x08006771
 80066e4:	08006771 	.word	0x08006771
 80066e8:	08006771 	.word	0x08006771
 80066ec:	08006771 	.word	0x08006771
 80066f0:	08006771 	.word	0x08006771
 80066f4:	08006779 	.word	0x08006779
 80066f8:	08006771 	.word	0x08006771
 80066fc:	08006771 	.word	0x08006771
 8006700:	08006771 	.word	0x08006771
 8006704:	08006771 	.word	0x08006771
 8006708:	08006771 	.word	0x08006771
 800670c:	08006771 	.word	0x08006771
 8006710:	08006771 	.word	0x08006771
 8006714:	08006779 	.word	0x08006779
 8006718:	08006771 	.word	0x08006771
 800671c:	08006771 	.word	0x08006771
 8006720:	08006771 	.word	0x08006771
 8006724:	08006771 	.word	0x08006771
 8006728:	08006771 	.word	0x08006771
 800672c:	08006771 	.word	0x08006771
 8006730:	08006771 	.word	0x08006771
 8006734:	08006779 	.word	0x08006779
 8006738:	58024400 	.word	0x58024400
 800673c:	58024800 	.word	0x58024800
 8006740:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	3308      	adds	r3, #8
 800674a:	2101      	movs	r1, #1
 800674c:	4618      	mov	r0, r3
 800674e:	f000 ffa7 	bl	80076a0 <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006758:	e00f      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	3328      	adds	r3, #40	@ 0x28
 8006760:	2101      	movs	r1, #1
 8006762:	4618      	mov	r0, r3
 8006764:	f001 f84e 	bl	8007804 <RCCEx_PLL3_Config>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800676e:	e004      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006776:	e000      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006782:	4bbf      	ldr	r3, [pc, #764]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006786:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006790:	4abb      	ldr	r2, [pc, #748]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006792:	430b      	orrs	r3, r1
 8006794:	6553      	str	r3, [r2, #84]	@ 0x54
 8006796:	e003      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800679c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f002 0302 	and.w	r3, r2, #2
 80067ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b0:	2300      	movs	r3, #0
 80067b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4313      	orrs	r3, r2
 80067be:	d041      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c6:	2b05      	cmp	r3, #5
 80067c8:	d824      	bhi.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80067ca:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	0800681d 	.word	0x0800681d
 80067d4:	080067e9 	.word	0x080067e9
 80067d8:	080067ff 	.word	0x080067ff
 80067dc:	0800681d 	.word	0x0800681d
 80067e0:	0800681d 	.word	0x0800681d
 80067e4:	0800681d 	.word	0x0800681d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ec:	3308      	adds	r3, #8
 80067ee:	2101      	movs	r1, #1
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 ff55 	bl	80076a0 <RCCEx_PLL2_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067fc:	e00f      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006802:	3328      	adds	r3, #40	@ 0x28
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fffc 	bl	8007804 <RCCEx_PLL3_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006812:	e004      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800681a:	e000      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800681c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006826:	4b96      	ldr	r3, [pc, #600]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682a:	f023 0107 	bic.w	r1, r3, #7
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006834:	4a92      	ldr	r2, [pc, #584]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006836:	430b      	orrs	r3, r1
 8006838:	6553      	str	r3, [r2, #84]	@ 0x54
 800683a:	e003      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f002 0304 	and.w	r3, r2, #4
 8006850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006854:	2300      	movs	r3, #0
 8006856:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800685a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d044      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686c:	2b05      	cmp	r3, #5
 800686e:	d825      	bhi.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006870:	a201      	add	r2, pc, #4	@ (adr r2, 8006878 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	080068c5 	.word	0x080068c5
 800687c:	08006891 	.word	0x08006891
 8006880:	080068a7 	.word	0x080068a7
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068c5 	.word	0x080068c5
 800688c:	080068c5 	.word	0x080068c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006894:	3308      	adds	r3, #8
 8006896:	2101      	movs	r1, #1
 8006898:	4618      	mov	r0, r3
 800689a:	f000 ff01 	bl	80076a0 <RCCEx_PLL2_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80068a4:	e00f      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068aa:	3328      	adds	r3, #40	@ 0x28
 80068ac:	2101      	movs	r1, #1
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 ffa8 	bl	8007804 <RCCEx_PLL3_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80068ba:	e004      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068c2:	e000      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80068c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068ce:	4b6c      	ldr	r3, [pc, #432]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d2:	f023 0107 	bic.w	r1, r3, #7
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068de:	4a68      	ldr	r2, [pc, #416]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068e4:	e003      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f002 0320 	and.w	r3, r2, #32
 80068fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006904:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006908:	460b      	mov	r3, r1
 800690a:	4313      	orrs	r3, r2
 800690c:	d055      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800691a:	d033      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800691c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006920:	d82c      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006926:	d02f      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692c:	d826      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800692e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006932:	d02b      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006934:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006938:	d820      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800693a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800693e:	d012      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006944:	d81a      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d022      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800694a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800694e:	d115      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006954:	3308      	adds	r3, #8
 8006956:	2100      	movs	r1, #0
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fea1 	bl	80076a0 <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006964:	e015      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696a:	3328      	adds	r3, #40	@ 0x28
 800696c:	2102      	movs	r1, #2
 800696e:	4618      	mov	r0, r3
 8006970:	f000 ff48 	bl	8007804 <RCCEx_PLL3_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800697a:	e00a      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006982:	e006      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006984:	bf00      	nop
 8006986:	e004      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006988:	bf00      	nop
 800698a:	e002      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800698c:	bf00      	nop
 800698e:	e000      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006992:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800699a:	4b39      	ldr	r3, [pc, #228]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069aa:	4a35      	ldr	r2, [pc, #212]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80069b0:	e003      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80069c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069ca:	2300      	movs	r3, #0
 80069cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80069d4:	460b      	mov	r3, r1
 80069d6:	4313      	orrs	r3, r2
 80069d8:	d058      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069e6:	d033      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80069e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069ec:	d82c      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f2:	d02f      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f8:	d826      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069fe:	d02b      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a04:	d820      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0a:	d012      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a10:	d81a      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d022      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1a:	d115      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a20:	3308      	adds	r3, #8
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fe3b 	bl	80076a0 <RCCEx_PLL2_Config>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a30:	e015      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	3328      	adds	r3, #40	@ 0x28
 8006a38:	2102      	movs	r1, #2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fee2 	bl	8007804 <RCCEx_PLL3_Config>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a46:	e00a      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a4e:	e006      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a50:	bf00      	nop
 8006a52:	e004      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a54:	bf00      	nop
 8006a56:	e002      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a58:	bf00      	nop
 8006a5a:	e000      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10e      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a66:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a76:	4a02      	ldr	r2, [pc, #8]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a7c:	e006      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006a7e:	bf00      	nop
 8006a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006aa2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	d055      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ab4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ab8:	d033      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006aba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006abe:	d82c      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ac4:	d02f      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006ac6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aca:	d826      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006acc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ad0:	d02b      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006ad2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ad6:	d820      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006adc:	d012      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ae2:	d81a      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d022      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aec:	d115      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af2:	3308      	adds	r3, #8
 8006af4:	2100      	movs	r1, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fdd2 	bl	80076a0 <RCCEx_PLL2_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b02:	e015      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	3328      	adds	r3, #40	@ 0x28
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fe79 	bl	8007804 <RCCEx_PLL3_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b18:	e00a      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b20:	e006      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b22:	bf00      	nop
 8006b24:	e004      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b26:	bf00      	nop
 8006b28:	e002      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b2a:	bf00      	nop
 8006b2c:	e000      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10b      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b38:	4ba0      	ldr	r3, [pc, #640]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b48:	4a9c      	ldr	r2, [pc, #624]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b4e:	e003      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f002 0308 	and.w	r3, r2, #8
 8006b64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b72:	460b      	mov	r3, r1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	d01e      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8a:	3328      	adds	r3, #40	@ 0x28
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fe38 	bl	8007804 <RCCEx_PLL3_Config>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006ba0:	4b86      	ldr	r3, [pc, #536]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bb0:	4a82      	ldr	r2, [pc, #520]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	f002 0310 	and.w	r3, r2, #16
 8006bc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bcc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	d01e      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006be2:	d10c      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be8:	3328      	adds	r3, #40	@ 0x28
 8006bea:	2102      	movs	r1, #2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fe09 	bl	8007804 <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c0e:	4a6b      	ldr	r2, [pc, #428]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006c20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c22:	2300      	movs	r3, #0
 8006c24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c26:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d03e      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c3c:	d022      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c42:	d81b      	bhi.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4c:	d00b      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006c4e:	e015      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	3308      	adds	r3, #8
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fd21 	bl	80076a0 <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c64:	e00f      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6a:	3328      	adds	r3, #40	@ 0x28
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fdc8 	bl	8007804 <RCCEx_PLL3_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c7a:	e004      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c82:	e000      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10b      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c9e:	4a47      	ldr	r2, [pc, #284]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ca4:	e003      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006caa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006cba:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	d03b      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cd6:	d01f      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cdc:	d818      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ce2:	d003      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ce8:	d007      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006cea:	e011      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cec:	4b33      	ldr	r3, [pc, #204]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4a32      	ldr	r2, [pc, #200]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cf8:	e00f      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	3328      	adds	r3, #40	@ 0x28
 8006d00:	2101      	movs	r1, #1
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fd7e 	bl	8007804 <RCCEx_PLL3_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d0e:	e004      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d22:	4b26      	ldr	r3, [pc, #152]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d32:	4a22      	ldr	r2, [pc, #136]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d38:	e003      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d50:	2300      	movs	r3, #0
 8006d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d54:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	d034      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d6c:	d007      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006d6e:	e011      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d70:	4b12      	ldr	r3, [pc, #72]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	4a11      	ldr	r2, [pc, #68]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d7c:	e00e      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	3308      	adds	r3, #8
 8006d84:	2102      	movs	r1, #2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fc8a 	bl	80076a0 <RCCEx_PLL2_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10d      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006da4:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db2:	4a02      	ldr	r2, [pc, #8]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006db4:	430b      	orrs	r3, r1
 8006db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006db8:	e006      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006dba:	bf00      	nop
 8006dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006dd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dda:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d00c      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	3328      	adds	r3, #40	@ 0x28
 8006dea:	2102      	movs	r1, #2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fd09 	bl	8007804 <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006e0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e10:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e14:	460b      	mov	r3, r1
 8006e16:	4313      	orrs	r3, r2
 8006e18:	d036      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e24:	d018      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e2a:	d811      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e30:	d014      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e36:	d80b      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d011      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e40:	d106      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e42:	4bb7      	ldr	r3, [pc, #732]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	4ab6      	ldr	r2, [pc, #728]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e4e:	e008      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e56:	e004      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e58:	bf00      	nop
 8006e5a:	e002      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e5c:	bf00      	nop
 8006e5e:	e000      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e6a:	4bad      	ldr	r3, [pc, #692]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e78:	4aa9      	ldr	r2, [pc, #676]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e7e:	e003      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e94:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e96:	2300      	movs	r3, #0
 8006e98:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	d009      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ea4:	4b9e      	ldr	r3, [pc, #632]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb2:	4a9b      	ldr	r2, [pc, #620]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d009      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ed4:	4b92      	ldr	r3, [pc, #584]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ee2:	4a8f      	ldr	r2, [pc, #572]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006efa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006efe:	460b      	mov	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d00e      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f04:	4b86      	ldr	r3, [pc, #536]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	4a85      	ldr	r2, [pc, #532]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f0e:	6113      	str	r3, [r2, #16]
 8006f10:	4b83      	ldr	r3, [pc, #524]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f12:	6919      	ldr	r1, [r3, #16]
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f1c:	4a80      	ldr	r2, [pc, #512]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	d009      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f3e:	4b78      	ldr	r3, [pc, #480]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4c:	4a74      	ldr	r2, [pc, #464]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f60:	2300      	movs	r3, #0
 8006f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	d00a      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f72:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7e:	4a68      	ldr	r2, [pc, #416]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d011      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fb79 	bl	80076a0 <RCCEx_PLL2_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	6239      	str	r1, [r7, #32]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fd6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	d011      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fb59 	bl	80076a0 <RCCEx_PLL2_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007000:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	2100      	movs	r1, #0
 800700e:	61b9      	str	r1, [r7, #24]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800701a:	460b      	mov	r3, r1
 800701c:	4313      	orrs	r3, r2
 800701e:	d011      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007024:	3308      	adds	r3, #8
 8007026:	2102      	movs	r1, #2
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fb39 	bl	80076a0 <RCCEx_PLL2_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007040:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	2100      	movs	r1, #0
 800704e:	6139      	str	r1, [r7, #16]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800705a:	460b      	mov	r3, r1
 800705c:	4313      	orrs	r3, r2
 800705e:	d011      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007064:	3328      	adds	r3, #40	@ 0x28
 8007066:	2100      	movs	r1, #0
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fbcb 	bl	8007804 <RCCEx_PLL3_Config>
 800706e:	4603      	mov	r3, r0
 8007070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007080:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	2100      	movs	r1, #0
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800709a:	460b      	mov	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	d011      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a4:	3328      	adds	r3, #40	@ 0x28
 80070a6:	2101      	movs	r1, #1
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fbab 	bl	8007804 <RCCEx_PLL3_Config>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80070b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	2100      	movs	r1, #0
 80070ce:	6039      	str	r1, [r7, #0]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	607b      	str	r3, [r7, #4]
 80070d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070da:	460b      	mov	r3, r1
 80070dc:	4313      	orrs	r3, r2
 80070de:	d011      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e4:	3328      	adds	r3, #40	@ 0x28
 80070e6:	2102      	movs	r1, #2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fb8b 	bl	8007804 <RCCEx_PLL3_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80070f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007100:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007104:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
}
 8007112:	4618      	mov	r0, r3
 8007114:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007118:	46bd      	mov	sp, r7
 800711a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400

08007124 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007128:	f7fe fe00 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 800712c:	4602      	mov	r2, r0
 800712e:	4b06      	ldr	r3, [pc, #24]	@ (8007148 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	4904      	ldr	r1, [pc, #16]	@ (800714c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800713a:	5ccb      	ldrb	r3, [r1, r3]
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007144:	4618      	mov	r0, r3
 8007146:	bd80      	pop	{r7, pc}
 8007148:	58024400 	.word	0x58024400
 800714c:	0800e510 	.word	0x0800e510

08007150 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007150:	b480      	push	{r7}
 8007152:	b089      	sub	sp, #36	@ 0x24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007158:	4ba1      	ldr	r3, [pc, #644]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007162:	4b9f      	ldr	r3, [pc, #636]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007166:	0b1b      	lsrs	r3, r3, #12
 8007168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800716c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800716e:	4b9c      	ldr	r3, [pc, #624]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	091b      	lsrs	r3, r3, #4
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800717a:	4b99      	ldr	r3, [pc, #612]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717e:	08db      	lsrs	r3, r3, #3
 8007180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	fb02 f303 	mul.w	r3, r2, r3
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8111 	beq.w	80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	f000 8083 	beq.w	80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	f200 80a1 	bhi.w	80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d056      	beq.n	8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071ba:	e099      	b.n	80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071bc:	4b88      	ldr	r3, [pc, #544]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d02d      	beq.n	8007224 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071c8:	4b85      	ldr	r3, [pc, #532]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	08db      	lsrs	r3, r3, #3
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	4a84      	ldr	r2, [pc, #528]	@ (80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
 80071d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	ee07 3a90 	vmov	s15, r3
 80071e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	4b7b      	ldr	r3, [pc, #492]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007202:	ed97 6a03 	vldr	s12, [r7, #12]
 8007206:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007222:	e087      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007236:	4b6a      	ldr	r3, [pc, #424]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007246:	ed97 6a03 	vldr	s12, [r7, #12]
 800724a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800724e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800725a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800725e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007266:	e065      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727a:	4b59      	ldr	r3, [pc, #356]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728a:	ed97 6a03 	vldr	s12, [r7, #12]
 800728e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800729e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072aa:	e043      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072be:	4b48      	ldr	r3, [pc, #288]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ee:	e021      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007302:	4b37      	ldr	r3, [pc, #220]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007312:	ed97 6a03 	vldr	s12, [r7, #12]
 8007316:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800731a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007332:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007334:	4b2a      	ldr	r3, [pc, #168]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007338:	0a5b      	lsrs	r3, r3, #9
 800733a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800734a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800734e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735a:	ee17 2a90 	vmov	r2, s15
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007362:	4b1f      	ldr	r3, [pc, #124]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	0c1b      	lsrs	r3, r3, #16
 8007368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007388:	ee17 2a90 	vmov	r2, s15
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007390:	4b13      	ldr	r3, [pc, #76]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007394:	0e1b      	lsrs	r3, r3, #24
 8007396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073b6:	ee17 2a90 	vmov	r2, s15
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073be:	e008      	b.n	80073d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]
}
 80073d2:	bf00      	nop
 80073d4:	3724      	adds	r7, #36	@ 0x24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	58024400 	.word	0x58024400
 80073e4:	03d09000 	.word	0x03d09000
 80073e8:	46000000 	.word	0x46000000
 80073ec:	4c742400 	.word	0x4c742400
 80073f0:	4a742400 	.word	0x4a742400
 80073f4:	4bbebc20 	.word	0x4bbebc20

080073f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b089      	sub	sp, #36	@ 0x24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007400:	4ba1      	ldr	r3, [pc, #644]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800740a:	4b9f      	ldr	r3, [pc, #636]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740e:	0d1b      	lsrs	r3, r3, #20
 8007410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007414:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007416:	4b9c      	ldr	r3, [pc, #624]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007422:	4b99      	ldr	r3, [pc, #612]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007426:	08db      	lsrs	r3, r3, #3
 8007428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	fb02 f303 	mul.w	r3, r2, r3
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8111 	beq.w	8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2b02      	cmp	r3, #2
 800744a:	f000 8083 	beq.w	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b02      	cmp	r3, #2
 8007452:	f200 80a1 	bhi.w	8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d056      	beq.n	8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007462:	e099      	b.n	8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007464:	4b88      	ldr	r3, [pc, #544]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b00      	cmp	r3, #0
 800746e:	d02d      	beq.n	80074cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007470:	4b85      	ldr	r3, [pc, #532]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	08db      	lsrs	r3, r3, #3
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	4a84      	ldr	r2, [pc, #528]	@ (800768c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	ee07 3a90 	vmov	s15, r3
 8007488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749a:	4b7b      	ldr	r3, [pc, #492]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074ca:	e087      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007694 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074de:	4b6a      	ldr	r3, [pc, #424]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800750e:	e065      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800751e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007522:	4b59      	ldr	r3, [pc, #356]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a03 	vldr	s12, [r7, #12]
 8007536:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007552:	e043      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800769c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007566:	4b48      	ldr	r3, [pc, #288]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007576:	ed97 6a03 	vldr	s12, [r7, #12]
 800757a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800757e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800758a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007596:	e021      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075aa:	4b37      	ldr	r3, [pc, #220]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80075be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e0:	0a5b      	lsrs	r3, r3, #9
 80075e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007602:	ee17 2a90 	vmov	r2, s15
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800760a:	4b1f      	ldr	r3, [pc, #124]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	0c1b      	lsrs	r3, r3, #16
 8007610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007620:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007624:	edd7 6a07 	vldr	s13, [r7, #28]
 8007628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800762c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007630:	ee17 2a90 	vmov	r2, s15
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007638:	4b13      	ldr	r3, [pc, #76]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763c:	0e1b      	lsrs	r3, r3, #24
 800763e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800764e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007652:	edd7 6a07 	vldr	s13, [r7, #28]
 8007656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800765e:	ee17 2a90 	vmov	r2, s15
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007666:	e008      	b.n	800767a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	609a      	str	r2, [r3, #8]
}
 800767a:	bf00      	nop
 800767c:	3724      	adds	r7, #36	@ 0x24
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	58024400 	.word	0x58024400
 800768c:	03d09000 	.word	0x03d09000
 8007690:	46000000 	.word	0x46000000
 8007694:	4c742400 	.word	0x4c742400
 8007698:	4a742400 	.word	0x4a742400
 800769c:	4bbebc20 	.word	0x4bbebc20

080076a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ae:	4b53      	ldr	r3, [pc, #332]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d101      	bne.n	80076be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e099      	b.n	80077f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076be:	4b4f      	ldr	r3, [pc, #316]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a4e      	ldr	r2, [pc, #312]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ca:	f7fb fce9 	bl	80030a0 <HAL_GetTick>
 80076ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076d0:	e008      	b.n	80076e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076d2:	f7fb fce5 	bl	80030a0 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e086      	b.n	80077f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076e4:	4b45      	ldr	r3, [pc, #276]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f0      	bne.n	80076d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076f0:	4b42      	ldr	r3, [pc, #264]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	031b      	lsls	r3, r3, #12
 80076fe:	493f      	ldr	r1, [pc, #252]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007700:	4313      	orrs	r3, r2
 8007702:	628b      	str	r3, [r1, #40]	@ 0x28
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	3b01      	subs	r3, #1
 800770a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	3b01      	subs	r3, #1
 8007714:	025b      	lsls	r3, r3, #9
 8007716:	b29b      	uxth	r3, r3
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	3b01      	subs	r3, #1
 8007720:	041b      	lsls	r3, r3, #16
 8007722:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	3b01      	subs	r3, #1
 800772e:	061b      	lsls	r3, r3, #24
 8007730:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007734:	4931      	ldr	r1, [pc, #196]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007736:	4313      	orrs	r3, r2
 8007738:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800773a:	4b30      	ldr	r3, [pc, #192]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	492d      	ldr	r1, [pc, #180]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007748:	4313      	orrs	r3, r2
 800774a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800774c:	4b2b      	ldr	r3, [pc, #172]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	f023 0220 	bic.w	r2, r3, #32
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	4928      	ldr	r1, [pc, #160]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800775e:	4b27      	ldr	r3, [pc, #156]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007762:	4a26      	ldr	r2, [pc, #152]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007764:	f023 0310 	bic.w	r3, r3, #16
 8007768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800776a:	4b24      	ldr	r3, [pc, #144]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800776c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800776e:	4b24      	ldr	r3, [pc, #144]	@ (8007800 <RCCEx_PLL2_Config+0x160>)
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	69d2      	ldr	r2, [r2, #28]
 8007776:	00d2      	lsls	r2, r2, #3
 8007778:	4920      	ldr	r1, [pc, #128]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800777e:	4b1f      	ldr	r3, [pc, #124]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007782:	4a1e      	ldr	r2, [pc, #120]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007784:	f043 0310 	orr.w	r3, r3, #16
 8007788:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007790:	4b1a      	ldr	r3, [pc, #104]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007794:	4a19      	ldr	r2, [pc, #100]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007796:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800779a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800779c:	e00f      	b.n	80077be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d106      	bne.n	80077b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80077a4:	4b15      	ldr	r3, [pc, #84]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a8:	4a14      	ldr	r2, [pc, #80]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077b0:	e005      	b.n	80077be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077b2:	4b12      	ldr	r3, [pc, #72]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	4a11      	ldr	r2, [pc, #68]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077be:	4b0f      	ldr	r3, [pc, #60]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a0e      	ldr	r2, [pc, #56]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ca:	f7fb fc69 	bl	80030a0 <HAL_GetTick>
 80077ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077d0:	e008      	b.n	80077e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077d2:	f7fb fc65 	bl	80030a0 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e006      	b.n	80077f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077e4:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	58024400 	.word	0x58024400
 8007800:	ffff0007 	.word	0xffff0007

08007804 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007812:	4b53      	ldr	r3, [pc, #332]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b03      	cmp	r3, #3
 800781c:	d101      	bne.n	8007822 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e099      	b.n	8007956 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007822:	4b4f      	ldr	r3, [pc, #316]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a4e      	ldr	r2, [pc, #312]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800782c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782e:	f7fb fc37 	bl	80030a0 <HAL_GetTick>
 8007832:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007834:	e008      	b.n	8007848 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007836:	f7fb fc33 	bl	80030a0 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e086      	b.n	8007956 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007848:	4b45      	ldr	r3, [pc, #276]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f0      	bne.n	8007836 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007854:	4b42      	ldr	r3, [pc, #264]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	051b      	lsls	r3, r3, #20
 8007862:	493f      	ldr	r1, [pc, #252]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007864:	4313      	orrs	r3, r2
 8007866:	628b      	str	r3, [r1, #40]	@ 0x28
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	3b01      	subs	r3, #1
 800786e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	3b01      	subs	r3, #1
 8007878:	025b      	lsls	r3, r3, #9
 800787a:	b29b      	uxth	r3, r3
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	3b01      	subs	r3, #1
 8007884:	041b      	lsls	r3, r3, #16
 8007886:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	3b01      	subs	r3, #1
 8007892:	061b      	lsls	r3, r3, #24
 8007894:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007898:	4931      	ldr	r1, [pc, #196]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800789a:	4313      	orrs	r3, r2
 800789c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800789e:	4b30      	ldr	r3, [pc, #192]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	492d      	ldr	r1, [pc, #180]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	4928      	ldr	r1, [pc, #160]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078c2:	4b27      	ldr	r3, [pc, #156]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c6:	4a26      	ldr	r2, [pc, #152]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078ce:	4b24      	ldr	r3, [pc, #144]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d2:	4b24      	ldr	r3, [pc, #144]	@ (8007964 <RCCEx_PLL3_Config+0x160>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	69d2      	ldr	r2, [r2, #28]
 80078da:	00d2      	lsls	r2, r2, #3
 80078dc:	4920      	ldr	r1, [pc, #128]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	4a19      	ldr	r2, [pc, #100]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80078fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007900:	e00f      	b.n	8007922 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d106      	bne.n	8007916 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007908:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800790a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790c:	4a14      	ldr	r2, [pc, #80]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800790e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007912:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007914:	e005      	b.n	8007922 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007916:	4b12      	ldr	r3, [pc, #72]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791a:	4a11      	ldr	r2, [pc, #68]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800791c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007920:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007922:	4b0f      	ldr	r3, [pc, #60]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a0e      	ldr	r2, [pc, #56]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800792c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800792e:	f7fb fbb7 	bl	80030a0 <HAL_GetTick>
 8007932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007934:	e008      	b.n	8007948 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007936:	f7fb fbb3 	bl	80030a0 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e006      	b.n	8007956 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007948:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0f0      	beq.n	8007936 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	58024400 	.word	0x58024400
 8007964:	ffff0007 	.word	0xffff0007

08007968 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e049      	b.n	8007a0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fa fbd6 	bl	8002140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3304      	adds	r3, #4
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f000 fa66 	bl	8007e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d109      	bne.n	8007a3c <HAL_TIM_PWM_Start+0x24>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	bf14      	ite	ne
 8007a34:	2301      	movne	r3, #1
 8007a36:	2300      	moveq	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	e03c      	b.n	8007ab6 <HAL_TIM_PWM_Start+0x9e>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d109      	bne.n	8007a56 <HAL_TIM_PWM_Start+0x3e>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	e02f      	b.n	8007ab6 <HAL_TIM_PWM_Start+0x9e>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b08      	cmp	r3, #8
 8007a5a:	d109      	bne.n	8007a70 <HAL_TIM_PWM_Start+0x58>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	bf14      	ite	ne
 8007a68:	2301      	movne	r3, #1
 8007a6a:	2300      	moveq	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	e022      	b.n	8007ab6 <HAL_TIM_PWM_Start+0x9e>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b0c      	cmp	r3, #12
 8007a74:	d109      	bne.n	8007a8a <HAL_TIM_PWM_Start+0x72>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	bf14      	ite	ne
 8007a82:	2301      	movne	r3, #1
 8007a84:	2300      	moveq	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	e015      	b.n	8007ab6 <HAL_TIM_PWM_Start+0x9e>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b10      	cmp	r3, #16
 8007a8e:	d109      	bne.n	8007aa4 <HAL_TIM_PWM_Start+0x8c>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	bf14      	ite	ne
 8007a9c:	2301      	movne	r3, #1
 8007a9e:	2300      	moveq	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	e008      	b.n	8007ab6 <HAL_TIM_PWM_Start+0x9e>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	bf14      	ite	ne
 8007ab0:	2301      	movne	r3, #1
 8007ab2:	2300      	moveq	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e0ab      	b.n	8007c16 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_PWM_Start+0xb6>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007acc:	e023      	b.n	8007b16 <HAL_TIM_PWM_Start+0xfe>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_PWM_Start+0xc6>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007adc:	e01b      	b.n	8007b16 <HAL_TIM_PWM_Start+0xfe>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d104      	bne.n	8007aee <HAL_TIM_PWM_Start+0xd6>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aec:	e013      	b.n	8007b16 <HAL_TIM_PWM_Start+0xfe>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b0c      	cmp	r3, #12
 8007af2:	d104      	bne.n	8007afe <HAL_TIM_PWM_Start+0xe6>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007afc:	e00b      	b.n	8007b16 <HAL_TIM_PWM_Start+0xfe>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b10      	cmp	r3, #16
 8007b02:	d104      	bne.n	8007b0e <HAL_TIM_PWM_Start+0xf6>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b0c:	e003      	b.n	8007b16 <HAL_TIM_PWM_Start+0xfe>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2202      	movs	r2, #2
 8007b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fd2c 	bl	800857c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a3d      	ldr	r2, [pc, #244]	@ (8007c20 <HAL_TIM_PWM_Start+0x208>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d013      	beq.n	8007b56 <HAL_TIM_PWM_Start+0x13e>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a3c      	ldr	r2, [pc, #240]	@ (8007c24 <HAL_TIM_PWM_Start+0x20c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00e      	beq.n	8007b56 <HAL_TIM_PWM_Start+0x13e>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8007c28 <HAL_TIM_PWM_Start+0x210>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d009      	beq.n	8007b56 <HAL_TIM_PWM_Start+0x13e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a39      	ldr	r2, [pc, #228]	@ (8007c2c <HAL_TIM_PWM_Start+0x214>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d004      	beq.n	8007b56 <HAL_TIM_PWM_Start+0x13e>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a37      	ldr	r2, [pc, #220]	@ (8007c30 <HAL_TIM_PWM_Start+0x218>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d101      	bne.n	8007b5a <HAL_TIM_PWM_Start+0x142>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <HAL_TIM_PWM_Start+0x144>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d007      	beq.n	8007b70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a2a      	ldr	r2, [pc, #168]	@ (8007c20 <HAL_TIM_PWM_Start+0x208>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d02c      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x1bc>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b82:	d027      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x1bc>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a2a      	ldr	r2, [pc, #168]	@ (8007c34 <HAL_TIM_PWM_Start+0x21c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d022      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x1bc>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a29      	ldr	r2, [pc, #164]	@ (8007c38 <HAL_TIM_PWM_Start+0x220>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d01d      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x1bc>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a27      	ldr	r2, [pc, #156]	@ (8007c3c <HAL_TIM_PWM_Start+0x224>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d018      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x1bc>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c24 <HAL_TIM_PWM_Start+0x20c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d013      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x1bc>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a23      	ldr	r2, [pc, #140]	@ (8007c40 <HAL_TIM_PWM_Start+0x228>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00e      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x1bc>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1b      	ldr	r2, [pc, #108]	@ (8007c28 <HAL_TIM_PWM_Start+0x210>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d009      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x1bc>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8007c44 <HAL_TIM_PWM_Start+0x22c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d004      	beq.n	8007bd4 <HAL_TIM_PWM_Start+0x1bc>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1e      	ldr	r2, [pc, #120]	@ (8007c48 <HAL_TIM_PWM_Start+0x230>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d115      	bne.n	8007c00 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	4b1c      	ldr	r3, [pc, #112]	@ (8007c4c <HAL_TIM_PWM_Start+0x234>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b06      	cmp	r3, #6
 8007be4:	d015      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x1fa>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bec:	d011      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0201 	orr.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfe:	e008      	b.n	8007c12 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	e000      	b.n	8007c14 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	40010000 	.word	0x40010000
 8007c24:	40010400 	.word	0x40010400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800
 8007c34:	40000400 	.word	0x40000400
 8007c38:	40000800 	.word	0x40000800
 8007c3c:	40000c00 	.word	0x40000c00
 8007c40:	40001800 	.word	0x40001800
 8007c44:	4000e000 	.word	0x4000e000
 8007c48:	4000e400 	.word	0x4000e400
 8007c4c:	00010007 	.word	0x00010007

08007c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e0ff      	b.n	8007e6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b14      	cmp	r3, #20
 8007c7a:	f200 80f0 	bhi.w	8007e5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007e5f 	.word	0x08007e5f
 8007c8c:	08007e5f 	.word	0x08007e5f
 8007c90:	08007e5f 	.word	0x08007e5f
 8007c94:	08007d19 	.word	0x08007d19
 8007c98:	08007e5f 	.word	0x08007e5f
 8007c9c:	08007e5f 	.word	0x08007e5f
 8007ca0:	08007e5f 	.word	0x08007e5f
 8007ca4:	08007d5b 	.word	0x08007d5b
 8007ca8:	08007e5f 	.word	0x08007e5f
 8007cac:	08007e5f 	.word	0x08007e5f
 8007cb0:	08007e5f 	.word	0x08007e5f
 8007cb4:	08007d9b 	.word	0x08007d9b
 8007cb8:	08007e5f 	.word	0x08007e5f
 8007cbc:	08007e5f 	.word	0x08007e5f
 8007cc0:	08007e5f 	.word	0x08007e5f
 8007cc4:	08007ddd 	.word	0x08007ddd
 8007cc8:	08007e5f 	.word	0x08007e5f
 8007ccc:	08007e5f 	.word	0x08007e5f
 8007cd0:	08007e5f 	.word	0x08007e5f
 8007cd4:	08007e1d 	.word	0x08007e1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 f976 	bl	8007fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0208 	orr.w	r2, r2, #8
 8007cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0204 	bic.w	r2, r2, #4
 8007d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6999      	ldr	r1, [r3, #24]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	691a      	ldr	r2, [r3, #16]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	619a      	str	r2, [r3, #24]
      break;
 8007d16:	e0a5      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f9e6 	bl	80080f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6999      	ldr	r1, [r3, #24]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	021a      	lsls	r2, r3, #8
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	619a      	str	r2, [r3, #24]
      break;
 8007d58:	e084      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fa4f 	bl	8008204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f042 0208 	orr.w	r2, r2, #8
 8007d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69da      	ldr	r2, [r3, #28]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0204 	bic.w	r2, r2, #4
 8007d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69d9      	ldr	r1, [r3, #28]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	61da      	str	r2, [r3, #28]
      break;
 8007d98:	e064      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fab7 	bl	8008314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69da      	ldr	r2, [r3, #28]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69d9      	ldr	r1, [r3, #28]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	021a      	lsls	r2, r3, #8
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	61da      	str	r2, [r3, #28]
      break;
 8007dda:	e043      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fb00 	bl	80083e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0208 	orr.w	r2, r2, #8
 8007df6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0204 	bic.w	r2, r2, #4
 8007e06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007e1a:	e023      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fb44 	bl	80084b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	021a      	lsls	r2, r3, #8
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007e5c:	e002      	b.n	8007e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
      break;
 8007e62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop

08007e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a47      	ldr	r2, [pc, #284]	@ (8007fa8 <TIM_Base_SetConfig+0x130>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d013      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e96:	d00f      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a44      	ldr	r2, [pc, #272]	@ (8007fac <TIM_Base_SetConfig+0x134>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00b      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a43      	ldr	r2, [pc, #268]	@ (8007fb0 <TIM_Base_SetConfig+0x138>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d007      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a42      	ldr	r2, [pc, #264]	@ (8007fb4 <TIM_Base_SetConfig+0x13c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d003      	beq.n	8007eb8 <TIM_Base_SetConfig+0x40>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a41      	ldr	r2, [pc, #260]	@ (8007fb8 <TIM_Base_SetConfig+0x140>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d108      	bne.n	8007eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a36      	ldr	r2, [pc, #216]	@ (8007fa8 <TIM_Base_SetConfig+0x130>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d027      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed8:	d023      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a33      	ldr	r2, [pc, #204]	@ (8007fac <TIM_Base_SetConfig+0x134>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d01f      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a32      	ldr	r2, [pc, #200]	@ (8007fb0 <TIM_Base_SetConfig+0x138>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d01b      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a31      	ldr	r2, [pc, #196]	@ (8007fb4 <TIM_Base_SetConfig+0x13c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d017      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a30      	ldr	r2, [pc, #192]	@ (8007fb8 <TIM_Base_SetConfig+0x140>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d013      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a2f      	ldr	r2, [pc, #188]	@ (8007fbc <TIM_Base_SetConfig+0x144>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00f      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a2e      	ldr	r2, [pc, #184]	@ (8007fc0 <TIM_Base_SetConfig+0x148>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00b      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8007fc4 <TIM_Base_SetConfig+0x14c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d007      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a2c      	ldr	r2, [pc, #176]	@ (8007fc8 <TIM_Base_SetConfig+0x150>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d003      	beq.n	8007f22 <TIM_Base_SetConfig+0xaa>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007fcc <TIM_Base_SetConfig+0x154>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d108      	bne.n	8007f34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a14      	ldr	r2, [pc, #80]	@ (8007fa8 <TIM_Base_SetConfig+0x130>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00f      	beq.n	8007f7a <TIM_Base_SetConfig+0x102>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a16      	ldr	r2, [pc, #88]	@ (8007fb8 <TIM_Base_SetConfig+0x140>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00b      	beq.n	8007f7a <TIM_Base_SetConfig+0x102>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a15      	ldr	r2, [pc, #84]	@ (8007fbc <TIM_Base_SetConfig+0x144>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_Base_SetConfig+0x102>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a14      	ldr	r2, [pc, #80]	@ (8007fc0 <TIM_Base_SetConfig+0x148>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_Base_SetConfig+0x102>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a13      	ldr	r2, [pc, #76]	@ (8007fc4 <TIM_Base_SetConfig+0x14c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d103      	bne.n	8007f82 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f043 0204 	orr.w	r2, r3, #4
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	601a      	str	r2, [r3, #0]
}
 8007f9a:	bf00      	nop
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40000400 	.word	0x40000400
 8007fb0:	40000800 	.word	0x40000800
 8007fb4:	40000c00 	.word	0x40000c00
 8007fb8:	40010400 	.word	0x40010400
 8007fbc:	40014000 	.word	0x40014000
 8007fc0:	40014400 	.word	0x40014400
 8007fc4:	40014800 	.word	0x40014800
 8007fc8:	4000e000 	.word	0x4000e000
 8007fcc:	4000e400 	.word	0x4000e400

08007fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	f023 0201 	bic.w	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4b37      	ldr	r3, [pc, #220]	@ (80080d8 <TIM_OC1_SetConfig+0x108>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0303 	bic.w	r3, r3, #3
 8008006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f023 0302 	bic.w	r3, r3, #2
 8008018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a2d      	ldr	r2, [pc, #180]	@ (80080dc <TIM_OC1_SetConfig+0x10c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d00f      	beq.n	800804c <TIM_OC1_SetConfig+0x7c>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a2c      	ldr	r2, [pc, #176]	@ (80080e0 <TIM_OC1_SetConfig+0x110>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00b      	beq.n	800804c <TIM_OC1_SetConfig+0x7c>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a2b      	ldr	r2, [pc, #172]	@ (80080e4 <TIM_OC1_SetConfig+0x114>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d007      	beq.n	800804c <TIM_OC1_SetConfig+0x7c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a2a      	ldr	r2, [pc, #168]	@ (80080e8 <TIM_OC1_SetConfig+0x118>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d003      	beq.n	800804c <TIM_OC1_SetConfig+0x7c>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a29      	ldr	r2, [pc, #164]	@ (80080ec <TIM_OC1_SetConfig+0x11c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d10c      	bne.n	8008066 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f023 0308 	bic.w	r3, r3, #8
 8008052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	4313      	orrs	r3, r2
 800805c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f023 0304 	bic.w	r3, r3, #4
 8008064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a1c      	ldr	r2, [pc, #112]	@ (80080dc <TIM_OC1_SetConfig+0x10c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00f      	beq.n	800808e <TIM_OC1_SetConfig+0xbe>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a1b      	ldr	r2, [pc, #108]	@ (80080e0 <TIM_OC1_SetConfig+0x110>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d00b      	beq.n	800808e <TIM_OC1_SetConfig+0xbe>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a1a      	ldr	r2, [pc, #104]	@ (80080e4 <TIM_OC1_SetConfig+0x114>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d007      	beq.n	800808e <TIM_OC1_SetConfig+0xbe>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a19      	ldr	r2, [pc, #100]	@ (80080e8 <TIM_OC1_SetConfig+0x118>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d003      	beq.n	800808e <TIM_OC1_SetConfig+0xbe>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a18      	ldr	r2, [pc, #96]	@ (80080ec <TIM_OC1_SetConfig+0x11c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d111      	bne.n	80080b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800809c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	621a      	str	r2, [r3, #32]
}
 80080cc:	bf00      	nop
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	fffeff8f 	.word	0xfffeff8f
 80080dc:	40010000 	.word	0x40010000
 80080e0:	40010400 	.word	0x40010400
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40014400 	.word	0x40014400
 80080ec:	40014800 	.word	0x40014800

080080f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	f023 0210 	bic.w	r2, r3, #16
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4b34      	ldr	r3, [pc, #208]	@ (80081ec <TIM_OC2_SetConfig+0xfc>)
 800811c:	4013      	ands	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4313      	orrs	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f023 0320 	bic.w	r3, r3, #32
 800813a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a29      	ldr	r2, [pc, #164]	@ (80081f0 <TIM_OC2_SetConfig+0x100>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d003      	beq.n	8008158 <TIM_OC2_SetConfig+0x68>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a28      	ldr	r2, [pc, #160]	@ (80081f4 <TIM_OC2_SetConfig+0x104>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d10d      	bne.n	8008174 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800815e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008172:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a1e      	ldr	r2, [pc, #120]	@ (80081f0 <TIM_OC2_SetConfig+0x100>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00f      	beq.n	800819c <TIM_OC2_SetConfig+0xac>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a1d      	ldr	r2, [pc, #116]	@ (80081f4 <TIM_OC2_SetConfig+0x104>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00b      	beq.n	800819c <TIM_OC2_SetConfig+0xac>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a1c      	ldr	r2, [pc, #112]	@ (80081f8 <TIM_OC2_SetConfig+0x108>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d007      	beq.n	800819c <TIM_OC2_SetConfig+0xac>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a1b      	ldr	r2, [pc, #108]	@ (80081fc <TIM_OC2_SetConfig+0x10c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <TIM_OC2_SetConfig+0xac>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a1a      	ldr	r2, [pc, #104]	@ (8008200 <TIM_OC2_SetConfig+0x110>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d113      	bne.n	80081c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	621a      	str	r2, [r3, #32]
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	feff8fff 	.word	0xfeff8fff
 80081f0:	40010000 	.word	0x40010000
 80081f4:	40010400 	.word	0x40010400
 80081f8:	40014000 	.word	0x40014000
 80081fc:	40014400 	.word	0x40014400
 8008200:	40014800 	.word	0x40014800

08008204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	4b33      	ldr	r3, [pc, #204]	@ (80082fc <TIM_OC3_SetConfig+0xf8>)
 8008230:	4013      	ands	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800824c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	021b      	lsls	r3, r3, #8
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a28      	ldr	r2, [pc, #160]	@ (8008300 <TIM_OC3_SetConfig+0xfc>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d003      	beq.n	800826a <TIM_OC3_SetConfig+0x66>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a27      	ldr	r2, [pc, #156]	@ (8008304 <TIM_OC3_SetConfig+0x100>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d10d      	bne.n	8008286 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	021b      	lsls	r3, r3, #8
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	4313      	orrs	r3, r2
 800827c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a1d      	ldr	r2, [pc, #116]	@ (8008300 <TIM_OC3_SetConfig+0xfc>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d00f      	beq.n	80082ae <TIM_OC3_SetConfig+0xaa>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a1c      	ldr	r2, [pc, #112]	@ (8008304 <TIM_OC3_SetConfig+0x100>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00b      	beq.n	80082ae <TIM_OC3_SetConfig+0xaa>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a1b      	ldr	r2, [pc, #108]	@ (8008308 <TIM_OC3_SetConfig+0x104>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d007      	beq.n	80082ae <TIM_OC3_SetConfig+0xaa>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a1a      	ldr	r2, [pc, #104]	@ (800830c <TIM_OC3_SetConfig+0x108>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d003      	beq.n	80082ae <TIM_OC3_SetConfig+0xaa>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a19      	ldr	r2, [pc, #100]	@ (8008310 <TIM_OC3_SetConfig+0x10c>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d113      	bne.n	80082d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	621a      	str	r2, [r3, #32]
}
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	fffeff8f 	.word	0xfffeff8f
 8008300:	40010000 	.word	0x40010000
 8008304:	40010400 	.word	0x40010400
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800

08008314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4b24      	ldr	r3, [pc, #144]	@ (80083d0 <TIM_OC4_SetConfig+0xbc>)
 8008340:	4013      	ands	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800834a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800835e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	031b      	lsls	r3, r3, #12
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a19      	ldr	r2, [pc, #100]	@ (80083d4 <TIM_OC4_SetConfig+0xc0>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d00f      	beq.n	8008394 <TIM_OC4_SetConfig+0x80>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a18      	ldr	r2, [pc, #96]	@ (80083d8 <TIM_OC4_SetConfig+0xc4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d00b      	beq.n	8008394 <TIM_OC4_SetConfig+0x80>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a17      	ldr	r2, [pc, #92]	@ (80083dc <TIM_OC4_SetConfig+0xc8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d007      	beq.n	8008394 <TIM_OC4_SetConfig+0x80>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a16      	ldr	r2, [pc, #88]	@ (80083e0 <TIM_OC4_SetConfig+0xcc>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d003      	beq.n	8008394 <TIM_OC4_SetConfig+0x80>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a15      	ldr	r2, [pc, #84]	@ (80083e4 <TIM_OC4_SetConfig+0xd0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d109      	bne.n	80083a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800839a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	019b      	lsls	r3, r3, #6
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	621a      	str	r2, [r3, #32]
}
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	feff8fff 	.word	0xfeff8fff
 80083d4:	40010000 	.word	0x40010000
 80083d8:	40010400 	.word	0x40010400
 80083dc:	40014000 	.word	0x40014000
 80083e0:	40014400 	.word	0x40014400
 80083e4:	40014800 	.word	0x40014800

080083e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800840e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	4b21      	ldr	r3, [pc, #132]	@ (8008498 <TIM_OC5_SetConfig+0xb0>)
 8008414:	4013      	ands	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008428:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	041b      	lsls	r3, r3, #16
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	4313      	orrs	r3, r2
 8008434:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a18      	ldr	r2, [pc, #96]	@ (800849c <TIM_OC5_SetConfig+0xb4>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00f      	beq.n	800845e <TIM_OC5_SetConfig+0x76>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a17      	ldr	r2, [pc, #92]	@ (80084a0 <TIM_OC5_SetConfig+0xb8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00b      	beq.n	800845e <TIM_OC5_SetConfig+0x76>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a16      	ldr	r2, [pc, #88]	@ (80084a4 <TIM_OC5_SetConfig+0xbc>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d007      	beq.n	800845e <TIM_OC5_SetConfig+0x76>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a15      	ldr	r2, [pc, #84]	@ (80084a8 <TIM_OC5_SetConfig+0xc0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d003      	beq.n	800845e <TIM_OC5_SetConfig+0x76>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a14      	ldr	r2, [pc, #80]	@ (80084ac <TIM_OC5_SetConfig+0xc4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d109      	bne.n	8008472 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008464:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	621a      	str	r2, [r3, #32]
}
 800848c:	bf00      	nop
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	fffeff8f 	.word	0xfffeff8f
 800849c:	40010000 	.word	0x40010000
 80084a0:	40010400 	.word	0x40010400
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800

080084b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	4b22      	ldr	r3, [pc, #136]	@ (8008564 <TIM_OC6_SetConfig+0xb4>)
 80084dc:	4013      	ands	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	051b      	lsls	r3, r3, #20
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a19      	ldr	r2, [pc, #100]	@ (8008568 <TIM_OC6_SetConfig+0xb8>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00f      	beq.n	8008528 <TIM_OC6_SetConfig+0x78>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a18      	ldr	r2, [pc, #96]	@ (800856c <TIM_OC6_SetConfig+0xbc>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00b      	beq.n	8008528 <TIM_OC6_SetConfig+0x78>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a17      	ldr	r2, [pc, #92]	@ (8008570 <TIM_OC6_SetConfig+0xc0>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d007      	beq.n	8008528 <TIM_OC6_SetConfig+0x78>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a16      	ldr	r2, [pc, #88]	@ (8008574 <TIM_OC6_SetConfig+0xc4>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d003      	beq.n	8008528 <TIM_OC6_SetConfig+0x78>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a15      	ldr	r2, [pc, #84]	@ (8008578 <TIM_OC6_SetConfig+0xc8>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d109      	bne.n	800853c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800852e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	029b      	lsls	r3, r3, #10
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	4313      	orrs	r3, r2
 800853a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	621a      	str	r2, [r3, #32]
}
 8008556:	bf00      	nop
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	feff8fff 	.word	0xfeff8fff
 8008568:	40010000 	.word	0x40010000
 800856c:	40010400 	.word	0x40010400
 8008570:	40014000 	.word	0x40014000
 8008574:	40014400 	.word	0x40014400
 8008578:	40014800 	.word	0x40014800

0800857c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	2201      	movs	r2, #1
 8008590:	fa02 f303 	lsl.w	r3, r2, r3
 8008594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a1a      	ldr	r2, [r3, #32]
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	43db      	mvns	r3, r3
 800859e:	401a      	ands	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a1a      	ldr	r2, [r3, #32]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	f003 031f 	and.w	r3, r3, #31
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	fa01 f303 	lsl.w	r3, r1, r3
 80085b4:	431a      	orrs	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	621a      	str	r2, [r3, #32]
}
 80085ba:	bf00      	nop
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
	...

080085c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085dc:	2302      	movs	r3, #2
 80085de:	e077      	b.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a35      	ldr	r2, [pc, #212]	@ (80086dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a34      	ldr	r2, [pc, #208]	@ (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d108      	bne.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800861a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800862c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a25      	ldr	r2, [pc, #148]	@ (80086dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d02c      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008652:	d027      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a22      	ldr	r2, [pc, #136]	@ (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d022      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a21      	ldr	r2, [pc, #132]	@ (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d01d      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a1f      	ldr	r2, [pc, #124]	@ (80086ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d018      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a1a      	ldr	r2, [pc, #104]	@ (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d013      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a1b      	ldr	r2, [pc, #108]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d00e      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1a      	ldr	r2, [pc, #104]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d009      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a18      	ldr	r2, [pc, #96]	@ (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d004      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a17      	ldr	r2, [pc, #92]	@ (80086fc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d10c      	bne.n	80086be <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	40010000 	.word	0x40010000
 80086e0:	40010400 	.word	0x40010400
 80086e4:	40000400 	.word	0x40000400
 80086e8:	40000800 	.word	0x40000800
 80086ec:	40000c00 	.word	0x40000c00
 80086f0:	40001800 	.word	0x40001800
 80086f4:	40014000 	.word	0x40014000
 80086f8:	4000e000 	.word	0x4000e000
 80086fc:	4000e400 	.word	0x4000e400

08008700 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008714:	2b01      	cmp	r3, #1
 8008716:	d101      	bne.n	800871c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008718:	2302      	movs	r3, #2
 800871a:	e073      	b.n	8008804 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	041b      	lsls	r3, r3, #16
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a19      	ldr	r2, [pc, #100]	@ (8008810 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d004      	beq.n	80087b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a18      	ldr	r2, [pc, #96]	@ (8008814 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d11c      	bne.n	80087f2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c2:	051b      	lsls	r3, r3, #20
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	40010000 	.word	0x40010000
 8008814:	40010400 	.word	0x40010400

08008818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e042      	b.n	80088b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008830:	2b00      	cmp	r3, #0
 8008832:	d106      	bne.n	8008842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7f9 fd19 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2224      	movs	r2, #36	@ 0x24
 8008846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0201 	bic.w	r2, r2, #1
 8008858:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fb64 	bl	8009f30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fcf5 	bl	8009258 <UART_SetConfig>
 800886e:	4603      	mov	r3, r0
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e01b      	b.n	80088b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0201 	orr.w	r2, r2, #1
 80088a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 fbe3 	bl	800a074 <UART_CheckIdleState>
 80088ae:	4603      	mov	r3, r0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	@ 0x28
 80088bc:	af02      	add	r7, sp, #8
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	4613      	mov	r3, r2
 80088c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	d17b      	bne.n	80089ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <HAL_UART_Transmit+0x26>
 80088d8:	88fb      	ldrh	r3, [r7, #6]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e074      	b.n	80089cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2221      	movs	r2, #33	@ 0x21
 80088ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088f2:	f7fa fbd5 	bl	80030a0 <HAL_GetTick>
 80088f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008910:	d108      	bne.n	8008924 <HAL_UART_Transmit+0x6c>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d104      	bne.n	8008924 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	61bb      	str	r3, [r7, #24]
 8008922:	e003      	b.n	800892c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008928:	2300      	movs	r3, #0
 800892a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800892c:	e030      	b.n	8008990 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2200      	movs	r2, #0
 8008936:	2180      	movs	r1, #128	@ 0x80
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f001 fc45 	bl	800a1c8 <UART_WaitOnFlagUntilTimeout>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2220      	movs	r2, #32
 8008948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e03d      	b.n	80089cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10b      	bne.n	800896e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008964:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	3302      	adds	r3, #2
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	e007      	b.n	800897e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	781a      	ldrb	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	3301      	adds	r3, #1
 800897c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008984:	b29b      	uxth	r3, r3
 8008986:	3b01      	subs	r3, #1
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008996:	b29b      	uxth	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1c8      	bne.n	800892e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2200      	movs	r2, #0
 80089a4:	2140      	movs	r1, #64	@ 0x40
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f001 fc0e 	bl	800a1c8 <UART_WaitOnFlagUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e006      	b.n	80089cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	e000      	b.n	80089cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80089ca:	2302      	movs	r3, #2
  }
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3720      	adds	r7, #32
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08a      	sub	sp, #40	@ 0x28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	4613      	mov	r3, r2
 80089e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d137      	bne.n	8008a5c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <HAL_UART_Receive_IT+0x24>
 80089f2:	88fb      	ldrh	r3, [r7, #6]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e030      	b.n	8008a5e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a18      	ldr	r2, [pc, #96]	@ (8008a68 <HAL_UART_Receive_IT+0x94>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d01f      	beq.n	8008a4c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d018      	beq.n	8008a4c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	613b      	str	r3, [r7, #16]
   return(result);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	623b      	str	r3, [r7, #32]
 8008a3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3c:	69f9      	ldr	r1, [r7, #28]
 8008a3e:	6a3a      	ldr	r2, [r7, #32]
 8008a40:	e841 2300 	strex	r3, r2, [r1]
 8008a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e6      	bne.n	8008a1a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f001 fc26 	bl	800a2a4 <UART_Start_Receive_IT>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	e000      	b.n	8008a5e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a5c:	2302      	movs	r3, #2
  }
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3728      	adds	r7, #40	@ 0x28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	58000c00 	.word	0x58000c00

08008a6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b0ba      	sub	sp, #232	@ 0xe8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a96:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d11b      	bne.n	8008ae0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d015      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d105      	bne.n	8008acc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d009      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8393 	beq.w	80091fc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
      }
      return;
 8008ade:	e38d      	b.n	80091fc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 8123 	beq.w	8008d30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008aea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008aee:	4b8d      	ldr	r3, [pc, #564]	@ (8008d24 <HAL_UART_IRQHandler+0x2b8>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008af6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008afa:	4b8b      	ldr	r3, [pc, #556]	@ (8008d28 <HAL_UART_IRQHandler+0x2bc>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 8116 	beq.w	8008d30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d011      	beq.n	8008b34 <HAL_UART_IRQHandler+0xc8>
 8008b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00b      	beq.n	8008b34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2201      	movs	r2, #1
 8008b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b2a:	f043 0201 	orr.w	r2, r3, #1
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d011      	beq.n	8008b64 <HAL_UART_IRQHandler+0xf8>
 8008b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2202      	movs	r2, #2
 8008b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b5a:	f043 0204 	orr.w	r2, r3, #4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d011      	beq.n	8008b94 <HAL_UART_IRQHandler+0x128>
 8008b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2204      	movs	r2, #4
 8008b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b8a:	f043 0202 	orr.w	r2, r3, #2
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d017      	beq.n	8008bd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba4:	f003 0320 	and.w	r3, r3, #32
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d105      	bne.n	8008bb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008bac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008bb0:	4b5c      	ldr	r3, [pc, #368]	@ (8008d24 <HAL_UART_IRQHandler+0x2b8>)
 8008bb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00b      	beq.n	8008bd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2208      	movs	r2, #8
 8008bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc6:	f043 0208 	orr.w	r2, r3, #8
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d012      	beq.n	8008c02 <HAL_UART_IRQHandler+0x196>
 8008bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00c      	beq.n	8008c02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bf8:	f043 0220 	orr.w	r2, r3, #32
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 82f9 	beq.w	8009200 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d013      	beq.n	8008c42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d105      	bne.n	8008c32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d007      	beq.n	8008c42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c56:	2b40      	cmp	r3, #64	@ 0x40
 8008c58:	d005      	beq.n	8008c66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d054      	beq.n	8008d10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 fc3e 	bl	800a4e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c76:	2b40      	cmp	r3, #64	@ 0x40
 8008c78:	d146      	bne.n	8008d08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008caa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cb6:	e841 2300 	strex	r3, r2, [r1]
 8008cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1d9      	bne.n	8008c7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d017      	beq.n	8008d00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd6:	4a15      	ldr	r2, [pc, #84]	@ (8008d2c <HAL_UART_IRQHandler+0x2c0>)
 8008cd8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fa feb3 	bl	8003a4c <HAL_DMA_Abort_IT>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d019      	beq.n	8008d20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfe:	e00f      	b.n	8008d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fa93 	bl	800922c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d06:	e00b      	b.n	8008d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa8f 	bl	800922c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d0e:	e007      	b.n	8008d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fa8b 	bl	800922c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008d1e:	e26f      	b.n	8009200 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d20:	bf00      	nop
    return;
 8008d22:	e26d      	b.n	8009200 <HAL_UART_IRQHandler+0x794>
 8008d24:	10000001 	.word	0x10000001
 8008d28:	04000120 	.word	0x04000120
 8008d2c:	0800a5b5 	.word	0x0800a5b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	f040 8203 	bne.w	8009140 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d3e:	f003 0310 	and.w	r3, r3, #16
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 81fc 	beq.w	8009140 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d4c:	f003 0310 	and.w	r3, r3, #16
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 81f5 	beq.w	8009140 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2210      	movs	r2, #16
 8008d5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d68:	2b40      	cmp	r3, #64	@ 0x40
 8008d6a:	f040 816d 	bne.w	8009048 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4aa4      	ldr	r2, [pc, #656]	@ (8009008 <HAL_UART_IRQHandler+0x59c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d068      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4aa1      	ldr	r2, [pc, #644]	@ (800900c <HAL_UART_IRQHandler+0x5a0>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d061      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a9f      	ldr	r2, [pc, #636]	@ (8009010 <HAL_UART_IRQHandler+0x5a4>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d05a      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a9c      	ldr	r2, [pc, #624]	@ (8009014 <HAL_UART_IRQHandler+0x5a8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d053      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a9a      	ldr	r2, [pc, #616]	@ (8009018 <HAL_UART_IRQHandler+0x5ac>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d04c      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a97      	ldr	r2, [pc, #604]	@ (800901c <HAL_UART_IRQHandler+0x5b0>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d045      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a95      	ldr	r2, [pc, #596]	@ (8009020 <HAL_UART_IRQHandler+0x5b4>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d03e      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a92      	ldr	r2, [pc, #584]	@ (8009024 <HAL_UART_IRQHandler+0x5b8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d037      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a90      	ldr	r2, [pc, #576]	@ (8009028 <HAL_UART_IRQHandler+0x5bc>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d030      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a8d      	ldr	r2, [pc, #564]	@ (800902c <HAL_UART_IRQHandler+0x5c0>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d029      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a8b      	ldr	r2, [pc, #556]	@ (8009030 <HAL_UART_IRQHandler+0x5c4>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d022      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a88      	ldr	r2, [pc, #544]	@ (8009034 <HAL_UART_IRQHandler+0x5c8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d01b      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a86      	ldr	r2, [pc, #536]	@ (8009038 <HAL_UART_IRQHandler+0x5cc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d014      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a83      	ldr	r2, [pc, #524]	@ (800903c <HAL_UART_IRQHandler+0x5d0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00d      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a81      	ldr	r2, [pc, #516]	@ (8009040 <HAL_UART_IRQHandler+0x5d4>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d006      	beq.n	8008e4e <HAL_UART_IRQHandler+0x3e2>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a7e      	ldr	r2, [pc, #504]	@ (8009044 <HAL_UART_IRQHandler+0x5d8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d106      	bne.n	8008e5c <HAL_UART_IRQHandler+0x3f0>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	e005      	b.n	8008e68 <HAL_UART_IRQHandler+0x3fc>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 80ad 	beq.w	8008fd0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e80:	429a      	cmp	r2, r3
 8008e82:	f080 80a5 	bcs.w	8008fd0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e9c:	f000 8087 	beq.w	8008fae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ece:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ed6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1da      	bne.n	8008ea0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008efa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008efc:	f023 0301 	bic.w	r3, r3, #1
 8008f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3308      	adds	r3, #8
 8008f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e1      	bne.n	8008eea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3308      	adds	r3, #8
 8008f46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e3      	bne.n	8008f26 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f7c:	f023 0310 	bic.w	r3, r3, #16
 8008f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e4      	bne.n	8008f6c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fa fa31 	bl	8003410 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f939 	bl	8009240 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008fce:	e119      	b.n	8009204 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	f040 8112 	bne.w	8009204 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fec:	f040 810a 	bne.w	8009204 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f91e 	bl	8009240 <HAL_UARTEx_RxEventCallback>
      return;
 8009004:	e0fe      	b.n	8009204 <HAL_UART_IRQHandler+0x798>
 8009006:	bf00      	nop
 8009008:	40020010 	.word	0x40020010
 800900c:	40020028 	.word	0x40020028
 8009010:	40020040 	.word	0x40020040
 8009014:	40020058 	.word	0x40020058
 8009018:	40020070 	.word	0x40020070
 800901c:	40020088 	.word	0x40020088
 8009020:	400200a0 	.word	0x400200a0
 8009024:	400200b8 	.word	0x400200b8
 8009028:	40020410 	.word	0x40020410
 800902c:	40020428 	.word	0x40020428
 8009030:	40020440 	.word	0x40020440
 8009034:	40020458 	.word	0x40020458
 8009038:	40020470 	.word	0x40020470
 800903c:	40020488 	.word	0x40020488
 8009040:	400204a0 	.word	0x400204a0
 8009044:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009054:	b29b      	uxth	r3, r3
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009062:	b29b      	uxth	r3, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 80cf 	beq.w	8009208 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800906a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 80ca 	beq.w	8009208 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009096:	647b      	str	r3, [r7, #68]	@ 0x44
 8009098:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800909c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e4      	bne.n	8009074 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3308      	adds	r3, #8
 80090b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	623b      	str	r3, [r7, #32]
   return(result);
 80090ba:	6a3a      	ldr	r2, [r7, #32]
 80090bc:	4b55      	ldr	r3, [pc, #340]	@ (8009214 <HAL_UART_IRQHandler+0x7a8>)
 80090be:	4013      	ands	r3, r2
 80090c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3308      	adds	r3, #8
 80090ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80090ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80090d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e3      	bne.n	80090aa <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	e853 3f00 	ldrex	r3, [r3]
 8009102:	60fb      	str	r3, [r7, #12]
   return(result);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0310 	bic.w	r3, r3, #16
 800910a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009118:	61fb      	str	r3, [r7, #28]
 800911a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	69b9      	ldr	r1, [r7, #24]
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	617b      	str	r3, [r7, #20]
   return(result);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e4      	bne.n	80090f6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009132:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f881 	bl	8009240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800913e:	e063      	b.n	8009208 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009144:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00e      	beq.n	800916a <HAL_UART_IRQHandler+0x6fe>
 800914c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009150:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d008      	beq.n	800916a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009160:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 ff84 	bl	800b070 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009168:	e051      	b.n	800920e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800916a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009172:	2b00      	cmp	r3, #0
 8009174:	d014      	beq.n	80091a0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800917a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800917e:	2b00      	cmp	r3, #0
 8009180:	d105      	bne.n	800918e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d008      	beq.n	80091a0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009192:	2b00      	cmp	r3, #0
 8009194:	d03a      	beq.n	800920c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
    }
    return;
 800919e:	e035      	b.n	800920c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d009      	beq.n	80091c0 <HAL_UART_IRQHandler+0x754>
 80091ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f001 fa0d 	bl	800a5d8 <UART_EndTransmit_IT>
    return;
 80091be:	e026      	b.n	800920e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80091c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d009      	beq.n	80091e0 <HAL_UART_IRQHandler+0x774>
 80091cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d003      	beq.n	80091e0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 ff5d 	bl	800b098 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091de:	e016      	b.n	800920e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80091e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d010      	beq.n	800920e <HAL_UART_IRQHandler+0x7a2>
 80091ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	da0c      	bge.n	800920e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 ff45 	bl	800b084 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091fa:	e008      	b.n	800920e <HAL_UART_IRQHandler+0x7a2>
      return;
 80091fc:	bf00      	nop
 80091fe:	e006      	b.n	800920e <HAL_UART_IRQHandler+0x7a2>
    return;
 8009200:	bf00      	nop
 8009202:	e004      	b.n	800920e <HAL_UART_IRQHandler+0x7a2>
      return;
 8009204:	bf00      	nop
 8009206:	e002      	b.n	800920e <HAL_UART_IRQHandler+0x7a2>
      return;
 8009208:	bf00      	nop
 800920a:	e000      	b.n	800920e <HAL_UART_IRQHandler+0x7a2>
    return;
 800920c:	bf00      	nop
  }
}
 800920e:	37e8      	adds	r7, #232	@ 0xe8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	effffffe 	.word	0xeffffffe

08009218 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800925c:	b092      	sub	sp, #72	@ 0x48
 800925e:	af00      	add	r7, sp, #0
 8009260:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	431a      	orrs	r2, r3
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	431a      	orrs	r2, r3
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	4313      	orrs	r3, r2
 800927e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	4bbe      	ldr	r3, [pc, #760]	@ (8009580 <UART_SetConfig+0x328>)
 8009288:	4013      	ands	r3, r2
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009290:	430b      	orrs	r3, r1
 8009292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4ab3      	ldr	r2, [pc, #716]	@ (8009584 <UART_SetConfig+0x32c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d004      	beq.n	80092c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092c0:	4313      	orrs	r3, r2
 80092c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	4baf      	ldr	r3, [pc, #700]	@ (8009588 <UART_SetConfig+0x330>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	6812      	ldr	r2, [r2, #0]
 80092d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092de:	f023 010f 	bic.w	r1, r3, #15
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4aa6      	ldr	r2, [pc, #664]	@ (800958c <UART_SetConfig+0x334>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d177      	bne.n	80093e8 <UART_SetConfig+0x190>
 80092f8:	4ba5      	ldr	r3, [pc, #660]	@ (8009590 <UART_SetConfig+0x338>)
 80092fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009300:	2b28      	cmp	r3, #40	@ 0x28
 8009302:	d86d      	bhi.n	80093e0 <UART_SetConfig+0x188>
 8009304:	a201      	add	r2, pc, #4	@ (adr r2, 800930c <UART_SetConfig+0xb4>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	080093b1 	.word	0x080093b1
 8009310:	080093e1 	.word	0x080093e1
 8009314:	080093e1 	.word	0x080093e1
 8009318:	080093e1 	.word	0x080093e1
 800931c:	080093e1 	.word	0x080093e1
 8009320:	080093e1 	.word	0x080093e1
 8009324:	080093e1 	.word	0x080093e1
 8009328:	080093e1 	.word	0x080093e1
 800932c:	080093b9 	.word	0x080093b9
 8009330:	080093e1 	.word	0x080093e1
 8009334:	080093e1 	.word	0x080093e1
 8009338:	080093e1 	.word	0x080093e1
 800933c:	080093e1 	.word	0x080093e1
 8009340:	080093e1 	.word	0x080093e1
 8009344:	080093e1 	.word	0x080093e1
 8009348:	080093e1 	.word	0x080093e1
 800934c:	080093c1 	.word	0x080093c1
 8009350:	080093e1 	.word	0x080093e1
 8009354:	080093e1 	.word	0x080093e1
 8009358:	080093e1 	.word	0x080093e1
 800935c:	080093e1 	.word	0x080093e1
 8009360:	080093e1 	.word	0x080093e1
 8009364:	080093e1 	.word	0x080093e1
 8009368:	080093e1 	.word	0x080093e1
 800936c:	080093c9 	.word	0x080093c9
 8009370:	080093e1 	.word	0x080093e1
 8009374:	080093e1 	.word	0x080093e1
 8009378:	080093e1 	.word	0x080093e1
 800937c:	080093e1 	.word	0x080093e1
 8009380:	080093e1 	.word	0x080093e1
 8009384:	080093e1 	.word	0x080093e1
 8009388:	080093e1 	.word	0x080093e1
 800938c:	080093d1 	.word	0x080093d1
 8009390:	080093e1 	.word	0x080093e1
 8009394:	080093e1 	.word	0x080093e1
 8009398:	080093e1 	.word	0x080093e1
 800939c:	080093e1 	.word	0x080093e1
 80093a0:	080093e1 	.word	0x080093e1
 80093a4:	080093e1 	.word	0x080093e1
 80093a8:	080093e1 	.word	0x080093e1
 80093ac:	080093d9 	.word	0x080093d9
 80093b0:	2301      	movs	r3, #1
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b6:	e326      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80093b8:	2304      	movs	r3, #4
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093be:	e322      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80093c0:	2308      	movs	r3, #8
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c6:	e31e      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80093c8:	2310      	movs	r3, #16
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e31a      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80093d0:	2320      	movs	r3, #32
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e316      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80093d8:	2340      	movs	r3, #64	@ 0x40
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e312      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80093e0:	2380      	movs	r3, #128	@ 0x80
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e30e      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a69      	ldr	r2, [pc, #420]	@ (8009594 <UART_SetConfig+0x33c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d130      	bne.n	8009454 <UART_SetConfig+0x1fc>
 80093f2:	4b67      	ldr	r3, [pc, #412]	@ (8009590 <UART_SetConfig+0x338>)
 80093f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093f6:	f003 0307 	and.w	r3, r3, #7
 80093fa:	2b05      	cmp	r3, #5
 80093fc:	d826      	bhi.n	800944c <UART_SetConfig+0x1f4>
 80093fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009404 <UART_SetConfig+0x1ac>)
 8009400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009404:	0800941d 	.word	0x0800941d
 8009408:	08009425 	.word	0x08009425
 800940c:	0800942d 	.word	0x0800942d
 8009410:	08009435 	.word	0x08009435
 8009414:	0800943d 	.word	0x0800943d
 8009418:	08009445 	.word	0x08009445
 800941c:	2300      	movs	r3, #0
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009422:	e2f0      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009424:	2304      	movs	r3, #4
 8009426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942a:	e2ec      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800942c:	2308      	movs	r3, #8
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009432:	e2e8      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009434:	2310      	movs	r3, #16
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e2e4      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800943c:	2320      	movs	r3, #32
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e2e0      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009444:	2340      	movs	r3, #64	@ 0x40
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e2dc      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800944c:	2380      	movs	r3, #128	@ 0x80
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e2d8      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a4f      	ldr	r2, [pc, #316]	@ (8009598 <UART_SetConfig+0x340>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d130      	bne.n	80094c0 <UART_SetConfig+0x268>
 800945e:	4b4c      	ldr	r3, [pc, #304]	@ (8009590 <UART_SetConfig+0x338>)
 8009460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	2b05      	cmp	r3, #5
 8009468:	d826      	bhi.n	80094b8 <UART_SetConfig+0x260>
 800946a:	a201      	add	r2, pc, #4	@ (adr r2, 8009470 <UART_SetConfig+0x218>)
 800946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009470:	08009489 	.word	0x08009489
 8009474:	08009491 	.word	0x08009491
 8009478:	08009499 	.word	0x08009499
 800947c:	080094a1 	.word	0x080094a1
 8009480:	080094a9 	.word	0x080094a9
 8009484:	080094b1 	.word	0x080094b1
 8009488:	2300      	movs	r3, #0
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948e:	e2ba      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009490:	2304      	movs	r3, #4
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009496:	e2b6      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009498:	2308      	movs	r3, #8
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949e:	e2b2      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80094a0:	2310      	movs	r3, #16
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e2ae      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80094a8:	2320      	movs	r3, #32
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e2aa      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80094b0:	2340      	movs	r3, #64	@ 0x40
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e2a6      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80094b8:	2380      	movs	r3, #128	@ 0x80
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e2a2      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a35      	ldr	r2, [pc, #212]	@ (800959c <UART_SetConfig+0x344>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d130      	bne.n	800952c <UART_SetConfig+0x2d4>
 80094ca:	4b31      	ldr	r3, [pc, #196]	@ (8009590 <UART_SetConfig+0x338>)
 80094cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	2b05      	cmp	r3, #5
 80094d4:	d826      	bhi.n	8009524 <UART_SetConfig+0x2cc>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <UART_SetConfig+0x284>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	080094f5 	.word	0x080094f5
 80094e0:	080094fd 	.word	0x080094fd
 80094e4:	08009505 	.word	0x08009505
 80094e8:	0800950d 	.word	0x0800950d
 80094ec:	08009515 	.word	0x08009515
 80094f0:	0800951d 	.word	0x0800951d
 80094f4:	2300      	movs	r3, #0
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fa:	e284      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80094fc:	2304      	movs	r3, #4
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009502:	e280      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009504:	2308      	movs	r3, #8
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950a:	e27c      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800950c:	2310      	movs	r3, #16
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e278      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009514:	2320      	movs	r3, #32
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e274      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800951c:	2340      	movs	r3, #64	@ 0x40
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e270      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009524:	2380      	movs	r3, #128	@ 0x80
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e26c      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1b      	ldr	r2, [pc, #108]	@ (80095a0 <UART_SetConfig+0x348>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d142      	bne.n	80095bc <UART_SetConfig+0x364>
 8009536:	4b16      	ldr	r3, [pc, #88]	@ (8009590 <UART_SetConfig+0x338>)
 8009538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	2b05      	cmp	r3, #5
 8009540:	d838      	bhi.n	80095b4 <UART_SetConfig+0x35c>
 8009542:	a201      	add	r2, pc, #4	@ (adr r2, 8009548 <UART_SetConfig+0x2f0>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	08009561 	.word	0x08009561
 800954c:	08009569 	.word	0x08009569
 8009550:	08009571 	.word	0x08009571
 8009554:	08009579 	.word	0x08009579
 8009558:	080095a5 	.word	0x080095a5
 800955c:	080095ad 	.word	0x080095ad
 8009560:	2300      	movs	r3, #0
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e24e      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009568:	2304      	movs	r3, #4
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e24a      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009570:	2308      	movs	r3, #8
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e246      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009578:	2310      	movs	r3, #16
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e242      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009580:	cfff69f3 	.word	0xcfff69f3
 8009584:	58000c00 	.word	0x58000c00
 8009588:	11fff4ff 	.word	0x11fff4ff
 800958c:	40011000 	.word	0x40011000
 8009590:	58024400 	.word	0x58024400
 8009594:	40004400 	.word	0x40004400
 8009598:	40004800 	.word	0x40004800
 800959c:	40004c00 	.word	0x40004c00
 80095a0:	40005000 	.word	0x40005000
 80095a4:	2320      	movs	r3, #32
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095aa:	e22c      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80095ac:	2340      	movs	r3, #64	@ 0x40
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b2:	e228      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80095b4:	2380      	movs	r3, #128	@ 0x80
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ba:	e224      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4ab1      	ldr	r2, [pc, #708]	@ (8009888 <UART_SetConfig+0x630>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d176      	bne.n	80096b4 <UART_SetConfig+0x45c>
 80095c6:	4bb1      	ldr	r3, [pc, #708]	@ (800988c <UART_SetConfig+0x634>)
 80095c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095ce:	2b28      	cmp	r3, #40	@ 0x28
 80095d0:	d86c      	bhi.n	80096ac <UART_SetConfig+0x454>
 80095d2:	a201      	add	r2, pc, #4	@ (adr r2, 80095d8 <UART_SetConfig+0x380>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	0800967d 	.word	0x0800967d
 80095dc:	080096ad 	.word	0x080096ad
 80095e0:	080096ad 	.word	0x080096ad
 80095e4:	080096ad 	.word	0x080096ad
 80095e8:	080096ad 	.word	0x080096ad
 80095ec:	080096ad 	.word	0x080096ad
 80095f0:	080096ad 	.word	0x080096ad
 80095f4:	080096ad 	.word	0x080096ad
 80095f8:	08009685 	.word	0x08009685
 80095fc:	080096ad 	.word	0x080096ad
 8009600:	080096ad 	.word	0x080096ad
 8009604:	080096ad 	.word	0x080096ad
 8009608:	080096ad 	.word	0x080096ad
 800960c:	080096ad 	.word	0x080096ad
 8009610:	080096ad 	.word	0x080096ad
 8009614:	080096ad 	.word	0x080096ad
 8009618:	0800968d 	.word	0x0800968d
 800961c:	080096ad 	.word	0x080096ad
 8009620:	080096ad 	.word	0x080096ad
 8009624:	080096ad 	.word	0x080096ad
 8009628:	080096ad 	.word	0x080096ad
 800962c:	080096ad 	.word	0x080096ad
 8009630:	080096ad 	.word	0x080096ad
 8009634:	080096ad 	.word	0x080096ad
 8009638:	08009695 	.word	0x08009695
 800963c:	080096ad 	.word	0x080096ad
 8009640:	080096ad 	.word	0x080096ad
 8009644:	080096ad 	.word	0x080096ad
 8009648:	080096ad 	.word	0x080096ad
 800964c:	080096ad 	.word	0x080096ad
 8009650:	080096ad 	.word	0x080096ad
 8009654:	080096ad 	.word	0x080096ad
 8009658:	0800969d 	.word	0x0800969d
 800965c:	080096ad 	.word	0x080096ad
 8009660:	080096ad 	.word	0x080096ad
 8009664:	080096ad 	.word	0x080096ad
 8009668:	080096ad 	.word	0x080096ad
 800966c:	080096ad 	.word	0x080096ad
 8009670:	080096ad 	.word	0x080096ad
 8009674:	080096ad 	.word	0x080096ad
 8009678:	080096a5 	.word	0x080096a5
 800967c:	2301      	movs	r3, #1
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009682:	e1c0      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009684:	2304      	movs	r3, #4
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968a:	e1bc      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800968c:	2308      	movs	r3, #8
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009692:	e1b8      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009694:	2310      	movs	r3, #16
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e1b4      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800969c:	2320      	movs	r3, #32
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e1b0      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80096a4:	2340      	movs	r3, #64	@ 0x40
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e1ac      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80096ac:	2380      	movs	r3, #128	@ 0x80
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e1a8      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a75      	ldr	r2, [pc, #468]	@ (8009890 <UART_SetConfig+0x638>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d130      	bne.n	8009720 <UART_SetConfig+0x4c8>
 80096be:	4b73      	ldr	r3, [pc, #460]	@ (800988c <UART_SetConfig+0x634>)
 80096c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	2b05      	cmp	r3, #5
 80096c8:	d826      	bhi.n	8009718 <UART_SetConfig+0x4c0>
 80096ca:	a201      	add	r2, pc, #4	@ (adr r2, 80096d0 <UART_SetConfig+0x478>)
 80096cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d0:	080096e9 	.word	0x080096e9
 80096d4:	080096f1 	.word	0x080096f1
 80096d8:	080096f9 	.word	0x080096f9
 80096dc:	08009701 	.word	0x08009701
 80096e0:	08009709 	.word	0x08009709
 80096e4:	08009711 	.word	0x08009711
 80096e8:	2300      	movs	r3, #0
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ee:	e18a      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80096f0:	2304      	movs	r3, #4
 80096f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f6:	e186      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80096f8:	2308      	movs	r3, #8
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fe:	e182      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009700:	2310      	movs	r3, #16
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e17e      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009708:	2320      	movs	r3, #32
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e17a      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009710:	2340      	movs	r3, #64	@ 0x40
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e176      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009718:	2380      	movs	r3, #128	@ 0x80
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e172      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a5b      	ldr	r2, [pc, #364]	@ (8009894 <UART_SetConfig+0x63c>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d130      	bne.n	800978c <UART_SetConfig+0x534>
 800972a:	4b58      	ldr	r3, [pc, #352]	@ (800988c <UART_SetConfig+0x634>)
 800972c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	2b05      	cmp	r3, #5
 8009734:	d826      	bhi.n	8009784 <UART_SetConfig+0x52c>
 8009736:	a201      	add	r2, pc, #4	@ (adr r2, 800973c <UART_SetConfig+0x4e4>)
 8009738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973c:	08009755 	.word	0x08009755
 8009740:	0800975d 	.word	0x0800975d
 8009744:	08009765 	.word	0x08009765
 8009748:	0800976d 	.word	0x0800976d
 800974c:	08009775 	.word	0x08009775
 8009750:	0800977d 	.word	0x0800977d
 8009754:	2300      	movs	r3, #0
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975a:	e154      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800975c:	2304      	movs	r3, #4
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009762:	e150      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009764:	2308      	movs	r3, #8
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976a:	e14c      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800976c:	2310      	movs	r3, #16
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e148      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009774:	2320      	movs	r3, #32
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e144      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800977c:	2340      	movs	r3, #64	@ 0x40
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e140      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009784:	2380      	movs	r3, #128	@ 0x80
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e13c      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a41      	ldr	r2, [pc, #260]	@ (8009898 <UART_SetConfig+0x640>)
 8009792:	4293      	cmp	r3, r2
 8009794:	f040 8082 	bne.w	800989c <UART_SetConfig+0x644>
 8009798:	4b3c      	ldr	r3, [pc, #240]	@ (800988c <UART_SetConfig+0x634>)
 800979a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800979c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097a0:	2b28      	cmp	r3, #40	@ 0x28
 80097a2:	d86d      	bhi.n	8009880 <UART_SetConfig+0x628>
 80097a4:	a201      	add	r2, pc, #4	@ (adr r2, 80097ac <UART_SetConfig+0x554>)
 80097a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097aa:	bf00      	nop
 80097ac:	08009851 	.word	0x08009851
 80097b0:	08009881 	.word	0x08009881
 80097b4:	08009881 	.word	0x08009881
 80097b8:	08009881 	.word	0x08009881
 80097bc:	08009881 	.word	0x08009881
 80097c0:	08009881 	.word	0x08009881
 80097c4:	08009881 	.word	0x08009881
 80097c8:	08009881 	.word	0x08009881
 80097cc:	08009859 	.word	0x08009859
 80097d0:	08009881 	.word	0x08009881
 80097d4:	08009881 	.word	0x08009881
 80097d8:	08009881 	.word	0x08009881
 80097dc:	08009881 	.word	0x08009881
 80097e0:	08009881 	.word	0x08009881
 80097e4:	08009881 	.word	0x08009881
 80097e8:	08009881 	.word	0x08009881
 80097ec:	08009861 	.word	0x08009861
 80097f0:	08009881 	.word	0x08009881
 80097f4:	08009881 	.word	0x08009881
 80097f8:	08009881 	.word	0x08009881
 80097fc:	08009881 	.word	0x08009881
 8009800:	08009881 	.word	0x08009881
 8009804:	08009881 	.word	0x08009881
 8009808:	08009881 	.word	0x08009881
 800980c:	08009869 	.word	0x08009869
 8009810:	08009881 	.word	0x08009881
 8009814:	08009881 	.word	0x08009881
 8009818:	08009881 	.word	0x08009881
 800981c:	08009881 	.word	0x08009881
 8009820:	08009881 	.word	0x08009881
 8009824:	08009881 	.word	0x08009881
 8009828:	08009881 	.word	0x08009881
 800982c:	08009871 	.word	0x08009871
 8009830:	08009881 	.word	0x08009881
 8009834:	08009881 	.word	0x08009881
 8009838:	08009881 	.word	0x08009881
 800983c:	08009881 	.word	0x08009881
 8009840:	08009881 	.word	0x08009881
 8009844:	08009881 	.word	0x08009881
 8009848:	08009881 	.word	0x08009881
 800984c:	08009879 	.word	0x08009879
 8009850:	2301      	movs	r3, #1
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e0d6      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009858:	2304      	movs	r3, #4
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e0d2      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009860:	2308      	movs	r3, #8
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e0ce      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009868:	2310      	movs	r3, #16
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e0ca      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009870:	2320      	movs	r3, #32
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009876:	e0c6      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009878:	2340      	movs	r3, #64	@ 0x40
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987e:	e0c2      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009880:	2380      	movs	r3, #128	@ 0x80
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009886:	e0be      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009888:	40011400 	.word	0x40011400
 800988c:	58024400 	.word	0x58024400
 8009890:	40007800 	.word	0x40007800
 8009894:	40007c00 	.word	0x40007c00
 8009898:	40011800 	.word	0x40011800
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4aad      	ldr	r2, [pc, #692]	@ (8009b58 <UART_SetConfig+0x900>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d176      	bne.n	8009994 <UART_SetConfig+0x73c>
 80098a6:	4bad      	ldr	r3, [pc, #692]	@ (8009b5c <UART_SetConfig+0x904>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098ae:	2b28      	cmp	r3, #40	@ 0x28
 80098b0:	d86c      	bhi.n	800998c <UART_SetConfig+0x734>
 80098b2:	a201      	add	r2, pc, #4	@ (adr r2, 80098b8 <UART_SetConfig+0x660>)
 80098b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b8:	0800995d 	.word	0x0800995d
 80098bc:	0800998d 	.word	0x0800998d
 80098c0:	0800998d 	.word	0x0800998d
 80098c4:	0800998d 	.word	0x0800998d
 80098c8:	0800998d 	.word	0x0800998d
 80098cc:	0800998d 	.word	0x0800998d
 80098d0:	0800998d 	.word	0x0800998d
 80098d4:	0800998d 	.word	0x0800998d
 80098d8:	08009965 	.word	0x08009965
 80098dc:	0800998d 	.word	0x0800998d
 80098e0:	0800998d 	.word	0x0800998d
 80098e4:	0800998d 	.word	0x0800998d
 80098e8:	0800998d 	.word	0x0800998d
 80098ec:	0800998d 	.word	0x0800998d
 80098f0:	0800998d 	.word	0x0800998d
 80098f4:	0800998d 	.word	0x0800998d
 80098f8:	0800996d 	.word	0x0800996d
 80098fc:	0800998d 	.word	0x0800998d
 8009900:	0800998d 	.word	0x0800998d
 8009904:	0800998d 	.word	0x0800998d
 8009908:	0800998d 	.word	0x0800998d
 800990c:	0800998d 	.word	0x0800998d
 8009910:	0800998d 	.word	0x0800998d
 8009914:	0800998d 	.word	0x0800998d
 8009918:	08009975 	.word	0x08009975
 800991c:	0800998d 	.word	0x0800998d
 8009920:	0800998d 	.word	0x0800998d
 8009924:	0800998d 	.word	0x0800998d
 8009928:	0800998d 	.word	0x0800998d
 800992c:	0800998d 	.word	0x0800998d
 8009930:	0800998d 	.word	0x0800998d
 8009934:	0800998d 	.word	0x0800998d
 8009938:	0800997d 	.word	0x0800997d
 800993c:	0800998d 	.word	0x0800998d
 8009940:	0800998d 	.word	0x0800998d
 8009944:	0800998d 	.word	0x0800998d
 8009948:	0800998d 	.word	0x0800998d
 800994c:	0800998d 	.word	0x0800998d
 8009950:	0800998d 	.word	0x0800998d
 8009954:	0800998d 	.word	0x0800998d
 8009958:	08009985 	.word	0x08009985
 800995c:	2301      	movs	r3, #1
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e050      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009964:	2304      	movs	r3, #4
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996a:	e04c      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800996c:	2308      	movs	r3, #8
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009972:	e048      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009974:	2310      	movs	r3, #16
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997a:	e044      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800997c:	2320      	movs	r3, #32
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e040      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009984:	2340      	movs	r3, #64	@ 0x40
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e03c      	b.n	8009a06 <UART_SetConfig+0x7ae>
 800998c:	2380      	movs	r3, #128	@ 0x80
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e038      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a71      	ldr	r2, [pc, #452]	@ (8009b60 <UART_SetConfig+0x908>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d130      	bne.n	8009a00 <UART_SetConfig+0x7a8>
 800999e:	4b6f      	ldr	r3, [pc, #444]	@ (8009b5c <UART_SetConfig+0x904>)
 80099a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a2:	f003 0307 	and.w	r3, r3, #7
 80099a6:	2b05      	cmp	r3, #5
 80099a8:	d826      	bhi.n	80099f8 <UART_SetConfig+0x7a0>
 80099aa:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <UART_SetConfig+0x758>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	080099c9 	.word	0x080099c9
 80099b4:	080099d1 	.word	0x080099d1
 80099b8:	080099d9 	.word	0x080099d9
 80099bc:	080099e1 	.word	0x080099e1
 80099c0:	080099e9 	.word	0x080099e9
 80099c4:	080099f1 	.word	0x080099f1
 80099c8:	2302      	movs	r3, #2
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ce:	e01a      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80099d0:	2304      	movs	r3, #4
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e016      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80099d8:	2308      	movs	r3, #8
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e012      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80099e0:	2310      	movs	r3, #16
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e00e      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80099e8:	2320      	movs	r3, #32
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e00a      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80099f0:	2340      	movs	r3, #64	@ 0x40
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e006      	b.n	8009a06 <UART_SetConfig+0x7ae>
 80099f8:	2380      	movs	r3, #128	@ 0x80
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fe:	e002      	b.n	8009a06 <UART_SetConfig+0x7ae>
 8009a00:	2380      	movs	r3, #128	@ 0x80
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a55      	ldr	r2, [pc, #340]	@ (8009b60 <UART_SetConfig+0x908>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	f040 80f8 	bne.w	8009c02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a16:	2b20      	cmp	r3, #32
 8009a18:	dc46      	bgt.n	8009aa8 <UART_SetConfig+0x850>
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	db75      	blt.n	8009b0a <UART_SetConfig+0x8b2>
 8009a1e:	3b02      	subs	r3, #2
 8009a20:	2b1e      	cmp	r3, #30
 8009a22:	d872      	bhi.n	8009b0a <UART_SetConfig+0x8b2>
 8009a24:	a201      	add	r2, pc, #4	@ (adr r2, 8009a2c <UART_SetConfig+0x7d4>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009aaf 	.word	0x08009aaf
 8009a30:	08009b0b 	.word	0x08009b0b
 8009a34:	08009ab7 	.word	0x08009ab7
 8009a38:	08009b0b 	.word	0x08009b0b
 8009a3c:	08009b0b 	.word	0x08009b0b
 8009a40:	08009b0b 	.word	0x08009b0b
 8009a44:	08009ac7 	.word	0x08009ac7
 8009a48:	08009b0b 	.word	0x08009b0b
 8009a4c:	08009b0b 	.word	0x08009b0b
 8009a50:	08009b0b 	.word	0x08009b0b
 8009a54:	08009b0b 	.word	0x08009b0b
 8009a58:	08009b0b 	.word	0x08009b0b
 8009a5c:	08009b0b 	.word	0x08009b0b
 8009a60:	08009b0b 	.word	0x08009b0b
 8009a64:	08009ad7 	.word	0x08009ad7
 8009a68:	08009b0b 	.word	0x08009b0b
 8009a6c:	08009b0b 	.word	0x08009b0b
 8009a70:	08009b0b 	.word	0x08009b0b
 8009a74:	08009b0b 	.word	0x08009b0b
 8009a78:	08009b0b 	.word	0x08009b0b
 8009a7c:	08009b0b 	.word	0x08009b0b
 8009a80:	08009b0b 	.word	0x08009b0b
 8009a84:	08009b0b 	.word	0x08009b0b
 8009a88:	08009b0b 	.word	0x08009b0b
 8009a8c:	08009b0b 	.word	0x08009b0b
 8009a90:	08009b0b 	.word	0x08009b0b
 8009a94:	08009b0b 	.word	0x08009b0b
 8009a98:	08009b0b 	.word	0x08009b0b
 8009a9c:	08009b0b 	.word	0x08009b0b
 8009aa0:	08009b0b 	.word	0x08009b0b
 8009aa4:	08009afd 	.word	0x08009afd
 8009aa8:	2b40      	cmp	r3, #64	@ 0x40
 8009aaa:	d02a      	beq.n	8009b02 <UART_SetConfig+0x8aa>
 8009aac:	e02d      	b.n	8009b0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009aae:	f7fd fb39 	bl	8007124 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ab2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ab4:	e02f      	b.n	8009b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fd fb48 	bl	8007150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac4:	e027      	b.n	8009b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ac6:	f107 0318 	add.w	r3, r7, #24
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fd fc94 	bl	80073f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad4:	e01f      	b.n	8009b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad6:	4b21      	ldr	r3, [pc, #132]	@ (8009b5c <UART_SetConfig+0x904>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d009      	beq.n	8009af6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b5c <UART_SetConfig+0x904>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	08db      	lsrs	r3, r3, #3
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	4a1d      	ldr	r2, [pc, #116]	@ (8009b64 <UART_SetConfig+0x90c>)
 8009aee:	fa22 f303 	lsr.w	r3, r2, r3
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009af4:	e00f      	b.n	8009b16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009af6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b64 <UART_SetConfig+0x90c>)
 8009af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afa:	e00c      	b.n	8009b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009afc:	4b1a      	ldr	r3, [pc, #104]	@ (8009b68 <UART_SetConfig+0x910>)
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b00:	e009      	b.n	8009b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b08:	e005      	b.n	8009b16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 81ee 	beq.w	8009efa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b22:	4a12      	ldr	r2, [pc, #72]	@ (8009b6c <UART_SetConfig+0x914>)
 8009b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b30:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	4613      	mov	r3, r2
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	4413      	add	r3, r2
 8009b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d305      	bcc.n	8009b4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d910      	bls.n	8009b70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b54:	e1d1      	b.n	8009efa <UART_SetConfig+0xca2>
 8009b56:	bf00      	nop
 8009b58:	40011c00 	.word	0x40011c00
 8009b5c:	58024400 	.word	0x58024400
 8009b60:	58000c00 	.word	0x58000c00
 8009b64:	03d09000 	.word	0x03d09000
 8009b68:	003d0900 	.word	0x003d0900
 8009b6c:	0800e720 	.word	0x0800e720
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b72:	2200      	movs	r2, #0
 8009b74:	60bb      	str	r3, [r7, #8]
 8009b76:	60fa      	str	r2, [r7, #12]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b7c:	4ac0      	ldr	r2, [pc, #768]	@ (8009e80 <UART_SetConfig+0xc28>)
 8009b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	2200      	movs	r2, #0
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	607a      	str	r2, [r7, #4]
 8009b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b92:	f7f6 fc25 	bl	80003e0 <__aeabi_uldivmod>
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	020b      	lsls	r3, r1, #8
 8009ba8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bac:	0202      	lsls	r2, r0, #8
 8009bae:	6979      	ldr	r1, [r7, #20]
 8009bb0:	6849      	ldr	r1, [r1, #4]
 8009bb2:	0849      	lsrs	r1, r1, #1
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	4605      	mov	r5, r0
 8009bba:	eb12 0804 	adds.w	r8, r2, r4
 8009bbe:	eb43 0905 	adc.w	r9, r3, r5
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	469a      	mov	sl, r3
 8009bca:	4693      	mov	fp, r2
 8009bcc:	4652      	mov	r2, sl
 8009bce:	465b      	mov	r3, fp
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	f7f6 fc04 	bl	80003e0 <__aeabi_uldivmod>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4613      	mov	r3, r2
 8009bde:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009be6:	d308      	bcc.n	8009bfa <UART_SetConfig+0x9a2>
 8009be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bee:	d204      	bcs.n	8009bfa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bf6:	60da      	str	r2, [r3, #12]
 8009bf8:	e17f      	b.n	8009efa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c00:	e17b      	b.n	8009efa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c0a:	f040 80bd 	bne.w	8009d88 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009c0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	dc48      	bgt.n	8009ca8 <UART_SetConfig+0xa50>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	db7b      	blt.n	8009d12 <UART_SetConfig+0xaba>
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d879      	bhi.n	8009d12 <UART_SetConfig+0xaba>
 8009c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <UART_SetConfig+0x9cc>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009caf 	.word	0x08009caf
 8009c28:	08009cb7 	.word	0x08009cb7
 8009c2c:	08009d13 	.word	0x08009d13
 8009c30:	08009d13 	.word	0x08009d13
 8009c34:	08009cbf 	.word	0x08009cbf
 8009c38:	08009d13 	.word	0x08009d13
 8009c3c:	08009d13 	.word	0x08009d13
 8009c40:	08009d13 	.word	0x08009d13
 8009c44:	08009ccf 	.word	0x08009ccf
 8009c48:	08009d13 	.word	0x08009d13
 8009c4c:	08009d13 	.word	0x08009d13
 8009c50:	08009d13 	.word	0x08009d13
 8009c54:	08009d13 	.word	0x08009d13
 8009c58:	08009d13 	.word	0x08009d13
 8009c5c:	08009d13 	.word	0x08009d13
 8009c60:	08009d13 	.word	0x08009d13
 8009c64:	08009cdf 	.word	0x08009cdf
 8009c68:	08009d13 	.word	0x08009d13
 8009c6c:	08009d13 	.word	0x08009d13
 8009c70:	08009d13 	.word	0x08009d13
 8009c74:	08009d13 	.word	0x08009d13
 8009c78:	08009d13 	.word	0x08009d13
 8009c7c:	08009d13 	.word	0x08009d13
 8009c80:	08009d13 	.word	0x08009d13
 8009c84:	08009d13 	.word	0x08009d13
 8009c88:	08009d13 	.word	0x08009d13
 8009c8c:	08009d13 	.word	0x08009d13
 8009c90:	08009d13 	.word	0x08009d13
 8009c94:	08009d13 	.word	0x08009d13
 8009c98:	08009d13 	.word	0x08009d13
 8009c9c:	08009d13 	.word	0x08009d13
 8009ca0:	08009d13 	.word	0x08009d13
 8009ca4:	08009d05 	.word	0x08009d05
 8009ca8:	2b40      	cmp	r3, #64	@ 0x40
 8009caa:	d02e      	beq.n	8009d0a <UART_SetConfig+0xab2>
 8009cac:	e031      	b.n	8009d12 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cae:	f7fc f86d 	bl	8005d8c <HAL_RCC_GetPCLK1Freq>
 8009cb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cb4:	e033      	b.n	8009d1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cb6:	f7fc f87f 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 8009cba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cbc:	e02f      	b.n	8009d1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fd fa44 	bl	8007150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ccc:	e027      	b.n	8009d1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cce:	f107 0318 	add.w	r3, r7, #24
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fd fb90 	bl	80073f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cdc:	e01f      	b.n	8009d1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cde:	4b69      	ldr	r3, [pc, #420]	@ (8009e84 <UART_SetConfig+0xc2c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0320 	and.w	r3, r3, #32
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d009      	beq.n	8009cfe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cea:	4b66      	ldr	r3, [pc, #408]	@ (8009e84 <UART_SetConfig+0xc2c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	08db      	lsrs	r3, r3, #3
 8009cf0:	f003 0303 	and.w	r3, r3, #3
 8009cf4:	4a64      	ldr	r2, [pc, #400]	@ (8009e88 <UART_SetConfig+0xc30>)
 8009cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cfc:	e00f      	b.n	8009d1e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009cfe:	4b62      	ldr	r3, [pc, #392]	@ (8009e88 <UART_SetConfig+0xc30>)
 8009d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d02:	e00c      	b.n	8009d1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d04:	4b61      	ldr	r3, [pc, #388]	@ (8009e8c <UART_SetConfig+0xc34>)
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d08:	e009      	b.n	8009d1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d10:	e005      	b.n	8009d1e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 80ea 	beq.w	8009efa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2a:	4a55      	ldr	r2, [pc, #340]	@ (8009e80 <UART_SetConfig+0xc28>)
 8009d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d30:	461a      	mov	r2, r3
 8009d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d38:	005a      	lsls	r2, r3, #1
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	085b      	lsrs	r3, r3, #1
 8009d40:	441a      	add	r2, r3
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4e:	2b0f      	cmp	r3, #15
 8009d50:	d916      	bls.n	8009d80 <UART_SetConfig+0xb28>
 8009d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d58:	d212      	bcs.n	8009d80 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f023 030f 	bic.w	r3, r3, #15
 8009d62:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d66:	085b      	lsrs	r3, r3, #1
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d72:	4313      	orrs	r3, r2
 8009d74:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d7c:	60da      	str	r2, [r3, #12]
 8009d7e:	e0bc      	b.n	8009efa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d86:	e0b8      	b.n	8009efa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	dc4b      	bgt.n	8009e28 <UART_SetConfig+0xbd0>
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f2c0 8087 	blt.w	8009ea4 <UART_SetConfig+0xc4c>
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	f200 8084 	bhi.w	8009ea4 <UART_SetConfig+0xc4c>
 8009d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009da4 <UART_SetConfig+0xb4c>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009e2f 	.word	0x08009e2f
 8009da8:	08009e37 	.word	0x08009e37
 8009dac:	08009ea5 	.word	0x08009ea5
 8009db0:	08009ea5 	.word	0x08009ea5
 8009db4:	08009e3f 	.word	0x08009e3f
 8009db8:	08009ea5 	.word	0x08009ea5
 8009dbc:	08009ea5 	.word	0x08009ea5
 8009dc0:	08009ea5 	.word	0x08009ea5
 8009dc4:	08009e4f 	.word	0x08009e4f
 8009dc8:	08009ea5 	.word	0x08009ea5
 8009dcc:	08009ea5 	.word	0x08009ea5
 8009dd0:	08009ea5 	.word	0x08009ea5
 8009dd4:	08009ea5 	.word	0x08009ea5
 8009dd8:	08009ea5 	.word	0x08009ea5
 8009ddc:	08009ea5 	.word	0x08009ea5
 8009de0:	08009ea5 	.word	0x08009ea5
 8009de4:	08009e5f 	.word	0x08009e5f
 8009de8:	08009ea5 	.word	0x08009ea5
 8009dec:	08009ea5 	.word	0x08009ea5
 8009df0:	08009ea5 	.word	0x08009ea5
 8009df4:	08009ea5 	.word	0x08009ea5
 8009df8:	08009ea5 	.word	0x08009ea5
 8009dfc:	08009ea5 	.word	0x08009ea5
 8009e00:	08009ea5 	.word	0x08009ea5
 8009e04:	08009ea5 	.word	0x08009ea5
 8009e08:	08009ea5 	.word	0x08009ea5
 8009e0c:	08009ea5 	.word	0x08009ea5
 8009e10:	08009ea5 	.word	0x08009ea5
 8009e14:	08009ea5 	.word	0x08009ea5
 8009e18:	08009ea5 	.word	0x08009ea5
 8009e1c:	08009ea5 	.word	0x08009ea5
 8009e20:	08009ea5 	.word	0x08009ea5
 8009e24:	08009e97 	.word	0x08009e97
 8009e28:	2b40      	cmp	r3, #64	@ 0x40
 8009e2a:	d037      	beq.n	8009e9c <UART_SetConfig+0xc44>
 8009e2c:	e03a      	b.n	8009ea4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e2e:	f7fb ffad 	bl	8005d8c <HAL_RCC_GetPCLK1Freq>
 8009e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e34:	e03c      	b.n	8009eb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e36:	f7fb ffbf 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 8009e3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e3c:	e038      	b.n	8009eb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fd f984 	bl	8007150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4c:	e030      	b.n	8009eb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e4e:	f107 0318 	add.w	r3, r7, #24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fd fad0 	bl	80073f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e5c:	e028      	b.n	8009eb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e5e:	4b09      	ldr	r3, [pc, #36]	@ (8009e84 <UART_SetConfig+0xc2c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0320 	and.w	r3, r3, #32
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d012      	beq.n	8009e90 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e6a:	4b06      	ldr	r3, [pc, #24]	@ (8009e84 <UART_SetConfig+0xc2c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	08db      	lsrs	r3, r3, #3
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	4a04      	ldr	r2, [pc, #16]	@ (8009e88 <UART_SetConfig+0xc30>)
 8009e76:	fa22 f303 	lsr.w	r3, r2, r3
 8009e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e7c:	e018      	b.n	8009eb0 <UART_SetConfig+0xc58>
 8009e7e:	bf00      	nop
 8009e80:	0800e720 	.word	0x0800e720
 8009e84:	58024400 	.word	0x58024400
 8009e88:	03d09000 	.word	0x03d09000
 8009e8c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009e90:	4b24      	ldr	r3, [pc, #144]	@ (8009f24 <UART_SetConfig+0xccc>)
 8009e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e94:	e00c      	b.n	8009eb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e96:	4b24      	ldr	r3, [pc, #144]	@ (8009f28 <UART_SetConfig+0xcd0>)
 8009e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e9a:	e009      	b.n	8009eb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea2:	e005      	b.n	8009eb0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009eae:	bf00      	nop
    }

    if (pclk != 0U)
 8009eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d021      	beq.n	8009efa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eba:	4a1c      	ldr	r2, [pc, #112]	@ (8009f2c <UART_SetConfig+0xcd4>)
 8009ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	085b      	lsrs	r3, r3, #1
 8009ece:	441a      	add	r2, r3
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009edc:	2b0f      	cmp	r3, #15
 8009ede:	d909      	bls.n	8009ef4 <UART_SetConfig+0xc9c>
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ee6:	d205      	bcs.n	8009ef4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	60da      	str	r2, [r3, #12]
 8009ef2:	e002      	b.n	8009efa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2200      	movs	r2, #0
 8009f14:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f16:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3748      	adds	r7, #72	@ 0x48
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f24:	03d09000 	.word	0x03d09000
 8009f28:	003d0900 	.word	0x003d0900
 8009f2c:	0800e720 	.word	0x0800e720

08009f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3c:	f003 0308 	and.w	r3, r3, #8
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00a      	beq.n	8009f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5e:	f003 0301 	and.w	r3, r3, #1
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f80:	f003 0302 	and.w	r3, r3, #2
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00a      	beq.n	8009f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa2:	f003 0304 	and.w	r3, r3, #4
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc4:	f003 0310 	and.w	r3, r3, #16
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00a      	beq.n	8009fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe6:	f003 0320 	and.w	r3, r3, #32
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00a      	beq.n	800a004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	430a      	orrs	r2, r1
 800a002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01a      	beq.n	800a046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a02e:	d10a      	bne.n	800a046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	605a      	str	r2, [r3, #4]
  }
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b098      	sub	sp, #96	@ 0x60
 800a078:	af02      	add	r7, sp, #8
 800a07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a084:	f7f9 f80c 	bl	80030a0 <HAL_GetTick>
 800a088:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0308 	and.w	r3, r3, #8
 800a094:	2b08      	cmp	r3, #8
 800a096:	d12f      	bne.n	800a0f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a098:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f88e 	bl	800a1c8 <UART_WaitOnFlagUntilTimeout>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d022      	beq.n	800a0f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0d8:	e841 2300 	strex	r3, r2, [r1]
 800a0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e6      	bne.n	800a0b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e063      	b.n	800a1c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0304 	and.w	r3, r3, #4
 800a102:	2b04      	cmp	r3, #4
 800a104:	d149      	bne.n	800a19a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a106:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a10e:	2200      	movs	r2, #0
 800a110:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f857 	bl	800a1c8 <UART_WaitOnFlagUntilTimeout>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d03c      	beq.n	800a19a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	e853 3f00 	ldrex	r3, [r3]
 800a12c:	623b      	str	r3, [r7, #32]
   return(result);
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a134:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a13e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a140:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e6      	bne.n	800a120 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3308      	adds	r3, #8
 800a158:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	60fb      	str	r3, [r7, #12]
   return(result);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f023 0301 	bic.w	r3, r3, #1
 800a168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3308      	adds	r3, #8
 800a170:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a172:	61fa      	str	r2, [r7, #28]
 800a174:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a176:	69b9      	ldr	r1, [r7, #24]
 800a178:	69fa      	ldr	r2, [r7, #28]
 800a17a:	e841 2300 	strex	r3, r2, [r1]
 800a17e:	617b      	str	r3, [r7, #20]
   return(result);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e5      	bne.n	800a152 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2220      	movs	r2, #32
 800a18a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e012      	b.n	800a1c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2220      	movs	r2, #32
 800a19e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3758      	adds	r7, #88	@ 0x58
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1d8:	e04f      	b.n	800a27a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1e0:	d04b      	beq.n	800a27a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1e2:	f7f8 ff5d 	bl	80030a0 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d302      	bcc.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e04e      	b.n	800a29a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b00      	cmp	r3, #0
 800a208:	d037      	beq.n	800a27a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	2b80      	cmp	r3, #128	@ 0x80
 800a20e:	d034      	beq.n	800a27a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2b40      	cmp	r3, #64	@ 0x40
 800a214:	d031      	beq.n	800a27a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	f003 0308 	and.w	r3, r3, #8
 800a220:	2b08      	cmp	r3, #8
 800a222:	d110      	bne.n	800a246 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2208      	movs	r2, #8
 800a22a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f95b 	bl	800a4e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2208      	movs	r2, #8
 800a236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e029      	b.n	800a29a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a254:	d111      	bne.n	800a27a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a25e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 f941 	bl	800a4e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e00f      	b.n	800a29a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69da      	ldr	r2, [r3, #28]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	4013      	ands	r3, r2
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	429a      	cmp	r2, r3
 800a288:	bf0c      	ite	eq
 800a28a:	2301      	moveq	r3, #1
 800a28c:	2300      	movne	r3, #0
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	461a      	mov	r2, r3
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	429a      	cmp	r2, r3
 800a296:	d0a0      	beq.n	800a1da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b0a3      	sub	sp, #140	@ 0x8c
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	88fa      	ldrh	r2, [r7, #6]
 800a2bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	88fa      	ldrh	r2, [r7, #6]
 800a2c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2d6:	d10e      	bne.n	800a2f6 <UART_Start_Receive_IT+0x52>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d105      	bne.n	800a2ec <UART_Start_Receive_IT+0x48>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a2e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2ea:	e02d      	b.n	800a348 <UART_Start_Receive_IT+0xa4>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	22ff      	movs	r2, #255	@ 0xff
 800a2f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2f4:	e028      	b.n	800a348 <UART_Start_Receive_IT+0xa4>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10d      	bne.n	800a31a <UART_Start_Receive_IT+0x76>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d104      	bne.n	800a310 <UART_Start_Receive_IT+0x6c>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	22ff      	movs	r2, #255	@ 0xff
 800a30a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a30e:	e01b      	b.n	800a348 <UART_Start_Receive_IT+0xa4>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	227f      	movs	r2, #127	@ 0x7f
 800a314:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a318:	e016      	b.n	800a348 <UART_Start_Receive_IT+0xa4>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a322:	d10d      	bne.n	800a340 <UART_Start_Receive_IT+0x9c>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d104      	bne.n	800a336 <UART_Start_Receive_IT+0x92>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	227f      	movs	r2, #127	@ 0x7f
 800a330:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a334:	e008      	b.n	800a348 <UART_Start_Receive_IT+0xa4>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	223f      	movs	r2, #63	@ 0x3f
 800a33a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a33e:	e003      	b.n	800a348 <UART_Start_Receive_IT+0xa4>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2222      	movs	r2, #34	@ 0x22
 800a354:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3308      	adds	r3, #8
 800a35e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a362:	e853 3f00 	ldrex	r3, [r3]
 800a366:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a368:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a36a:	f043 0301 	orr.w	r3, r3, #1
 800a36e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3308      	adds	r3, #8
 800a378:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a37c:	673a      	str	r2, [r7, #112]	@ 0x70
 800a37e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a382:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a38a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e3      	bne.n	800a358 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a398:	d14f      	bne.n	800a43a <UART_Start_Receive_IT+0x196>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3a0:	88fa      	ldrh	r2, [r7, #6]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d349      	bcc.n	800a43a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3ae:	d107      	bne.n	800a3c0 <UART_Start_Receive_IT+0x11c>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d103      	bne.n	800a3c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4a47      	ldr	r2, [pc, #284]	@ (800a4d8 <UART_Start_Receive_IT+0x234>)
 800a3bc:	675a      	str	r2, [r3, #116]	@ 0x74
 800a3be:	e002      	b.n	800a3c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4a46      	ldr	r2, [pc, #280]	@ (800a4dc <UART_Start_Receive_IT+0x238>)
 800a3c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d01a      	beq.n	800a404 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3d6:	e853 3f00 	ldrex	r3, [r3]
 800a3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a3dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a3f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3f2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a3f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a3f8:	e841 2300 	strex	r3, r2, [r1]
 800a3fc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a3fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e4      	bne.n	800a3ce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3308      	adds	r3, #8
 800a40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a41a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3308      	adds	r3, #8
 800a422:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a424:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a426:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a42a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e5      	bne.n	800a404 <UART_Start_Receive_IT+0x160>
 800a438:	e046      	b.n	800a4c8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a442:	d107      	bne.n	800a454 <UART_Start_Receive_IT+0x1b0>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d103      	bne.n	800a454 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	4a24      	ldr	r2, [pc, #144]	@ (800a4e0 <UART_Start_Receive_IT+0x23c>)
 800a450:	675a      	str	r2, [r3, #116]	@ 0x74
 800a452:	e002      	b.n	800a45a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4a23      	ldr	r2, [pc, #140]	@ (800a4e4 <UART_Start_Receive_IT+0x240>)
 800a458:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d019      	beq.n	800a496 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46a:	e853 3f00 	ldrex	r3, [r3]
 800a46e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a476:	677b      	str	r3, [r7, #116]	@ 0x74
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	461a      	mov	r2, r3
 800a47e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a480:	637b      	str	r3, [r7, #52]	@ 0x34
 800a482:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a484:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a486:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a488:	e841 2300 	strex	r3, r2, [r1]
 800a48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1e6      	bne.n	800a462 <UART_Start_Receive_IT+0x1be>
 800a494:	e018      	b.n	800a4c8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	e853 3f00 	ldrex	r3, [r3]
 800a4a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f043 0320 	orr.w	r3, r3, #32
 800a4aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4b4:	623b      	str	r3, [r7, #32]
 800a4b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b8:	69f9      	ldr	r1, [r7, #28]
 800a4ba:	6a3a      	ldr	r2, [r7, #32]
 800a4bc:	e841 2300 	strex	r3, r2, [r1]
 800a4c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1e6      	bne.n	800a496 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	378c      	adds	r7, #140	@ 0x8c
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	0800ad05 	.word	0x0800ad05
 800a4dc:	0800a9a1 	.word	0x0800a9a1
 800a4e0:	0800a7e9 	.word	0x0800a7e9
 800a4e4:	0800a631 	.word	0x0800a631

0800a4e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b095      	sub	sp, #84	@ 0x54
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f8:	e853 3f00 	ldrex	r3, [r3]
 800a4fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a50e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a510:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a512:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e6      	bne.n	800a4f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3308      	adds	r3, #8
 800a528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	61fb      	str	r3, [r7, #28]
   return(result);
 800a532:	69fa      	ldr	r2, [r7, #28]
 800a534:	4b1e      	ldr	r3, [pc, #120]	@ (800a5b0 <UART_EndRxTransfer+0xc8>)
 800a536:	4013      	ands	r3, r2
 800a538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3308      	adds	r3, #8
 800a540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a544:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a54a:	e841 2300 	strex	r3, r2, [r1]
 800a54e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e5      	bne.n	800a522 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d118      	bne.n	800a590 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	e853 3f00 	ldrex	r3, [r3]
 800a56a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f023 0310 	bic.w	r3, r3, #16
 800a572:	647b      	str	r3, [r7, #68]	@ 0x44
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
 800a57a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a57c:	61bb      	str	r3, [r7, #24]
 800a57e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a580:	6979      	ldr	r1, [r7, #20]
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	e841 2300 	strex	r3, r2, [r1]
 800a588:	613b      	str	r3, [r7, #16]
   return(result);
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e6      	bne.n	800a55e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2220      	movs	r2, #32
 800a594:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5a4:	bf00      	nop
 800a5a6:	3754      	adds	r7, #84	@ 0x54
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	effffffe 	.word	0xeffffffe

0800a5b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f7fe fe2e 	bl	800922c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5d0:	bf00      	nop
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	e853 3f00 	ldrex	r3, [r3]
 800a5ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5f4:	61fb      	str	r3, [r7, #28]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	61bb      	str	r3, [r7, #24]
 800a600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a602:	6979      	ldr	r1, [r7, #20]
 800a604:	69ba      	ldr	r2, [r7, #24]
 800a606:	e841 2300 	strex	r3, r2, [r1]
 800a60a:	613b      	str	r3, [r7, #16]
   return(result);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1e6      	bne.n	800a5e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2220      	movs	r2, #32
 800a616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7fe fdf9 	bl	8009218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a626:	bf00      	nop
 800a628:	3720      	adds	r7, #32
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b09c      	sub	sp, #112	@ 0x70
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a63e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a648:	2b22      	cmp	r3, #34	@ 0x22
 800a64a:	f040 80be 	bne.w	800a7ca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a654:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a658:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a65c:	b2d9      	uxtb	r1, r3
 800a65e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a662:	b2da      	uxtb	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a668:	400a      	ands	r2, r1
 800a66a:	b2d2      	uxtb	r2, r2
 800a66c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a67e:	b29b      	uxth	r3, r3
 800a680:	3b01      	subs	r3, #1
 800a682:	b29a      	uxth	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a690:	b29b      	uxth	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	f040 80a1 	bne.w	800a7da <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6a0:	e853 3f00 	ldrex	r3, [r3]
 800a6a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a6a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a6bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6be:	e841 2300 	strex	r3, r2, [r1]
 800a6c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a6c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1e6      	bne.n	800a698 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6dc:	f023 0301 	bic.w	r3, r3, #1
 800a6e0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3308      	adds	r3, #8
 800a6e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a6ea:	647a      	str	r2, [r7, #68]	@ 0x44
 800a6ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6f2:	e841 2300 	strex	r3, r2, [r1]
 800a6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1e5      	bne.n	800a6ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2220      	movs	r2, #32
 800a702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a33      	ldr	r2, [pc, #204]	@ (800a7e4 <UART_RxISR_8BIT+0x1b4>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d01f      	beq.n	800a75c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d018      	beq.n	800a75c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a732:	e853 3f00 	ldrex	r3, [r3]
 800a736:	623b      	str	r3, [r7, #32]
   return(result);
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a73e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	461a      	mov	r2, r3
 800a746:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a748:	633b      	str	r3, [r7, #48]	@ 0x30
 800a74a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a74e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e6      	bne.n	800a72a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a760:	2b01      	cmp	r3, #1
 800a762:	d12e      	bne.n	800a7c2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	60fb      	str	r3, [r7, #12]
   return(result);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f023 0310 	bic.w	r3, r3, #16
 800a77e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	461a      	mov	r2, r3
 800a786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a788:	61fb      	str	r3, [r7, #28]
 800a78a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	69b9      	ldr	r1, [r7, #24]
 800a78e:	69fa      	ldr	r2, [r7, #28]
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	617b      	str	r3, [r7, #20]
   return(result);
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e6      	bne.n	800a76a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	f003 0310 	and.w	r3, r3, #16
 800a7a6:	2b10      	cmp	r3, #16
 800a7a8:	d103      	bne.n	800a7b2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2210      	movs	r2, #16
 800a7b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7fe fd40 	bl	8009240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7c0:	e00b      	b.n	800a7da <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7f6 f89a 	bl	80008fc <HAL_UART_RxCpltCallback>
}
 800a7c8:	e007      	b.n	800a7da <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	699a      	ldr	r2, [r3, #24]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f042 0208 	orr.w	r2, r2, #8
 800a7d8:	619a      	str	r2, [r3, #24]
}
 800a7da:	bf00      	nop
 800a7dc:	3770      	adds	r7, #112	@ 0x70
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	58000c00 	.word	0x58000c00

0800a7e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b09c      	sub	sp, #112	@ 0x70
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a800:	2b22      	cmp	r3, #34	@ 0x22
 800a802:	f040 80be 	bne.w	800a982 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a814:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a816:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a81a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a81e:	4013      	ands	r3, r2
 800a820:	b29a      	uxth	r2, r3
 800a822:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a824:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a82a:	1c9a      	adds	r2, r3, #2
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a836:	b29b      	uxth	r3, r3
 800a838:	3b01      	subs	r3, #1
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a848:	b29b      	uxth	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f040 80a1 	bne.w	800a992 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a85e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a864:	667b      	str	r3, [r7, #100]	@ 0x64
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a86e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a870:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a872:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a874:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a876:	e841 2300 	strex	r3, r2, [r1]
 800a87a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a87c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1e6      	bne.n	800a850 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3308      	adds	r3, #8
 800a888:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a894:	f023 0301 	bic.w	r3, r3, #1
 800a898:	663b      	str	r3, [r7, #96]	@ 0x60
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a8a2:	643a      	str	r2, [r7, #64]	@ 0x40
 800a8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e5      	bne.n	800a882 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a33      	ldr	r2, [pc, #204]	@ (800a99c <UART_RxISR_16BIT+0x1b4>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d01f      	beq.n	800a914 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d018      	beq.n	800a914 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	e853 3f00 	ldrex	r3, [r3]
 800a8ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a902:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a908:	e841 2300 	strex	r3, r2, [r1]
 800a90c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e6      	bne.n	800a8e2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d12e      	bne.n	800a97a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	e853 3f00 	ldrex	r3, [r3]
 800a92e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	f023 0310 	bic.w	r3, r3, #16
 800a936:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	461a      	mov	r2, r3
 800a93e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a940:	61bb      	str	r3, [r7, #24]
 800a942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a944:	6979      	ldr	r1, [r7, #20]
 800a946:	69ba      	ldr	r2, [r7, #24]
 800a948:	e841 2300 	strex	r3, r2, [r1]
 800a94c:	613b      	str	r3, [r7, #16]
   return(result);
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e6      	bne.n	800a922 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	f003 0310 	and.w	r3, r3, #16
 800a95e:	2b10      	cmp	r3, #16
 800a960:	d103      	bne.n	800a96a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2210      	movs	r2, #16
 800a968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7fe fc64 	bl	8009240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a978:	e00b      	b.n	800a992 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7f5 ffbe 	bl	80008fc <HAL_UART_RxCpltCallback>
}
 800a980:	e007      	b.n	800a992 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	699a      	ldr	r2, [r3, #24]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 0208 	orr.w	r2, r2, #8
 800a990:	619a      	str	r2, [r3, #24]
}
 800a992:	bf00      	nop
 800a994:	3770      	adds	r7, #112	@ 0x70
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	58000c00 	.word	0x58000c00

0800a9a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b0ac      	sub	sp, #176	@ 0xb0
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a9ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9d6:	2b22      	cmp	r3, #34	@ 0x22
 800a9d8:	f040 8181 	bne.w	800acde <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a9e2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a9e6:	e124      	b.n	800ac32 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ee:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a9f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a9f6:	b2d9      	uxtb	r1, r3
 800a9f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa02:	400a      	ands	r2, r1
 800aa04:	b2d2      	uxtb	r2, r2
 800aa06:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aa2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa32:	f003 0307 	and.w	r3, r3, #7
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d053      	beq.n	800aae2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d011      	beq.n	800aa6a <UART_RxISR_8BIT_FIFOEN+0xca>
 800aa46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aa4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00b      	beq.n	800aa6a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2201      	movs	r2, #1
 800aa58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa60:	f043 0201 	orr.w	r2, r3, #1
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa6e:	f003 0302 	and.w	r3, r3, #2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d011      	beq.n	800aa9a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800aa76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00b      	beq.n	800aa9a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2202      	movs	r2, #2
 800aa88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa90:	f043 0204 	orr.w	r2, r3, #4
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa9e:	f003 0304 	and.w	r3, r3, #4
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d011      	beq.n	800aaca <UART_RxISR_8BIT_FIFOEN+0x12a>
 800aaa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00b      	beq.n	800aaca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2204      	movs	r2, #4
 800aab8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aac0:	f043 0202 	orr.w	r2, r3, #2
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d006      	beq.n	800aae2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7fe fba9 	bl	800922c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f040 80a1 	bne.w	800ac32 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aaf8:	e853 3f00 	ldrex	r3, [r3]
 800aafc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800aafe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab14:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab16:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ab18:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ab1a:	e841 2300 	strex	r3, r2, [r1]
 800ab1e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ab20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1e4      	bne.n	800aaf0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ab36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab38:	4b6f      	ldr	r3, [pc, #444]	@ (800acf8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3308      	adds	r3, #8
 800ab46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab4a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ab4c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ab50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ab52:	e841 2300 	strex	r3, r2, [r1]
 800ab56:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ab58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1e3      	bne.n	800ab26 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2220      	movs	r2, #32
 800ab62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a61      	ldr	r2, [pc, #388]	@ (800acfc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d021      	beq.n	800abc0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d01a      	beq.n	800abc0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab92:	e853 3f00 	ldrex	r3, [r3]
 800ab96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ab98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800abac:	657b      	str	r3, [r7, #84]	@ 0x54
 800abae:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800abb2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800abb4:	e841 2300 	strex	r3, r2, [r1]
 800abb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800abba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1e4      	bne.n	800ab8a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d130      	bne.n	800ac2a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd6:	e853 3f00 	ldrex	r3, [r3]
 800abda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abde:	f023 0310 	bic.w	r3, r3, #16
 800abe2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	461a      	mov	r2, r3
 800abec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800abf0:	643b      	str	r3, [r7, #64]	@ 0x40
 800abf2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abf8:	e841 2300 	strex	r3, r2, [r1]
 800abfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e4      	bne.n	800abce <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	f003 0310 	and.w	r3, r3, #16
 800ac0e:	2b10      	cmp	r3, #16
 800ac10:	d103      	bne.n	800ac1a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2210      	movs	r2, #16
 800ac18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7fe fb0c 	bl	8009240 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ac28:	e00e      	b.n	800ac48 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7f5 fe66 	bl	80008fc <HAL_UART_RxCpltCallback>
        break;
 800ac30:	e00a      	b.n	800ac48 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ac32:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800ac3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f47f aed0 	bne.w	800a9e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac4e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ac52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d049      	beq.n	800acee <UART_RxISR_8BIT_FIFOEN+0x34e>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac60:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d242      	bcs.n	800acee <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ac8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e3      	bne.n	800ac68 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a17      	ldr	r2, [pc, #92]	@ (800ad00 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800aca4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	e853 3f00 	ldrex	r3, [r3]
 800acb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f043 0320 	orr.w	r3, r3, #32
 800acba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800acc8:	61bb      	str	r3, [r7, #24]
 800acca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	6979      	ldr	r1, [r7, #20]
 800acce:	69ba      	ldr	r2, [r7, #24]
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	613b      	str	r3, [r7, #16]
   return(result);
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e4      	bne.n	800aca6 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800acdc:	e007      	b.n	800acee <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	699a      	ldr	r2, [r3, #24]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f042 0208 	orr.w	r2, r2, #8
 800acec:	619a      	str	r2, [r3, #24]
}
 800acee:	bf00      	nop
 800acf0:	37b0      	adds	r7, #176	@ 0xb0
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	effffffe 	.word	0xeffffffe
 800acfc:	58000c00 	.word	0x58000c00
 800ad00:	0800a631 	.word	0x0800a631

0800ad04 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b0ae      	sub	sp, #184	@ 0xb8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ad12:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad3a:	2b22      	cmp	r3, #34	@ 0x22
 800ad3c:	f040 8185 	bne.w	800b04a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad46:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad4a:	e128      	b.n	800af9e <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad52:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ad5e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ad62:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ad66:	4013      	ands	r3, r2
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ad6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad74:	1c9a      	adds	r2, r3, #2
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	3b01      	subs	r3, #1
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ad96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad9a:	f003 0307 	and.w	r3, r3, #7
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d053      	beq.n	800ae4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ada2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d011      	beq.n	800add2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800adae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00b      	beq.n	800add2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2201      	movs	r2, #1
 800adc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adc8:	f043 0201 	orr.w	r2, r3, #1
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800add2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d011      	beq.n	800ae02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800adde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00b      	beq.n	800ae02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2202      	movs	r2, #2
 800adf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adf8:	f043 0204 	orr.w	r2, r3, #4
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae06:	f003 0304 	and.w	r3, r3, #4
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d011      	beq.n	800ae32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ae0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae12:	f003 0301 	and.w	r3, r3, #1
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00b      	beq.n	800ae32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2204      	movs	r2, #4
 800ae20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae28:	f043 0202 	orr.w	r2, r3, #2
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d006      	beq.n	800ae4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7fe f9f5 	bl	800922c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f040 80a3 	bne.w	800af9e <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	461a      	mov	r2, r3
 800ae76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ae82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ae86:	e841 2300 	strex	r3, r2, [r1]
 800ae8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1e2      	bne.n	800ae58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	3308      	adds	r3, #8
 800ae98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae9c:	e853 3f00 	ldrex	r3, [r3]
 800aea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aea2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aea4:	4b6f      	ldr	r3, [pc, #444]	@ (800b064 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800aea6:	4013      	ands	r3, r2
 800aea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800aeb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aeb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aebc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aebe:	e841 2300 	strex	r3, r2, [r1]
 800aec2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1e3      	bne.n	800ae92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2220      	movs	r2, #32
 800aece:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a61      	ldr	r2, [pc, #388]	@ (800b068 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d021      	beq.n	800af2c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d01a      	beq.n	800af2c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aefe:	e853 3f00 	ldrex	r3, [r3]
 800af02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800af18:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af1a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af20:	e841 2300 	strex	r3, r2, [r1]
 800af24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1e4      	bne.n	800aef6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af30:	2b01      	cmp	r3, #1
 800af32:	d130      	bne.n	800af96 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af42:	e853 3f00 	ldrex	r3, [r3]
 800af46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af4a:	f023 0310 	bic.w	r3, r3, #16
 800af4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af64:	e841 2300 	strex	r3, r2, [r1]
 800af68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1e4      	bne.n	800af3a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	69db      	ldr	r3, [r3, #28]
 800af76:	f003 0310 	and.w	r3, r3, #16
 800af7a:	2b10      	cmp	r3, #16
 800af7c:	d103      	bne.n	800af86 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2210      	movs	r2, #16
 800af84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7fe f956 	bl	8009240 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800af94:	e00e      	b.n	800afb4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7f5 fcb0 	bl	80008fc <HAL_UART_RxCpltCallback>
        break;
 800af9c:	e00a      	b.n	800afb4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af9e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d006      	beq.n	800afb4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800afa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afaa:	f003 0320 	and.w	r3, r3, #32
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f47f aecc 	bne.w	800ad4c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800afbe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d049      	beq.n	800b05a <UART_RxISR_16BIT_FIFOEN+0x356>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800afcc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d242      	bcs.n	800b05a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3308      	adds	r3, #8
 800afda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afde:	e853 3f00 	ldrex	r3, [r3]
 800afe2:	623b      	str	r3, [r7, #32]
   return(result);
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3308      	adds	r3, #8
 800aff4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800aff8:	633a      	str	r2, [r7, #48]	@ 0x30
 800affa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800affe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b000:	e841 2300 	strex	r3, r2, [r1]
 800b004:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1e3      	bne.n	800afd4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a17      	ldr	r2, [pc, #92]	@ (800b06c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b010:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	e853 3f00 	ldrex	r3, [r3]
 800b01e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f043 0320 	orr.w	r3, r3, #32
 800b026:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b034:	61fb      	str	r3, [r7, #28]
 800b036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b038:	69b9      	ldr	r1, [r7, #24]
 800b03a:	69fa      	ldr	r2, [r7, #28]
 800b03c:	e841 2300 	strex	r3, r2, [r1]
 800b040:	617b      	str	r3, [r7, #20]
   return(result);
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e4      	bne.n	800b012 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b048:	e007      	b.n	800b05a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	699a      	ldr	r2, [r3, #24]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f042 0208 	orr.w	r2, r2, #8
 800b058:	619a      	str	r2, [r3, #24]
}
 800b05a:	bf00      	nop
 800b05c:	37b8      	adds	r7, #184	@ 0xb8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	effffffe 	.word	0xeffffffe
 800b068:	58000c00 	.word	0x58000c00
 800b06c:	0800a7e9 	.word	0x0800a7e9

0800b070 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d101      	bne.n	800b0c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b0be:	2302      	movs	r3, #2
 800b0c0:	e027      	b.n	800b112 <HAL_UARTEx_DisableFifoMode+0x66>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2224      	movs	r2, #36	@ 0x24
 800b0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f022 0201 	bic.w	r2, r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b0f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2220      	movs	r2, #32
 800b104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d101      	bne.n	800b136 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b132:	2302      	movs	r3, #2
 800b134:	e02d      	b.n	800b192 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2224      	movs	r2, #36	@ 0x24
 800b142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f022 0201 	bic.w	r2, r2, #1
 800b15c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f850 	bl	800b218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2220      	movs	r2, #32
 800b184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d101      	bne.n	800b1b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	e02d      	b.n	800b20e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2224      	movs	r2, #36	@ 0x24
 800b1be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f022 0201 	bic.w	r2, r2, #1
 800b1d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	430a      	orrs	r2, r1
 800b1ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f812 	bl	800b218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2220      	movs	r2, #32
 800b200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b224:	2b00      	cmp	r3, #0
 800b226:	d108      	bne.n	800b23a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b238:	e031      	b.n	800b29e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b23a:	2310      	movs	r3, #16
 800b23c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b23e:	2310      	movs	r3, #16
 800b240:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	0e5b      	lsrs	r3, r3, #25
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	f003 0307 	and.w	r3, r3, #7
 800b250:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	0f5b      	lsrs	r3, r3, #29
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	7b3a      	ldrb	r2, [r7, #12]
 800b266:	4911      	ldr	r1, [pc, #68]	@ (800b2ac <UARTEx_SetNbDataToProcess+0x94>)
 800b268:	5c8a      	ldrb	r2, [r1, r2]
 800b26a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b26e:	7b3a      	ldrb	r2, [r7, #12]
 800b270:	490f      	ldr	r1, [pc, #60]	@ (800b2b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b272:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b274:	fb93 f3f2 	sdiv	r3, r3, r2
 800b278:	b29a      	uxth	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b280:	7bfb      	ldrb	r3, [r7, #15]
 800b282:	7b7a      	ldrb	r2, [r7, #13]
 800b284:	4909      	ldr	r1, [pc, #36]	@ (800b2ac <UARTEx_SetNbDataToProcess+0x94>)
 800b286:	5c8a      	ldrb	r2, [r1, r2]
 800b288:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b28c:	7b7a      	ldrb	r2, [r7, #13]
 800b28e:	4908      	ldr	r1, [pc, #32]	@ (800b2b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b290:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b292:	fb93 f3f2 	sdiv	r3, r3, r2
 800b296:	b29a      	uxth	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b29e:	bf00      	nop
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	0800e738 	.word	0x0800e738
 800b2b0:	0800e740 	.word	0x0800e740

0800b2b4 <__cvt>:
 800b2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b6:	ed2d 8b02 	vpush	{d8}
 800b2ba:	eeb0 8b40 	vmov.f64	d8, d0
 800b2be:	b085      	sub	sp, #20
 800b2c0:	4617      	mov	r7, r2
 800b2c2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b2c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2c6:	ee18 2a90 	vmov	r2, s17
 800b2ca:	f025 0520 	bic.w	r5, r5, #32
 800b2ce:	2a00      	cmp	r2, #0
 800b2d0:	bfb6      	itet	lt
 800b2d2:	222d      	movlt	r2, #45	@ 0x2d
 800b2d4:	2200      	movge	r2, #0
 800b2d6:	eeb1 8b40 	vneglt.f64	d8, d0
 800b2da:	2d46      	cmp	r5, #70	@ 0x46
 800b2dc:	460c      	mov	r4, r1
 800b2de:	701a      	strb	r2, [r3, #0]
 800b2e0:	d004      	beq.n	800b2ec <__cvt+0x38>
 800b2e2:	2d45      	cmp	r5, #69	@ 0x45
 800b2e4:	d100      	bne.n	800b2e8 <__cvt+0x34>
 800b2e6:	3401      	adds	r4, #1
 800b2e8:	2102      	movs	r1, #2
 800b2ea:	e000      	b.n	800b2ee <__cvt+0x3a>
 800b2ec:	2103      	movs	r1, #3
 800b2ee:	ab03      	add	r3, sp, #12
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	ab02      	add	r3, sp, #8
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4633      	mov	r3, r6
 800b2fa:	eeb0 0b48 	vmov.f64	d0, d8
 800b2fe:	f000 fe3b 	bl	800bf78 <_dtoa_r>
 800b302:	2d47      	cmp	r5, #71	@ 0x47
 800b304:	d114      	bne.n	800b330 <__cvt+0x7c>
 800b306:	07fb      	lsls	r3, r7, #31
 800b308:	d50a      	bpl.n	800b320 <__cvt+0x6c>
 800b30a:	1902      	adds	r2, r0, r4
 800b30c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b314:	bf08      	it	eq
 800b316:	9203      	streq	r2, [sp, #12]
 800b318:	2130      	movs	r1, #48	@ 0x30
 800b31a:	9b03      	ldr	r3, [sp, #12]
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d319      	bcc.n	800b354 <__cvt+0xa0>
 800b320:	9b03      	ldr	r3, [sp, #12]
 800b322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b324:	1a1b      	subs	r3, r3, r0
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	b005      	add	sp, #20
 800b32a:	ecbd 8b02 	vpop	{d8}
 800b32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b330:	2d46      	cmp	r5, #70	@ 0x46
 800b332:	eb00 0204 	add.w	r2, r0, r4
 800b336:	d1e9      	bne.n	800b30c <__cvt+0x58>
 800b338:	7803      	ldrb	r3, [r0, #0]
 800b33a:	2b30      	cmp	r3, #48	@ 0x30
 800b33c:	d107      	bne.n	800b34e <__cvt+0x9a>
 800b33e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b346:	bf1c      	itt	ne
 800b348:	f1c4 0401 	rsbne	r4, r4, #1
 800b34c:	6034      	strne	r4, [r6, #0]
 800b34e:	6833      	ldr	r3, [r6, #0]
 800b350:	441a      	add	r2, r3
 800b352:	e7db      	b.n	800b30c <__cvt+0x58>
 800b354:	1c5c      	adds	r4, r3, #1
 800b356:	9403      	str	r4, [sp, #12]
 800b358:	7019      	strb	r1, [r3, #0]
 800b35a:	e7de      	b.n	800b31a <__cvt+0x66>

0800b35c <__exponent>:
 800b35c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b35e:	2900      	cmp	r1, #0
 800b360:	bfba      	itte	lt
 800b362:	4249      	neglt	r1, r1
 800b364:	232d      	movlt	r3, #45	@ 0x2d
 800b366:	232b      	movge	r3, #43	@ 0x2b
 800b368:	2909      	cmp	r1, #9
 800b36a:	7002      	strb	r2, [r0, #0]
 800b36c:	7043      	strb	r3, [r0, #1]
 800b36e:	dd29      	ble.n	800b3c4 <__exponent+0x68>
 800b370:	f10d 0307 	add.w	r3, sp, #7
 800b374:	461d      	mov	r5, r3
 800b376:	270a      	movs	r7, #10
 800b378:	461a      	mov	r2, r3
 800b37a:	fbb1 f6f7 	udiv	r6, r1, r7
 800b37e:	fb07 1416 	mls	r4, r7, r6, r1
 800b382:	3430      	adds	r4, #48	@ 0x30
 800b384:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b388:	460c      	mov	r4, r1
 800b38a:	2c63      	cmp	r4, #99	@ 0x63
 800b38c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b390:	4631      	mov	r1, r6
 800b392:	dcf1      	bgt.n	800b378 <__exponent+0x1c>
 800b394:	3130      	adds	r1, #48	@ 0x30
 800b396:	1e94      	subs	r4, r2, #2
 800b398:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b39c:	1c41      	adds	r1, r0, #1
 800b39e:	4623      	mov	r3, r4
 800b3a0:	42ab      	cmp	r3, r5
 800b3a2:	d30a      	bcc.n	800b3ba <__exponent+0x5e>
 800b3a4:	f10d 0309 	add.w	r3, sp, #9
 800b3a8:	1a9b      	subs	r3, r3, r2
 800b3aa:	42ac      	cmp	r4, r5
 800b3ac:	bf88      	it	hi
 800b3ae:	2300      	movhi	r3, #0
 800b3b0:	3302      	adds	r3, #2
 800b3b2:	4403      	add	r3, r0
 800b3b4:	1a18      	subs	r0, r3, r0
 800b3b6:	b003      	add	sp, #12
 800b3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b3be:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b3c2:	e7ed      	b.n	800b3a0 <__exponent+0x44>
 800b3c4:	2330      	movs	r3, #48	@ 0x30
 800b3c6:	3130      	adds	r1, #48	@ 0x30
 800b3c8:	7083      	strb	r3, [r0, #2]
 800b3ca:	70c1      	strb	r1, [r0, #3]
 800b3cc:	1d03      	adds	r3, r0, #4
 800b3ce:	e7f1      	b.n	800b3b4 <__exponent+0x58>

0800b3d0 <_printf_float>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	b08d      	sub	sp, #52	@ 0x34
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b3dc:	4616      	mov	r6, r2
 800b3de:	461f      	mov	r7, r3
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	f000 fd2d 	bl	800be40 <_localeconv_r>
 800b3e6:	f8d0 b000 	ldr.w	fp, [r0]
 800b3ea:	4658      	mov	r0, fp
 800b3ec:	f7f4 fff0 	bl	80003d0 <strlen>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b3fc:	6822      	ldr	r2, [r4, #0]
 800b3fe:	9005      	str	r0, [sp, #20]
 800b400:	3307      	adds	r3, #7
 800b402:	f023 0307 	bic.w	r3, r3, #7
 800b406:	f103 0108 	add.w	r1, r3, #8
 800b40a:	f8c8 1000 	str.w	r1, [r8]
 800b40e:	ed93 0b00 	vldr	d0, [r3]
 800b412:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b670 <_printf_float+0x2a0>
 800b416:	eeb0 7bc0 	vabs.f64	d7, d0
 800b41a:	eeb4 7b46 	vcmp.f64	d7, d6
 800b41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b422:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b426:	dd24      	ble.n	800b472 <_printf_float+0xa2>
 800b428:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b430:	d502      	bpl.n	800b438 <_printf_float+0x68>
 800b432:	232d      	movs	r3, #45	@ 0x2d
 800b434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b438:	498f      	ldr	r1, [pc, #572]	@ (800b678 <_printf_float+0x2a8>)
 800b43a:	4b90      	ldr	r3, [pc, #576]	@ (800b67c <_printf_float+0x2ac>)
 800b43c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b440:	bf8c      	ite	hi
 800b442:	4688      	movhi	r8, r1
 800b444:	4698      	movls	r8, r3
 800b446:	f022 0204 	bic.w	r2, r2, #4
 800b44a:	2303      	movs	r3, #3
 800b44c:	6123      	str	r3, [r4, #16]
 800b44e:	6022      	str	r2, [r4, #0]
 800b450:	f04f 0a00 	mov.w	sl, #0
 800b454:	9700      	str	r7, [sp, #0]
 800b456:	4633      	mov	r3, r6
 800b458:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b45a:	4621      	mov	r1, r4
 800b45c:	4628      	mov	r0, r5
 800b45e:	f000 f9d1 	bl	800b804 <_printf_common>
 800b462:	3001      	adds	r0, #1
 800b464:	f040 8089 	bne.w	800b57a <_printf_float+0x1aa>
 800b468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b46c:	b00d      	add	sp, #52	@ 0x34
 800b46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b472:	eeb4 0b40 	vcmp.f64	d0, d0
 800b476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47a:	d709      	bvc.n	800b490 <_printf_float+0xc0>
 800b47c:	ee10 3a90 	vmov	r3, s1
 800b480:	2b00      	cmp	r3, #0
 800b482:	bfbc      	itt	lt
 800b484:	232d      	movlt	r3, #45	@ 0x2d
 800b486:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b48a:	497d      	ldr	r1, [pc, #500]	@ (800b680 <_printf_float+0x2b0>)
 800b48c:	4b7d      	ldr	r3, [pc, #500]	@ (800b684 <_printf_float+0x2b4>)
 800b48e:	e7d5      	b.n	800b43c <_printf_float+0x6c>
 800b490:	6863      	ldr	r3, [r4, #4]
 800b492:	1c59      	adds	r1, r3, #1
 800b494:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b498:	d139      	bne.n	800b50e <_printf_float+0x13e>
 800b49a:	2306      	movs	r3, #6
 800b49c:	6063      	str	r3, [r4, #4]
 800b49e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	6022      	str	r2, [r4, #0]
 800b4a6:	9303      	str	r3, [sp, #12]
 800b4a8:	ab0a      	add	r3, sp, #40	@ 0x28
 800b4aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b4ae:	ab09      	add	r3, sp, #36	@ 0x24
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	6861      	ldr	r1, [r4, #4]
 800b4b4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f7ff fefb 	bl	800b2b4 <__cvt>
 800b4be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b4c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	d129      	bne.n	800b51c <_printf_float+0x14c>
 800b4c8:	1cc8      	adds	r0, r1, #3
 800b4ca:	db02      	blt.n	800b4d2 <_printf_float+0x102>
 800b4cc:	6863      	ldr	r3, [r4, #4]
 800b4ce:	4299      	cmp	r1, r3
 800b4d0:	dd41      	ble.n	800b556 <_printf_float+0x186>
 800b4d2:	f1a9 0902 	sub.w	r9, r9, #2
 800b4d6:	fa5f f989 	uxtb.w	r9, r9
 800b4da:	3901      	subs	r1, #1
 800b4dc:	464a      	mov	r2, r9
 800b4de:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b4e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4e4:	f7ff ff3a 	bl	800b35c <__exponent>
 800b4e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4ea:	1813      	adds	r3, r2, r0
 800b4ec:	2a01      	cmp	r2, #1
 800b4ee:	4682      	mov	sl, r0
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	dc02      	bgt.n	800b4fa <_printf_float+0x12a>
 800b4f4:	6822      	ldr	r2, [r4, #0]
 800b4f6:	07d2      	lsls	r2, r2, #31
 800b4f8:	d501      	bpl.n	800b4fe <_printf_float+0x12e>
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	6123      	str	r3, [r4, #16]
 800b4fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0a6      	beq.n	800b454 <_printf_float+0x84>
 800b506:	232d      	movs	r3, #45	@ 0x2d
 800b508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b50c:	e7a2      	b.n	800b454 <_printf_float+0x84>
 800b50e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b512:	d1c4      	bne.n	800b49e <_printf_float+0xce>
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1c2      	bne.n	800b49e <_printf_float+0xce>
 800b518:	2301      	movs	r3, #1
 800b51a:	e7bf      	b.n	800b49c <_printf_float+0xcc>
 800b51c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b520:	d9db      	bls.n	800b4da <_printf_float+0x10a>
 800b522:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b526:	d118      	bne.n	800b55a <_printf_float+0x18a>
 800b528:	2900      	cmp	r1, #0
 800b52a:	6863      	ldr	r3, [r4, #4]
 800b52c:	dd0b      	ble.n	800b546 <_printf_float+0x176>
 800b52e:	6121      	str	r1, [r4, #16]
 800b530:	b913      	cbnz	r3, 800b538 <_printf_float+0x168>
 800b532:	6822      	ldr	r2, [r4, #0]
 800b534:	07d0      	lsls	r0, r2, #31
 800b536:	d502      	bpl.n	800b53e <_printf_float+0x16e>
 800b538:	3301      	adds	r3, #1
 800b53a:	440b      	add	r3, r1
 800b53c:	6123      	str	r3, [r4, #16]
 800b53e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b540:	f04f 0a00 	mov.w	sl, #0
 800b544:	e7db      	b.n	800b4fe <_printf_float+0x12e>
 800b546:	b913      	cbnz	r3, 800b54e <_printf_float+0x17e>
 800b548:	6822      	ldr	r2, [r4, #0]
 800b54a:	07d2      	lsls	r2, r2, #31
 800b54c:	d501      	bpl.n	800b552 <_printf_float+0x182>
 800b54e:	3302      	adds	r3, #2
 800b550:	e7f4      	b.n	800b53c <_printf_float+0x16c>
 800b552:	2301      	movs	r3, #1
 800b554:	e7f2      	b.n	800b53c <_printf_float+0x16c>
 800b556:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b55a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b55c:	4299      	cmp	r1, r3
 800b55e:	db05      	blt.n	800b56c <_printf_float+0x19c>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	6121      	str	r1, [r4, #16]
 800b564:	07d8      	lsls	r0, r3, #31
 800b566:	d5ea      	bpl.n	800b53e <_printf_float+0x16e>
 800b568:	1c4b      	adds	r3, r1, #1
 800b56a:	e7e7      	b.n	800b53c <_printf_float+0x16c>
 800b56c:	2900      	cmp	r1, #0
 800b56e:	bfd4      	ite	le
 800b570:	f1c1 0202 	rsble	r2, r1, #2
 800b574:	2201      	movgt	r2, #1
 800b576:	4413      	add	r3, r2
 800b578:	e7e0      	b.n	800b53c <_printf_float+0x16c>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	055a      	lsls	r2, r3, #21
 800b57e:	d407      	bmi.n	800b590 <_printf_float+0x1c0>
 800b580:	6923      	ldr	r3, [r4, #16]
 800b582:	4642      	mov	r2, r8
 800b584:	4631      	mov	r1, r6
 800b586:	4628      	mov	r0, r5
 800b588:	47b8      	blx	r7
 800b58a:	3001      	adds	r0, #1
 800b58c:	d12a      	bne.n	800b5e4 <_printf_float+0x214>
 800b58e:	e76b      	b.n	800b468 <_printf_float+0x98>
 800b590:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b594:	f240 80e0 	bls.w	800b758 <_printf_float+0x388>
 800b598:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b59c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a4:	d133      	bne.n	800b60e <_printf_float+0x23e>
 800b5a6:	4a38      	ldr	r2, [pc, #224]	@ (800b688 <_printf_float+0x2b8>)
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	4631      	mov	r1, r6
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	47b8      	blx	r7
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	f43f af59 	beq.w	800b468 <_printf_float+0x98>
 800b5b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b5ba:	4543      	cmp	r3, r8
 800b5bc:	db02      	blt.n	800b5c4 <_printf_float+0x1f4>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	07d8      	lsls	r0, r3, #31
 800b5c2:	d50f      	bpl.n	800b5e4 <_printf_float+0x214>
 800b5c4:	9b05      	ldr	r3, [sp, #20]
 800b5c6:	465a      	mov	r2, fp
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	47b8      	blx	r7
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f43f af4a 	beq.w	800b468 <_printf_float+0x98>
 800b5d4:	f04f 0900 	mov.w	r9, #0
 800b5d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b5dc:	f104 0a1a 	add.w	sl, r4, #26
 800b5e0:	45c8      	cmp	r8, r9
 800b5e2:	dc09      	bgt.n	800b5f8 <_printf_float+0x228>
 800b5e4:	6823      	ldr	r3, [r4, #0]
 800b5e6:	079b      	lsls	r3, r3, #30
 800b5e8:	f100 8107 	bmi.w	800b7fa <_printf_float+0x42a>
 800b5ec:	68e0      	ldr	r0, [r4, #12]
 800b5ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5f0:	4298      	cmp	r0, r3
 800b5f2:	bfb8      	it	lt
 800b5f4:	4618      	movlt	r0, r3
 800b5f6:	e739      	b.n	800b46c <_printf_float+0x9c>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	4652      	mov	r2, sl
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4628      	mov	r0, r5
 800b600:	47b8      	blx	r7
 800b602:	3001      	adds	r0, #1
 800b604:	f43f af30 	beq.w	800b468 <_printf_float+0x98>
 800b608:	f109 0901 	add.w	r9, r9, #1
 800b60c:	e7e8      	b.n	800b5e0 <_printf_float+0x210>
 800b60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b610:	2b00      	cmp	r3, #0
 800b612:	dc3b      	bgt.n	800b68c <_printf_float+0x2bc>
 800b614:	4a1c      	ldr	r2, [pc, #112]	@ (800b688 <_printf_float+0x2b8>)
 800b616:	2301      	movs	r3, #1
 800b618:	4631      	mov	r1, r6
 800b61a:	4628      	mov	r0, r5
 800b61c:	47b8      	blx	r7
 800b61e:	3001      	adds	r0, #1
 800b620:	f43f af22 	beq.w	800b468 <_printf_float+0x98>
 800b624:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b628:	ea59 0303 	orrs.w	r3, r9, r3
 800b62c:	d102      	bne.n	800b634 <_printf_float+0x264>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	07d9      	lsls	r1, r3, #31
 800b632:	d5d7      	bpl.n	800b5e4 <_printf_float+0x214>
 800b634:	9b05      	ldr	r3, [sp, #20]
 800b636:	465a      	mov	r2, fp
 800b638:	4631      	mov	r1, r6
 800b63a:	4628      	mov	r0, r5
 800b63c:	47b8      	blx	r7
 800b63e:	3001      	adds	r0, #1
 800b640:	f43f af12 	beq.w	800b468 <_printf_float+0x98>
 800b644:	f04f 0a00 	mov.w	sl, #0
 800b648:	f104 0b1a 	add.w	fp, r4, #26
 800b64c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b64e:	425b      	negs	r3, r3
 800b650:	4553      	cmp	r3, sl
 800b652:	dc01      	bgt.n	800b658 <_printf_float+0x288>
 800b654:	464b      	mov	r3, r9
 800b656:	e794      	b.n	800b582 <_printf_float+0x1b2>
 800b658:	2301      	movs	r3, #1
 800b65a:	465a      	mov	r2, fp
 800b65c:	4631      	mov	r1, r6
 800b65e:	4628      	mov	r0, r5
 800b660:	47b8      	blx	r7
 800b662:	3001      	adds	r0, #1
 800b664:	f43f af00 	beq.w	800b468 <_printf_float+0x98>
 800b668:	f10a 0a01 	add.w	sl, sl, #1
 800b66c:	e7ee      	b.n	800b64c <_printf_float+0x27c>
 800b66e:	bf00      	nop
 800b670:	ffffffff 	.word	0xffffffff
 800b674:	7fefffff 	.word	0x7fefffff
 800b678:	0800e74c 	.word	0x0800e74c
 800b67c:	0800e748 	.word	0x0800e748
 800b680:	0800e754 	.word	0x0800e754
 800b684:	0800e750 	.word	0x0800e750
 800b688:	0800e758 	.word	0x0800e758
 800b68c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b68e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b692:	4553      	cmp	r3, sl
 800b694:	bfa8      	it	ge
 800b696:	4653      	movge	r3, sl
 800b698:	2b00      	cmp	r3, #0
 800b69a:	4699      	mov	r9, r3
 800b69c:	dc37      	bgt.n	800b70e <_printf_float+0x33e>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	9307      	str	r3, [sp, #28]
 800b6a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6a6:	f104 021a 	add.w	r2, r4, #26
 800b6aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6ac:	9907      	ldr	r1, [sp, #28]
 800b6ae:	9306      	str	r3, [sp, #24]
 800b6b0:	eba3 0309 	sub.w	r3, r3, r9
 800b6b4:	428b      	cmp	r3, r1
 800b6b6:	dc31      	bgt.n	800b71c <_printf_float+0x34c>
 800b6b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ba:	459a      	cmp	sl, r3
 800b6bc:	dc3b      	bgt.n	800b736 <_printf_float+0x366>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	07da      	lsls	r2, r3, #31
 800b6c2:	d438      	bmi.n	800b736 <_printf_float+0x366>
 800b6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c6:	ebaa 0903 	sub.w	r9, sl, r3
 800b6ca:	9b06      	ldr	r3, [sp, #24]
 800b6cc:	ebaa 0303 	sub.w	r3, sl, r3
 800b6d0:	4599      	cmp	r9, r3
 800b6d2:	bfa8      	it	ge
 800b6d4:	4699      	movge	r9, r3
 800b6d6:	f1b9 0f00 	cmp.w	r9, #0
 800b6da:	dc34      	bgt.n	800b746 <_printf_float+0x376>
 800b6dc:	f04f 0800 	mov.w	r8, #0
 800b6e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6e4:	f104 0b1a 	add.w	fp, r4, #26
 800b6e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ea:	ebaa 0303 	sub.w	r3, sl, r3
 800b6ee:	eba3 0309 	sub.w	r3, r3, r9
 800b6f2:	4543      	cmp	r3, r8
 800b6f4:	f77f af76 	ble.w	800b5e4 <_printf_float+0x214>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	465a      	mov	r2, fp
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	47b8      	blx	r7
 800b702:	3001      	adds	r0, #1
 800b704:	f43f aeb0 	beq.w	800b468 <_printf_float+0x98>
 800b708:	f108 0801 	add.w	r8, r8, #1
 800b70c:	e7ec      	b.n	800b6e8 <_printf_float+0x318>
 800b70e:	4642      	mov	r2, r8
 800b710:	4631      	mov	r1, r6
 800b712:	4628      	mov	r0, r5
 800b714:	47b8      	blx	r7
 800b716:	3001      	adds	r0, #1
 800b718:	d1c1      	bne.n	800b69e <_printf_float+0x2ce>
 800b71a:	e6a5      	b.n	800b468 <_printf_float+0x98>
 800b71c:	2301      	movs	r3, #1
 800b71e:	4631      	mov	r1, r6
 800b720:	4628      	mov	r0, r5
 800b722:	9206      	str	r2, [sp, #24]
 800b724:	47b8      	blx	r7
 800b726:	3001      	adds	r0, #1
 800b728:	f43f ae9e 	beq.w	800b468 <_printf_float+0x98>
 800b72c:	9b07      	ldr	r3, [sp, #28]
 800b72e:	9a06      	ldr	r2, [sp, #24]
 800b730:	3301      	adds	r3, #1
 800b732:	9307      	str	r3, [sp, #28]
 800b734:	e7b9      	b.n	800b6aa <_printf_float+0x2da>
 800b736:	9b05      	ldr	r3, [sp, #20]
 800b738:	465a      	mov	r2, fp
 800b73a:	4631      	mov	r1, r6
 800b73c:	4628      	mov	r0, r5
 800b73e:	47b8      	blx	r7
 800b740:	3001      	adds	r0, #1
 800b742:	d1bf      	bne.n	800b6c4 <_printf_float+0x2f4>
 800b744:	e690      	b.n	800b468 <_printf_float+0x98>
 800b746:	9a06      	ldr	r2, [sp, #24]
 800b748:	464b      	mov	r3, r9
 800b74a:	4442      	add	r2, r8
 800b74c:	4631      	mov	r1, r6
 800b74e:	4628      	mov	r0, r5
 800b750:	47b8      	blx	r7
 800b752:	3001      	adds	r0, #1
 800b754:	d1c2      	bne.n	800b6dc <_printf_float+0x30c>
 800b756:	e687      	b.n	800b468 <_printf_float+0x98>
 800b758:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b75c:	f1b9 0f01 	cmp.w	r9, #1
 800b760:	dc01      	bgt.n	800b766 <_printf_float+0x396>
 800b762:	07db      	lsls	r3, r3, #31
 800b764:	d536      	bpl.n	800b7d4 <_printf_float+0x404>
 800b766:	2301      	movs	r3, #1
 800b768:	4642      	mov	r2, r8
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	f43f ae79 	beq.w	800b468 <_printf_float+0x98>
 800b776:	9b05      	ldr	r3, [sp, #20]
 800b778:	465a      	mov	r2, fp
 800b77a:	4631      	mov	r1, r6
 800b77c:	4628      	mov	r0, r5
 800b77e:	47b8      	blx	r7
 800b780:	3001      	adds	r0, #1
 800b782:	f43f ae71 	beq.w	800b468 <_printf_float+0x98>
 800b786:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b78a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b792:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800b796:	d018      	beq.n	800b7ca <_printf_float+0x3fa>
 800b798:	464b      	mov	r3, r9
 800b79a:	f108 0201 	add.w	r2, r8, #1
 800b79e:	4631      	mov	r1, r6
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	47b8      	blx	r7
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	d10c      	bne.n	800b7c2 <_printf_float+0x3f2>
 800b7a8:	e65e      	b.n	800b468 <_printf_float+0x98>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	465a      	mov	r2, fp
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b8      	blx	r7
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	f43f ae57 	beq.w	800b468 <_printf_float+0x98>
 800b7ba:	f108 0801 	add.w	r8, r8, #1
 800b7be:	45c8      	cmp	r8, r9
 800b7c0:	dbf3      	blt.n	800b7aa <_printf_float+0x3da>
 800b7c2:	4653      	mov	r3, sl
 800b7c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b7c8:	e6dc      	b.n	800b584 <_printf_float+0x1b4>
 800b7ca:	f04f 0800 	mov.w	r8, #0
 800b7ce:	f104 0b1a 	add.w	fp, r4, #26
 800b7d2:	e7f4      	b.n	800b7be <_printf_float+0x3ee>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	4642      	mov	r2, r8
 800b7d8:	e7e1      	b.n	800b79e <_printf_float+0x3ce>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	464a      	mov	r2, r9
 800b7de:	4631      	mov	r1, r6
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	47b8      	blx	r7
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	f43f ae3f 	beq.w	800b468 <_printf_float+0x98>
 800b7ea:	f108 0801 	add.w	r8, r8, #1
 800b7ee:	68e3      	ldr	r3, [r4, #12]
 800b7f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7f2:	1a5b      	subs	r3, r3, r1
 800b7f4:	4543      	cmp	r3, r8
 800b7f6:	dcf0      	bgt.n	800b7da <_printf_float+0x40a>
 800b7f8:	e6f8      	b.n	800b5ec <_printf_float+0x21c>
 800b7fa:	f04f 0800 	mov.w	r8, #0
 800b7fe:	f104 0919 	add.w	r9, r4, #25
 800b802:	e7f4      	b.n	800b7ee <_printf_float+0x41e>

0800b804 <_printf_common>:
 800b804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b808:	4616      	mov	r6, r2
 800b80a:	4698      	mov	r8, r3
 800b80c:	688a      	ldr	r2, [r1, #8]
 800b80e:	690b      	ldr	r3, [r1, #16]
 800b810:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b814:	4293      	cmp	r3, r2
 800b816:	bfb8      	it	lt
 800b818:	4613      	movlt	r3, r2
 800b81a:	6033      	str	r3, [r6, #0]
 800b81c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b820:	4607      	mov	r7, r0
 800b822:	460c      	mov	r4, r1
 800b824:	b10a      	cbz	r2, 800b82a <_printf_common+0x26>
 800b826:	3301      	adds	r3, #1
 800b828:	6033      	str	r3, [r6, #0]
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	0699      	lsls	r1, r3, #26
 800b82e:	bf42      	ittt	mi
 800b830:	6833      	ldrmi	r3, [r6, #0]
 800b832:	3302      	addmi	r3, #2
 800b834:	6033      	strmi	r3, [r6, #0]
 800b836:	6825      	ldr	r5, [r4, #0]
 800b838:	f015 0506 	ands.w	r5, r5, #6
 800b83c:	d106      	bne.n	800b84c <_printf_common+0x48>
 800b83e:	f104 0a19 	add.w	sl, r4, #25
 800b842:	68e3      	ldr	r3, [r4, #12]
 800b844:	6832      	ldr	r2, [r6, #0]
 800b846:	1a9b      	subs	r3, r3, r2
 800b848:	42ab      	cmp	r3, r5
 800b84a:	dc26      	bgt.n	800b89a <_printf_common+0x96>
 800b84c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b850:	6822      	ldr	r2, [r4, #0]
 800b852:	3b00      	subs	r3, #0
 800b854:	bf18      	it	ne
 800b856:	2301      	movne	r3, #1
 800b858:	0692      	lsls	r2, r2, #26
 800b85a:	d42b      	bmi.n	800b8b4 <_printf_common+0xb0>
 800b85c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b860:	4641      	mov	r1, r8
 800b862:	4638      	mov	r0, r7
 800b864:	47c8      	blx	r9
 800b866:	3001      	adds	r0, #1
 800b868:	d01e      	beq.n	800b8a8 <_printf_common+0xa4>
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	6922      	ldr	r2, [r4, #16]
 800b86e:	f003 0306 	and.w	r3, r3, #6
 800b872:	2b04      	cmp	r3, #4
 800b874:	bf02      	ittt	eq
 800b876:	68e5      	ldreq	r5, [r4, #12]
 800b878:	6833      	ldreq	r3, [r6, #0]
 800b87a:	1aed      	subeq	r5, r5, r3
 800b87c:	68a3      	ldr	r3, [r4, #8]
 800b87e:	bf0c      	ite	eq
 800b880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b884:	2500      	movne	r5, #0
 800b886:	4293      	cmp	r3, r2
 800b888:	bfc4      	itt	gt
 800b88a:	1a9b      	subgt	r3, r3, r2
 800b88c:	18ed      	addgt	r5, r5, r3
 800b88e:	2600      	movs	r6, #0
 800b890:	341a      	adds	r4, #26
 800b892:	42b5      	cmp	r5, r6
 800b894:	d11a      	bne.n	800b8cc <_printf_common+0xc8>
 800b896:	2000      	movs	r0, #0
 800b898:	e008      	b.n	800b8ac <_printf_common+0xa8>
 800b89a:	2301      	movs	r3, #1
 800b89c:	4652      	mov	r2, sl
 800b89e:	4641      	mov	r1, r8
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	47c8      	blx	r9
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	d103      	bne.n	800b8b0 <_printf_common+0xac>
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b0:	3501      	adds	r5, #1
 800b8b2:	e7c6      	b.n	800b842 <_printf_common+0x3e>
 800b8b4:	18e1      	adds	r1, r4, r3
 800b8b6:	1c5a      	adds	r2, r3, #1
 800b8b8:	2030      	movs	r0, #48	@ 0x30
 800b8ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8be:	4422      	add	r2, r4
 800b8c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8c8:	3302      	adds	r3, #2
 800b8ca:	e7c7      	b.n	800b85c <_printf_common+0x58>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	4622      	mov	r2, r4
 800b8d0:	4641      	mov	r1, r8
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	47c8      	blx	r9
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	d0e6      	beq.n	800b8a8 <_printf_common+0xa4>
 800b8da:	3601      	adds	r6, #1
 800b8dc:	e7d9      	b.n	800b892 <_printf_common+0x8e>
	...

0800b8e0 <_printf_i>:
 800b8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e4:	7e0f      	ldrb	r7, [r1, #24]
 800b8e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8e8:	2f78      	cmp	r7, #120	@ 0x78
 800b8ea:	4691      	mov	r9, r2
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	469a      	mov	sl, r3
 800b8f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8f6:	d807      	bhi.n	800b908 <_printf_i+0x28>
 800b8f8:	2f62      	cmp	r7, #98	@ 0x62
 800b8fa:	d80a      	bhi.n	800b912 <_printf_i+0x32>
 800b8fc:	2f00      	cmp	r7, #0
 800b8fe:	f000 80d1 	beq.w	800baa4 <_printf_i+0x1c4>
 800b902:	2f58      	cmp	r7, #88	@ 0x58
 800b904:	f000 80b8 	beq.w	800ba78 <_printf_i+0x198>
 800b908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b90c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b910:	e03a      	b.n	800b988 <_printf_i+0xa8>
 800b912:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b916:	2b15      	cmp	r3, #21
 800b918:	d8f6      	bhi.n	800b908 <_printf_i+0x28>
 800b91a:	a101      	add	r1, pc, #4	@ (adr r1, 800b920 <_printf_i+0x40>)
 800b91c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b920:	0800b979 	.word	0x0800b979
 800b924:	0800b98d 	.word	0x0800b98d
 800b928:	0800b909 	.word	0x0800b909
 800b92c:	0800b909 	.word	0x0800b909
 800b930:	0800b909 	.word	0x0800b909
 800b934:	0800b909 	.word	0x0800b909
 800b938:	0800b98d 	.word	0x0800b98d
 800b93c:	0800b909 	.word	0x0800b909
 800b940:	0800b909 	.word	0x0800b909
 800b944:	0800b909 	.word	0x0800b909
 800b948:	0800b909 	.word	0x0800b909
 800b94c:	0800ba8b 	.word	0x0800ba8b
 800b950:	0800b9b7 	.word	0x0800b9b7
 800b954:	0800ba45 	.word	0x0800ba45
 800b958:	0800b909 	.word	0x0800b909
 800b95c:	0800b909 	.word	0x0800b909
 800b960:	0800baad 	.word	0x0800baad
 800b964:	0800b909 	.word	0x0800b909
 800b968:	0800b9b7 	.word	0x0800b9b7
 800b96c:	0800b909 	.word	0x0800b909
 800b970:	0800b909 	.word	0x0800b909
 800b974:	0800ba4d 	.word	0x0800ba4d
 800b978:	6833      	ldr	r3, [r6, #0]
 800b97a:	1d1a      	adds	r2, r3, #4
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	6032      	str	r2, [r6, #0]
 800b980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b988:	2301      	movs	r3, #1
 800b98a:	e09c      	b.n	800bac6 <_printf_i+0x1e6>
 800b98c:	6833      	ldr	r3, [r6, #0]
 800b98e:	6820      	ldr	r0, [r4, #0]
 800b990:	1d19      	adds	r1, r3, #4
 800b992:	6031      	str	r1, [r6, #0]
 800b994:	0606      	lsls	r6, r0, #24
 800b996:	d501      	bpl.n	800b99c <_printf_i+0xbc>
 800b998:	681d      	ldr	r5, [r3, #0]
 800b99a:	e003      	b.n	800b9a4 <_printf_i+0xc4>
 800b99c:	0645      	lsls	r5, r0, #25
 800b99e:	d5fb      	bpl.n	800b998 <_printf_i+0xb8>
 800b9a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9a4:	2d00      	cmp	r5, #0
 800b9a6:	da03      	bge.n	800b9b0 <_printf_i+0xd0>
 800b9a8:	232d      	movs	r3, #45	@ 0x2d
 800b9aa:	426d      	negs	r5, r5
 800b9ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9b0:	4858      	ldr	r0, [pc, #352]	@ (800bb14 <_printf_i+0x234>)
 800b9b2:	230a      	movs	r3, #10
 800b9b4:	e011      	b.n	800b9da <_printf_i+0xfa>
 800b9b6:	6821      	ldr	r1, [r4, #0]
 800b9b8:	6833      	ldr	r3, [r6, #0]
 800b9ba:	0608      	lsls	r0, r1, #24
 800b9bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9c0:	d402      	bmi.n	800b9c8 <_printf_i+0xe8>
 800b9c2:	0649      	lsls	r1, r1, #25
 800b9c4:	bf48      	it	mi
 800b9c6:	b2ad      	uxthmi	r5, r5
 800b9c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9ca:	4852      	ldr	r0, [pc, #328]	@ (800bb14 <_printf_i+0x234>)
 800b9cc:	6033      	str	r3, [r6, #0]
 800b9ce:	bf14      	ite	ne
 800b9d0:	230a      	movne	r3, #10
 800b9d2:	2308      	moveq	r3, #8
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9da:	6866      	ldr	r6, [r4, #4]
 800b9dc:	60a6      	str	r6, [r4, #8]
 800b9de:	2e00      	cmp	r6, #0
 800b9e0:	db05      	blt.n	800b9ee <_printf_i+0x10e>
 800b9e2:	6821      	ldr	r1, [r4, #0]
 800b9e4:	432e      	orrs	r6, r5
 800b9e6:	f021 0104 	bic.w	r1, r1, #4
 800b9ea:	6021      	str	r1, [r4, #0]
 800b9ec:	d04b      	beq.n	800ba86 <_printf_i+0x1a6>
 800b9ee:	4616      	mov	r6, r2
 800b9f0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9f4:	fb03 5711 	mls	r7, r3, r1, r5
 800b9f8:	5dc7      	ldrb	r7, [r0, r7]
 800b9fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9fe:	462f      	mov	r7, r5
 800ba00:	42bb      	cmp	r3, r7
 800ba02:	460d      	mov	r5, r1
 800ba04:	d9f4      	bls.n	800b9f0 <_printf_i+0x110>
 800ba06:	2b08      	cmp	r3, #8
 800ba08:	d10b      	bne.n	800ba22 <_printf_i+0x142>
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	07df      	lsls	r7, r3, #31
 800ba0e:	d508      	bpl.n	800ba22 <_printf_i+0x142>
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	6861      	ldr	r1, [r4, #4]
 800ba14:	4299      	cmp	r1, r3
 800ba16:	bfde      	ittt	le
 800ba18:	2330      	movle	r3, #48	@ 0x30
 800ba1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ba22:	1b92      	subs	r2, r2, r6
 800ba24:	6122      	str	r2, [r4, #16]
 800ba26:	f8cd a000 	str.w	sl, [sp]
 800ba2a:	464b      	mov	r3, r9
 800ba2c:	aa03      	add	r2, sp, #12
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4640      	mov	r0, r8
 800ba32:	f7ff fee7 	bl	800b804 <_printf_common>
 800ba36:	3001      	adds	r0, #1
 800ba38:	d14a      	bne.n	800bad0 <_printf_i+0x1f0>
 800ba3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba3e:	b004      	add	sp, #16
 800ba40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	f043 0320 	orr.w	r3, r3, #32
 800ba4a:	6023      	str	r3, [r4, #0]
 800ba4c:	4832      	ldr	r0, [pc, #200]	@ (800bb18 <_printf_i+0x238>)
 800ba4e:	2778      	movs	r7, #120	@ 0x78
 800ba50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	6831      	ldr	r1, [r6, #0]
 800ba58:	061f      	lsls	r7, r3, #24
 800ba5a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba5e:	d402      	bmi.n	800ba66 <_printf_i+0x186>
 800ba60:	065f      	lsls	r7, r3, #25
 800ba62:	bf48      	it	mi
 800ba64:	b2ad      	uxthmi	r5, r5
 800ba66:	6031      	str	r1, [r6, #0]
 800ba68:	07d9      	lsls	r1, r3, #31
 800ba6a:	bf44      	itt	mi
 800ba6c:	f043 0320 	orrmi.w	r3, r3, #32
 800ba70:	6023      	strmi	r3, [r4, #0]
 800ba72:	b11d      	cbz	r5, 800ba7c <_printf_i+0x19c>
 800ba74:	2310      	movs	r3, #16
 800ba76:	e7ad      	b.n	800b9d4 <_printf_i+0xf4>
 800ba78:	4826      	ldr	r0, [pc, #152]	@ (800bb14 <_printf_i+0x234>)
 800ba7a:	e7e9      	b.n	800ba50 <_printf_i+0x170>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	f023 0320 	bic.w	r3, r3, #32
 800ba82:	6023      	str	r3, [r4, #0]
 800ba84:	e7f6      	b.n	800ba74 <_printf_i+0x194>
 800ba86:	4616      	mov	r6, r2
 800ba88:	e7bd      	b.n	800ba06 <_printf_i+0x126>
 800ba8a:	6833      	ldr	r3, [r6, #0]
 800ba8c:	6825      	ldr	r5, [r4, #0]
 800ba8e:	6961      	ldr	r1, [r4, #20]
 800ba90:	1d18      	adds	r0, r3, #4
 800ba92:	6030      	str	r0, [r6, #0]
 800ba94:	062e      	lsls	r6, r5, #24
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	d501      	bpl.n	800ba9e <_printf_i+0x1be>
 800ba9a:	6019      	str	r1, [r3, #0]
 800ba9c:	e002      	b.n	800baa4 <_printf_i+0x1c4>
 800ba9e:	0668      	lsls	r0, r5, #25
 800baa0:	d5fb      	bpl.n	800ba9a <_printf_i+0x1ba>
 800baa2:	8019      	strh	r1, [r3, #0]
 800baa4:	2300      	movs	r3, #0
 800baa6:	6123      	str	r3, [r4, #16]
 800baa8:	4616      	mov	r6, r2
 800baaa:	e7bc      	b.n	800ba26 <_printf_i+0x146>
 800baac:	6833      	ldr	r3, [r6, #0]
 800baae:	1d1a      	adds	r2, r3, #4
 800bab0:	6032      	str	r2, [r6, #0]
 800bab2:	681e      	ldr	r6, [r3, #0]
 800bab4:	6862      	ldr	r2, [r4, #4]
 800bab6:	2100      	movs	r1, #0
 800bab8:	4630      	mov	r0, r6
 800baba:	f7f4 fc39 	bl	8000330 <memchr>
 800babe:	b108      	cbz	r0, 800bac4 <_printf_i+0x1e4>
 800bac0:	1b80      	subs	r0, r0, r6
 800bac2:	6060      	str	r0, [r4, #4]
 800bac4:	6863      	ldr	r3, [r4, #4]
 800bac6:	6123      	str	r3, [r4, #16]
 800bac8:	2300      	movs	r3, #0
 800baca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bace:	e7aa      	b.n	800ba26 <_printf_i+0x146>
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	4632      	mov	r2, r6
 800bad4:	4649      	mov	r1, r9
 800bad6:	4640      	mov	r0, r8
 800bad8:	47d0      	blx	sl
 800bada:	3001      	adds	r0, #1
 800badc:	d0ad      	beq.n	800ba3a <_printf_i+0x15a>
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	079b      	lsls	r3, r3, #30
 800bae2:	d413      	bmi.n	800bb0c <_printf_i+0x22c>
 800bae4:	68e0      	ldr	r0, [r4, #12]
 800bae6:	9b03      	ldr	r3, [sp, #12]
 800bae8:	4298      	cmp	r0, r3
 800baea:	bfb8      	it	lt
 800baec:	4618      	movlt	r0, r3
 800baee:	e7a6      	b.n	800ba3e <_printf_i+0x15e>
 800baf0:	2301      	movs	r3, #1
 800baf2:	4632      	mov	r2, r6
 800baf4:	4649      	mov	r1, r9
 800baf6:	4640      	mov	r0, r8
 800baf8:	47d0      	blx	sl
 800bafa:	3001      	adds	r0, #1
 800bafc:	d09d      	beq.n	800ba3a <_printf_i+0x15a>
 800bafe:	3501      	adds	r5, #1
 800bb00:	68e3      	ldr	r3, [r4, #12]
 800bb02:	9903      	ldr	r1, [sp, #12]
 800bb04:	1a5b      	subs	r3, r3, r1
 800bb06:	42ab      	cmp	r3, r5
 800bb08:	dcf2      	bgt.n	800baf0 <_printf_i+0x210>
 800bb0a:	e7eb      	b.n	800bae4 <_printf_i+0x204>
 800bb0c:	2500      	movs	r5, #0
 800bb0e:	f104 0619 	add.w	r6, r4, #25
 800bb12:	e7f5      	b.n	800bb00 <_printf_i+0x220>
 800bb14:	0800e75a 	.word	0x0800e75a
 800bb18:	0800e76b 	.word	0x0800e76b

0800bb1c <siprintf>:
 800bb1c:	b40e      	push	{r1, r2, r3}
 800bb1e:	b510      	push	{r4, lr}
 800bb20:	b09d      	sub	sp, #116	@ 0x74
 800bb22:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bb24:	9002      	str	r0, [sp, #8]
 800bb26:	9006      	str	r0, [sp, #24]
 800bb28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb2c:	480a      	ldr	r0, [pc, #40]	@ (800bb58 <siprintf+0x3c>)
 800bb2e:	9107      	str	r1, [sp, #28]
 800bb30:	9104      	str	r1, [sp, #16]
 800bb32:	490a      	ldr	r1, [pc, #40]	@ (800bb5c <siprintf+0x40>)
 800bb34:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb38:	9105      	str	r1, [sp, #20]
 800bb3a:	2400      	movs	r4, #0
 800bb3c:	a902      	add	r1, sp, #8
 800bb3e:	6800      	ldr	r0, [r0, #0]
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bb44:	f000 ffd2 	bl	800caec <_svfiprintf_r>
 800bb48:	9b02      	ldr	r3, [sp, #8]
 800bb4a:	701c      	strb	r4, [r3, #0]
 800bb4c:	b01d      	add	sp, #116	@ 0x74
 800bb4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb52:	b003      	add	sp, #12
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	24000028 	.word	0x24000028
 800bb5c:	ffff0208 	.word	0xffff0208

0800bb60 <std>:
 800bb60:	2300      	movs	r3, #0
 800bb62:	b510      	push	{r4, lr}
 800bb64:	4604      	mov	r4, r0
 800bb66:	e9c0 3300 	strd	r3, r3, [r0]
 800bb6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb6e:	6083      	str	r3, [r0, #8]
 800bb70:	8181      	strh	r1, [r0, #12]
 800bb72:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb74:	81c2      	strh	r2, [r0, #14]
 800bb76:	6183      	str	r3, [r0, #24]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	2208      	movs	r2, #8
 800bb7c:	305c      	adds	r0, #92	@ 0x5c
 800bb7e:	f000 f929 	bl	800bdd4 <memset>
 800bb82:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb8 <std+0x58>)
 800bb84:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb86:	4b0d      	ldr	r3, [pc, #52]	@ (800bbbc <std+0x5c>)
 800bb88:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc0 <std+0x60>)
 800bb8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc4 <std+0x64>)
 800bb90:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb92:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc8 <std+0x68>)
 800bb94:	6224      	str	r4, [r4, #32]
 800bb96:	429c      	cmp	r4, r3
 800bb98:	d006      	beq.n	800bba8 <std+0x48>
 800bb9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb9e:	4294      	cmp	r4, r2
 800bba0:	d002      	beq.n	800bba8 <std+0x48>
 800bba2:	33d0      	adds	r3, #208	@ 0xd0
 800bba4:	429c      	cmp	r4, r3
 800bba6:	d105      	bne.n	800bbb4 <std+0x54>
 800bba8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bbac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbb0:	f000 b942 	b.w	800be38 <__retarget_lock_init_recursive>
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	bf00      	nop
 800bbb8:	0800d921 	.word	0x0800d921
 800bbbc:	0800d943 	.word	0x0800d943
 800bbc0:	0800d97b 	.word	0x0800d97b
 800bbc4:	0800d99f 	.word	0x0800d99f
 800bbc8:	24000984 	.word	0x24000984

0800bbcc <stdio_exit_handler>:
 800bbcc:	4a02      	ldr	r2, [pc, #8]	@ (800bbd8 <stdio_exit_handler+0xc>)
 800bbce:	4903      	ldr	r1, [pc, #12]	@ (800bbdc <stdio_exit_handler+0x10>)
 800bbd0:	4803      	ldr	r0, [pc, #12]	@ (800bbe0 <stdio_exit_handler+0x14>)
 800bbd2:	f000 b869 	b.w	800bca8 <_fwalk_sglue>
 800bbd6:	bf00      	nop
 800bbd8:	2400001c 	.word	0x2400001c
 800bbdc:	0800d1c5 	.word	0x0800d1c5
 800bbe0:	2400002c 	.word	0x2400002c

0800bbe4 <cleanup_stdio>:
 800bbe4:	6841      	ldr	r1, [r0, #4]
 800bbe6:	4b0c      	ldr	r3, [pc, #48]	@ (800bc18 <cleanup_stdio+0x34>)
 800bbe8:	4299      	cmp	r1, r3
 800bbea:	b510      	push	{r4, lr}
 800bbec:	4604      	mov	r4, r0
 800bbee:	d001      	beq.n	800bbf4 <cleanup_stdio+0x10>
 800bbf0:	f001 fae8 	bl	800d1c4 <_fflush_r>
 800bbf4:	68a1      	ldr	r1, [r4, #8]
 800bbf6:	4b09      	ldr	r3, [pc, #36]	@ (800bc1c <cleanup_stdio+0x38>)
 800bbf8:	4299      	cmp	r1, r3
 800bbfa:	d002      	beq.n	800bc02 <cleanup_stdio+0x1e>
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f001 fae1 	bl	800d1c4 <_fflush_r>
 800bc02:	68e1      	ldr	r1, [r4, #12]
 800bc04:	4b06      	ldr	r3, [pc, #24]	@ (800bc20 <cleanup_stdio+0x3c>)
 800bc06:	4299      	cmp	r1, r3
 800bc08:	d004      	beq.n	800bc14 <cleanup_stdio+0x30>
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc10:	f001 bad8 	b.w	800d1c4 <_fflush_r>
 800bc14:	bd10      	pop	{r4, pc}
 800bc16:	bf00      	nop
 800bc18:	24000984 	.word	0x24000984
 800bc1c:	240009ec 	.word	0x240009ec
 800bc20:	24000a54 	.word	0x24000a54

0800bc24 <global_stdio_init.part.0>:
 800bc24:	b510      	push	{r4, lr}
 800bc26:	4b0b      	ldr	r3, [pc, #44]	@ (800bc54 <global_stdio_init.part.0+0x30>)
 800bc28:	4c0b      	ldr	r4, [pc, #44]	@ (800bc58 <global_stdio_init.part.0+0x34>)
 800bc2a:	4a0c      	ldr	r2, [pc, #48]	@ (800bc5c <global_stdio_init.part.0+0x38>)
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	4620      	mov	r0, r4
 800bc30:	2200      	movs	r2, #0
 800bc32:	2104      	movs	r1, #4
 800bc34:	f7ff ff94 	bl	800bb60 <std>
 800bc38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	2109      	movs	r1, #9
 800bc40:	f7ff ff8e 	bl	800bb60 <std>
 800bc44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc48:	2202      	movs	r2, #2
 800bc4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc4e:	2112      	movs	r1, #18
 800bc50:	f7ff bf86 	b.w	800bb60 <std>
 800bc54:	24000abc 	.word	0x24000abc
 800bc58:	24000984 	.word	0x24000984
 800bc5c:	0800bbcd 	.word	0x0800bbcd

0800bc60 <__sfp_lock_acquire>:
 800bc60:	4801      	ldr	r0, [pc, #4]	@ (800bc68 <__sfp_lock_acquire+0x8>)
 800bc62:	f000 b8ea 	b.w	800be3a <__retarget_lock_acquire_recursive>
 800bc66:	bf00      	nop
 800bc68:	24000ac1 	.word	0x24000ac1

0800bc6c <__sfp_lock_release>:
 800bc6c:	4801      	ldr	r0, [pc, #4]	@ (800bc74 <__sfp_lock_release+0x8>)
 800bc6e:	f000 b8e5 	b.w	800be3c <__retarget_lock_release_recursive>
 800bc72:	bf00      	nop
 800bc74:	24000ac1 	.word	0x24000ac1

0800bc78 <__sinit>:
 800bc78:	b510      	push	{r4, lr}
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	f7ff fff0 	bl	800bc60 <__sfp_lock_acquire>
 800bc80:	6a23      	ldr	r3, [r4, #32]
 800bc82:	b11b      	cbz	r3, 800bc8c <__sinit+0x14>
 800bc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc88:	f7ff bff0 	b.w	800bc6c <__sfp_lock_release>
 800bc8c:	4b04      	ldr	r3, [pc, #16]	@ (800bca0 <__sinit+0x28>)
 800bc8e:	6223      	str	r3, [r4, #32]
 800bc90:	4b04      	ldr	r3, [pc, #16]	@ (800bca4 <__sinit+0x2c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1f5      	bne.n	800bc84 <__sinit+0xc>
 800bc98:	f7ff ffc4 	bl	800bc24 <global_stdio_init.part.0>
 800bc9c:	e7f2      	b.n	800bc84 <__sinit+0xc>
 800bc9e:	bf00      	nop
 800bca0:	0800bbe5 	.word	0x0800bbe5
 800bca4:	24000abc 	.word	0x24000abc

0800bca8 <_fwalk_sglue>:
 800bca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcac:	4607      	mov	r7, r0
 800bcae:	4688      	mov	r8, r1
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	2600      	movs	r6, #0
 800bcb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcb8:	f1b9 0901 	subs.w	r9, r9, #1
 800bcbc:	d505      	bpl.n	800bcca <_fwalk_sglue+0x22>
 800bcbe:	6824      	ldr	r4, [r4, #0]
 800bcc0:	2c00      	cmp	r4, #0
 800bcc2:	d1f7      	bne.n	800bcb4 <_fwalk_sglue+0xc>
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcca:	89ab      	ldrh	r3, [r5, #12]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d907      	bls.n	800bce0 <_fwalk_sglue+0x38>
 800bcd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	d003      	beq.n	800bce0 <_fwalk_sglue+0x38>
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4638      	mov	r0, r7
 800bcdc:	47c0      	blx	r8
 800bcde:	4306      	orrs	r6, r0
 800bce0:	3568      	adds	r5, #104	@ 0x68
 800bce2:	e7e9      	b.n	800bcb8 <_fwalk_sglue+0x10>

0800bce4 <iprintf>:
 800bce4:	b40f      	push	{r0, r1, r2, r3}
 800bce6:	b507      	push	{r0, r1, r2, lr}
 800bce8:	4906      	ldr	r1, [pc, #24]	@ (800bd04 <iprintf+0x20>)
 800bcea:	ab04      	add	r3, sp, #16
 800bcec:	6808      	ldr	r0, [r1, #0]
 800bcee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf2:	6881      	ldr	r1, [r0, #8]
 800bcf4:	9301      	str	r3, [sp, #4]
 800bcf6:	f001 f81f 	bl	800cd38 <_vfiprintf_r>
 800bcfa:	b003      	add	sp, #12
 800bcfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd00:	b004      	add	sp, #16
 800bd02:	4770      	bx	lr
 800bd04:	24000028 	.word	0x24000028

0800bd08 <putchar>:
 800bd08:	4b02      	ldr	r3, [pc, #8]	@ (800bd14 <putchar+0xc>)
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	6818      	ldr	r0, [r3, #0]
 800bd0e:	6882      	ldr	r2, [r0, #8]
 800bd10:	f001 bf6e 	b.w	800dbf0 <_putc_r>
 800bd14:	24000028 	.word	0x24000028

0800bd18 <_puts_r>:
 800bd18:	6a03      	ldr	r3, [r0, #32]
 800bd1a:	b570      	push	{r4, r5, r6, lr}
 800bd1c:	6884      	ldr	r4, [r0, #8]
 800bd1e:	4605      	mov	r5, r0
 800bd20:	460e      	mov	r6, r1
 800bd22:	b90b      	cbnz	r3, 800bd28 <_puts_r+0x10>
 800bd24:	f7ff ffa8 	bl	800bc78 <__sinit>
 800bd28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd2a:	07db      	lsls	r3, r3, #31
 800bd2c:	d405      	bmi.n	800bd3a <_puts_r+0x22>
 800bd2e:	89a3      	ldrh	r3, [r4, #12]
 800bd30:	0598      	lsls	r0, r3, #22
 800bd32:	d402      	bmi.n	800bd3a <_puts_r+0x22>
 800bd34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd36:	f000 f880 	bl	800be3a <__retarget_lock_acquire_recursive>
 800bd3a:	89a3      	ldrh	r3, [r4, #12]
 800bd3c:	0719      	lsls	r1, r3, #28
 800bd3e:	d502      	bpl.n	800bd46 <_puts_r+0x2e>
 800bd40:	6923      	ldr	r3, [r4, #16]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d135      	bne.n	800bdb2 <_puts_r+0x9a>
 800bd46:	4621      	mov	r1, r4
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f001 fe99 	bl	800da80 <__swsetup_r>
 800bd4e:	b380      	cbz	r0, 800bdb2 <_puts_r+0x9a>
 800bd50:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bd54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd56:	07da      	lsls	r2, r3, #31
 800bd58:	d405      	bmi.n	800bd66 <_puts_r+0x4e>
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	059b      	lsls	r3, r3, #22
 800bd5e:	d402      	bmi.n	800bd66 <_puts_r+0x4e>
 800bd60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd62:	f000 f86b 	bl	800be3c <__retarget_lock_release_recursive>
 800bd66:	4628      	mov	r0, r5
 800bd68:	bd70      	pop	{r4, r5, r6, pc}
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	da04      	bge.n	800bd78 <_puts_r+0x60>
 800bd6e:	69a2      	ldr	r2, [r4, #24]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	dc17      	bgt.n	800bda4 <_puts_r+0x8c>
 800bd74:	290a      	cmp	r1, #10
 800bd76:	d015      	beq.n	800bda4 <_puts_r+0x8c>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	6022      	str	r2, [r4, #0]
 800bd7e:	7019      	strb	r1, [r3, #0]
 800bd80:	68a3      	ldr	r3, [r4, #8]
 800bd82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd86:	3b01      	subs	r3, #1
 800bd88:	60a3      	str	r3, [r4, #8]
 800bd8a:	2900      	cmp	r1, #0
 800bd8c:	d1ed      	bne.n	800bd6a <_puts_r+0x52>
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	da11      	bge.n	800bdb6 <_puts_r+0x9e>
 800bd92:	4622      	mov	r2, r4
 800bd94:	210a      	movs	r1, #10
 800bd96:	4628      	mov	r0, r5
 800bd98:	f001 fe33 	bl	800da02 <__swbuf_r>
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	d0d7      	beq.n	800bd50 <_puts_r+0x38>
 800bda0:	250a      	movs	r5, #10
 800bda2:	e7d7      	b.n	800bd54 <_puts_r+0x3c>
 800bda4:	4622      	mov	r2, r4
 800bda6:	4628      	mov	r0, r5
 800bda8:	f001 fe2b 	bl	800da02 <__swbuf_r>
 800bdac:	3001      	adds	r0, #1
 800bdae:	d1e7      	bne.n	800bd80 <_puts_r+0x68>
 800bdb0:	e7ce      	b.n	800bd50 <_puts_r+0x38>
 800bdb2:	3e01      	subs	r6, #1
 800bdb4:	e7e4      	b.n	800bd80 <_puts_r+0x68>
 800bdb6:	6823      	ldr	r3, [r4, #0]
 800bdb8:	1c5a      	adds	r2, r3, #1
 800bdba:	6022      	str	r2, [r4, #0]
 800bdbc:	220a      	movs	r2, #10
 800bdbe:	701a      	strb	r2, [r3, #0]
 800bdc0:	e7ee      	b.n	800bda0 <_puts_r+0x88>
	...

0800bdc4 <puts>:
 800bdc4:	4b02      	ldr	r3, [pc, #8]	@ (800bdd0 <puts+0xc>)
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	f7ff bfa5 	b.w	800bd18 <_puts_r>
 800bdce:	bf00      	nop
 800bdd0:	24000028 	.word	0x24000028

0800bdd4 <memset>:
 800bdd4:	4402      	add	r2, r0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d100      	bne.n	800bdde <memset+0xa>
 800bddc:	4770      	bx	lr
 800bdde:	f803 1b01 	strb.w	r1, [r3], #1
 800bde2:	e7f9      	b.n	800bdd8 <memset+0x4>

0800bde4 <__errno>:
 800bde4:	4b01      	ldr	r3, [pc, #4]	@ (800bdec <__errno+0x8>)
 800bde6:	6818      	ldr	r0, [r3, #0]
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	24000028 	.word	0x24000028

0800bdf0 <__libc_init_array>:
 800bdf0:	b570      	push	{r4, r5, r6, lr}
 800bdf2:	4d0d      	ldr	r5, [pc, #52]	@ (800be28 <__libc_init_array+0x38>)
 800bdf4:	4c0d      	ldr	r4, [pc, #52]	@ (800be2c <__libc_init_array+0x3c>)
 800bdf6:	1b64      	subs	r4, r4, r5
 800bdf8:	10a4      	asrs	r4, r4, #2
 800bdfa:	2600      	movs	r6, #0
 800bdfc:	42a6      	cmp	r6, r4
 800bdfe:	d109      	bne.n	800be14 <__libc_init_array+0x24>
 800be00:	4d0b      	ldr	r5, [pc, #44]	@ (800be30 <__libc_init_array+0x40>)
 800be02:	4c0c      	ldr	r4, [pc, #48]	@ (800be34 <__libc_init_array+0x44>)
 800be04:	f002 f9ea 	bl	800e1dc <_init>
 800be08:	1b64      	subs	r4, r4, r5
 800be0a:	10a4      	asrs	r4, r4, #2
 800be0c:	2600      	movs	r6, #0
 800be0e:	42a6      	cmp	r6, r4
 800be10:	d105      	bne.n	800be1e <__libc_init_array+0x2e>
 800be12:	bd70      	pop	{r4, r5, r6, pc}
 800be14:	f855 3b04 	ldr.w	r3, [r5], #4
 800be18:	4798      	blx	r3
 800be1a:	3601      	adds	r6, #1
 800be1c:	e7ee      	b.n	800bdfc <__libc_init_array+0xc>
 800be1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800be22:	4798      	blx	r3
 800be24:	3601      	adds	r6, #1
 800be26:	e7f2      	b.n	800be0e <__libc_init_array+0x1e>
 800be28:	0800ead8 	.word	0x0800ead8
 800be2c:	0800ead8 	.word	0x0800ead8
 800be30:	0800ead8 	.word	0x0800ead8
 800be34:	0800eadc 	.word	0x0800eadc

0800be38 <__retarget_lock_init_recursive>:
 800be38:	4770      	bx	lr

0800be3a <__retarget_lock_acquire_recursive>:
 800be3a:	4770      	bx	lr

0800be3c <__retarget_lock_release_recursive>:
 800be3c:	4770      	bx	lr
	...

0800be40 <_localeconv_r>:
 800be40:	4800      	ldr	r0, [pc, #0]	@ (800be44 <_localeconv_r+0x4>)
 800be42:	4770      	bx	lr
 800be44:	24000168 	.word	0x24000168

0800be48 <memcpy>:
 800be48:	440a      	add	r2, r1
 800be4a:	4291      	cmp	r1, r2
 800be4c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800be50:	d100      	bne.n	800be54 <memcpy+0xc>
 800be52:	4770      	bx	lr
 800be54:	b510      	push	{r4, lr}
 800be56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be5e:	4291      	cmp	r1, r2
 800be60:	d1f9      	bne.n	800be56 <memcpy+0xe>
 800be62:	bd10      	pop	{r4, pc}

0800be64 <quorem>:
 800be64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be68:	6903      	ldr	r3, [r0, #16]
 800be6a:	690c      	ldr	r4, [r1, #16]
 800be6c:	42a3      	cmp	r3, r4
 800be6e:	4607      	mov	r7, r0
 800be70:	db7e      	blt.n	800bf70 <quorem+0x10c>
 800be72:	3c01      	subs	r4, #1
 800be74:	f101 0814 	add.w	r8, r1, #20
 800be78:	00a3      	lsls	r3, r4, #2
 800be7a:	f100 0514 	add.w	r5, r0, #20
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be8e:	3301      	adds	r3, #1
 800be90:	429a      	cmp	r2, r3
 800be92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be96:	fbb2 f6f3 	udiv	r6, r2, r3
 800be9a:	d32e      	bcc.n	800befa <quorem+0x96>
 800be9c:	f04f 0a00 	mov.w	sl, #0
 800bea0:	46c4      	mov	ip, r8
 800bea2:	46ae      	mov	lr, r5
 800bea4:	46d3      	mov	fp, sl
 800bea6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800beaa:	b298      	uxth	r0, r3
 800beac:	fb06 a000 	mla	r0, r6, r0, sl
 800beb0:	0c02      	lsrs	r2, r0, #16
 800beb2:	0c1b      	lsrs	r3, r3, #16
 800beb4:	fb06 2303 	mla	r3, r6, r3, r2
 800beb8:	f8de 2000 	ldr.w	r2, [lr]
 800bebc:	b280      	uxth	r0, r0
 800bebe:	b292      	uxth	r2, r2
 800bec0:	1a12      	subs	r2, r2, r0
 800bec2:	445a      	add	r2, fp
 800bec4:	f8de 0000 	ldr.w	r0, [lr]
 800bec8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800becc:	b29b      	uxth	r3, r3
 800bece:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bed2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bed6:	b292      	uxth	r2, r2
 800bed8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bedc:	45e1      	cmp	r9, ip
 800bede:	f84e 2b04 	str.w	r2, [lr], #4
 800bee2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bee6:	d2de      	bcs.n	800bea6 <quorem+0x42>
 800bee8:	9b00      	ldr	r3, [sp, #0]
 800beea:	58eb      	ldr	r3, [r5, r3]
 800beec:	b92b      	cbnz	r3, 800befa <quorem+0x96>
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	3b04      	subs	r3, #4
 800bef2:	429d      	cmp	r5, r3
 800bef4:	461a      	mov	r2, r3
 800bef6:	d32f      	bcc.n	800bf58 <quorem+0xf4>
 800bef8:	613c      	str	r4, [r7, #16]
 800befa:	4638      	mov	r0, r7
 800befc:	f001 fc08 	bl	800d710 <__mcmp>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	db25      	blt.n	800bf50 <quorem+0xec>
 800bf04:	4629      	mov	r1, r5
 800bf06:	2000      	movs	r0, #0
 800bf08:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf0c:	f8d1 c000 	ldr.w	ip, [r1]
 800bf10:	fa1f fe82 	uxth.w	lr, r2
 800bf14:	fa1f f38c 	uxth.w	r3, ip
 800bf18:	eba3 030e 	sub.w	r3, r3, lr
 800bf1c:	4403      	add	r3, r0
 800bf1e:	0c12      	lsrs	r2, r2, #16
 800bf20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf2e:	45c1      	cmp	r9, r8
 800bf30:	f841 3b04 	str.w	r3, [r1], #4
 800bf34:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf38:	d2e6      	bcs.n	800bf08 <quorem+0xa4>
 800bf3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf42:	b922      	cbnz	r2, 800bf4e <quorem+0xea>
 800bf44:	3b04      	subs	r3, #4
 800bf46:	429d      	cmp	r5, r3
 800bf48:	461a      	mov	r2, r3
 800bf4a:	d30b      	bcc.n	800bf64 <quorem+0x100>
 800bf4c:	613c      	str	r4, [r7, #16]
 800bf4e:	3601      	adds	r6, #1
 800bf50:	4630      	mov	r0, r6
 800bf52:	b003      	add	sp, #12
 800bf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf58:	6812      	ldr	r2, [r2, #0]
 800bf5a:	3b04      	subs	r3, #4
 800bf5c:	2a00      	cmp	r2, #0
 800bf5e:	d1cb      	bne.n	800bef8 <quorem+0x94>
 800bf60:	3c01      	subs	r4, #1
 800bf62:	e7c6      	b.n	800bef2 <quorem+0x8e>
 800bf64:	6812      	ldr	r2, [r2, #0]
 800bf66:	3b04      	subs	r3, #4
 800bf68:	2a00      	cmp	r2, #0
 800bf6a:	d1ef      	bne.n	800bf4c <quorem+0xe8>
 800bf6c:	3c01      	subs	r4, #1
 800bf6e:	e7ea      	b.n	800bf46 <quorem+0xe2>
 800bf70:	2000      	movs	r0, #0
 800bf72:	e7ee      	b.n	800bf52 <quorem+0xee>
 800bf74:	0000      	movs	r0, r0
	...

0800bf78 <_dtoa_r>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	ed2d 8b02 	vpush	{d8}
 800bf80:	69c7      	ldr	r7, [r0, #28]
 800bf82:	b091      	sub	sp, #68	@ 0x44
 800bf84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bf88:	ec55 4b10 	vmov	r4, r5, d0
 800bf8c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800bf8e:	9107      	str	r1, [sp, #28]
 800bf90:	4681      	mov	r9, r0
 800bf92:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf94:	930d      	str	r3, [sp, #52]	@ 0x34
 800bf96:	b97f      	cbnz	r7, 800bfb8 <_dtoa_r+0x40>
 800bf98:	2010      	movs	r0, #16
 800bf9a:	f000 ffe5 	bl	800cf68 <malloc>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	f8c9 001c 	str.w	r0, [r9, #28]
 800bfa4:	b920      	cbnz	r0, 800bfb0 <_dtoa_r+0x38>
 800bfa6:	4ba0      	ldr	r3, [pc, #640]	@ (800c228 <_dtoa_r+0x2b0>)
 800bfa8:	21ef      	movs	r1, #239	@ 0xef
 800bfaa:	48a0      	ldr	r0, [pc, #640]	@ (800c22c <_dtoa_r+0x2b4>)
 800bfac:	f001 fee6 	bl	800dd7c <__assert_func>
 800bfb0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bfb4:	6007      	str	r7, [r0, #0]
 800bfb6:	60c7      	str	r7, [r0, #12]
 800bfb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bfbc:	6819      	ldr	r1, [r3, #0]
 800bfbe:	b159      	cbz	r1, 800bfd8 <_dtoa_r+0x60>
 800bfc0:	685a      	ldr	r2, [r3, #4]
 800bfc2:	604a      	str	r2, [r1, #4]
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	4093      	lsls	r3, r2
 800bfc8:	608b      	str	r3, [r1, #8]
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f001 f96e 	bl	800d2ac <_Bfree>
 800bfd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	1e2b      	subs	r3, r5, #0
 800bfda:	bfbb      	ittet	lt
 800bfdc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bfe0:	9303      	strlt	r3, [sp, #12]
 800bfe2:	2300      	movge	r3, #0
 800bfe4:	2201      	movlt	r2, #1
 800bfe6:	bfac      	ite	ge
 800bfe8:	6033      	strge	r3, [r6, #0]
 800bfea:	6032      	strlt	r2, [r6, #0]
 800bfec:	4b90      	ldr	r3, [pc, #576]	@ (800c230 <_dtoa_r+0x2b8>)
 800bfee:	9e03      	ldr	r6, [sp, #12]
 800bff0:	43b3      	bics	r3, r6
 800bff2:	d110      	bne.n	800c016 <_dtoa_r+0x9e>
 800bff4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bff6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bffa:	6013      	str	r3, [r2, #0]
 800bffc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c000:	4323      	orrs	r3, r4
 800c002:	f000 84e6 	beq.w	800c9d2 <_dtoa_r+0xa5a>
 800c006:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c008:	4f8a      	ldr	r7, [pc, #552]	@ (800c234 <_dtoa_r+0x2bc>)
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 84e8 	beq.w	800c9e0 <_dtoa_r+0xa68>
 800c010:	1cfb      	adds	r3, r7, #3
 800c012:	f000 bce3 	b.w	800c9dc <_dtoa_r+0xa64>
 800c016:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c01a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c022:	d10a      	bne.n	800c03a <_dtoa_r+0xc2>
 800c024:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c026:	2301      	movs	r3, #1
 800c028:	6013      	str	r3, [r2, #0]
 800c02a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c02c:	b113      	cbz	r3, 800c034 <_dtoa_r+0xbc>
 800c02e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c030:	4b81      	ldr	r3, [pc, #516]	@ (800c238 <_dtoa_r+0x2c0>)
 800c032:	6013      	str	r3, [r2, #0]
 800c034:	4f81      	ldr	r7, [pc, #516]	@ (800c23c <_dtoa_r+0x2c4>)
 800c036:	f000 bcd3 	b.w	800c9e0 <_dtoa_r+0xa68>
 800c03a:	aa0e      	add	r2, sp, #56	@ 0x38
 800c03c:	a90f      	add	r1, sp, #60	@ 0x3c
 800c03e:	4648      	mov	r0, r9
 800c040:	eeb0 0b48 	vmov.f64	d0, d8
 800c044:	f001 fc14 	bl	800d870 <__d2b>
 800c048:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c04c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c04e:	9001      	str	r0, [sp, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d045      	beq.n	800c0e0 <_dtoa_r+0x168>
 800c054:	eeb0 7b48 	vmov.f64	d7, d8
 800c058:	ee18 1a90 	vmov	r1, s17
 800c05c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c060:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c064:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c068:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c06c:	2500      	movs	r5, #0
 800c06e:	ee07 1a90 	vmov	s15, r1
 800c072:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c076:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c210 <_dtoa_r+0x298>
 800c07a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c07e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c218 <_dtoa_r+0x2a0>
 800c082:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c086:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c220 <_dtoa_r+0x2a8>
 800c08a:	ee07 3a90 	vmov	s15, r3
 800c08e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c092:	eeb0 7b46 	vmov.f64	d7, d6
 800c096:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c09a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c09e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a6:	ee16 8a90 	vmov	r8, s13
 800c0aa:	d508      	bpl.n	800c0be <_dtoa_r+0x146>
 800c0ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c0b0:	eeb4 6b47 	vcmp.f64	d6, d7
 800c0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b8:	bf18      	it	ne
 800c0ba:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800c0be:	f1b8 0f16 	cmp.w	r8, #22
 800c0c2:	d82b      	bhi.n	800c11c <_dtoa_r+0x1a4>
 800c0c4:	495e      	ldr	r1, [pc, #376]	@ (800c240 <_dtoa_r+0x2c8>)
 800c0c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c0ca:	ed91 7b00 	vldr	d7, [r1]
 800c0ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d6:	d501      	bpl.n	800c0dc <_dtoa_r+0x164>
 800c0d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c0dc:	2100      	movs	r1, #0
 800c0de:	e01e      	b.n	800c11e <_dtoa_r+0x1a6>
 800c0e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c0e8:	2920      	cmp	r1, #32
 800c0ea:	bfc1      	itttt	gt
 800c0ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c0f0:	408e      	lslgt	r6, r1
 800c0f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c0f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c0fa:	bfd6      	itet	le
 800c0fc:	f1c1 0120 	rsble	r1, r1, #32
 800c100:	4331      	orrgt	r1, r6
 800c102:	fa04 f101 	lslle.w	r1, r4, r1
 800c106:	ee07 1a90 	vmov	s15, r1
 800c10a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c10e:	3b01      	subs	r3, #1
 800c110:	ee17 1a90 	vmov	r1, s15
 800c114:	2501      	movs	r5, #1
 800c116:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c11a:	e7a8      	b.n	800c06e <_dtoa_r+0xf6>
 800c11c:	2101      	movs	r1, #1
 800c11e:	1ad2      	subs	r2, r2, r3
 800c120:	1e53      	subs	r3, r2, #1
 800c122:	9306      	str	r3, [sp, #24]
 800c124:	bf45      	ittet	mi
 800c126:	f1c2 0301 	rsbmi	r3, r2, #1
 800c12a:	9304      	strmi	r3, [sp, #16]
 800c12c:	2300      	movpl	r3, #0
 800c12e:	2300      	movmi	r3, #0
 800c130:	bf4c      	ite	mi
 800c132:	9306      	strmi	r3, [sp, #24]
 800c134:	9304      	strpl	r3, [sp, #16]
 800c136:	f1b8 0f00 	cmp.w	r8, #0
 800c13a:	910c      	str	r1, [sp, #48]	@ 0x30
 800c13c:	db18      	blt.n	800c170 <_dtoa_r+0x1f8>
 800c13e:	9b06      	ldr	r3, [sp, #24]
 800c140:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c144:	4443      	add	r3, r8
 800c146:	9306      	str	r3, [sp, #24]
 800c148:	2300      	movs	r3, #0
 800c14a:	9a07      	ldr	r2, [sp, #28]
 800c14c:	2a09      	cmp	r2, #9
 800c14e:	d845      	bhi.n	800c1dc <_dtoa_r+0x264>
 800c150:	2a05      	cmp	r2, #5
 800c152:	bfc4      	itt	gt
 800c154:	3a04      	subgt	r2, #4
 800c156:	9207      	strgt	r2, [sp, #28]
 800c158:	9a07      	ldr	r2, [sp, #28]
 800c15a:	f1a2 0202 	sub.w	r2, r2, #2
 800c15e:	bfcc      	ite	gt
 800c160:	2400      	movgt	r4, #0
 800c162:	2401      	movle	r4, #1
 800c164:	2a03      	cmp	r2, #3
 800c166:	d844      	bhi.n	800c1f2 <_dtoa_r+0x27a>
 800c168:	e8df f002 	tbb	[pc, r2]
 800c16c:	0b173634 	.word	0x0b173634
 800c170:	9b04      	ldr	r3, [sp, #16]
 800c172:	2200      	movs	r2, #0
 800c174:	eba3 0308 	sub.w	r3, r3, r8
 800c178:	9304      	str	r3, [sp, #16]
 800c17a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c17c:	f1c8 0300 	rsb	r3, r8, #0
 800c180:	e7e3      	b.n	800c14a <_dtoa_r+0x1d2>
 800c182:	2201      	movs	r2, #1
 800c184:	9208      	str	r2, [sp, #32]
 800c186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c188:	eb08 0b02 	add.w	fp, r8, r2
 800c18c:	f10b 0a01 	add.w	sl, fp, #1
 800c190:	4652      	mov	r2, sl
 800c192:	2a01      	cmp	r2, #1
 800c194:	bfb8      	it	lt
 800c196:	2201      	movlt	r2, #1
 800c198:	e006      	b.n	800c1a8 <_dtoa_r+0x230>
 800c19a:	2201      	movs	r2, #1
 800c19c:	9208      	str	r2, [sp, #32]
 800c19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	dd29      	ble.n	800c1f8 <_dtoa_r+0x280>
 800c1a4:	4693      	mov	fp, r2
 800c1a6:	4692      	mov	sl, r2
 800c1a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	2004      	movs	r0, #4
 800c1b0:	f100 0614 	add.w	r6, r0, #20
 800c1b4:	4296      	cmp	r6, r2
 800c1b6:	d926      	bls.n	800c206 <_dtoa_r+0x28e>
 800c1b8:	6079      	str	r1, [r7, #4]
 800c1ba:	4648      	mov	r0, r9
 800c1bc:	9305      	str	r3, [sp, #20]
 800c1be:	f001 f835 	bl	800d22c <_Balloc>
 800c1c2:	9b05      	ldr	r3, [sp, #20]
 800c1c4:	4607      	mov	r7, r0
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d13e      	bne.n	800c248 <_dtoa_r+0x2d0>
 800c1ca:	4b1e      	ldr	r3, [pc, #120]	@ (800c244 <_dtoa_r+0x2cc>)
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800c1d2:	e6ea      	b.n	800bfaa <_dtoa_r+0x32>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	e7e1      	b.n	800c19c <_dtoa_r+0x224>
 800c1d8:	2200      	movs	r2, #0
 800c1da:	e7d3      	b.n	800c184 <_dtoa_r+0x20c>
 800c1dc:	2401      	movs	r4, #1
 800c1de:	2200      	movs	r2, #0
 800c1e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c1e4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	46da      	mov	sl, fp
 800c1ec:	2212      	movs	r2, #18
 800c1ee:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1f0:	e7da      	b.n	800c1a8 <_dtoa_r+0x230>
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	9208      	str	r2, [sp, #32]
 800c1f6:	e7f5      	b.n	800c1e4 <_dtoa_r+0x26c>
 800c1f8:	f04f 0b01 	mov.w	fp, #1
 800c1fc:	46da      	mov	sl, fp
 800c1fe:	465a      	mov	r2, fp
 800c200:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c204:	e7d0      	b.n	800c1a8 <_dtoa_r+0x230>
 800c206:	3101      	adds	r1, #1
 800c208:	0040      	lsls	r0, r0, #1
 800c20a:	e7d1      	b.n	800c1b0 <_dtoa_r+0x238>
 800c20c:	f3af 8000 	nop.w
 800c210:	636f4361 	.word	0x636f4361
 800c214:	3fd287a7 	.word	0x3fd287a7
 800c218:	8b60c8b3 	.word	0x8b60c8b3
 800c21c:	3fc68a28 	.word	0x3fc68a28
 800c220:	509f79fb 	.word	0x509f79fb
 800c224:	3fd34413 	.word	0x3fd34413
 800c228:	0800e789 	.word	0x0800e789
 800c22c:	0800e7a0 	.word	0x0800e7a0
 800c230:	7ff00000 	.word	0x7ff00000
 800c234:	0800e785 	.word	0x0800e785
 800c238:	0800e759 	.word	0x0800e759
 800c23c:	0800e758 	.word	0x0800e758
 800c240:	0800e8f0 	.word	0x0800e8f0
 800c244:	0800e7f8 	.word	0x0800e7f8
 800c248:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c24c:	f1ba 0f0e 	cmp.w	sl, #14
 800c250:	6010      	str	r0, [r2, #0]
 800c252:	d86e      	bhi.n	800c332 <_dtoa_r+0x3ba>
 800c254:	2c00      	cmp	r4, #0
 800c256:	d06c      	beq.n	800c332 <_dtoa_r+0x3ba>
 800c258:	f1b8 0f00 	cmp.w	r8, #0
 800c25c:	f340 80b4 	ble.w	800c3c8 <_dtoa_r+0x450>
 800c260:	4ac8      	ldr	r2, [pc, #800]	@ (800c584 <_dtoa_r+0x60c>)
 800c262:	f008 010f 	and.w	r1, r8, #15
 800c266:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c26a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c26e:	ed92 7b00 	vldr	d7, [r2]
 800c272:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c276:	f000 809b 	beq.w	800c3b0 <_dtoa_r+0x438>
 800c27a:	4ac3      	ldr	r2, [pc, #780]	@ (800c588 <_dtoa_r+0x610>)
 800c27c:	ed92 6b08 	vldr	d6, [r2, #32]
 800c280:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c284:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c288:	f001 010f 	and.w	r1, r1, #15
 800c28c:	2203      	movs	r2, #3
 800c28e:	48be      	ldr	r0, [pc, #760]	@ (800c588 <_dtoa_r+0x610>)
 800c290:	2900      	cmp	r1, #0
 800c292:	f040 808f 	bne.w	800c3b4 <_dtoa_r+0x43c>
 800c296:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c29a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c29e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c2a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2a8:	2900      	cmp	r1, #0
 800c2aa:	f000 80b3 	beq.w	800c414 <_dtoa_r+0x49c>
 800c2ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c2b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ba:	f140 80ab 	bpl.w	800c414 <_dtoa_r+0x49c>
 800c2be:	f1ba 0f00 	cmp.w	sl, #0
 800c2c2:	f000 80a7 	beq.w	800c414 <_dtoa_r+0x49c>
 800c2c6:	f1bb 0f00 	cmp.w	fp, #0
 800c2ca:	dd30      	ble.n	800c32e <_dtoa_r+0x3b6>
 800c2cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c2d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2d8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800c2dc:	9105      	str	r1, [sp, #20]
 800c2de:	3201      	adds	r2, #1
 800c2e0:	465c      	mov	r4, fp
 800c2e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c2e6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c2ea:	ee07 2a90 	vmov	s15, r2
 800c2ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c2f2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c2f6:	ee15 2a90 	vmov	r2, s11
 800c2fa:	ec51 0b15 	vmov	r0, r1, d5
 800c2fe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c302:	2c00      	cmp	r4, #0
 800c304:	f040 808a 	bne.w	800c41c <_dtoa_r+0x4a4>
 800c308:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c30c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c310:	ec41 0b17 	vmov	d7, r0, r1
 800c314:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31c:	f300 826a 	bgt.w	800c7f4 <_dtoa_r+0x87c>
 800c320:	eeb1 7b47 	vneg.f64	d7, d7
 800c324:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c32c:	d423      	bmi.n	800c376 <_dtoa_r+0x3fe>
 800c32e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c332:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c334:	2a00      	cmp	r2, #0
 800c336:	f2c0 8129 	blt.w	800c58c <_dtoa_r+0x614>
 800c33a:	f1b8 0f0e 	cmp.w	r8, #14
 800c33e:	f300 8125 	bgt.w	800c58c <_dtoa_r+0x614>
 800c342:	4b90      	ldr	r3, [pc, #576]	@ (800c584 <_dtoa_r+0x60c>)
 800c344:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c348:	ed93 6b00 	vldr	d6, [r3]
 800c34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f280 80c8 	bge.w	800c4e4 <_dtoa_r+0x56c>
 800c354:	f1ba 0f00 	cmp.w	sl, #0
 800c358:	f300 80c4 	bgt.w	800c4e4 <_dtoa_r+0x56c>
 800c35c:	d10b      	bne.n	800c376 <_dtoa_r+0x3fe>
 800c35e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c362:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c366:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c36a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c372:	f2c0 823c 	blt.w	800c7ee <_dtoa_r+0x876>
 800c376:	2400      	movs	r4, #0
 800c378:	4625      	mov	r5, r4
 800c37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c37c:	43db      	mvns	r3, r3
 800c37e:	9305      	str	r3, [sp, #20]
 800c380:	463e      	mov	r6, r7
 800c382:	f04f 0800 	mov.w	r8, #0
 800c386:	4621      	mov	r1, r4
 800c388:	4648      	mov	r0, r9
 800c38a:	f000 ff8f 	bl	800d2ac <_Bfree>
 800c38e:	2d00      	cmp	r5, #0
 800c390:	f000 80a2 	beq.w	800c4d8 <_dtoa_r+0x560>
 800c394:	f1b8 0f00 	cmp.w	r8, #0
 800c398:	d005      	beq.n	800c3a6 <_dtoa_r+0x42e>
 800c39a:	45a8      	cmp	r8, r5
 800c39c:	d003      	beq.n	800c3a6 <_dtoa_r+0x42e>
 800c39e:	4641      	mov	r1, r8
 800c3a0:	4648      	mov	r0, r9
 800c3a2:	f000 ff83 	bl	800d2ac <_Bfree>
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	4648      	mov	r0, r9
 800c3aa:	f000 ff7f 	bl	800d2ac <_Bfree>
 800c3ae:	e093      	b.n	800c4d8 <_dtoa_r+0x560>
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	e76c      	b.n	800c28e <_dtoa_r+0x316>
 800c3b4:	07cc      	lsls	r4, r1, #31
 800c3b6:	d504      	bpl.n	800c3c2 <_dtoa_r+0x44a>
 800c3b8:	ed90 6b00 	vldr	d6, [r0]
 800c3bc:	3201      	adds	r2, #1
 800c3be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c3c2:	1049      	asrs	r1, r1, #1
 800c3c4:	3008      	adds	r0, #8
 800c3c6:	e763      	b.n	800c290 <_dtoa_r+0x318>
 800c3c8:	d022      	beq.n	800c410 <_dtoa_r+0x498>
 800c3ca:	f1c8 0100 	rsb	r1, r8, #0
 800c3ce:	4a6d      	ldr	r2, [pc, #436]	@ (800c584 <_dtoa_r+0x60c>)
 800c3d0:	f001 000f 	and.w	r0, r1, #15
 800c3d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c3d8:	ed92 7b00 	vldr	d7, [r2]
 800c3dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c3e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c3e4:	4868      	ldr	r0, [pc, #416]	@ (800c588 <_dtoa_r+0x610>)
 800c3e6:	1109      	asrs	r1, r1, #4
 800c3e8:	2400      	movs	r4, #0
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	b929      	cbnz	r1, 800c3fa <_dtoa_r+0x482>
 800c3ee:	2c00      	cmp	r4, #0
 800c3f0:	f43f af57 	beq.w	800c2a2 <_dtoa_r+0x32a>
 800c3f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c3f8:	e753      	b.n	800c2a2 <_dtoa_r+0x32a>
 800c3fa:	07ce      	lsls	r6, r1, #31
 800c3fc:	d505      	bpl.n	800c40a <_dtoa_r+0x492>
 800c3fe:	ed90 6b00 	vldr	d6, [r0]
 800c402:	3201      	adds	r2, #1
 800c404:	2401      	movs	r4, #1
 800c406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c40a:	1049      	asrs	r1, r1, #1
 800c40c:	3008      	adds	r0, #8
 800c40e:	e7ed      	b.n	800c3ec <_dtoa_r+0x474>
 800c410:	2202      	movs	r2, #2
 800c412:	e746      	b.n	800c2a2 <_dtoa_r+0x32a>
 800c414:	f8cd 8014 	str.w	r8, [sp, #20]
 800c418:	4654      	mov	r4, sl
 800c41a:	e762      	b.n	800c2e2 <_dtoa_r+0x36a>
 800c41c:	4a59      	ldr	r2, [pc, #356]	@ (800c584 <_dtoa_r+0x60c>)
 800c41e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c422:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c426:	9a08      	ldr	r2, [sp, #32]
 800c428:	ec41 0b17 	vmov	d7, r0, r1
 800c42c:	443c      	add	r4, r7
 800c42e:	b34a      	cbz	r2, 800c484 <_dtoa_r+0x50c>
 800c430:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c434:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c438:	463e      	mov	r6, r7
 800c43a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c43e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c442:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c446:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c44a:	ee14 2a90 	vmov	r2, s9
 800c44e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c452:	3230      	adds	r2, #48	@ 0x30
 800c454:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c458:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c460:	f806 2b01 	strb.w	r2, [r6], #1
 800c464:	d438      	bmi.n	800c4d8 <_dtoa_r+0x560>
 800c466:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c46a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c472:	d46e      	bmi.n	800c552 <_dtoa_r+0x5da>
 800c474:	42a6      	cmp	r6, r4
 800c476:	f43f af5a 	beq.w	800c32e <_dtoa_r+0x3b6>
 800c47a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c47e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c482:	e7e0      	b.n	800c446 <_dtoa_r+0x4ce>
 800c484:	4621      	mov	r1, r4
 800c486:	463e      	mov	r6, r7
 800c488:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c48c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c490:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c494:	ee14 2a90 	vmov	r2, s9
 800c498:	3230      	adds	r2, #48	@ 0x30
 800c49a:	f806 2b01 	strb.w	r2, [r6], #1
 800c49e:	42a6      	cmp	r6, r4
 800c4a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c4a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c4a8:	d119      	bne.n	800c4de <_dtoa_r+0x566>
 800c4aa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c4ae:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c4b2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ba:	dc4a      	bgt.n	800c552 <_dtoa_r+0x5da>
 800c4bc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c4c0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c8:	f57f af31 	bpl.w	800c32e <_dtoa_r+0x3b6>
 800c4cc:	460e      	mov	r6, r1
 800c4ce:	3901      	subs	r1, #1
 800c4d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4d4:	2b30      	cmp	r3, #48	@ 0x30
 800c4d6:	d0f9      	beq.n	800c4cc <_dtoa_r+0x554>
 800c4d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c4dc:	e027      	b.n	800c52e <_dtoa_r+0x5b6>
 800c4de:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c4e2:	e7d5      	b.n	800c490 <_dtoa_r+0x518>
 800c4e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4e8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c4ec:	463e      	mov	r6, r7
 800c4ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c4f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c4f6:	ee15 3a10 	vmov	r3, s10
 800c4fa:	3330      	adds	r3, #48	@ 0x30
 800c4fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c500:	1bf3      	subs	r3, r6, r7
 800c502:	459a      	cmp	sl, r3
 800c504:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c508:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c50c:	d132      	bne.n	800c574 <_dtoa_r+0x5fc>
 800c50e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c512:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51a:	dc18      	bgt.n	800c54e <_dtoa_r+0x5d6>
 800c51c:	eeb4 7b46 	vcmp.f64	d7, d6
 800c520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c524:	d103      	bne.n	800c52e <_dtoa_r+0x5b6>
 800c526:	ee15 3a10 	vmov	r3, s10
 800c52a:	07db      	lsls	r3, r3, #31
 800c52c:	d40f      	bmi.n	800c54e <_dtoa_r+0x5d6>
 800c52e:	9901      	ldr	r1, [sp, #4]
 800c530:	4648      	mov	r0, r9
 800c532:	f000 febb 	bl	800d2ac <_Bfree>
 800c536:	2300      	movs	r3, #0
 800c538:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c53a:	7033      	strb	r3, [r6, #0]
 800c53c:	f108 0301 	add.w	r3, r8, #1
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c544:	2b00      	cmp	r3, #0
 800c546:	f000 824b 	beq.w	800c9e0 <_dtoa_r+0xa68>
 800c54a:	601e      	str	r6, [r3, #0]
 800c54c:	e248      	b.n	800c9e0 <_dtoa_r+0xa68>
 800c54e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c552:	4633      	mov	r3, r6
 800c554:	461e      	mov	r6, r3
 800c556:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c55a:	2a39      	cmp	r2, #57	@ 0x39
 800c55c:	d106      	bne.n	800c56c <_dtoa_r+0x5f4>
 800c55e:	429f      	cmp	r7, r3
 800c560:	d1f8      	bne.n	800c554 <_dtoa_r+0x5dc>
 800c562:	9a05      	ldr	r2, [sp, #20]
 800c564:	3201      	adds	r2, #1
 800c566:	9205      	str	r2, [sp, #20]
 800c568:	2230      	movs	r2, #48	@ 0x30
 800c56a:	703a      	strb	r2, [r7, #0]
 800c56c:	781a      	ldrb	r2, [r3, #0]
 800c56e:	3201      	adds	r2, #1
 800c570:	701a      	strb	r2, [r3, #0]
 800c572:	e7b1      	b.n	800c4d8 <_dtoa_r+0x560>
 800c574:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c578:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c580:	d1b5      	bne.n	800c4ee <_dtoa_r+0x576>
 800c582:	e7d4      	b.n	800c52e <_dtoa_r+0x5b6>
 800c584:	0800e8f0 	.word	0x0800e8f0
 800c588:	0800e8c8 	.word	0x0800e8c8
 800c58c:	9908      	ldr	r1, [sp, #32]
 800c58e:	2900      	cmp	r1, #0
 800c590:	f000 80e9 	beq.w	800c766 <_dtoa_r+0x7ee>
 800c594:	9907      	ldr	r1, [sp, #28]
 800c596:	2901      	cmp	r1, #1
 800c598:	f300 80cb 	bgt.w	800c732 <_dtoa_r+0x7ba>
 800c59c:	2d00      	cmp	r5, #0
 800c59e:	f000 80c4 	beq.w	800c72a <_dtoa_r+0x7b2>
 800c5a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c5a6:	9e04      	ldr	r6, [sp, #16]
 800c5a8:	461c      	mov	r4, r3
 800c5aa:	9305      	str	r3, [sp, #20]
 800c5ac:	9b04      	ldr	r3, [sp, #16]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	9304      	str	r3, [sp, #16]
 800c5b2:	9b06      	ldr	r3, [sp, #24]
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	4413      	add	r3, r2
 800c5b8:	4648      	mov	r0, r9
 800c5ba:	9306      	str	r3, [sp, #24]
 800c5bc:	f000 ff2a 	bl	800d414 <__i2b>
 800c5c0:	9b05      	ldr	r3, [sp, #20]
 800c5c2:	4605      	mov	r5, r0
 800c5c4:	b166      	cbz	r6, 800c5e0 <_dtoa_r+0x668>
 800c5c6:	9a06      	ldr	r2, [sp, #24]
 800c5c8:	2a00      	cmp	r2, #0
 800c5ca:	dd09      	ble.n	800c5e0 <_dtoa_r+0x668>
 800c5cc:	42b2      	cmp	r2, r6
 800c5ce:	9904      	ldr	r1, [sp, #16]
 800c5d0:	bfa8      	it	ge
 800c5d2:	4632      	movge	r2, r6
 800c5d4:	1a89      	subs	r1, r1, r2
 800c5d6:	9104      	str	r1, [sp, #16]
 800c5d8:	9906      	ldr	r1, [sp, #24]
 800c5da:	1ab6      	subs	r6, r6, r2
 800c5dc:	1a8a      	subs	r2, r1, r2
 800c5de:	9206      	str	r2, [sp, #24]
 800c5e0:	b30b      	cbz	r3, 800c626 <_dtoa_r+0x6ae>
 800c5e2:	9a08      	ldr	r2, [sp, #32]
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	f000 80c5 	beq.w	800c774 <_dtoa_r+0x7fc>
 800c5ea:	2c00      	cmp	r4, #0
 800c5ec:	f000 80bf 	beq.w	800c76e <_dtoa_r+0x7f6>
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4622      	mov	r2, r4
 800c5f4:	4648      	mov	r0, r9
 800c5f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5f8:	f000 ffc4 	bl	800d584 <__pow5mult>
 800c5fc:	9a01      	ldr	r2, [sp, #4]
 800c5fe:	4601      	mov	r1, r0
 800c600:	4605      	mov	r5, r0
 800c602:	4648      	mov	r0, r9
 800c604:	f000 ff1c 	bl	800d440 <__multiply>
 800c608:	9901      	ldr	r1, [sp, #4]
 800c60a:	9005      	str	r0, [sp, #20]
 800c60c:	4648      	mov	r0, r9
 800c60e:	f000 fe4d 	bl	800d2ac <_Bfree>
 800c612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c614:	1b1b      	subs	r3, r3, r4
 800c616:	f000 80b0 	beq.w	800c77a <_dtoa_r+0x802>
 800c61a:	9905      	ldr	r1, [sp, #20]
 800c61c:	461a      	mov	r2, r3
 800c61e:	4648      	mov	r0, r9
 800c620:	f000 ffb0 	bl	800d584 <__pow5mult>
 800c624:	9001      	str	r0, [sp, #4]
 800c626:	2101      	movs	r1, #1
 800c628:	4648      	mov	r0, r9
 800c62a:	f000 fef3 	bl	800d414 <__i2b>
 800c62e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c630:	4604      	mov	r4, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 81da 	beq.w	800c9ec <_dtoa_r+0xa74>
 800c638:	461a      	mov	r2, r3
 800c63a:	4601      	mov	r1, r0
 800c63c:	4648      	mov	r0, r9
 800c63e:	f000 ffa1 	bl	800d584 <__pow5mult>
 800c642:	9b07      	ldr	r3, [sp, #28]
 800c644:	2b01      	cmp	r3, #1
 800c646:	4604      	mov	r4, r0
 800c648:	f300 80a0 	bgt.w	800c78c <_dtoa_r+0x814>
 800c64c:	9b02      	ldr	r3, [sp, #8]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f040 8096 	bne.w	800c780 <_dtoa_r+0x808>
 800c654:	9b03      	ldr	r3, [sp, #12]
 800c656:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c65a:	2a00      	cmp	r2, #0
 800c65c:	f040 8092 	bne.w	800c784 <_dtoa_r+0x80c>
 800c660:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c664:	0d12      	lsrs	r2, r2, #20
 800c666:	0512      	lsls	r2, r2, #20
 800c668:	2a00      	cmp	r2, #0
 800c66a:	f000 808d 	beq.w	800c788 <_dtoa_r+0x810>
 800c66e:	9b04      	ldr	r3, [sp, #16]
 800c670:	3301      	adds	r3, #1
 800c672:	9304      	str	r3, [sp, #16]
 800c674:	9b06      	ldr	r3, [sp, #24]
 800c676:	3301      	adds	r3, #1
 800c678:	9306      	str	r3, [sp, #24]
 800c67a:	2301      	movs	r3, #1
 800c67c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c67e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 81b9 	beq.w	800c9f8 <_dtoa_r+0xa80>
 800c686:	6922      	ldr	r2, [r4, #16]
 800c688:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c68c:	6910      	ldr	r0, [r2, #16]
 800c68e:	f000 fe75 	bl	800d37c <__hi0bits>
 800c692:	f1c0 0020 	rsb	r0, r0, #32
 800c696:	9b06      	ldr	r3, [sp, #24]
 800c698:	4418      	add	r0, r3
 800c69a:	f010 001f 	ands.w	r0, r0, #31
 800c69e:	f000 8081 	beq.w	800c7a4 <_dtoa_r+0x82c>
 800c6a2:	f1c0 0220 	rsb	r2, r0, #32
 800c6a6:	2a04      	cmp	r2, #4
 800c6a8:	dd73      	ble.n	800c792 <_dtoa_r+0x81a>
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	f1c0 001c 	rsb	r0, r0, #28
 800c6b0:	4403      	add	r3, r0
 800c6b2:	9304      	str	r3, [sp, #16]
 800c6b4:	9b06      	ldr	r3, [sp, #24]
 800c6b6:	4406      	add	r6, r0
 800c6b8:	4403      	add	r3, r0
 800c6ba:	9306      	str	r3, [sp, #24]
 800c6bc:	9b04      	ldr	r3, [sp, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	dd05      	ble.n	800c6ce <_dtoa_r+0x756>
 800c6c2:	9901      	ldr	r1, [sp, #4]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	4648      	mov	r0, r9
 800c6c8:	f000 ffb6 	bl	800d638 <__lshift>
 800c6cc:	9001      	str	r0, [sp, #4]
 800c6ce:	9b06      	ldr	r3, [sp, #24]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dd05      	ble.n	800c6e0 <_dtoa_r+0x768>
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	4648      	mov	r0, r9
 800c6da:	f000 ffad 	bl	800d638 <__lshift>
 800c6de:	4604      	mov	r4, r0
 800c6e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d060      	beq.n	800c7a8 <_dtoa_r+0x830>
 800c6e6:	9801      	ldr	r0, [sp, #4]
 800c6e8:	4621      	mov	r1, r4
 800c6ea:	f001 f811 	bl	800d710 <__mcmp>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	da5a      	bge.n	800c7a8 <_dtoa_r+0x830>
 800c6f2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c6f6:	9305      	str	r3, [sp, #20]
 800c6f8:	9901      	ldr	r1, [sp, #4]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	220a      	movs	r2, #10
 800c6fe:	4648      	mov	r0, r9
 800c700:	f000 fdf6 	bl	800d2f0 <__multadd>
 800c704:	9b08      	ldr	r3, [sp, #32]
 800c706:	9001      	str	r0, [sp, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 8177 	beq.w	800c9fc <_dtoa_r+0xa84>
 800c70e:	4629      	mov	r1, r5
 800c710:	2300      	movs	r3, #0
 800c712:	220a      	movs	r2, #10
 800c714:	4648      	mov	r0, r9
 800c716:	f000 fdeb 	bl	800d2f0 <__multadd>
 800c71a:	f1bb 0f00 	cmp.w	fp, #0
 800c71e:	4605      	mov	r5, r0
 800c720:	dc6e      	bgt.n	800c800 <_dtoa_r+0x888>
 800c722:	9b07      	ldr	r3, [sp, #28]
 800c724:	2b02      	cmp	r3, #2
 800c726:	dc48      	bgt.n	800c7ba <_dtoa_r+0x842>
 800c728:	e06a      	b.n	800c800 <_dtoa_r+0x888>
 800c72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c72c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c730:	e739      	b.n	800c5a6 <_dtoa_r+0x62e>
 800c732:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800c736:	42a3      	cmp	r3, r4
 800c738:	db07      	blt.n	800c74a <_dtoa_r+0x7d2>
 800c73a:	f1ba 0f00 	cmp.w	sl, #0
 800c73e:	eba3 0404 	sub.w	r4, r3, r4
 800c742:	db0b      	blt.n	800c75c <_dtoa_r+0x7e4>
 800c744:	9e04      	ldr	r6, [sp, #16]
 800c746:	4652      	mov	r2, sl
 800c748:	e72f      	b.n	800c5aa <_dtoa_r+0x632>
 800c74a:	1ae2      	subs	r2, r4, r3
 800c74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c74e:	9e04      	ldr	r6, [sp, #16]
 800c750:	4413      	add	r3, r2
 800c752:	930a      	str	r3, [sp, #40]	@ 0x28
 800c754:	4652      	mov	r2, sl
 800c756:	4623      	mov	r3, r4
 800c758:	2400      	movs	r4, #0
 800c75a:	e726      	b.n	800c5aa <_dtoa_r+0x632>
 800c75c:	9a04      	ldr	r2, [sp, #16]
 800c75e:	eba2 060a 	sub.w	r6, r2, sl
 800c762:	2200      	movs	r2, #0
 800c764:	e721      	b.n	800c5aa <_dtoa_r+0x632>
 800c766:	9e04      	ldr	r6, [sp, #16]
 800c768:	9d08      	ldr	r5, [sp, #32]
 800c76a:	461c      	mov	r4, r3
 800c76c:	e72a      	b.n	800c5c4 <_dtoa_r+0x64c>
 800c76e:	9a01      	ldr	r2, [sp, #4]
 800c770:	9205      	str	r2, [sp, #20]
 800c772:	e752      	b.n	800c61a <_dtoa_r+0x6a2>
 800c774:	9901      	ldr	r1, [sp, #4]
 800c776:	461a      	mov	r2, r3
 800c778:	e751      	b.n	800c61e <_dtoa_r+0x6a6>
 800c77a:	9b05      	ldr	r3, [sp, #20]
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	e752      	b.n	800c626 <_dtoa_r+0x6ae>
 800c780:	2300      	movs	r3, #0
 800c782:	e77b      	b.n	800c67c <_dtoa_r+0x704>
 800c784:	9b02      	ldr	r3, [sp, #8]
 800c786:	e779      	b.n	800c67c <_dtoa_r+0x704>
 800c788:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c78a:	e778      	b.n	800c67e <_dtoa_r+0x706>
 800c78c:	2300      	movs	r3, #0
 800c78e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c790:	e779      	b.n	800c686 <_dtoa_r+0x70e>
 800c792:	d093      	beq.n	800c6bc <_dtoa_r+0x744>
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	321c      	adds	r2, #28
 800c798:	4413      	add	r3, r2
 800c79a:	9304      	str	r3, [sp, #16]
 800c79c:	9b06      	ldr	r3, [sp, #24]
 800c79e:	4416      	add	r6, r2
 800c7a0:	4413      	add	r3, r2
 800c7a2:	e78a      	b.n	800c6ba <_dtoa_r+0x742>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	e7f5      	b.n	800c794 <_dtoa_r+0x81c>
 800c7a8:	f1ba 0f00 	cmp.w	sl, #0
 800c7ac:	f8cd 8014 	str.w	r8, [sp, #20]
 800c7b0:	46d3      	mov	fp, sl
 800c7b2:	dc21      	bgt.n	800c7f8 <_dtoa_r+0x880>
 800c7b4:	9b07      	ldr	r3, [sp, #28]
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	dd1e      	ble.n	800c7f8 <_dtoa_r+0x880>
 800c7ba:	f1bb 0f00 	cmp.w	fp, #0
 800c7be:	f47f addc 	bne.w	800c37a <_dtoa_r+0x402>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	465b      	mov	r3, fp
 800c7c6:	2205      	movs	r2, #5
 800c7c8:	4648      	mov	r0, r9
 800c7ca:	f000 fd91 	bl	800d2f0 <__multadd>
 800c7ce:	4601      	mov	r1, r0
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	9801      	ldr	r0, [sp, #4]
 800c7d4:	f000 ff9c 	bl	800d710 <__mcmp>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	f77f adce 	ble.w	800c37a <_dtoa_r+0x402>
 800c7de:	463e      	mov	r6, r7
 800c7e0:	2331      	movs	r3, #49	@ 0x31
 800c7e2:	f806 3b01 	strb.w	r3, [r6], #1
 800c7e6:	9b05      	ldr	r3, [sp, #20]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	9305      	str	r3, [sp, #20]
 800c7ec:	e5c9      	b.n	800c382 <_dtoa_r+0x40a>
 800c7ee:	f8cd 8014 	str.w	r8, [sp, #20]
 800c7f2:	4654      	mov	r4, sl
 800c7f4:	4625      	mov	r5, r4
 800c7f6:	e7f2      	b.n	800c7de <_dtoa_r+0x866>
 800c7f8:	9b08      	ldr	r3, [sp, #32]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 8102 	beq.w	800ca04 <_dtoa_r+0xa8c>
 800c800:	2e00      	cmp	r6, #0
 800c802:	dd05      	ble.n	800c810 <_dtoa_r+0x898>
 800c804:	4629      	mov	r1, r5
 800c806:	4632      	mov	r2, r6
 800c808:	4648      	mov	r0, r9
 800c80a:	f000 ff15 	bl	800d638 <__lshift>
 800c80e:	4605      	mov	r5, r0
 800c810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c812:	2b00      	cmp	r3, #0
 800c814:	d058      	beq.n	800c8c8 <_dtoa_r+0x950>
 800c816:	6869      	ldr	r1, [r5, #4]
 800c818:	4648      	mov	r0, r9
 800c81a:	f000 fd07 	bl	800d22c <_Balloc>
 800c81e:	4606      	mov	r6, r0
 800c820:	b928      	cbnz	r0, 800c82e <_dtoa_r+0x8b6>
 800c822:	4b82      	ldr	r3, [pc, #520]	@ (800ca2c <_dtoa_r+0xab4>)
 800c824:	4602      	mov	r2, r0
 800c826:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c82a:	f7ff bbbe 	b.w	800bfaa <_dtoa_r+0x32>
 800c82e:	692a      	ldr	r2, [r5, #16]
 800c830:	3202      	adds	r2, #2
 800c832:	0092      	lsls	r2, r2, #2
 800c834:	f105 010c 	add.w	r1, r5, #12
 800c838:	300c      	adds	r0, #12
 800c83a:	f7ff fb05 	bl	800be48 <memcpy>
 800c83e:	2201      	movs	r2, #1
 800c840:	4631      	mov	r1, r6
 800c842:	4648      	mov	r0, r9
 800c844:	f000 fef8 	bl	800d638 <__lshift>
 800c848:	1c7b      	adds	r3, r7, #1
 800c84a:	9304      	str	r3, [sp, #16]
 800c84c:	eb07 030b 	add.w	r3, r7, fp
 800c850:	9309      	str	r3, [sp, #36]	@ 0x24
 800c852:	9b02      	ldr	r3, [sp, #8]
 800c854:	f003 0301 	and.w	r3, r3, #1
 800c858:	46a8      	mov	r8, r5
 800c85a:	9308      	str	r3, [sp, #32]
 800c85c:	4605      	mov	r5, r0
 800c85e:	9b04      	ldr	r3, [sp, #16]
 800c860:	9801      	ldr	r0, [sp, #4]
 800c862:	4621      	mov	r1, r4
 800c864:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c868:	f7ff fafc 	bl	800be64 <quorem>
 800c86c:	4641      	mov	r1, r8
 800c86e:	9002      	str	r0, [sp, #8]
 800c870:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c874:	9801      	ldr	r0, [sp, #4]
 800c876:	f000 ff4b 	bl	800d710 <__mcmp>
 800c87a:	462a      	mov	r2, r5
 800c87c:	9006      	str	r0, [sp, #24]
 800c87e:	4621      	mov	r1, r4
 800c880:	4648      	mov	r0, r9
 800c882:	f000 ff61 	bl	800d748 <__mdiff>
 800c886:	68c2      	ldr	r2, [r0, #12]
 800c888:	4606      	mov	r6, r0
 800c88a:	b9fa      	cbnz	r2, 800c8cc <_dtoa_r+0x954>
 800c88c:	4601      	mov	r1, r0
 800c88e:	9801      	ldr	r0, [sp, #4]
 800c890:	f000 ff3e 	bl	800d710 <__mcmp>
 800c894:	4602      	mov	r2, r0
 800c896:	4631      	mov	r1, r6
 800c898:	4648      	mov	r0, r9
 800c89a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c89c:	f000 fd06 	bl	800d2ac <_Bfree>
 800c8a0:	9b07      	ldr	r3, [sp, #28]
 800c8a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8a4:	9e04      	ldr	r6, [sp, #16]
 800c8a6:	ea42 0103 	orr.w	r1, r2, r3
 800c8aa:	9b08      	ldr	r3, [sp, #32]
 800c8ac:	4319      	orrs	r1, r3
 800c8ae:	d10f      	bne.n	800c8d0 <_dtoa_r+0x958>
 800c8b0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c8b4:	d028      	beq.n	800c908 <_dtoa_r+0x990>
 800c8b6:	9b06      	ldr	r3, [sp, #24]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	dd02      	ble.n	800c8c2 <_dtoa_r+0x94a>
 800c8bc:	9b02      	ldr	r3, [sp, #8]
 800c8be:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c8c2:	f88b a000 	strb.w	sl, [fp]
 800c8c6:	e55e      	b.n	800c386 <_dtoa_r+0x40e>
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	e7bd      	b.n	800c848 <_dtoa_r+0x8d0>
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	e7e2      	b.n	800c896 <_dtoa_r+0x91e>
 800c8d0:	9b06      	ldr	r3, [sp, #24]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	db04      	blt.n	800c8e0 <_dtoa_r+0x968>
 800c8d6:	9907      	ldr	r1, [sp, #28]
 800c8d8:	430b      	orrs	r3, r1
 800c8da:	9908      	ldr	r1, [sp, #32]
 800c8dc:	430b      	orrs	r3, r1
 800c8de:	d120      	bne.n	800c922 <_dtoa_r+0x9aa>
 800c8e0:	2a00      	cmp	r2, #0
 800c8e2:	ddee      	ble.n	800c8c2 <_dtoa_r+0x94a>
 800c8e4:	9901      	ldr	r1, [sp, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	4648      	mov	r0, r9
 800c8ea:	f000 fea5 	bl	800d638 <__lshift>
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	9001      	str	r0, [sp, #4]
 800c8f2:	f000 ff0d 	bl	800d710 <__mcmp>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	dc03      	bgt.n	800c902 <_dtoa_r+0x98a>
 800c8fa:	d1e2      	bne.n	800c8c2 <_dtoa_r+0x94a>
 800c8fc:	f01a 0f01 	tst.w	sl, #1
 800c900:	d0df      	beq.n	800c8c2 <_dtoa_r+0x94a>
 800c902:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c906:	d1d9      	bne.n	800c8bc <_dtoa_r+0x944>
 800c908:	2339      	movs	r3, #57	@ 0x39
 800c90a:	f88b 3000 	strb.w	r3, [fp]
 800c90e:	4633      	mov	r3, r6
 800c910:	461e      	mov	r6, r3
 800c912:	3b01      	subs	r3, #1
 800c914:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c918:	2a39      	cmp	r2, #57	@ 0x39
 800c91a:	d052      	beq.n	800c9c2 <_dtoa_r+0xa4a>
 800c91c:	3201      	adds	r2, #1
 800c91e:	701a      	strb	r2, [r3, #0]
 800c920:	e531      	b.n	800c386 <_dtoa_r+0x40e>
 800c922:	2a00      	cmp	r2, #0
 800c924:	dd07      	ble.n	800c936 <_dtoa_r+0x9be>
 800c926:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c92a:	d0ed      	beq.n	800c908 <_dtoa_r+0x990>
 800c92c:	f10a 0301 	add.w	r3, sl, #1
 800c930:	f88b 3000 	strb.w	r3, [fp]
 800c934:	e527      	b.n	800c386 <_dtoa_r+0x40e>
 800c936:	9b04      	ldr	r3, [sp, #16]
 800c938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c93a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c93e:	4293      	cmp	r3, r2
 800c940:	d029      	beq.n	800c996 <_dtoa_r+0xa1e>
 800c942:	9901      	ldr	r1, [sp, #4]
 800c944:	2300      	movs	r3, #0
 800c946:	220a      	movs	r2, #10
 800c948:	4648      	mov	r0, r9
 800c94a:	f000 fcd1 	bl	800d2f0 <__multadd>
 800c94e:	45a8      	cmp	r8, r5
 800c950:	9001      	str	r0, [sp, #4]
 800c952:	f04f 0300 	mov.w	r3, #0
 800c956:	f04f 020a 	mov.w	r2, #10
 800c95a:	4641      	mov	r1, r8
 800c95c:	4648      	mov	r0, r9
 800c95e:	d107      	bne.n	800c970 <_dtoa_r+0x9f8>
 800c960:	f000 fcc6 	bl	800d2f0 <__multadd>
 800c964:	4680      	mov	r8, r0
 800c966:	4605      	mov	r5, r0
 800c968:	9b04      	ldr	r3, [sp, #16]
 800c96a:	3301      	adds	r3, #1
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	e776      	b.n	800c85e <_dtoa_r+0x8e6>
 800c970:	f000 fcbe 	bl	800d2f0 <__multadd>
 800c974:	4629      	mov	r1, r5
 800c976:	4680      	mov	r8, r0
 800c978:	2300      	movs	r3, #0
 800c97a:	220a      	movs	r2, #10
 800c97c:	4648      	mov	r0, r9
 800c97e:	f000 fcb7 	bl	800d2f0 <__multadd>
 800c982:	4605      	mov	r5, r0
 800c984:	e7f0      	b.n	800c968 <_dtoa_r+0x9f0>
 800c986:	f1bb 0f00 	cmp.w	fp, #0
 800c98a:	bfcc      	ite	gt
 800c98c:	465e      	movgt	r6, fp
 800c98e:	2601      	movle	r6, #1
 800c990:	443e      	add	r6, r7
 800c992:	f04f 0800 	mov.w	r8, #0
 800c996:	9901      	ldr	r1, [sp, #4]
 800c998:	2201      	movs	r2, #1
 800c99a:	4648      	mov	r0, r9
 800c99c:	f000 fe4c 	bl	800d638 <__lshift>
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	9001      	str	r0, [sp, #4]
 800c9a4:	f000 feb4 	bl	800d710 <__mcmp>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	dcb0      	bgt.n	800c90e <_dtoa_r+0x996>
 800c9ac:	d102      	bne.n	800c9b4 <_dtoa_r+0xa3c>
 800c9ae:	f01a 0f01 	tst.w	sl, #1
 800c9b2:	d1ac      	bne.n	800c90e <_dtoa_r+0x996>
 800c9b4:	4633      	mov	r3, r6
 800c9b6:	461e      	mov	r6, r3
 800c9b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9bc:	2a30      	cmp	r2, #48	@ 0x30
 800c9be:	d0fa      	beq.n	800c9b6 <_dtoa_r+0xa3e>
 800c9c0:	e4e1      	b.n	800c386 <_dtoa_r+0x40e>
 800c9c2:	429f      	cmp	r7, r3
 800c9c4:	d1a4      	bne.n	800c910 <_dtoa_r+0x998>
 800c9c6:	9b05      	ldr	r3, [sp, #20]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	2331      	movs	r3, #49	@ 0x31
 800c9ce:	703b      	strb	r3, [r7, #0]
 800c9d0:	e4d9      	b.n	800c386 <_dtoa_r+0x40e>
 800c9d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c9d4:	4f16      	ldr	r7, [pc, #88]	@ (800ca30 <_dtoa_r+0xab8>)
 800c9d6:	b11b      	cbz	r3, 800c9e0 <_dtoa_r+0xa68>
 800c9d8:	f107 0308 	add.w	r3, r7, #8
 800c9dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c9de:	6013      	str	r3, [r2, #0]
 800c9e0:	4638      	mov	r0, r7
 800c9e2:	b011      	add	sp, #68	@ 0x44
 800c9e4:	ecbd 8b02 	vpop	{d8}
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ec:	9b07      	ldr	r3, [sp, #28]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	f77f ae2c 	ble.w	800c64c <_dtoa_r+0x6d4>
 800c9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9f8:	2001      	movs	r0, #1
 800c9fa:	e64c      	b.n	800c696 <_dtoa_r+0x71e>
 800c9fc:	f1bb 0f00 	cmp.w	fp, #0
 800ca00:	f77f aed8 	ble.w	800c7b4 <_dtoa_r+0x83c>
 800ca04:	463e      	mov	r6, r7
 800ca06:	9801      	ldr	r0, [sp, #4]
 800ca08:	4621      	mov	r1, r4
 800ca0a:	f7ff fa2b 	bl	800be64 <quorem>
 800ca0e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ca12:	f806 ab01 	strb.w	sl, [r6], #1
 800ca16:	1bf2      	subs	r2, r6, r7
 800ca18:	4593      	cmp	fp, r2
 800ca1a:	ddb4      	ble.n	800c986 <_dtoa_r+0xa0e>
 800ca1c:	9901      	ldr	r1, [sp, #4]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	220a      	movs	r2, #10
 800ca22:	4648      	mov	r0, r9
 800ca24:	f000 fc64 	bl	800d2f0 <__multadd>
 800ca28:	9001      	str	r0, [sp, #4]
 800ca2a:	e7ec      	b.n	800ca06 <_dtoa_r+0xa8e>
 800ca2c:	0800e7f8 	.word	0x0800e7f8
 800ca30:	0800e77c 	.word	0x0800e77c

0800ca34 <__ssputs_r>:
 800ca34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca38:	688e      	ldr	r6, [r1, #8]
 800ca3a:	461f      	mov	r7, r3
 800ca3c:	42be      	cmp	r6, r7
 800ca3e:	680b      	ldr	r3, [r1, #0]
 800ca40:	4682      	mov	sl, r0
 800ca42:	460c      	mov	r4, r1
 800ca44:	4690      	mov	r8, r2
 800ca46:	d82d      	bhi.n	800caa4 <__ssputs_r+0x70>
 800ca48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca50:	d026      	beq.n	800caa0 <__ssputs_r+0x6c>
 800ca52:	6965      	ldr	r5, [r4, #20]
 800ca54:	6909      	ldr	r1, [r1, #16]
 800ca56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca5a:	eba3 0901 	sub.w	r9, r3, r1
 800ca5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca62:	1c7b      	adds	r3, r7, #1
 800ca64:	444b      	add	r3, r9
 800ca66:	106d      	asrs	r5, r5, #1
 800ca68:	429d      	cmp	r5, r3
 800ca6a:	bf38      	it	cc
 800ca6c:	461d      	movcc	r5, r3
 800ca6e:	0553      	lsls	r3, r2, #21
 800ca70:	d527      	bpl.n	800cac2 <__ssputs_r+0x8e>
 800ca72:	4629      	mov	r1, r5
 800ca74:	f000 faa2 	bl	800cfbc <_malloc_r>
 800ca78:	4606      	mov	r6, r0
 800ca7a:	b360      	cbz	r0, 800cad6 <__ssputs_r+0xa2>
 800ca7c:	6921      	ldr	r1, [r4, #16]
 800ca7e:	464a      	mov	r2, r9
 800ca80:	f7ff f9e2 	bl	800be48 <memcpy>
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca8e:	81a3      	strh	r3, [r4, #12]
 800ca90:	6126      	str	r6, [r4, #16]
 800ca92:	6165      	str	r5, [r4, #20]
 800ca94:	444e      	add	r6, r9
 800ca96:	eba5 0509 	sub.w	r5, r5, r9
 800ca9a:	6026      	str	r6, [r4, #0]
 800ca9c:	60a5      	str	r5, [r4, #8]
 800ca9e:	463e      	mov	r6, r7
 800caa0:	42be      	cmp	r6, r7
 800caa2:	d900      	bls.n	800caa6 <__ssputs_r+0x72>
 800caa4:	463e      	mov	r6, r7
 800caa6:	6820      	ldr	r0, [r4, #0]
 800caa8:	4632      	mov	r2, r6
 800caaa:	4641      	mov	r1, r8
 800caac:	f001 f8d4 	bl	800dc58 <memmove>
 800cab0:	68a3      	ldr	r3, [r4, #8]
 800cab2:	1b9b      	subs	r3, r3, r6
 800cab4:	60a3      	str	r3, [r4, #8]
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	4433      	add	r3, r6
 800caba:	6023      	str	r3, [r4, #0]
 800cabc:	2000      	movs	r0, #0
 800cabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac2:	462a      	mov	r2, r5
 800cac4:	f000 ff6f 	bl	800d9a6 <_realloc_r>
 800cac8:	4606      	mov	r6, r0
 800caca:	2800      	cmp	r0, #0
 800cacc:	d1e0      	bne.n	800ca90 <__ssputs_r+0x5c>
 800cace:	6921      	ldr	r1, [r4, #16]
 800cad0:	4650      	mov	r0, sl
 800cad2:	f001 f985 	bl	800dde0 <_free_r>
 800cad6:	230c      	movs	r3, #12
 800cad8:	f8ca 3000 	str.w	r3, [sl]
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cae8:	e7e9      	b.n	800cabe <__ssputs_r+0x8a>
	...

0800caec <_svfiprintf_r>:
 800caec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf0:	4698      	mov	r8, r3
 800caf2:	898b      	ldrh	r3, [r1, #12]
 800caf4:	061b      	lsls	r3, r3, #24
 800caf6:	b09d      	sub	sp, #116	@ 0x74
 800caf8:	4607      	mov	r7, r0
 800cafa:	460d      	mov	r5, r1
 800cafc:	4614      	mov	r4, r2
 800cafe:	d510      	bpl.n	800cb22 <_svfiprintf_r+0x36>
 800cb00:	690b      	ldr	r3, [r1, #16]
 800cb02:	b973      	cbnz	r3, 800cb22 <_svfiprintf_r+0x36>
 800cb04:	2140      	movs	r1, #64	@ 0x40
 800cb06:	f000 fa59 	bl	800cfbc <_malloc_r>
 800cb0a:	6028      	str	r0, [r5, #0]
 800cb0c:	6128      	str	r0, [r5, #16]
 800cb0e:	b930      	cbnz	r0, 800cb1e <_svfiprintf_r+0x32>
 800cb10:	230c      	movs	r3, #12
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb18:	b01d      	add	sp, #116	@ 0x74
 800cb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1e:	2340      	movs	r3, #64	@ 0x40
 800cb20:	616b      	str	r3, [r5, #20]
 800cb22:	2300      	movs	r3, #0
 800cb24:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb26:	2320      	movs	r3, #32
 800cb28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb30:	2330      	movs	r3, #48	@ 0x30
 800cb32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ccd0 <_svfiprintf_r+0x1e4>
 800cb36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb3a:	f04f 0901 	mov.w	r9, #1
 800cb3e:	4623      	mov	r3, r4
 800cb40:	469a      	mov	sl, r3
 800cb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb46:	b10a      	cbz	r2, 800cb4c <_svfiprintf_r+0x60>
 800cb48:	2a25      	cmp	r2, #37	@ 0x25
 800cb4a:	d1f9      	bne.n	800cb40 <_svfiprintf_r+0x54>
 800cb4c:	ebba 0b04 	subs.w	fp, sl, r4
 800cb50:	d00b      	beq.n	800cb6a <_svfiprintf_r+0x7e>
 800cb52:	465b      	mov	r3, fp
 800cb54:	4622      	mov	r2, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	4638      	mov	r0, r7
 800cb5a:	f7ff ff6b 	bl	800ca34 <__ssputs_r>
 800cb5e:	3001      	adds	r0, #1
 800cb60:	f000 80a7 	beq.w	800ccb2 <_svfiprintf_r+0x1c6>
 800cb64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb66:	445a      	add	r2, fp
 800cb68:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb6a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 809f 	beq.w	800ccb2 <_svfiprintf_r+0x1c6>
 800cb74:	2300      	movs	r3, #0
 800cb76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb7e:	f10a 0a01 	add.w	sl, sl, #1
 800cb82:	9304      	str	r3, [sp, #16]
 800cb84:	9307      	str	r3, [sp, #28]
 800cb86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb8c:	4654      	mov	r4, sl
 800cb8e:	2205      	movs	r2, #5
 800cb90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb94:	484e      	ldr	r0, [pc, #312]	@ (800ccd0 <_svfiprintf_r+0x1e4>)
 800cb96:	f7f3 fbcb 	bl	8000330 <memchr>
 800cb9a:	9a04      	ldr	r2, [sp, #16]
 800cb9c:	b9d8      	cbnz	r0, 800cbd6 <_svfiprintf_r+0xea>
 800cb9e:	06d0      	lsls	r0, r2, #27
 800cba0:	bf44      	itt	mi
 800cba2:	2320      	movmi	r3, #32
 800cba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cba8:	0711      	lsls	r1, r2, #28
 800cbaa:	bf44      	itt	mi
 800cbac:	232b      	movmi	r3, #43	@ 0x2b
 800cbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbb2:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbb8:	d015      	beq.n	800cbe6 <_svfiprintf_r+0xfa>
 800cbba:	9a07      	ldr	r2, [sp, #28]
 800cbbc:	4654      	mov	r4, sl
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	f04f 0c0a 	mov.w	ip, #10
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbca:	3b30      	subs	r3, #48	@ 0x30
 800cbcc:	2b09      	cmp	r3, #9
 800cbce:	d94b      	bls.n	800cc68 <_svfiprintf_r+0x17c>
 800cbd0:	b1b0      	cbz	r0, 800cc00 <_svfiprintf_r+0x114>
 800cbd2:	9207      	str	r2, [sp, #28]
 800cbd4:	e014      	b.n	800cc00 <_svfiprintf_r+0x114>
 800cbd6:	eba0 0308 	sub.w	r3, r0, r8
 800cbda:	fa09 f303 	lsl.w	r3, r9, r3
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	9304      	str	r3, [sp, #16]
 800cbe2:	46a2      	mov	sl, r4
 800cbe4:	e7d2      	b.n	800cb8c <_svfiprintf_r+0xa0>
 800cbe6:	9b03      	ldr	r3, [sp, #12]
 800cbe8:	1d19      	adds	r1, r3, #4
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	9103      	str	r1, [sp, #12]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	bfbb      	ittet	lt
 800cbf2:	425b      	neglt	r3, r3
 800cbf4:	f042 0202 	orrlt.w	r2, r2, #2
 800cbf8:	9307      	strge	r3, [sp, #28]
 800cbfa:	9307      	strlt	r3, [sp, #28]
 800cbfc:	bfb8      	it	lt
 800cbfe:	9204      	strlt	r2, [sp, #16]
 800cc00:	7823      	ldrb	r3, [r4, #0]
 800cc02:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc04:	d10a      	bne.n	800cc1c <_svfiprintf_r+0x130>
 800cc06:	7863      	ldrb	r3, [r4, #1]
 800cc08:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc0a:	d132      	bne.n	800cc72 <_svfiprintf_r+0x186>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	1d1a      	adds	r2, r3, #4
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	9203      	str	r2, [sp, #12]
 800cc14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc18:	3402      	adds	r4, #2
 800cc1a:	9305      	str	r3, [sp, #20]
 800cc1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cce0 <_svfiprintf_r+0x1f4>
 800cc20:	7821      	ldrb	r1, [r4, #0]
 800cc22:	2203      	movs	r2, #3
 800cc24:	4650      	mov	r0, sl
 800cc26:	f7f3 fb83 	bl	8000330 <memchr>
 800cc2a:	b138      	cbz	r0, 800cc3c <_svfiprintf_r+0x150>
 800cc2c:	9b04      	ldr	r3, [sp, #16]
 800cc2e:	eba0 000a 	sub.w	r0, r0, sl
 800cc32:	2240      	movs	r2, #64	@ 0x40
 800cc34:	4082      	lsls	r2, r0
 800cc36:	4313      	orrs	r3, r2
 800cc38:	3401      	adds	r4, #1
 800cc3a:	9304      	str	r3, [sp, #16]
 800cc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc40:	4824      	ldr	r0, [pc, #144]	@ (800ccd4 <_svfiprintf_r+0x1e8>)
 800cc42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc46:	2206      	movs	r2, #6
 800cc48:	f7f3 fb72 	bl	8000330 <memchr>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d036      	beq.n	800ccbe <_svfiprintf_r+0x1d2>
 800cc50:	4b21      	ldr	r3, [pc, #132]	@ (800ccd8 <_svfiprintf_r+0x1ec>)
 800cc52:	bb1b      	cbnz	r3, 800cc9c <_svfiprintf_r+0x1b0>
 800cc54:	9b03      	ldr	r3, [sp, #12]
 800cc56:	3307      	adds	r3, #7
 800cc58:	f023 0307 	bic.w	r3, r3, #7
 800cc5c:	3308      	adds	r3, #8
 800cc5e:	9303      	str	r3, [sp, #12]
 800cc60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc62:	4433      	add	r3, r6
 800cc64:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc66:	e76a      	b.n	800cb3e <_svfiprintf_r+0x52>
 800cc68:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	2001      	movs	r0, #1
 800cc70:	e7a8      	b.n	800cbc4 <_svfiprintf_r+0xd8>
 800cc72:	2300      	movs	r3, #0
 800cc74:	3401      	adds	r4, #1
 800cc76:	9305      	str	r3, [sp, #20]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	f04f 0c0a 	mov.w	ip, #10
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc84:	3a30      	subs	r2, #48	@ 0x30
 800cc86:	2a09      	cmp	r2, #9
 800cc88:	d903      	bls.n	800cc92 <_svfiprintf_r+0x1a6>
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0c6      	beq.n	800cc1c <_svfiprintf_r+0x130>
 800cc8e:	9105      	str	r1, [sp, #20]
 800cc90:	e7c4      	b.n	800cc1c <_svfiprintf_r+0x130>
 800cc92:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc96:	4604      	mov	r4, r0
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e7f0      	b.n	800cc7e <_svfiprintf_r+0x192>
 800cc9c:	ab03      	add	r3, sp, #12
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	462a      	mov	r2, r5
 800cca2:	4b0e      	ldr	r3, [pc, #56]	@ (800ccdc <_svfiprintf_r+0x1f0>)
 800cca4:	a904      	add	r1, sp, #16
 800cca6:	4638      	mov	r0, r7
 800cca8:	f7fe fb92 	bl	800b3d0 <_printf_float>
 800ccac:	1c42      	adds	r2, r0, #1
 800ccae:	4606      	mov	r6, r0
 800ccb0:	d1d6      	bne.n	800cc60 <_svfiprintf_r+0x174>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	065b      	lsls	r3, r3, #25
 800ccb6:	f53f af2d 	bmi.w	800cb14 <_svfiprintf_r+0x28>
 800ccba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccbc:	e72c      	b.n	800cb18 <_svfiprintf_r+0x2c>
 800ccbe:	ab03      	add	r3, sp, #12
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	462a      	mov	r2, r5
 800ccc4:	4b05      	ldr	r3, [pc, #20]	@ (800ccdc <_svfiprintf_r+0x1f0>)
 800ccc6:	a904      	add	r1, sp, #16
 800ccc8:	4638      	mov	r0, r7
 800ccca:	f7fe fe09 	bl	800b8e0 <_printf_i>
 800ccce:	e7ed      	b.n	800ccac <_svfiprintf_r+0x1c0>
 800ccd0:	0800e809 	.word	0x0800e809
 800ccd4:	0800e813 	.word	0x0800e813
 800ccd8:	0800b3d1 	.word	0x0800b3d1
 800ccdc:	0800ca35 	.word	0x0800ca35
 800cce0:	0800e80f 	.word	0x0800e80f

0800cce4 <__sfputc_r>:
 800cce4:	6893      	ldr	r3, [r2, #8]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	b410      	push	{r4}
 800ccec:	6093      	str	r3, [r2, #8]
 800ccee:	da08      	bge.n	800cd02 <__sfputc_r+0x1e>
 800ccf0:	6994      	ldr	r4, [r2, #24]
 800ccf2:	42a3      	cmp	r3, r4
 800ccf4:	db01      	blt.n	800ccfa <__sfputc_r+0x16>
 800ccf6:	290a      	cmp	r1, #10
 800ccf8:	d103      	bne.n	800cd02 <__sfputc_r+0x1e>
 800ccfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccfe:	f000 be80 	b.w	800da02 <__swbuf_r>
 800cd02:	6813      	ldr	r3, [r2, #0]
 800cd04:	1c58      	adds	r0, r3, #1
 800cd06:	6010      	str	r0, [r2, #0]
 800cd08:	7019      	strb	r1, [r3, #0]
 800cd0a:	4608      	mov	r0, r1
 800cd0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <__sfputs_r>:
 800cd12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd14:	4606      	mov	r6, r0
 800cd16:	460f      	mov	r7, r1
 800cd18:	4614      	mov	r4, r2
 800cd1a:	18d5      	adds	r5, r2, r3
 800cd1c:	42ac      	cmp	r4, r5
 800cd1e:	d101      	bne.n	800cd24 <__sfputs_r+0x12>
 800cd20:	2000      	movs	r0, #0
 800cd22:	e007      	b.n	800cd34 <__sfputs_r+0x22>
 800cd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd28:	463a      	mov	r2, r7
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f7ff ffda 	bl	800cce4 <__sfputc_r>
 800cd30:	1c43      	adds	r3, r0, #1
 800cd32:	d1f3      	bne.n	800cd1c <__sfputs_r+0xa>
 800cd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd38 <_vfiprintf_r>:
 800cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3c:	460d      	mov	r5, r1
 800cd3e:	b09d      	sub	sp, #116	@ 0x74
 800cd40:	4614      	mov	r4, r2
 800cd42:	4698      	mov	r8, r3
 800cd44:	4606      	mov	r6, r0
 800cd46:	b118      	cbz	r0, 800cd50 <_vfiprintf_r+0x18>
 800cd48:	6a03      	ldr	r3, [r0, #32]
 800cd4a:	b90b      	cbnz	r3, 800cd50 <_vfiprintf_r+0x18>
 800cd4c:	f7fe ff94 	bl	800bc78 <__sinit>
 800cd50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd52:	07d9      	lsls	r1, r3, #31
 800cd54:	d405      	bmi.n	800cd62 <_vfiprintf_r+0x2a>
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	059a      	lsls	r2, r3, #22
 800cd5a:	d402      	bmi.n	800cd62 <_vfiprintf_r+0x2a>
 800cd5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd5e:	f7ff f86c 	bl	800be3a <__retarget_lock_acquire_recursive>
 800cd62:	89ab      	ldrh	r3, [r5, #12]
 800cd64:	071b      	lsls	r3, r3, #28
 800cd66:	d501      	bpl.n	800cd6c <_vfiprintf_r+0x34>
 800cd68:	692b      	ldr	r3, [r5, #16]
 800cd6a:	b99b      	cbnz	r3, 800cd94 <_vfiprintf_r+0x5c>
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f000 fe86 	bl	800da80 <__swsetup_r>
 800cd74:	b170      	cbz	r0, 800cd94 <_vfiprintf_r+0x5c>
 800cd76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd78:	07dc      	lsls	r4, r3, #31
 800cd7a:	d504      	bpl.n	800cd86 <_vfiprintf_r+0x4e>
 800cd7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd80:	b01d      	add	sp, #116	@ 0x74
 800cd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd86:	89ab      	ldrh	r3, [r5, #12]
 800cd88:	0598      	lsls	r0, r3, #22
 800cd8a:	d4f7      	bmi.n	800cd7c <_vfiprintf_r+0x44>
 800cd8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd8e:	f7ff f855 	bl	800be3c <__retarget_lock_release_recursive>
 800cd92:	e7f3      	b.n	800cd7c <_vfiprintf_r+0x44>
 800cd94:	2300      	movs	r3, #0
 800cd96:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd98:	2320      	movs	r3, #32
 800cd9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cda2:	2330      	movs	r3, #48	@ 0x30
 800cda4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf54 <_vfiprintf_r+0x21c>
 800cda8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdac:	f04f 0901 	mov.w	r9, #1
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	469a      	mov	sl, r3
 800cdb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdb8:	b10a      	cbz	r2, 800cdbe <_vfiprintf_r+0x86>
 800cdba:	2a25      	cmp	r2, #37	@ 0x25
 800cdbc:	d1f9      	bne.n	800cdb2 <_vfiprintf_r+0x7a>
 800cdbe:	ebba 0b04 	subs.w	fp, sl, r4
 800cdc2:	d00b      	beq.n	800cddc <_vfiprintf_r+0xa4>
 800cdc4:	465b      	mov	r3, fp
 800cdc6:	4622      	mov	r2, r4
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f7ff ffa1 	bl	800cd12 <__sfputs_r>
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	f000 80a7 	beq.w	800cf24 <_vfiprintf_r+0x1ec>
 800cdd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdd8:	445a      	add	r2, fp
 800cdda:	9209      	str	r2, [sp, #36]	@ 0x24
 800cddc:	f89a 3000 	ldrb.w	r3, [sl]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 809f 	beq.w	800cf24 <_vfiprintf_r+0x1ec>
 800cde6:	2300      	movs	r3, #0
 800cde8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdf0:	f10a 0a01 	add.w	sl, sl, #1
 800cdf4:	9304      	str	r3, [sp, #16]
 800cdf6:	9307      	str	r3, [sp, #28]
 800cdf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdfc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdfe:	4654      	mov	r4, sl
 800ce00:	2205      	movs	r2, #5
 800ce02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce06:	4853      	ldr	r0, [pc, #332]	@ (800cf54 <_vfiprintf_r+0x21c>)
 800ce08:	f7f3 fa92 	bl	8000330 <memchr>
 800ce0c:	9a04      	ldr	r2, [sp, #16]
 800ce0e:	b9d8      	cbnz	r0, 800ce48 <_vfiprintf_r+0x110>
 800ce10:	06d1      	lsls	r1, r2, #27
 800ce12:	bf44      	itt	mi
 800ce14:	2320      	movmi	r3, #32
 800ce16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce1a:	0713      	lsls	r3, r2, #28
 800ce1c:	bf44      	itt	mi
 800ce1e:	232b      	movmi	r3, #43	@ 0x2b
 800ce20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce24:	f89a 3000 	ldrb.w	r3, [sl]
 800ce28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce2a:	d015      	beq.n	800ce58 <_vfiprintf_r+0x120>
 800ce2c:	9a07      	ldr	r2, [sp, #28]
 800ce2e:	4654      	mov	r4, sl
 800ce30:	2000      	movs	r0, #0
 800ce32:	f04f 0c0a 	mov.w	ip, #10
 800ce36:	4621      	mov	r1, r4
 800ce38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce3c:	3b30      	subs	r3, #48	@ 0x30
 800ce3e:	2b09      	cmp	r3, #9
 800ce40:	d94b      	bls.n	800ceda <_vfiprintf_r+0x1a2>
 800ce42:	b1b0      	cbz	r0, 800ce72 <_vfiprintf_r+0x13a>
 800ce44:	9207      	str	r2, [sp, #28]
 800ce46:	e014      	b.n	800ce72 <_vfiprintf_r+0x13a>
 800ce48:	eba0 0308 	sub.w	r3, r0, r8
 800ce4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce50:	4313      	orrs	r3, r2
 800ce52:	9304      	str	r3, [sp, #16]
 800ce54:	46a2      	mov	sl, r4
 800ce56:	e7d2      	b.n	800cdfe <_vfiprintf_r+0xc6>
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	1d19      	adds	r1, r3, #4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	9103      	str	r1, [sp, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	bfbb      	ittet	lt
 800ce64:	425b      	neglt	r3, r3
 800ce66:	f042 0202 	orrlt.w	r2, r2, #2
 800ce6a:	9307      	strge	r3, [sp, #28]
 800ce6c:	9307      	strlt	r3, [sp, #28]
 800ce6e:	bfb8      	it	lt
 800ce70:	9204      	strlt	r2, [sp, #16]
 800ce72:	7823      	ldrb	r3, [r4, #0]
 800ce74:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce76:	d10a      	bne.n	800ce8e <_vfiprintf_r+0x156>
 800ce78:	7863      	ldrb	r3, [r4, #1]
 800ce7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce7c:	d132      	bne.n	800cee4 <_vfiprintf_r+0x1ac>
 800ce7e:	9b03      	ldr	r3, [sp, #12]
 800ce80:	1d1a      	adds	r2, r3, #4
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	9203      	str	r2, [sp, #12]
 800ce86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce8a:	3402      	adds	r4, #2
 800ce8c:	9305      	str	r3, [sp, #20]
 800ce8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf64 <_vfiprintf_r+0x22c>
 800ce92:	7821      	ldrb	r1, [r4, #0]
 800ce94:	2203      	movs	r2, #3
 800ce96:	4650      	mov	r0, sl
 800ce98:	f7f3 fa4a 	bl	8000330 <memchr>
 800ce9c:	b138      	cbz	r0, 800ceae <_vfiprintf_r+0x176>
 800ce9e:	9b04      	ldr	r3, [sp, #16]
 800cea0:	eba0 000a 	sub.w	r0, r0, sl
 800cea4:	2240      	movs	r2, #64	@ 0x40
 800cea6:	4082      	lsls	r2, r0
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	3401      	adds	r4, #1
 800ceac:	9304      	str	r3, [sp, #16]
 800ceae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb2:	4829      	ldr	r0, [pc, #164]	@ (800cf58 <_vfiprintf_r+0x220>)
 800ceb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ceb8:	2206      	movs	r2, #6
 800ceba:	f7f3 fa39 	bl	8000330 <memchr>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d03f      	beq.n	800cf42 <_vfiprintf_r+0x20a>
 800cec2:	4b26      	ldr	r3, [pc, #152]	@ (800cf5c <_vfiprintf_r+0x224>)
 800cec4:	bb1b      	cbnz	r3, 800cf0e <_vfiprintf_r+0x1d6>
 800cec6:	9b03      	ldr	r3, [sp, #12]
 800cec8:	3307      	adds	r3, #7
 800ceca:	f023 0307 	bic.w	r3, r3, #7
 800cece:	3308      	adds	r3, #8
 800ced0:	9303      	str	r3, [sp, #12]
 800ced2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced4:	443b      	add	r3, r7
 800ced6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ced8:	e76a      	b.n	800cdb0 <_vfiprintf_r+0x78>
 800ceda:	fb0c 3202 	mla	r2, ip, r2, r3
 800cede:	460c      	mov	r4, r1
 800cee0:	2001      	movs	r0, #1
 800cee2:	e7a8      	b.n	800ce36 <_vfiprintf_r+0xfe>
 800cee4:	2300      	movs	r3, #0
 800cee6:	3401      	adds	r4, #1
 800cee8:	9305      	str	r3, [sp, #20]
 800ceea:	4619      	mov	r1, r3
 800ceec:	f04f 0c0a 	mov.w	ip, #10
 800cef0:	4620      	mov	r0, r4
 800cef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cef6:	3a30      	subs	r2, #48	@ 0x30
 800cef8:	2a09      	cmp	r2, #9
 800cefa:	d903      	bls.n	800cf04 <_vfiprintf_r+0x1cc>
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d0c6      	beq.n	800ce8e <_vfiprintf_r+0x156>
 800cf00:	9105      	str	r1, [sp, #20]
 800cf02:	e7c4      	b.n	800ce8e <_vfiprintf_r+0x156>
 800cf04:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf08:	4604      	mov	r4, r0
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e7f0      	b.n	800cef0 <_vfiprintf_r+0x1b8>
 800cf0e:	ab03      	add	r3, sp, #12
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	462a      	mov	r2, r5
 800cf14:	4b12      	ldr	r3, [pc, #72]	@ (800cf60 <_vfiprintf_r+0x228>)
 800cf16:	a904      	add	r1, sp, #16
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f7fe fa59 	bl	800b3d0 <_printf_float>
 800cf1e:	4607      	mov	r7, r0
 800cf20:	1c78      	adds	r0, r7, #1
 800cf22:	d1d6      	bne.n	800ced2 <_vfiprintf_r+0x19a>
 800cf24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf26:	07d9      	lsls	r1, r3, #31
 800cf28:	d405      	bmi.n	800cf36 <_vfiprintf_r+0x1fe>
 800cf2a:	89ab      	ldrh	r3, [r5, #12]
 800cf2c:	059a      	lsls	r2, r3, #22
 800cf2e:	d402      	bmi.n	800cf36 <_vfiprintf_r+0x1fe>
 800cf30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf32:	f7fe ff83 	bl	800be3c <__retarget_lock_release_recursive>
 800cf36:	89ab      	ldrh	r3, [r5, #12]
 800cf38:	065b      	lsls	r3, r3, #25
 800cf3a:	f53f af1f 	bmi.w	800cd7c <_vfiprintf_r+0x44>
 800cf3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf40:	e71e      	b.n	800cd80 <_vfiprintf_r+0x48>
 800cf42:	ab03      	add	r3, sp, #12
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	462a      	mov	r2, r5
 800cf48:	4b05      	ldr	r3, [pc, #20]	@ (800cf60 <_vfiprintf_r+0x228>)
 800cf4a:	a904      	add	r1, sp, #16
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	f7fe fcc7 	bl	800b8e0 <_printf_i>
 800cf52:	e7e4      	b.n	800cf1e <_vfiprintf_r+0x1e6>
 800cf54:	0800e809 	.word	0x0800e809
 800cf58:	0800e813 	.word	0x0800e813
 800cf5c:	0800b3d1 	.word	0x0800b3d1
 800cf60:	0800cd13 	.word	0x0800cd13
 800cf64:	0800e80f 	.word	0x0800e80f

0800cf68 <malloc>:
 800cf68:	4b02      	ldr	r3, [pc, #8]	@ (800cf74 <malloc+0xc>)
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	f000 b825 	b.w	800cfbc <_malloc_r>
 800cf72:	bf00      	nop
 800cf74:	24000028 	.word	0x24000028

0800cf78 <sbrk_aligned>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	4e0f      	ldr	r6, [pc, #60]	@ (800cfb8 <sbrk_aligned+0x40>)
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	6831      	ldr	r1, [r6, #0]
 800cf80:	4605      	mov	r5, r0
 800cf82:	b911      	cbnz	r1, 800cf8a <sbrk_aligned+0x12>
 800cf84:	f000 feb6 	bl	800dcf4 <_sbrk_r>
 800cf88:	6030      	str	r0, [r6, #0]
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f000 feb1 	bl	800dcf4 <_sbrk_r>
 800cf92:	1c43      	adds	r3, r0, #1
 800cf94:	d103      	bne.n	800cf9e <sbrk_aligned+0x26>
 800cf96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	bd70      	pop	{r4, r5, r6, pc}
 800cf9e:	1cc4      	adds	r4, r0, #3
 800cfa0:	f024 0403 	bic.w	r4, r4, #3
 800cfa4:	42a0      	cmp	r0, r4
 800cfa6:	d0f8      	beq.n	800cf9a <sbrk_aligned+0x22>
 800cfa8:	1a21      	subs	r1, r4, r0
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f000 fea2 	bl	800dcf4 <_sbrk_r>
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d1f2      	bne.n	800cf9a <sbrk_aligned+0x22>
 800cfb4:	e7ef      	b.n	800cf96 <sbrk_aligned+0x1e>
 800cfb6:	bf00      	nop
 800cfb8:	24000ac4 	.word	0x24000ac4

0800cfbc <_malloc_r>:
 800cfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc0:	1ccd      	adds	r5, r1, #3
 800cfc2:	f025 0503 	bic.w	r5, r5, #3
 800cfc6:	3508      	adds	r5, #8
 800cfc8:	2d0c      	cmp	r5, #12
 800cfca:	bf38      	it	cc
 800cfcc:	250c      	movcc	r5, #12
 800cfce:	2d00      	cmp	r5, #0
 800cfd0:	4606      	mov	r6, r0
 800cfd2:	db01      	blt.n	800cfd8 <_malloc_r+0x1c>
 800cfd4:	42a9      	cmp	r1, r5
 800cfd6:	d904      	bls.n	800cfe2 <_malloc_r+0x26>
 800cfd8:	230c      	movs	r3, #12
 800cfda:	6033      	str	r3, [r6, #0]
 800cfdc:	2000      	movs	r0, #0
 800cfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0b8 <_malloc_r+0xfc>
 800cfe6:	f000 f915 	bl	800d214 <__malloc_lock>
 800cfea:	f8d8 3000 	ldr.w	r3, [r8]
 800cfee:	461c      	mov	r4, r3
 800cff0:	bb44      	cbnz	r4, 800d044 <_malloc_r+0x88>
 800cff2:	4629      	mov	r1, r5
 800cff4:	4630      	mov	r0, r6
 800cff6:	f7ff ffbf 	bl	800cf78 <sbrk_aligned>
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	4604      	mov	r4, r0
 800cffe:	d158      	bne.n	800d0b2 <_malloc_r+0xf6>
 800d000:	f8d8 4000 	ldr.w	r4, [r8]
 800d004:	4627      	mov	r7, r4
 800d006:	2f00      	cmp	r7, #0
 800d008:	d143      	bne.n	800d092 <_malloc_r+0xd6>
 800d00a:	2c00      	cmp	r4, #0
 800d00c:	d04b      	beq.n	800d0a6 <_malloc_r+0xea>
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	4639      	mov	r1, r7
 800d012:	4630      	mov	r0, r6
 800d014:	eb04 0903 	add.w	r9, r4, r3
 800d018:	f000 fe6c 	bl	800dcf4 <_sbrk_r>
 800d01c:	4581      	cmp	r9, r0
 800d01e:	d142      	bne.n	800d0a6 <_malloc_r+0xea>
 800d020:	6821      	ldr	r1, [r4, #0]
 800d022:	1a6d      	subs	r5, r5, r1
 800d024:	4629      	mov	r1, r5
 800d026:	4630      	mov	r0, r6
 800d028:	f7ff ffa6 	bl	800cf78 <sbrk_aligned>
 800d02c:	3001      	adds	r0, #1
 800d02e:	d03a      	beq.n	800d0a6 <_malloc_r+0xea>
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	442b      	add	r3, r5
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	f8d8 3000 	ldr.w	r3, [r8]
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	bb62      	cbnz	r2, 800d098 <_malloc_r+0xdc>
 800d03e:	f8c8 7000 	str.w	r7, [r8]
 800d042:	e00f      	b.n	800d064 <_malloc_r+0xa8>
 800d044:	6822      	ldr	r2, [r4, #0]
 800d046:	1b52      	subs	r2, r2, r5
 800d048:	d420      	bmi.n	800d08c <_malloc_r+0xd0>
 800d04a:	2a0b      	cmp	r2, #11
 800d04c:	d917      	bls.n	800d07e <_malloc_r+0xc2>
 800d04e:	1961      	adds	r1, r4, r5
 800d050:	42a3      	cmp	r3, r4
 800d052:	6025      	str	r5, [r4, #0]
 800d054:	bf18      	it	ne
 800d056:	6059      	strne	r1, [r3, #4]
 800d058:	6863      	ldr	r3, [r4, #4]
 800d05a:	bf08      	it	eq
 800d05c:	f8c8 1000 	streq.w	r1, [r8]
 800d060:	5162      	str	r2, [r4, r5]
 800d062:	604b      	str	r3, [r1, #4]
 800d064:	4630      	mov	r0, r6
 800d066:	f000 f8db 	bl	800d220 <__malloc_unlock>
 800d06a:	f104 000b 	add.w	r0, r4, #11
 800d06e:	1d23      	adds	r3, r4, #4
 800d070:	f020 0007 	bic.w	r0, r0, #7
 800d074:	1ac2      	subs	r2, r0, r3
 800d076:	bf1c      	itt	ne
 800d078:	1a1b      	subne	r3, r3, r0
 800d07a:	50a3      	strne	r3, [r4, r2]
 800d07c:	e7af      	b.n	800cfde <_malloc_r+0x22>
 800d07e:	6862      	ldr	r2, [r4, #4]
 800d080:	42a3      	cmp	r3, r4
 800d082:	bf0c      	ite	eq
 800d084:	f8c8 2000 	streq.w	r2, [r8]
 800d088:	605a      	strne	r2, [r3, #4]
 800d08a:	e7eb      	b.n	800d064 <_malloc_r+0xa8>
 800d08c:	4623      	mov	r3, r4
 800d08e:	6864      	ldr	r4, [r4, #4]
 800d090:	e7ae      	b.n	800cff0 <_malloc_r+0x34>
 800d092:	463c      	mov	r4, r7
 800d094:	687f      	ldr	r7, [r7, #4]
 800d096:	e7b6      	b.n	800d006 <_malloc_r+0x4a>
 800d098:	461a      	mov	r2, r3
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	42a3      	cmp	r3, r4
 800d09e:	d1fb      	bne.n	800d098 <_malloc_r+0xdc>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	6053      	str	r3, [r2, #4]
 800d0a4:	e7de      	b.n	800d064 <_malloc_r+0xa8>
 800d0a6:	230c      	movs	r3, #12
 800d0a8:	6033      	str	r3, [r6, #0]
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f000 f8b8 	bl	800d220 <__malloc_unlock>
 800d0b0:	e794      	b.n	800cfdc <_malloc_r+0x20>
 800d0b2:	6005      	str	r5, [r0, #0]
 800d0b4:	e7d6      	b.n	800d064 <_malloc_r+0xa8>
 800d0b6:	bf00      	nop
 800d0b8:	24000ac8 	.word	0x24000ac8

0800d0bc <__sflush_r>:
 800d0bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c4:	0716      	lsls	r6, r2, #28
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	d454      	bmi.n	800d176 <__sflush_r+0xba>
 800d0cc:	684b      	ldr	r3, [r1, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	dc02      	bgt.n	800d0d8 <__sflush_r+0x1c>
 800d0d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	dd48      	ble.n	800d16a <__sflush_r+0xae>
 800d0d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0da:	2e00      	cmp	r6, #0
 800d0dc:	d045      	beq.n	800d16a <__sflush_r+0xae>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d0e4:	682f      	ldr	r7, [r5, #0]
 800d0e6:	6a21      	ldr	r1, [r4, #32]
 800d0e8:	602b      	str	r3, [r5, #0]
 800d0ea:	d030      	beq.n	800d14e <__sflush_r+0x92>
 800d0ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d0ee:	89a3      	ldrh	r3, [r4, #12]
 800d0f0:	0759      	lsls	r1, r3, #29
 800d0f2:	d505      	bpl.n	800d100 <__sflush_r+0x44>
 800d0f4:	6863      	ldr	r3, [r4, #4]
 800d0f6:	1ad2      	subs	r2, r2, r3
 800d0f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d0fa:	b10b      	cbz	r3, 800d100 <__sflush_r+0x44>
 800d0fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d0fe:	1ad2      	subs	r2, r2, r3
 800d100:	2300      	movs	r3, #0
 800d102:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d104:	6a21      	ldr	r1, [r4, #32]
 800d106:	4628      	mov	r0, r5
 800d108:	47b0      	blx	r6
 800d10a:	1c43      	adds	r3, r0, #1
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	d106      	bne.n	800d11e <__sflush_r+0x62>
 800d110:	6829      	ldr	r1, [r5, #0]
 800d112:	291d      	cmp	r1, #29
 800d114:	d82b      	bhi.n	800d16e <__sflush_r+0xb2>
 800d116:	4a2a      	ldr	r2, [pc, #168]	@ (800d1c0 <__sflush_r+0x104>)
 800d118:	40ca      	lsrs	r2, r1
 800d11a:	07d6      	lsls	r6, r2, #31
 800d11c:	d527      	bpl.n	800d16e <__sflush_r+0xb2>
 800d11e:	2200      	movs	r2, #0
 800d120:	6062      	str	r2, [r4, #4]
 800d122:	04d9      	lsls	r1, r3, #19
 800d124:	6922      	ldr	r2, [r4, #16]
 800d126:	6022      	str	r2, [r4, #0]
 800d128:	d504      	bpl.n	800d134 <__sflush_r+0x78>
 800d12a:	1c42      	adds	r2, r0, #1
 800d12c:	d101      	bne.n	800d132 <__sflush_r+0x76>
 800d12e:	682b      	ldr	r3, [r5, #0]
 800d130:	b903      	cbnz	r3, 800d134 <__sflush_r+0x78>
 800d132:	6560      	str	r0, [r4, #84]	@ 0x54
 800d134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d136:	602f      	str	r7, [r5, #0]
 800d138:	b1b9      	cbz	r1, 800d16a <__sflush_r+0xae>
 800d13a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d13e:	4299      	cmp	r1, r3
 800d140:	d002      	beq.n	800d148 <__sflush_r+0x8c>
 800d142:	4628      	mov	r0, r5
 800d144:	f000 fe4c 	bl	800dde0 <_free_r>
 800d148:	2300      	movs	r3, #0
 800d14a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d14c:	e00d      	b.n	800d16a <__sflush_r+0xae>
 800d14e:	2301      	movs	r3, #1
 800d150:	4628      	mov	r0, r5
 800d152:	47b0      	blx	r6
 800d154:	4602      	mov	r2, r0
 800d156:	1c50      	adds	r0, r2, #1
 800d158:	d1c9      	bne.n	800d0ee <__sflush_r+0x32>
 800d15a:	682b      	ldr	r3, [r5, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d0c6      	beq.n	800d0ee <__sflush_r+0x32>
 800d160:	2b1d      	cmp	r3, #29
 800d162:	d001      	beq.n	800d168 <__sflush_r+0xac>
 800d164:	2b16      	cmp	r3, #22
 800d166:	d11e      	bne.n	800d1a6 <__sflush_r+0xea>
 800d168:	602f      	str	r7, [r5, #0]
 800d16a:	2000      	movs	r0, #0
 800d16c:	e022      	b.n	800d1b4 <__sflush_r+0xf8>
 800d16e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d172:	b21b      	sxth	r3, r3
 800d174:	e01b      	b.n	800d1ae <__sflush_r+0xf2>
 800d176:	690f      	ldr	r7, [r1, #16]
 800d178:	2f00      	cmp	r7, #0
 800d17a:	d0f6      	beq.n	800d16a <__sflush_r+0xae>
 800d17c:	0793      	lsls	r3, r2, #30
 800d17e:	680e      	ldr	r6, [r1, #0]
 800d180:	bf08      	it	eq
 800d182:	694b      	ldreq	r3, [r1, #20]
 800d184:	600f      	str	r7, [r1, #0]
 800d186:	bf18      	it	ne
 800d188:	2300      	movne	r3, #0
 800d18a:	eba6 0807 	sub.w	r8, r6, r7
 800d18e:	608b      	str	r3, [r1, #8]
 800d190:	f1b8 0f00 	cmp.w	r8, #0
 800d194:	dde9      	ble.n	800d16a <__sflush_r+0xae>
 800d196:	6a21      	ldr	r1, [r4, #32]
 800d198:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d19a:	4643      	mov	r3, r8
 800d19c:	463a      	mov	r2, r7
 800d19e:	4628      	mov	r0, r5
 800d1a0:	47b0      	blx	r6
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	dc08      	bgt.n	800d1b8 <__sflush_r+0xfc>
 800d1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1ae:	81a3      	strh	r3, [r4, #12]
 800d1b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b8:	4407      	add	r7, r0
 800d1ba:	eba8 0800 	sub.w	r8, r8, r0
 800d1be:	e7e7      	b.n	800d190 <__sflush_r+0xd4>
 800d1c0:	20400001 	.word	0x20400001

0800d1c4 <_fflush_r>:
 800d1c4:	b538      	push	{r3, r4, r5, lr}
 800d1c6:	690b      	ldr	r3, [r1, #16]
 800d1c8:	4605      	mov	r5, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	b913      	cbnz	r3, 800d1d4 <_fflush_r+0x10>
 800d1ce:	2500      	movs	r5, #0
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	bd38      	pop	{r3, r4, r5, pc}
 800d1d4:	b118      	cbz	r0, 800d1de <_fflush_r+0x1a>
 800d1d6:	6a03      	ldr	r3, [r0, #32]
 800d1d8:	b90b      	cbnz	r3, 800d1de <_fflush_r+0x1a>
 800d1da:	f7fe fd4d 	bl	800bc78 <__sinit>
 800d1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d0f3      	beq.n	800d1ce <_fflush_r+0xa>
 800d1e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d1e8:	07d0      	lsls	r0, r2, #31
 800d1ea:	d404      	bmi.n	800d1f6 <_fflush_r+0x32>
 800d1ec:	0599      	lsls	r1, r3, #22
 800d1ee:	d402      	bmi.n	800d1f6 <_fflush_r+0x32>
 800d1f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1f2:	f7fe fe22 	bl	800be3a <__retarget_lock_acquire_recursive>
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	4621      	mov	r1, r4
 800d1fa:	f7ff ff5f 	bl	800d0bc <__sflush_r>
 800d1fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d200:	07da      	lsls	r2, r3, #31
 800d202:	4605      	mov	r5, r0
 800d204:	d4e4      	bmi.n	800d1d0 <_fflush_r+0xc>
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	059b      	lsls	r3, r3, #22
 800d20a:	d4e1      	bmi.n	800d1d0 <_fflush_r+0xc>
 800d20c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d20e:	f7fe fe15 	bl	800be3c <__retarget_lock_release_recursive>
 800d212:	e7dd      	b.n	800d1d0 <_fflush_r+0xc>

0800d214 <__malloc_lock>:
 800d214:	4801      	ldr	r0, [pc, #4]	@ (800d21c <__malloc_lock+0x8>)
 800d216:	f7fe be10 	b.w	800be3a <__retarget_lock_acquire_recursive>
 800d21a:	bf00      	nop
 800d21c:	24000ac0 	.word	0x24000ac0

0800d220 <__malloc_unlock>:
 800d220:	4801      	ldr	r0, [pc, #4]	@ (800d228 <__malloc_unlock+0x8>)
 800d222:	f7fe be0b 	b.w	800be3c <__retarget_lock_release_recursive>
 800d226:	bf00      	nop
 800d228:	24000ac0 	.word	0x24000ac0

0800d22c <_Balloc>:
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	69c6      	ldr	r6, [r0, #28]
 800d230:	4604      	mov	r4, r0
 800d232:	460d      	mov	r5, r1
 800d234:	b976      	cbnz	r6, 800d254 <_Balloc+0x28>
 800d236:	2010      	movs	r0, #16
 800d238:	f7ff fe96 	bl	800cf68 <malloc>
 800d23c:	4602      	mov	r2, r0
 800d23e:	61e0      	str	r0, [r4, #28]
 800d240:	b920      	cbnz	r0, 800d24c <_Balloc+0x20>
 800d242:	4b18      	ldr	r3, [pc, #96]	@ (800d2a4 <_Balloc+0x78>)
 800d244:	4818      	ldr	r0, [pc, #96]	@ (800d2a8 <_Balloc+0x7c>)
 800d246:	216b      	movs	r1, #107	@ 0x6b
 800d248:	f000 fd98 	bl	800dd7c <__assert_func>
 800d24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d250:	6006      	str	r6, [r0, #0]
 800d252:	60c6      	str	r6, [r0, #12]
 800d254:	69e6      	ldr	r6, [r4, #28]
 800d256:	68f3      	ldr	r3, [r6, #12]
 800d258:	b183      	cbz	r3, 800d27c <_Balloc+0x50>
 800d25a:	69e3      	ldr	r3, [r4, #28]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d262:	b9b8      	cbnz	r0, 800d294 <_Balloc+0x68>
 800d264:	2101      	movs	r1, #1
 800d266:	fa01 f605 	lsl.w	r6, r1, r5
 800d26a:	1d72      	adds	r2, r6, #5
 800d26c:	0092      	lsls	r2, r2, #2
 800d26e:	4620      	mov	r0, r4
 800d270:	f000 fda2 	bl	800ddb8 <_calloc_r>
 800d274:	b160      	cbz	r0, 800d290 <_Balloc+0x64>
 800d276:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d27a:	e00e      	b.n	800d29a <_Balloc+0x6e>
 800d27c:	2221      	movs	r2, #33	@ 0x21
 800d27e:	2104      	movs	r1, #4
 800d280:	4620      	mov	r0, r4
 800d282:	f000 fd99 	bl	800ddb8 <_calloc_r>
 800d286:	69e3      	ldr	r3, [r4, #28]
 800d288:	60f0      	str	r0, [r6, #12]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1e4      	bne.n	800d25a <_Balloc+0x2e>
 800d290:	2000      	movs	r0, #0
 800d292:	bd70      	pop	{r4, r5, r6, pc}
 800d294:	6802      	ldr	r2, [r0, #0]
 800d296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d29a:	2300      	movs	r3, #0
 800d29c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2a0:	e7f7      	b.n	800d292 <_Balloc+0x66>
 800d2a2:	bf00      	nop
 800d2a4:	0800e789 	.word	0x0800e789
 800d2a8:	0800e81a 	.word	0x0800e81a

0800d2ac <_Bfree>:
 800d2ac:	b570      	push	{r4, r5, r6, lr}
 800d2ae:	69c6      	ldr	r6, [r0, #28]
 800d2b0:	4605      	mov	r5, r0
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	b976      	cbnz	r6, 800d2d4 <_Bfree+0x28>
 800d2b6:	2010      	movs	r0, #16
 800d2b8:	f7ff fe56 	bl	800cf68 <malloc>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	61e8      	str	r0, [r5, #28]
 800d2c0:	b920      	cbnz	r0, 800d2cc <_Bfree+0x20>
 800d2c2:	4b09      	ldr	r3, [pc, #36]	@ (800d2e8 <_Bfree+0x3c>)
 800d2c4:	4809      	ldr	r0, [pc, #36]	@ (800d2ec <_Bfree+0x40>)
 800d2c6:	218f      	movs	r1, #143	@ 0x8f
 800d2c8:	f000 fd58 	bl	800dd7c <__assert_func>
 800d2cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2d0:	6006      	str	r6, [r0, #0]
 800d2d2:	60c6      	str	r6, [r0, #12]
 800d2d4:	b13c      	cbz	r4, 800d2e6 <_Bfree+0x3a>
 800d2d6:	69eb      	ldr	r3, [r5, #28]
 800d2d8:	6862      	ldr	r2, [r4, #4]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2e0:	6021      	str	r1, [r4, #0]
 800d2e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d2e6:	bd70      	pop	{r4, r5, r6, pc}
 800d2e8:	0800e789 	.word	0x0800e789
 800d2ec:	0800e81a 	.word	0x0800e81a

0800d2f0 <__multadd>:
 800d2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f4:	690d      	ldr	r5, [r1, #16]
 800d2f6:	4607      	mov	r7, r0
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	461e      	mov	r6, r3
 800d2fc:	f101 0c14 	add.w	ip, r1, #20
 800d300:	2000      	movs	r0, #0
 800d302:	f8dc 3000 	ldr.w	r3, [ip]
 800d306:	b299      	uxth	r1, r3
 800d308:	fb02 6101 	mla	r1, r2, r1, r6
 800d30c:	0c1e      	lsrs	r6, r3, #16
 800d30e:	0c0b      	lsrs	r3, r1, #16
 800d310:	fb02 3306 	mla	r3, r2, r6, r3
 800d314:	b289      	uxth	r1, r1
 800d316:	3001      	adds	r0, #1
 800d318:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d31c:	4285      	cmp	r5, r0
 800d31e:	f84c 1b04 	str.w	r1, [ip], #4
 800d322:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d326:	dcec      	bgt.n	800d302 <__multadd+0x12>
 800d328:	b30e      	cbz	r6, 800d36e <__multadd+0x7e>
 800d32a:	68a3      	ldr	r3, [r4, #8]
 800d32c:	42ab      	cmp	r3, r5
 800d32e:	dc19      	bgt.n	800d364 <__multadd+0x74>
 800d330:	6861      	ldr	r1, [r4, #4]
 800d332:	4638      	mov	r0, r7
 800d334:	3101      	adds	r1, #1
 800d336:	f7ff ff79 	bl	800d22c <_Balloc>
 800d33a:	4680      	mov	r8, r0
 800d33c:	b928      	cbnz	r0, 800d34a <__multadd+0x5a>
 800d33e:	4602      	mov	r2, r0
 800d340:	4b0c      	ldr	r3, [pc, #48]	@ (800d374 <__multadd+0x84>)
 800d342:	480d      	ldr	r0, [pc, #52]	@ (800d378 <__multadd+0x88>)
 800d344:	21ba      	movs	r1, #186	@ 0xba
 800d346:	f000 fd19 	bl	800dd7c <__assert_func>
 800d34a:	6922      	ldr	r2, [r4, #16]
 800d34c:	3202      	adds	r2, #2
 800d34e:	f104 010c 	add.w	r1, r4, #12
 800d352:	0092      	lsls	r2, r2, #2
 800d354:	300c      	adds	r0, #12
 800d356:	f7fe fd77 	bl	800be48 <memcpy>
 800d35a:	4621      	mov	r1, r4
 800d35c:	4638      	mov	r0, r7
 800d35e:	f7ff ffa5 	bl	800d2ac <_Bfree>
 800d362:	4644      	mov	r4, r8
 800d364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d368:	3501      	adds	r5, #1
 800d36a:	615e      	str	r6, [r3, #20]
 800d36c:	6125      	str	r5, [r4, #16]
 800d36e:	4620      	mov	r0, r4
 800d370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d374:	0800e7f8 	.word	0x0800e7f8
 800d378:	0800e81a 	.word	0x0800e81a

0800d37c <__hi0bits>:
 800d37c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d380:	4603      	mov	r3, r0
 800d382:	bf36      	itet	cc
 800d384:	0403      	lslcc	r3, r0, #16
 800d386:	2000      	movcs	r0, #0
 800d388:	2010      	movcc	r0, #16
 800d38a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d38e:	bf3c      	itt	cc
 800d390:	021b      	lslcc	r3, r3, #8
 800d392:	3008      	addcc	r0, #8
 800d394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d398:	bf3c      	itt	cc
 800d39a:	011b      	lslcc	r3, r3, #4
 800d39c:	3004      	addcc	r0, #4
 800d39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3a2:	bf3c      	itt	cc
 800d3a4:	009b      	lslcc	r3, r3, #2
 800d3a6:	3002      	addcc	r0, #2
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	db05      	blt.n	800d3b8 <__hi0bits+0x3c>
 800d3ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d3b0:	f100 0001 	add.w	r0, r0, #1
 800d3b4:	bf08      	it	eq
 800d3b6:	2020      	moveq	r0, #32
 800d3b8:	4770      	bx	lr

0800d3ba <__lo0bits>:
 800d3ba:	6803      	ldr	r3, [r0, #0]
 800d3bc:	4602      	mov	r2, r0
 800d3be:	f013 0007 	ands.w	r0, r3, #7
 800d3c2:	d00b      	beq.n	800d3dc <__lo0bits+0x22>
 800d3c4:	07d9      	lsls	r1, r3, #31
 800d3c6:	d421      	bmi.n	800d40c <__lo0bits+0x52>
 800d3c8:	0798      	lsls	r0, r3, #30
 800d3ca:	bf49      	itett	mi
 800d3cc:	085b      	lsrmi	r3, r3, #1
 800d3ce:	089b      	lsrpl	r3, r3, #2
 800d3d0:	2001      	movmi	r0, #1
 800d3d2:	6013      	strmi	r3, [r2, #0]
 800d3d4:	bf5c      	itt	pl
 800d3d6:	6013      	strpl	r3, [r2, #0]
 800d3d8:	2002      	movpl	r0, #2
 800d3da:	4770      	bx	lr
 800d3dc:	b299      	uxth	r1, r3
 800d3de:	b909      	cbnz	r1, 800d3e4 <__lo0bits+0x2a>
 800d3e0:	0c1b      	lsrs	r3, r3, #16
 800d3e2:	2010      	movs	r0, #16
 800d3e4:	b2d9      	uxtb	r1, r3
 800d3e6:	b909      	cbnz	r1, 800d3ec <__lo0bits+0x32>
 800d3e8:	3008      	adds	r0, #8
 800d3ea:	0a1b      	lsrs	r3, r3, #8
 800d3ec:	0719      	lsls	r1, r3, #28
 800d3ee:	bf04      	itt	eq
 800d3f0:	091b      	lsreq	r3, r3, #4
 800d3f2:	3004      	addeq	r0, #4
 800d3f4:	0799      	lsls	r1, r3, #30
 800d3f6:	bf04      	itt	eq
 800d3f8:	089b      	lsreq	r3, r3, #2
 800d3fa:	3002      	addeq	r0, #2
 800d3fc:	07d9      	lsls	r1, r3, #31
 800d3fe:	d403      	bmi.n	800d408 <__lo0bits+0x4e>
 800d400:	085b      	lsrs	r3, r3, #1
 800d402:	f100 0001 	add.w	r0, r0, #1
 800d406:	d003      	beq.n	800d410 <__lo0bits+0x56>
 800d408:	6013      	str	r3, [r2, #0]
 800d40a:	4770      	bx	lr
 800d40c:	2000      	movs	r0, #0
 800d40e:	4770      	bx	lr
 800d410:	2020      	movs	r0, #32
 800d412:	4770      	bx	lr

0800d414 <__i2b>:
 800d414:	b510      	push	{r4, lr}
 800d416:	460c      	mov	r4, r1
 800d418:	2101      	movs	r1, #1
 800d41a:	f7ff ff07 	bl	800d22c <_Balloc>
 800d41e:	4602      	mov	r2, r0
 800d420:	b928      	cbnz	r0, 800d42e <__i2b+0x1a>
 800d422:	4b05      	ldr	r3, [pc, #20]	@ (800d438 <__i2b+0x24>)
 800d424:	4805      	ldr	r0, [pc, #20]	@ (800d43c <__i2b+0x28>)
 800d426:	f240 1145 	movw	r1, #325	@ 0x145
 800d42a:	f000 fca7 	bl	800dd7c <__assert_func>
 800d42e:	2301      	movs	r3, #1
 800d430:	6144      	str	r4, [r0, #20]
 800d432:	6103      	str	r3, [r0, #16]
 800d434:	bd10      	pop	{r4, pc}
 800d436:	bf00      	nop
 800d438:	0800e7f8 	.word	0x0800e7f8
 800d43c:	0800e81a 	.word	0x0800e81a

0800d440 <__multiply>:
 800d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	4617      	mov	r7, r2
 800d446:	690a      	ldr	r2, [r1, #16]
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	bfa8      	it	ge
 800d44e:	463b      	movge	r3, r7
 800d450:	4689      	mov	r9, r1
 800d452:	bfa4      	itt	ge
 800d454:	460f      	movge	r7, r1
 800d456:	4699      	movge	r9, r3
 800d458:	693d      	ldr	r5, [r7, #16]
 800d45a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	6879      	ldr	r1, [r7, #4]
 800d462:	eb05 060a 	add.w	r6, r5, sl
 800d466:	42b3      	cmp	r3, r6
 800d468:	b085      	sub	sp, #20
 800d46a:	bfb8      	it	lt
 800d46c:	3101      	addlt	r1, #1
 800d46e:	f7ff fedd 	bl	800d22c <_Balloc>
 800d472:	b930      	cbnz	r0, 800d482 <__multiply+0x42>
 800d474:	4602      	mov	r2, r0
 800d476:	4b41      	ldr	r3, [pc, #260]	@ (800d57c <__multiply+0x13c>)
 800d478:	4841      	ldr	r0, [pc, #260]	@ (800d580 <__multiply+0x140>)
 800d47a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d47e:	f000 fc7d 	bl	800dd7c <__assert_func>
 800d482:	f100 0414 	add.w	r4, r0, #20
 800d486:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d48a:	4623      	mov	r3, r4
 800d48c:	2200      	movs	r2, #0
 800d48e:	4573      	cmp	r3, lr
 800d490:	d320      	bcc.n	800d4d4 <__multiply+0x94>
 800d492:	f107 0814 	add.w	r8, r7, #20
 800d496:	f109 0114 	add.w	r1, r9, #20
 800d49a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d49e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d4a2:	9302      	str	r3, [sp, #8]
 800d4a4:	1beb      	subs	r3, r5, r7
 800d4a6:	3b15      	subs	r3, #21
 800d4a8:	f023 0303 	bic.w	r3, r3, #3
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	3715      	adds	r7, #21
 800d4b0:	42bd      	cmp	r5, r7
 800d4b2:	bf38      	it	cc
 800d4b4:	2304      	movcc	r3, #4
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	9b02      	ldr	r3, [sp, #8]
 800d4ba:	9103      	str	r1, [sp, #12]
 800d4bc:	428b      	cmp	r3, r1
 800d4be:	d80c      	bhi.n	800d4da <__multiply+0x9a>
 800d4c0:	2e00      	cmp	r6, #0
 800d4c2:	dd03      	ble.n	800d4cc <__multiply+0x8c>
 800d4c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d055      	beq.n	800d578 <__multiply+0x138>
 800d4cc:	6106      	str	r6, [r0, #16]
 800d4ce:	b005      	add	sp, #20
 800d4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d4:	f843 2b04 	str.w	r2, [r3], #4
 800d4d8:	e7d9      	b.n	800d48e <__multiply+0x4e>
 800d4da:	f8b1 a000 	ldrh.w	sl, [r1]
 800d4de:	f1ba 0f00 	cmp.w	sl, #0
 800d4e2:	d01f      	beq.n	800d524 <__multiply+0xe4>
 800d4e4:	46c4      	mov	ip, r8
 800d4e6:	46a1      	mov	r9, r4
 800d4e8:	2700      	movs	r7, #0
 800d4ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d4ee:	f8d9 3000 	ldr.w	r3, [r9]
 800d4f2:	fa1f fb82 	uxth.w	fp, r2
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d4fc:	443b      	add	r3, r7
 800d4fe:	f8d9 7000 	ldr.w	r7, [r9]
 800d502:	0c12      	lsrs	r2, r2, #16
 800d504:	0c3f      	lsrs	r7, r7, #16
 800d506:	fb0a 7202 	mla	r2, sl, r2, r7
 800d50a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d50e:	b29b      	uxth	r3, r3
 800d510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d514:	4565      	cmp	r5, ip
 800d516:	f849 3b04 	str.w	r3, [r9], #4
 800d51a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d51e:	d8e4      	bhi.n	800d4ea <__multiply+0xaa>
 800d520:	9b01      	ldr	r3, [sp, #4]
 800d522:	50e7      	str	r7, [r4, r3]
 800d524:	9b03      	ldr	r3, [sp, #12]
 800d526:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d52a:	3104      	adds	r1, #4
 800d52c:	f1b9 0f00 	cmp.w	r9, #0
 800d530:	d020      	beq.n	800d574 <__multiply+0x134>
 800d532:	6823      	ldr	r3, [r4, #0]
 800d534:	4647      	mov	r7, r8
 800d536:	46a4      	mov	ip, r4
 800d538:	f04f 0a00 	mov.w	sl, #0
 800d53c:	f8b7 b000 	ldrh.w	fp, [r7]
 800d540:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d544:	fb09 220b 	mla	r2, r9, fp, r2
 800d548:	4452      	add	r2, sl
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d550:	f84c 3b04 	str.w	r3, [ip], #4
 800d554:	f857 3b04 	ldr.w	r3, [r7], #4
 800d558:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d55c:	f8bc 3000 	ldrh.w	r3, [ip]
 800d560:	fb09 330a 	mla	r3, r9, sl, r3
 800d564:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d568:	42bd      	cmp	r5, r7
 800d56a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d56e:	d8e5      	bhi.n	800d53c <__multiply+0xfc>
 800d570:	9a01      	ldr	r2, [sp, #4]
 800d572:	50a3      	str	r3, [r4, r2]
 800d574:	3404      	adds	r4, #4
 800d576:	e79f      	b.n	800d4b8 <__multiply+0x78>
 800d578:	3e01      	subs	r6, #1
 800d57a:	e7a1      	b.n	800d4c0 <__multiply+0x80>
 800d57c:	0800e7f8 	.word	0x0800e7f8
 800d580:	0800e81a 	.word	0x0800e81a

0800d584 <__pow5mult>:
 800d584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d588:	4615      	mov	r5, r2
 800d58a:	f012 0203 	ands.w	r2, r2, #3
 800d58e:	4607      	mov	r7, r0
 800d590:	460e      	mov	r6, r1
 800d592:	d007      	beq.n	800d5a4 <__pow5mult+0x20>
 800d594:	4c25      	ldr	r4, [pc, #148]	@ (800d62c <__pow5mult+0xa8>)
 800d596:	3a01      	subs	r2, #1
 800d598:	2300      	movs	r3, #0
 800d59a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d59e:	f7ff fea7 	bl	800d2f0 <__multadd>
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	10ad      	asrs	r5, r5, #2
 800d5a6:	d03d      	beq.n	800d624 <__pow5mult+0xa0>
 800d5a8:	69fc      	ldr	r4, [r7, #28]
 800d5aa:	b97c      	cbnz	r4, 800d5cc <__pow5mult+0x48>
 800d5ac:	2010      	movs	r0, #16
 800d5ae:	f7ff fcdb 	bl	800cf68 <malloc>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	61f8      	str	r0, [r7, #28]
 800d5b6:	b928      	cbnz	r0, 800d5c4 <__pow5mult+0x40>
 800d5b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d630 <__pow5mult+0xac>)
 800d5ba:	481e      	ldr	r0, [pc, #120]	@ (800d634 <__pow5mult+0xb0>)
 800d5bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d5c0:	f000 fbdc 	bl	800dd7c <__assert_func>
 800d5c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5c8:	6004      	str	r4, [r0, #0]
 800d5ca:	60c4      	str	r4, [r0, #12]
 800d5cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d5d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5d4:	b94c      	cbnz	r4, 800d5ea <__pow5mult+0x66>
 800d5d6:	f240 2171 	movw	r1, #625	@ 0x271
 800d5da:	4638      	mov	r0, r7
 800d5dc:	f7ff ff1a 	bl	800d414 <__i2b>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	6003      	str	r3, [r0, #0]
 800d5ea:	f04f 0900 	mov.w	r9, #0
 800d5ee:	07eb      	lsls	r3, r5, #31
 800d5f0:	d50a      	bpl.n	800d608 <__pow5mult+0x84>
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	4622      	mov	r2, r4
 800d5f6:	4638      	mov	r0, r7
 800d5f8:	f7ff ff22 	bl	800d440 <__multiply>
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	4680      	mov	r8, r0
 800d600:	4638      	mov	r0, r7
 800d602:	f7ff fe53 	bl	800d2ac <_Bfree>
 800d606:	4646      	mov	r6, r8
 800d608:	106d      	asrs	r5, r5, #1
 800d60a:	d00b      	beq.n	800d624 <__pow5mult+0xa0>
 800d60c:	6820      	ldr	r0, [r4, #0]
 800d60e:	b938      	cbnz	r0, 800d620 <__pow5mult+0x9c>
 800d610:	4622      	mov	r2, r4
 800d612:	4621      	mov	r1, r4
 800d614:	4638      	mov	r0, r7
 800d616:	f7ff ff13 	bl	800d440 <__multiply>
 800d61a:	6020      	str	r0, [r4, #0]
 800d61c:	f8c0 9000 	str.w	r9, [r0]
 800d620:	4604      	mov	r4, r0
 800d622:	e7e4      	b.n	800d5ee <__pow5mult+0x6a>
 800d624:	4630      	mov	r0, r6
 800d626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d62a:	bf00      	nop
 800d62c:	0800e8bc 	.word	0x0800e8bc
 800d630:	0800e789 	.word	0x0800e789
 800d634:	0800e81a 	.word	0x0800e81a

0800d638 <__lshift>:
 800d638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d63c:	460c      	mov	r4, r1
 800d63e:	6849      	ldr	r1, [r1, #4]
 800d640:	6923      	ldr	r3, [r4, #16]
 800d642:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d646:	68a3      	ldr	r3, [r4, #8]
 800d648:	4607      	mov	r7, r0
 800d64a:	4691      	mov	r9, r2
 800d64c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d650:	f108 0601 	add.w	r6, r8, #1
 800d654:	42b3      	cmp	r3, r6
 800d656:	db0b      	blt.n	800d670 <__lshift+0x38>
 800d658:	4638      	mov	r0, r7
 800d65a:	f7ff fde7 	bl	800d22c <_Balloc>
 800d65e:	4605      	mov	r5, r0
 800d660:	b948      	cbnz	r0, 800d676 <__lshift+0x3e>
 800d662:	4602      	mov	r2, r0
 800d664:	4b28      	ldr	r3, [pc, #160]	@ (800d708 <__lshift+0xd0>)
 800d666:	4829      	ldr	r0, [pc, #164]	@ (800d70c <__lshift+0xd4>)
 800d668:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d66c:	f000 fb86 	bl	800dd7c <__assert_func>
 800d670:	3101      	adds	r1, #1
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	e7ee      	b.n	800d654 <__lshift+0x1c>
 800d676:	2300      	movs	r3, #0
 800d678:	f100 0114 	add.w	r1, r0, #20
 800d67c:	f100 0210 	add.w	r2, r0, #16
 800d680:	4618      	mov	r0, r3
 800d682:	4553      	cmp	r3, sl
 800d684:	db33      	blt.n	800d6ee <__lshift+0xb6>
 800d686:	6920      	ldr	r0, [r4, #16]
 800d688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d68c:	f104 0314 	add.w	r3, r4, #20
 800d690:	f019 091f 	ands.w	r9, r9, #31
 800d694:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d698:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d69c:	d02b      	beq.n	800d6f6 <__lshift+0xbe>
 800d69e:	f1c9 0e20 	rsb	lr, r9, #32
 800d6a2:	468a      	mov	sl, r1
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	6818      	ldr	r0, [r3, #0]
 800d6a8:	fa00 f009 	lsl.w	r0, r0, r9
 800d6ac:	4310      	orrs	r0, r2
 800d6ae:	f84a 0b04 	str.w	r0, [sl], #4
 800d6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6b6:	459c      	cmp	ip, r3
 800d6b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6bc:	d8f3      	bhi.n	800d6a6 <__lshift+0x6e>
 800d6be:	ebac 0304 	sub.w	r3, ip, r4
 800d6c2:	3b15      	subs	r3, #21
 800d6c4:	f023 0303 	bic.w	r3, r3, #3
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	f104 0015 	add.w	r0, r4, #21
 800d6ce:	4560      	cmp	r0, ip
 800d6d0:	bf88      	it	hi
 800d6d2:	2304      	movhi	r3, #4
 800d6d4:	50ca      	str	r2, [r1, r3]
 800d6d6:	b10a      	cbz	r2, 800d6dc <__lshift+0xa4>
 800d6d8:	f108 0602 	add.w	r6, r8, #2
 800d6dc:	3e01      	subs	r6, #1
 800d6de:	4638      	mov	r0, r7
 800d6e0:	612e      	str	r6, [r5, #16]
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	f7ff fde2 	bl	800d2ac <_Bfree>
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	e7c5      	b.n	800d682 <__lshift+0x4a>
 800d6f6:	3904      	subs	r1, #4
 800d6f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d700:	459c      	cmp	ip, r3
 800d702:	d8f9      	bhi.n	800d6f8 <__lshift+0xc0>
 800d704:	e7ea      	b.n	800d6dc <__lshift+0xa4>
 800d706:	bf00      	nop
 800d708:	0800e7f8 	.word	0x0800e7f8
 800d70c:	0800e81a 	.word	0x0800e81a

0800d710 <__mcmp>:
 800d710:	690a      	ldr	r2, [r1, #16]
 800d712:	4603      	mov	r3, r0
 800d714:	6900      	ldr	r0, [r0, #16]
 800d716:	1a80      	subs	r0, r0, r2
 800d718:	b530      	push	{r4, r5, lr}
 800d71a:	d10e      	bne.n	800d73a <__mcmp+0x2a>
 800d71c:	3314      	adds	r3, #20
 800d71e:	3114      	adds	r1, #20
 800d720:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d724:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d728:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d72c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d730:	4295      	cmp	r5, r2
 800d732:	d003      	beq.n	800d73c <__mcmp+0x2c>
 800d734:	d205      	bcs.n	800d742 <__mcmp+0x32>
 800d736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d73a:	bd30      	pop	{r4, r5, pc}
 800d73c:	42a3      	cmp	r3, r4
 800d73e:	d3f3      	bcc.n	800d728 <__mcmp+0x18>
 800d740:	e7fb      	b.n	800d73a <__mcmp+0x2a>
 800d742:	2001      	movs	r0, #1
 800d744:	e7f9      	b.n	800d73a <__mcmp+0x2a>
	...

0800d748 <__mdiff>:
 800d748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74c:	4689      	mov	r9, r1
 800d74e:	4606      	mov	r6, r0
 800d750:	4611      	mov	r1, r2
 800d752:	4648      	mov	r0, r9
 800d754:	4614      	mov	r4, r2
 800d756:	f7ff ffdb 	bl	800d710 <__mcmp>
 800d75a:	1e05      	subs	r5, r0, #0
 800d75c:	d112      	bne.n	800d784 <__mdiff+0x3c>
 800d75e:	4629      	mov	r1, r5
 800d760:	4630      	mov	r0, r6
 800d762:	f7ff fd63 	bl	800d22c <_Balloc>
 800d766:	4602      	mov	r2, r0
 800d768:	b928      	cbnz	r0, 800d776 <__mdiff+0x2e>
 800d76a:	4b3f      	ldr	r3, [pc, #252]	@ (800d868 <__mdiff+0x120>)
 800d76c:	f240 2137 	movw	r1, #567	@ 0x237
 800d770:	483e      	ldr	r0, [pc, #248]	@ (800d86c <__mdiff+0x124>)
 800d772:	f000 fb03 	bl	800dd7c <__assert_func>
 800d776:	2301      	movs	r3, #1
 800d778:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d77c:	4610      	mov	r0, r2
 800d77e:	b003      	add	sp, #12
 800d780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d784:	bfbc      	itt	lt
 800d786:	464b      	movlt	r3, r9
 800d788:	46a1      	movlt	r9, r4
 800d78a:	4630      	mov	r0, r6
 800d78c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d790:	bfba      	itte	lt
 800d792:	461c      	movlt	r4, r3
 800d794:	2501      	movlt	r5, #1
 800d796:	2500      	movge	r5, #0
 800d798:	f7ff fd48 	bl	800d22c <_Balloc>
 800d79c:	4602      	mov	r2, r0
 800d79e:	b918      	cbnz	r0, 800d7a8 <__mdiff+0x60>
 800d7a0:	4b31      	ldr	r3, [pc, #196]	@ (800d868 <__mdiff+0x120>)
 800d7a2:	f240 2145 	movw	r1, #581	@ 0x245
 800d7a6:	e7e3      	b.n	800d770 <__mdiff+0x28>
 800d7a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d7ac:	6926      	ldr	r6, [r4, #16]
 800d7ae:	60c5      	str	r5, [r0, #12]
 800d7b0:	f109 0310 	add.w	r3, r9, #16
 800d7b4:	f109 0514 	add.w	r5, r9, #20
 800d7b8:	f104 0e14 	add.w	lr, r4, #20
 800d7bc:	f100 0b14 	add.w	fp, r0, #20
 800d7c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d7c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	46d9      	mov	r9, fp
 800d7cc:	f04f 0c00 	mov.w	ip, #0
 800d7d0:	9b01      	ldr	r3, [sp, #4]
 800d7d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d7d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d7da:	9301      	str	r3, [sp, #4]
 800d7dc:	fa1f f38a 	uxth.w	r3, sl
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	b283      	uxth	r3, r0
 800d7e4:	1acb      	subs	r3, r1, r3
 800d7e6:	0c00      	lsrs	r0, r0, #16
 800d7e8:	4463      	add	r3, ip
 800d7ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d7ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d7f8:	4576      	cmp	r6, lr
 800d7fa:	f849 3b04 	str.w	r3, [r9], #4
 800d7fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d802:	d8e5      	bhi.n	800d7d0 <__mdiff+0x88>
 800d804:	1b33      	subs	r3, r6, r4
 800d806:	3b15      	subs	r3, #21
 800d808:	f023 0303 	bic.w	r3, r3, #3
 800d80c:	3415      	adds	r4, #21
 800d80e:	3304      	adds	r3, #4
 800d810:	42a6      	cmp	r6, r4
 800d812:	bf38      	it	cc
 800d814:	2304      	movcc	r3, #4
 800d816:	441d      	add	r5, r3
 800d818:	445b      	add	r3, fp
 800d81a:	461e      	mov	r6, r3
 800d81c:	462c      	mov	r4, r5
 800d81e:	4544      	cmp	r4, r8
 800d820:	d30e      	bcc.n	800d840 <__mdiff+0xf8>
 800d822:	f108 0103 	add.w	r1, r8, #3
 800d826:	1b49      	subs	r1, r1, r5
 800d828:	f021 0103 	bic.w	r1, r1, #3
 800d82c:	3d03      	subs	r5, #3
 800d82e:	45a8      	cmp	r8, r5
 800d830:	bf38      	it	cc
 800d832:	2100      	movcc	r1, #0
 800d834:	440b      	add	r3, r1
 800d836:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d83a:	b191      	cbz	r1, 800d862 <__mdiff+0x11a>
 800d83c:	6117      	str	r7, [r2, #16]
 800d83e:	e79d      	b.n	800d77c <__mdiff+0x34>
 800d840:	f854 1b04 	ldr.w	r1, [r4], #4
 800d844:	46e6      	mov	lr, ip
 800d846:	0c08      	lsrs	r0, r1, #16
 800d848:	fa1c fc81 	uxtah	ip, ip, r1
 800d84c:	4471      	add	r1, lr
 800d84e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d852:	b289      	uxth	r1, r1
 800d854:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d858:	f846 1b04 	str.w	r1, [r6], #4
 800d85c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d860:	e7dd      	b.n	800d81e <__mdiff+0xd6>
 800d862:	3f01      	subs	r7, #1
 800d864:	e7e7      	b.n	800d836 <__mdiff+0xee>
 800d866:	bf00      	nop
 800d868:	0800e7f8 	.word	0x0800e7f8
 800d86c:	0800e81a 	.word	0x0800e81a

0800d870 <__d2b>:
 800d870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d874:	460f      	mov	r7, r1
 800d876:	2101      	movs	r1, #1
 800d878:	ec59 8b10 	vmov	r8, r9, d0
 800d87c:	4616      	mov	r6, r2
 800d87e:	f7ff fcd5 	bl	800d22c <_Balloc>
 800d882:	4604      	mov	r4, r0
 800d884:	b930      	cbnz	r0, 800d894 <__d2b+0x24>
 800d886:	4602      	mov	r2, r0
 800d888:	4b23      	ldr	r3, [pc, #140]	@ (800d918 <__d2b+0xa8>)
 800d88a:	4824      	ldr	r0, [pc, #144]	@ (800d91c <__d2b+0xac>)
 800d88c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d890:	f000 fa74 	bl	800dd7c <__assert_func>
 800d894:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d89c:	b10d      	cbz	r5, 800d8a2 <__d2b+0x32>
 800d89e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8a2:	9301      	str	r3, [sp, #4]
 800d8a4:	f1b8 0300 	subs.w	r3, r8, #0
 800d8a8:	d023      	beq.n	800d8f2 <__d2b+0x82>
 800d8aa:	4668      	mov	r0, sp
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	f7ff fd84 	bl	800d3ba <__lo0bits>
 800d8b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8b6:	b1d0      	cbz	r0, 800d8ee <__d2b+0x7e>
 800d8b8:	f1c0 0320 	rsb	r3, r0, #32
 800d8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c0:	430b      	orrs	r3, r1
 800d8c2:	40c2      	lsrs	r2, r0
 800d8c4:	6163      	str	r3, [r4, #20]
 800d8c6:	9201      	str	r2, [sp, #4]
 800d8c8:	9b01      	ldr	r3, [sp, #4]
 800d8ca:	61a3      	str	r3, [r4, #24]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	bf0c      	ite	eq
 800d8d0:	2201      	moveq	r2, #1
 800d8d2:	2202      	movne	r2, #2
 800d8d4:	6122      	str	r2, [r4, #16]
 800d8d6:	b1a5      	cbz	r5, 800d902 <__d2b+0x92>
 800d8d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d8dc:	4405      	add	r5, r0
 800d8de:	603d      	str	r5, [r7, #0]
 800d8e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d8e4:	6030      	str	r0, [r6, #0]
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	b003      	add	sp, #12
 800d8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8ee:	6161      	str	r1, [r4, #20]
 800d8f0:	e7ea      	b.n	800d8c8 <__d2b+0x58>
 800d8f2:	a801      	add	r0, sp, #4
 800d8f4:	f7ff fd61 	bl	800d3ba <__lo0bits>
 800d8f8:	9b01      	ldr	r3, [sp, #4]
 800d8fa:	6163      	str	r3, [r4, #20]
 800d8fc:	3020      	adds	r0, #32
 800d8fe:	2201      	movs	r2, #1
 800d900:	e7e8      	b.n	800d8d4 <__d2b+0x64>
 800d902:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d906:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d90a:	6038      	str	r0, [r7, #0]
 800d90c:	6918      	ldr	r0, [r3, #16]
 800d90e:	f7ff fd35 	bl	800d37c <__hi0bits>
 800d912:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d916:	e7e5      	b.n	800d8e4 <__d2b+0x74>
 800d918:	0800e7f8 	.word	0x0800e7f8
 800d91c:	0800e81a 	.word	0x0800e81a

0800d920 <__sread>:
 800d920:	b510      	push	{r4, lr}
 800d922:	460c      	mov	r4, r1
 800d924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d928:	f000 f9d2 	bl	800dcd0 <_read_r>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	bfab      	itete	ge
 800d930:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d932:	89a3      	ldrhlt	r3, [r4, #12]
 800d934:	181b      	addge	r3, r3, r0
 800d936:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d93a:	bfac      	ite	ge
 800d93c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d93e:	81a3      	strhlt	r3, [r4, #12]
 800d940:	bd10      	pop	{r4, pc}

0800d942 <__swrite>:
 800d942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d946:	461f      	mov	r7, r3
 800d948:	898b      	ldrh	r3, [r1, #12]
 800d94a:	05db      	lsls	r3, r3, #23
 800d94c:	4605      	mov	r5, r0
 800d94e:	460c      	mov	r4, r1
 800d950:	4616      	mov	r6, r2
 800d952:	d505      	bpl.n	800d960 <__swrite+0x1e>
 800d954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d958:	2302      	movs	r3, #2
 800d95a:	2200      	movs	r2, #0
 800d95c:	f000 f9a6 	bl	800dcac <_lseek_r>
 800d960:	89a3      	ldrh	r3, [r4, #12]
 800d962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d966:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d96a:	81a3      	strh	r3, [r4, #12]
 800d96c:	4632      	mov	r2, r6
 800d96e:	463b      	mov	r3, r7
 800d970:	4628      	mov	r0, r5
 800d972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d976:	f000 b9cd 	b.w	800dd14 <_write_r>

0800d97a <__sseek>:
 800d97a:	b510      	push	{r4, lr}
 800d97c:	460c      	mov	r4, r1
 800d97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d982:	f000 f993 	bl	800dcac <_lseek_r>
 800d986:	1c43      	adds	r3, r0, #1
 800d988:	89a3      	ldrh	r3, [r4, #12]
 800d98a:	bf15      	itete	ne
 800d98c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d98e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d992:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d996:	81a3      	strheq	r3, [r4, #12]
 800d998:	bf18      	it	ne
 800d99a:	81a3      	strhne	r3, [r4, #12]
 800d99c:	bd10      	pop	{r4, pc}

0800d99e <__sclose>:
 800d99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a2:	f000 b9c9 	b.w	800dd38 <_close_r>

0800d9a6 <_realloc_r>:
 800d9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9aa:	4607      	mov	r7, r0
 800d9ac:	4614      	mov	r4, r2
 800d9ae:	460d      	mov	r5, r1
 800d9b0:	b921      	cbnz	r1, 800d9bc <_realloc_r+0x16>
 800d9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	f7ff bb00 	b.w	800cfbc <_malloc_r>
 800d9bc:	b92a      	cbnz	r2, 800d9ca <_realloc_r+0x24>
 800d9be:	f000 fa0f 	bl	800dde0 <_free_r>
 800d9c2:	4625      	mov	r5, r4
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ca:	f000 fa65 	bl	800de98 <_malloc_usable_size_r>
 800d9ce:	4284      	cmp	r4, r0
 800d9d0:	4606      	mov	r6, r0
 800d9d2:	d802      	bhi.n	800d9da <_realloc_r+0x34>
 800d9d4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9d8:	d8f4      	bhi.n	800d9c4 <_realloc_r+0x1e>
 800d9da:	4621      	mov	r1, r4
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7ff faed 	bl	800cfbc <_malloc_r>
 800d9e2:	4680      	mov	r8, r0
 800d9e4:	b908      	cbnz	r0, 800d9ea <_realloc_r+0x44>
 800d9e6:	4645      	mov	r5, r8
 800d9e8:	e7ec      	b.n	800d9c4 <_realloc_r+0x1e>
 800d9ea:	42b4      	cmp	r4, r6
 800d9ec:	4622      	mov	r2, r4
 800d9ee:	4629      	mov	r1, r5
 800d9f0:	bf28      	it	cs
 800d9f2:	4632      	movcs	r2, r6
 800d9f4:	f7fe fa28 	bl	800be48 <memcpy>
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	f000 f9f0 	bl	800dde0 <_free_r>
 800da00:	e7f1      	b.n	800d9e6 <_realloc_r+0x40>

0800da02 <__swbuf_r>:
 800da02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da04:	460e      	mov	r6, r1
 800da06:	4614      	mov	r4, r2
 800da08:	4605      	mov	r5, r0
 800da0a:	b118      	cbz	r0, 800da14 <__swbuf_r+0x12>
 800da0c:	6a03      	ldr	r3, [r0, #32]
 800da0e:	b90b      	cbnz	r3, 800da14 <__swbuf_r+0x12>
 800da10:	f7fe f932 	bl	800bc78 <__sinit>
 800da14:	69a3      	ldr	r3, [r4, #24]
 800da16:	60a3      	str	r3, [r4, #8]
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	071a      	lsls	r2, r3, #28
 800da1c:	d501      	bpl.n	800da22 <__swbuf_r+0x20>
 800da1e:	6923      	ldr	r3, [r4, #16]
 800da20:	b943      	cbnz	r3, 800da34 <__swbuf_r+0x32>
 800da22:	4621      	mov	r1, r4
 800da24:	4628      	mov	r0, r5
 800da26:	f000 f82b 	bl	800da80 <__swsetup_r>
 800da2a:	b118      	cbz	r0, 800da34 <__swbuf_r+0x32>
 800da2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800da30:	4638      	mov	r0, r7
 800da32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da34:	6823      	ldr	r3, [r4, #0]
 800da36:	6922      	ldr	r2, [r4, #16]
 800da38:	1a98      	subs	r0, r3, r2
 800da3a:	6963      	ldr	r3, [r4, #20]
 800da3c:	b2f6      	uxtb	r6, r6
 800da3e:	4283      	cmp	r3, r0
 800da40:	4637      	mov	r7, r6
 800da42:	dc05      	bgt.n	800da50 <__swbuf_r+0x4e>
 800da44:	4621      	mov	r1, r4
 800da46:	4628      	mov	r0, r5
 800da48:	f7ff fbbc 	bl	800d1c4 <_fflush_r>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d1ed      	bne.n	800da2c <__swbuf_r+0x2a>
 800da50:	68a3      	ldr	r3, [r4, #8]
 800da52:	3b01      	subs	r3, #1
 800da54:	60a3      	str	r3, [r4, #8]
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	1c5a      	adds	r2, r3, #1
 800da5a:	6022      	str	r2, [r4, #0]
 800da5c:	701e      	strb	r6, [r3, #0]
 800da5e:	6962      	ldr	r2, [r4, #20]
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	429a      	cmp	r2, r3
 800da64:	d004      	beq.n	800da70 <__swbuf_r+0x6e>
 800da66:	89a3      	ldrh	r3, [r4, #12]
 800da68:	07db      	lsls	r3, r3, #31
 800da6a:	d5e1      	bpl.n	800da30 <__swbuf_r+0x2e>
 800da6c:	2e0a      	cmp	r6, #10
 800da6e:	d1df      	bne.n	800da30 <__swbuf_r+0x2e>
 800da70:	4621      	mov	r1, r4
 800da72:	4628      	mov	r0, r5
 800da74:	f7ff fba6 	bl	800d1c4 <_fflush_r>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d0d9      	beq.n	800da30 <__swbuf_r+0x2e>
 800da7c:	e7d6      	b.n	800da2c <__swbuf_r+0x2a>
	...

0800da80 <__swsetup_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4b29      	ldr	r3, [pc, #164]	@ (800db28 <__swsetup_r+0xa8>)
 800da84:	4605      	mov	r5, r0
 800da86:	6818      	ldr	r0, [r3, #0]
 800da88:	460c      	mov	r4, r1
 800da8a:	b118      	cbz	r0, 800da94 <__swsetup_r+0x14>
 800da8c:	6a03      	ldr	r3, [r0, #32]
 800da8e:	b90b      	cbnz	r3, 800da94 <__swsetup_r+0x14>
 800da90:	f7fe f8f2 	bl	800bc78 <__sinit>
 800da94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da98:	0719      	lsls	r1, r3, #28
 800da9a:	d422      	bmi.n	800dae2 <__swsetup_r+0x62>
 800da9c:	06da      	lsls	r2, r3, #27
 800da9e:	d407      	bmi.n	800dab0 <__swsetup_r+0x30>
 800daa0:	2209      	movs	r2, #9
 800daa2:	602a      	str	r2, [r5, #0]
 800daa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daa8:	81a3      	strh	r3, [r4, #12]
 800daaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800daae:	e033      	b.n	800db18 <__swsetup_r+0x98>
 800dab0:	0758      	lsls	r0, r3, #29
 800dab2:	d512      	bpl.n	800dada <__swsetup_r+0x5a>
 800dab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dab6:	b141      	cbz	r1, 800daca <__swsetup_r+0x4a>
 800dab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dabc:	4299      	cmp	r1, r3
 800dabe:	d002      	beq.n	800dac6 <__swsetup_r+0x46>
 800dac0:	4628      	mov	r0, r5
 800dac2:	f000 f98d 	bl	800dde0 <_free_r>
 800dac6:	2300      	movs	r3, #0
 800dac8:	6363      	str	r3, [r4, #52]	@ 0x34
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dad0:	81a3      	strh	r3, [r4, #12]
 800dad2:	2300      	movs	r3, #0
 800dad4:	6063      	str	r3, [r4, #4]
 800dad6:	6923      	ldr	r3, [r4, #16]
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	89a3      	ldrh	r3, [r4, #12]
 800dadc:	f043 0308 	orr.w	r3, r3, #8
 800dae0:	81a3      	strh	r3, [r4, #12]
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	b94b      	cbnz	r3, 800dafa <__swsetup_r+0x7a>
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800daec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800daf0:	d003      	beq.n	800dafa <__swsetup_r+0x7a>
 800daf2:	4621      	mov	r1, r4
 800daf4:	4628      	mov	r0, r5
 800daf6:	f000 f83f 	bl	800db78 <__smakebuf_r>
 800dafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dafe:	f013 0201 	ands.w	r2, r3, #1
 800db02:	d00a      	beq.n	800db1a <__swsetup_r+0x9a>
 800db04:	2200      	movs	r2, #0
 800db06:	60a2      	str	r2, [r4, #8]
 800db08:	6962      	ldr	r2, [r4, #20]
 800db0a:	4252      	negs	r2, r2
 800db0c:	61a2      	str	r2, [r4, #24]
 800db0e:	6922      	ldr	r2, [r4, #16]
 800db10:	b942      	cbnz	r2, 800db24 <__swsetup_r+0xa4>
 800db12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db16:	d1c5      	bne.n	800daa4 <__swsetup_r+0x24>
 800db18:	bd38      	pop	{r3, r4, r5, pc}
 800db1a:	0799      	lsls	r1, r3, #30
 800db1c:	bf58      	it	pl
 800db1e:	6962      	ldrpl	r2, [r4, #20]
 800db20:	60a2      	str	r2, [r4, #8]
 800db22:	e7f4      	b.n	800db0e <__swsetup_r+0x8e>
 800db24:	2000      	movs	r0, #0
 800db26:	e7f7      	b.n	800db18 <__swsetup_r+0x98>
 800db28:	24000028 	.word	0x24000028

0800db2c <__swhatbuf_r>:
 800db2c:	b570      	push	{r4, r5, r6, lr}
 800db2e:	460c      	mov	r4, r1
 800db30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db34:	2900      	cmp	r1, #0
 800db36:	b096      	sub	sp, #88	@ 0x58
 800db38:	4615      	mov	r5, r2
 800db3a:	461e      	mov	r6, r3
 800db3c:	da0d      	bge.n	800db5a <__swhatbuf_r+0x2e>
 800db3e:	89a3      	ldrh	r3, [r4, #12]
 800db40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db44:	f04f 0100 	mov.w	r1, #0
 800db48:	bf14      	ite	ne
 800db4a:	2340      	movne	r3, #64	@ 0x40
 800db4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db50:	2000      	movs	r0, #0
 800db52:	6031      	str	r1, [r6, #0]
 800db54:	602b      	str	r3, [r5, #0]
 800db56:	b016      	add	sp, #88	@ 0x58
 800db58:	bd70      	pop	{r4, r5, r6, pc}
 800db5a:	466a      	mov	r2, sp
 800db5c:	f000 f8fc 	bl	800dd58 <_fstat_r>
 800db60:	2800      	cmp	r0, #0
 800db62:	dbec      	blt.n	800db3e <__swhatbuf_r+0x12>
 800db64:	9901      	ldr	r1, [sp, #4]
 800db66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db6e:	4259      	negs	r1, r3
 800db70:	4159      	adcs	r1, r3
 800db72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db76:	e7eb      	b.n	800db50 <__swhatbuf_r+0x24>

0800db78 <__smakebuf_r>:
 800db78:	898b      	ldrh	r3, [r1, #12]
 800db7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db7c:	079d      	lsls	r5, r3, #30
 800db7e:	4606      	mov	r6, r0
 800db80:	460c      	mov	r4, r1
 800db82:	d507      	bpl.n	800db94 <__smakebuf_r+0x1c>
 800db84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	6123      	str	r3, [r4, #16]
 800db8c:	2301      	movs	r3, #1
 800db8e:	6163      	str	r3, [r4, #20]
 800db90:	b003      	add	sp, #12
 800db92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db94:	ab01      	add	r3, sp, #4
 800db96:	466a      	mov	r2, sp
 800db98:	f7ff ffc8 	bl	800db2c <__swhatbuf_r>
 800db9c:	9f00      	ldr	r7, [sp, #0]
 800db9e:	4605      	mov	r5, r0
 800dba0:	4639      	mov	r1, r7
 800dba2:	4630      	mov	r0, r6
 800dba4:	f7ff fa0a 	bl	800cfbc <_malloc_r>
 800dba8:	b948      	cbnz	r0, 800dbbe <__smakebuf_r+0x46>
 800dbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbae:	059a      	lsls	r2, r3, #22
 800dbb0:	d4ee      	bmi.n	800db90 <__smakebuf_r+0x18>
 800dbb2:	f023 0303 	bic.w	r3, r3, #3
 800dbb6:	f043 0302 	orr.w	r3, r3, #2
 800dbba:	81a3      	strh	r3, [r4, #12]
 800dbbc:	e7e2      	b.n	800db84 <__smakebuf_r+0xc>
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	6020      	str	r0, [r4, #0]
 800dbc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbc6:	81a3      	strh	r3, [r4, #12]
 800dbc8:	9b01      	ldr	r3, [sp, #4]
 800dbca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dbce:	b15b      	cbz	r3, 800dbe8 <__smakebuf_r+0x70>
 800dbd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f000 f859 	bl	800dc8c <_isatty_r>
 800dbda:	b128      	cbz	r0, 800dbe8 <__smakebuf_r+0x70>
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	f023 0303 	bic.w	r3, r3, #3
 800dbe2:	f043 0301 	orr.w	r3, r3, #1
 800dbe6:	81a3      	strh	r3, [r4, #12]
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
 800dbea:	431d      	orrs	r5, r3
 800dbec:	81a5      	strh	r5, [r4, #12]
 800dbee:	e7cf      	b.n	800db90 <__smakebuf_r+0x18>

0800dbf0 <_putc_r>:
 800dbf0:	b570      	push	{r4, r5, r6, lr}
 800dbf2:	460d      	mov	r5, r1
 800dbf4:	4614      	mov	r4, r2
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	b118      	cbz	r0, 800dc02 <_putc_r+0x12>
 800dbfa:	6a03      	ldr	r3, [r0, #32]
 800dbfc:	b90b      	cbnz	r3, 800dc02 <_putc_r+0x12>
 800dbfe:	f7fe f83b 	bl	800bc78 <__sinit>
 800dc02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc04:	07d8      	lsls	r0, r3, #31
 800dc06:	d405      	bmi.n	800dc14 <_putc_r+0x24>
 800dc08:	89a3      	ldrh	r3, [r4, #12]
 800dc0a:	0599      	lsls	r1, r3, #22
 800dc0c:	d402      	bmi.n	800dc14 <_putc_r+0x24>
 800dc0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc10:	f7fe f913 	bl	800be3a <__retarget_lock_acquire_recursive>
 800dc14:	68a3      	ldr	r3, [r4, #8]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	60a3      	str	r3, [r4, #8]
 800dc1c:	da05      	bge.n	800dc2a <_putc_r+0x3a>
 800dc1e:	69a2      	ldr	r2, [r4, #24]
 800dc20:	4293      	cmp	r3, r2
 800dc22:	db12      	blt.n	800dc4a <_putc_r+0x5a>
 800dc24:	b2eb      	uxtb	r3, r5
 800dc26:	2b0a      	cmp	r3, #10
 800dc28:	d00f      	beq.n	800dc4a <_putc_r+0x5a>
 800dc2a:	6823      	ldr	r3, [r4, #0]
 800dc2c:	1c5a      	adds	r2, r3, #1
 800dc2e:	6022      	str	r2, [r4, #0]
 800dc30:	701d      	strb	r5, [r3, #0]
 800dc32:	b2ed      	uxtb	r5, r5
 800dc34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc36:	07da      	lsls	r2, r3, #31
 800dc38:	d405      	bmi.n	800dc46 <_putc_r+0x56>
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	059b      	lsls	r3, r3, #22
 800dc3e:	d402      	bmi.n	800dc46 <_putc_r+0x56>
 800dc40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc42:	f7fe f8fb 	bl	800be3c <__retarget_lock_release_recursive>
 800dc46:	4628      	mov	r0, r5
 800dc48:	bd70      	pop	{r4, r5, r6, pc}
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f7ff fed7 	bl	800da02 <__swbuf_r>
 800dc54:	4605      	mov	r5, r0
 800dc56:	e7ed      	b.n	800dc34 <_putc_r+0x44>

0800dc58 <memmove>:
 800dc58:	4288      	cmp	r0, r1
 800dc5a:	b510      	push	{r4, lr}
 800dc5c:	eb01 0402 	add.w	r4, r1, r2
 800dc60:	d902      	bls.n	800dc68 <memmove+0x10>
 800dc62:	4284      	cmp	r4, r0
 800dc64:	4623      	mov	r3, r4
 800dc66:	d807      	bhi.n	800dc78 <memmove+0x20>
 800dc68:	1e43      	subs	r3, r0, #1
 800dc6a:	42a1      	cmp	r1, r4
 800dc6c:	d008      	beq.n	800dc80 <memmove+0x28>
 800dc6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc76:	e7f8      	b.n	800dc6a <memmove+0x12>
 800dc78:	4402      	add	r2, r0
 800dc7a:	4601      	mov	r1, r0
 800dc7c:	428a      	cmp	r2, r1
 800dc7e:	d100      	bne.n	800dc82 <memmove+0x2a>
 800dc80:	bd10      	pop	{r4, pc}
 800dc82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc8a:	e7f7      	b.n	800dc7c <memmove+0x24>

0800dc8c <_isatty_r>:
 800dc8c:	b538      	push	{r3, r4, r5, lr}
 800dc8e:	4d06      	ldr	r5, [pc, #24]	@ (800dca8 <_isatty_r+0x1c>)
 800dc90:	2300      	movs	r3, #0
 800dc92:	4604      	mov	r4, r0
 800dc94:	4608      	mov	r0, r1
 800dc96:	602b      	str	r3, [r5, #0]
 800dc98:	f7f4 fcd2 	bl	8002640 <_isatty>
 800dc9c:	1c43      	adds	r3, r0, #1
 800dc9e:	d102      	bne.n	800dca6 <_isatty_r+0x1a>
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	b103      	cbz	r3, 800dca6 <_isatty_r+0x1a>
 800dca4:	6023      	str	r3, [r4, #0]
 800dca6:	bd38      	pop	{r3, r4, r5, pc}
 800dca8:	24000acc 	.word	0x24000acc

0800dcac <_lseek_r>:
 800dcac:	b538      	push	{r3, r4, r5, lr}
 800dcae:	4d07      	ldr	r5, [pc, #28]	@ (800dccc <_lseek_r+0x20>)
 800dcb0:	4604      	mov	r4, r0
 800dcb2:	4608      	mov	r0, r1
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	602a      	str	r2, [r5, #0]
 800dcba:	461a      	mov	r2, r3
 800dcbc:	f7f4 fccb 	bl	8002656 <_lseek>
 800dcc0:	1c43      	adds	r3, r0, #1
 800dcc2:	d102      	bne.n	800dcca <_lseek_r+0x1e>
 800dcc4:	682b      	ldr	r3, [r5, #0]
 800dcc6:	b103      	cbz	r3, 800dcca <_lseek_r+0x1e>
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	24000acc 	.word	0x24000acc

0800dcd0 <_read_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	4d07      	ldr	r5, [pc, #28]	@ (800dcf0 <_read_r+0x20>)
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	4608      	mov	r0, r1
 800dcd8:	4611      	mov	r1, r2
 800dcda:	2200      	movs	r2, #0
 800dcdc:	602a      	str	r2, [r5, #0]
 800dcde:	461a      	mov	r2, r3
 800dce0:	f7f4 fc59 	bl	8002596 <_read>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	d102      	bne.n	800dcee <_read_r+0x1e>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	b103      	cbz	r3, 800dcee <_read_r+0x1e>
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	24000acc 	.word	0x24000acc

0800dcf4 <_sbrk_r>:
 800dcf4:	b538      	push	{r3, r4, r5, lr}
 800dcf6:	4d06      	ldr	r5, [pc, #24]	@ (800dd10 <_sbrk_r+0x1c>)
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	4608      	mov	r0, r1
 800dcfe:	602b      	str	r3, [r5, #0]
 800dd00:	f7f4 fcb6 	bl	8002670 <_sbrk>
 800dd04:	1c43      	adds	r3, r0, #1
 800dd06:	d102      	bne.n	800dd0e <_sbrk_r+0x1a>
 800dd08:	682b      	ldr	r3, [r5, #0]
 800dd0a:	b103      	cbz	r3, 800dd0e <_sbrk_r+0x1a>
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	bd38      	pop	{r3, r4, r5, pc}
 800dd10:	24000acc 	.word	0x24000acc

0800dd14 <_write_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4d07      	ldr	r5, [pc, #28]	@ (800dd34 <_write_r+0x20>)
 800dd18:	4604      	mov	r4, r0
 800dd1a:	4608      	mov	r0, r1
 800dd1c:	4611      	mov	r1, r2
 800dd1e:	2200      	movs	r2, #0
 800dd20:	602a      	str	r2, [r5, #0]
 800dd22:	461a      	mov	r2, r3
 800dd24:	f7f4 fc54 	bl	80025d0 <_write>
 800dd28:	1c43      	adds	r3, r0, #1
 800dd2a:	d102      	bne.n	800dd32 <_write_r+0x1e>
 800dd2c:	682b      	ldr	r3, [r5, #0]
 800dd2e:	b103      	cbz	r3, 800dd32 <_write_r+0x1e>
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	bd38      	pop	{r3, r4, r5, pc}
 800dd34:	24000acc 	.word	0x24000acc

0800dd38 <_close_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d06      	ldr	r5, [pc, #24]	@ (800dd54 <_close_r+0x1c>)
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4608      	mov	r0, r1
 800dd42:	602b      	str	r3, [r5, #0]
 800dd44:	f7f4 fc60 	bl	8002608 <_close>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d102      	bne.n	800dd52 <_close_r+0x1a>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	b103      	cbz	r3, 800dd52 <_close_r+0x1a>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	24000acc 	.word	0x24000acc

0800dd58 <_fstat_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4d07      	ldr	r5, [pc, #28]	@ (800dd78 <_fstat_r+0x20>)
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	4611      	mov	r1, r2
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	f7f4 fc5b 	bl	8002620 <_fstat>
 800dd6a:	1c43      	adds	r3, r0, #1
 800dd6c:	d102      	bne.n	800dd74 <_fstat_r+0x1c>
 800dd6e:	682b      	ldr	r3, [r5, #0]
 800dd70:	b103      	cbz	r3, 800dd74 <_fstat_r+0x1c>
 800dd72:	6023      	str	r3, [r4, #0]
 800dd74:	bd38      	pop	{r3, r4, r5, pc}
 800dd76:	bf00      	nop
 800dd78:	24000acc 	.word	0x24000acc

0800dd7c <__assert_func>:
 800dd7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd7e:	4614      	mov	r4, r2
 800dd80:	461a      	mov	r2, r3
 800dd82:	4b09      	ldr	r3, [pc, #36]	@ (800dda8 <__assert_func+0x2c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4605      	mov	r5, r0
 800dd88:	68d8      	ldr	r0, [r3, #12]
 800dd8a:	b14c      	cbz	r4, 800dda0 <__assert_func+0x24>
 800dd8c:	4b07      	ldr	r3, [pc, #28]	@ (800ddac <__assert_func+0x30>)
 800dd8e:	9100      	str	r1, [sp, #0]
 800dd90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd94:	4906      	ldr	r1, [pc, #24]	@ (800ddb0 <__assert_func+0x34>)
 800dd96:	462b      	mov	r3, r5
 800dd98:	f000 f886 	bl	800dea8 <fiprintf>
 800dd9c:	f000 f8a3 	bl	800dee6 <abort>
 800dda0:	4b04      	ldr	r3, [pc, #16]	@ (800ddb4 <__assert_func+0x38>)
 800dda2:	461c      	mov	r4, r3
 800dda4:	e7f3      	b.n	800dd8e <__assert_func+0x12>
 800dda6:	bf00      	nop
 800dda8:	24000028 	.word	0x24000028
 800ddac:	0800e87d 	.word	0x0800e87d
 800ddb0:	0800e88a 	.word	0x0800e88a
 800ddb4:	0800e8b8 	.word	0x0800e8b8

0800ddb8 <_calloc_r>:
 800ddb8:	b570      	push	{r4, r5, r6, lr}
 800ddba:	fba1 5402 	umull	r5, r4, r1, r2
 800ddbe:	b934      	cbnz	r4, 800ddce <_calloc_r+0x16>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7ff f8fb 	bl	800cfbc <_malloc_r>
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	b928      	cbnz	r0, 800ddd6 <_calloc_r+0x1e>
 800ddca:	4630      	mov	r0, r6
 800ddcc:	bd70      	pop	{r4, r5, r6, pc}
 800ddce:	220c      	movs	r2, #12
 800ddd0:	6002      	str	r2, [r0, #0]
 800ddd2:	2600      	movs	r6, #0
 800ddd4:	e7f9      	b.n	800ddca <_calloc_r+0x12>
 800ddd6:	462a      	mov	r2, r5
 800ddd8:	4621      	mov	r1, r4
 800ddda:	f7fd fffb 	bl	800bdd4 <memset>
 800ddde:	e7f4      	b.n	800ddca <_calloc_r+0x12>

0800dde0 <_free_r>:
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4605      	mov	r5, r0
 800dde4:	2900      	cmp	r1, #0
 800dde6:	d041      	beq.n	800de6c <_free_r+0x8c>
 800dde8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddec:	1f0c      	subs	r4, r1, #4
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	bfb8      	it	lt
 800ddf2:	18e4      	addlt	r4, r4, r3
 800ddf4:	f7ff fa0e 	bl	800d214 <__malloc_lock>
 800ddf8:	4a1d      	ldr	r2, [pc, #116]	@ (800de70 <_free_r+0x90>)
 800ddfa:	6813      	ldr	r3, [r2, #0]
 800ddfc:	b933      	cbnz	r3, 800de0c <_free_r+0x2c>
 800ddfe:	6063      	str	r3, [r4, #4]
 800de00:	6014      	str	r4, [r2, #0]
 800de02:	4628      	mov	r0, r5
 800de04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de08:	f7ff ba0a 	b.w	800d220 <__malloc_unlock>
 800de0c:	42a3      	cmp	r3, r4
 800de0e:	d908      	bls.n	800de22 <_free_r+0x42>
 800de10:	6820      	ldr	r0, [r4, #0]
 800de12:	1821      	adds	r1, r4, r0
 800de14:	428b      	cmp	r3, r1
 800de16:	bf01      	itttt	eq
 800de18:	6819      	ldreq	r1, [r3, #0]
 800de1a:	685b      	ldreq	r3, [r3, #4]
 800de1c:	1809      	addeq	r1, r1, r0
 800de1e:	6021      	streq	r1, [r4, #0]
 800de20:	e7ed      	b.n	800ddfe <_free_r+0x1e>
 800de22:	461a      	mov	r2, r3
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	b10b      	cbz	r3, 800de2c <_free_r+0x4c>
 800de28:	42a3      	cmp	r3, r4
 800de2a:	d9fa      	bls.n	800de22 <_free_r+0x42>
 800de2c:	6811      	ldr	r1, [r2, #0]
 800de2e:	1850      	adds	r0, r2, r1
 800de30:	42a0      	cmp	r0, r4
 800de32:	d10b      	bne.n	800de4c <_free_r+0x6c>
 800de34:	6820      	ldr	r0, [r4, #0]
 800de36:	4401      	add	r1, r0
 800de38:	1850      	adds	r0, r2, r1
 800de3a:	4283      	cmp	r3, r0
 800de3c:	6011      	str	r1, [r2, #0]
 800de3e:	d1e0      	bne.n	800de02 <_free_r+0x22>
 800de40:	6818      	ldr	r0, [r3, #0]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	6053      	str	r3, [r2, #4]
 800de46:	4408      	add	r0, r1
 800de48:	6010      	str	r0, [r2, #0]
 800de4a:	e7da      	b.n	800de02 <_free_r+0x22>
 800de4c:	d902      	bls.n	800de54 <_free_r+0x74>
 800de4e:	230c      	movs	r3, #12
 800de50:	602b      	str	r3, [r5, #0]
 800de52:	e7d6      	b.n	800de02 <_free_r+0x22>
 800de54:	6820      	ldr	r0, [r4, #0]
 800de56:	1821      	adds	r1, r4, r0
 800de58:	428b      	cmp	r3, r1
 800de5a:	bf04      	itt	eq
 800de5c:	6819      	ldreq	r1, [r3, #0]
 800de5e:	685b      	ldreq	r3, [r3, #4]
 800de60:	6063      	str	r3, [r4, #4]
 800de62:	bf04      	itt	eq
 800de64:	1809      	addeq	r1, r1, r0
 800de66:	6021      	streq	r1, [r4, #0]
 800de68:	6054      	str	r4, [r2, #4]
 800de6a:	e7ca      	b.n	800de02 <_free_r+0x22>
 800de6c:	bd38      	pop	{r3, r4, r5, pc}
 800de6e:	bf00      	nop
 800de70:	24000ac8 	.word	0x24000ac8

0800de74 <__ascii_mbtowc>:
 800de74:	b082      	sub	sp, #8
 800de76:	b901      	cbnz	r1, 800de7a <__ascii_mbtowc+0x6>
 800de78:	a901      	add	r1, sp, #4
 800de7a:	b142      	cbz	r2, 800de8e <__ascii_mbtowc+0x1a>
 800de7c:	b14b      	cbz	r3, 800de92 <__ascii_mbtowc+0x1e>
 800de7e:	7813      	ldrb	r3, [r2, #0]
 800de80:	600b      	str	r3, [r1, #0]
 800de82:	7812      	ldrb	r2, [r2, #0]
 800de84:	1e10      	subs	r0, r2, #0
 800de86:	bf18      	it	ne
 800de88:	2001      	movne	r0, #1
 800de8a:	b002      	add	sp, #8
 800de8c:	4770      	bx	lr
 800de8e:	4610      	mov	r0, r2
 800de90:	e7fb      	b.n	800de8a <__ascii_mbtowc+0x16>
 800de92:	f06f 0001 	mvn.w	r0, #1
 800de96:	e7f8      	b.n	800de8a <__ascii_mbtowc+0x16>

0800de98 <_malloc_usable_size_r>:
 800de98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de9c:	1f18      	subs	r0, r3, #4
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	bfbc      	itt	lt
 800dea2:	580b      	ldrlt	r3, [r1, r0]
 800dea4:	18c0      	addlt	r0, r0, r3
 800dea6:	4770      	bx	lr

0800dea8 <fiprintf>:
 800dea8:	b40e      	push	{r1, r2, r3}
 800deaa:	b503      	push	{r0, r1, lr}
 800deac:	4601      	mov	r1, r0
 800deae:	ab03      	add	r3, sp, #12
 800deb0:	4805      	ldr	r0, [pc, #20]	@ (800dec8 <fiprintf+0x20>)
 800deb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb6:	6800      	ldr	r0, [r0, #0]
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	f7fe ff3d 	bl	800cd38 <_vfiprintf_r>
 800debe:	b002      	add	sp, #8
 800dec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dec4:	b003      	add	sp, #12
 800dec6:	4770      	bx	lr
 800dec8:	24000028 	.word	0x24000028

0800decc <__ascii_wctomb>:
 800decc:	4603      	mov	r3, r0
 800dece:	4608      	mov	r0, r1
 800ded0:	b141      	cbz	r1, 800dee4 <__ascii_wctomb+0x18>
 800ded2:	2aff      	cmp	r2, #255	@ 0xff
 800ded4:	d904      	bls.n	800dee0 <__ascii_wctomb+0x14>
 800ded6:	228a      	movs	r2, #138	@ 0x8a
 800ded8:	601a      	str	r2, [r3, #0]
 800deda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dede:	4770      	bx	lr
 800dee0:	700a      	strb	r2, [r1, #0]
 800dee2:	2001      	movs	r0, #1
 800dee4:	4770      	bx	lr

0800dee6 <abort>:
 800dee6:	b508      	push	{r3, lr}
 800dee8:	2006      	movs	r0, #6
 800deea:	f000 f82b 	bl	800df44 <raise>
 800deee:	2001      	movs	r0, #1
 800def0:	f7f4 fb46 	bl	8002580 <_exit>

0800def4 <_raise_r>:
 800def4:	291f      	cmp	r1, #31
 800def6:	b538      	push	{r3, r4, r5, lr}
 800def8:	4605      	mov	r5, r0
 800defa:	460c      	mov	r4, r1
 800defc:	d904      	bls.n	800df08 <_raise_r+0x14>
 800defe:	2316      	movs	r3, #22
 800df00:	6003      	str	r3, [r0, #0]
 800df02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df06:	bd38      	pop	{r3, r4, r5, pc}
 800df08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df0a:	b112      	cbz	r2, 800df12 <_raise_r+0x1e>
 800df0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df10:	b94b      	cbnz	r3, 800df26 <_raise_r+0x32>
 800df12:	4628      	mov	r0, r5
 800df14:	f000 f830 	bl	800df78 <_getpid_r>
 800df18:	4622      	mov	r2, r4
 800df1a:	4601      	mov	r1, r0
 800df1c:	4628      	mov	r0, r5
 800df1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df22:	f000 b817 	b.w	800df54 <_kill_r>
 800df26:	2b01      	cmp	r3, #1
 800df28:	d00a      	beq.n	800df40 <_raise_r+0x4c>
 800df2a:	1c59      	adds	r1, r3, #1
 800df2c:	d103      	bne.n	800df36 <_raise_r+0x42>
 800df2e:	2316      	movs	r3, #22
 800df30:	6003      	str	r3, [r0, #0]
 800df32:	2001      	movs	r0, #1
 800df34:	e7e7      	b.n	800df06 <_raise_r+0x12>
 800df36:	2100      	movs	r1, #0
 800df38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df3c:	4620      	mov	r0, r4
 800df3e:	4798      	blx	r3
 800df40:	2000      	movs	r0, #0
 800df42:	e7e0      	b.n	800df06 <_raise_r+0x12>

0800df44 <raise>:
 800df44:	4b02      	ldr	r3, [pc, #8]	@ (800df50 <raise+0xc>)
 800df46:	4601      	mov	r1, r0
 800df48:	6818      	ldr	r0, [r3, #0]
 800df4a:	f7ff bfd3 	b.w	800def4 <_raise_r>
 800df4e:	bf00      	nop
 800df50:	24000028 	.word	0x24000028

0800df54 <_kill_r>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4d07      	ldr	r5, [pc, #28]	@ (800df74 <_kill_r+0x20>)
 800df58:	2300      	movs	r3, #0
 800df5a:	4604      	mov	r4, r0
 800df5c:	4608      	mov	r0, r1
 800df5e:	4611      	mov	r1, r2
 800df60:	602b      	str	r3, [r5, #0]
 800df62:	f7f4 fafd 	bl	8002560 <_kill>
 800df66:	1c43      	adds	r3, r0, #1
 800df68:	d102      	bne.n	800df70 <_kill_r+0x1c>
 800df6a:	682b      	ldr	r3, [r5, #0]
 800df6c:	b103      	cbz	r3, 800df70 <_kill_r+0x1c>
 800df6e:	6023      	str	r3, [r4, #0]
 800df70:	bd38      	pop	{r3, r4, r5, pc}
 800df72:	bf00      	nop
 800df74:	24000acc 	.word	0x24000acc

0800df78 <_getpid_r>:
 800df78:	f7f4 baea 	b.w	8002550 <_getpid>
 800df7c:	0000      	movs	r0, r0
	...

0800df80 <fmod>:
 800df80:	b508      	push	{r3, lr}
 800df82:	ed2d 8b04 	vpush	{d8-d9}
 800df86:	eeb0 9b40 	vmov.f64	d9, d0
 800df8a:	eeb0 8b41 	vmov.f64	d8, d1
 800df8e:	f000 f81b 	bl	800dfc8 <__ieee754_fmod>
 800df92:	eeb4 9b48 	vcmp.f64	d9, d8
 800df96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df9a:	d60c      	bvs.n	800dfb6 <fmod+0x36>
 800df9c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800dfc0 <fmod+0x40>
 800dfa0:	eeb4 8b49 	vcmp.f64	d8, d9
 800dfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa8:	d105      	bne.n	800dfb6 <fmod+0x36>
 800dfaa:	f7fd ff1b 	bl	800bde4 <__errno>
 800dfae:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800dfb2:	2321      	movs	r3, #33	@ 0x21
 800dfb4:	6003      	str	r3, [r0, #0]
 800dfb6:	ecbd 8b04 	vpop	{d8-d9}
 800dfba:	bd08      	pop	{r3, pc}
 800dfbc:	f3af 8000 	nop.w
	...

0800dfc8 <__ieee754_fmod>:
 800dfc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfcc:	ed8d 1b00 	vstr	d1, [sp]
 800dfd0:	e9dd 0600 	ldrd	r0, r6, [sp]
 800dfd4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800dfd8:	ea50 0305 	orrs.w	r3, r0, r5
 800dfdc:	4686      	mov	lr, r0
 800dfde:	d00d      	beq.n	800dffc <__ieee754_fmod+0x34>
 800dfe0:	ee10 ca90 	vmov	ip, s1
 800dfe4:	4b77      	ldr	r3, [pc, #476]	@ (800e1c4 <__ieee754_fmod+0x1fc>)
 800dfe6:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800dfea:	4598      	cmp	r8, r3
 800dfec:	d806      	bhi.n	800dffc <__ieee754_fmod+0x34>
 800dfee:	4243      	negs	r3, r0
 800dff0:	4a75      	ldr	r2, [pc, #468]	@ (800e1c8 <__ieee754_fmod+0x200>)
 800dff2:	4303      	orrs	r3, r0
 800dff4:	ea45 73d3 	orr.w	r3, r5, r3, lsr #31
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d908      	bls.n	800e00e <__ieee754_fmod+0x46>
 800dffc:	ed9d 7b00 	vldr	d7, [sp]
 800e000:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e004:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800e008:	b003      	add	sp, #12
 800e00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e00e:	ee10 9a10 	vmov	r9, s0
 800e012:	45a8      	cmp	r8, r5
 800e014:	464f      	mov	r7, r9
 800e016:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800e01a:	dc09      	bgt.n	800e030 <__ieee754_fmod+0x68>
 800e01c:	dbf4      	blt.n	800e008 <__ieee754_fmod+0x40>
 800e01e:	4548      	cmp	r0, r9
 800e020:	d8f2      	bhi.n	800e008 <__ieee754_fmod+0x40>
 800e022:	d105      	bne.n	800e030 <__ieee754_fmod+0x68>
 800e024:	4b69      	ldr	r3, [pc, #420]	@ (800e1cc <__ieee754_fmod+0x204>)
 800e026:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800e02a:	ed93 0b00 	vldr	d0, [r3]
 800e02e:	e7eb      	b.n	800e008 <__ieee754_fmod+0x40>
 800e030:	4965      	ldr	r1, [pc, #404]	@ (800e1c8 <__ieee754_fmod+0x200>)
 800e032:	ea1c 0f01 	tst.w	ip, r1
 800e036:	d14a      	bne.n	800e0ce <__ieee754_fmod+0x106>
 800e038:	f1b8 0f00 	cmp.w	r8, #0
 800e03c:	d13f      	bne.n	800e0be <__ieee754_fmod+0xf6>
 800e03e:	4a64      	ldr	r2, [pc, #400]	@ (800e1d0 <__ieee754_fmod+0x208>)
 800e040:	464b      	mov	r3, r9
 800e042:	2b00      	cmp	r3, #0
 800e044:	dc38      	bgt.n	800e0b8 <__ieee754_fmod+0xf0>
 800e046:	420e      	tst	r6, r1
 800e048:	d150      	bne.n	800e0ec <__ieee754_fmod+0x124>
 800e04a:	2d00      	cmp	r5, #0
 800e04c:	d147      	bne.n	800e0de <__ieee754_fmod+0x116>
 800e04e:	4b60      	ldr	r3, [pc, #384]	@ (800e1d0 <__ieee754_fmod+0x208>)
 800e050:	4601      	mov	r1, r0
 800e052:	2900      	cmp	r1, #0
 800e054:	dc40      	bgt.n	800e0d8 <__ieee754_fmod+0x110>
 800e056:	495f      	ldr	r1, [pc, #380]	@ (800e1d4 <__ieee754_fmod+0x20c>)
 800e058:	428a      	cmp	r2, r1
 800e05a:	db4b      	blt.n	800e0f4 <__ieee754_fmod+0x12c>
 800e05c:	f3cc 0113 	ubfx	r1, ip, #0, #20
 800e060:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800e064:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 800e1d4 <__ieee754_fmod+0x20c>
 800e068:	4563      	cmp	r3, ip
 800e06a:	db58      	blt.n	800e11e <__ieee754_fmod+0x156>
 800e06c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800e070:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800e074:	1ad0      	subs	r0, r2, r3
 800e076:	1b8a      	subs	r2, r1, r6
 800e078:	eba7 050e 	sub.w	r5, r7, lr
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d164      	bne.n	800e14a <__ieee754_fmod+0x182>
 800e080:	4577      	cmp	r7, lr
 800e082:	bf38      	it	cc
 800e084:	f102 32ff 	addcc.w	r2, r2, #4294967295	@ 0xffffffff
 800e088:	2a00      	cmp	r2, #0
 800e08a:	bfbc      	itt	lt
 800e08c:	463d      	movlt	r5, r7
 800e08e:	460a      	movlt	r2, r1
 800e090:	ea52 0105 	orrs.w	r1, r2, r5
 800e094:	d0c6      	beq.n	800e024 <__ieee754_fmod+0x5c>
 800e096:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800e09a:	db6b      	blt.n	800e174 <__ieee754_fmod+0x1ac>
 800e09c:	494d      	ldr	r1, [pc, #308]	@ (800e1d4 <__ieee754_fmod+0x20c>)
 800e09e:	428b      	cmp	r3, r1
 800e0a0:	db6e      	blt.n	800e180 <__ieee754_fmod+0x1b8>
 800e0a2:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800e0a6:	4322      	orrs	r2, r4
 800e0a8:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800e0ac:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	ec41 0b10 	vmov	d0, r0, r1
 800e0b6:	e7a7      	b.n	800e008 <__ieee754_fmod+0x40>
 800e0b8:	3a01      	subs	r2, #1
 800e0ba:	005b      	lsls	r3, r3, #1
 800e0bc:	e7c1      	b.n	800e042 <__ieee754_fmod+0x7a>
 800e0be:	4a45      	ldr	r2, [pc, #276]	@ (800e1d4 <__ieee754_fmod+0x20c>)
 800e0c0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	ddbe      	ble.n	800e046 <__ieee754_fmod+0x7e>
 800e0c8:	3a01      	subs	r2, #1
 800e0ca:	005b      	lsls	r3, r3, #1
 800e0cc:	e7fa      	b.n	800e0c4 <__ieee754_fmod+0xfc>
 800e0ce:	ea4f 5228 	mov.w	r2, r8, asr #20
 800e0d2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e0d6:	e7b6      	b.n	800e046 <__ieee754_fmod+0x7e>
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	0049      	lsls	r1, r1, #1
 800e0dc:	e7b9      	b.n	800e052 <__ieee754_fmod+0x8a>
 800e0de:	4b3d      	ldr	r3, [pc, #244]	@ (800e1d4 <__ieee754_fmod+0x20c>)
 800e0e0:	02e9      	lsls	r1, r5, #11
 800e0e2:	2900      	cmp	r1, #0
 800e0e4:	ddb7      	ble.n	800e056 <__ieee754_fmod+0x8e>
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	0049      	lsls	r1, r1, #1
 800e0ea:	e7fa      	b.n	800e0e2 <__ieee754_fmod+0x11a>
 800e0ec:	152b      	asrs	r3, r5, #20
 800e0ee:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e0f2:	e7b0      	b.n	800e056 <__ieee754_fmod+0x8e>
 800e0f4:	eba1 0c02 	sub.w	ip, r1, r2
 800e0f8:	f1bc 0f1f 	cmp.w	ip, #31
 800e0fc:	dc09      	bgt.n	800e112 <__ieee754_fmod+0x14a>
 800e0fe:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800e102:	fa08 f70c 	lsl.w	r7, r8, ip
 800e106:	fa29 f101 	lsr.w	r1, r9, r1
 800e10a:	4339      	orrs	r1, r7
 800e10c:	fa09 f70c 	lsl.w	r7, r9, ip
 800e110:	e7a8      	b.n	800e064 <__ieee754_fmod+0x9c>
 800e112:	4931      	ldr	r1, [pc, #196]	@ (800e1d8 <__ieee754_fmod+0x210>)
 800e114:	1a89      	subs	r1, r1, r2
 800e116:	fa09 f101 	lsl.w	r1, r9, r1
 800e11a:	2700      	movs	r7, #0
 800e11c:	e7a2      	b.n	800e064 <__ieee754_fmod+0x9c>
 800e11e:	ebac 0c03 	sub.w	ip, ip, r3
 800e122:	f1bc 0f1f 	cmp.w	ip, #31
 800e126:	dc09      	bgt.n	800e13c <__ieee754_fmod+0x174>
 800e128:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800e12c:	fa05 f50c 	lsl.w	r5, r5, ip
 800e130:	fa20 f606 	lsr.w	r6, r0, r6
 800e134:	432e      	orrs	r6, r5
 800e136:	fa00 fe0c 	lsl.w	lr, r0, ip
 800e13a:	e79b      	b.n	800e074 <__ieee754_fmod+0xac>
 800e13c:	4e26      	ldr	r6, [pc, #152]	@ (800e1d8 <__ieee754_fmod+0x210>)
 800e13e:	1af6      	subs	r6, r6, r3
 800e140:	fa00 f606 	lsl.w	r6, r0, r6
 800e144:	f04f 0e00 	mov.w	lr, #0
 800e148:	e794      	b.n	800e074 <__ieee754_fmod+0xac>
 800e14a:	4577      	cmp	r7, lr
 800e14c:	bf38      	it	cc
 800e14e:	f102 32ff 	addcc.w	r2, r2, #4294967295	@ 0xffffffff
 800e152:	2a00      	cmp	r2, #0
 800e154:	da05      	bge.n	800e162 <__ieee754_fmod+0x19a>
 800e156:	0ffa      	lsrs	r2, r7, #31
 800e158:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e15c:	007f      	lsls	r7, r7, #1
 800e15e:	3801      	subs	r0, #1
 800e160:	e789      	b.n	800e076 <__ieee754_fmod+0xae>
 800e162:	ea52 0105 	orrs.w	r1, r2, r5
 800e166:	f43f af5d 	beq.w	800e024 <__ieee754_fmod+0x5c>
 800e16a:	0fe9      	lsrs	r1, r5, #31
 800e16c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800e170:	006f      	lsls	r7, r5, #1
 800e172:	e7f4      	b.n	800e15e <__ieee754_fmod+0x196>
 800e174:	0fe9      	lsrs	r1, r5, #31
 800e176:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e17a:	006d      	lsls	r5, r5, #1
 800e17c:	3b01      	subs	r3, #1
 800e17e:	e78a      	b.n	800e096 <__ieee754_fmod+0xce>
 800e180:	1ac9      	subs	r1, r1, r3
 800e182:	2914      	cmp	r1, #20
 800e184:	dc0a      	bgt.n	800e19c <__ieee754_fmod+0x1d4>
 800e186:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800e18a:	fa02 f303 	lsl.w	r3, r2, r3
 800e18e:	40cd      	lsrs	r5, r1
 800e190:	432b      	orrs	r3, r5
 800e192:	410a      	asrs	r2, r1
 800e194:	ea42 0104 	orr.w	r1, r2, r4
 800e198:	4618      	mov	r0, r3
 800e19a:	e78a      	b.n	800e0b2 <__ieee754_fmod+0xea>
 800e19c:	291f      	cmp	r1, #31
 800e19e:	dc07      	bgt.n	800e1b0 <__ieee754_fmod+0x1e8>
 800e1a0:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800e1a4:	40cd      	lsrs	r5, r1
 800e1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800e1aa:	432b      	orrs	r3, r5
 800e1ac:	4622      	mov	r2, r4
 800e1ae:	e7f1      	b.n	800e194 <__ieee754_fmod+0x1cc>
 800e1b0:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800e1b4:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800e1b8:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800e1bc:	33e2      	adds	r3, #226	@ 0xe2
 800e1be:	fa42 f303 	asr.w	r3, r2, r3
 800e1c2:	e7f3      	b.n	800e1ac <__ieee754_fmod+0x1e4>
 800e1c4:	7fefffff 	.word	0x7fefffff
 800e1c8:	7ff00000 	.word	0x7ff00000
 800e1cc:	0800eac0 	.word	0x0800eac0
 800e1d0:	fffffbed 	.word	0xfffffbed
 800e1d4:	fffffc02 	.word	0xfffffc02
 800e1d8:	fffffbe2 	.word	0xfffffbe2

0800e1dc <_init>:
 800e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1de:	bf00      	nop
 800e1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1e2:	bc08      	pop	{r3}
 800e1e4:	469e      	mov	lr, r3
 800e1e6:	4770      	bx	lr

0800e1e8 <_fini>:
 800e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ea:	bf00      	nop
 800e1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ee:	bc08      	pop	{r3}
 800e1f0:	469e      	mov	lr, r3
 800e1f2:	4770      	bx	lr
