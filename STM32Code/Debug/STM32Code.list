
STM32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000b1dc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800b4b0  0800b4b0  0000c4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b908  0800b908  0000c908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b910  0800b910  0000c910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b914  0800b914  0000c914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800b918  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000338  240001d8  0800baf0  0000d1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000510  0800baf0  0000d510  2**0
=======
  1 .text         0000b318  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800b5e8  0800b5e8  0000c5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ba0c  0800ba0c  0000ca0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ba14  0800ba14  0000ca14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ba18  0800ba18  0000ca18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  0800ba1c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000340  240001e8  0800bc04  0000d1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000528  0800bc04  0000d528  2**0
>>>>>>> 185885c (working on rudder control)
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 10 .debug_info   0001a33f  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f9f  00000000  00000000  00027545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  0002a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001040  00000000  00000000  0002b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034f8b  00000000  00000000  0002c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c9a7  00000000  00000000  00061963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001518d3  00000000  00000000  0007e30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cfbdd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000674c  00000000  00000000  001cfc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000054  00000000  00000000  001d636c  2**0
=======
 10 .debug_info   0001aae0  00000000  00000000  0000d216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003161  00000000  00000000  00027cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e0  00000000  00000000  0002ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001081  00000000  00000000  0002c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035239  00000000  00000000  0002d3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d1b1  00000000  00000000  000625f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001518d8  00000000  00000000  0007f7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d107b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067b0  00000000  00000000  001d10c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000054  00000000  00000000  001d7870  2**0
>>>>>>> 185885c (working on rudder control)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80002f0:	0800b494 	.word	0x0800b494
=======
 80002f0:	0800b5d0 	.word	0x0800b5d0
>>>>>>> 185885c (working on rudder control)

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800b494 	.word	0x0800b494
=======
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0800b5d0 	.word	0x0800b5d0
>>>>>>> 185885c (working on rudder control)

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <AS5600_read_angle>:
 */

#include "AS5600.h"
#include "stdint.h"

HAL_StatusTypeDef AS5600_read_angle(I2C_HandleTypeDef *hi2c, float *angle){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
    
    HAL_StatusTypeDef ret ;
    uint8_t angle_buff[2]; // hold the 2 bits from the Raw Angle 
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG, I2C_MEMADD_SIZE_8BIT,angle_buff,2,HAL_MAX_DELAY);//HAL_MAX_DELAY is blockling 
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2302      	movs	r3, #2
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	220c      	movs	r2, #12
 800070a:	216c      	movs	r1, #108	@ 0x6c
 800070c:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 800070e:	f002 f997 	bl	8002a40 <HAL_I2C_Mem_Read>
=======
 800070e:	f002 fb47 	bl	8002da0 <HAL_I2C_Mem_Read>
>>>>>>> 185885c (working on rudder control)
 8000712:	4603      	mov	r3, r0
 8000714:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK){
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <AS5600_read_angle+0x38>
    	handle_error(ret);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f826 	bl	8000770 <handle_error>
    }
    uint16_t raw_angle = (((angle_buff[0]<<8)|angle_buff[1])&0x0FFF);
 8000724:	7a3b      	ldrb	r3, [r7, #8]
 8000726:	b21b      	sxth	r3, r3
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21a      	sxth	r2, r3
 800072c:	7a7b      	ldrb	r3, [r7, #9]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b21b      	sxth	r3, r3
 8000734:	b29b      	uxth	r3, r3
 8000736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073a:	81bb      	strh	r3, [r7, #12]

    *angle = 360.0f*((float)raw_angle/4096.0f);
 800073c:	89bb      	ldrh	r3, [r7, #12]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000746:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000768 <AS5600_read_angle+0x7c>
 800074a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800076c <AS5600_read_angle+0x80>
 8000752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	45800000 	.word	0x45800000
 800076c:	43b40000 	.word	0x43b40000

08000770 <handle_error>:
        printf("No magnet detected or improper alignment\n");
        return 0; // Magnet is not detected
    }
}

void handle_error(HAL_StatusTypeDef status) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d004      	beq.n	800078a <handle_error+0x1a>
        // Implement error handling logic (e.g., log error or reset I²C bus)
        printf("I2C Error: %d\n", status);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4619      	mov	r1, r3
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <handle_error+0x24>)
<<<<<<< HEAD
 8000786:	f008 fdeb 	bl	8009360 <iprintf>
=======
 8000786:	f008 ff9b 	bl	80096c0 <iprintf>
>>>>>>> 185885c (working on rudder control)
    }
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
<<<<<<< HEAD
 8000794:	0800b4f4 	.word	0x0800b4f4
=======
 8000794:	0800b62c 	.word	0x0800b62c
>>>>>>> 185885c (working on rudder control)

08000798 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2201      	movs	r2, #1
 80007a8:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <__io_putchar+0x20>)
<<<<<<< HEAD
 80007aa:	f006 fa73 	bl	8006c94 <HAL_UART_Transmit>
=======
 80007aa:	f006 fc23 	bl	8006ff4 <HAL_UART_Transmit>
>>>>>>> 185885c (working on rudder control)
    return ch;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	24000338 	.word	0x24000338

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
<<<<<<< HEAD
 80007c2:	f000 faaf 	bl	8000d24 <MPU_Config>
=======
 80007c2:	f000 faa9 	bl	8000d18 <MPU_Config>
>>>>>>> 185885c (working on rudder control)

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 80007c6:	f000 ff3b 	bl	8001640 <HAL_Init>
=======
 80007c6:	f001 f8eb 	bl	80019a0 <HAL_Init>
>>>>>>> 185885c (working on rudder control)

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 80007ca:	f000 f855 	bl	8000878 <SystemClock_Config>
=======
 80007ca:	f000 f84f 	bl	800086c <SystemClock_Config>
>>>>>>> 185885c (working on rudder control)
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80007ce:	f000 fa29 	bl	8000c24 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007d2:	f000 f8ef 	bl	80009b4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80007d6:	f000 f9d9 	bl	8000b8c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80007da:	f000 f98b 	bl	8000af4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007de:	f000 f8a9 	bl	8000934 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007e2:	2100      	movs	r1, #0
 80007e4:	481d      	ldr	r0, [pc, #116]	@ (800085c <main+0xa0>)
 80007e6:	f005 fb05 	bl	8005df4 <HAL_TIM_PWM_Start>
=======
 80007ce:	f000 fa23 	bl	8000c18 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007d2:	f000 f8e9 	bl	80009a8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80007d6:	f000 f9d3 	bl	8000b80 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80007da:	f000 f985 	bl	8000ae8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007de:	f000 f8a3 	bl	8000928 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007e2:	2100      	movs	r1, #0
 80007e4:	481b      	ldr	r0, [pc, #108]	@ (8000854 <main+0x98>)
 80007e6:	f005 fcb5 	bl	8006154 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // Start PWM for rudder on TIM1_CH2
 80007ea:	2104      	movs	r1, #4
 80007ec:	4819      	ldr	r0, [pc, #100]	@ (8000854 <main+0x98>)
 80007ee:	f005 fcb1 	bl	8006154 <HAL_TIM_PWM_Start>
  rudder_init(&htim1, TIM_CHANNEL_2);     // Initialize the rudder
 80007f2:	2104      	movs	r1, #4
 80007f4:	4817      	ldr	r0, [pc, #92]	@ (8000854 <main+0x98>)
 80007f6:	f000 fac1 	bl	8000d7c <rudder_init>
>>>>>>> 185885c (working on rudder control)

 volatile float angle;
 printf("turning");
 80007ea:	481d      	ldr	r0, [pc, #116]	@ (8000860 <main+0xa4>)
 80007ec:	f008 fdb8 	bl	8009360 <iprintf>
 set_servo_angle(&htim1,TIM_CHANNEL_1, 90); // debug
<<<<<<< HEAD
 80007f0:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8000864 <main+0xa8>
 80007f4:	2100      	movs	r1, #0
 80007f6:	4819      	ldr	r0, [pc, #100]	@ (800085c <main+0xa0>)
 80007f8:	f000 fac6 	bl	8000d88 <set_servo_angle>
 //printf("turned now once more");
 //set_servo_angle_gradual(&htim1, TIM_CHANNEL_1,0);
 printf("done");
 80007fc:	481a      	ldr	r0, [pc, #104]	@ (8000868 <main+0xac>)
 80007fe:	f008 fdaf 	bl	8009360 <iprintf>

 ServoController sail_servo;
 sail_servo.htim= &htim1;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <main+0xa0>)
 8000804:	60bb      	str	r3, [r7, #8]
 sail_servo.channel = TIM_CHANNEL_1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
=======
 80007fa:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8000858 <main+0x9c>
 80007fe:	2100      	movs	r1, #0
 8000800:	4814      	ldr	r0, [pc, #80]	@ (8000854 <main+0x98>)
 8000802:	f000 fbe1 	bl	8000fc8 <set_servo_angle>
 set_servo_angle_gradual(&htim1, TIM_CHANNEL_1,0);
 8000806:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800085c <main+0xa0>
 800080a:	2100      	movs	r1, #0
 800080c:	4811      	ldr	r0, [pc, #68]	@ (8000854 <main+0x98>)
 800080e:	f000 fc25 	bl	800105c <set_servo_angle_gradual>
>>>>>>> 185885c (working on rudder control)

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef i2c_status = AS5600_read_angle(&hi2c1, &angle);
<<<<<<< HEAD
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	4816      	ldr	r0, [pc, #88]	@ (800086c <main+0xb0>)
 8000812:	f7ff ff6b 	bl	80006ec <AS5600_read_angle>
 8000816:	4603      	mov	r3, r0
 8000818:	75fb      	strb	r3, [r7, #23]
	  if (i2c_status== HAL_OK){
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d108      	bne.n	8000832 <main+0x76>
		  printf("the angle is %f", angle);
 8000820:	edd7 7a04 	vldr	s15, [r7, #16]
 8000824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000828:	ec53 2b17 	vmov	r2, r3, d7
 800082c:	4810      	ldr	r0, [pc, #64]	@ (8000870 <main+0xb4>)
 800082e:	f008 fd97 	bl	8009360 <iprintf>
	  }
=======
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4812      	ldr	r0, [pc, #72]	@ (8000860 <main+0xa4>)
 8000818:	f7ff ff68 	bl	80006ec <AS5600_read_angle>
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
	  if (i2c_status== HAL_OK){
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d013      	beq.n	800084e <main+0x92>
		  continue;//printf("the angle is %f", angle);
	  }

    rudder_turn_to(90, 45);        // heading = 90, target = 45
 8000826:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8000864 <main+0xa8>
 800082a:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000858 <main+0x9c>
 800082e:	f000 fabb 	bl	8000da8 <rudder_turn_to>
    rudder_move_to();              // smoothly move rudder to target position
 8000832:	f000 fb3b 	bl	8000eac <rudder_move_to>
>>>>>>> 185885c (working on rudder control)
	  
	  if (i2c_status != HAL_OK) {
<<<<<<< HEAD
 8000832:	7dfb      	ldrb	r3, [r7, #23]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d003      	beq.n	8000840 <main+0x84>
	      printf("Error reading angle from AS5600\n");
 8000838:	480e      	ldr	r0, [pc, #56]	@ (8000874 <main+0xb8>)
 800083a:	f008 fdf9 	bl	8009430 <puts>
	      continue; // Skip to the next iteration
 800083e:	e00b      	b.n	8000858 <main+0x9c>
	  }

	  copy_wind_pos(&sail_servo, angle);
 8000840:	edd7 7a04 	vldr	s15, [r7, #16]
 8000844:	463b      	mov	r3, r7
 8000846:	eeb0 0a67 	vmov.f32	s0, s15
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fb1c 	bl	8000e88 <copy_wind_pos>

	  HAL_Delay(500);
 8000850:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000854:	f000 ff86 	bl	8001764 <HAL_Delay>
  {
 8000858:	e7d7      	b.n	800080a <main+0x4e>
 800085a:	bf00      	nop
 800085c:	24000248 	.word	0x24000248
 8000860:	0800b504 	.word	0x0800b504
 8000864:	42b40000 	.word	0x42b40000
 8000868:	0800b50c 	.word	0x0800b50c
 800086c:	240001f4 	.word	0x240001f4
 8000870:	0800b514 	.word	0x0800b514
 8000874:	0800b524 	.word	0x0800b524

08000878 <SystemClock_Config>:
=======
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <main+0x88>
	      printf("Error reading angle from AS5600\n");
 800083c:	480a      	ldr	r0, [pc, #40]	@ (8000868 <main+0xac>)
 800083e:	f008 ffa7 	bl	8009790 <puts>
	      continue; // Skip to the next iteration
 8000842:	e005      	b.n	8000850 <main+0x94>
	  }
	  HAL_Delay(500);
 8000844:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000848:	f001 f93c 	bl	8001ac4 <HAL_Delay>
 800084c:	e7e1      	b.n	8000812 <main+0x56>
		  continue;//printf("the angle is %f", angle);
 800084e:	bf00      	nop
  {
 8000850:	e7df      	b.n	8000812 <main+0x56>
 8000852:	bf00      	nop
 8000854:	24000258 	.word	0x24000258
 8000858:	42b40000 	.word	0x42b40000
 800085c:	00000000 	.word	0x00000000
 8000860:	24000204 	.word	0x24000204
 8000864:	42340000 	.word	0x42340000
 8000868:	0800b63c 	.word	0x0800b63c

0800086c <SystemClock_Config>:
>>>>>>> 185885c (working on rudder control)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	@ 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	224c      	movs	r2, #76	@ 0x4c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f008 feb2 	bl	80095f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f008 feac 	bl	80095f0 <memset>
=======
 800086c:	b580      	push	{r7, lr}
 800086e:	b09c      	sub	sp, #112	@ 0x70
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	224c      	movs	r2, #76	@ 0x4c
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f008 ff90 	bl	80097a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2220      	movs	r2, #32
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f008 ff8a 	bl	80097a0 <memset>
>>>>>>> 185885c (working on rudder control)

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
<<<<<<< HEAD
 8000898:	2002      	movs	r0, #2
 800089a:	f002 fcf1 	bl	8003280 <HAL_PWREx_ConfigSupply>
=======
 800088c:	2002      	movs	r0, #2
 800088e:	f002 fea7 	bl	80035e0 <HAL_PWREx_ConfigSupply>
>>>>>>> 185885c (working on rudder control)

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
<<<<<<< HEAD
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <SystemClock_Config+0xb8>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008aa:	4a21      	ldr	r2, [pc, #132]	@ (8000930 <SystemClock_Config+0xb8>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <SystemClock_Config+0xb8>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008be:	bf00      	nop
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <SystemClock_Config+0xb8>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008cc:	d1f8      	bne.n	80008c0 <SystemClock_Config+0x48>
=======
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <SystemClock_Config+0xb8>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800089e:	4a21      	ldr	r2, [pc, #132]	@ (8000924 <SystemClock_Config+0xb8>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <SystemClock_Config+0xb8>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b2:	bf00      	nop
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <SystemClock_Config+0xb8>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008c0:	d1f8      	bne.n	80008b4 <SystemClock_Config+0x48>
>>>>>>> 185885c (working on rudder control)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 80008ce:	2302      	movs	r3, #2
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008da:	2300      	movs	r3, #0
 80008dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fd06 	bl	80032f4 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008ee:	f000 fa45 	bl	8000d7c <Error_Handler>
=======
 80008c2:	2302      	movs	r3, #2
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008ca:	2340      	movs	r3, #64	@ 0x40
 80008cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 febc 	bl	8003654 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008e2:	f000 fa45 	bl	8000d70 <Error_Handler>
>>>>>>> 185885c (working on rudder control)
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80008f2:	233f      	movs	r3, #63	@ 0x3f
 80008f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000906:	2340      	movs	r3, #64	@ 0x40
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800090a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2101      	movs	r1, #1
 8000918:	4618      	mov	r0, r3
 800091a:	f003 f8c5 	bl	8003aa8 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000924:	f000 fa2a 	bl	8000d7c <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3770      	adds	r7, #112	@ 0x70
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	58024800 	.word	0x58024800

08000934 <MX_I2C1_Init>:
=======
 80008e6:	233f      	movs	r3, #63	@ 0x3f
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008fa:	2340      	movs	r3, #64	@ 0x40
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2101      	movs	r1, #1
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fa7b 	bl	8003e08 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000918:	f000 fa2a 	bl	8000d70 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58024800 	.word	0x58024800

08000928 <MX_I2C1_Init>:
>>>>>>> 185885c (working on rudder control)
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
=======
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
>>>>>>> 185885c (working on rudder control)
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ac <MX_I2C1_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000940:	4a1b      	ldr	r2, [pc, #108]	@ (80009b0 <MX_I2C1_Init+0x7c>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000944:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800094c:	2201      	movs	r2, #1
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096e:	480e      	ldr	r0, [pc, #56]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000970:	f001 ffca 	bl	8002908 <HAL_I2C_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800097a:	f000 f9ff 	bl	8000d7c <Error_Handler>
=======
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_I2C1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <MX_I2C1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_I2C1_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	@ (80009a4 <MX_I2C1_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_I2C1_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <MX_I2C1_Init+0x74>)
 8000964:	f002 f980 	bl	8002c68 <HAL_I2C_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096e:	f000 f9ff 	bl	8000d70 <Error_Handler>
>>>>>>> 185885c (working on rudder control)
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 800097e:	2100      	movs	r1, #0
 8000980:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000982:	f002 fbe5 	bl	8003150 <HAL_I2CEx_ConfigAnalogFilter>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 f9f6 	bl	8000d7c <Error_Handler>
=======
 8000972:	2100      	movs	r1, #0
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <MX_I2C1_Init+0x74>)
 8000976:	f002 fd9b 	bl	80034b0 <HAL_I2CEx_ConfigAnalogFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 f9f6 	bl	8000d70 <Error_Handler>
>>>>>>> 185885c (working on rudder control)
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
<<<<<<< HEAD
 8000990:	2100      	movs	r1, #0
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000994:	f002 fc27 	bl	80031e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 f9ed 	bl	8000d7c <Error_Handler>
=======
 8000984:	2100      	movs	r1, #0
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_I2C1_Init+0x74>)
 8000988:	f002 fddd 	bl	8003546 <HAL_I2CEx_ConfigDigitalFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f9ed 	bl	8000d70 <Error_Handler>
>>>>>>> 185885c (working on rudder control)
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	240001f4 	.word	0x240001f4
 80009ac:	40005400 	.word	0x40005400
 80009b0:	00707cbb 	.word	0x00707cbb

080009b4 <MX_TIM1_Init>:
=======
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	24000204 	.word	0x24000204
 80009a0:	40005400 	.word	0x40005400
 80009a4:	00707cbb 	.word	0x00707cbb

080009a8 <MX_TIM1_Init>:
>>>>>>> 185885c (working on rudder control)
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b098      	sub	sp, #96	@ 0x60
 80009b8:	af00      	add	r7, sp, #0
=======
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b098      	sub	sp, #96	@ 0x60
 80009ac:	af00      	add	r7, sp, #0
>>>>>>> 185885c (working on rudder control)

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80009ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
 80009d6:	615a      	str	r2, [r3, #20]
 80009d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2234      	movs	r2, #52	@ 0x34
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f008 fe05 	bl	80095f0 <memset>
=======
 80009ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2234      	movs	r2, #52	@ 0x34
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f008 fee3 	bl	80097a0 <memset>
>>>>>>> 185885c (working on rudder control)

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 80009e6:	4b41      	ldr	r3, [pc, #260]	@ (8000aec <MX_TIM1_Init+0x138>)
 80009e8:	4a41      	ldr	r2, [pc, #260]	@ (8000af0 <MX_TIM1_Init+0x13c>)
 80009ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80009ec:	4b3f      	ldr	r3, [pc, #252]	@ (8000aec <MX_TIM1_Init+0x138>)
 80009ee:	223f      	movs	r2, #63	@ 0x3f
 80009f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b3e      	ldr	r3, [pc, #248]	@ (8000aec <MX_TIM1_Init+0x138>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80009f8:	4b3c      	ldr	r3, [pc, #240]	@ (8000aec <MX_TIM1_Init+0x138>)
 80009fa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b3a      	ldr	r3, [pc, #232]	@ (8000aec <MX_TIM1_Init+0x138>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a06:	4b39      	ldr	r3, [pc, #228]	@ (8000aec <MX_TIM1_Init+0x138>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b37      	ldr	r3, [pc, #220]	@ (8000aec <MX_TIM1_Init+0x138>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a12:	4836      	ldr	r0, [pc, #216]	@ (8000aec <MX_TIM1_Init+0x138>)
 8000a14:	f005 f996 	bl	8005d44 <HAL_TIM_PWM_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a1e:	f000 f9ad 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a32:	4619      	mov	r1, r3
 8000a34:	482d      	ldr	r0, [pc, #180]	@ (8000aec <MX_TIM1_Init+0x138>)
 8000a36:	f005 ffb5 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a40:	f000 f99c 	bl	8000d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a44:	2360      	movs	r3, #96	@ 0x60
 8000a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000a48:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4820      	ldr	r0, [pc, #128]	@ (8000aec <MX_TIM1_Init+0x138>)
 8000a6c:	f005 fade 	bl	800602c <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a76:	f000 f981 	bl	8000d7c <Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 8000a7a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a84:	2204      	movs	r2, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4818      	ldr	r0, [pc, #96]	@ (8000aec <MX_TIM1_Init+0x138>)
 8000a8a:	f005 facf 	bl	800602c <HAL_TIM_PWM_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a94:	f000 f972 	bl	8000d7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4807      	ldr	r0, [pc, #28]	@ (8000aec <MX_TIM1_Init+0x138>)
 8000ace:	f006 f805 	bl	8006adc <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ad8:	f000 f950 	bl	8000d7c <Error_Handler>
=======
 80009da:	4b41      	ldr	r3, [pc, #260]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 80009dc:	4a41      	ldr	r2, [pc, #260]	@ (8000ae4 <MX_TIM1_Init+0x13c>)
 80009de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80009e0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 80009e2:	223f      	movs	r2, #63	@ 0x3f
 80009e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80009ec:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 80009ee:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fa:	4b39      	ldr	r3, [pc, #228]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b37      	ldr	r3, [pc, #220]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a06:	4836      	ldr	r0, [pc, #216]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 8000a08:	f005 fb4c 	bl	80060a4 <HAL_TIM_PWM_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 f9ad 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a26:	4619      	mov	r1, r3
 8000a28:	482d      	ldr	r0, [pc, #180]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 8000a2a:	f006 f96b 	bl	8006d04 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a34:	f000 f99c 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a38:	2360      	movs	r3, #96	@ 0x60
 8000a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000a3c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a42:	2300      	movs	r3, #0
 8000a44:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a46:	2300      	movs	r3, #0
 8000a48:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4820      	ldr	r0, [pc, #128]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 8000a60:	f005 fc94 	bl	800638c <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a6a:	f000 f981 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 8000a6e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a78:	2204      	movs	r2, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4818      	ldr	r0, [pc, #96]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 8000a7e:	f005 fc85 	bl	800638c <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a88:	f000 f972 	bl	8000d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 8000ac2:	f006 f9bb 	bl	8006e3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000acc:	f000 f950 	bl	8000d70 <Error_Handler>
>>>>>>> 185885c (working on rudder control)
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< HEAD
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <MX_TIM1_Init+0x138>)
 8000ade:	f000 fab9 	bl	8001054 <HAL_TIM_MspPostInit>

}
 8000ae2:	bf00      	nop
 8000ae4:	3760      	adds	r7, #96	@ 0x60
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	24000248 	.word	0x24000248
 8000af0:	40010000 	.word	0x40010000

08000af4 <MX_USART2_UART_Init>:
=======
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <MX_TIM1_Init+0x138>)
 8000ad2:	f000 fc6f 	bl	80013b4 <HAL_TIM_MspPostInit>

}
 8000ad6:	bf00      	nop
 8000ad8:	3760      	adds	r7, #96	@ 0x60
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	24000258 	.word	0x24000258
 8000ae4:	40010000 	.word	0x40010000

08000ae8 <MX_USART2_UART_Init>:
>>>>>>> 185885c (working on rudder control)
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
=======
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
>>>>>>> 185885c (working on rudder control)
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8000af8:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000afa:	4a23      	ldr	r2, [pc, #140]	@ (8000b88 <MX_USART2_UART_Init+0x94>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000afe:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3c:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b3e:	f006 f859 	bl	8006bf4 <HAL_UART_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b48:	f000 f918 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b50:	f007 fe44 	bl	80087dc <HAL_UARTEx_SetTxFifoThreshold>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b5a:	f000 f90f 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b62:	f007 fe79 	bl	8008858 <HAL_UARTEx_SetRxFifoThreshold>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b6c:	f000 f906 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_USART2_UART_Init+0x90>)
 8000b72:	f007 fdfa 	bl	800876a <HAL_UARTEx_DisableFifoMode>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 f8fe 	bl	8000d7c <Error_Handler>
=======
 8000aec:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000aee:	4a23      	ldr	r2, [pc, #140]	@ (8000b7c <MX_USART2_UART_Init+0x94>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000af2:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000af4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b30:	4811      	ldr	r0, [pc, #68]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b32:	f006 fa0f 	bl	8006f54 <HAL_UART_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b3c:	f000 f918 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b44:	f007 fffa 	bl	8008b3c <HAL_UARTEx_SetTxFifoThreshold>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4e:	f000 f90f 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b52:	2100      	movs	r1, #0
 8000b54:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b56:	f008 f82f 	bl	8008bb8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b60:	f000 f906 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b66:	f007 ffb0 	bl	8008aca <HAL_UARTEx_DisableFifoMode>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b70:	f000 f8fe 	bl	8000d70 <Error_Handler>
>>>>>>> 185885c (working on rudder control)
  	  //UART_Start_Receive_IT(&huart2, &ucRxData, 1);
      //HAL_UART_Receive_IT(&huart2, &ucRxData, 1);

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000294 	.word	0x24000294
 8000b88:	40004400 	.word	0x40004400

08000b8c <MX_USART3_UART_Init>:
=======
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	240002a4 	.word	0x240002a4
 8000b7c:	40004400 	.word	0x40004400

08000b80 <MX_USART3_UART_Init>:
>>>>>>> 185885c (working on rudder control)
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
=======
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
>>>>>>> 185885c (working on rudder control)
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< HEAD
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000b92:	4a23      	ldr	r2, [pc, #140]	@ (8000c20 <MX_USART3_UART_Init+0x94>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000bd6:	f006 f80d 	bl	8006bf4 <HAL_UART_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000be0:	f000 f8cc 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000be8:	f007 fdf8 	bl	80087dc <HAL_UARTEx_SetTxFifoThreshold>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf2:	f000 f8c3 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000bfa:	f007 fe2d 	bl	8008858 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c04:	f000 f8ba 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_USART3_UART_Init+0x90>)
 8000c0a:	f007 fdae 	bl	800876a <HAL_UARTEx_DisableFifoMode>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c14:	f000 f8b2 	bl	8000d7c <Error_Handler>
=======
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b86:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <MX_USART3_UART_Init+0x94>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc8:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bca:	f006 f9c3 	bl	8006f54 <HAL_UART_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f000 f8cc 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bdc:	f007 ffae 	bl	8008b3c <HAL_UARTEx_SetTxFifoThreshold>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f000 f8c3 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bee:	f007 ffe3 	bl	8008bb8 <HAL_UARTEx_SetRxFifoThreshold>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f000 f8ba 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bfe:	f007 ff64 	bl	8008aca <HAL_UARTEx_DisableFifoMode>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f000 f8b2 	bl	8000d70 <Error_Handler>
>>>>>>> 185885c (working on rudder control)
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< HEAD
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	24000328 	.word	0x24000328
 8000c20:	40004800 	.word	0x40004800

08000c24 <MX_GPIO_Init>:
=======
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000338 	.word	0x24000338
 8000c14:	40004800 	.word	0x40004800

08000c18 <MX_GPIO_Init>:
>>>>>>> 185885c (working on rudder control)
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
=======
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	@ 0x30
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
>>>>>>> 185885c (working on rudder control)
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
<<<<<<< HEAD
 8000c3a:	4b38      	ldr	r3, [pc, #224]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	4a36      	ldr	r2, [pc, #216]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c4a:	4b34      	ldr	r3, [pc, #208]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c76:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7c:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	f003 0310 	and.w	r3, r3, #16
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	4a20      	ldr	r2, [pc, #128]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb8:	4a18      	ldr	r2, [pc, #96]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	4a11      	ldr	r2, [pc, #68]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2180      	movs	r1, #128	@ 0x80
 8000cf2:	480b      	ldr	r0, [pc, #44]	@ (8000d20 <MX_GPIO_Init+0xfc>)
 8000cf4:	f001 fdee 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_GPIO_Init+0xfc>)
 8000d10:	f001 fc38 	bl	8002584 <HAL_GPIO_Init>
=======
 8000c2e:	4b38      	ldr	r3, [pc, #224]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c34:	4a36      	ldr	r2, [pc, #216]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3e:	4b34      	ldr	r3, [pc, #208]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c52:	4a2f      	ldr	r2, [pc, #188]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c70:	4a27      	ldr	r2, [pc, #156]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7a:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c88:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8e:	4a20      	ldr	r2, [pc, #128]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	4a18      	ldr	r2, [pc, #96]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cca:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_GPIO_Init+0xf8>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	480b      	ldr	r0, [pc, #44]	@ (8000d14 <MX_GPIO_Init+0xfc>)
 8000ce8:	f001 ffa4 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cec:	2380      	movs	r3, #128	@ 0x80
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <MX_GPIO_Init+0xfc>)
 8000d04:	f001 fdee 	bl	80028e4 <HAL_GPIO_Init>
>>>>>>> 185885c (working on rudder control)

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8000d14:	bf00      	nop
 8000d16:	3730      	adds	r7, #48	@ 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	58021800 	.word	0x58021800

08000d24 <MPU_Config>:
=======
 8000d08:	bf00      	nop
 8000d0a:	3730      	adds	r7, #48	@ 0x30
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58021800 	.word	0x58021800

08000d18 <MPU_Config>:
>>>>>>> 185885c (working on rudder control)
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
<<<<<<< HEAD
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d36:	f000 fe49 	bl	80019cc <HAL_MPU_Disable>
=======
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d2a:	f000 ffff 	bl	8001d2c <HAL_MPU_Disable>
>>>>>>> 185885c (working on rudder control)

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
<<<<<<< HEAD
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d46:	231f      	movs	r3, #31
 8000d48:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d4a:	2387      	movs	r3, #135	@ 0x87
 8000d4c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d52:	2300      	movs	r3, #0
 8000d54:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d56:	2301      	movs	r3, #1
 8000d58:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d66:	463b      	mov	r3, r7
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fe67 	bl	8001a3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f000 fe44 	bl	80019fc <HAL_MPU_Enable>

}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <Error_Handler>:
=======
 8000d2e:	2301      	movs	r3, #1
 8000d30:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d3a:	231f      	movs	r3, #31
 8000d3c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d3e:	2387      	movs	r3, #135	@ 0x87
 8000d40:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d46:	2300      	movs	r3, #0
 8000d48:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 f81d 	bl	8001d9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d62:	2004      	movs	r0, #4
 8000d64:	f000 fffa 	bl	8001d5c <HAL_MPU_Enable>

}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <Error_Handler>:
>>>>>>> 185885c (working on rudder control)
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
=======
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
>>>>>>> 185885c (working on rudder control)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
=======
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
>>>>>>> 185885c (working on rudder control)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <Error_Handler+0x8>
=======
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <rudder_init>:
static float rudder_range = 40.0;

static float rudder_current_angle = 90.0;
static float rudder_target_angle = 90.0;

void rudder_init(TIM_HandleTypeDef *htim, uint32_t channel) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    rudder_htim = htim;
 8000d86:	4a06      	ldr	r2, [pc, #24]	@ (8000da0 <rudder_init+0x24>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6013      	str	r3, [r2, #0]
    rudder_channel = channel;
 8000d8c:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <rudder_init+0x28>)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	240003cc 	.word	0x240003cc
 8000da4:	240003d0 	.word	0x240003d0

08000da8 <rudder_turn_to>:

void rudder_turn_to(float bearing, float directionBearing) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
 8000db2:	edc7 0a00 	vstr	s1, [r7]
    float diff = bearing - directionBearing;
 8000db6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dba:	edd7 7a00 	vldr	s15, [r7]
 8000dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc2:	edc7 7a03 	vstr	s15, [r7, #12]

    if (diff > 180) diff -= 360;
 8000dc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dca:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000e94 <rudder_turn_to+0xec>
 8000dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	dd07      	ble.n	8000de8 <rudder_turn_to+0x40>
 8000dd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ddc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000e98 <rudder_turn_to+0xf0>
 8000de0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000de4:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff < -180) diff += 360;
 8000de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dec:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8000e9c <rudder_turn_to+0xf4>
 8000df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df8:	d507      	bpl.n	8000e0a <rudder_turn_to+0x62>
 8000dfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dfe:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000e98 <rudder_turn_to+0xf0>
 8000e02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e06:	edc7 7a03 	vstr	s15, [r7, #12]

    float power = sqrtf(fabsf(diff) / 180.0);
 8000e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e0e:	eef0 7ae7 	vabs.f32	s15, s15
 8000e12:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000e94 <rudder_turn_to+0xec>
 8000e16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e1e:	f00a fbb5 	bl	800b58c <sqrtf>
 8000e22:	ed87 0a02 	vstr	s0, [r7, #8]
    if (diff > 0) {
 8000e26:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e32:	dd0f      	ble.n	8000e54 <rudder_turn_to+0xac>
        rudder_target_angle = rudder_straight - power * rudder_range;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <rudder_turn_to+0xf8>)
 8000e36:	ed93 7a00 	vldr	s14, [r3]
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <rudder_turn_to+0xfc>)
 8000e3c:	edd3 6a00 	vldr	s13, [r3]
 8000e40:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <rudder_turn_to+0x100>)
 8000e4e:	edc3 7a00 	vstr	s15, [r3]
    } else if (diff < 0) {
        rudder_target_angle = rudder_straight + power * rudder_range;
    } else {
        rudder_target_angle = rudder_straight;
    }
}
 8000e52:	e01a      	b.n	8000e8a <rudder_turn_to+0xe2>
    } else if (diff < 0) {
 8000e54:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e60:	d50f      	bpl.n	8000e82 <rudder_turn_to+0xda>
        rudder_target_angle = rudder_straight + power * rudder_range;
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <rudder_turn_to+0xfc>)
 8000e64:	ed93 7a00 	vldr	s14, [r3]
 8000e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <rudder_turn_to+0xf8>)
 8000e72:	edd3 7a00 	vldr	s15, [r3]
 8000e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <rudder_turn_to+0x100>)
 8000e7c:	edc3 7a00 	vstr	s15, [r3]
}
 8000e80:	e003      	b.n	8000e8a <rudder_turn_to+0xe2>
        rudder_target_angle = rudder_straight;
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <rudder_turn_to+0xf8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a08      	ldr	r2, [pc, #32]	@ (8000ea8 <rudder_turn_to+0x100>)
 8000e88:	6013      	str	r3, [r2, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	43340000 	.word	0x43340000
 8000e98:	43b40000 	.word	0x43b40000
 8000e9c:	c3340000 	.word	0xc3340000
 8000ea0:	24000000 	.word	0x24000000
 8000ea4:	24000004 	.word	0x24000004
 8000ea8:	2400000c 	.word	0x2400000c

08000eac <rudder_move_to>:

void rudder_move_to(void) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
    if (fabsf(rudder_target_angle - rudder_current_angle) > 1) {
 8000eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb0 <rudder_move_to+0x104>)
 8000eb4:	ed93 7a00 	vldr	s14, [r3]
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb4 <rudder_move_to+0x108>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec2:	eef0 7ae7 	vabs.f32	s15, s15
 8000ec6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed2:	dc00      	bgt.n	8000ed6 <rudder_move_to+0x2a>
        }

        uint32_t pulse_width = 500 + (rudder_current_angle * (2000.0f / 180.0f));
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
    }
}
 8000ed4:	e066      	b.n	8000fa4 <rudder_move_to+0xf8>
        if (rudder_current_angle < rudder_target_angle) {
 8000ed6:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <rudder_move_to+0x108>)
 8000ed8:	ed93 7a00 	vldr	s14, [r3]
 8000edc:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <rudder_move_to+0x104>)
 8000ede:	edd3 7a00 	vldr	s15, [r3]
 8000ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	d50a      	bpl.n	8000f02 <rudder_move_to+0x56>
            rudder_current_angle += 1;
 8000eec:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <rudder_move_to+0x108>)
 8000eee:	edd3 7a00 	vldr	s15, [r3]
 8000ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000efa:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb4 <rudder_move_to+0x108>)
 8000efc:	edc3 7a00 	vstr	s15, [r3]
 8000f00:	e009      	b.n	8000f16 <rudder_move_to+0x6a>
            rudder_current_angle -= 1;
 8000f02:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <rudder_move_to+0x108>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f10:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <rudder_move_to+0x108>)
 8000f12:	edc3 7a00 	vstr	s15, [r3]
        uint32_t pulse_width = 500 + (rudder_current_angle * (2000.0f / 180.0f));
 8000f16:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <rudder_move_to+0x108>)
 8000f18:	edd3 7a00 	vldr	s15, [r3]
 8000f1c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000fb8 <rudder_move_to+0x10c>
 8000f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f24:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000fbc <rudder_move_to+0x110>
 8000f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f30:	ee17 3a90 	vmov	r3, s15
 8000f34:	607b      	str	r3, [r7, #4]
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8000f36:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <rudder_move_to+0x114>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d105      	bne.n	8000f4a <rudder_move_to+0x9e>
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <rudder_move_to+0x118>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f48:	e02c      	b.n	8000fa4 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <rudder_move_to+0x114>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d105      	bne.n	8000f5e <rudder_move_to+0xb2>
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <rudder_move_to+0x118>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000f5c:	e022      	b.n	8000fa4 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8000f5e:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <rudder_move_to+0x114>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d105      	bne.n	8000f72 <rudder_move_to+0xc6>
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <rudder_move_to+0x118>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f70:	e018      	b.n	8000fa4 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <rudder_move_to+0x114>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b0c      	cmp	r3, #12
 8000f78:	d105      	bne.n	8000f86 <rudder_move_to+0xda>
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <rudder_move_to+0x118>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f84:	e00e      	b.n	8000fa4 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <rudder_move_to+0x114>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b10      	cmp	r3, #16
 8000f8c:	d105      	bne.n	8000f9a <rudder_move_to+0xee>
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <rudder_move_to+0x118>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f98:	e004      	b.n	8000fa4 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <rudder_move_to+0x118>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	2400000c 	.word	0x2400000c
 8000fb4:	24000008 	.word	0x24000008
 8000fb8:	4131c71c 	.word	0x4131c71c
 8000fbc:	43fa0000 	.word	0x43fa0000
 8000fc0:	240003d0 	.word	0x240003d0
 8000fc4:	240003cc 	.word	0x240003cc

08000fc8 <set_servo_angle>:
 */
>>>>>>> 185885c (working on rudder control)

08000d88 <set_servo_angle>:
#include "servo_controls.h"
#include "stdint.h"



 void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
<<<<<<< HEAD
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim 
     the maths maybe works like 1.5 ms pulse width is neutral with .5 and 2.5 being either end
     so we have a 1us count so 500us/1ms -> 500 counts and 2500us -> 2500 counts*/
    if (angle < 0.0f) angle = 0.0f;
 8000d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d502      	bpl.n	8000daa <set_servo_angle+0x22>
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
    if (angle > 180.0f) angle = 180.0f; //limits
 8000daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dae:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000e78 <set_servo_angle+0xf0>
 8000db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	dd01      	ble.n	8000dc0 <set_servo_angle+0x38>
 8000dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e7c <set_servo_angle+0xf4>)
 8000dbe:	607b      	str	r3, [r7, #4]
    
    float min_pulse = 500.0f;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <set_servo_angle+0xf8>)
 8000dc2:	61fb      	str	r3, [r7, #28]
    float max_pulse = 2500.0f;
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <set_servo_angle+0xfc>)
 8000dc6:	61bb      	str	r3, [r7, #24]
     
    uint32_t pulse_width = min_pulse +(angle*((max_pulse - min_pulse)/180.0f));
 8000dc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd4:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000e78 <set_servo_angle+0xf0>
 8000dd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ddc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000de4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df0:	ee17 3a90 	vmov	r3, s15
 8000df4:	617b      	str	r3, [r7, #20]
    uint32_t rounded_pulse_width = (uint32_t)(pulse_width + 0.5f); 
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e0c:	ee17 3a90 	vmov	r3, s15
 8000e10:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d104      	bne.n	8000e22 <set_servo_angle+0x9a>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	635a      	str	r2, [r3, #52]	@ 0x34
  
  }
 8000e20:	e023      	b.n	8000e6a <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d104      	bne.n	8000e32 <set_servo_angle+0xaa>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6393      	str	r3, [r2, #56]	@ 0x38
  }
 8000e30:	e01b      	b.n	8000e6a <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d104      	bne.n	8000e42 <set_servo_angle+0xba>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  }
 8000e40:	e013      	b.n	8000e6a <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	2b0c      	cmp	r3, #12
 8000e46:	d104      	bne.n	8000e52 <set_servo_angle+0xca>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 8000e50:	e00b      	b.n	8000e6a <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	2b10      	cmp	r3, #16
 8000e56:	d104      	bne.n	8000e62 <set_servo_angle+0xda>
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
 8000e60:	e003      	b.n	8000e6a <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	65d3      	str	r3, [r2, #92]	@ 0x5c
  }
 8000e6a:	bf00      	nop
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	43340000 	.word	0x43340000
 8000e7c:	43340000 	.word	0x43340000
 8000e80:	43fa0000 	.word	0x43fa0000
 8000e84:	451c4000 	.word	0x451c4000

08000e88 <copy_wind_pos>:
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); 
=======
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim 
     the maths maybe works like 1.5 ms pulse width is neutral with .5 and 2.5 being either end
     so we have a 1us count so 500us/1ms -> 500 counts and 2500us -> 2500 counts*/
     uint32_t pulse_width = 500 +(angle*((2500-500)/180));
 8000fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fda:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8000fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001058 <set_servo_angle+0x90>
 8000fe6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fee:	ee17 3a90 	vmov	r3, s15
 8000ff2:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <set_servo_angle+0x3c>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	635a      	str	r2, [r3, #52]	@ 0x34
  
  }
 8001002:	e023      	b.n	800104c <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	2b04      	cmp	r3, #4
 8001008:	d104      	bne.n	8001014 <set_servo_angle+0x4c>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	6393      	str	r3, [r2, #56]	@ 0x38
  }
 8001012:	e01b      	b.n	800104c <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b08      	cmp	r3, #8
 8001018:	d104      	bne.n	8001024 <set_servo_angle+0x5c>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	63d3      	str	r3, [r2, #60]	@ 0x3c
  }
 8001022:	e013      	b.n	800104c <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2b0c      	cmp	r3, #12
 8001028:	d104      	bne.n	8001034 <set_servo_angle+0x6c>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 8001032:	e00b      	b.n	800104c <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b10      	cmp	r3, #16
 8001038:	d104      	bne.n	8001044 <set_servo_angle+0x7c>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	6593      	str	r3, [r2, #88]	@ 0x58
  }
 8001042:	e003      	b.n	800104c <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	65d3      	str	r3, [r2, #92]	@ 0x5c
  }
 800104c:	bf00      	nop
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	43fa0000 	.word	0x43fa0000

0800105c <set_servo_angle_gradual>:
  void set_servo_angle_gradual(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim and the channel*/
     uint32_t current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); // returns current pulse width(between 500 and 2500)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <set_servo_angle_gradual+0x1c>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001076:	e01e      	b.n	80010b6 <set_servo_angle_gradual+0x5a>
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d103      	bne.n	8001086 <set_servo_angle_gradual+0x2a>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001084:	e017      	b.n	80010b6 <set_servo_angle_gradual+0x5a>
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b08      	cmp	r3, #8
 800108a:	d103      	bne.n	8001094 <set_servo_angle_gradual+0x38>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001092:	e010      	b.n	80010b6 <set_servo_angle_gradual+0x5a>
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2b0c      	cmp	r3, #12
 8001098:	d103      	bne.n	80010a2 <set_servo_angle_gradual+0x46>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	e009      	b.n	80010b6 <set_servo_angle_gradual+0x5a>
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d103      	bne.n	80010b0 <set_servo_angle_gradual+0x54>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	e002      	b.n	80010b6 <set_servo_angle_gradual+0x5a>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010b6:	617b      	str	r3, [r7, #20]
     uint32_t desired_pulse_width = 500 +(angle*((2500-500)/180));
 80010b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010bc:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80010c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c4:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001264 <set_servo_angle_gradual+0x208>
 80010c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d0:	ee17 3a90 	vmov	r3, s15
 80010d4:	613b      	str	r3, [r7, #16]
     while (desired_pulse_width != current_pulse_width){
 80010d6:	e0ba      	b.n	800124e <set_servo_angle_gradual+0x1f2>
        if (desired_pulse_width > current_pulse_width){
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d959      	bls.n	8001194 <set_servo_angle_gradual+0x138>
            current_pulse_width++; 
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
            __HAL_TIM_SET_COMPARE(htim, channel, current_pulse_width);
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <set_servo_angle_gradual+0x9a>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010f4:	e023      	b.n	800113e <set_servo_angle_gradual+0xe2>
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d104      	bne.n	8001106 <set_servo_angle_gradual+0xaa>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	6393      	str	r3, [r2, #56]	@ 0x38
 8001104:	e01b      	b.n	800113e <set_servo_angle_gradual+0xe2>
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	2b08      	cmp	r3, #8
 800110a:	d104      	bne.n	8001116 <set_servo_angle_gradual+0xba>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001114:	e013      	b.n	800113e <set_servo_angle_gradual+0xe2>
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b0c      	cmp	r3, #12
 800111a:	d104      	bne.n	8001126 <set_servo_angle_gradual+0xca>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	6413      	str	r3, [r2, #64]	@ 0x40
 8001124:	e00b      	b.n	800113e <set_servo_angle_gradual+0xe2>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b10      	cmp	r3, #16
 800112a:	d104      	bne.n	8001136 <set_servo_angle_gradual+0xda>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	6593      	str	r3, [r2, #88]	@ 0x58
 8001134:	e003      	b.n	800113e <set_servo_angle_gradual+0xe2>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	65d3      	str	r3, [r2, #92]	@ 0x5c
            HAL_Delay(10);
 800113e:	200a      	movs	r0, #10
 8001140:	f000 fcc0 	bl	8001ac4 <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d103      	bne.n	8001152 <set_servo_angle_gradual+0xf6>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001150:	e01e      	b.n	8001190 <set_servo_angle_gradual+0x134>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b04      	cmp	r3, #4
 8001156:	d103      	bne.n	8001160 <set_servo_angle_gradual+0x104>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115e:	e017      	b.n	8001190 <set_servo_angle_gradual+0x134>
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d103      	bne.n	800116e <set_servo_angle_gradual+0x112>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800116c:	e010      	b.n	8001190 <set_servo_angle_gradual+0x134>
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b0c      	cmp	r3, #12
 8001172:	d103      	bne.n	800117c <set_servo_angle_gradual+0x120>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	e009      	b.n	8001190 <set_servo_angle_gradual+0x134>
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d103      	bne.n	800118a <set_servo_angle_gradual+0x12e>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001188:	e002      	b.n	8001190 <set_servo_angle_gradual+0x134>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	e05c      	b.n	800124e <set_servo_angle_gradual+0x1f2>

        }
        else if (desired_pulse_width < current_pulse_width)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	d258      	bcs.n	800124e <set_servo_angle_gradual+0x1f2>
        {
            current_pulse_width--; 
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3b01      	subs	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
            __HAL_TIM_SET_COMPARE(htim, channel, current_pulse_width);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d104      	bne.n	80011b2 <set_servo_angle_gradual+0x156>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b0:	e023      	b.n	80011fa <set_servo_angle_gradual+0x19e>
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d104      	bne.n	80011c2 <set_servo_angle_gradual+0x166>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	6393      	str	r3, [r2, #56]	@ 0x38
 80011c0:	e01b      	b.n	80011fa <set_servo_angle_gradual+0x19e>
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d104      	bne.n	80011d2 <set_servo_angle_gradual+0x176>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80011d0:	e013      	b.n	80011fa <set_servo_angle_gradual+0x19e>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b0c      	cmp	r3, #12
 80011d6:	d104      	bne.n	80011e2 <set_servo_angle_gradual+0x186>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e0:	e00b      	b.n	80011fa <set_servo_angle_gradual+0x19e>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b10      	cmp	r3, #16
 80011e6:	d104      	bne.n	80011f2 <set_servo_angle_gradual+0x196>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f0:	e003      	b.n	80011fa <set_servo_angle_gradual+0x19e>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	65d3      	str	r3, [r2, #92]	@ 0x5c

            HAL_Delay(10);
 80011fa:	200a      	movs	r0, #10
 80011fc:	f000 fc62 	bl	8001ac4 <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); 
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <set_servo_angle_gradual+0x1b2>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800120c:	e01e      	b.n	800124c <set_servo_angle_gradual+0x1f0>
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d103      	bne.n	800121c <set_servo_angle_gradual+0x1c0>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800121a:	e017      	b.n	800124c <set_servo_angle_gradual+0x1f0>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b08      	cmp	r3, #8
 8001220:	d103      	bne.n	800122a <set_servo_angle_gradual+0x1ce>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001228:	e010      	b.n	800124c <set_servo_angle_gradual+0x1f0>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d103      	bne.n	8001238 <set_servo_angle_gradual+0x1dc>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	e009      	b.n	800124c <set_servo_angle_gradual+0x1f0>
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b10      	cmp	r3, #16
 800123c:	d103      	bne.n	8001246 <set_servo_angle_gradual+0x1ea>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001244:	e002      	b.n	800124c <set_servo_angle_gradual+0x1f0>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800124c:	617b      	str	r3, [r7, #20]
     while (desired_pulse_width != current_pulse_width){
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	429a      	cmp	r2, r3
 8001254:	f47f af40 	bne.w	80010d8 <set_servo_angle_gradual+0x7c>
>>>>>>> 185885c (working on rudder control)
        }
      
    }
  }
<<<<<<< HEAD
  void copy_wind_pos(ServoController *ctrl, float wind_angle){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	ed87 0a00 	vstr	s0, [r7]
    float adj_angle=  fmod(wind_angle, 180.0f);  //all opposite angles are the same so 200 degrees = 20 degrees 
 8000e94:	edd7 7a00 	vldr	s15, [r7]
 8000e98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e9c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8000ef8 <copy_wind_pos+0x70>
 8000ea0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ea4:	f00a f9c8 	bl	800b238 <fmod>
 8000ea8:	eeb0 7b40 	vmov.f64	d7, d0
 8000eac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb0:	edc7 7a03 	vstr	s15, [r7, #12]
    
    // explicit case for 180 degrees
    if(wind_angle >= 180.0f && adj_angle == 0.0f) {
 8000eb4:	edd7 7a00 	vldr	s15, [r7]
 8000eb8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000f00 <copy_wind_pos+0x78>
 8000ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	db08      	blt.n	8000ed8 <copy_wind_pos+0x50>
 8000ec6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed2:	d101      	bne.n	8000ed8 <copy_wind_pos+0x50>
      adj_angle = 180.0f;
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <copy_wind_pos+0x7c>)
 8000ed6:	60fb      	str	r3, [r7, #12]
=======
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	43fa0000 	.word	0x43fa0000

08001268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_MspInit+0x30>)
 8001270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001274:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <HAL_MspInit+0x30>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_MspInit+0x30>)
 8001280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	58024400 	.word	0x58024400

0800129c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0b8      	sub	sp, #224	@ 0xe0
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	22b8      	movs	r2, #184	@ 0xb8
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f008 fa6f 	bl	80097a0 <memset>
  if(hi2c->Instance==I2C1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <HAL_I2C_MspInit+0xc8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d146      	bne.n	800135a <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012cc:	f04f 0208 	mov.w	r2, #8
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 f91c 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80012ee:	f7ff fd3f 	bl	8000d70 <Error_Handler>
>>>>>>> 185885c (working on rudder control)
    }
    
    set_servo_angle(ctrl->htim, ctrl->channel, adj_angle);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	f7ff ff4e 	bl	8000d88 <set_servo_angle>
  

<<<<<<< HEAD
    //set_servo_angle();
=======
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <HAL_I2C_MspInit+0xcc>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001368 <HAL_I2C_MspInit+0xcc>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_I2C_MspInit+0xcc>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001310:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001318:	2312      	movs	r3, #18
 800131a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132a:	2304      	movs	r3, #4
 800132c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	@ (800136c <HAL_I2C_MspInit+0xd0>)
 8001338:	f001 fad4 	bl	80028e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_I2C_MspInit+0xcc>)
 800133e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001342:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <HAL_I2C_MspInit+0xcc>)
 8001344:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001348:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_I2C_MspInit+0xcc>)
 800134e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

>>>>>>> 185885c (working on rudder control)
  }
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	40668000 	.word	0x40668000
 8000f00:	43340000 	.word	0x43340000
 8000f04:	43340000 	.word	0x43340000

<<<<<<< HEAD
08000f08 <HAL_MspInit>:
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_MspInit+0x30>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f14:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <HAL_MspInit+0x30>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_MspInit+0x30>)
 8000f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	58024400 	.word	0x58024400

08000f3c <HAL_I2C_MspInit>:
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0b8      	sub	sp, #224	@ 0xe0
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	22b8      	movs	r2, #184	@ 0xb8
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f008 fb47 	bl	80095f0 <memset>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a27      	ldr	r2, [pc, #156]	@ (8001004 <HAL_I2C_MspInit+0xc8>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d146      	bne.n	8000ffa <HAL_I2C_MspInit+0xbe>
 8000f6c:	f04f 0208 	mov.w	r2, #8
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 f91c 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_I2C_MspInit+0x56>
 8000f8e:	f7ff fef5 	bl	8000d7c <Error_Handler>
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <HAL_I2C_MspInit+0xcc>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <HAL_I2C_MspInit+0xcc>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_I2C_MspInit+0xcc>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000fb8:	2312      	movs	r3, #18
 8000fba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000fca:	2304      	movs	r3, #4
 8000fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000fd0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480d      	ldr	r0, [pc, #52]	@ (800100c <HAL_I2C_MspInit+0xd0>)
 8000fd8:	f001 fad4 	bl	8002584 <HAL_GPIO_Init>
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_I2C_MspInit+0xcc>)
 8000fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe2:	4a09      	ldr	r2, [pc, #36]	@ (8001008 <HAL_I2C_MspInit+0xcc>)
 8000fe4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fe8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_I2C_MspInit+0xcc>)
 8000fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	bf00      	nop
 8000ffc:	37e0      	adds	r7, #224	@ 0xe0
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40005400 	.word	0x40005400
 8001008:	58024400 	.word	0x58024400
 800100c:	58020400 	.word	0x58020400

08001010 <HAL_TIM_PWM_MspInit>:
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_TIM_PWM_MspInit+0x3c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10e      	bne.n	8001040 <HAL_TIM_PWM_MspInit+0x30>
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_TIM_PWM_MspInit+0x40>)
 8001024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001028:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <HAL_TIM_PWM_MspInit+0x40>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <HAL_TIM_PWM_MspInit+0x40>)
 8001034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40010000 	.word	0x40010000
 8001050:	58024400 	.word	0x58024400
=======
}
 800135a:	bf00      	nop
 800135c:	37e0      	adds	r7, #224	@ 0xe0
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40005400 	.word	0x40005400
 8001368:	58024400 	.word	0x58024400
 800136c:	58020400 	.word	0x58020400

08001370 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <HAL_TIM_PWM_MspInit+0x3c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10e      	bne.n	80013a0 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_TIM_PWM_MspInit+0x40>)
 8001384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001388:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <HAL_TIM_PWM_MspInit+0x40>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <HAL_TIM_PWM_MspInit+0x40>)
 8001394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 185885c (working on rudder control)

08001054 <HAL_TIM_MspPostInit>:
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a13      	ldr	r2, [pc, #76]	@ (80010c0 <HAL_TIM_MspPostInit+0x6c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d11f      	bne.n	80010b6 <HAL_TIM_MspPostInit+0x62>
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_TIM_MspPostInit+0x70>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107c:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <HAL_TIM_MspPostInit+0x70>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_TIM_MspPostInit+0x70>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	2302      	movs	r3, #2
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	2301      	movs	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <HAL_TIM_MspPostInit+0x74>)
 80010b2:	f001 fa67 	bl	8002584 <HAL_GPIO_Init>
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40010000 	.word	0x40010000
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58021000 	.word	0x58021000

080010cc <HAL_UART_MspInit>:
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0bc      	sub	sp, #240	@ 0xf0
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	22b8      	movs	r2, #184	@ 0xb8
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f008 fa7f 	bl	80095f0 <memset>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a63      	ldr	r2, [pc, #396]	@ (8001284 <HAL_UART_MspInit+0x1b8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d172      	bne.n	80011e2 <HAL_UART_MspInit+0x116>
 80010fc:	f04f 0202 	mov.w	r2, #2
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	4618      	mov	r0, r3
 8001114:	f003 f854 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_UART_MspInit+0x56>
 800111e:	f7ff fe2d 	bl	8000d7c <Error_Handler>
 8001122:	4b59      	ldr	r3, [pc, #356]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001128:	4a57      	ldr	r2, [pc, #348]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 800112a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001132:	4b55      	ldr	r3, [pc, #340]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	4b51      	ldr	r3, [pc, #324]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001146:	4a50      	ldr	r2, [pc, #320]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001150:	4b4d      	ldr	r3, [pc, #308]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4b4a      	ldr	r3, [pc, #296]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001164:	4a48      	ldr	r2, [pc, #288]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116e:	4b46      	ldr	r3, [pc, #280]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2308      	movs	r3, #8
 800117e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001194:	2307      	movs	r3, #7
 8001196:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800119a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800119e:	4619      	mov	r1, r3
 80011a0:	483a      	ldr	r0, [pc, #232]	@ (800128c <HAL_UART_MspInit+0x1c0>)
 80011a2:	f001 f9ef 	bl	8002584 <HAL_GPIO_Init>
 80011a6:	2320      	movs	r3, #32
 80011a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80011be:	2307      	movs	r3, #7
 80011c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80011c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011c8:	4619      	mov	r1, r3
 80011ca:	4831      	ldr	r0, [pc, #196]	@ (8001290 <HAL_UART_MspInit+0x1c4>)
 80011cc:	f001 f9da 	bl	8002584 <HAL_GPIO_Init>
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2026      	movs	r0, #38	@ 0x26
 80011d6:	f000 fbc4 	bl	8001962 <HAL_NVIC_SetPriority>
 80011da:	2026      	movs	r0, #38	@ 0x26
 80011dc:	f000 fbdb 	bl	8001996 <HAL_NVIC_EnableIRQ>
 80011e0:	e04b      	b.n	800127a <HAL_UART_MspInit+0x1ae>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001294 <HAL_UART_MspInit+0x1c8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d146      	bne.n	800127a <HAL_UART_MspInit+0x1ae>
 80011ec:	f04f 0202 	mov.w	r2, #2
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	4618      	mov	r0, r3
 8001204:	f002 ffdc 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_UART_MspInit+0x146>
 800120e:	f7ff fdb5 	bl	8000d7c <Error_Handler>
 8001212:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001218:	4a1b      	ldr	r2, [pc, #108]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 800121a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800121e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001236:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <HAL_UART_MspInit+0x1bc>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001268:	2307      	movs	r3, #7
 800126a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800126e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001272:	4619      	mov	r1, r3
 8001274:	4806      	ldr	r0, [pc, #24]	@ (8001290 <HAL_UART_MspInit+0x1c4>)
 8001276:	f001 f985 	bl	8002584 <HAL_GPIO_Init>
 800127a:	bf00      	nop
 800127c:	37f0      	adds	r7, #240	@ 0xf0
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40004400 	.word	0x40004400
 8001288:	58024400 	.word	0x58024400
 800128c:	58020000 	.word	0x58020000
 8001290:	58020c00 	.word	0x58020c00
 8001294:	40004800 	.word	0x40004800

<<<<<<< HEAD
08001298 <NMI_Handler>:
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <NMI_Handler+0x4>

080012a0 <HardFault_Handler>:
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <MemManage_Handler+0x4>
=======
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40010000 	.word	0x40010000
 80013b0:	58024400 	.word	0x58024400

080013b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a13      	ldr	r2, [pc, #76]	@ (8001420 <HAL_TIM_MspPostInit+0x6c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d11f      	bne.n	8001416 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */
>>>>>>> 185885c (working on rudder control)

080012b0 <BusFault_Handler>:
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <BusFault_Handler+0x4>

<<<<<<< HEAD
080012b8 <UsageFault_Handler>:
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <UsageFault_Handler+0x4>
=======
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <HAL_TIM_MspPostInit+0x70>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	4a11      	ldr	r2, [pc, #68]	@ (8001424 <HAL_TIM_MspPostInit+0x70>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_TIM_MspPostInit+0x70>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80013f4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80013f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001406:	2301      	movs	r3, #1
 8001408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <HAL_TIM_MspPostInit+0x74>)
 8001412:	f001 fa67 	bl	80028e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */
>>>>>>> 185885c (working on rudder control)

080012c0 <SVC_Handler>:
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

<<<<<<< HEAD
080012ce <DebugMon_Handler>:
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <PendSV_Handler>:
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <SysTick_Handler>:
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	f000 fa19 	bl	8001724 <HAL_IncTick>
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <USART2_IRQHandler>:
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <USART2_IRQHandler+0x10>)
 80012fe:	f005 fd57 	bl	8006db0 <HAL_UART_IRQHandler>
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	24000294 	.word	0x24000294

0800130c <_getpid>:
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
 8001310:	2301      	movs	r3, #1
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_kill>:
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	f008 f9b5 	bl	8009694 <__errno>
 800132a:	4603      	mov	r3, r0
 800132c:	2216      	movs	r2, #22
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_exit>:
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ffe7 	bl	800131c <_kill>
 800134e:	bf00      	nop
 8001350:	e7fd      	b.n	800134e <_exit+0x12>

08001352 <_read>:
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e00a      	b.n	800137a <_read+0x28>
 8001364:	f3af 8000 	nop.w
 8001368:	4601      	mov	r1, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	60ba      	str	r2, [r7, #8]
 8001370:	b2ca      	uxtb	r2, r1
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	dbf0      	blt.n	8001364 <_read+0x12>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_write>:
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e009      	b.n	80013b2 <_write+0x26>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	60ba      	str	r2, [r7, #8]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f9f6 	bl	8000798 <__io_putchar>
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dbf1      	blt.n	800139e <_write+0x12>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_close>:
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_fstat>:
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	2300      	movs	r3, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_isatty>:
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	2301      	movs	r3, #1
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_lseek>:
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	2300      	movs	r3, #0
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_sbrk>:
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <_sbrk+0x5c>)
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <_sbrk+0x60>)
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <_sbrk+0x22>
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <_sbrk+0x64>)
 800144a:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <_sbrk+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	429a      	cmp	r2, r3
 800145a:	d207      	bcs.n	800146c <_sbrk+0x40>
 800145c:	f008 f91a 	bl	8009694 <__errno>
 8001460:	4603      	mov	r3, r0
 8001462:	220c      	movs	r2, #12
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	e009      	b.n	8001480 <_sbrk+0x54>
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <_sbrk+0x64>)
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	24050000 	.word	0x24050000
 800148c:	00000400 	.word	0x00000400
 8001490:	240003bc 	.word	0x240003bc
 8001494:	24000510 	.word	0x24000510

08001498 <SystemInit>:
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
 800149c:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <SystemInit+0x100>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001598 <SystemInit+0x100>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80014ac:	4b3b      	ldr	r3, [pc, #236]	@ (800159c <SystemInit+0x104>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	2b06      	cmp	r3, #6
 80014b6:	d807      	bhi.n	80014c8 <SystemInit+0x30>
 80014b8:	4b38      	ldr	r3, [pc, #224]	@ (800159c <SystemInit+0x104>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 030f 	bic.w	r3, r3, #15
 80014c0:	4a36      	ldr	r2, [pc, #216]	@ (800159c <SystemInit+0x104>)
 80014c2:	f043 0307 	orr.w	r3, r3, #7
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b35      	ldr	r3, [pc, #212]	@ (80015a0 <SystemInit+0x108>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a34      	ldr	r2, [pc, #208]	@ (80015a0 <SystemInit+0x108>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <SystemInit+0x108>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
 80014da:	4b31      	ldr	r3, [pc, #196]	@ (80015a0 <SystemInit+0x108>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4930      	ldr	r1, [pc, #192]	@ (80015a0 <SystemInit+0x108>)
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <SystemInit+0x10c>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
 80014e6:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <SystemInit+0x104>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <SystemInit+0x6a>
 80014f2:	4b2a      	ldr	r3, [pc, #168]	@ (800159c <SystemInit+0x104>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 030f 	bic.w	r3, r3, #15
 80014fa:	4a28      	ldr	r2, [pc, #160]	@ (800159c <SystemInit+0x104>)
 80014fc:	f043 0307 	orr.w	r3, r3, #7
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <SystemInit+0x108>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
 8001508:	4b25      	ldr	r3, [pc, #148]	@ (80015a0 <SystemInit+0x108>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <SystemInit+0x108>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
 8001514:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <SystemInit+0x108>)
 8001516:	4a24      	ldr	r2, [pc, #144]	@ (80015a8 <SystemInit+0x110>)
 8001518:	629a      	str	r2, [r3, #40]	@ 0x28
 800151a:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <SystemInit+0x108>)
 800151c:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <SystemInit+0x114>)
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <SystemInit+0x108>)
 8001522:	4a23      	ldr	r2, [pc, #140]	@ (80015b0 <SystemInit+0x118>)
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30
 8001526:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <SystemInit+0x108>)
 8001528:	2200      	movs	r2, #0
 800152a:	635a      	str	r2, [r3, #52]	@ 0x34
 800152c:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <SystemInit+0x108>)
 800152e:	4a20      	ldr	r2, [pc, #128]	@ (80015b0 <SystemInit+0x118>)
 8001530:	639a      	str	r2, [r3, #56]	@ 0x38
 8001532:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <SystemInit+0x108>)
 8001534:	2200      	movs	r2, #0
 8001536:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <SystemInit+0x108>)
 800153a:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <SystemInit+0x118>)
 800153c:	641a      	str	r2, [r3, #64]	@ 0x40
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <SystemInit+0x108>)
 8001540:	2200      	movs	r2, #0
 8001542:	645a      	str	r2, [r3, #68]	@ 0x44
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <SystemInit+0x108>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <SystemInit+0x108>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <SystemInit+0x108>)
 8001552:	2200      	movs	r2, #0
 8001554:	661a      	str	r2, [r3, #96]	@ 0x60
 8001556:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <SystemInit+0x108>)
 8001558:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800155c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d113      	bne.n	800158c <SystemInit+0xf4>
 8001564:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <SystemInit+0x108>)
 8001566:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800156a:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <SystemInit+0x108>)
 800156c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001570:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <SystemInit+0x11c>)
 8001576:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <SystemInit+0x108>)
 800157e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <SystemInit+0x108>)
 8001584:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001588:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	52002000 	.word	0x52002000
 80015a0:	58024400 	.word	0x58024400
 80015a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015a8:	02020200 	.word	0x02020200
 80015ac:	01ff0000 	.word	0x01ff0000
 80015b0:	01010280 	.word	0x01010280
 80015b4:	52004000 	.word	0x52004000

080015b8 <ExitRun0Mode>:
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <ExitRun0Mode+0x2c>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <ExitRun0Mode+0x2c>)
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	60d3      	str	r3, [r2, #12]
 80015c8:	bf00      	nop
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <ExitRun0Mode+0x2c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f9      	beq.n	80015ca <ExitRun0Mode+0x12>
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	58024800 	.word	0x58024800

080015e8 <Reset_Handler>:
 80015e8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001624 <LoopFillZerobss+0xe>
 80015ec:	f7ff ffe4 	bl	80015b8 <ExitRun0Mode>
 80015f0:	f7ff ff52 	bl	8001498 <SystemInit>
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <LoopFillZerobss+0x12>)
 80015f6:	490d      	ldr	r1, [pc, #52]	@ (800162c <LoopFillZerobss+0x16>)
 80015f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001630 <LoopFillZerobss+0x1a>)
 80015fa:	2300      	movs	r3, #0
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:
 80015fe:	58d4      	ldr	r4, [r2, r3]
 8001600:	50c4      	str	r4, [r0, r3]
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:
 8001604:	18c4      	adds	r4, r0, r3
 8001606:	428c      	cmp	r4, r1
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <LoopFillZerobss+0x1e>)
 800160c:	4c0a      	ldr	r4, [pc, #40]	@ (8001638 <LoopFillZerobss+0x22>)
 800160e:	2300      	movs	r3, #0
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:
 8001616:	42a2      	cmp	r2, r4
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>
 800161a:	f008 f841 	bl	80096a0 <__libc_init_array>
 800161e:	f7ff f8cd 	bl	80007bc <main>
 8001622:	4770      	bx	lr
 8001624:	24050000 	.word	0x24050000
 8001628:	24000000 	.word	0x24000000
 800162c:	240001d8 	.word	0x240001d8
 8001630:	0800b918 	.word	0x0800b918
 8001634:	240001d8 	.word	0x240001d8
 8001638:	24000510 	.word	0x24000510

0800163c <ADC3_IRQHandler>:
 800163c:	e7fe      	b.n	800163c <ADC3_IRQHandler>
	...

08001640 <HAL_Init>:
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	2003      	movs	r0, #3
 8001648:	f000 f980 	bl	800194c <HAL_NVIC_SetPriorityGrouping>
 800164c:	f002 fbe2 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_Init+0x68>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	4913      	ldr	r1, [pc, #76]	@ (80016ac <HAL_Init+0x6c>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <HAL_Init+0x68>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <HAL_Init+0x6c>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <HAL_Init+0x70>)
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4a0b      	ldr	r2, [pc, #44]	@ (80016b4 <HAL_Init+0x74>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	200f      	movs	r0, #15
 800168c:	f000 f814 	bl	80016b8 <HAL_InitTick>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_Init+0x5a>
 8001696:	2301      	movs	r3, #1
 8001698:	e002      	b.n	80016a0 <HAL_Init+0x60>
 800169a:	f7ff fc35 	bl	8000f08 <HAL_MspInit>
 800169e:	2300      	movs	r3, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	58024400 	.word	0x58024400
 80016ac:	0800b544 	.word	0x0800b544
 80016b0:	24000004 	.word	0x24000004
 80016b4:	24000000 	.word	0x24000000

080016b8 <HAL_InitTick>:
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_InitTick+0x60>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_InitTick+0x14>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e021      	b.n	8001710 <HAL_InitTick+0x58>
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <HAL_InitTick+0x64>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_InitTick+0x60>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f965 	bl	80019b2 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x3a>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x58>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x56>
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f92f 	bl	8001962 <HAL_NVIC_SetPriority>
 8001704:	4a06      	ldr	r2, [pc, #24]	@ (8001720 <HAL_InitTick+0x68>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x58>
 800170e:	2301      	movs	r3, #1
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2400000c 	.word	0x2400000c
 800171c:	24000000 	.word	0x24000000
 8001720:	24000008 	.word	0x24000008

08001724 <HAL_IncTick>:
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2400000c 	.word	0x2400000c
 8001748:	240003c0 	.word	0x240003c0

0800174c <HAL_GetTick>:
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
 8001750:	4b03      	ldr	r3, [pc, #12]	@ (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	240003c0 	.word	0x240003c0

08001764 <HAL_Delay>:
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
 800177e:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2400000c 	.word	0x2400000c

080017ac <__NVIC_SetPriorityGrouping>:
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <__NVIC_SetPriorityGrouping+0x40>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <__NVIC_SetPriorityGrouping+0x40>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	05fa0000 	.word	0x05fa0000

080017f4 <__NVIC_GetPriorityGrouping>:
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
 800181a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	@ (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	80fb      	strh	r3, [r7, #6]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	@ (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	@ (800189c <__NVIC_SetPriority+0x50>)
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	@ 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
 80018f8:	4313      	orrs	r3, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	@ 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	2300      	movs	r3, #0
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	81fb      	strh	r3, [r7, #14]
 8001970:	f7ff ff40 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff90 	bl	80018a0 <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5f 	bl	800184c <__NVIC_SetPriority>
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	80fb      	strh	r3, [r7, #6]
 80019a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff33 	bl	8001810 <__NVIC_EnableIRQ>
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa4 	bl	8001908 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_MPU_Disable>:
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	f3bf 8f5f 	dmb	sy
 80019d4:	bf00      	nop
 80019d6:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <HAL_MPU_Disable+0x28>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	4a06      	ldr	r2, [pc, #24]	@ (80019f4 <HAL_MPU_Disable+0x28>)
 80019dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e0:	6253      	str	r3, [r2, #36]	@ 0x24
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_MPU_Disable+0x2c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00
 80019f8:	e000ed90 	.word	0xe000ed90

080019fc <HAL_MPU_Enable>:
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <HAL_MPU_Enable+0x38>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_MPU_Enable+0x3c>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	4a09      	ldr	r2, [pc, #36]	@ (8001a38 <HAL_MPU_Enable+0x3c>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a18:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a1a:	f3bf 8f4f 	dsb	sy
 8001a1e:	bf00      	nop
 8001a20:	f3bf 8f6f 	isb	sy
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed90 	.word	0xe000ed90
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <HAL_MPU_ConfigRegion>:
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	785a      	ldrb	r2, [r3, #1]
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <HAL_MPU_ConfigRegion+0x7c>)
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <HAL_MPU_ConfigRegion+0x7c>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	4a19      	ldr	r2, [pc, #100]	@ (8001ab8 <HAL_MPU_ConfigRegion+0x7c>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6113      	str	r3, [r2, #16]
 8001a58:	4a17      	ldr	r2, [pc, #92]	@ (8001ab8 <HAL_MPU_ConfigRegion+0x7c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	60d3      	str	r3, [r2, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7b1b      	ldrb	r3, [r3, #12]
 8001a64:	071a      	lsls	r2, r3, #28
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7adb      	ldrb	r3, [r3, #11]
 8001a6a:	061b      	lsls	r3, r3, #24
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7a9b      	ldrb	r3, [r3, #10]
 8001a72:	04db      	lsls	r3, r3, #19
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7b5b      	ldrb	r3, [r3, #13]
 8001a7a:	049b      	lsls	r3, r3, #18
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7b9b      	ldrb	r3, [r3, #14]
 8001a82:	045b      	lsls	r3, r3, #17
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7bdb      	ldrb	r3, [r3, #15]
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7a5b      	ldrb	r3, [r3, #9]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7a1b      	ldrb	r3, [r3, #8]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4a04      	ldr	r2, [pc, #16]	@ (8001ab8 <HAL_MPU_ConfigRegion+0x7c>)
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	6113      	str	r3, [r2, #16]
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed90 	.word	0xe000ed90

08001abc <HAL_DMA_Abort>:
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	f7ff fe42 	bl	800174c <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Abort+0x18>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e2dc      	b.n	800208e <HAL_DMA_Abort+0x5d2>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d008      	beq.n	8001af2 <HAL_DMA_Abort+0x36>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2280      	movs	r2, #128	@ 0x80
 8001ae4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001aee:	2301      	movs	r3, #1
 8001af0:	e2cd      	b.n	800208e <HAL_DMA_Abort+0x5d2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a76      	ldr	r2, [pc, #472]	@ (8001cd0 <HAL_DMA_Abort+0x214>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04a      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a74      	ldr	r2, [pc, #464]	@ (8001cd4 <HAL_DMA_Abort+0x218>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d045      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a73      	ldr	r2, [pc, #460]	@ (8001cd8 <HAL_DMA_Abort+0x21c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d040      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a71      	ldr	r2, [pc, #452]	@ (8001cdc <HAL_DMA_Abort+0x220>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d03b      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a70      	ldr	r2, [pc, #448]	@ (8001ce0 <HAL_DMA_Abort+0x224>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d036      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce4 <HAL_DMA_Abort+0x228>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d031      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6d      	ldr	r2, [pc, #436]	@ (8001ce8 <HAL_DMA_Abort+0x22c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d02c      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a6b      	ldr	r2, [pc, #428]	@ (8001cec <HAL_DMA_Abort+0x230>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d027      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf0 <HAL_DMA_Abort+0x234>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a68      	ldr	r2, [pc, #416]	@ (8001cf4 <HAL_DMA_Abort+0x238>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01d      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a67      	ldr	r2, [pc, #412]	@ (8001cf8 <HAL_DMA_Abort+0x23c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d018      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a65      	ldr	r2, [pc, #404]	@ (8001cfc <HAL_DMA_Abort+0x240>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a64      	ldr	r2, [pc, #400]	@ (8001d00 <HAL_DMA_Abort+0x244>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00e      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a62      	ldr	r2, [pc, #392]	@ (8001d04 <HAL_DMA_Abort+0x248>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a61      	ldr	r2, [pc, #388]	@ (8001d08 <HAL_DMA_Abort+0x24c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5f      	ldr	r2, [pc, #380]	@ (8001d0c <HAL_DMA_Abort+0x250>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_DMA_Abort+0xda>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_DMA_Abort+0xdc>
 8001b96:	2300      	movs	r3, #0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_DMA_Abort+0x108>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 021e 	bic.w	r2, r2, #30
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bba:	615a      	str	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e00a      	b.n	8001bda <HAL_DMA_Abort+0x11e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020e 	bic.w	r2, r2, #14
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a3c      	ldr	r2, [pc, #240]	@ (8001cd0 <HAL_DMA_Abort+0x214>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d072      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a3a      	ldr	r2, [pc, #232]	@ (8001cd4 <HAL_DMA_Abort+0x218>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d06d      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a39      	ldr	r2, [pc, #228]	@ (8001cd8 <HAL_DMA_Abort+0x21c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d068      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a37      	ldr	r2, [pc, #220]	@ (8001cdc <HAL_DMA_Abort+0x220>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d063      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a36      	ldr	r2, [pc, #216]	@ (8001ce0 <HAL_DMA_Abort+0x224>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d05e      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a34      	ldr	r2, [pc, #208]	@ (8001ce4 <HAL_DMA_Abort+0x228>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d059      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ce8 <HAL_DMA_Abort+0x22c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d054      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a31      	ldr	r2, [pc, #196]	@ (8001cec <HAL_DMA_Abort+0x230>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d04f      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a30      	ldr	r2, [pc, #192]	@ (8001cf0 <HAL_DMA_Abort+0x234>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d04a      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf4 <HAL_DMA_Abort+0x238>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d045      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf8 <HAL_DMA_Abort+0x23c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d040      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cfc <HAL_DMA_Abort+0x240>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d03b      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2a      	ldr	r2, [pc, #168]	@ (8001d00 <HAL_DMA_Abort+0x244>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d036      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a28      	ldr	r2, [pc, #160]	@ (8001d04 <HAL_DMA_Abort+0x248>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d031      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a27      	ldr	r2, [pc, #156]	@ (8001d08 <HAL_DMA_Abort+0x24c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d02c      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a25      	ldr	r2, [pc, #148]	@ (8001d0c <HAL_DMA_Abort+0x250>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d027      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a24      	ldr	r2, [pc, #144]	@ (8001d10 <HAL_DMA_Abort+0x254>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d022      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a22      	ldr	r2, [pc, #136]	@ (8001d14 <HAL_DMA_Abort+0x258>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01d      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a21      	ldr	r2, [pc, #132]	@ (8001d18 <HAL_DMA_Abort+0x25c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d018      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d1c <HAL_DMA_Abort+0x260>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d20 <HAL_DMA_Abort+0x264>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d24 <HAL_DMA_Abort+0x268>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d009      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1b      	ldr	r2, [pc, #108]	@ (8001d28 <HAL_DMA_Abort+0x26c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	@ (8001d2c <HAL_DMA_Abort+0x270>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d132      	bne.n	8001d30 <HAL_DMA_Abort+0x274>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e031      	b.n	8001d32 <HAL_DMA_Abort+0x276>
 8001cce:	bf00      	nop
 8001cd0:	40020010 	.word	0x40020010
 8001cd4:	40020028 	.word	0x40020028
 8001cd8:	40020040 	.word	0x40020040
 8001cdc:	40020058 	.word	0x40020058
 8001ce0:	40020070 	.word	0x40020070
 8001ce4:	40020088 	.word	0x40020088
 8001ce8:	400200a0 	.word	0x400200a0
 8001cec:	400200b8 	.word	0x400200b8
 8001cf0:	40020410 	.word	0x40020410
 8001cf4:	40020428 	.word	0x40020428
 8001cf8:	40020440 	.word	0x40020440
 8001cfc:	40020458 	.word	0x40020458
 8001d00:	40020470 	.word	0x40020470
 8001d04:	40020488 	.word	0x40020488
 8001d08:	400204a0 	.word	0x400204a0
 8001d0c:	400204b8 	.word	0x400204b8
 8001d10:	58025408 	.word	0x58025408
 8001d14:	5802541c 	.word	0x5802541c
 8001d18:	58025430 	.word	0x58025430
 8001d1c:	58025444 	.word	0x58025444
 8001d20:	58025458 	.word	0x58025458
 8001d24:	5802546c 	.word	0x5802546c
 8001d28:	58025480 	.word	0x58025480
 8001d2c:	58025494 	.word	0x58025494
 8001d30:	2300      	movs	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_DMA_Abort+0x28a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8001f00 <HAL_DMA_Abort+0x444>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d04a      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6b      	ldr	r2, [pc, #428]	@ (8001f04 <HAL_DMA_Abort+0x448>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d045      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a6a      	ldr	r2, [pc, #424]	@ (8001f08 <HAL_DMA_Abort+0x44c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d040      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a68      	ldr	r2, [pc, #416]	@ (8001f0c <HAL_DMA_Abort+0x450>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d03b      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a67      	ldr	r2, [pc, #412]	@ (8001f10 <HAL_DMA_Abort+0x454>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d036      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a65      	ldr	r2, [pc, #404]	@ (8001f14 <HAL_DMA_Abort+0x458>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d031      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a64      	ldr	r2, [pc, #400]	@ (8001f18 <HAL_DMA_Abort+0x45c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d02c      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a62      	ldr	r2, [pc, #392]	@ (8001f1c <HAL_DMA_Abort+0x460>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d027      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a61      	ldr	r2, [pc, #388]	@ (8001f20 <HAL_DMA_Abort+0x464>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a5f      	ldr	r2, [pc, #380]	@ (8001f24 <HAL_DMA_Abort+0x468>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01d      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a5e      	ldr	r2, [pc, #376]	@ (8001f28 <HAL_DMA_Abort+0x46c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5c      	ldr	r2, [pc, #368]	@ (8001f2c <HAL_DMA_Abort+0x470>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f30 <HAL_DMA_Abort+0x474>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00e      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a59      	ldr	r2, [pc, #356]	@ (8001f34 <HAL_DMA_Abort+0x478>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a58      	ldr	r2, [pc, #352]	@ (8001f38 <HAL_DMA_Abort+0x47c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a56      	ldr	r2, [pc, #344]	@ (8001f3c <HAL_DMA_Abort+0x480>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d108      	bne.n	8001df8 <HAL_DMA_Abort+0x33c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e007      	b.n	8001e08 <HAL_DMA_Abort+0x34c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e013      	b.n	8001e32 <HAL_DMA_Abort+0x376>
 8001e0a:	f7ff fc9f 	bl	800174c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d90c      	bls.n	8001e32 <HAL_DMA_Abort+0x376>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2203      	movs	r2, #3
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e12d      	b.n	800208e <HAL_DMA_Abort+0x5d2>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1e5      	bne.n	8001e0a <HAL_DMA_Abort+0x34e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a2f      	ldr	r2, [pc, #188]	@ (8001f00 <HAL_DMA_Abort+0x444>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d04a      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f04 <HAL_DMA_Abort+0x448>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d045      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a2c      	ldr	r2, [pc, #176]	@ (8001f08 <HAL_DMA_Abort+0x44c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d040      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2a      	ldr	r2, [pc, #168]	@ (8001f0c <HAL_DMA_Abort+0x450>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d03b      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a29      	ldr	r2, [pc, #164]	@ (8001f10 <HAL_DMA_Abort+0x454>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d036      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_DMA_Abort+0x458>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d031      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a26      	ldr	r2, [pc, #152]	@ (8001f18 <HAL_DMA_Abort+0x45c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d02c      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a24      	ldr	r2, [pc, #144]	@ (8001f1c <HAL_DMA_Abort+0x460>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d027      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <HAL_DMA_Abort+0x464>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d022      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a21      	ldr	r2, [pc, #132]	@ (8001f24 <HAL_DMA_Abort+0x468>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01d      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a20      	ldr	r2, [pc, #128]	@ (8001f28 <HAL_DMA_Abort+0x46c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d018      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f2c <HAL_DMA_Abort+0x470>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	@ (8001f30 <HAL_DMA_Abort+0x474>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00e      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f34 <HAL_DMA_Abort+0x478>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d009      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1a      	ldr	r2, [pc, #104]	@ (8001f38 <HAL_DMA_Abort+0x47c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d004      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a18      	ldr	r2, [pc, #96]	@ (8001f3c <HAL_DMA_Abort+0x480>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_DMA_Abort+0x426>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_DMA_Abort+0x428>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d02b      	beq.n	8001f40 <HAL_DMA_Abort+0x484>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	223f      	movs	r2, #63	@ 0x3f
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	e02a      	b.n	8001f56 <HAL_DMA_Abort+0x49a>
 8001f00:	40020010 	.word	0x40020010
 8001f04:	40020028 	.word	0x40020028
 8001f08:	40020040 	.word	0x40020040
 8001f0c:	40020058 	.word	0x40020058
 8001f10:	40020070 	.word	0x40020070
 8001f14:	40020088 	.word	0x40020088
 8001f18:	400200a0 	.word	0x400200a0
 8001f1c:	400200b8 	.word	0x400200b8
 8001f20:	40020410 	.word	0x40020410
 8001f24:	40020428 	.word	0x40020428
 8001f28:	40020440 	.word	0x40020440
 8001f2c:	40020458 	.word	0x40020458
 8001f30:	40020470 	.word	0x40020470
 8001f34:	40020488 	.word	0x40020488
 8001f38:	400204a0 	.word	0x400204a0
 8001f3c:	400204b8 	.word	0x400204b8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2201      	movs	r2, #1
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a4f      	ldr	r2, [pc, #316]	@ (8002098 <HAL_DMA_Abort+0x5dc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d072      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a4d      	ldr	r2, [pc, #308]	@ (800209c <HAL_DMA_Abort+0x5e0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d06d      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a4c      	ldr	r2, [pc, #304]	@ (80020a0 <HAL_DMA_Abort+0x5e4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d068      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4a      	ldr	r2, [pc, #296]	@ (80020a4 <HAL_DMA_Abort+0x5e8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d063      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a49      	ldr	r2, [pc, #292]	@ (80020a8 <HAL_DMA_Abort+0x5ec>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d05e      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a47      	ldr	r2, [pc, #284]	@ (80020ac <HAL_DMA_Abort+0x5f0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d059      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a46      	ldr	r2, [pc, #280]	@ (80020b0 <HAL_DMA_Abort+0x5f4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d054      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a44      	ldr	r2, [pc, #272]	@ (80020b4 <HAL_DMA_Abort+0x5f8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d04f      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a43      	ldr	r2, [pc, #268]	@ (80020b8 <HAL_DMA_Abort+0x5fc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d04a      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a41      	ldr	r2, [pc, #260]	@ (80020bc <HAL_DMA_Abort+0x600>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d045      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	@ (80020c0 <HAL_DMA_Abort+0x604>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d040      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80020c4 <HAL_DMA_Abort+0x608>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d03b      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a3d      	ldr	r2, [pc, #244]	@ (80020c8 <HAL_DMA_Abort+0x60c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d036      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80020cc <HAL_DMA_Abort+0x610>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d031      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a3a      	ldr	r2, [pc, #232]	@ (80020d0 <HAL_DMA_Abort+0x614>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d02c      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a38      	ldr	r2, [pc, #224]	@ (80020d4 <HAL_DMA_Abort+0x618>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d027      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a37      	ldr	r2, [pc, #220]	@ (80020d8 <HAL_DMA_Abort+0x61c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d022      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a35      	ldr	r2, [pc, #212]	@ (80020dc <HAL_DMA_Abort+0x620>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01d      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a34      	ldr	r2, [pc, #208]	@ (80020e0 <HAL_DMA_Abort+0x624>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d018      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a32      	ldr	r2, [pc, #200]	@ (80020e4 <HAL_DMA_Abort+0x628>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a31      	ldr	r2, [pc, #196]	@ (80020e8 <HAL_DMA_Abort+0x62c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00e      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2f      	ldr	r2, [pc, #188]	@ (80020ec <HAL_DMA_Abort+0x630>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d009      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2e      	ldr	r2, [pc, #184]	@ (80020f0 <HAL_DMA_Abort+0x634>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d004      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2c      	ldr	r2, [pc, #176]	@ (80020f4 <HAL_DMA_Abort+0x638>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_DMA_Abort+0x58e>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_DMA_Abort+0x590>
 800204a:	2300      	movs	r3, #0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <HAL_DMA_Abort+0x5c0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_DMA_Abort+0x5c0>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800206c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800208c:	2300      	movs	r3, #0
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40020010 	.word	0x40020010
 800209c:	40020028 	.word	0x40020028
 80020a0:	40020040 	.word	0x40020040
 80020a4:	40020058 	.word	0x40020058
 80020a8:	40020070 	.word	0x40020070
 80020ac:	40020088 	.word	0x40020088
 80020b0:	400200a0 	.word	0x400200a0
 80020b4:	400200b8 	.word	0x400200b8
 80020b8:	40020410 	.word	0x40020410
 80020bc:	40020428 	.word	0x40020428
 80020c0:	40020440 	.word	0x40020440
 80020c4:	40020458 	.word	0x40020458
 80020c8:	40020470 	.word	0x40020470
 80020cc:	40020488 	.word	0x40020488
 80020d0:	400204a0 	.word	0x400204a0
 80020d4:	400204b8 	.word	0x400204b8
 80020d8:	58025408 	.word	0x58025408
 80020dc:	5802541c 	.word	0x5802541c
 80020e0:	58025430 	.word	0x58025430
 80020e4:	58025444 	.word	0x58025444
 80020e8:	58025458 	.word	0x58025458
 80020ec:	5802546c 	.word	0x5802546c
 80020f0:	58025480 	.word	0x58025480
 80020f4:	58025494 	.word	0x58025494

080020f8 <HAL_DMA_Abort_IT>:
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_DMA_Abort_IT+0x12>
 8002106:	2301      	movs	r3, #1
 8002108:	e237      	b.n	800257a <HAL_DMA_Abort_IT+0x482>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_Abort_IT+0x28>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2280      	movs	r2, #128	@ 0x80
 800211a:	655a      	str	r2, [r3, #84]	@ 0x54
 800211c:	2301      	movs	r3, #1
 800211e:	e22c      	b.n	800257a <HAL_DMA_Abort_IT+0x482>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a5c      	ldr	r2, [pc, #368]	@ (8002298 <HAL_DMA_Abort_IT+0x1a0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d04a      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5b      	ldr	r2, [pc, #364]	@ (800229c <HAL_DMA_Abort_IT+0x1a4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d045      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a59      	ldr	r2, [pc, #356]	@ (80022a0 <HAL_DMA_Abort_IT+0x1a8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d040      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a58      	ldr	r2, [pc, #352]	@ (80022a4 <HAL_DMA_Abort_IT+0x1ac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d03b      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a56      	ldr	r2, [pc, #344]	@ (80022a8 <HAL_DMA_Abort_IT+0x1b0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d036      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a55      	ldr	r2, [pc, #340]	@ (80022ac <HAL_DMA_Abort_IT+0x1b4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d031      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a53      	ldr	r2, [pc, #332]	@ (80022b0 <HAL_DMA_Abort_IT+0x1b8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02c      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a52      	ldr	r2, [pc, #328]	@ (80022b4 <HAL_DMA_Abort_IT+0x1bc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d027      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a50      	ldr	r2, [pc, #320]	@ (80022b8 <HAL_DMA_Abort_IT+0x1c0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d022      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a4f      	ldr	r2, [pc, #316]	@ (80022bc <HAL_DMA_Abort_IT+0x1c4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d01d      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a4d      	ldr	r2, [pc, #308]	@ (80022c0 <HAL_DMA_Abort_IT+0x1c8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d018      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a4c      	ldr	r2, [pc, #304]	@ (80022c4 <HAL_DMA_Abort_IT+0x1cc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a4a      	ldr	r2, [pc, #296]	@ (80022c8 <HAL_DMA_Abort_IT+0x1d0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00e      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a49      	ldr	r2, [pc, #292]	@ (80022cc <HAL_DMA_Abort_IT+0x1d4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a47      	ldr	r2, [pc, #284]	@ (80022d0 <HAL_DMA_Abort_IT+0x1d8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a46      	ldr	r2, [pc, #280]	@ (80022d4 <HAL_DMA_Abort_IT+0x1dc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_DMA_Abort_IT+0xcc>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_DMA_Abort_IT+0xce>
 80021c4:	2300      	movs	r3, #0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8086 	beq.w	80022d8 <HAL_DMA_Abort_IT+0x1e0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2204      	movs	r2, #4
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002298 <HAL_DMA_Abort_IT+0x1a0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04a      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2e      	ldr	r2, [pc, #184]	@ (800229c <HAL_DMA_Abort_IT+0x1a4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d045      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2c      	ldr	r2, [pc, #176]	@ (80022a0 <HAL_DMA_Abort_IT+0x1a8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d040      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2b      	ldr	r2, [pc, #172]	@ (80022a4 <HAL_DMA_Abort_IT+0x1ac>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d03b      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a29      	ldr	r2, [pc, #164]	@ (80022a8 <HAL_DMA_Abort_IT+0x1b0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d036      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a28      	ldr	r2, [pc, #160]	@ (80022ac <HAL_DMA_Abort_IT+0x1b4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d031      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a26      	ldr	r2, [pc, #152]	@ (80022b0 <HAL_DMA_Abort_IT+0x1b8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02c      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a25      	ldr	r2, [pc, #148]	@ (80022b4 <HAL_DMA_Abort_IT+0x1bc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d027      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a23      	ldr	r2, [pc, #140]	@ (80022b8 <HAL_DMA_Abort_IT+0x1c0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a22      	ldr	r2, [pc, #136]	@ (80022bc <HAL_DMA_Abort_IT+0x1c4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01d      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a20      	ldr	r2, [pc, #128]	@ (80022c0 <HAL_DMA_Abort_IT+0x1c8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1f      	ldr	r2, [pc, #124]	@ (80022c4 <HAL_DMA_Abort_IT+0x1cc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1d      	ldr	r2, [pc, #116]	@ (80022c8 <HAL_DMA_Abort_IT+0x1d0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1c      	ldr	r2, [pc, #112]	@ (80022cc <HAL_DMA_Abort_IT+0x1d4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <HAL_DMA_Abort_IT+0x1d8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <HAL_DMA_Abort_IT+0x1dc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <HAL_DMA_Abort_IT+0x18e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e178      	b.n	8002578 <HAL_DMA_Abort_IT+0x480>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e16f      	b.n	8002578 <HAL_DMA_Abort_IT+0x480>
 8002298:	40020010 	.word	0x40020010
 800229c:	40020028 	.word	0x40020028
 80022a0:	40020040 	.word	0x40020040
 80022a4:	40020058 	.word	0x40020058
 80022a8:	40020070 	.word	0x40020070
 80022ac:	40020088 	.word	0x40020088
 80022b0:	400200a0 	.word	0x400200a0
 80022b4:	400200b8 	.word	0x400200b8
 80022b8:	40020410 	.word	0x40020410
 80022bc:	40020428 	.word	0x40020428
 80022c0:	40020440 	.word	0x40020440
 80022c4:	40020458 	.word	0x40020458
 80022c8:	40020470 	.word	0x40020470
 80022cc:	40020488 	.word	0x40020488
 80022d0:	400204a0 	.word	0x400204a0
 80022d4:	400204b8 	.word	0x400204b8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 020e 	bic.w	r2, r2, #14
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6c      	ldr	r2, [pc, #432]	@ (80024a0 <HAL_DMA_Abort_IT+0x3a8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d04a      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6b      	ldr	r2, [pc, #428]	@ (80024a4 <HAL_DMA_Abort_IT+0x3ac>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d045      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a69      	ldr	r2, [pc, #420]	@ (80024a8 <HAL_DMA_Abort_IT+0x3b0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d040      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a68      	ldr	r2, [pc, #416]	@ (80024ac <HAL_DMA_Abort_IT+0x3b4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d03b      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a66      	ldr	r2, [pc, #408]	@ (80024b0 <HAL_DMA_Abort_IT+0x3b8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d036      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a65      	ldr	r2, [pc, #404]	@ (80024b4 <HAL_DMA_Abort_IT+0x3bc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d031      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a63      	ldr	r2, [pc, #396]	@ (80024b8 <HAL_DMA_Abort_IT+0x3c0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d02c      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a62      	ldr	r2, [pc, #392]	@ (80024bc <HAL_DMA_Abort_IT+0x3c4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d027      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a60      	ldr	r2, [pc, #384]	@ (80024c0 <HAL_DMA_Abort_IT+0x3c8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d022      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a5f      	ldr	r2, [pc, #380]	@ (80024c4 <HAL_DMA_Abort_IT+0x3cc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d01d      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5d      	ldr	r2, [pc, #372]	@ (80024c8 <HAL_DMA_Abort_IT+0x3d0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d018      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5c      	ldr	r2, [pc, #368]	@ (80024cc <HAL_DMA_Abort_IT+0x3d4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5a      	ldr	r2, [pc, #360]	@ (80024d0 <HAL_DMA_Abort_IT+0x3d8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00e      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a59      	ldr	r2, [pc, #356]	@ (80024d4 <HAL_DMA_Abort_IT+0x3dc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d009      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a57      	ldr	r2, [pc, #348]	@ (80024d8 <HAL_DMA_Abort_IT+0x3e0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a56      	ldr	r2, [pc, #344]	@ (80024dc <HAL_DMA_Abort_IT+0x3e4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d108      	bne.n	800239a <HAL_DMA_Abort_IT+0x2a2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e007      	b.n	80023aa <HAL_DMA_Abort_IT+0x2b2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a3c      	ldr	r2, [pc, #240]	@ (80024a0 <HAL_DMA_Abort_IT+0x3a8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d072      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3a      	ldr	r2, [pc, #232]	@ (80024a4 <HAL_DMA_Abort_IT+0x3ac>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d06d      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a39      	ldr	r2, [pc, #228]	@ (80024a8 <HAL_DMA_Abort_IT+0x3b0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d068      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a37      	ldr	r2, [pc, #220]	@ (80024ac <HAL_DMA_Abort_IT+0x3b4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d063      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a36      	ldr	r2, [pc, #216]	@ (80024b0 <HAL_DMA_Abort_IT+0x3b8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d05e      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a34      	ldr	r2, [pc, #208]	@ (80024b4 <HAL_DMA_Abort_IT+0x3bc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d059      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a33      	ldr	r2, [pc, #204]	@ (80024b8 <HAL_DMA_Abort_IT+0x3c0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d054      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a31      	ldr	r2, [pc, #196]	@ (80024bc <HAL_DMA_Abort_IT+0x3c4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d04f      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a30      	ldr	r2, [pc, #192]	@ (80024c0 <HAL_DMA_Abort_IT+0x3c8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04a      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2e      	ldr	r2, [pc, #184]	@ (80024c4 <HAL_DMA_Abort_IT+0x3cc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d045      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2d      	ldr	r2, [pc, #180]	@ (80024c8 <HAL_DMA_Abort_IT+0x3d0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d040      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2b      	ldr	r2, [pc, #172]	@ (80024cc <HAL_DMA_Abort_IT+0x3d4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d03b      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2a      	ldr	r2, [pc, #168]	@ (80024d0 <HAL_DMA_Abort_IT+0x3d8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d036      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a28      	ldr	r2, [pc, #160]	@ (80024d4 <HAL_DMA_Abort_IT+0x3dc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a27      	ldr	r2, [pc, #156]	@ (80024d8 <HAL_DMA_Abort_IT+0x3e0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d02c      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a25      	ldr	r2, [pc, #148]	@ (80024dc <HAL_DMA_Abort_IT+0x3e4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d027      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a24      	ldr	r2, [pc, #144]	@ (80024e0 <HAL_DMA_Abort_IT+0x3e8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d022      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a22      	ldr	r2, [pc, #136]	@ (80024e4 <HAL_DMA_Abort_IT+0x3ec>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01d      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a21      	ldr	r2, [pc, #132]	@ (80024e8 <HAL_DMA_Abort_IT+0x3f0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d018      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1f      	ldr	r2, [pc, #124]	@ (80024ec <HAL_DMA_Abort_IT+0x3f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1e      	ldr	r2, [pc, #120]	@ (80024f0 <HAL_DMA_Abort_IT+0x3f8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00e      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1c      	ldr	r2, [pc, #112]	@ (80024f4 <HAL_DMA_Abort_IT+0x3fc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1b      	ldr	r2, [pc, #108]	@ (80024f8 <HAL_DMA_Abort_IT+0x400>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a19      	ldr	r2, [pc, #100]	@ (80024fc <HAL_DMA_Abort_IT+0x404>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d132      	bne.n	8002500 <HAL_DMA_Abort_IT+0x408>
 800249a:	2301      	movs	r3, #1
 800249c:	e031      	b.n	8002502 <HAL_DMA_Abort_IT+0x40a>
 800249e:	bf00      	nop
 80024a0:	40020010 	.word	0x40020010
 80024a4:	40020028 	.word	0x40020028
 80024a8:	40020040 	.word	0x40020040
 80024ac:	40020058 	.word	0x40020058
 80024b0:	40020070 	.word	0x40020070
 80024b4:	40020088 	.word	0x40020088
 80024b8:	400200a0 	.word	0x400200a0
 80024bc:	400200b8 	.word	0x400200b8
 80024c0:	40020410 	.word	0x40020410
 80024c4:	40020428 	.word	0x40020428
 80024c8:	40020440 	.word	0x40020440
 80024cc:	40020458 	.word	0x40020458
 80024d0:	40020470 	.word	0x40020470
 80024d4:	40020488 	.word	0x40020488
 80024d8:	400204a0 	.word	0x400204a0
 80024dc:	400204b8 	.word	0x400204b8
 80024e0:	58025408 	.word	0x58025408
 80024e4:	5802541c 	.word	0x5802541c
 80024e8:	58025430 	.word	0x58025430
 80024ec:	58025444 	.word	0x58025444
 80024f0:	58025458 	.word	0x58025458
 80024f4:	5802546c 	.word	0x5802546c
 80024f8:	58025480 	.word	0x58025480
 80024fc:	58025494 	.word	0x58025494
 8002500:	2300      	movs	r3, #0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d028      	beq.n	8002558 <HAL_DMA_Abort_IT+0x460>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002510:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2201      	movs	r2, #1
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <HAL_DMA_Abort_IT+0x460>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_Abort_IT+0x480>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
 8002578:	2300      	movs	r3, #0
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop

08002584 <HAL_GPIO_Init>:
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	@ 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	4b86      	ldr	r3, [pc, #536]	@ (80027ac <HAL_GPIO_Init+0x228>)
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e18c      	b.n	80028b2 <HAL_GPIO_Init+0x32e>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 817e 	beq.w	80028ac <HAL_GPIO_Init+0x328>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d005      	beq.n	80025c8 <HAL_GPIO_Init+0x44>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d130      	bne.n	800262a <HAL_GPIO_Init+0xa6>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	2201      	movs	r2, #1
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	f003 0201 	and.w	r2, r3, #1
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d017      	beq.n	8002666 <HAL_GPIO_Init+0xe2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d123      	bne.n	80026ba <HAL_GPIO_Init+0x136>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	69b9      	ldr	r1, [r7, #24]
 80026b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0203 	and.w	r2, r3, #3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80d8 	beq.w	80028ac <HAL_GPIO_Init+0x328>
 80026fc:	4b2c      	ldr	r3, [pc, #176]	@ (80027b0 <HAL_GPIO_Init+0x22c>)
 80026fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002702:	4a2b      	ldr	r2, [pc, #172]	@ (80027b0 <HAL_GPIO_Init+0x22c>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800270c:	4b28      	ldr	r3, [pc, #160]	@ (80027b0 <HAL_GPIO_Init+0x22c>)
 800270e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a26      	ldr	r2, [pc, #152]	@ (80027b4 <HAL_GPIO_Init+0x230>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1d      	ldr	r2, [pc, #116]	@ (80027b8 <HAL_GPIO_Init+0x234>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d04a      	beq.n	80027dc <HAL_GPIO_Init+0x258>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1c      	ldr	r2, [pc, #112]	@ (80027bc <HAL_GPIO_Init+0x238>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d02b      	beq.n	80027a6 <HAL_GPIO_Init+0x222>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1b      	ldr	r2, [pc, #108]	@ (80027c0 <HAL_GPIO_Init+0x23c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d025      	beq.n	80027a2 <HAL_GPIO_Init+0x21e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1a      	ldr	r2, [pc, #104]	@ (80027c4 <HAL_GPIO_Init+0x240>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01f      	beq.n	800279e <HAL_GPIO_Init+0x21a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a19      	ldr	r2, [pc, #100]	@ (80027c8 <HAL_GPIO_Init+0x244>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d019      	beq.n	800279a <HAL_GPIO_Init+0x216>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a18      	ldr	r2, [pc, #96]	@ (80027cc <HAL_GPIO_Init+0x248>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0x212>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a17      	ldr	r2, [pc, #92]	@ (80027d0 <HAL_GPIO_Init+0x24c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00d      	beq.n	8002792 <HAL_GPIO_Init+0x20e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a16      	ldr	r2, [pc, #88]	@ (80027d4 <HAL_GPIO_Init+0x250>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <HAL_GPIO_Init+0x20a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a15      	ldr	r2, [pc, #84]	@ (80027d8 <HAL_GPIO_Init+0x254>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d101      	bne.n	800278a <HAL_GPIO_Init+0x206>
 8002786:	2309      	movs	r3, #9
 8002788:	e029      	b.n	80027de <HAL_GPIO_Init+0x25a>
 800278a:	230a      	movs	r3, #10
 800278c:	e027      	b.n	80027de <HAL_GPIO_Init+0x25a>
 800278e:	2307      	movs	r3, #7
 8002790:	e025      	b.n	80027de <HAL_GPIO_Init+0x25a>
 8002792:	2306      	movs	r3, #6
 8002794:	e023      	b.n	80027de <HAL_GPIO_Init+0x25a>
 8002796:	2305      	movs	r3, #5
 8002798:	e021      	b.n	80027de <HAL_GPIO_Init+0x25a>
 800279a:	2304      	movs	r3, #4
 800279c:	e01f      	b.n	80027de <HAL_GPIO_Init+0x25a>
 800279e:	2303      	movs	r3, #3
 80027a0:	e01d      	b.n	80027de <HAL_GPIO_Init+0x25a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e01b      	b.n	80027de <HAL_GPIO_Init+0x25a>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e019      	b.n	80027de <HAL_GPIO_Init+0x25a>
 80027aa:	bf00      	nop
 80027ac:	58000080 	.word	0x58000080
 80027b0:	58024400 	.word	0x58024400
 80027b4:	58000400 	.word	0x58000400
 80027b8:	58020000 	.word	0x58020000
 80027bc:	58020400 	.word	0x58020400
 80027c0:	58020800 	.word	0x58020800
 80027c4:	58020c00 	.word	0x58020c00
 80027c8:	58021000 	.word	0x58021000
 80027cc:	58021400 	.word	0x58021400
 80027d0:	58021800 	.word	0x58021800
 80027d4:	58021c00 	.word	0x58021c00
 80027d8:	58022400 	.word	0x58022400
 80027dc:	2300      	movs	r3, #0
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	f002 0203 	and.w	r2, r2, #3
 80027e4:	0092      	lsls	r2, r2, #2
 80027e6:	4093      	lsls	r3, r2
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	4938      	ldr	r1, [pc, #224]	@ (80028d0 <HAL_GPIO_Init+0x34c>)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x29e>
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x2cc>
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	6053      	str	r3, [r2, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x2f8>
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x322>
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f47f ae6b 	bne.w	8002598 <HAL_GPIO_Init+0x14>
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	3724      	adds	r7, #36	@ 0x24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	58000400 	.word	0x58000400

080028d4 <HAL_GPIO_WritePin>:
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
 80028f0:	e003      	b.n	80028fa <HAL_GPIO_WritePin+0x26>
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_I2C_Init>:
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_I2C_Init+0x12>
 8002916:	2301      	movs	r3, #1
 8002918:	e08b      	b.n	8002a32 <HAL_I2C_Init+0x12a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_I2C_Init+0x2c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fb04 	bl	8000f3c <HAL_I2C_MspInit>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2224      	movs	r2, #36	@ 0x24
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002958:	611a      	str	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_I2C_Init+0x7a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	e006      	b.n	8002990 <HAL_I2C_Init+0x88>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d108      	bne.n	80029aa <HAL_I2C_Init+0xa2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	e007      	b.n	80029ba <HAL_I2C_Init+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a3c <HAL_I2C_Init+0x134>)
 80029c6:	430b      	orrs	r3, r1
 80029c8:	6053      	str	r3, [r2, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	ea42 0103 	orr.w	r1, r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	021a      	lsls	r2, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69d9      	ldr	r1, [r3, #28]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1a      	ldr	r2, [r3, #32]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a30:	2300      	movs	r3, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	02008000 	.word	0x02008000

08002a40 <HAL_I2C_Mem_Read>:
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	817b      	strh	r3, [r7, #10]
 8002a52:	460b      	mov	r3, r1
 8002a54:	813b      	strh	r3, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	f040 80fd 	bne.w	8002c62 <HAL_I2C_Mem_Read+0x222>
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_I2C_Mem_Read+0x34>
 8002a6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_I2C_Mem_Read+0x40>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0f1      	b.n	8002c64 <HAL_I2C_Mem_Read+0x224>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x4e>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0ea      	b.n	8002c64 <HAL_I2C_Mem_Read+0x224>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a96:	f7fe fe59 	bl	800174c <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2319      	movs	r3, #25
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f95b 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Mem_Read+0x78>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0d5      	b.n	8002c64 <HAL_I2C_Mem_Read+0x224>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2222      	movs	r2, #34	@ 0x22
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2240      	movs	r2, #64	@ 0x40
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ae0:	88f8      	ldrh	r0, [r7, #6]
 8002ae2:	893a      	ldrh	r2, [r7, #8]
 8002ae4:	8979      	ldrh	r1, [r7, #10]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	4603      	mov	r3, r0
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f8bf 	bl	8002c74 <I2C_RequestMemoryRead>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_I2C_Mem_Read+0xc8>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0ad      	b.n	8002c64 <HAL_I2C_Mem_Read+0x224>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2bff      	cmp	r3, #255	@ 0xff
 8002b10:	d90e      	bls.n	8002b30 <HAL_I2C_Mem_Read+0xf0>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	22ff      	movs	r2, #255	@ 0xff
 8002b16:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	8979      	ldrh	r1, [r7, #10]
 8002b20:	4b52      	ldr	r3, [pc, #328]	@ (8002c6c <HAL_I2C_Mem_Read+0x22c>)
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fadf 	bl	80030ec <I2C_TransferConfig>
 8002b2e:	e00f      	b.n	8002b50 <HAL_I2C_Mem_Read+0x110>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	8979      	ldrh	r1, [r7, #10]
 8002b42:	4b4a      	ldr	r3, [pc, #296]	@ (8002c6c <HAL_I2C_Mem_Read+0x22c>)
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 face 	bl	80030ec <I2C_TransferConfig>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	2200      	movs	r2, #0
 8002b58:	2104      	movs	r1, #4
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f902 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Mem_Read+0x12a>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07c      	b.n	8002c64 <HAL_I2C_Mem_Read+0x224>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d034      	beq.n	8002c10 <HAL_I2C_Mem_Read+0x1d0>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d130      	bne.n	8002c10 <HAL_I2C_Mem_Read+0x1d0>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f8d3 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_I2C_Mem_Read+0x188>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e04d      	b.n	8002c64 <HAL_I2C_Mem_Read+0x224>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2bff      	cmp	r3, #255	@ 0xff
 8002bd0:	d90e      	bls.n	8002bf0 <HAL_I2C_Mem_Read+0x1b0>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	22ff      	movs	r2, #255	@ 0xff
 8002bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	8979      	ldrh	r1, [r7, #10]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fa7f 	bl	80030ec <I2C_TransferConfig>
 8002bee:	e00f      	b.n	8002c10 <HAL_I2C_Mem_Read+0x1d0>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	2300      	movs	r3, #0
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fa6e 	bl	80030ec <I2C_TransferConfig>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d19a      	bne.n	8002b50 <HAL_I2C_Mem_Read+0x110>
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f940 	bl	8002ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Mem_Read+0x1ee>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e01a      	b.n	8002c64 <HAL_I2C_Mem_Read+0x224>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2220      	movs	r2, #32
 8002c34:	61da      	str	r2, [r3, #28]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_I2C_Mem_Read+0x230>)
 8002c42:	400b      	ands	r3, r1
 8002c44:	6053      	str	r3, [r2, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e000      	b.n	8002c64 <HAL_I2C_Mem_Read+0x224>
 8002c62:	2302      	movs	r3, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	80002400 	.word	0x80002400
 8002c70:	fe00e800 	.word	0xfe00e800

08002c74 <I2C_RequestMemoryRead>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	817b      	strh	r3, [r7, #10]
 8002c86:	460b      	mov	r3, r1
 8002c88:	813b      	strh	r3, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	4b20      	ldr	r3, [pc, #128]	@ (8002d18 <I2C_RequestMemoryRead+0xa4>)
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fa26 	bl	80030ec <I2C_TransferConfig>
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f8b6 	bl	8002e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <I2C_RequestMemoryRead+0x40>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e02c      	b.n	8002d0e <I2C_RequestMemoryRead+0x9a>
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d105      	bne.n	8002cc6 <I2C_RequestMemoryRead+0x52>
 8002cba:	893b      	ldrh	r3, [r7, #8]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cc4:	e015      	b.n	8002cf2 <I2C_RequestMemoryRead+0x7e>
 8002cc6:	893b      	ldrh	r3, [r7, #8]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	69b9      	ldr	r1, [r7, #24]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f89c 	bl	8002e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <I2C_RequestMemoryRead+0x74>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e012      	b.n	8002d0e <I2C_RequestMemoryRead+0x9a>
 8002ce8:	893b      	ldrh	r3, [r7, #8]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2140      	movs	r1, #64	@ 0x40
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f831 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <I2C_RequestMemoryRead+0x98>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <I2C_RequestMemoryRead+0x9a>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	80002000 	.word	0x80002000

08002d1c <I2C_Flush_TXDR>:
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d103      	bne.n	8002d3a <I2C_Flush_TXDR+0x1e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d007      	beq.n	8002d58 <I2C_Flush_TXDR+0x3c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	619a      	str	r2, [r3, #24]
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <I2C_WaitOnFlagUntilTimeout>:
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	71fb      	strb	r3, [r7, #7]
 8002d74:	e03b      	b.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x8a>
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	6839      	ldr	r1, [r7, #0]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f8d6 	bl	8002f2c <I2C_IsErrorOccurred>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x26>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e041      	b.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0xaa>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d02d      	beq.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x8a>
 8002d92:	f7fe fcdb 	bl	800174c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d122      	bne.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x8a>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d113      	bne.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x8a>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	645a      	str	r2, [r3, #68]	@ 0x44
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00f      	b.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0xaa>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699a      	ldr	r2, [r3, #24]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4013      	ands	r3, r2
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d0b4      	beq.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x12>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <I2C_WaitOnTXISFlagUntilTimeout>:
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	e033      	b.n	8002e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f87f 	bl	8002f2c <I2C_IsErrorOccurred>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e031      	b.n	8002e9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3e:	d025      	beq.n	8002e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002e40:	f7fe fc84 	bl	800174c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d302      	bcc.n	8002e56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d11a      	bne.n	8002e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d013      	beq.n	8002e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e007      	b.n	8002e9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d1c4      	bne.n	8002e24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	e02f      	b.n	8002f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f838 	bl	8002f2c <I2C_IsErrorOccurred>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e02d      	b.n	8002f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8002ec6:	f7fe fc41 	bl	800174c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11a      	bne.n	8002f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d013      	beq.n	8002f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e007      	b.n	8002f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d1c8      	bne.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8002f20:	2300      	movs	r3, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <I2C_IsErrorOccurred>:
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	@ 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	2300      	movs	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d068      	beq.n	800302a <I2C_IsErrorOccurred+0xfe>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	61da      	str	r2, [r3, #28]
 8002f60:	e049      	b.n	8002ff6 <I2C_IsErrorOccurred+0xca>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d045      	beq.n	8002ff6 <I2C_IsErrorOccurred+0xca>
 8002f6a:	f7fe fbef 	bl	800174c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_IsErrorOccurred+0x54>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d13a      	bne.n	8002ff6 <I2C_IsErrorOccurred+0xca>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f92:	74fb      	strb	r3, [r7, #19]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa2:	d121      	bne.n	8002fe8 <I2C_IsErrorOccurred+0xbc>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002faa:	d01d      	beq.n	8002fe8 <I2C_IsErrorOccurred+0xbc>
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d01a      	beq.n	8002fe8 <I2C_IsErrorOccurred+0xbc>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	f7fe fbc3 	bl	800174c <HAL_GetTick>
 8002fc6:	61f8      	str	r0, [r7, #28]
 8002fc8:	e00e      	b.n	8002fe8 <I2C_IsErrorOccurred+0xbc>
 8002fca:	f7fe fbbf 	bl	800174c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b19      	cmp	r3, #25
 8002fd6:	d907      	bls.n	8002fe8 <I2C_IsErrorOccurred+0xbc>
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f043 0320 	orr.w	r3, r3, #32
 8002fde:	623b      	str	r3, [r7, #32]
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fe6:	e006      	b.n	8002ff6 <I2C_IsErrorOccurred+0xca>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d1e9      	bne.n	8002fca <I2C_IsErrorOccurred+0x9e>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b20      	cmp	r3, #32
 8003002:	d003      	beq.n	800300c <I2C_IsErrorOccurred+0xe0>
 8003004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0aa      	beq.n	8002f62 <I2C_IsErrorOccurred+0x36>
 800300c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <I2C_IsErrorOccurred+0xf0>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2220      	movs	r2, #32
 800301a:	61da      	str	r2, [r3, #28]
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	2301      	movs	r3, #1
 8003026:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <I2C_IsErrorOccurred+0x128>
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800304c:	61da      	str	r2, [r3, #28]
 800304e:	2301      	movs	r3, #1
 8003050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <I2C_IsErrorOccurred+0x14a>
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f043 0308 	orr.w	r3, r3, #8
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800306e:	61da      	str	r2, [r3, #28]
 8003070:	2301      	movs	r3, #1
 8003072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <I2C_IsErrorOccurred+0x16c>
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	623b      	str	r3, [r7, #32]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003090:	61da      	str	r2, [r3, #28]
 8003092:	2301      	movs	r3, #1
 8003094:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01c      	beq.n	80030da <I2C_IsErrorOccurred+0x1ae>
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff fe3b 	bl	8002d1c <I2C_Flush_TXDR>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <I2C_IsErrorOccurred+0x1bc>)
 80030b2:	400b      	ands	r3, r1
 80030b4:	6053      	str	r3, [r2, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030de:	4618      	mov	r0, r3
 80030e0:	3728      	adds	r7, #40	@ 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	fe00e800 	.word	0xfe00e800

080030ec <I2C_TransferConfig>:
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	460b      	mov	r3, r1
 80030f8:	817b      	strh	r3, [r7, #10]
 80030fa:	4613      	mov	r3, r2
 80030fc:	727b      	strb	r3, [r7, #9]
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003104:	7a7b      	ldrb	r3, [r7, #9]
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	431a      	orrs	r2, r3
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	4313      	orrs	r3, r2
 8003116:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	0d5b      	lsrs	r3, r3, #21
 8003126:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800312a:	4b08      	ldr	r3, [pc, #32]	@ (800314c <I2C_TransferConfig+0x60>)
 800312c:	430b      	orrs	r3, r1
 800312e:	43db      	mvns	r3, r3
 8003130:	ea02 0103 	and.w	r1, r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	03ff63ff 	.word	0x03ff63ff

08003150 <HAL_I2CEx_ConfigAnalogFilter>:
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b20      	cmp	r3, #32
 8003164:	d138      	bne.n	80031d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003170:	2302      	movs	r3, #2
 8003172:	e032      	b.n	80031da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	@ 0x24
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031d8:	2302      	movs	r3, #2
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_I2CEx_ConfigDigitalFilter>:
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d139      	bne.n	8003270 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003206:	2302      	movs	r3, #2
 8003208:	e033      	b.n	8003272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2224      	movs	r2, #36	@ 0x24
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003270:	2302      	movs	r3, #2
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <HAL_PWREx_ConfigSupply>:
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	4b19      	ldr	r3, [pc, #100]	@ (80032f0 <HAL_PWREx_ConfigSupply+0x70>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d00a      	beq.n	80032aa <HAL_PWREx_ConfigSupply+0x2a>
 8003294:	4b16      	ldr	r3, [pc, #88]	@ (80032f0 <HAL_PWREx_ConfigSupply+0x70>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <HAL_PWREx_ConfigSupply+0x26>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e01f      	b.n	80032e6 <HAL_PWREx_ConfigSupply+0x66>
 80032a6:	2300      	movs	r3, #0
 80032a8:	e01d      	b.n	80032e6 <HAL_PWREx_ConfigSupply+0x66>
 80032aa:	4b11      	ldr	r3, [pc, #68]	@ (80032f0 <HAL_PWREx_ConfigSupply+0x70>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f023 0207 	bic.w	r2, r3, #7
 80032b2:	490f      	ldr	r1, [pc, #60]	@ (80032f0 <HAL_PWREx_ConfigSupply+0x70>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60cb      	str	r3, [r1, #12]
 80032ba:	f7fe fa47 	bl	800174c <HAL_GetTick>
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	e009      	b.n	80032d6 <HAL_PWREx_ConfigSupply+0x56>
 80032c2:	f7fe fa43 	bl	800174c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032d0:	d901      	bls.n	80032d6 <HAL_PWREx_ConfigSupply+0x56>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e007      	b.n	80032e6 <HAL_PWREx_ConfigSupply+0x66>
 80032d6:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <HAL_PWREx_ConfigSupply+0x70>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e2:	d1ee      	bne.n	80032c2 <HAL_PWREx_ConfigSupply+0x42>
 80032e4:	2300      	movs	r3, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	58024800 	.word	0x58024800

080032f4 <HAL_RCC_OscConfig>:
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	@ 0x30
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x12>
 8003302:	2301      	movs	r3, #1
 8003304:	e3c8      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8087 	beq.w	8003422 <HAL_RCC_OscConfig+0x12e>
 8003314:	4b88      	ldr	r3, [pc, #544]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800331e:	4b86      	ldr	r3, [pc, #536]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003326:	2b10      	cmp	r3, #16
 8003328:	d007      	beq.n	800333a <HAL_RCC_OscConfig+0x46>
 800332a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332c:	2b18      	cmp	r3, #24
 800332e:	d110      	bne.n	8003352 <HAL_RCC_OscConfig+0x5e>
 8003330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d10b      	bne.n	8003352 <HAL_RCC_OscConfig+0x5e>
 800333a:	4b7f      	ldr	r3, [pc, #508]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d06c      	beq.n	8003420 <HAL_RCC_OscConfig+0x12c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d168      	bne.n	8003420 <HAL_RCC_OscConfig+0x12c>
 800334e:	2301      	movs	r3, #1
 8003350:	e3a2      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x76>
 800335c:	4b76      	ldr	r3, [pc, #472]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a75      	ldr	r2, [pc, #468]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	e02e      	b.n	80033c8 <HAL_RCC_OscConfig+0xd4>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x98>
 8003372:	4b71      	ldr	r3, [pc, #452]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a70      	ldr	r2, [pc, #448]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b6e      	ldr	r3, [pc, #440]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6d      	ldr	r2, [pc, #436]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xd4>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0xbc>
 8003396:	4b68      	ldr	r3, [pc, #416]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a67      	ldr	r2, [pc, #412]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b65      	ldr	r3, [pc, #404]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a64      	ldr	r2, [pc, #400]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xd4>
 80033b0:	4b61      	ldr	r3, [pc, #388]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a60      	ldr	r2, [pc, #384]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_OscConfig+0x104>
 80033d0:	f7fe f9bc 	bl	800174c <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xf6>
 80033d8:	f7fe f9b8 	bl	800174c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xf6>
 80033e6:	2303      	movs	r3, #3
 80033e8:	e356      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 80033ea:	4b53      	ldr	r3, [pc, #332]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0xe4>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x12e>
 80033f8:	f7fe f9a8 	bl	800174c <HAL_GetTick>
 80033fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x11e>
 8003400:	f7fe f9a4 	bl	800174c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	@ 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x11e>
 800340e:	2303      	movs	r3, #3
 8003410:	e342      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003412:	4b49      	ldr	r3, [pc, #292]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x10c>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x12e>
 8003420:	bf00      	nop
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 808c 	beq.w	8003548 <HAL_RCC_OscConfig+0x254>
 8003430:	4b41      	ldr	r3, [pc, #260]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003438:	623b      	str	r3, [r7, #32]
 800343a:	4b3f      	ldr	r3, [pc, #252]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 800343c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_RCC_OscConfig+0x162>
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2b18      	cmp	r3, #24
 800344a:	d137      	bne.n	80034bc <HAL_RCC_OscConfig+0x1c8>
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d132      	bne.n	80034bc <HAL_RCC_OscConfig+0x1c8>
 8003456:	4b38      	ldr	r3, [pc, #224]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_RCC_OscConfig+0x17a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_OscConfig+0x17a>
 800346a:	2301      	movs	r3, #1
 800346c:	e314      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 800346e:	4b32      	ldr	r3, [pc, #200]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 0219 	bic.w	r2, r3, #25
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	492f      	ldr	r1, [pc, #188]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
 8003480:	f7fe f964 	bl	800174c <HAL_GetTick>
 8003484:	6278      	str	r0, [r7, #36]	@ 0x24
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x1a6>
 8003488:	f7fe f960 	bl	800174c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x1a6>
 8003496:	2303      	movs	r3, #3
 8003498:	e2fe      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 800349a:	4b27      	ldr	r3, [pc, #156]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x194>
 80034a6:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	061b      	lsls	r3, r3, #24
 80034b4:	4920      	ldr	r1, [pc, #128]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
 80034ba:	e045      	b.n	8003548 <HAL_RCC_OscConfig+0x254>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d026      	beq.n	8003512 <HAL_RCC_OscConfig+0x21e>
 80034c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 0219 	bic.w	r2, r3, #25
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4919      	ldr	r1, [pc, #100]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
 80034d6:	f7fe f939 	bl	800174c <HAL_GetTick>
 80034da:	6278      	str	r0, [r7, #36]	@ 0x24
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x1fc>
 80034de:	f7fe f935 	bl	800174c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x1fc>
 80034ec:	2303      	movs	r3, #3
 80034ee:	e2d3      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x1ea>
 80034fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	061b      	lsls	r3, r3, #24
 800350a:	490b      	ldr	r1, [pc, #44]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
 8003510:	e01a      	b.n	8003548 <HAL_RCC_OscConfig+0x254>
 8003512:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	f7fe f915 	bl	800174c <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	@ 0x24
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x248>
 8003526:	f7fe f911 	bl	800174c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d903      	bls.n	800353c <HAL_RCC_OscConfig+0x248>
 8003534:	2303      	movs	r3, #3
 8003536:	e2af      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003538:	58024400 	.word	0x58024400
 800353c:	4b96      	ldr	r3, [pc, #600]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ee      	bne.n	8003526 <HAL_RCC_OscConfig+0x232>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	d06a      	beq.n	800362a <HAL_RCC_OscConfig+0x336>
 8003554:	4b90      	ldr	r3, [pc, #576]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	4b8e      	ldr	r3, [pc, #568]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b08      	cmp	r3, #8
 8003568:	d007      	beq.n	800357a <HAL_RCC_OscConfig+0x286>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b18      	cmp	r3, #24
 800356e:	d11b      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2b4>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d116      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2b4>
 800357a:	4b87      	ldr	r3, [pc, #540]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_RCC_OscConfig+0x29e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	2b80      	cmp	r3, #128	@ 0x80
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x29e>
 800358e:	2301      	movs	r3, #1
 8003590:	e282      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003592:	4b81      	ldr	r3, [pc, #516]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	061b      	lsls	r3, r3, #24
 80035a0:	497d      	ldr	r1, [pc, #500]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60cb      	str	r3, [r1, #12]
 80035a6:	e040      	b.n	800362a <HAL_RCC_OscConfig+0x336>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_RCC_OscConfig+0x304>
 80035b0:	4b79      	ldr	r3, [pc, #484]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a78      	ldr	r2, [pc, #480]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80035b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	f7fe f8c6 	bl	800174c <HAL_GetTick>
 80035c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x2e2>
 80035c4:	f7fe f8c2 	bl	800174c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x2e2>
 80035d2:	2303      	movs	r3, #3
 80035d4:	e260      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 80035d6:	4b70      	ldr	r3, [pc, #448]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2d0>
 80035e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	061b      	lsls	r3, r3, #24
 80035f0:	4969      	ldr	r1, [pc, #420]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60cb      	str	r3, [r1, #12]
 80035f6:	e018      	b.n	800362a <HAL_RCC_OscConfig+0x336>
 80035f8:	4b67      	ldr	r3, [pc, #412]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a66      	ldr	r2, [pc, #408]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80035fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	f7fe f8a2 	bl	800174c <HAL_GetTick>
 8003608:	6278      	str	r0, [r7, #36]	@ 0x24
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x32a>
 800360c:	f7fe f89e 	bl	800174c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x32a>
 800361a:	2303      	movs	r3, #3
 800361c:	e23c      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 800361e:	4b5e      	ldr	r3, [pc, #376]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x318>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d036      	beq.n	80036a4 <HAL_RCC_OscConfig+0x3b0>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d019      	beq.n	8003672 <HAL_RCC_OscConfig+0x37e>
 800363e:	4b56      	ldr	r3, [pc, #344]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003642:	4a55      	ldr	r2, [pc, #340]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6753      	str	r3, [r2, #116]	@ 0x74
 800364a:	f7fe f87f 	bl	800174c <HAL_GetTick>
 800364e:	6278      	str	r0, [r7, #36]	@ 0x24
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x370>
 8003652:	f7fe f87b 	bl	800174c <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x370>
 8003660:	2303      	movs	r3, #3
 8003662:	e219      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003664:	4b4c      	ldr	r3, [pc, #304]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x35e>
 8003670:	e018      	b.n	80036a4 <HAL_RCC_OscConfig+0x3b0>
 8003672:	4b49      	ldr	r3, [pc, #292]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003676:	4a48      	ldr	r2, [pc, #288]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6753      	str	r3, [r2, #116]	@ 0x74
 800367e:	f7fe f865 	bl	800174c <HAL_GetTick>
 8003682:	6278      	str	r0, [r7, #36]	@ 0x24
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x3a4>
 8003686:	f7fe f861 	bl	800174c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x3a4>
 8003694:	2303      	movs	r3, #3
 8003696:	e1ff      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003698:	4b3f      	ldr	r3, [pc, #252]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 800369a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f0      	bne.n	8003686 <HAL_RCC_OscConfig+0x392>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d036      	beq.n	800371e <HAL_RCC_OscConfig+0x42a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d019      	beq.n	80036ec <HAL_RCC_OscConfig+0x3f8>
 80036b8:	4b37      	ldr	r3, [pc, #220]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a36      	ldr	r2, [pc, #216]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80036be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	f7fe f842 	bl	800174c <HAL_GetTick>
 80036c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x3ea>
 80036cc:	f7fe f83e 	bl	800174c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3ea>
 80036da:	2303      	movs	r3, #3
 80036dc:	e1dc      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 80036de:	4b2e      	ldr	r3, [pc, #184]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x3d8>
 80036ea:	e018      	b.n	800371e <HAL_RCC_OscConfig+0x42a>
 80036ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a29      	ldr	r2, [pc, #164]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 80036f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	f7fe f828 	bl	800174c <HAL_GetTick>
 80036fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x41e>
 8003700:	f7fe f824 	bl	800174c <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x41e>
 800370e:	2303      	movs	r3, #3
 8003710:	e1c2      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003712:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x40c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8086 	beq.w	8003838 <HAL_RCC_OscConfig+0x544>
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x4a8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1a      	ldr	r2, [pc, #104]	@ (800379c <HAL_RCC_OscConfig+0x4a8>)
 8003732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	f7fe f808 	bl	800174c <HAL_GetTick>
 800373c:	6278      	str	r0, [r7, #36]	@ 0x24
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x45e>
 8003740:	f7fe f804 	bl	800174c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	@ 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x45e>
 800374e:	2303      	movs	r3, #3
 8003750:	e1a2      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003752:	4b12      	ldr	r3, [pc, #72]	@ (800379c <HAL_RCC_OscConfig+0x4a8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x44c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d106      	bne.n	8003774 <HAL_RCC_OscConfig+0x480>
 8003766:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376a:	4a0b      	ldr	r2, [pc, #44]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6713      	str	r3, [r2, #112]	@ 0x70
 8003772:	e032      	b.n	80037da <HAL_RCC_OscConfig+0x4e6>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d111      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4ac>
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	4a05      	ldr	r2, [pc, #20]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	@ 0x70
 8003788:	4b03      	ldr	r3, [pc, #12]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378c:	4a02      	ldr	r2, [pc, #8]	@ (8003798 <HAL_RCC_OscConfig+0x4a4>)
 800378e:	f023 0304 	bic.w	r3, r3, #4
 8003792:	6713      	str	r3, [r2, #112]	@ 0x70
 8003794:	e021      	b.n	80037da <HAL_RCC_OscConfig+0x4e6>
 8003796:	bf00      	nop
 8003798:	58024400 	.word	0x58024400
 800379c:	58024800 	.word	0x58024800
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4ce>
 80037a8:	4b83      	ldr	r3, [pc, #524]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ac:	4a82      	ldr	r2, [pc, #520]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b4:	4b80      	ldr	r3, [pc, #512]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b8:	4a7f      	ldr	r2, [pc, #508]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c0:	e00b      	b.n	80037da <HAL_RCC_OscConfig+0x4e6>
 80037c2:	4b7d      	ldr	r3, [pc, #500]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c6:	4a7c      	ldr	r2, [pc, #496]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ce:	4b7a      	ldr	r3, [pc, #488]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d2:	4a79      	ldr	r2, [pc, #484]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <HAL_RCC_OscConfig+0x51a>
 80037e2:	f7fd ffb3 	bl	800174c <HAL_GetTick>
 80037e6:	6278      	str	r0, [r7, #36]	@ 0x24
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x50c>
 80037ea:	f7fd ffaf 	bl	800174c <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x50c>
 80037fc:	2303      	movs	r3, #3
 80037fe:	e14b      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003800:	4b6d      	ldr	r3, [pc, #436]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ee      	beq.n	80037ea <HAL_RCC_OscConfig+0x4f6>
 800380c:	e014      	b.n	8003838 <HAL_RCC_OscConfig+0x544>
 800380e:	f7fd ff9d 	bl	800174c <HAL_GetTick>
 8003812:	6278      	str	r0, [r7, #36]	@ 0x24
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x538>
 8003816:	f7fd ff99 	bl	800174c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x538>
 8003828:	2303      	movs	r3, #3
 800382a:	e135      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 800382c:	4b62      	ldr	r3, [pc, #392]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ee      	bne.n	8003816 <HAL_RCC_OscConfig+0x522>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 812a 	beq.w	8003a96 <HAL_RCC_OscConfig+0x7a2>
 8003842:	4b5d      	ldr	r3, [pc, #372]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800384a:	2b18      	cmp	r3, #24
 800384c:	f000 80ba 	beq.w	80039c4 <HAL_RCC_OscConfig+0x6d0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	2b02      	cmp	r3, #2
 8003856:	f040 8095 	bne.w	8003984 <HAL_RCC_OscConfig+0x690>
 800385a:	4b57      	ldr	r3, [pc, #348]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a56      	ldr	r2, [pc, #344]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003860:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	f7fd ff71 	bl	800174c <HAL_GetTick>
 800386a:	6278      	str	r0, [r7, #36]	@ 0x24
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x58c>
 800386e:	f7fd ff6d 	bl	800174c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x58c>
 800387c:	2303      	movs	r3, #3
 800387e:	e10b      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003880:	4b4d      	ldr	r3, [pc, #308]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x57a>
 800388c:	4b4a      	ldr	r3, [pc, #296]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800388e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003890:	4b4a      	ldr	r3, [pc, #296]	@ (80039bc <HAL_RCC_OscConfig+0x6c8>)
 8003892:	4013      	ands	r3, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	430a      	orrs	r2, r1
 80038a0:	4945      	ldr	r1, [pc, #276]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	628b      	str	r3, [r1, #40]	@ 0x28
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	3b01      	subs	r3, #1
 80038ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	3b01      	subs	r3, #1
 80038b6:	025b      	lsls	r3, r3, #9
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	3b01      	subs	r3, #1
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	3b01      	subs	r3, #1
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80038d6:	4938      	ldr	r1, [pc, #224]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	630b      	str	r3, [r1, #48]	@ 0x30
 80038dc:	4b36      	ldr	r3, [pc, #216]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	4a35      	ldr	r2, [pc, #212]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80038e8:	4b33      	ldr	r3, [pc, #204]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80038ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ec:	4b34      	ldr	r3, [pc, #208]	@ (80039c0 <HAL_RCC_OscConfig+0x6cc>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038f4:	00d2      	lsls	r2, r2, #3
 80038f6:	4930      	ldr	r1, [pc, #192]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	634b      	str	r3, [r1, #52]	@ 0x34
 80038fc:	4b2e      	ldr	r3, [pc, #184]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80038fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003900:	f023 020c 	bic.w	r2, r3, #12
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	492b      	ldr	r1, [pc, #172]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800390e:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003912:	f023 0202 	bic.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	4927      	ldr	r1, [pc, #156]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003920:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	4a24      	ldr	r2, [pc, #144]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800392c:	4b22      	ldr	r3, [pc, #136]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	4a21      	ldr	r2, [pc, #132]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003936:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003938:	4b1f      	ldr	r3, [pc, #124]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	4a1e      	ldr	r2, [pc, #120]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800393e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003942:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003944:	4b1c      	ldr	r3, [pc, #112]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003950:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a18      	ldr	r2, [pc, #96]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	f7fd fef6 	bl	800174c <HAL_GetTick>
 8003960:	6278      	str	r0, [r7, #36]	@ 0x24
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x682>
 8003964:	f7fd fef2 	bl	800174c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x682>
 8003972:	2303      	movs	r3, #3
 8003974:	e090      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003976:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x670>
 8003982:	e088      	b.n	8003a96 <HAL_RCC_OscConfig+0x7a2>
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0b      	ldr	r2, [pc, #44]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 800398a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	f7fd fedc 	bl	800174c <HAL_GetTick>
 8003994:	6278      	str	r0, [r7, #36]	@ 0x24
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x6b6>
 8003998:	f7fd fed8 	bl	800174c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x6b6>
 80039a6:	2303      	movs	r3, #3
 80039a8:	e076      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 80039aa:	4b03      	ldr	r3, [pc, #12]	@ (80039b8 <HAL_RCC_OscConfig+0x6c4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x6a4>
 80039b6:	e06e      	b.n	8003a96 <HAL_RCC_OscConfig+0x7a2>
 80039b8:	58024400 	.word	0x58024400
 80039bc:	fffffc0c 	.word	0xfffffc0c
 80039c0:	ffff0007 	.word	0xffff0007
 80039c4:	4b36      	ldr	r3, [pc, #216]	@ (8003aa0 <HAL_RCC_OscConfig+0x7ac>)
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	4b35      	ldr	r3, [pc, #212]	@ (8003aa0 <HAL_RCC_OscConfig+0x7ac>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d031      	beq.n	8003a3c <HAL_RCC_OscConfig+0x748>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f003 0203 	and.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d12a      	bne.n	8003a3c <HAL_RCC_OscConfig+0x748>
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d122      	bne.n	8003a3c <HAL_RCC_OscConfig+0x748>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a00:	3b01      	subs	r3, #1
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d11a      	bne.n	8003a3c <HAL_RCC_OscConfig+0x748>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	0a5b      	lsrs	r3, r3, #9
 8003a0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	3b01      	subs	r3, #1
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d111      	bne.n	8003a3c <HAL_RCC_OscConfig+0x748>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a24:	3b01      	subs	r3, #1
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d108      	bne.n	8003a3c <HAL_RCC_OscConfig+0x748>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	0e1b      	lsrs	r3, r3, #24
 8003a2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a36:	3b01      	subs	r3, #1
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0x74c>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e02b      	b.n	8003a98 <HAL_RCC_OscConfig+0x7a4>
 8003a40:	4b17      	ldr	r3, [pc, #92]	@ (8003aa0 <HAL_RCC_OscConfig+0x7ac>)
 8003a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d01f      	beq.n	8003a96 <HAL_RCC_OscConfig+0x7a2>
 8003a56:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <HAL_RCC_OscConfig+0x7ac>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	4a11      	ldr	r2, [pc, #68]	@ (8003aa0 <HAL_RCC_OscConfig+0x7ac>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003a62:	f7fd fe73 	bl	800174c <HAL_GetTick>
 8003a66:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a68:	bf00      	nop
 8003a6a:	f7fd fe6f 	bl	800174c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d0f9      	beq.n	8003a6a <HAL_RCC_OscConfig+0x776>
 8003a76:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <HAL_RCC_OscConfig+0x7ac>)
 8003a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <HAL_RCC_OscConfig+0x7b0>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a82:	00d2      	lsls	r2, r2, #3
 8003a84:	4906      	ldr	r1, [pc, #24]	@ (8003aa0 <HAL_RCC_OscConfig+0x7ac>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	634b      	str	r3, [r1, #52]	@ 0x34
 8003a8a:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <HAL_RCC_OscConfig+0x7ac>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8e:	4a04      	ldr	r2, [pc, #16]	@ (8003aa0 <HAL_RCC_OscConfig+0x7ac>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003a96:	2300      	movs	r3, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3730      	adds	r7, #48	@ 0x30
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	58024400 	.word	0x58024400
 8003aa4:	ffff0007 	.word	0xffff0007

08003aa8 <HAL_RCC_ClockConfig>:
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x14>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e19c      	b.n	8003df6 <HAL_RCC_ClockConfig+0x34e>
 8003abc:	4b8a      	ldr	r3, [pc, #552]	@ (8003ce8 <HAL_RCC_ClockConfig+0x240>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d910      	bls.n	8003aec <HAL_RCC_ClockConfig+0x44>
 8003aca:	4b87      	ldr	r3, [pc, #540]	@ (8003ce8 <HAL_RCC_ClockConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 020f 	bic.w	r2, r3, #15
 8003ad2:	4985      	ldr	r1, [pc, #532]	@ (8003ce8 <HAL_RCC_ClockConfig+0x240>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
 8003ada:	4b83      	ldr	r3, [pc, #524]	@ (8003ce8 <HAL_RCC_ClockConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x44>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e184      	b.n	8003df6 <HAL_RCC_ClockConfig+0x34e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d010      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x72>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	4b7b      	ldr	r3, [pc, #492]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d908      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x72>
 8003b08:	4b78      	ldr	r3, [pc, #480]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	4975      	ldr	r1, [pc, #468]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	618b      	str	r3, [r1, #24]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <HAL_RCC_ClockConfig+0xa0>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	4b70      	ldr	r3, [pc, #448]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d908      	bls.n	8003b48 <HAL_RCC_ClockConfig+0xa0>
 8003b36:	4b6d      	ldr	r3, [pc, #436]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	496a      	ldr	r1, [pc, #424]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61cb      	str	r3, [r1, #28]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d010      	beq.n	8003b76 <HAL_RCC_ClockConfig+0xce>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	4b64      	ldr	r3, [pc, #400]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d908      	bls.n	8003b76 <HAL_RCC_ClockConfig+0xce>
 8003b64:	4b61      	ldr	r3, [pc, #388]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	495e      	ldr	r1, [pc, #376]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61cb      	str	r3, [r1, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d010      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0xfc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	4b59      	ldr	r3, [pc, #356]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d908      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0xfc>
 8003b92:	4b56      	ldr	r3, [pc, #344]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4953      	ldr	r1, [pc, #332]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	620b      	str	r3, [r1, #32]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d010      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x12a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d908      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x12a>
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f023 020f 	bic.w	r2, r3, #15
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4947      	ldr	r1, [pc, #284]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	618b      	str	r3, [r1, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d055      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x1e2>
 8003bde:	4b43      	ldr	r3, [pc, #268]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	4940      	ldr	r1, [pc, #256]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	618b      	str	r3, [r1, #24]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x160>
 8003bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d121      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x1a0>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0f6      	b.n	8003df6 <HAL_RCC_ClockConfig+0x34e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x178>
 8003c10:	4b36      	ldr	r3, [pc, #216]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d115      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x1a0>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0ea      	b.n	8003df6 <HAL_RCC_ClockConfig+0x34e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x190>
 8003c28:	4b30      	ldr	r3, [pc, #192]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d109      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x1a0>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0de      	b.n	8003df6 <HAL_RCC_ClockConfig+0x34e>
 8003c38:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x1a0>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0d6      	b.n	8003df6 <HAL_RCC_ClockConfig+0x34e>
 8003c48:	4b28      	ldr	r3, [pc, #160]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f023 0207 	bic.w	r2, r3, #7
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4925      	ldr	r1, [pc, #148]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	610b      	str	r3, [r1, #16]
 8003c5a:	f7fd fd77 	bl	800174c <HAL_GetTick>
 8003c5e:	6178      	str	r0, [r7, #20]
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1d0>
 8003c62:	f7fd fd73 	bl	800174c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x1d0>
 8003c74:	2303      	movs	r3, #3
 8003c76:	e0be      	b.n	8003df6 <HAL_RCC_ClockConfig+0x34e>
 8003c78:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d1eb      	bne.n	8003c62 <HAL_RCC_ClockConfig+0x1ba>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d010      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x210>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d208      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x210>
 8003ca6:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f023 020f 	bic.w	r2, r3, #15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	490e      	ldr	r1, [pc, #56]	@ (8003cec <HAL_RCC_ClockConfig+0x244>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	618b      	str	r3, [r1, #24]
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <HAL_RCC_ClockConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d214      	bcs.n	8003cf0 <HAL_RCC_ClockConfig+0x248>
 8003cc6:	4b08      	ldr	r3, [pc, #32]	@ (8003ce8 <HAL_RCC_ClockConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 020f 	bic.w	r2, r3, #15
 8003cce:	4906      	ldr	r1, [pc, #24]	@ (8003ce8 <HAL_RCC_ClockConfig+0x240>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
 8003cd6:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <HAL_RCC_ClockConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x248>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e086      	b.n	8003df6 <HAL_RCC_ClockConfig+0x34e>
 8003ce8:	52002000 	.word	0x52002000
 8003cec:	58024400 	.word	0x58024400
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d010      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x276>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	4b3f      	ldr	r3, [pc, #252]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d208      	bcs.n	8003d1e <HAL_RCC_ClockConfig+0x276>
 8003d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	4939      	ldr	r1, [pc, #228]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	618b      	str	r3, [r1, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d010      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x2a4>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	4b34      	ldr	r3, [pc, #208]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d208      	bcs.n	8003d4c <HAL_RCC_ClockConfig+0x2a4>
 8003d3a:	4b31      	ldr	r3, [pc, #196]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	492e      	ldr	r1, [pc, #184]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61cb      	str	r3, [r1, #28]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x2d2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	4b28      	ldr	r3, [pc, #160]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d208      	bcs.n	8003d7a <HAL_RCC_ClockConfig+0x2d2>
 8003d68:	4b25      	ldr	r3, [pc, #148]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	4922      	ldr	r1, [pc, #136]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61cb      	str	r3, [r1, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d010      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x300>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d208      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x300>
 8003d96:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	4917      	ldr	r1, [pc, #92]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	620b      	str	r3, [r1, #32]
 8003da8:	f000 f834 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	4912      	ldr	r1, [pc, #72]	@ (8003e04 <HAL_RCC_ClockConfig+0x35c>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <HAL_RCC_ClockConfig+0x358>)
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	4a0d      	ldr	r2, [pc, #52]	@ (8003e04 <HAL_RCC_ClockConfig+0x35c>)
 8003dd0:	5cd3      	ldrb	r3, [r2, r3]
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8003e08 <HAL_RCC_ClockConfig+0x360>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	@ (8003e0c <HAL_RCC_ClockConfig+0x364>)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <HAL_RCC_ClockConfig+0x368>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd fc64 	bl	80016b8 <HAL_InitTick>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
 8003e04:	0800b544 	.word	0x0800b544
 8003e08:	24000004 	.word	0x24000004
 8003e0c:	24000000 	.word	0x24000000
 8003e10:	24000008 	.word	0x24000008

08003e14 <HAL_RCC_GetSysClockFreq>:
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	@ 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4bb3      	ldr	r3, [pc, #716]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e22:	2b18      	cmp	r3, #24
 8003e24:	f200 8155 	bhi.w	80040d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003e28:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e95 	.word	0x08003e95
 8003e34:	080040d3 	.word	0x080040d3
 8003e38:	080040d3 	.word	0x080040d3
 8003e3c:	080040d3 	.word	0x080040d3
 8003e40:	080040d3 	.word	0x080040d3
 8003e44:	080040d3 	.word	0x080040d3
 8003e48:	080040d3 	.word	0x080040d3
 8003e4c:	080040d3 	.word	0x080040d3
 8003e50:	08003ebb 	.word	0x08003ebb
 8003e54:	080040d3 	.word	0x080040d3
 8003e58:	080040d3 	.word	0x080040d3
 8003e5c:	080040d3 	.word	0x080040d3
 8003e60:	080040d3 	.word	0x080040d3
 8003e64:	080040d3 	.word	0x080040d3
 8003e68:	080040d3 	.word	0x080040d3
 8003e6c:	080040d3 	.word	0x080040d3
 8003e70:	08003ec1 	.word	0x08003ec1
 8003e74:	080040d3 	.word	0x080040d3
 8003e78:	080040d3 	.word	0x080040d3
 8003e7c:	080040d3 	.word	0x080040d3
 8003e80:	080040d3 	.word	0x080040d3
 8003e84:	080040d3 	.word	0x080040d3
 8003e88:	080040d3 	.word	0x080040d3
 8003e8c:	080040d3 	.word	0x080040d3
 8003e90:	08003ec7 	.word	0x08003ec7
 8003e94:	4b94      	ldr	r3, [pc, #592]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d009      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xa0>
 8003ea0:	4b91      	ldr	r3, [pc, #580]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	08db      	lsrs	r3, r3, #3
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	4a90      	ldr	r2, [pc, #576]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e111      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x2c4>
 8003eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	e10e      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x2c4>
 8003eba:	4b8d      	ldr	r3, [pc, #564]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e10b      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x2c4>
 8003ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e108      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x2c4>
 8003ec6:	4b88      	ldr	r3, [pc, #544]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	4b85      	ldr	r3, [pc, #532]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	4b82      	ldr	r3, [pc, #520]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	4b80      	ldr	r3, [pc, #512]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eea:	08db      	lsrs	r3, r3, #3
 8003eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efe:	edc7 7a02 	vstr	s15, [r7, #8]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80e1 	beq.w	80040cc <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	f000 8083 	beq.w	8004018 <HAL_RCC_GetSysClockFreq+0x204>
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	f200 80a1 	bhi.w	800405c <HAL_RCC_GetSysClockFreq+0x248>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x114>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d056      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f26:	e099      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x248>
 8003f28:	4b6f      	ldr	r3, [pc, #444]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02d      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x17c>
 8003f34:	4b6c      	ldr	r3, [pc, #432]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	08db      	lsrs	r3, r3, #3
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	4a6b      	ldr	r2, [pc, #428]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5e:	4b62      	ldr	r3, [pc, #392]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f72:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80040f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8a:	edc7 7a07 	vstr	s15, [r7, #28]
 8003f8e:	e087      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x28c>
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80040fc <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa2:	4b51      	ldr	r3, [pc, #324]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fb6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80040f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	edc7 7a07 	vstr	s15, [r7, #28]
 8003fd2:	e065      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x28c>
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004100 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe6:	4b40      	ldr	r3, [pc, #256]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ffa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80040f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800400a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004012:	edc7 7a07 	vstr	s15, [r7, #28]
 8004016:	e043      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x28c>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004022:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004104 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402a:	4b2f      	ldr	r3, [pc, #188]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403a:	ed97 6a02 	vldr	s12, [r7, #8]
 800403e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80040f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800404e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004056:	edc7 7a07 	vstr	s15, [r7, #28]
 800405a:	e021      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x28c>
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004066:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004100 <HAL_RCC_GetSysClockFreq+0x2ec>
 800406a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406e:	4b1e      	ldr	r3, [pc, #120]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004082:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80040f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
 800409e:	bf00      	nop
 80040a0:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	0a5b      	lsrs	r3, r3, #9
 80040a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040aa:	3301      	adds	r3, #1
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c4:	ee17 3a90 	vmov	r3, s15
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	e005      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x2c4>
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e002      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x2c4>
 80040d2:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	bf00      	nop
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	4618      	mov	r0, r3
 80040dc:	3724      	adds	r7, #36	@ 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	58024400 	.word	0x58024400
 80040ec:	03d09000 	.word	0x03d09000
 80040f0:	003d0900 	.word	0x003d0900
 80040f4:	017d7840 	.word	0x017d7840
 80040f8:	46000000 	.word	0x46000000
 80040fc:	4c742400 	.word	0x4c742400
 8004100:	4a742400 	.word	0x4a742400
 8004104:	4bbebc20 	.word	0x4bbebc20

08004108 <HAL_RCC_GetHCLKFreq>:
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	f7ff fe81 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8004112:	4602      	mov	r2, r0
 8004114:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <HAL_RCC_GetHCLKFreq+0x50>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	490f      	ldr	r1, [pc, #60]	@ (800415c <HAL_RCC_GetHCLKFreq+0x54>)
 8004120:	5ccb      	ldrb	r3, [r1, r3]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	fa22 f303 	lsr.w	r3, r2, r3
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <HAL_RCC_GetHCLKFreq+0x50>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	4a09      	ldr	r2, [pc, #36]	@ (800415c <HAL_RCC_GetHCLKFreq+0x54>)
 8004136:	5cd3      	ldrb	r3, [r2, r3]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a07      	ldr	r2, [pc, #28]	@ (8004160 <HAL_RCC_GetHCLKFreq+0x58>)
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4a07      	ldr	r2, [pc, #28]	@ (8004164 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <HAL_RCC_GetHCLKFreq+0x58>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	58024400 	.word	0x58024400
 800415c:	0800b544 	.word	0x0800b544
 8004160:	24000004 	.word	0x24000004
 8004164:	24000000 	.word	0x24000000

08004168 <HAL_RCC_GetPCLK1Freq>:
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
 800416c:	f7ff ffcc 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b06      	ldr	r3, [pc, #24]	@ (800418c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4904      	ldr	r1, [pc, #16]	@ (8004190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	58024400 	.word	0x58024400
 8004190:	0800b544 	.word	0x0800b544

08004194 <HAL_RCC_GetPCLK2Freq>:
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
 8004198:	f7ff ffb6 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 800419c:	4602      	mov	r2, r0
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	4904      	ldr	r1, [pc, #16]	@ (80041bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80041aa:	5ccb      	ldrb	r3, [r1, r3]
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	58024400 	.word	0x58024400
 80041bc:	0800b544 	.word	0x0800b544

080041c0 <HAL_RCCEx_PeriphCLKConfig>:
 80041c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c4:	b0c6      	sub	sp, #280	@ 0x118
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80041d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80041e4:	2500      	movs	r5, #0
 80041e6:	ea54 0305 	orrs.w	r3, r4, r5
 80041ea:	d049      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80041ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041f6:	d02f      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80041f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041fc:	d828      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004202:	d01a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004204:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004208:	d822      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800420e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004212:	d007      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004214:	e01c      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004216:	4bab      	ldr	r3, [pc, #684]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	4aaa      	ldr	r2, [pc, #680]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800421c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004220:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004222:	e01a      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004228:	3308      	adds	r3, #8
 800422a:	2102      	movs	r1, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fc25 	bl	8005a7c <RCCEx_PLL2_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004238:	e00f      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800423a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423e:	3328      	adds	r3, #40	@ 0x28
 8004240:	2102      	movs	r1, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f001 fccc 	bl	8005be0 <RCCEx_PLL3_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800424e:	e004      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004250:	2301      	movs	r3, #1
 8004252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004258:	bf00      	nop
 800425a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004262:	4b98      	ldr	r3, [pc, #608]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004266:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800426a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800426e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004270:	4a94      	ldr	r2, [pc, #592]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004272:	430b      	orrs	r3, r1
 8004274:	6513      	str	r3, [r2, #80]	@ 0x50
 8004276:	e003      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800427c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800428c:	f04f 0900 	mov.w	r9, #0
 8004290:	ea58 0309 	orrs.w	r3, r8, r9
 8004294:	d047      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	2b04      	cmp	r3, #4
 800429e:	d82a      	bhi.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80042a0:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042bd 	.word	0x080042bd
 80042ac:	080042cb 	.word	0x080042cb
 80042b0:	080042e1 	.word	0x080042e1
 80042b4:	080042ff 	.word	0x080042ff
 80042b8:	080042ff 	.word	0x080042ff
 80042bc:	4b81      	ldr	r3, [pc, #516]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	4a80      	ldr	r2, [pc, #512]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042c8:	e01a      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80042ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ce:	3308      	adds	r3, #8
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fbd2 	bl	8005a7c <RCCEx_PLL2_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80042de:	e00f      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80042e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e4:	3328      	adds	r3, #40	@ 0x28
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f001 fc79 	bl	8005be0 <RCCEx_PLL3_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80042f4:	e004      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80042fc:	e000      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80042fe:	bf00      	nop
 8004300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004308:	4b6e      	ldr	r3, [pc, #440]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800430a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430c:	f023 0107 	bic.w	r1, r3, #7
 8004310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004316:	4a6b      	ldr	r2, [pc, #428]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004318:	430b      	orrs	r3, r1
 800431a:	6513      	str	r3, [r2, #80]	@ 0x50
 800431c:	e003      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800431e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004322:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004332:	f04f 0b00 	mov.w	fp, #0
 8004336:	ea5a 030b 	orrs.w	r3, sl, fp
 800433a:	d05b      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004344:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004348:	d03b      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800434a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800434e:	d834      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004350:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004354:	d037      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004356:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800435a:	d82e      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800435c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004360:	d033      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004362:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004366:	d828      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004368:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800436c:	d01a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800436e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004372:	d822      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004378:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800437c:	d007      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800437e:	e01c      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004380:	4b50      	ldr	r3, [pc, #320]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	4a4f      	ldr	r2, [pc, #316]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800438a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800438c:	e01e      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004392:	3308      	adds	r3, #8
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f001 fb70 	bl	8005a7c <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80043a2:	e013      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80043a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a8:	3328      	adds	r3, #40	@ 0x28
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 fc17 	bl	8005be0 <RCCEx_PLL3_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80043b8:	e008      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80043ba:	2301      	movs	r3, #1
 80043bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80043c0:	e004      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80043c2:	bf00      	nop
 80043c4:	e002      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80043ca:	bf00      	nop
 80043cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80043d4:	4b3b      	ldr	r3, [pc, #236]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80043dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043e4:	4a37      	ldr	r2, [pc, #220]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ea:	e003      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80043ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80043f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004400:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800440a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800440e:	460b      	mov	r3, r1
 8004410:	4313      	orrs	r3, r2
 8004412:	d05d      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004418:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800441c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004420:	d03b      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004422:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004426:	d834      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800442c:	d037      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800442e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004432:	d82e      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004434:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004438:	d033      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800443a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800443e:	d828      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004444:	d01a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800444a:	d822      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004454:	d007      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004456:	e01c      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004458:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	4a19      	ldr	r2, [pc, #100]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800445e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004462:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004464:	e01e      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8004466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446a:	3308      	adds	r3, #8
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f001 fb04 	bl	8005a7c <RCCEx_PLL2_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800447a:	e013      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800447c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004480:	3328      	adds	r3, #40	@ 0x28
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fbab 	bl	8005be0 <RCCEx_PLL3_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004490:	e008      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8004492:	2301      	movs	r3, #1
 8004494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004498:	e004      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80044a2:	bf00      	nop
 80044a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80044b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044bc:	4a01      	ldr	r2, [pc, #4]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044be:	430b      	orrs	r3, r1
 80044c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80044c4:	58024400 	.word	0x58024400
 80044c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80044d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80044dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	d03a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 80044f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f6:	2b30      	cmp	r3, #48	@ 0x30
 80044f8:	d01f      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80044fa:	2b30      	cmp	r3, #48	@ 0x30
 80044fc:	d819      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d00c      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004502:	2b20      	cmp	r3, #32
 8004504:	d815      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d019      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800450a:	2b10      	cmp	r3, #16
 800450c:	d111      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800450e:	4baa      	ldr	r3, [pc, #680]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	4aa9      	ldr	r2, [pc, #676]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004518:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800451a:	e011      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800451c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004520:	3308      	adds	r3, #8
 8004522:	2102      	movs	r1, #2
 8004524:	4618      	mov	r0, r3
 8004526:	f001 faa9 	bl	8005a7c <RCCEx_PLL2_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800453e:	bf00      	nop
 8004540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8004548:	4b9b      	ldr	r3, [pc, #620]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800454a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	4a98      	ldr	r2, [pc, #608]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004558:	430b      	orrs	r3, r1
 800455a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800455c:	e003      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800455e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004562:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004576:	2300      	movs	r3, #0
 8004578:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800457c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004580:	460b      	mov	r3, r1
 8004582:	4313      	orrs	r3, r2
 8004584:	d051      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800458a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004590:	d035      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004596:	d82e      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004598:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800459c:	d031      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800459e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045a2:	d828      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80045a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045a8:	d01a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80045aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ae:	d822      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b8:	d007      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80045ba:	e01c      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80045bc:	4b7e      	ldr	r3, [pc, #504]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	4a7d      	ldr	r2, [pc, #500]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045c8:	e01c      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ce:	3308      	adds	r3, #8
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 fa52 	bl	8005a7c <RCCEx_PLL2_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80045de:	e011      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80045e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e4:	3328      	adds	r3, #40	@ 0x28
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 faf9 	bl	8005be0 <RCCEx_PLL3_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80045f4:	e006      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80045fc:	e002      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80045fe:	bf00      	nop
 8004600:	e000      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8004602:	bf00      	nop
 8004604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x462>
 800460c:	4b6a      	ldr	r3, [pc, #424]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800460e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004610:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461a:	4a67      	ldr	r2, [pc, #412]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800461c:	430b      	orrs	r3, r1
 800461e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004620:	e003      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004626:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800462a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004636:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800463a:	2300      	movs	r3, #0
 800463c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004640:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d053      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800464a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004654:	d033      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004656:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800465a:	d82c      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800465c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004660:	d02f      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004662:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004666:	d826      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004668:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800466c:	d02b      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800466e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004672:	d820      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004678:	d012      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800467a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800467e:	d81a      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d022      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004688:	d115      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800468a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468e:	3308      	adds	r3, #8
 8004690:	2101      	movs	r1, #1
 8004692:	4618      	mov	r0, r3
 8004694:	f001 f9f2 	bl	8005a7c <RCCEx_PLL2_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800469e:	e015      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80046a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a4:	3328      	adds	r3, #40	@ 0x28
 80046a6:	2101      	movs	r1, #1
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fa99 	bl	8005be0 <RCCEx_PLL3_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80046b4:	e00a      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80046bc:	e006      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80046be:	bf00      	nop
 80046c0:	e004      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80046c2:	bf00      	nop
 80046c4:	e002      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80046c6:	bf00      	nop
 80046c8:	e000      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80046ca:	bf00      	nop
 80046cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80046d4:	4b38      	ldr	r3, [pc, #224]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80046dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	4a35      	ldr	r2, [pc, #212]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
 80046ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80046f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80046fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004708:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800470c:	460b      	mov	r3, r1
 800470e:	4313      	orrs	r3, r2
 8004710:	d058      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004716:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800471a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800471e:	d033      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004724:	d82c      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800472a:	d02f      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004730:	d826      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004736:	d02b      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004738:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800473c:	d820      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800473e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004742:	d012      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004748:	d81a      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d022      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800474e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004752:	d115      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004758:	3308      	adds	r3, #8
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f001 f98d 	bl	8005a7c <RCCEx_PLL2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004768:	e015      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800476a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800476e:	3328      	adds	r3, #40	@ 0x28
 8004770:	2101      	movs	r1, #1
 8004772:	4618      	mov	r0, r3
 8004774:	f001 fa34 	bl	8005be0 <RCCEx_PLL3_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800477e:	e00a      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004786:	e006      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8004788:	bf00      	nop
 800478a:	e004      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800478c:	bf00      	nop
 800478e:	e002      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8004790:	bf00      	nop
 8004792:	e000      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8004794:	bf00      	nop
 8004796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10e      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800479e:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80047ae:	4a02      	ldr	r2, [pc, #8]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80047b4:	e006      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400
 80047bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80047c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80047d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047d4:	2300      	movs	r3, #0
 80047d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80047da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80047de:	460b      	mov	r3, r1
 80047e0:	4313      	orrs	r3, r2
 80047e2:	d037      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x694>
 80047e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047ee:	d00e      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80047f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f4:	d816      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d018      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80047fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047fe:	d111      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004800:	4bc4      	ldr	r3, [pc, #784]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	4ac3      	ldr	r2, [pc, #780]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800480a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800480c:	e00f      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800480e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004812:	3308      	adds	r3, #8
 8004814:	2101      	movs	r1, #1
 8004816:	4618      	mov	r0, r3
 8004818:	f001 f930 	bl	8005a7c <RCCEx_PLL2_Config>
 800481c:	4603      	mov	r3, r0
 800481e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004822:	e004      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800482a:	e000      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800482c:	bf00      	nop
 800482e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004836:	4bb7      	ldr	r3, [pc, #732]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800483e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004844:	4ab3      	ldr	r2, [pc, #716]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004846:	430b      	orrs	r3, r1
 8004848:	6513      	str	r3, [r2, #80]	@ 0x50
 800484a:	e003      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800484c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004850:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004864:	2300      	movs	r3, #0
 8004866:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800486a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800486e:	460b      	mov	r3, r1
 8004870:	4313      	orrs	r3, r2
 8004872:	d039      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487a:	2b03      	cmp	r3, #3
 800487c:	d81c      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800487e:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	080048c1 	.word	0x080048c1
 8004888:	08004895 	.word	0x08004895
 800488c:	080048a3 	.word	0x080048a3
 8004890:	080048c1 	.word	0x080048c1
 8004894:	4b9f      	ldr	r3, [pc, #636]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	4a9e      	ldr	r2, [pc, #632]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800489a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800489e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048a0:	e00f      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80048a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a6:	3308      	adds	r3, #8
 80048a8:	2102      	movs	r1, #2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 f8e6 	bl	8005a7c <RCCEx_PLL2_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80048b6:	e004      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80048b8:	2301      	movs	r3, #1
 80048ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80048be:	e000      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80048c0:	bf00      	nop
 80048c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10a      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
 80048ca:	4b92      	ldr	r3, [pc, #584]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ce:	f023 0103 	bic.w	r1, r3, #3
 80048d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d8:	4a8e      	ldr	r2, [pc, #568]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048de:	e003      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80048e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80048e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80048f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048f8:	2300      	movs	r3, #0
 80048fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004902:	460b      	mov	r3, r1
 8004904:	4313      	orrs	r3, r2
 8004906:	f000 8099 	beq.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800490a:	4b83      	ldr	r3, [pc, #524]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a82      	ldr	r2, [pc, #520]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	f7fc ff19 	bl	800174c <HAL_GetTick>
 800491a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 800491e:	e00b      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8004920:	f7fc ff14 	bl	800174c <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b64      	cmp	r3, #100	@ 0x64
 800492e:	d903      	bls.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8004930:	2303      	movs	r3, #3
 8004932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004936:	e005      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x784>
 8004938:	4b77      	ldr	r3, [pc, #476]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ed      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004948:	2b00      	cmp	r3, #0
 800494a:	d173      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800494c:	4b71      	ldr	r3, [pc, #452]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800494e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004958:	4053      	eors	r3, r2
 800495a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d015      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004962:	4b6c      	ldr	r3, [pc, #432]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800496a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800496e:	4b69      	ldr	r3, [pc, #420]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004972:	4a68      	ldr	r2, [pc, #416]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004978:	6713      	str	r3, [r2, #112]	@ 0x70
 800497a:	4b66      	ldr	r3, [pc, #408]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497e:	4a65      	ldr	r2, [pc, #404]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004984:	6713      	str	r3, [r2, #112]	@ 0x70
 8004986:	4a63      	ldr	r2, [pc, #396]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800498c:	6713      	str	r3, [r2, #112]	@ 0x70
 800498e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004992:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800499a:	d118      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800499c:	f7fc fed6 	bl	800174c <HAL_GetTick>
 80049a0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 80049a4:	e00d      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80049a6:	f7fc fed1 	bl	800174c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80049b0:	1ad2      	subs	r2, r2, r3
 80049b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d903      	bls.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80049ba:	2303      	movs	r3, #3
 80049bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80049c0:	e005      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80049c2:	4b54      	ldr	r3, [pc, #336]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0eb      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80049ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d129      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80049d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80049de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e6:	d10e      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80049e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80049f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80049f8:	091a      	lsrs	r2, r3, #4
 80049fa:	4b48      	ldr	r3, [pc, #288]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	4a45      	ldr	r2, [pc, #276]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a00:	430b      	orrs	r3, r1
 8004a02:	6113      	str	r3, [r2, #16]
 8004a04:	e005      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004a06:	4b43      	ldr	r3, [pc, #268]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	4a42      	ldr	r2, [pc, #264]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004a10:	6113      	str	r3, [r2, #16]
 8004a12:	4b40      	ldr	r3, [pc, #256]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a22:	4a3c      	ldr	r2, [pc, #240]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a28:	e008      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8004a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004a32:	e003      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8004a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f002 0301 	and.w	r3, r2, #1
 8004a48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f000 808f 	beq.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 8004a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a64:	2b28      	cmp	r3, #40	@ 0x28
 8004a66:	d871      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004a68:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004b55 	.word	0x08004b55
 8004a74:	08004b4d 	.word	0x08004b4d
 8004a78:	08004b4d 	.word	0x08004b4d
 8004a7c:	08004b4d 	.word	0x08004b4d
 8004a80:	08004b4d 	.word	0x08004b4d
 8004a84:	08004b4d 	.word	0x08004b4d
 8004a88:	08004b4d 	.word	0x08004b4d
 8004a8c:	08004b4d 	.word	0x08004b4d
 8004a90:	08004b21 	.word	0x08004b21
 8004a94:	08004b4d 	.word	0x08004b4d
 8004a98:	08004b4d 	.word	0x08004b4d
 8004a9c:	08004b4d 	.word	0x08004b4d
 8004aa0:	08004b4d 	.word	0x08004b4d
 8004aa4:	08004b4d 	.word	0x08004b4d
 8004aa8:	08004b4d 	.word	0x08004b4d
 8004aac:	08004b4d 	.word	0x08004b4d
 8004ab0:	08004b37 	.word	0x08004b37
 8004ab4:	08004b4d 	.word	0x08004b4d
 8004ab8:	08004b4d 	.word	0x08004b4d
 8004abc:	08004b4d 	.word	0x08004b4d
 8004ac0:	08004b4d 	.word	0x08004b4d
 8004ac4:	08004b4d 	.word	0x08004b4d
 8004ac8:	08004b4d 	.word	0x08004b4d
 8004acc:	08004b4d 	.word	0x08004b4d
 8004ad0:	08004b55 	.word	0x08004b55
 8004ad4:	08004b4d 	.word	0x08004b4d
 8004ad8:	08004b4d 	.word	0x08004b4d
 8004adc:	08004b4d 	.word	0x08004b4d
 8004ae0:	08004b4d 	.word	0x08004b4d
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004b4d 	.word	0x08004b4d
 8004aec:	08004b4d 	.word	0x08004b4d
 8004af0:	08004b55 	.word	0x08004b55
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004b4d 	.word	0x08004b4d
 8004b00:	08004b4d 	.word	0x08004b4d
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b4d 	.word	0x08004b4d
 8004b0c:	08004b4d 	.word	0x08004b4d
 8004b10:	08004b55 	.word	0x08004b55
 8004b14:	58024400 	.word	0x58024400
 8004b18:	58024800 	.word	0x58024800
 8004b1c:	00ffffcf 	.word	0x00ffffcf
 8004b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b24:	3308      	adds	r3, #8
 8004b26:	2101      	movs	r1, #1
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 ffa7 	bl	8005a7c <RCCEx_PLL2_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004b34:	e00f      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x996>
 8004b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3a:	3328      	adds	r3, #40	@ 0x28
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 f84e 	bl	8005be0 <RCCEx_PLL3_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004b4a:	e004      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x996>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x996>
 8004b54:	bf00      	nop
 8004b56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8004b5e:	4bbf      	ldr	r3, [pc, #764]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b62:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b6c:	4abb      	ldr	r2, [pc, #748]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b72:	e003      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 8004b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f002 0302 	and.w	r3, r2, #2
 8004b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	d041      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d824      	bhi.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004bf9 	.word	0x08004bf9
 8004bb0:	08004bc5 	.word	0x08004bc5
 8004bb4:	08004bdb 	.word	0x08004bdb
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004bf9 	.word	0x08004bf9
 8004bc0:	08004bf9 	.word	0x08004bf9
 8004bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc8:	3308      	adds	r3, #8
 8004bca:	2101      	movs	r1, #1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 ff55 	bl	8005a7c <RCCEx_PLL2_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004bd8:	e00f      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8004bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bde:	3328      	adds	r3, #40	@ 0x28
 8004be0:	2101      	movs	r1, #1
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fffc 	bl	8005be0 <RCCEx_PLL3_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004bee:	e004      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004bf6:	e000      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8004bf8:	bf00      	nop
 8004bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8004c02:	4b96      	ldr	r3, [pc, #600]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c06:	f023 0107 	bic.w	r1, r3, #7
 8004c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c10:	4a92      	ldr	r2, [pc, #584]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c12:	430b      	orrs	r3, r1
 8004c14:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c16:	e003      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f002 0304 	and.w	r3, r2, #4
 8004c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	d044      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c48:	2b05      	cmp	r3, #5
 8004c4a:	d825      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c54 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004ca1 	.word	0x08004ca1
 8004c58:	08004c6d 	.word	0x08004c6d
 8004c5c:	08004c83 	.word	0x08004c83
 8004c60:	08004ca1 	.word	0x08004ca1
 8004c64:	08004ca1 	.word	0x08004ca1
 8004c68:	08004ca1 	.word	0x08004ca1
 8004c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c70:	3308      	adds	r3, #8
 8004c72:	2101      	movs	r1, #1
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 ff01 	bl	8005a7c <RCCEx_PLL2_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004c80:	e00f      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8004c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c86:	3328      	adds	r3, #40	@ 0x28
 8004c88:	2101      	movs	r1, #1
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 ffa8 	bl	8005be0 <RCCEx_PLL3_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004c96:	e004      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8004ca0:	bf00      	nop
 8004ca2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004caa:	4b6c      	ldr	r3, [pc, #432]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	f023 0107 	bic.w	r1, r3, #7
 8004cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	4a68      	ldr	r2, [pc, #416]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cc0:	e003      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f002 0320 	and.w	r3, r2, #32
 8004cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ce0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	d055      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8004cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cf6:	d033      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cfc:	d82c      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d02:	d02f      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d08:	d826      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d0e:	d02b      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004d10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d14:	d820      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d1a:	d012      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d20:	d81a      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d022      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004d26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d2a:	d115      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d30:	3308      	adds	r3, #8
 8004d32:	2100      	movs	r1, #0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fea1 	bl	8005a7c <RCCEx_PLL2_Config>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004d40:	e015      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d46:	3328      	adds	r3, #40	@ 0x28
 8004d48:	2102      	movs	r1, #2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 ff48 	bl	8005be0 <RCCEx_PLL3_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004d56:	e00a      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004d5e:	e006      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004d60:	bf00      	nop
 8004d62:	e004      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004d64:	bf00      	nop
 8004d66:	e002      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004d68:	bf00      	nop
 8004d6a:	e000      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004d6c:	bf00      	nop
 8004d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
 8004d76:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d86:	4a35      	ldr	r2, [pc, #212]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d8c:	e003      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8004d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004da2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004db0:	460b      	mov	r3, r1
 8004db2:	4313      	orrs	r3, r2
 8004db4:	d058      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dbe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004dc2:	d033      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004dc4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004dc8:	d82c      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dce:	d02f      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd4:	d826      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004dd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dda:	d02b      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004ddc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004de0:	d820      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004de6:	d012      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dec:	d81a      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d022      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df6:	d115      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fe3b 	bl	8005a7c <RCCEx_PLL2_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004e0c:	e015      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e12:	3328      	adds	r3, #40	@ 0x28
 8004e14:	2102      	movs	r1, #2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fee2 	bl	8005be0 <RCCEx_PLL3_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004e22:	e00a      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004e2a:	e006      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004e2c:	bf00      	nop
 8004e2e:	e004      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004e30:	bf00      	nop
 8004e32:	e002      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004e34:	bf00      	nop
 8004e36:	e000      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004e38:	bf00      	nop
 8004e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10e      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>
 8004e42:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e52:	4a02      	ldr	r2, [pc, #8]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e58:	e006      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004e5a:	bf00      	nop
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004e74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e82:	460b      	mov	r3, r1
 8004e84:	4313      	orrs	r3, r2
 8004e86:	d055      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8004e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004e94:	d033      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004e96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004e9a:	d82c      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea0:	d02f      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea6:	d826      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ea8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004eac:	d02b      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004eae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004eb2:	d820      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004eb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb8:	d012      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004eba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ebe:	d81a      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d022      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec8:	d115      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ece:	3308      	adds	r3, #8
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fdd2 	bl	8005a7c <RCCEx_PLL2_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004ede:	e015      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8004ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee4:	3328      	adds	r3, #40	@ 0x28
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fe79 	bl	8005be0 <RCCEx_PLL3_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8004efc:	e006      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8004efe:	bf00      	nop
 8004f00:	e004      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8004f02:	bf00      	nop
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8004f06:	bf00      	nop
 8004f08:	e000      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8004f0a:	bf00      	nop
 8004f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10b      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8004f14:	4ba0      	ldr	r3, [pc, #640]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f24:	4a9c      	ldr	r2, [pc, #624]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f2a:	e003      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8004f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f002 0308 	and.w	r3, r2, #8
 8004f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f44:	2300      	movs	r3, #0
 8004f46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	d01e      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	3328      	adds	r3, #40	@ 0x28
 8004f68:	2102      	movs	r1, #2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fe38 	bl	8005be0 <RCCEx_PLL3_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004f7c:	4b86      	ldr	r3, [pc, #536]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f8c:	4a82      	ldr	r2, [pc, #520]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	f002 0310 	and.w	r3, r2, #16
 8004f9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fa8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004fac:	460b      	mov	r3, r1
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	d01e      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
 8004fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fbe:	d10c      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc4:	3328      	adds	r3, #40	@ 0x28
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fe09 	bl	8005be0 <RCCEx_PLL3_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004fda:	4b6f      	ldr	r3, [pc, #444]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fea:	4a6b      	ldr	r2, [pc, #428]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fec:	430b      	orrs	r3, r1
 8004fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004ffc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ffe:	2300      	movs	r3, #0
 8005000:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005002:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005006:	460b      	mov	r3, r1
 8005008:	4313      	orrs	r3, r2
 800500a:	d03e      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xeca>
 800500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005010:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005018:	d022      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800501a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800501e:	d81b      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005028:	d00b      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800502a:	e015      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800502c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005030:	3308      	adds	r3, #8
 8005032:	2100      	movs	r1, #0
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fd21 	bl	8005a7c <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8005040:	e00f      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8005042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005046:	3328      	adds	r3, #40	@ 0x28
 8005048:	2102      	movs	r1, #2
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fdc8 	bl	8005be0 <RCCEx_PLL3_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8005056:	e004      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8005058:	2301      	movs	r3, #1
 800505a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800505e:	e000      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8005060:	bf00      	nop
 8005062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10b      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xec2>
 800506a:	4b4b      	ldr	r3, [pc, #300]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005076:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800507a:	4a47      	ldr	r2, [pc, #284]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800507c:	430b      	orrs	r3, r1
 800507e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005080:	e003      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xeca>
 8005082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005086:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800508a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005096:	673b      	str	r3, [r7, #112]	@ 0x70
 8005098:	2300      	movs	r3, #0
 800509a:	677b      	str	r3, [r7, #116]	@ 0x74
 800509c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80050a0:	460b      	mov	r3, r1
 80050a2:	4313      	orrs	r3, r2
 80050a4:	d03b      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 80050a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050b2:	d01f      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80050b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050b8:	d818      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80050ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050be:	d003      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80050c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050c4:	d007      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80050c6:	e011      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80050c8:	4b33      	ldr	r3, [pc, #204]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	4a32      	ldr	r2, [pc, #200]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050d4:	e00f      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 80050d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050da:	3328      	adds	r3, #40	@ 0x28
 80050dc:	2101      	movs	r1, #1
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fd7e 	bl	8005be0 <RCCEx_PLL3_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80050ea:	e004      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80050f2:	e000      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 80050f4:	bf00      	nop
 80050f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10b      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xf56>
 80050fe:	4b26      	ldr	r3, [pc, #152]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005102:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800510e:	4a22      	ldr	r2, [pc, #136]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005110:	430b      	orrs	r3, r1
 8005112:	6553      	str	r3, [r2, #84]	@ 0x54
 8005114:	e003      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 8005116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800511a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800512a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800512c:	2300      	movs	r3, #0
 800512e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005130:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005134:	460b      	mov	r3, r1
 8005136:	4313      	orrs	r3, r2
 8005138:	d034      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800513a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005148:	d007      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800514a:	e011      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 800514c:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	4a11      	ldr	r2, [pc, #68]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005156:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005158:	e00e      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800515a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515e:	3308      	adds	r3, #8
 8005160:	2102      	movs	r1, #2
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fc8a 	bl	8005a7c <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800516e:	e003      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8005176:	bf00      	nop
 8005178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10d      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
 8005180:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005184:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800518e:	4a02      	ldr	r2, [pc, #8]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005190:	430b      	orrs	r3, r1
 8005192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80051a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80051b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80051b2:	2300      	movs	r3, #0
 80051b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80051b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d00c      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x101a>
 80051c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c4:	3328      	adds	r3, #40	@ 0x28
 80051c6:	2102      	movs	r1, #2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fd09 	bl	8005be0 <RCCEx_PLL3_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x101a>
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80051e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051e8:	2300      	movs	r3, #0
 80051ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80051f0:	460b      	mov	r3, r1
 80051f2:	4313      	orrs	r3, r2
 80051f4:	d036      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 80051f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005200:	d018      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005206:	d811      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520c:	d014      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800520e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005212:	d80b      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d011      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800521c:	d106      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800521e:	4bb7      	ldr	r3, [pc, #732]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	4ab6      	ldr	r2, [pc, #728]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005228:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800522a:	e008      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800522c:	2301      	movs	r3, #1
 800522e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8005232:	e004      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005234:	bf00      	nop
 8005236:	e002      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005238:	bf00      	nop
 800523a:	e000      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800523c:	bf00      	nop
 800523e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x109c>
 8005246:	4bad      	ldr	r3, [pc, #692]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800524e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005254:	4aa9      	ldr	r2, [pc, #676]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005256:	430b      	orrs	r3, r1
 8005258:	6553      	str	r3, [r2, #84]	@ 0x54
 800525a:	e003      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 800525c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005260:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005270:	653b      	str	r3, [r7, #80]	@ 0x50
 8005272:	2300      	movs	r3, #0
 8005274:	657b      	str	r3, [r7, #84]	@ 0x54
 8005276:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800527a:	460b      	mov	r3, r1
 800527c:	4313      	orrs	r3, r2
 800527e:	d009      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
 8005280:	4b9e      	ldr	r3, [pc, #632]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005284:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	4a9b      	ldr	r2, [pc, #620]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005290:	430b      	orrs	r3, r1
 8005292:	6513      	str	r3, [r2, #80]	@ 0x50
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80052a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a2:	2300      	movs	r3, #0
 80052a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80052aa:	460b      	mov	r3, r1
 80052ac:	4313      	orrs	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
 80052b0:	4b92      	ldr	r3, [pc, #584]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052be:	4a8f      	ldr	r2, [pc, #572]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052c0:	430b      	orrs	r3, r1
 80052c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80052c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80052d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052d2:	2300      	movs	r3, #0
 80052d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80052da:	460b      	mov	r3, r1
 80052dc:	4313      	orrs	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
 80052e0:	4b86      	ldr	r3, [pc, #536]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	4a85      	ldr	r2, [pc, #532]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052ea:	6113      	str	r3, [r2, #16]
 80052ec:	4b83      	ldr	r3, [pc, #524]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052ee:	6919      	ldr	r1, [r3, #16]
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052f8:	4a80      	ldr	r2, [pc, #512]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6113      	str	r3, [r2, #16]
 80052fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800530a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800530c:	2300      	movs	r3, #0
 800530e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005310:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005314:	460b      	mov	r3, r1
 8005316:	4313      	orrs	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x116e>
 800531a:	4b78      	ldr	r3, [pc, #480]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800531c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005328:	4a74      	ldr	r2, [pc, #464]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800532a:	430b      	orrs	r3, r1
 800532c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800532e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800533a:	633b      	str	r3, [r7, #48]	@ 0x30
 800533c:	2300      	movs	r3, #0
 800533e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005340:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005344:	460b      	mov	r3, r1
 8005346:	4313      	orrs	r3, r2
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
 800534a:	4b6c      	ldr	r3, [pc, #432]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800534c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	4a68      	ldr	r2, [pc, #416]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800535c:	430b      	orrs	r3, r1
 800535e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	2100      	movs	r1, #0
 800536a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005372:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	d011      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005380:	3308      	adds	r3, #8
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fb79 	bl	8005a7c <RCCEx_PLL2_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8005390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 8005398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800539c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80053a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	2100      	movs	r1, #0
 80053aa:	6239      	str	r1, [r7, #32]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80053b6:	460b      	mov	r3, r1
 80053b8:	4313      	orrs	r3, r2
 80053ba:	d011      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c0:	3308      	adds	r3, #8
 80053c2:	2101      	movs	r1, #1
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fb59 	bl	8005a7c <RCCEx_PLL2_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80053d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 80053d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	2100      	movs	r1, #0
 80053ea:	61b9      	str	r1, [r7, #24]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80053f6:	460b      	mov	r3, r1
 80053f8:	4313      	orrs	r3, r2
 80053fa:	d011      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80053fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005400:	3308      	adds	r3, #8
 8005402:	2102      	movs	r1, #2
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fb39 	bl	8005a7c <RCCEx_PLL2_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8005410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800541c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	2100      	movs	r1, #0
 800542a:	6139      	str	r1, [r7, #16]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005436:	460b      	mov	r3, r1
 8005438:	4313      	orrs	r3, r2
 800543a:	d011      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 800543c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005440:	3328      	adds	r3, #40	@ 0x28
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fbcb 	bl	8005be0 <RCCEx_PLL3_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8005450:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 8005458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800545c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	2100      	movs	r1, #0
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005476:	460b      	mov	r3, r1
 8005478:	4313      	orrs	r3, r2
 800547a:	d011      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800547c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005480:	3328      	adds	r3, #40	@ 0x28
 8005482:	2101      	movs	r1, #1
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fbab 	bl	8005be0 <RCCEx_PLL3_Config>
 800548a:	4603      	mov	r3, r0
 800548c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8005490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800549c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80054a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	2100      	movs	r1, #0
 80054aa:	6039      	str	r1, [r7, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80054b6:	460b      	mov	r3, r1
 80054b8:	4313      	orrs	r3, r2
 80054ba:	d011      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	3328      	adds	r3, #40	@ 0x28
 80054c2:	2102      	movs	r1, #2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fb8b 	bl	8005be0 <RCCEx_PLL3_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80054d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80054d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80054e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80054e8:	2300      	movs	r3, #0
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80054ec:	2301      	movs	r3, #1
 80054ee:	4618      	mov	r0, r3
 80054f0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80054f4:	46bd      	mov	sp, r7
 80054f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fa:	bf00      	nop
 80054fc:	58024400 	.word	0x58024400

08005500 <HAL_RCCEx_GetD3PCLK1Freq>:
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
 8005504:	f7fe fe00 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8005508:	4602      	mov	r2, r0
 800550a:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	4904      	ldr	r1, [pc, #16]	@ (8005528 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005516:	5ccb      	ldrb	r3, [r1, r3]
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
 8005520:	4618      	mov	r0, r3
 8005522:	bd80      	pop	{r7, pc}
 8005524:	58024400 	.word	0x58024400
 8005528:	0800b544 	.word	0x0800b544

0800552c <HAL_RCCEx_GetPLL2ClockFreq>:
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	@ 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	4ba1      	ldr	r3, [pc, #644]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	4b9f      	ldr	r3, [pc, #636]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	0b1b      	lsrs	r3, r3, #12
 8005544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	4b9c      	ldr	r3, [pc, #624]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	4b99      	ldr	r3, [pc, #612]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	edc7 7a03 	vstr	s15, [r7, #12]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8111 	beq.w	800579c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b02      	cmp	r3, #2
 800557e:	f000 8083 	beq.w	8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b02      	cmp	r3, #2
 8005586:	f200 80a1 	bhi.w	80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d056      	beq.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005596:	e099      	b.n	80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005598:	4b88      	ldr	r3, [pc, #544]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02d      	beq.n	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
 80055a4:	4b85      	ldr	r3, [pc, #532]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	4a84      	ldr	r2, [pc, #528]	@ (80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ce:	4b7b      	ldr	r3, [pc, #492]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a03 	vldr	s12, [r7, #12]
 80055e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
 80055fe:	e087      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80057c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b6a      	ldr	r3, [pc, #424]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	ed97 6a03 	vldr	s12, [r7, #12]
 8005626:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
 8005642:	e065      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80057cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005656:	4b59      	ldr	r3, [pc, #356]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005666:	ed97 6a03 	vldr	s12, [r7, #12]
 800566a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800566e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800567a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a07 	vstr	s15, [r7, #28]
 8005686:	e043      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569a:	4b48      	ldr	r3, [pc, #288]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a07 	vstr	s15, [r7, #28]
 80056ca:	e021      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80057cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b37      	ldr	r3, [pc, #220]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
 800570e:	bf00      	nop
 8005710:	4b2a      	ldr	r3, [pc, #168]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005714:	0a5b      	lsrs	r3, r3, #9
 8005716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800572a:	edd7 6a07 	vldr	s13, [r7, #28]
 800572e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005736:	ee17 2a90 	vmov	r2, s15
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	4b1f      	ldr	r3, [pc, #124]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005758:	edd7 6a07 	vldr	s13, [r7, #28]
 800575c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005764:	ee17 2a90 	vmov	r2, s15
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	4b13      	ldr	r3, [pc, #76]	@ (80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800576e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005770:	0e1b      	lsrs	r3, r3, #24
 8005772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005786:	edd7 6a07 	vldr	s13, [r7, #28]
 800578a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005792:	ee17 2a90 	vmov	r2, s15
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	609a      	str	r2, [r3, #8]
 800579a:	e008      	b.n	80057ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	605a      	str	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	bf00      	nop
 80057b0:	3724      	adds	r7, #36	@ 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	03d09000 	.word	0x03d09000
 80057c4:	46000000 	.word	0x46000000
 80057c8:	4c742400 	.word	0x4c742400
 80057cc:	4a742400 	.word	0x4a742400
 80057d0:	4bbebc20 	.word	0x4bbebc20

080057d4 <HAL_RCCEx_GetPLL3ClockFreq>:
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	@ 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	4ba1      	ldr	r3, [pc, #644]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	4b9f      	ldr	r3, [pc, #636]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	0d1b      	lsrs	r3, r3, #20
 80057ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	4b9c      	ldr	r3, [pc, #624]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	4b99      	ldr	r3, [pc, #612]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	edc7 7a03 	vstr	s15, [r7, #12]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8111 	beq.w	8005a44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b02      	cmp	r3, #2
 8005826:	f000 8083 	beq.w	8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b02      	cmp	r3, #2
 800582e:	f200 80a1 	bhi.w	8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d056      	beq.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800583e:	e099      	b.n	8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005840:	4b88      	ldr	r3, [pc, #544]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d02d      	beq.n	80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
 800584c:	4b85      	ldr	r3, [pc, #532]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	08db      	lsrs	r3, r3, #3
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	4a84      	ldr	r2, [pc, #528]	@ (8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b7b      	ldr	r3, [pc, #492]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a03 	vldr	s12, [r7, #12]
 800588a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
 80058a6:	e087      	b.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005a70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
 80058ea:	e065      	b.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b59      	ldr	r3, [pc, #356]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005912:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
 800592e:	e043      	b.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b48      	ldr	r3, [pc, #288]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a03 	vldr	s12, [r7, #12]
 8005956:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
 8005972:	e021      	b.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005986:	4b37      	ldr	r3, [pc, #220]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	ed97 6a03 	vldr	s12, [r7, #12]
 800599a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800599e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	edc7 7a07 	vstr	s15, [r7, #28]
 80059b6:	bf00      	nop
 80059b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	0a5b      	lsrs	r3, r3, #9
 80059be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059de:	ee17 2a90 	vmov	r2, s15
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	0c1b      	lsrs	r3, r3, #16
 80059ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0c:	ee17 2a90 	vmov	r2, s15
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	605a      	str	r2, [r3, #4]
 8005a14:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3a:	ee17 2a90 	vmov	r2, s15
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	609a      	str	r2, [r3, #8]
 8005a42:	e008      	b.n	8005a56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	605a      	str	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	609a      	str	r2, [r3, #8]
 8005a56:	bf00      	nop
 8005a58:	3724      	adds	r7, #36	@ 0x24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	58024400 	.word	0x58024400
 8005a68:	03d09000 	.word	0x03d09000
 8005a6c:	46000000 	.word	0x46000000
 8005a70:	4c742400 	.word	0x4c742400
 8005a74:	4a742400 	.word	0x4a742400
 8005a78:	4bbebc20 	.word	0x4bbebc20

08005a7c <RCCEx_PLL2_Config>:
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
 8005a8a:	4b53      	ldr	r3, [pc, #332]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d101      	bne.n	8005a9a <RCCEx_PLL2_Config+0x1e>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e099      	b.n	8005bce <RCCEx_PLL2_Config+0x152>
 8005a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005aa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	f7fb fe51 	bl	800174c <HAL_GetTick>
 8005aaa:	60b8      	str	r0, [r7, #8]
 8005aac:	e008      	b.n	8005ac0 <RCCEx_PLL2_Config+0x44>
 8005aae:	f7fb fe4d 	bl	800174c <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <RCCEx_PLL2_Config+0x44>
 8005abc:	2303      	movs	r3, #3
 8005abe:	e086      	b.n	8005bce <RCCEx_PLL2_Config+0x152>
 8005ac0:	4b45      	ldr	r3, [pc, #276]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f0      	bne.n	8005aae <RCCEx_PLL2_Config+0x32>
 8005acc:	4b42      	ldr	r3, [pc, #264]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	031b      	lsls	r3, r3, #12
 8005ada:	493f      	ldr	r1, [pc, #252]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	025b      	lsls	r3, r3, #9
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	061b      	lsls	r3, r3, #24
 8005b0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b10:	4931      	ldr	r1, [pc, #196]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	638b      	str	r3, [r1, #56]	@ 0x38
 8005b16:	4b30      	ldr	r3, [pc, #192]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	492d      	ldr	r1, [pc, #180]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005b28:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	f023 0220 	bic.w	r2, r3, #32
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	4928      	ldr	r1, [pc, #160]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005b3a:	4b27      	ldr	r3, [pc, #156]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3e:	4a26      	ldr	r2, [pc, #152]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b40:	f023 0310 	bic.w	r3, r3, #16
 8005b44:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b46:	4b24      	ldr	r3, [pc, #144]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b4a:	4b24      	ldr	r3, [pc, #144]	@ (8005bdc <RCCEx_PLL2_Config+0x160>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	69d2      	ldr	r2, [r2, #28]
 8005b52:	00d2      	lsls	r2, r2, #3
 8005b54:	4920      	ldr	r1, [pc, #128]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8005b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b60:	f043 0310 	orr.w	r3, r3, #16
 8005b64:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <RCCEx_PLL2_Config+0xfe>
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b70:	4a19      	ldr	r2, [pc, #100]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b78:	e00f      	b.n	8005b9a <RCCEx_PLL2_Config+0x11e>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d106      	bne.n	8005b8e <RCCEx_PLL2_Config+0x112>
 8005b80:	4b15      	ldr	r3, [pc, #84]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	4a14      	ldr	r2, [pc, #80]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b8c:	e005      	b.n	8005b9a <RCCEx_PLL2_Config+0x11e>
 8005b8e:	4b12      	ldr	r3, [pc, #72]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b92:	4a11      	ldr	r2, [pc, #68]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005ba0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	f7fb fdd1 	bl	800174c <HAL_GetTick>
 8005baa:	60b8      	str	r0, [r7, #8]
 8005bac:	e008      	b.n	8005bc0 <RCCEx_PLL2_Config+0x144>
 8005bae:	f7fb fdcd 	bl	800174c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <RCCEx_PLL2_Config+0x144>
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e006      	b.n	8005bce <RCCEx_PLL2_Config+0x152>
 8005bc0:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <RCCEx_PLL2_Config+0x15c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0f0      	beq.n	8005bae <RCCEx_PLL2_Config+0x132>
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	58024400 	.word	0x58024400
 8005bdc:	ffff0007 	.word	0xffff0007

08005be0 <RCCEx_PLL3_Config>:
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
 8005bee:	4b53      	ldr	r3, [pc, #332]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d101      	bne.n	8005bfe <RCCEx_PLL3_Config+0x1e>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e099      	b.n	8005d32 <RCCEx_PLL3_Config+0x152>
 8005bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a4e      	ldr	r2, [pc, #312]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	f7fb fd9f 	bl	800174c <HAL_GetTick>
 8005c0e:	60b8      	str	r0, [r7, #8]
 8005c10:	e008      	b.n	8005c24 <RCCEx_PLL3_Config+0x44>
 8005c12:	f7fb fd9b 	bl	800174c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <RCCEx_PLL3_Config+0x44>
 8005c20:	2303      	movs	r3, #3
 8005c22:	e086      	b.n	8005d32 <RCCEx_PLL3_Config+0x152>
 8005c24:	4b45      	ldr	r3, [pc, #276]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f0      	bne.n	8005c12 <RCCEx_PLL3_Config+0x32>
 8005c30:	4b42      	ldr	r3, [pc, #264]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	051b      	lsls	r3, r3, #20
 8005c3e:	493f      	ldr	r1, [pc, #252]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	025b      	lsls	r3, r3, #9
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	061b      	lsls	r3, r3, #24
 8005c70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c74:	4931      	ldr	r1, [pc, #196]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	640b      	str	r3, [r1, #64]	@ 0x40
 8005c7a:	4b30      	ldr	r3, [pc, #192]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	492d      	ldr	r1, [pc, #180]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	4928      	ldr	r1, [pc, #160]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005c9e:	4b27      	ldr	r3, [pc, #156]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	4a26      	ldr	r2, [pc, #152]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005caa:	4b24      	ldr	r3, [pc, #144]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cae:	4b24      	ldr	r3, [pc, #144]	@ (8005d40 <RCCEx_PLL3_Config+0x160>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	69d2      	ldr	r2, [r2, #28]
 8005cb6:	00d2      	lsls	r2, r2, #3
 8005cb8:	4920      	ldr	r1, [pc, #128]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	644b      	str	r3, [r1, #68]	@ 0x44
 8005cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <RCCEx_PLL3_Config+0xfe>
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	4a19      	ldr	r2, [pc, #100]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005cda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cdc:	e00f      	b.n	8005cfe <RCCEx_PLL3_Config+0x11e>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d106      	bne.n	8005cf2 <RCCEx_PLL3_Config+0x112>
 8005ce4:	4b15      	ldr	r3, [pc, #84]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	4a14      	ldr	r2, [pc, #80]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cf0:	e005      	b.n	8005cfe <RCCEx_PLL3_Config+0x11e>
 8005cf2:	4b12      	ldr	r3, [pc, #72]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	4a11      	ldr	r2, [pc, #68]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005cf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a0e      	ldr	r2, [pc, #56]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	f7fb fd1f 	bl	800174c <HAL_GetTick>
 8005d0e:	60b8      	str	r0, [r7, #8]
 8005d10:	e008      	b.n	8005d24 <RCCEx_PLL3_Config+0x144>
 8005d12:	f7fb fd1b 	bl	800174c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <RCCEx_PLL3_Config+0x144>
 8005d20:	2303      	movs	r3, #3
 8005d22:	e006      	b.n	8005d32 <RCCEx_PLL3_Config+0x152>
 8005d24:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <RCCEx_PLL3_Config+0x15c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <RCCEx_PLL3_Config+0x132>
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	ffff0007 	.word	0xffff0007

08005d44 <HAL_TIM_PWM_Init>:
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_TIM_PWM_Init+0x12>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e049      	b.n	8005dea <HAL_TIM_PWM_Init+0xa6>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <HAL_TIM_PWM_Init+0x2c>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fb f950 	bl	8001010 <HAL_TIM_PWM_MspInit>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f000 fa66 	bl	8006254 <TIM_Base_SetConfig>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005de8:	2300      	movs	r3, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <HAL_TIM_PWM_Start>:
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d109      	bne.n	8005e18 <HAL_TIM_PWM_Start+0x24>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	e03c      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d109      	bne.n	8005e32 <HAL_TIM_PWM_Start+0x3e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	bf14      	ite	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	2300      	moveq	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	e02f      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d109      	bne.n	8005e4c <HAL_TIM_PWM_Start+0x58>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	bf14      	ite	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	2300      	moveq	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e022      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b0c      	cmp	r3, #12
 8005e50:	d109      	bne.n	8005e66 <HAL_TIM_PWM_Start+0x72>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	bf14      	ite	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	2300      	moveq	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	e015      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d109      	bne.n	8005e80 <HAL_TIM_PWM_Start+0x8c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	e008      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_TIM_PWM_Start+0xa6>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e0ab      	b.n	8005ff2 <HAL_TIM_PWM_Start+0x1fe>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_PWM_Start+0xb6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ea8:	e023      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Start+0xc6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005eb8:	e01b      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xd6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec8:	e013      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b0c      	cmp	r3, #12
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xe6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ed8:	e00b      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0xf6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ee8:	e003      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fd2c 	bl	8006958 <TIM_CCxChannelCmd>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a3d      	ldr	r2, [pc, #244]	@ (8005ffc <HAL_TIM_PWM_Start+0x208>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x13e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3c      	ldr	r2, [pc, #240]	@ (8006000 <HAL_TIM_PWM_Start+0x20c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x13e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a3a      	ldr	r2, [pc, #232]	@ (8006004 <HAL_TIM_PWM_Start+0x210>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x13e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a39      	ldr	r2, [pc, #228]	@ (8006008 <HAL_TIM_PWM_Start+0x214>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIM_PWM_Start+0x13e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a37      	ldr	r2, [pc, #220]	@ (800600c <HAL_TIM_PWM_Start+0x218>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_PWM_Start+0x142>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <HAL_TIM_PWM_Start+0x144>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <HAL_TIM_PWM_Start+0x158>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2a      	ldr	r2, [pc, #168]	@ (8005ffc <HAL_TIM_PWM_Start+0x208>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d02c      	beq.n	8005fb0 <HAL_TIM_PWM_Start+0x1bc>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f5e:	d027      	beq.n	8005fb0 <HAL_TIM_PWM_Start+0x1bc>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	@ (8006010 <HAL_TIM_PWM_Start+0x21c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <HAL_TIM_PWM_Start+0x1bc>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a29      	ldr	r2, [pc, #164]	@ (8006014 <HAL_TIM_PWM_Start+0x220>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d01d      	beq.n	8005fb0 <HAL_TIM_PWM_Start+0x1bc>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a27      	ldr	r2, [pc, #156]	@ (8006018 <HAL_TIM_PWM_Start+0x224>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <HAL_TIM_PWM_Start+0x1bc>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1f      	ldr	r2, [pc, #124]	@ (8006000 <HAL_TIM_PWM_Start+0x20c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_TIM_PWM_Start+0x1bc>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a23      	ldr	r2, [pc, #140]	@ (800601c <HAL_TIM_PWM_Start+0x228>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_TIM_PWM_Start+0x1bc>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1b      	ldr	r2, [pc, #108]	@ (8006004 <HAL_TIM_PWM_Start+0x210>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_TIM_PWM_Start+0x1bc>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <HAL_TIM_PWM_Start+0x22c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_TIM_PWM_Start+0x1bc>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1e      	ldr	r2, [pc, #120]	@ (8006024 <HAL_TIM_PWM_Start+0x230>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d115      	bne.n	8005fdc <HAL_TIM_PWM_Start+0x1e8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8006028 <HAL_TIM_PWM_Start+0x234>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b06      	cmp	r3, #6
 8005fc0:	d015      	beq.n	8005fee <HAL_TIM_PWM_Start+0x1fa>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc8:	d011      	beq.n	8005fee <HAL_TIM_PWM_Start+0x1fa>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	e008      	b.n	8005fee <HAL_TIM_PWM_Start+0x1fa>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e000      	b.n	8005ff0 <HAL_TIM_PWM_Start+0x1fc>
 8005fee:	bf00      	nop
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40010400 	.word	0x40010400
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	40001800 	.word	0x40001800
 8006020:	4000e000 	.word	0x4000e000
 8006024:	4000e400 	.word	0x4000e400
 8006028:	00010007 	.word	0x00010007

0800602c <HAL_TIM_PWM_ConfigChannel>:
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	2300      	movs	r3, #0
 800603a:	75fb      	strb	r3, [r7, #23]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006046:	2302      	movs	r3, #2
 8006048:	e0ff      	b.n	800624a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b14      	cmp	r3, #20
 8006056:	f200 80f0 	bhi.w	800623a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800605a:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	080060b5 	.word	0x080060b5
 8006064:	0800623b 	.word	0x0800623b
 8006068:	0800623b 	.word	0x0800623b
 800606c:	0800623b 	.word	0x0800623b
 8006070:	080060f5 	.word	0x080060f5
 8006074:	0800623b 	.word	0x0800623b
 8006078:	0800623b 	.word	0x0800623b
 800607c:	0800623b 	.word	0x0800623b
 8006080:	08006137 	.word	0x08006137
 8006084:	0800623b 	.word	0x0800623b
 8006088:	0800623b 	.word	0x0800623b
 800608c:	0800623b 	.word	0x0800623b
 8006090:	08006177 	.word	0x08006177
 8006094:	0800623b 	.word	0x0800623b
 8006098:	0800623b 	.word	0x0800623b
 800609c:	0800623b 	.word	0x0800623b
 80060a0:	080061b9 	.word	0x080061b9
 80060a4:	0800623b 	.word	0x0800623b
 80060a8:	0800623b 	.word	0x0800623b
 80060ac:	0800623b 	.word	0x0800623b
 80060b0:	080061f9 	.word	0x080061f9
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 f976 	bl	80063ac <TIM_OC1_SetConfig>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0208 	orr.w	r2, r2, #8
 80060ce:	619a      	str	r2, [r3, #24]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0204 	bic.w	r2, r2, #4
 80060de:	619a      	str	r2, [r3, #24]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6999      	ldr	r1, [r3, #24]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	619a      	str	r2, [r3, #24]
 80060f2:	e0a5      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f9e6 	bl	80064cc <TIM_OC2_SetConfig>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800610e:	619a      	str	r2, [r3, #24]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800611e:	619a      	str	r2, [r3, #24]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	021a      	lsls	r2, r3, #8
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	619a      	str	r2, [r3, #24]
 8006134:	e084      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fa4f 	bl	80065e0 <TIM_OC3_SetConfig>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0208 	orr.w	r2, r2, #8
 8006150:	61da      	str	r2, [r3, #28]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0204 	bic.w	r2, r2, #4
 8006160:	61da      	str	r2, [r3, #28]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69d9      	ldr	r1, [r3, #28]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	61da      	str	r2, [r3, #28]
 8006174:	e064      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fab7 	bl	80066f0 <TIM_OC4_SetConfig>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006190:	61da      	str	r2, [r3, #28]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a0:	61da      	str	r2, [r3, #28]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69d9      	ldr	r1, [r3, #28]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	021a      	lsls	r2, r3, #8
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	61da      	str	r2, [r3, #28]
 80061b6:	e043      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fb00 	bl	80067c4 <TIM_OC5_SetConfig>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0208 	orr.w	r2, r2, #8
 80061d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0204 	bic.w	r2, r2, #4
 80061e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80061f6:	e023      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fb44 	bl	800688c <TIM_OC6_SetConfig>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006212:	655a      	str	r2, [r3, #84]	@ 0x54
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006222:	655a      	str	r2, [r3, #84]	@ 0x54
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	021a      	lsls	r2, r3, #8
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	655a      	str	r2, [r3, #84]	@ 0x54
 8006238:	e002      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
 800623e:	bf00      	nop
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop

08006254 <TIM_Base_SetConfig>:
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a47      	ldr	r2, [pc, #284]	@ (8006384 <TIM_Base_SetConfig+0x130>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006272:	d00f      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a44      	ldr	r2, [pc, #272]	@ (8006388 <TIM_Base_SetConfig+0x134>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00b      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a43      	ldr	r2, [pc, #268]	@ (800638c <TIM_Base_SetConfig+0x138>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a42      	ldr	r2, [pc, #264]	@ (8006390 <TIM_Base_SetConfig+0x13c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a41      	ldr	r2, [pc, #260]	@ (8006394 <TIM_Base_SetConfig+0x140>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d108      	bne.n	80062a6 <TIM_Base_SetConfig+0x52>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a36      	ldr	r2, [pc, #216]	@ (8006384 <TIM_Base_SetConfig+0x130>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d027      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b4:	d023      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a33      	ldr	r2, [pc, #204]	@ (8006388 <TIM_Base_SetConfig+0x134>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01f      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a32      	ldr	r2, [pc, #200]	@ (800638c <TIM_Base_SetConfig+0x138>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01b      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a31      	ldr	r2, [pc, #196]	@ (8006390 <TIM_Base_SetConfig+0x13c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d017      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a30      	ldr	r2, [pc, #192]	@ (8006394 <TIM_Base_SetConfig+0x140>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006398 <TIM_Base_SetConfig+0x144>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00f      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2e      	ldr	r2, [pc, #184]	@ (800639c <TIM_Base_SetConfig+0x148>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00b      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2d      	ldr	r2, [pc, #180]	@ (80063a0 <TIM_Base_SetConfig+0x14c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d007      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2c      	ldr	r2, [pc, #176]	@ (80063a4 <TIM_Base_SetConfig+0x150>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <TIM_Base_SetConfig+0xaa>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2b      	ldr	r2, [pc, #172]	@ (80063a8 <TIM_Base_SetConfig+0x154>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d108      	bne.n	8006310 <TIM_Base_SetConfig+0xbc>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	629a      	str	r2, [r3, #40]	@ 0x28
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a14      	ldr	r2, [pc, #80]	@ (8006384 <TIM_Base_SetConfig+0x130>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00f      	beq.n	8006356 <TIM_Base_SetConfig+0x102>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a16      	ldr	r2, [pc, #88]	@ (8006394 <TIM_Base_SetConfig+0x140>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00b      	beq.n	8006356 <TIM_Base_SetConfig+0x102>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a15      	ldr	r2, [pc, #84]	@ (8006398 <TIM_Base_SetConfig+0x144>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d007      	beq.n	8006356 <TIM_Base_SetConfig+0x102>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a14      	ldr	r2, [pc, #80]	@ (800639c <TIM_Base_SetConfig+0x148>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_Base_SetConfig+0x102>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a13      	ldr	r2, [pc, #76]	@ (80063a0 <TIM_Base_SetConfig+0x14c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d103      	bne.n	800635e <TIM_Base_SetConfig+0x10a>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	631a      	str	r2, [r3, #48]	@ 0x30
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f043 0204 	orr.w	r2, r3, #4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	615a      	str	r2, [r3, #20]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	40010000 	.word	0x40010000
 8006388:	40000400 	.word	0x40000400
 800638c:	40000800 	.word	0x40000800
 8006390:	40000c00 	.word	0x40000c00
 8006394:	40010400 	.word	0x40010400
 8006398:	40014000 	.word	0x40014000
 800639c:	40014400 	.word	0x40014400
 80063a0:	40014800 	.word	0x40014800
 80063a4:	4000e000 	.word	0x4000e000
 80063a8:	4000e400 	.word	0x4000e400

080063ac <TIM_OC1_SetConfig>:
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f023 0201 	bic.w	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	621a      	str	r2, [r3, #32]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4b37      	ldr	r3, [pc, #220]	@ (80064b4 <TIM_OC1_SetConfig+0x108>)
 80063d8:	4013      	ands	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f023 0302 	bic.w	r3, r3, #2
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a2d      	ldr	r2, [pc, #180]	@ (80064b8 <TIM_OC1_SetConfig+0x10c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00f      	beq.n	8006428 <TIM_OC1_SetConfig+0x7c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a2c      	ldr	r2, [pc, #176]	@ (80064bc <TIM_OC1_SetConfig+0x110>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00b      	beq.n	8006428 <TIM_OC1_SetConfig+0x7c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a2b      	ldr	r2, [pc, #172]	@ (80064c0 <TIM_OC1_SetConfig+0x114>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d007      	beq.n	8006428 <TIM_OC1_SetConfig+0x7c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a2a      	ldr	r2, [pc, #168]	@ (80064c4 <TIM_OC1_SetConfig+0x118>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC1_SetConfig+0x7c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a29      	ldr	r2, [pc, #164]	@ (80064c8 <TIM_OC1_SetConfig+0x11c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d10c      	bne.n	8006442 <TIM_OC1_SetConfig+0x96>
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0308 	bic.w	r3, r3, #8
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 0304 	bic.w	r3, r3, #4
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1c      	ldr	r2, [pc, #112]	@ (80064b8 <TIM_OC1_SetConfig+0x10c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00f      	beq.n	800646a <TIM_OC1_SetConfig+0xbe>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a1b      	ldr	r2, [pc, #108]	@ (80064bc <TIM_OC1_SetConfig+0x110>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00b      	beq.n	800646a <TIM_OC1_SetConfig+0xbe>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a1a      	ldr	r2, [pc, #104]	@ (80064c0 <TIM_OC1_SetConfig+0x114>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d007      	beq.n	800646a <TIM_OC1_SetConfig+0xbe>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a19      	ldr	r2, [pc, #100]	@ (80064c4 <TIM_OC1_SetConfig+0x118>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d003      	beq.n	800646a <TIM_OC1_SetConfig+0xbe>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a18      	ldr	r2, [pc, #96]	@ (80064c8 <TIM_OC1_SetConfig+0x11c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d111      	bne.n	800648e <TIM_OC1_SetConfig+0xe2>
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	619a      	str	r2, [r3, #24]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	621a      	str	r2, [r3, #32]
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	fffeff8f 	.word	0xfffeff8f
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40010400 	.word	0x40010400
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40014800 	.word	0x40014800

080064cc <TIM_OC2_SetConfig>:
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f023 0210 	bic.w	r2, r3, #16
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	621a      	str	r2, [r3, #32]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4b34      	ldr	r3, [pc, #208]	@ (80065c8 <TIM_OC2_SetConfig+0xfc>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f023 0320 	bic.w	r3, r3, #32
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a29      	ldr	r2, [pc, #164]	@ (80065cc <TIM_OC2_SetConfig+0x100>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC2_SetConfig+0x68>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a28      	ldr	r2, [pc, #160]	@ (80065d0 <TIM_OC2_SetConfig+0x104>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10d      	bne.n	8006550 <TIM_OC2_SetConfig+0x84>
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a1e      	ldr	r2, [pc, #120]	@ (80065cc <TIM_OC2_SetConfig+0x100>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00f      	beq.n	8006578 <TIM_OC2_SetConfig+0xac>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1d      	ldr	r2, [pc, #116]	@ (80065d0 <TIM_OC2_SetConfig+0x104>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00b      	beq.n	8006578 <TIM_OC2_SetConfig+0xac>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <TIM_OC2_SetConfig+0x108>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d007      	beq.n	8006578 <TIM_OC2_SetConfig+0xac>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <TIM_OC2_SetConfig+0x10c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_OC2_SetConfig+0xac>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1a      	ldr	r2, [pc, #104]	@ (80065dc <TIM_OC2_SetConfig+0x110>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d113      	bne.n	80065a0 <TIM_OC2_SetConfig+0xd4>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	619a      	str	r2, [r3, #24]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	621a      	str	r2, [r3, #32]
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	feff8fff 	.word	0xfeff8fff
 80065cc:	40010000 	.word	0x40010000
 80065d0:	40010400 	.word	0x40010400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800

080065e0 <TIM_OC3_SetConfig>:
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	621a      	str	r2, [r3, #32]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4b33      	ldr	r3, [pc, #204]	@ (80066d8 <TIM_OC3_SetConfig+0xf8>)
 800660c:	4013      	ands	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a28      	ldr	r2, [pc, #160]	@ (80066dc <TIM_OC3_SetConfig+0xfc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_OC3_SetConfig+0x66>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a27      	ldr	r2, [pc, #156]	@ (80066e0 <TIM_OC3_SetConfig+0x100>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10d      	bne.n	8006662 <TIM_OC3_SetConfig+0x82>
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1d      	ldr	r2, [pc, #116]	@ (80066dc <TIM_OC3_SetConfig+0xfc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_OC3_SetConfig+0xaa>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1c      	ldr	r2, [pc, #112]	@ (80066e0 <TIM_OC3_SetConfig+0x100>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_OC3_SetConfig+0xaa>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1b      	ldr	r2, [pc, #108]	@ (80066e4 <TIM_OC3_SetConfig+0x104>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_OC3_SetConfig+0xaa>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a1a      	ldr	r2, [pc, #104]	@ (80066e8 <TIM_OC3_SetConfig+0x108>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC3_SetConfig+0xaa>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a19      	ldr	r2, [pc, #100]	@ (80066ec <TIM_OC3_SetConfig+0x10c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d113      	bne.n	80066b2 <TIM_OC3_SetConfig+0xd2>
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	61da      	str	r2, [r3, #28]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	fffeff8f 	.word	0xfffeff8f
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40010400 	.word	0x40010400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800

080066f0 <TIM_OC4_SetConfig>:
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	621a      	str	r2, [r3, #32]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4b24      	ldr	r3, [pc, #144]	@ (80067ac <TIM_OC4_SetConfig+0xbc>)
 800671c:	4013      	ands	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	031b      	lsls	r3, r3, #12
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a19      	ldr	r2, [pc, #100]	@ (80067b0 <TIM_OC4_SetConfig+0xc0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00f      	beq.n	8006770 <TIM_OC4_SetConfig+0x80>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a18      	ldr	r2, [pc, #96]	@ (80067b4 <TIM_OC4_SetConfig+0xc4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00b      	beq.n	8006770 <TIM_OC4_SetConfig+0x80>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a17      	ldr	r2, [pc, #92]	@ (80067b8 <TIM_OC4_SetConfig+0xc8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_OC4_SetConfig+0x80>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a16      	ldr	r2, [pc, #88]	@ (80067bc <TIM_OC4_SetConfig+0xcc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC4_SetConfig+0x80>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a15      	ldr	r2, [pc, #84]	@ (80067c0 <TIM_OC4_SetConfig+0xd0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d109      	bne.n	8006784 <TIM_OC4_SetConfig+0x94>
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	019b      	lsls	r3, r3, #6
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	605a      	str	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	61da      	str	r2, [r3, #28]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	621a      	str	r2, [r3, #32]
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	feff8fff 	.word	0xfeff8fff
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40010400 	.word	0x40010400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40014400 	.word	0x40014400
 80067c0:	40014800 	.word	0x40014800

080067c4 <TIM_OC5_SetConfig>:
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	621a      	str	r2, [r3, #32]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4b21      	ldr	r3, [pc, #132]	@ (8006874 <TIM_OC5_SetConfig+0xb0>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a18      	ldr	r2, [pc, #96]	@ (8006878 <TIM_OC5_SetConfig+0xb4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00f      	beq.n	800683a <TIM_OC5_SetConfig+0x76>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a17      	ldr	r2, [pc, #92]	@ (800687c <TIM_OC5_SetConfig+0xb8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00b      	beq.n	800683a <TIM_OC5_SetConfig+0x76>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a16      	ldr	r2, [pc, #88]	@ (8006880 <TIM_OC5_SetConfig+0xbc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d007      	beq.n	800683a <TIM_OC5_SetConfig+0x76>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a15      	ldr	r2, [pc, #84]	@ (8006884 <TIM_OC5_SetConfig+0xc0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC5_SetConfig+0x76>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a14      	ldr	r2, [pc, #80]	@ (8006888 <TIM_OC5_SetConfig+0xc4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d109      	bne.n	800684e <TIM_OC5_SetConfig+0x8a>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	605a      	str	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	655a      	str	r2, [r3, #84]	@ 0x54
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	659a      	str	r2, [r3, #88]	@ 0x58
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	621a      	str	r2, [r3, #32]
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	fffeff8f 	.word	0xfffeff8f
 8006878:	40010000 	.word	0x40010000
 800687c:	40010400 	.word	0x40010400
 8006880:	40014000 	.word	0x40014000
 8006884:	40014400 	.word	0x40014400
 8006888:	40014800 	.word	0x40014800

0800688c <TIM_OC6_SetConfig>:
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	621a      	str	r2, [r3, #32]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4b22      	ldr	r3, [pc, #136]	@ (8006940 <TIM_OC6_SetConfig+0xb4>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	051b      	lsls	r3, r3, #20
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a19      	ldr	r2, [pc, #100]	@ (8006944 <TIM_OC6_SetConfig+0xb8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00f      	beq.n	8006904 <TIM_OC6_SetConfig+0x78>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a18      	ldr	r2, [pc, #96]	@ (8006948 <TIM_OC6_SetConfig+0xbc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00b      	beq.n	8006904 <TIM_OC6_SetConfig+0x78>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a17      	ldr	r2, [pc, #92]	@ (800694c <TIM_OC6_SetConfig+0xc0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d007      	beq.n	8006904 <TIM_OC6_SetConfig+0x78>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a16      	ldr	r2, [pc, #88]	@ (8006950 <TIM_OC6_SetConfig+0xc4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d003      	beq.n	8006904 <TIM_OC6_SetConfig+0x78>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a15      	ldr	r2, [pc, #84]	@ (8006954 <TIM_OC6_SetConfig+0xc8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d109      	bne.n	8006918 <TIM_OC6_SetConfig+0x8c>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	029b      	lsls	r3, r3, #10
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	655a      	str	r2, [r3, #84]	@ 0x54
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	621a      	str	r2, [r3, #32]
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	feff8fff 	.word	0xfeff8fff
 8006944:	40010000 	.word	0x40010000
 8006948:	40010400 	.word	0x40010400
 800694c:	40014000 	.word	0x40014000
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800

08006958 <TIM_CCxChannelCmd>:
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2201      	movs	r2, #1
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	43db      	mvns	r3, r3
 800697a:	401a      	ands	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1a      	ldr	r2, [r3, #32]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	fa01 f303 	lsl.w	r3, r1, r3
 8006990:	431a      	orrs	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	621a      	str	r2, [r3, #32]
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <HAL_TIMEx_MasterConfigSynchronization>:
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e077      	b.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	60bb      	str	r3, [r7, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a35      	ldr	r2, [pc, #212]	@ (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d004      	beq.n	80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a34      	ldr	r2, [pc, #208]	@ (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d108      	bne.n	8006a02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	605a      	str	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a25      	ldr	r2, [pc, #148]	@ (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d02c      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2e:	d027      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a22      	ldr	r2, [pc, #136]	@ (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d022      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a21      	ldr	r2, [pc, #132]	@ (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d01d      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d018      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1a      	ldr	r2, [pc, #104]	@ (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d013      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00e      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d009      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a18      	ldr	r2, [pc, #96]	@ (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a17      	ldr	r2, [pc, #92]	@ (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d10c      	bne.n	8006a9a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	609a      	str	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40010400 	.word	0x40010400
 8006ac0:	40000400 	.word	0x40000400
 8006ac4:	40000800 	.word	0x40000800
 8006ac8:	40000c00 	.word	0x40000c00
 8006acc:	40001800 	.word	0x40001800
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	4000e000 	.word	0x4000e000
 8006ad8:	4000e400 	.word	0x4000e400

08006adc <HAL_TIMEx_ConfigBreakDeadTime>:
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e073      	b.n	8006be0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a19      	ldr	r2, [pc, #100]	@ (8006bec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d004      	beq.n	8006b94 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a18      	ldr	r2, [pc, #96]	@ (8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d11c      	bne.n	8006bce <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	051b      	lsls	r3, r3, #20
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	645a      	str	r2, [r3, #68]	@ 0x44
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006bde:	2300      	movs	r3, #0
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	40010400 	.word	0x40010400

08006bf4 <HAL_UART_Init>:
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_UART_Init+0x12>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e042      	b.n	8006c8c <HAL_UART_Init+0x98>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_UART_Init+0x2a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fa fa57 	bl	80010cc <HAL_UART_MspInit>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2224      	movs	r2, #36	@ 0x24
 8006c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0201 	bic.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_UART_Init+0x50>
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fb18 	bl	8008274 <UART_AdvFeatureConfig>
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fca9 	bl	800759c <UART_SetConfig>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <HAL_UART_Init+0x60>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e01b      	b.n	8006c8c <HAL_UART_Init+0x98>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c62:	605a      	str	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fb97 	bl	80083b8 <UART_CheckIdleState>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UART_Transmit>:
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	@ 0x28
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80fb      	strh	r3, [r7, #6]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d17b      	bne.n	8006da6 <HAL_UART_Transmit+0x112>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_UART_Transmit+0x26>
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_UART_Transmit+0x2a>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e074      	b.n	8006da8 <HAL_UART_Transmit+0x114>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2221      	movs	r2, #33	@ 0x21
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8006cce:	f7fa fd3d 	bl	800174c <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cec:	d108      	bne.n	8006d00 <HAL_UART_Transmit+0x6c>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <HAL_UART_Transmit+0x6c>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e003      	b.n	8006d08 <HAL_UART_Transmit+0x74>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	2300      	movs	r3, #0
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	e030      	b.n	8006d6c <HAL_UART_Transmit+0xd8>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2200      	movs	r2, #0
 8006d12:	2180      	movs	r1, #128	@ 0x80
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f001 fbf9 	bl	800850c <UART_WaitOnFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_UART_Transmit+0x98>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e03d      	b.n	8006da8 <HAL_UART_Transmit+0x114>
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <HAL_UART_Transmit+0xb6>
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d40:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	3302      	adds	r3, #2
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	e007      	b.n	8006d5a <HAL_UART_Transmit+0xc6>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	781a      	ldrb	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	3301      	adds	r3, #1
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1c8      	bne.n	8006d0a <HAL_UART_Transmit+0x76>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2140      	movs	r1, #64	@ 0x40
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f001 fbc2 	bl	800850c <UART_WaitOnFlagUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <HAL_UART_Transmit+0x106>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8006d96:	2303      	movs	r3, #3
 8006d98:	e006      	b.n	8006da8 <HAL_UART_Transmit+0x114>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8006da2:	2300      	movs	r3, #0
 8006da4:	e000      	b.n	8006da8 <HAL_UART_Transmit+0x114>
 8006da6:	2302      	movs	r3, #2
 8006da8:	4618      	mov	r0, r3
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_UART_IRQHandler>:
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b0ba      	sub	sp, #232	@ 0xe8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006dd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006dda:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006dde:	4013      	ands	r3, r2
 8006de0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d11b      	bne.n	8006e24 <HAL_UART_IRQHandler+0x74>
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d015      	beq.n	8006e24 <HAL_UART_IRQHandler+0x74>
 8006df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <HAL_UART_IRQHandler+0x60>
 8006e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <HAL_UART_IRQHandler+0x74>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8393 	beq.w	8007540 <HAL_UART_IRQHandler+0x790>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
 8006e22:	e38d      	b.n	8007540 <HAL_UART_IRQHandler+0x790>
 8006e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8123 	beq.w	8007074 <HAL_UART_IRQHandler+0x2c4>
 8006e2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e32:	4b8d      	ldr	r3, [pc, #564]	@ (8007068 <HAL_UART_IRQHandler+0x2b8>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_UART_IRQHandler+0x98>
 8006e3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800706c <HAL_UART_IRQHandler+0x2bc>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 8116 	beq.w	8007074 <HAL_UART_IRQHandler+0x2c4>
 8006e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d011      	beq.n	8006e78 <HAL_UART_IRQHandler+0xc8>
 8006e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <HAL_UART_IRQHandler+0xc8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	621a      	str	r2, [r3, #32]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e6e:	f043 0201 	orr.w	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8006e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d011      	beq.n	8006ea8 <HAL_UART_IRQHandler+0xf8>
 8006e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <HAL_UART_IRQHandler+0xf8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2202      	movs	r2, #2
 8006e96:	621a      	str	r2, [r3, #32]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e9e:	f043 0204 	orr.w	r2, r3, #4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8006ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d011      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x128>
 8006eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x128>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	621a      	str	r2, [r3, #32]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ece:	f043 0202 	orr.w	r2, r3, #2
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d017      	beq.n	8006f14 <HAL_UART_IRQHandler+0x164>
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <HAL_UART_IRQHandler+0x14c>
 8006ef0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8007068 <HAL_UART_IRQHandler+0x2b8>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <HAL_UART_IRQHandler+0x164>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2208      	movs	r2, #8
 8006f02:	621a      	str	r2, [r3, #32]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f0a:	f043 0208 	orr.w	r2, r3, #8
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8006f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d012      	beq.n	8006f46 <HAL_UART_IRQHandler+0x196>
 8006f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00c      	beq.n	8006f46 <HAL_UART_IRQHandler+0x196>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f34:	621a      	str	r2, [r3, #32]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3c:	f043 0220 	orr.w	r2, r3, #32
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 82f9 	beq.w	8007544 <HAL_UART_IRQHandler+0x794>
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d013      	beq.n	8006f86 <HAL_UART_IRQHandler+0x1d6>
 8006f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <HAL_UART_IRQHandler+0x1c6>
 8006f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <HAL_UART_IRQHandler+0x1d6>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_UART_IRQHandler+0x1d6>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9a:	2b40      	cmp	r3, #64	@ 0x40
 8006f9c:	d005      	beq.n	8006faa <HAL_UART_IRQHandler+0x1fa>
 8006f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fa2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d054      	beq.n	8007054 <HAL_UART_IRQHandler+0x2a4>
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 fb1c 	bl	80085e8 <UART_EndRxTransfer>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fba:	2b40      	cmp	r3, #64	@ 0x40
 8006fbc:	d146      	bne.n	800704c <HAL_UART_IRQHandler+0x29c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1d9      	bne.n	8006fbe <HAL_UART_IRQHandler+0x20e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007010:	2b00      	cmp	r3, #0
 8007012:	d017      	beq.n	8007044 <HAL_UART_IRQHandler+0x294>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800701a:	4a15      	ldr	r2, [pc, #84]	@ (8007070 <HAL_UART_IRQHandler+0x2c0>)
 800701c:	651a      	str	r2, [r3, #80]	@ 0x50
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007024:	4618      	mov	r0, r3
 8007026:	f7fb f867 	bl	80020f8 <HAL_DMA_Abort_IT>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d019      	beq.n	8007064 <HAL_UART_IRQHandler+0x2b4>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800703e:	4610      	mov	r0, r2
 8007040:	4798      	blx	r3
 8007042:	e00f      	b.n	8007064 <HAL_UART_IRQHandler+0x2b4>
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fa93 	bl	8007570 <HAL_UART_ErrorCallback>
 800704a:	e00b      	b.n	8007064 <HAL_UART_IRQHandler+0x2b4>
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fa8f 	bl	8007570 <HAL_UART_ErrorCallback>
 8007052:	e007      	b.n	8007064 <HAL_UART_IRQHandler+0x2b4>
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa8b 	bl	8007570 <HAL_UART_ErrorCallback>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8007062:	e26f      	b.n	8007544 <HAL_UART_IRQHandler+0x794>
 8007064:	bf00      	nop
 8007066:	e26d      	b.n	8007544 <HAL_UART_IRQHandler+0x794>
 8007068:	10000001 	.word	0x10000001
 800706c:	04000120 	.word	0x04000120
 8007070:	080086b5 	.word	0x080086b5
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007078:	2b01      	cmp	r3, #1
 800707a:	f040 8203 	bne.w	8007484 <HAL_UART_IRQHandler+0x6d4>
 800707e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 81fc 	beq.w	8007484 <HAL_UART_IRQHandler+0x6d4>
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 81f5 	beq.w	8007484 <HAL_UART_IRQHandler+0x6d4>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2210      	movs	r2, #16
 80070a0:	621a      	str	r2, [r3, #32]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ac:	2b40      	cmp	r3, #64	@ 0x40
 80070ae:	f040 816d 	bne.w	800738c <HAL_UART_IRQHandler+0x5dc>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4aa4      	ldr	r2, [pc, #656]	@ (800734c <HAL_UART_IRQHandler+0x59c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d068      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4aa1      	ldr	r2, [pc, #644]	@ (8007350 <HAL_UART_IRQHandler+0x5a0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d061      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a9f      	ldr	r2, [pc, #636]	@ (8007354 <HAL_UART_IRQHandler+0x5a4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d05a      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a9c      	ldr	r2, [pc, #624]	@ (8007358 <HAL_UART_IRQHandler+0x5a8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d053      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a9a      	ldr	r2, [pc, #616]	@ (800735c <HAL_UART_IRQHandler+0x5ac>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d04c      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a97      	ldr	r2, [pc, #604]	@ (8007360 <HAL_UART_IRQHandler+0x5b0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d045      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a95      	ldr	r2, [pc, #596]	@ (8007364 <HAL_UART_IRQHandler+0x5b4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d03e      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a92      	ldr	r2, [pc, #584]	@ (8007368 <HAL_UART_IRQHandler+0x5b8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d037      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a90      	ldr	r2, [pc, #576]	@ (800736c <HAL_UART_IRQHandler+0x5bc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d030      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a8d      	ldr	r2, [pc, #564]	@ (8007370 <HAL_UART_IRQHandler+0x5c0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d029      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a8b      	ldr	r2, [pc, #556]	@ (8007374 <HAL_UART_IRQHandler+0x5c4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d022      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a88      	ldr	r2, [pc, #544]	@ (8007378 <HAL_UART_IRQHandler+0x5c8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01b      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a86      	ldr	r2, [pc, #536]	@ (800737c <HAL_UART_IRQHandler+0x5cc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d014      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a83      	ldr	r2, [pc, #524]	@ (8007380 <HAL_UART_IRQHandler+0x5d0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00d      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a81      	ldr	r2, [pc, #516]	@ (8007384 <HAL_UART_IRQHandler+0x5d4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d006      	beq.n	8007192 <HAL_UART_IRQHandler+0x3e2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a7e      	ldr	r2, [pc, #504]	@ (8007388 <HAL_UART_IRQHandler+0x5d8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d106      	bne.n	80071a0 <HAL_UART_IRQHandler+0x3f0>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	b29b      	uxth	r3, r3
 800719e:	e005      	b.n	80071ac <HAL_UART_IRQHandler+0x3fc>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80071b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80ad 	beq.w	8007314 <HAL_UART_IRQHandler+0x564>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071c4:	429a      	cmp	r2, r3
 80071c6:	f080 80a5 	bcs.w	8007314 <HAL_UART_IRQHandler+0x564>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e0:	f000 8087 	beq.w	80072f2 <HAL_UART_IRQHandler+0x542>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800720e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007212:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8007216:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800721a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1da      	bne.n	80071e4 <HAL_UART_IRQHandler+0x434>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3308      	adds	r3, #8
 8007234:	677b      	str	r3, [r7, #116]	@ 0x74
 8007236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	673b      	str	r3, [r7, #112]	@ 0x70
 800723e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3308      	adds	r3, #8
 800724e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007252:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007256:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007258:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800725a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e1      	bne.n	800722e <HAL_UART_IRQHandler+0x47e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	663b      	str	r3, [r7, #96]	@ 0x60
 8007272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800727a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800727c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800728e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007292:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007294:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	667b      	str	r3, [r7, #100]	@ 0x64
 800729c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e3      	bne.n	800726a <HAL_UART_IRQHandler+0x4ba>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	66da      	str	r2, [r3, #108]	@ 0x6c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c0:	f023 0310 	bic.w	r3, r3, #16
 80072c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072d4:	657a      	str	r2, [r7, #84]	@ 0x54
 80072d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	653b      	str	r3, [r7, #80]	@ 0x50
 80072e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e4      	bne.n	80072b0 <HAL_UART_IRQHandler+0x500>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fa fbe5 	bl	8001abc <HAL_DMA_Abort>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2202      	movs	r2, #2
 80072f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007304:	b29b      	uxth	r3, r3
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	b29b      	uxth	r3, r3
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f939 	bl	8007584 <HAL_UARTEx_RxEventCallback>
 8007312:	e119      	b.n	8007548 <HAL_UART_IRQHandler+0x798>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800731a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800731e:	429a      	cmp	r2, r3
 8007320:	f040 8112 	bne.w	8007548 <HAL_UART_IRQHandler+0x798>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007330:	f040 810a 	bne.w	8007548 <HAL_UART_IRQHandler+0x798>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	671a      	str	r2, [r3, #112]	@ 0x70
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f91e 	bl	8007584 <HAL_UARTEx_RxEventCallback>
 8007348:	e0fe      	b.n	8007548 <HAL_UART_IRQHandler+0x798>
 800734a:	bf00      	nop
 800734c:	40020010 	.word	0x40020010
 8007350:	40020028 	.word	0x40020028
 8007354:	40020040 	.word	0x40020040
 8007358:	40020058 	.word	0x40020058
 800735c:	40020070 	.word	0x40020070
 8007360:	40020088 	.word	0x40020088
 8007364:	400200a0 	.word	0x400200a0
 8007368:	400200b8 	.word	0x400200b8
 800736c:	40020410 	.word	0x40020410
 8007370:	40020428 	.word	0x40020428
 8007374:	40020440 	.word	0x40020440
 8007378:	40020458 	.word	0x40020458
 800737c:	40020470 	.word	0x40020470
 8007380:	40020488 	.word	0x40020488
 8007384:	400204a0 	.word	0x400204a0
 8007388:	400204b8 	.word	0x400204b8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007398:	b29b      	uxth	r3, r3
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 80cf 	beq.w	800754c <HAL_UART_IRQHandler+0x79c>
 80073ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 80ca 	beq.w	800754c <HAL_UART_IRQHandler+0x79c>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073da:	647b      	str	r3, [r7, #68]	@ 0x44
 80073dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80073de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e4      	bne.n	80073b8 <HAL_UART_IRQHandler+0x608>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	623b      	str	r3, [r7, #32]
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	4b55      	ldr	r3, [pc, #340]	@ (8007558 <HAL_UART_IRQHandler+0x7a8>)
 8007402:	4013      	ands	r3, r2
 8007404:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007412:	633a      	str	r2, [r7, #48]	@ 0x30
 8007414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e3      	bne.n	80073ee <HAL_UART_IRQHandler+0x63e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2220      	movs	r2, #32
 800742a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	675a      	str	r2, [r3, #116]	@ 0x74
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0310 	bic.w	r3, r3, #16
 800744e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	61ba      	str	r2, [r7, #24]
 8007460:	69b9      	ldr	r1, [r7, #24]
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e4      	bne.n	800743a <HAL_UART_IRQHandler+0x68a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	671a      	str	r2, [r3, #112]	@ 0x70
 8007476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f881 	bl	8007584 <HAL_UARTEx_RxEventCallback>
 8007482:	e063      	b.n	800754c <HAL_UART_IRQHandler+0x79c>
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007488:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00e      	beq.n	80074ae <HAL_UART_IRQHandler+0x6fe>
 8007490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007494:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <HAL_UART_IRQHandler+0x6fe>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80074a4:	621a      	str	r2, [r3, #32]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 f941 	bl	800872e <HAL_UARTEx_WakeupCallback>
 80074ac:	e051      	b.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d014      	beq.n	80074e4 <HAL_UART_IRQHandler+0x734>
 80074ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <HAL_UART_IRQHandler+0x722>
 80074c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d008      	beq.n	80074e4 <HAL_UART_IRQHandler+0x734>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d03a      	beq.n	8007550 <HAL_UART_IRQHandler+0x7a0>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
 80074e2:	e035      	b.n	8007550 <HAL_UART_IRQHandler+0x7a0>
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d009      	beq.n	8007504 <HAL_UART_IRQHandler+0x754>
 80074f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_UART_IRQHandler+0x754>
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 f8eb 	bl	80086d8 <UART_EndTransmit_IT>
 8007502:	e026      	b.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 8007504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d009      	beq.n	8007524 <HAL_UART_IRQHandler+0x774>
 8007510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007514:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_UART_IRQHandler+0x774>
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f91a 	bl	8008756 <HAL_UARTEx_TxFifoEmptyCallback>
 8007522:	e016      	b.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 8007524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d010      	beq.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 8007530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007534:	2b00      	cmp	r3, #0
 8007536:	da0c      	bge.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f902 	bl	8008742 <HAL_UARTEx_RxFifoFullCallback>
 800753e:	e008      	b.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 8007540:	bf00      	nop
 8007542:	e006      	b.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 8007544:	bf00      	nop
 8007546:	e004      	b.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 8007548:	bf00      	nop
 800754a:	e002      	b.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 800754c:	bf00      	nop
 800754e:	e000      	b.n	8007552 <HAL_UART_IRQHandler+0x7a2>
 8007550:	bf00      	nop
 8007552:	37e8      	adds	r7, #232	@ 0xe8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	effffffe 	.word	0xeffffffe

0800755c <HAL_UART_TxCpltCallback>:
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_UART_ErrorCallback>:
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_UARTEx_RxEventCallback>:
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	807b      	strh	r3, [r7, #2]
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <UART_SetConfig>:
 800759c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075a0:	b092      	sub	sp, #72	@ 0x48
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6178      	str	r0, [r7, #20]
 80075a6:	2300      	movs	r3, #0
 80075a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	4bbe      	ldr	r3, [pc, #760]	@ (80078c4 <UART_SetConfig+0x328>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	6812      	ldr	r2, [r2, #0]
 80075d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80075d4:	430b      	orrs	r3, r1
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4ab3      	ldr	r2, [pc, #716]	@ (80078c8 <UART_SetConfig+0x32c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d004      	beq.n	8007608 <UART_SetConfig+0x6c>
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007604:	4313      	orrs	r3, r2
 8007606:	647b      	str	r3, [r7, #68]	@ 0x44
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	4baf      	ldr	r3, [pc, #700]	@ (80078cc <UART_SetConfig+0x330>)
 8007610:	4013      	ands	r3, r2
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007618:	430b      	orrs	r3, r1
 800761a:	6093      	str	r3, [r2, #8]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	f023 010f 	bic.w	r1, r3, #15
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4aa6      	ldr	r2, [pc, #664]	@ (80078d0 <UART_SetConfig+0x334>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d177      	bne.n	800772c <UART_SetConfig+0x190>
 800763c:	4ba5      	ldr	r3, [pc, #660]	@ (80078d4 <UART_SetConfig+0x338>)
 800763e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007640:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007644:	2b28      	cmp	r3, #40	@ 0x28
 8007646:	d86d      	bhi.n	8007724 <UART_SetConfig+0x188>
 8007648:	a201      	add	r2, pc, #4	@ (adr r2, 8007650 <UART_SetConfig+0xb4>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	080076f5 	.word	0x080076f5
 8007654:	08007725 	.word	0x08007725
 8007658:	08007725 	.word	0x08007725
 800765c:	08007725 	.word	0x08007725
 8007660:	08007725 	.word	0x08007725
 8007664:	08007725 	.word	0x08007725
 8007668:	08007725 	.word	0x08007725
 800766c:	08007725 	.word	0x08007725
 8007670:	080076fd 	.word	0x080076fd
 8007674:	08007725 	.word	0x08007725
 8007678:	08007725 	.word	0x08007725
 800767c:	08007725 	.word	0x08007725
 8007680:	08007725 	.word	0x08007725
 8007684:	08007725 	.word	0x08007725
 8007688:	08007725 	.word	0x08007725
 800768c:	08007725 	.word	0x08007725
 8007690:	08007705 	.word	0x08007705
 8007694:	08007725 	.word	0x08007725
 8007698:	08007725 	.word	0x08007725
 800769c:	08007725 	.word	0x08007725
 80076a0:	08007725 	.word	0x08007725
 80076a4:	08007725 	.word	0x08007725
 80076a8:	08007725 	.word	0x08007725
 80076ac:	08007725 	.word	0x08007725
 80076b0:	0800770d 	.word	0x0800770d
 80076b4:	08007725 	.word	0x08007725
 80076b8:	08007725 	.word	0x08007725
 80076bc:	08007725 	.word	0x08007725
 80076c0:	08007725 	.word	0x08007725
 80076c4:	08007725 	.word	0x08007725
 80076c8:	08007725 	.word	0x08007725
 80076cc:	08007725 	.word	0x08007725
 80076d0:	08007715 	.word	0x08007715
 80076d4:	08007725 	.word	0x08007725
 80076d8:	08007725 	.word	0x08007725
 80076dc:	08007725 	.word	0x08007725
 80076e0:	08007725 	.word	0x08007725
 80076e4:	08007725 	.word	0x08007725
 80076e8:	08007725 	.word	0x08007725
 80076ec:	08007725 	.word	0x08007725
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e326      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80076fc:	2304      	movs	r3, #4
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e322      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007704:	2308      	movs	r3, #8
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e31e      	b.n	8007d4a <UART_SetConfig+0x7ae>
 800770c:	2310      	movs	r3, #16
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e31a      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007714:	2320      	movs	r3, #32
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771a:	e316      	b.n	8007d4a <UART_SetConfig+0x7ae>
 800771c:	2340      	movs	r3, #64	@ 0x40
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007722:	e312      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007724:	2380      	movs	r3, #128	@ 0x80
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772a:	e30e      	b.n	8007d4a <UART_SetConfig+0x7ae>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a69      	ldr	r2, [pc, #420]	@ (80078d8 <UART_SetConfig+0x33c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d130      	bne.n	8007798 <UART_SetConfig+0x1fc>
 8007736:	4b67      	ldr	r3, [pc, #412]	@ (80078d4 <UART_SetConfig+0x338>)
 8007738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	2b05      	cmp	r3, #5
 8007740:	d826      	bhi.n	8007790 <UART_SetConfig+0x1f4>
 8007742:	a201      	add	r2, pc, #4	@ (adr r2, 8007748 <UART_SetConfig+0x1ac>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	08007761 	.word	0x08007761
 800774c:	08007769 	.word	0x08007769
 8007750:	08007771 	.word	0x08007771
 8007754:	08007779 	.word	0x08007779
 8007758:	08007781 	.word	0x08007781
 800775c:	08007789 	.word	0x08007789
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e2f0      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007768:	2304      	movs	r3, #4
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776e:	e2ec      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007770:	2308      	movs	r3, #8
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007776:	e2e8      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007778:	2310      	movs	r3, #16
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777e:	e2e4      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007780:	2320      	movs	r3, #32
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007786:	e2e0      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007788:	2340      	movs	r3, #64	@ 0x40
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778e:	e2dc      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007790:	2380      	movs	r3, #128	@ 0x80
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007796:	e2d8      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a4f      	ldr	r2, [pc, #316]	@ (80078dc <UART_SetConfig+0x340>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d130      	bne.n	8007804 <UART_SetConfig+0x268>
 80077a2:	4b4c      	ldr	r3, [pc, #304]	@ (80078d4 <UART_SetConfig+0x338>)
 80077a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b05      	cmp	r3, #5
 80077ac:	d826      	bhi.n	80077fc <UART_SetConfig+0x260>
 80077ae:	a201      	add	r2, pc, #4	@ (adr r2, 80077b4 <UART_SetConfig+0x218>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077cd 	.word	0x080077cd
 80077b8:	080077d5 	.word	0x080077d5
 80077bc:	080077dd 	.word	0x080077dd
 80077c0:	080077e5 	.word	0x080077e5
 80077c4:	080077ed 	.word	0x080077ed
 80077c8:	080077f5 	.word	0x080077f5
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e2ba      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80077d4:	2304      	movs	r3, #4
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e2b6      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80077dc:	2308      	movs	r3, #8
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e2:	e2b2      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80077e4:	2310      	movs	r3, #16
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ea:	e2ae      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80077ec:	2320      	movs	r3, #32
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f2:	e2aa      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80077f4:	2340      	movs	r3, #64	@ 0x40
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fa:	e2a6      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80077fc:	2380      	movs	r3, #128	@ 0x80
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007802:	e2a2      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a35      	ldr	r2, [pc, #212]	@ (80078e0 <UART_SetConfig+0x344>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d130      	bne.n	8007870 <UART_SetConfig+0x2d4>
 800780e:	4b31      	ldr	r3, [pc, #196]	@ (80078d4 <UART_SetConfig+0x338>)
 8007810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b05      	cmp	r3, #5
 8007818:	d826      	bhi.n	8007868 <UART_SetConfig+0x2cc>
 800781a:	a201      	add	r2, pc, #4	@ (adr r2, 8007820 <UART_SetConfig+0x284>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007839 	.word	0x08007839
 8007824:	08007841 	.word	0x08007841
 8007828:	08007849 	.word	0x08007849
 800782c:	08007851 	.word	0x08007851
 8007830:	08007859 	.word	0x08007859
 8007834:	08007861 	.word	0x08007861
 8007838:	2300      	movs	r3, #0
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e284      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007840:	2304      	movs	r3, #4
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e280      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007848:	2308      	movs	r3, #8
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e27c      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007850:	2310      	movs	r3, #16
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e278      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007858:	2320      	movs	r3, #32
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e274      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007860:	2340      	movs	r3, #64	@ 0x40
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e270      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007868:	2380      	movs	r3, #128	@ 0x80
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e26c      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a1b      	ldr	r2, [pc, #108]	@ (80078e4 <UART_SetConfig+0x348>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d142      	bne.n	8007900 <UART_SetConfig+0x364>
 800787a:	4b16      	ldr	r3, [pc, #88]	@ (80078d4 <UART_SetConfig+0x338>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b05      	cmp	r3, #5
 8007884:	d838      	bhi.n	80078f8 <UART_SetConfig+0x35c>
 8007886:	a201      	add	r2, pc, #4	@ (adr r2, 800788c <UART_SetConfig+0x2f0>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078a5 	.word	0x080078a5
 8007890:	080078ad 	.word	0x080078ad
 8007894:	080078b5 	.word	0x080078b5
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078e9 	.word	0x080078e9
 80078a0:	080078f1 	.word	0x080078f1
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e24e      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80078ac:	2304      	movs	r3, #4
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e24a      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80078b4:	2308      	movs	r3, #8
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e246      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80078bc:	2310      	movs	r3, #16
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e242      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80078c4:	cfff69f3 	.word	0xcfff69f3
 80078c8:	58000c00 	.word	0x58000c00
 80078cc:	11fff4ff 	.word	0x11fff4ff
 80078d0:	40011000 	.word	0x40011000
 80078d4:	58024400 	.word	0x58024400
 80078d8:	40004400 	.word	0x40004400
 80078dc:	40004800 	.word	0x40004800
 80078e0:	40004c00 	.word	0x40004c00
 80078e4:	40005000 	.word	0x40005000
 80078e8:	2320      	movs	r3, #32
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e22c      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80078f0:	2340      	movs	r3, #64	@ 0x40
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e228      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80078f8:	2380      	movs	r3, #128	@ 0x80
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e224      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4ab1      	ldr	r2, [pc, #708]	@ (8007bcc <UART_SetConfig+0x630>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d176      	bne.n	80079f8 <UART_SetConfig+0x45c>
 800790a:	4bb1      	ldr	r3, [pc, #708]	@ (8007bd0 <UART_SetConfig+0x634>)
 800790c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007912:	2b28      	cmp	r3, #40	@ 0x28
 8007914:	d86c      	bhi.n	80079f0 <UART_SetConfig+0x454>
 8007916:	a201      	add	r2, pc, #4	@ (adr r2, 800791c <UART_SetConfig+0x380>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	080079c1 	.word	0x080079c1
 8007920:	080079f1 	.word	0x080079f1
 8007924:	080079f1 	.word	0x080079f1
 8007928:	080079f1 	.word	0x080079f1
 800792c:	080079f1 	.word	0x080079f1
 8007930:	080079f1 	.word	0x080079f1
 8007934:	080079f1 	.word	0x080079f1
 8007938:	080079f1 	.word	0x080079f1
 800793c:	080079c9 	.word	0x080079c9
 8007940:	080079f1 	.word	0x080079f1
 8007944:	080079f1 	.word	0x080079f1
 8007948:	080079f1 	.word	0x080079f1
 800794c:	080079f1 	.word	0x080079f1
 8007950:	080079f1 	.word	0x080079f1
 8007954:	080079f1 	.word	0x080079f1
 8007958:	080079f1 	.word	0x080079f1
 800795c:	080079d1 	.word	0x080079d1
 8007960:	080079f1 	.word	0x080079f1
 8007964:	080079f1 	.word	0x080079f1
 8007968:	080079f1 	.word	0x080079f1
 800796c:	080079f1 	.word	0x080079f1
 8007970:	080079f1 	.word	0x080079f1
 8007974:	080079f1 	.word	0x080079f1
 8007978:	080079f1 	.word	0x080079f1
 800797c:	080079d9 	.word	0x080079d9
 8007980:	080079f1 	.word	0x080079f1
 8007984:	080079f1 	.word	0x080079f1
 8007988:	080079f1 	.word	0x080079f1
 800798c:	080079f1 	.word	0x080079f1
 8007990:	080079f1 	.word	0x080079f1
 8007994:	080079f1 	.word	0x080079f1
 8007998:	080079f1 	.word	0x080079f1
 800799c:	080079e1 	.word	0x080079e1
 80079a0:	080079f1 	.word	0x080079f1
 80079a4:	080079f1 	.word	0x080079f1
 80079a8:	080079f1 	.word	0x080079f1
 80079ac:	080079f1 	.word	0x080079f1
 80079b0:	080079f1 	.word	0x080079f1
 80079b4:	080079f1 	.word	0x080079f1
 80079b8:	080079f1 	.word	0x080079f1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c6:	e1c0      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80079c8:	2304      	movs	r3, #4
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e1bc      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80079d0:	2308      	movs	r3, #8
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e1b8      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80079d8:	2310      	movs	r3, #16
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e1b4      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80079e0:	2320      	movs	r3, #32
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e1b0      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80079e8:	2340      	movs	r3, #64	@ 0x40
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e1ac      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80079f0:	2380      	movs	r3, #128	@ 0x80
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e1a8      	b.n	8007d4a <UART_SetConfig+0x7ae>
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a75      	ldr	r2, [pc, #468]	@ (8007bd4 <UART_SetConfig+0x638>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d130      	bne.n	8007a64 <UART_SetConfig+0x4c8>
 8007a02:	4b73      	ldr	r3, [pc, #460]	@ (8007bd0 <UART_SetConfig+0x634>)
 8007a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b05      	cmp	r3, #5
 8007a0c:	d826      	bhi.n	8007a5c <UART_SetConfig+0x4c0>
 8007a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a14 <UART_SetConfig+0x478>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a2d 	.word	0x08007a2d
 8007a18:	08007a35 	.word	0x08007a35
 8007a1c:	08007a3d 	.word	0x08007a3d
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007a4d 	.word	0x08007a4d
 8007a28:	08007a55 	.word	0x08007a55
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e18a      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007a34:	2304      	movs	r3, #4
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e186      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e182      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007a44:	2310      	movs	r3, #16
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4a:	e17e      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007a4c:	2320      	movs	r3, #32
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a52:	e17a      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007a54:	2340      	movs	r3, #64	@ 0x40
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5a:	e176      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007a5c:	2380      	movs	r3, #128	@ 0x80
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a62:	e172      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a5b      	ldr	r2, [pc, #364]	@ (8007bd8 <UART_SetConfig+0x63c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d130      	bne.n	8007ad0 <UART_SetConfig+0x534>
 8007a6e:	4b58      	ldr	r3, [pc, #352]	@ (8007bd0 <UART_SetConfig+0x634>)
 8007a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	d826      	bhi.n	8007ac8 <UART_SetConfig+0x52c>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <UART_SetConfig+0x4e4>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007a99 	.word	0x08007a99
 8007a84:	08007aa1 	.word	0x08007aa1
 8007a88:	08007aa9 	.word	0x08007aa9
 8007a8c:	08007ab1 	.word	0x08007ab1
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ac1 	.word	0x08007ac1
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	e154      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa6:	e150      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aae:	e14c      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab6:	e148      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007ab8:	2320      	movs	r3, #32
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007abe:	e144      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007ac0:	2340      	movs	r3, #64	@ 0x40
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e140      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007ac8:	2380      	movs	r3, #128	@ 0x80
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e13c      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a41      	ldr	r2, [pc, #260]	@ (8007bdc <UART_SetConfig+0x640>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	f040 8082 	bne.w	8007be0 <UART_SetConfig+0x644>
 8007adc:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd0 <UART_SetConfig+0x634>)
 8007ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ae4:	2b28      	cmp	r3, #40	@ 0x28
 8007ae6:	d86d      	bhi.n	8007bc4 <UART_SetConfig+0x628>
 8007ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8007af0 <UART_SetConfig+0x554>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007b95 	.word	0x08007b95
 8007af4:	08007bc5 	.word	0x08007bc5
 8007af8:	08007bc5 	.word	0x08007bc5
 8007afc:	08007bc5 	.word	0x08007bc5
 8007b00:	08007bc5 	.word	0x08007bc5
 8007b04:	08007bc5 	.word	0x08007bc5
 8007b08:	08007bc5 	.word	0x08007bc5
 8007b0c:	08007bc5 	.word	0x08007bc5
 8007b10:	08007b9d 	.word	0x08007b9d
 8007b14:	08007bc5 	.word	0x08007bc5
 8007b18:	08007bc5 	.word	0x08007bc5
 8007b1c:	08007bc5 	.word	0x08007bc5
 8007b20:	08007bc5 	.word	0x08007bc5
 8007b24:	08007bc5 	.word	0x08007bc5
 8007b28:	08007bc5 	.word	0x08007bc5
 8007b2c:	08007bc5 	.word	0x08007bc5
 8007b30:	08007ba5 	.word	0x08007ba5
 8007b34:	08007bc5 	.word	0x08007bc5
 8007b38:	08007bc5 	.word	0x08007bc5
 8007b3c:	08007bc5 	.word	0x08007bc5
 8007b40:	08007bc5 	.word	0x08007bc5
 8007b44:	08007bc5 	.word	0x08007bc5
 8007b48:	08007bc5 	.word	0x08007bc5
 8007b4c:	08007bc5 	.word	0x08007bc5
 8007b50:	08007bad 	.word	0x08007bad
 8007b54:	08007bc5 	.word	0x08007bc5
 8007b58:	08007bc5 	.word	0x08007bc5
 8007b5c:	08007bc5 	.word	0x08007bc5
 8007b60:	08007bc5 	.word	0x08007bc5
 8007b64:	08007bc5 	.word	0x08007bc5
 8007b68:	08007bc5 	.word	0x08007bc5
 8007b6c:	08007bc5 	.word	0x08007bc5
 8007b70:	08007bb5 	.word	0x08007bb5
 8007b74:	08007bc5 	.word	0x08007bc5
 8007b78:	08007bc5 	.word	0x08007bc5
 8007b7c:	08007bc5 	.word	0x08007bc5
 8007b80:	08007bc5 	.word	0x08007bc5
 8007b84:	08007bc5 	.word	0x08007bc5
 8007b88:	08007bc5 	.word	0x08007bc5
 8007b8c:	08007bc5 	.word	0x08007bc5
 8007b90:	08007bbd 	.word	0x08007bbd
 8007b94:	2301      	movs	r3, #1
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9a:	e0d6      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba2:	e0d2      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007ba4:	2308      	movs	r3, #8
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007baa:	e0ce      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007bac:	2310      	movs	r3, #16
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb2:	e0ca      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007bb4:	2320      	movs	r3, #32
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bba:	e0c6      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007bbc:	2340      	movs	r3, #64	@ 0x40
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc2:	e0c2      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007bc4:	2380      	movs	r3, #128	@ 0x80
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bca:	e0be      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007bcc:	40011400 	.word	0x40011400
 8007bd0:	58024400 	.word	0x58024400
 8007bd4:	40007800 	.word	0x40007800
 8007bd8:	40007c00 	.word	0x40007c00
 8007bdc:	40011800 	.word	0x40011800
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4aad      	ldr	r2, [pc, #692]	@ (8007e9c <UART_SetConfig+0x900>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d176      	bne.n	8007cd8 <UART_SetConfig+0x73c>
 8007bea:	4bad      	ldr	r3, [pc, #692]	@ (8007ea0 <UART_SetConfig+0x904>)
 8007bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bf2:	2b28      	cmp	r3, #40	@ 0x28
 8007bf4:	d86c      	bhi.n	8007cd0 <UART_SetConfig+0x734>
 8007bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <UART_SetConfig+0x660>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007ca1 	.word	0x08007ca1
 8007c00:	08007cd1 	.word	0x08007cd1
 8007c04:	08007cd1 	.word	0x08007cd1
 8007c08:	08007cd1 	.word	0x08007cd1
 8007c0c:	08007cd1 	.word	0x08007cd1
 8007c10:	08007cd1 	.word	0x08007cd1
 8007c14:	08007cd1 	.word	0x08007cd1
 8007c18:	08007cd1 	.word	0x08007cd1
 8007c1c:	08007ca9 	.word	0x08007ca9
 8007c20:	08007cd1 	.word	0x08007cd1
 8007c24:	08007cd1 	.word	0x08007cd1
 8007c28:	08007cd1 	.word	0x08007cd1
 8007c2c:	08007cd1 	.word	0x08007cd1
 8007c30:	08007cd1 	.word	0x08007cd1
 8007c34:	08007cd1 	.word	0x08007cd1
 8007c38:	08007cd1 	.word	0x08007cd1
 8007c3c:	08007cb1 	.word	0x08007cb1
 8007c40:	08007cd1 	.word	0x08007cd1
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007cd1 	.word	0x08007cd1
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007cd1 	.word	0x08007cd1
 8007c54:	08007cd1 	.word	0x08007cd1
 8007c58:	08007cd1 	.word	0x08007cd1
 8007c5c:	08007cb9 	.word	0x08007cb9
 8007c60:	08007cd1 	.word	0x08007cd1
 8007c64:	08007cd1 	.word	0x08007cd1
 8007c68:	08007cd1 	.word	0x08007cd1
 8007c6c:	08007cd1 	.word	0x08007cd1
 8007c70:	08007cd1 	.word	0x08007cd1
 8007c74:	08007cd1 	.word	0x08007cd1
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007cc1 	.word	0x08007cc1
 8007c80:	08007cd1 	.word	0x08007cd1
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007cd1 	.word	0x08007cd1
 8007c8c:	08007cd1 	.word	0x08007cd1
 8007c90:	08007cd1 	.word	0x08007cd1
 8007c94:	08007cd1 	.word	0x08007cd1
 8007c98:	08007cd1 	.word	0x08007cd1
 8007c9c:	08007cc9 	.word	0x08007cc9
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e050      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cae:	e04c      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007cb0:	2308      	movs	r3, #8
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb6:	e048      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007cb8:	2310      	movs	r3, #16
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cbe:	e044      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007cc0:	2320      	movs	r3, #32
 8007cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc6:	e040      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007cc8:	2340      	movs	r3, #64	@ 0x40
 8007cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cce:	e03c      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007cd0:	2380      	movs	r3, #128	@ 0x80
 8007cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd6:	e038      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a71      	ldr	r2, [pc, #452]	@ (8007ea4 <UART_SetConfig+0x908>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d130      	bne.n	8007d44 <UART_SetConfig+0x7a8>
 8007ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8007ea0 <UART_SetConfig+0x904>)
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b05      	cmp	r3, #5
 8007cec:	d826      	bhi.n	8007d3c <UART_SetConfig+0x7a0>
 8007cee:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <UART_SetConfig+0x758>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d0d 	.word	0x08007d0d
 8007cf8:	08007d15 	.word	0x08007d15
 8007cfc:	08007d1d 	.word	0x08007d1d
 8007d00:	08007d25 	.word	0x08007d25
 8007d04:	08007d2d 	.word	0x08007d2d
 8007d08:	08007d35 	.word	0x08007d35
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e01a      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007d14:	2304      	movs	r3, #4
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e016      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007d1c:	2308      	movs	r3, #8
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d22:	e012      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007d24:	2310      	movs	r3, #16
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e00e      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007d2c:	2320      	movs	r3, #32
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d32:	e00a      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007d34:	2340      	movs	r3, #64	@ 0x40
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e006      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007d3c:	2380      	movs	r3, #128	@ 0x80
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d42:	e002      	b.n	8007d4a <UART_SetConfig+0x7ae>
 8007d44:	2380      	movs	r3, #128	@ 0x80
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a55      	ldr	r2, [pc, #340]	@ (8007ea4 <UART_SetConfig+0x908>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	f040 80f8 	bne.w	8007f46 <UART_SetConfig+0x9aa>
 8007d56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	dc46      	bgt.n	8007dec <UART_SetConfig+0x850>
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	db75      	blt.n	8007e4e <UART_SetConfig+0x8b2>
 8007d62:	3b02      	subs	r3, #2
 8007d64:	2b1e      	cmp	r3, #30
 8007d66:	d872      	bhi.n	8007e4e <UART_SetConfig+0x8b2>
 8007d68:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <UART_SetConfig+0x7d4>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007df3 	.word	0x08007df3
 8007d74:	08007e4f 	.word	0x08007e4f
 8007d78:	08007dfb 	.word	0x08007dfb
 8007d7c:	08007e4f 	.word	0x08007e4f
 8007d80:	08007e4f 	.word	0x08007e4f
 8007d84:	08007e4f 	.word	0x08007e4f
 8007d88:	08007e0b 	.word	0x08007e0b
 8007d8c:	08007e4f 	.word	0x08007e4f
 8007d90:	08007e4f 	.word	0x08007e4f
 8007d94:	08007e4f 	.word	0x08007e4f
 8007d98:	08007e4f 	.word	0x08007e4f
 8007d9c:	08007e4f 	.word	0x08007e4f
 8007da0:	08007e4f 	.word	0x08007e4f
 8007da4:	08007e4f 	.word	0x08007e4f
 8007da8:	08007e1b 	.word	0x08007e1b
 8007dac:	08007e4f 	.word	0x08007e4f
 8007db0:	08007e4f 	.word	0x08007e4f
 8007db4:	08007e4f 	.word	0x08007e4f
 8007db8:	08007e4f 	.word	0x08007e4f
 8007dbc:	08007e4f 	.word	0x08007e4f
 8007dc0:	08007e4f 	.word	0x08007e4f
 8007dc4:	08007e4f 	.word	0x08007e4f
 8007dc8:	08007e4f 	.word	0x08007e4f
 8007dcc:	08007e4f 	.word	0x08007e4f
 8007dd0:	08007e4f 	.word	0x08007e4f
 8007dd4:	08007e4f 	.word	0x08007e4f
 8007dd8:	08007e4f 	.word	0x08007e4f
 8007ddc:	08007e4f 	.word	0x08007e4f
 8007de0:	08007e4f 	.word	0x08007e4f
 8007de4:	08007e4f 	.word	0x08007e4f
 8007de8:	08007e41 	.word	0x08007e41
 8007dec:	2b40      	cmp	r3, #64	@ 0x40
 8007dee:	d02a      	beq.n	8007e46 <UART_SetConfig+0x8aa>
 8007df0:	e02d      	b.n	8007e4e <UART_SetConfig+0x8b2>
 8007df2:	f7fd fb85 	bl	8005500 <HAL_RCCEx_GetD3PCLK1Freq>
 8007df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8007df8:	e02f      	b.n	8007e5a <UART_SetConfig+0x8be>
 8007dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fd fb94 	bl	800552c <HAL_RCCEx_GetPLL2ClockFreq>
 8007e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e08:	e027      	b.n	8007e5a <UART_SetConfig+0x8be>
 8007e0a:	f107 0318 	add.w	r3, r7, #24
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fd fce0 	bl	80057d4 <HAL_RCCEx_GetPLL3ClockFreq>
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e18:	e01f      	b.n	8007e5a <UART_SetConfig+0x8be>
 8007e1a:	4b21      	ldr	r3, [pc, #132]	@ (8007ea0 <UART_SetConfig+0x904>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <UART_SetConfig+0x89e>
 8007e26:	4b1e      	ldr	r3, [pc, #120]	@ (8007ea0 <UART_SetConfig+0x904>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	08db      	lsrs	r3, r3, #3
 8007e2c:	f003 0303 	and.w	r3, r3, #3
 8007e30:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea8 <UART_SetConfig+0x90c>)
 8007e32:	fa22 f303 	lsr.w	r3, r2, r3
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e38:	e00f      	b.n	8007e5a <UART_SetConfig+0x8be>
 8007e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea8 <UART_SetConfig+0x90c>)
 8007e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e3e:	e00c      	b.n	8007e5a <UART_SetConfig+0x8be>
 8007e40:	4b1a      	ldr	r3, [pc, #104]	@ (8007eac <UART_SetConfig+0x910>)
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e44:	e009      	b.n	8007e5a <UART_SetConfig+0x8be>
 8007e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e4c:	e005      	b.n	8007e5a <UART_SetConfig+0x8be>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e58:	bf00      	nop
 8007e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 81ee 	beq.w	800823e <UART_SetConfig+0xca2>
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e66:	4a12      	ldr	r2, [pc, #72]	@ (8007eb0 <UART_SetConfig+0x914>)
 8007e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	4413      	add	r3, r2
 8007e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d305      	bcc.n	8007e92 <UART_SetConfig+0x8f6>
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	031b      	lsls	r3, r3, #12
 8007e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d910      	bls.n	8007eb4 <UART_SetConfig+0x918>
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e98:	e1d1      	b.n	800823e <UART_SetConfig+0xca2>
 8007e9a:	bf00      	nop
 8007e9c:	40011c00 	.word	0x40011c00
 8007ea0:	58024400 	.word	0x58024400
 8007ea4:	58000c00 	.word	0x58000c00
 8007ea8:	03d09000 	.word	0x03d09000
 8007eac:	003d0900 	.word	0x003d0900
 8007eb0:	0800b554 	.word	0x0800b554
 8007eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	60bb      	str	r3, [r7, #8]
 8007eba:	60fa      	str	r2, [r7, #12]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec0:	4ac0      	ldr	r2, [pc, #768]	@ (80081c4 <UART_SetConfig+0xc28>)
 8007ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2200      	movs	r2, #0
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ed6:	f7f8 fa73 	bl	80003c0 <__aeabi_uldivmod>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	020b      	lsls	r3, r1, #8
 8007eec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ef0:	0202      	lsls	r2, r0, #8
 8007ef2:	6979      	ldr	r1, [r7, #20]
 8007ef4:	6849      	ldr	r1, [r1, #4]
 8007ef6:	0849      	lsrs	r1, r1, #1
 8007ef8:	2000      	movs	r0, #0
 8007efa:	460c      	mov	r4, r1
 8007efc:	4605      	mov	r5, r0
 8007efe:	eb12 0804 	adds.w	r8, r2, r4
 8007f02:	eb43 0905 	adc.w	r9, r3, r5
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	469a      	mov	sl, r3
 8007f0e:	4693      	mov	fp, r2
 8007f10:	4652      	mov	r2, sl
 8007f12:	465b      	mov	r3, fp
 8007f14:	4640      	mov	r0, r8
 8007f16:	4649      	mov	r1, r9
 8007f18:	f7f8 fa52 	bl	80003c0 <__aeabi_uldivmod>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4613      	mov	r3, r2
 8007f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f2a:	d308      	bcc.n	8007f3e <UART_SetConfig+0x9a2>
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f32:	d204      	bcs.n	8007f3e <UART_SetConfig+0x9a2>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f3a:	60da      	str	r2, [r3, #12]
 8007f3c:	e17f      	b.n	800823e <UART_SetConfig+0xca2>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f44:	e17b      	b.n	800823e <UART_SetConfig+0xca2>
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f4e:	f040 80bd 	bne.w	80080cc <UART_SetConfig+0xb30>
 8007f52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	dc48      	bgt.n	8007fec <UART_SetConfig+0xa50>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	db7b      	blt.n	8008056 <UART_SetConfig+0xaba>
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d879      	bhi.n	8008056 <UART_SetConfig+0xaba>
 8007f62:	a201      	add	r2, pc, #4	@ (adr r2, 8007f68 <UART_SetConfig+0x9cc>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007ff3 	.word	0x08007ff3
 8007f6c:	08007ffb 	.word	0x08007ffb
 8007f70:	08008057 	.word	0x08008057
 8007f74:	08008057 	.word	0x08008057
 8007f78:	08008003 	.word	0x08008003
 8007f7c:	08008057 	.word	0x08008057
 8007f80:	08008057 	.word	0x08008057
 8007f84:	08008057 	.word	0x08008057
 8007f88:	08008013 	.word	0x08008013
 8007f8c:	08008057 	.word	0x08008057
 8007f90:	08008057 	.word	0x08008057
 8007f94:	08008057 	.word	0x08008057
 8007f98:	08008057 	.word	0x08008057
 8007f9c:	08008057 	.word	0x08008057
 8007fa0:	08008057 	.word	0x08008057
 8007fa4:	08008057 	.word	0x08008057
 8007fa8:	08008023 	.word	0x08008023
 8007fac:	08008057 	.word	0x08008057
 8007fb0:	08008057 	.word	0x08008057
 8007fb4:	08008057 	.word	0x08008057
 8007fb8:	08008057 	.word	0x08008057
 8007fbc:	08008057 	.word	0x08008057
 8007fc0:	08008057 	.word	0x08008057
 8007fc4:	08008057 	.word	0x08008057
 8007fc8:	08008057 	.word	0x08008057
 8007fcc:	08008057 	.word	0x08008057
 8007fd0:	08008057 	.word	0x08008057
 8007fd4:	08008057 	.word	0x08008057
 8007fd8:	08008057 	.word	0x08008057
 8007fdc:	08008057 	.word	0x08008057
 8007fe0:	08008057 	.word	0x08008057
 8007fe4:	08008057 	.word	0x08008057
 8007fe8:	08008049 	.word	0x08008049
 8007fec:	2b40      	cmp	r3, #64	@ 0x40
 8007fee:	d02e      	beq.n	800804e <UART_SetConfig+0xab2>
 8007ff0:	e031      	b.n	8008056 <UART_SetConfig+0xaba>
 8007ff2:	f7fc f8b9 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8007ff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8007ff8:	e033      	b.n	8008062 <UART_SetConfig+0xac6>
 8007ffa:	f7fc f8cb 	bl	8004194 <HAL_RCC_GetPCLK2Freq>
 8007ffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008000:	e02f      	b.n	8008062 <UART_SetConfig+0xac6>
 8008002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008006:	4618      	mov	r0, r3
 8008008:	f7fd fa90 	bl	800552c <HAL_RCCEx_GetPLL2ClockFreq>
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008010:	e027      	b.n	8008062 <UART_SetConfig+0xac6>
 8008012:	f107 0318 	add.w	r3, r7, #24
 8008016:	4618      	mov	r0, r3
 8008018:	f7fd fbdc 	bl	80057d4 <HAL_RCCEx_GetPLL3ClockFreq>
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008020:	e01f      	b.n	8008062 <UART_SetConfig+0xac6>
 8008022:	4b69      	ldr	r3, [pc, #420]	@ (80081c8 <UART_SetConfig+0xc2c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <UART_SetConfig+0xaa6>
 800802e:	4b66      	ldr	r3, [pc, #408]	@ (80081c8 <UART_SetConfig+0xc2c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	08db      	lsrs	r3, r3, #3
 8008034:	f003 0303 	and.w	r3, r3, #3
 8008038:	4a64      	ldr	r2, [pc, #400]	@ (80081cc <UART_SetConfig+0xc30>)
 800803a:	fa22 f303 	lsr.w	r3, r2, r3
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008040:	e00f      	b.n	8008062 <UART_SetConfig+0xac6>
 8008042:	4b62      	ldr	r3, [pc, #392]	@ (80081cc <UART_SetConfig+0xc30>)
 8008044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008046:	e00c      	b.n	8008062 <UART_SetConfig+0xac6>
 8008048:	4b61      	ldr	r3, [pc, #388]	@ (80081d0 <UART_SetConfig+0xc34>)
 800804a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800804c:	e009      	b.n	8008062 <UART_SetConfig+0xac6>
 800804e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008054:	e005      	b.n	8008062 <UART_SetConfig+0xac6>
 8008056:	2300      	movs	r3, #0
 8008058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800805a:	2301      	movs	r3, #1
 800805c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008060:	bf00      	nop
 8008062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 80ea 	beq.w	800823e <UART_SetConfig+0xca2>
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806e:	4a55      	ldr	r2, [pc, #340]	@ (80081c4 <UART_SetConfig+0xc28>)
 8008070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008074:	461a      	mov	r2, r3
 8008076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008078:	fbb3 f3f2 	udiv	r3, r3, r2
 800807c:	005a      	lsls	r2, r3, #1
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	085b      	lsrs	r3, r3, #1
 8008084:	441a      	add	r2, r3
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	fbb2 f3f3 	udiv	r3, r2, r3
 800808e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008092:	2b0f      	cmp	r3, #15
 8008094:	d916      	bls.n	80080c4 <UART_SetConfig+0xb28>
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800809c:	d212      	bcs.n	80080c4 <UART_SetConfig+0xb28>
 800809e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	f023 030f 	bic.w	r3, r3, #15
 80080a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	085b      	lsrs	r3, r3, #1
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80080b6:	4313      	orrs	r3, r2
 80080b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80080c0:	60da      	str	r2, [r3, #12]
 80080c2:	e0bc      	b.n	800823e <UART_SetConfig+0xca2>
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80080ca:	e0b8      	b.n	800823e <UART_SetConfig+0xca2>
 80080cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	dc4b      	bgt.n	800816c <UART_SetConfig+0xbd0>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f2c0 8087 	blt.w	80081e8 <UART_SetConfig+0xc4c>
 80080da:	2b20      	cmp	r3, #32
 80080dc:	f200 8084 	bhi.w	80081e8 <UART_SetConfig+0xc4c>
 80080e0:	a201      	add	r2, pc, #4	@ (adr r2, 80080e8 <UART_SetConfig+0xb4c>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	08008173 	.word	0x08008173
 80080ec:	0800817b 	.word	0x0800817b
 80080f0:	080081e9 	.word	0x080081e9
 80080f4:	080081e9 	.word	0x080081e9
 80080f8:	08008183 	.word	0x08008183
 80080fc:	080081e9 	.word	0x080081e9
 8008100:	080081e9 	.word	0x080081e9
 8008104:	080081e9 	.word	0x080081e9
 8008108:	08008193 	.word	0x08008193
 800810c:	080081e9 	.word	0x080081e9
 8008110:	080081e9 	.word	0x080081e9
 8008114:	080081e9 	.word	0x080081e9
 8008118:	080081e9 	.word	0x080081e9
 800811c:	080081e9 	.word	0x080081e9
 8008120:	080081e9 	.word	0x080081e9
 8008124:	080081e9 	.word	0x080081e9
 8008128:	080081a3 	.word	0x080081a3
 800812c:	080081e9 	.word	0x080081e9
 8008130:	080081e9 	.word	0x080081e9
 8008134:	080081e9 	.word	0x080081e9
 8008138:	080081e9 	.word	0x080081e9
 800813c:	080081e9 	.word	0x080081e9
 8008140:	080081e9 	.word	0x080081e9
 8008144:	080081e9 	.word	0x080081e9
 8008148:	080081e9 	.word	0x080081e9
 800814c:	080081e9 	.word	0x080081e9
 8008150:	080081e9 	.word	0x080081e9
 8008154:	080081e9 	.word	0x080081e9
 8008158:	080081e9 	.word	0x080081e9
 800815c:	080081e9 	.word	0x080081e9
 8008160:	080081e9 	.word	0x080081e9
 8008164:	080081e9 	.word	0x080081e9
 8008168:	080081db 	.word	0x080081db
 800816c:	2b40      	cmp	r3, #64	@ 0x40
 800816e:	d037      	beq.n	80081e0 <UART_SetConfig+0xc44>
 8008170:	e03a      	b.n	80081e8 <UART_SetConfig+0xc4c>
 8008172:	f7fb fff9 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8008176:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008178:	e03c      	b.n	80081f4 <UART_SetConfig+0xc58>
 800817a:	f7fc f80b 	bl	8004194 <HAL_RCC_GetPCLK2Freq>
 800817e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008180:	e038      	b.n	80081f4 <UART_SetConfig+0xc58>
 8008182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008186:	4618      	mov	r0, r3
 8008188:	f7fd f9d0 	bl	800552c <HAL_RCCEx_GetPLL2ClockFreq>
 800818c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008190:	e030      	b.n	80081f4 <UART_SetConfig+0xc58>
 8008192:	f107 0318 	add.w	r3, r7, #24
 8008196:	4618      	mov	r0, r3
 8008198:	f7fd fb1c 	bl	80057d4 <HAL_RCCEx_GetPLL3ClockFreq>
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081a0:	e028      	b.n	80081f4 <UART_SetConfig+0xc58>
 80081a2:	4b09      	ldr	r3, [pc, #36]	@ (80081c8 <UART_SetConfig+0xc2c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d012      	beq.n	80081d4 <UART_SetConfig+0xc38>
 80081ae:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <UART_SetConfig+0xc2c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	4a04      	ldr	r2, [pc, #16]	@ (80081cc <UART_SetConfig+0xc30>)
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081c0:	e018      	b.n	80081f4 <UART_SetConfig+0xc58>
 80081c2:	bf00      	nop
 80081c4:	0800b554 	.word	0x0800b554
 80081c8:	58024400 	.word	0x58024400
 80081cc:	03d09000 	.word	0x03d09000
 80081d0:	003d0900 	.word	0x003d0900
 80081d4:	4b24      	ldr	r3, [pc, #144]	@ (8008268 <UART_SetConfig+0xccc>)
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081d8:	e00c      	b.n	80081f4 <UART_SetConfig+0xc58>
 80081da:	4b24      	ldr	r3, [pc, #144]	@ (800826c <UART_SetConfig+0xcd0>)
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081de:	e009      	b.n	80081f4 <UART_SetConfig+0xc58>
 80081e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e6:	e005      	b.n	80081f4 <UART_SetConfig+0xc58>
 80081e8:	2300      	movs	r3, #0
 80081ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ec:	2301      	movs	r3, #1
 80081ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081f2:	bf00      	nop
 80081f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d021      	beq.n	800823e <UART_SetConfig+0xca2>
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008270 <UART_SetConfig+0xcd4>)
 8008200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008204:	461a      	mov	r2, r3
 8008206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008208:	fbb3 f2f2 	udiv	r2, r3, r2
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	085b      	lsrs	r3, r3, #1
 8008212:	441a      	add	r2, r3
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	fbb2 f3f3 	udiv	r3, r2, r3
 800821c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008220:	2b0f      	cmp	r3, #15
 8008222:	d909      	bls.n	8008238 <UART_SetConfig+0xc9c>
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800822a:	d205      	bcs.n	8008238 <UART_SetConfig+0xc9c>
 800822c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822e:	b29a      	uxth	r2, r3
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60da      	str	r2, [r3, #12]
 8008236:	e002      	b.n	800823e <UART_SetConfig+0xca2>
 8008238:	2301      	movs	r3, #1
 800823a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2201      	movs	r2, #1
 8008242:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2201      	movs	r2, #1
 800824a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2200      	movs	r2, #0
 8008252:	675a      	str	r2, [r3, #116]	@ 0x74
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2200      	movs	r2, #0
 8008258:	679a      	str	r2, [r3, #120]	@ 0x78
 800825a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800825e:	4618      	mov	r0, r3
 8008260:	3748      	adds	r7, #72	@ 0x48
 8008262:	46bd      	mov	sp, r7
 8008264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008268:	03d09000 	.word	0x03d09000
 800826c:	003d0900 	.word	0x003d0900
 8008270:	0800b554 	.word	0x0800b554

08008274 <UART_AdvFeatureConfig>:
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008280:	f003 0308 	and.w	r3, r3, #8
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00a      	beq.n	800829e <UART_AdvFeatureConfig+0x2a>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	605a      	str	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <UART_AdvFeatureConfig+0x4c>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	605a      	str	r2, [r3, #4]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00a      	beq.n	80082e2 <UART_AdvFeatureConfig+0x6e>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <UART_AdvFeatureConfig+0x90>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	605a      	str	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008308:	f003 0310 	and.w	r3, r3, #16
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <UART_AdvFeatureConfig+0xb2>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	609a      	str	r2, [r3, #8]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <UART_AdvFeatureConfig+0xd4>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	609a      	str	r2, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01a      	beq.n	800838a <UART_AdvFeatureConfig+0x116>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008372:	d10a      	bne.n	800838a <UART_AdvFeatureConfig+0x116>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	605a      	str	r2, [r3, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <UART_AdvFeatureConfig+0x138>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	605a      	str	r2, [r3, #4]
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <UART_CheckIdleState>:
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b098      	sub	sp, #96	@ 0x60
 80083bc:	af02      	add	r7, sp, #8
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80083c8:	f7f9 f9c0 	bl	800174c <HAL_GetTick>
 80083cc:	6578      	str	r0, [r7, #84]	@ 0x54
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d12f      	bne.n	800843c <UART_CheckIdleState+0x84>
 80083dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083e4:	2200      	movs	r2, #0
 80083e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f88e 	bl	800850c <UART_WaitOnFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d022      	beq.n	800843c <UART_CheckIdleState+0x84>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	637b      	str	r3, [r7, #52]	@ 0x34
 8008404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800840a:	653b      	str	r3, [r7, #80]	@ 0x50
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008414:	647b      	str	r3, [r7, #68]	@ 0x44
 8008416:	643a      	str	r2, [r7, #64]	@ 0x40
 8008418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800841a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800841c:	e841 2300 	strex	r3, r2, [r1]
 8008420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e6      	bne.n	80083f6 <UART_CheckIdleState+0x3e>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008438:	2303      	movs	r3, #3
 800843a:	e063      	b.n	8008504 <UART_CheckIdleState+0x14c>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0304 	and.w	r3, r3, #4
 8008446:	2b04      	cmp	r3, #4
 8008448:	d149      	bne.n	80084de <UART_CheckIdleState+0x126>
 800844a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008452:	2200      	movs	r2, #0
 8008454:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f857 	bl	800850c <UART_WaitOnFlagUntilTimeout>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d03c      	beq.n	80084de <UART_CheckIdleState+0x126>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	623b      	str	r3, [r7, #32]
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008482:	633b      	str	r3, [r7, #48]	@ 0x30
 8008484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e6      	bne.n	8008464 <UART_CheckIdleState+0xac>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084b6:	61fa      	str	r2, [r7, #28]
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	69b9      	ldr	r1, [r7, #24]
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e5      	bne.n	8008496 <UART_CheckIdleState+0xde>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80084da:	2303      	movs	r3, #3
 80084dc:	e012      	b.n	8008504 <UART_CheckIdleState+0x14c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008502:	2300      	movs	r3, #0
 8008504:	4618      	mov	r0, r3
 8008506:	3758      	adds	r7, #88	@ 0x58
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <UART_WaitOnFlagUntilTimeout>:
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	4613      	mov	r3, r2
 800851a:	71fb      	strb	r3, [r7, #7]
 800851c:	e04f      	b.n	80085be <UART_WaitOnFlagUntilTimeout+0xb2>
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008524:	d04b      	beq.n	80085be <UART_WaitOnFlagUntilTimeout+0xb2>
 8008526:	f7f9 f911 	bl	800174c <HAL_GetTick>
 800852a:	4602      	mov	r2, r0
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	429a      	cmp	r2, r3
 8008534:	d302      	bcc.n	800853c <UART_WaitOnFlagUntilTimeout+0x30>
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <UART_WaitOnFlagUntilTimeout+0x34>
 800853c:	2303      	movs	r3, #3
 800853e:	e04e      	b.n	80085de <UART_WaitOnFlagUntilTimeout+0xd2>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0304 	and.w	r3, r3, #4
 800854a:	2b00      	cmp	r3, #0
 800854c:	d037      	beq.n	80085be <UART_WaitOnFlagUntilTimeout+0xb2>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b80      	cmp	r3, #128	@ 0x80
 8008552:	d034      	beq.n	80085be <UART_WaitOnFlagUntilTimeout+0xb2>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b40      	cmp	r3, #64	@ 0x40
 8008558:	d031      	beq.n	80085be <UART_WaitOnFlagUntilTimeout+0xb2>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b08      	cmp	r3, #8
 8008566:	d110      	bne.n	800858a <UART_WaitOnFlagUntilTimeout+0x7e>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2208      	movs	r2, #8
 800856e:	621a      	str	r2, [r3, #32]
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 f839 	bl	80085e8 <UART_EndRxTransfer>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2208      	movs	r2, #8
 800857a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008586:	2301      	movs	r3, #1
 8008588:	e029      	b.n	80085de <UART_WaitOnFlagUntilTimeout+0xd2>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008598:	d111      	bne.n	80085be <UART_WaitOnFlagUntilTimeout+0xb2>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085a2:	621a      	str	r2, [r3, #32]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f81f 	bl	80085e8 <UART_EndRxTransfer>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80085ba:	2303      	movs	r3, #3
 80085bc:	e00f      	b.n	80085de <UART_WaitOnFlagUntilTimeout+0xd2>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69da      	ldr	r2, [r3, #28]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4013      	ands	r3, r2
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	bf0c      	ite	eq
 80085ce:	2301      	moveq	r3, #1
 80085d0:	2300      	movne	r3, #0
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d0a0      	beq.n	800851e <UART_WaitOnFlagUntilTimeout+0x12>
 80085dc:	2300      	movs	r3, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <UART_EndRxTransfer>:
 80085e8:	b480      	push	{r7}
 80085ea:	b095      	sub	sp, #84	@ 0x54
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008604:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800860e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008610:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008612:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008614:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e6      	bne.n	80085f0 <UART_EndRxTransfer+0x8>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	623b      	str	r3, [r7, #32]
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	69fa      	ldr	r2, [r7, #28]
 8008634:	4b1e      	ldr	r3, [pc, #120]	@ (80086b0 <UART_EndRxTransfer+0xc8>)
 8008636:	4013      	ands	r3, r2
 8008638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3308      	adds	r3, #8
 8008640:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008646:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e5      	bne.n	8008622 <UART_EndRxTransfer+0x3a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800865a:	2b01      	cmp	r3, #1
 800865c:	d118      	bne.n	8008690 <UART_EndRxTransfer+0xa8>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	60bb      	str	r3, [r7, #8]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f023 0310 	bic.w	r3, r3, #16
 8008672:	647b      	str	r3, [r7, #68]	@ 0x44
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	617a      	str	r2, [r7, #20]
 8008680:	6979      	ldr	r1, [r7, #20]
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	613b      	str	r3, [r7, #16]
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_EndRxTransfer+0x76>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2220      	movs	r2, #32
 8008694:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	675a      	str	r2, [r3, #116]	@ 0x74
 80086a4:	bf00      	nop
 80086a6:	3754      	adds	r7, #84	@ 0x54
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	effffffe 	.word	0xeffffffe

080086b4 <UART_DMAAbortOnError>:
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7fe ff50 	bl	8007570 <HAL_UART_ErrorCallback>
 80086d0:	bf00      	nop
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <UART_EndTransmit_IT>:
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f4:	61fb      	str	r3, [r7, #28]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	61bb      	str	r3, [r7, #24]
 8008700:	617a      	str	r2, [r7, #20]
 8008702:	6979      	ldr	r1, [r7, #20]
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e6      	bne.n	80086e0 <UART_EndTransmit_IT+0x8>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	679a      	str	r2, [r3, #120]	@ 0x78
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7fe ff1b 	bl	800755c <HAL_UART_TxCpltCallback>
 8008726:	bf00      	nop
 8008728:	3720      	adds	r7, #32
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <HAL_UARTEx_WakeupCallback>:
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <HAL_UARTEx_RxFifoFullCallback>:
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <HAL_UARTEx_TxFifoEmptyCallback>:
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	bf00      	nop
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <HAL_UARTEx_DisableFifoMode>:
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_UARTEx_DisableFifoMode+0x16>
 800877c:	2302      	movs	r3, #2
 800877e:	e027      	b.n	80087d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2224      	movs	r2, #36	@ 0x24
 800878c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0201 	bic.w	r2, r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	665a      	str	r2, [r3, #100]	@ 0x64
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80087ce:	2300      	movs	r3, #0
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_UARTEx_SetTxFifoThreshold>:
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d101      	bne.n	80087f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e02d      	b.n	8008850 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2224      	movs	r2, #36	@ 0x24
 8008800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 0201 	bic.w	r2, r2, #1
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f84f 	bl	80088d4 <UARTEx_SetNbDataToProcess>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800884e:	2300      	movs	r3, #0
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_UARTEx_SetRxFifoThreshold>:
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800886c:	2302      	movs	r3, #2
 800886e:	e02d      	b.n	80088cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2224      	movs	r2, #36	@ 0x24
 800887c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0201 	bic.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	609a      	str	r2, [r3, #8]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f811 	bl	80088d4 <UARTEx_SetNbDataToProcess>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80088ca:	2300      	movs	r3, #0
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UARTEx_SetNbDataToProcess>:
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d108      	bne.n	80088f6 <UARTEx_SetNbDataToProcess+0x22>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80088f4:	e031      	b.n	800895a <UARTEx_SetNbDataToProcess+0x86>
 80088f6:	2310      	movs	r3, #16
 80088f8:	73fb      	strb	r3, [r7, #15]
 80088fa:	2310      	movs	r3, #16
 80088fc:	73bb      	strb	r3, [r7, #14]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	0e5b      	lsrs	r3, r3, #25
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	737b      	strb	r3, [r7, #13]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	0f5b      	lsrs	r3, r3, #29
 8008916:	b2db      	uxtb	r3, r3
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	733b      	strb	r3, [r7, #12]
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	7b3a      	ldrb	r2, [r7, #12]
 8008922:	4911      	ldr	r1, [pc, #68]	@ (8008968 <UARTEx_SetNbDataToProcess+0x94>)
 8008924:	5c8a      	ldrb	r2, [r1, r2]
 8008926:	fb02 f303 	mul.w	r3, r2, r3
 800892a:	7b3a      	ldrb	r2, [r7, #12]
 800892c:	490f      	ldr	r1, [pc, #60]	@ (800896c <UARTEx_SetNbDataToProcess+0x98>)
 800892e:	5c8a      	ldrb	r2, [r1, r2]
 8008930:	fb93 f3f2 	sdiv	r3, r3, r2
 8008934:	b29a      	uxth	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	7b7a      	ldrb	r2, [r7, #13]
 8008940:	4909      	ldr	r1, [pc, #36]	@ (8008968 <UARTEx_SetNbDataToProcess+0x94>)
 8008942:	5c8a      	ldrb	r2, [r1, r2]
 8008944:	fb02 f303 	mul.w	r3, r2, r3
 8008948:	7b7a      	ldrb	r2, [r7, #13]
 800894a:	4908      	ldr	r1, [pc, #32]	@ (800896c <UARTEx_SetNbDataToProcess+0x98>)
 800894c:	5c8a      	ldrb	r2, [r1, r2]
 800894e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008952:	b29a      	uxth	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800895a:	bf00      	nop
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	0800b56c 	.word	0x0800b56c
 800896c:	0800b574 	.word	0x0800b574

08008970 <__cvt>:
 8008970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008972:	ed2d 8b02 	vpush	{d8}
 8008976:	eeb0 8b40 	vmov.f64	d8, d0
 800897a:	b085      	sub	sp, #20
 800897c:	4617      	mov	r7, r2
 800897e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008980:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008982:	ee18 2a90 	vmov	r2, s17
 8008986:	f025 0520 	bic.w	r5, r5, #32
 800898a:	2a00      	cmp	r2, #0
 800898c:	bfb6      	itet	lt
 800898e:	222d      	movlt	r2, #45	@ 0x2d
 8008990:	2200      	movge	r2, #0
 8008992:	eeb1 8b40 	vneglt.f64	d8, d0
 8008996:	2d46      	cmp	r5, #70	@ 0x46
 8008998:	460c      	mov	r4, r1
 800899a:	701a      	strb	r2, [r3, #0]
 800899c:	d004      	beq.n	80089a8 <__cvt+0x38>
 800899e:	2d45      	cmp	r5, #69	@ 0x45
 80089a0:	d100      	bne.n	80089a4 <__cvt+0x34>
 80089a2:	3401      	adds	r4, #1
 80089a4:	2102      	movs	r1, #2
 80089a6:	e000      	b.n	80089aa <__cvt+0x3a>
 80089a8:	2103      	movs	r1, #3
 80089aa:	ab03      	add	r3, sp, #12
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	ab02      	add	r3, sp, #8
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	4622      	mov	r2, r4
 80089b4:	4633      	mov	r3, r6
 80089b6:	eeb0 0b48 	vmov.f64	d0, d8
 80089ba:	f000 ff31 	bl	8009820 <_dtoa_r>
 80089be:	2d47      	cmp	r5, #71	@ 0x47
 80089c0:	d114      	bne.n	80089ec <__cvt+0x7c>
 80089c2:	07fb      	lsls	r3, r7, #31
 80089c4:	d50a      	bpl.n	80089dc <__cvt+0x6c>
 80089c6:	1902      	adds	r2, r0, r4
 80089c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80089cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d0:	bf08      	it	eq
 80089d2:	9203      	streq	r2, [sp, #12]
 80089d4:	2130      	movs	r1, #48	@ 0x30
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	4293      	cmp	r3, r2
 80089da:	d319      	bcc.n	8008a10 <__cvt+0xa0>
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089e0:	1a1b      	subs	r3, r3, r0
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	b005      	add	sp, #20
 80089e6:	ecbd 8b02 	vpop	{d8}
 80089ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ec:	2d46      	cmp	r5, #70	@ 0x46
 80089ee:	eb00 0204 	add.w	r2, r0, r4
 80089f2:	d1e9      	bne.n	80089c8 <__cvt+0x58>
 80089f4:	7803      	ldrb	r3, [r0, #0]
 80089f6:	2b30      	cmp	r3, #48	@ 0x30
 80089f8:	d107      	bne.n	8008a0a <__cvt+0x9a>
 80089fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80089fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a02:	bf1c      	itt	ne
 8008a04:	f1c4 0401 	rsbne	r4, r4, #1
 8008a08:	6034      	strne	r4, [r6, #0]
 8008a0a:	6833      	ldr	r3, [r6, #0]
 8008a0c:	441a      	add	r2, r3
 8008a0e:	e7db      	b.n	80089c8 <__cvt+0x58>
 8008a10:	1c5c      	adds	r4, r3, #1
 8008a12:	9403      	str	r4, [sp, #12]
 8008a14:	7019      	strb	r1, [r3, #0]
 8008a16:	e7de      	b.n	80089d6 <__cvt+0x66>

08008a18 <__exponent>:
 8008a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a1a:	2900      	cmp	r1, #0
 8008a1c:	bfba      	itte	lt
 8008a1e:	4249      	neglt	r1, r1
 8008a20:	232d      	movlt	r3, #45	@ 0x2d
 8008a22:	232b      	movge	r3, #43	@ 0x2b
 8008a24:	2909      	cmp	r1, #9
 8008a26:	7002      	strb	r2, [r0, #0]
 8008a28:	7043      	strb	r3, [r0, #1]
 8008a2a:	dd29      	ble.n	8008a80 <__exponent+0x68>
 8008a2c:	f10d 0307 	add.w	r3, sp, #7
 8008a30:	461d      	mov	r5, r3
 8008a32:	270a      	movs	r7, #10
 8008a34:	461a      	mov	r2, r3
 8008a36:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a3a:	fb07 1416 	mls	r4, r7, r6, r1
 8008a3e:	3430      	adds	r4, #48	@ 0x30
 8008a40:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a44:	460c      	mov	r4, r1
 8008a46:	2c63      	cmp	r4, #99	@ 0x63
 8008a48:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	dcf1      	bgt.n	8008a34 <__exponent+0x1c>
 8008a50:	3130      	adds	r1, #48	@ 0x30
 8008a52:	1e94      	subs	r4, r2, #2
 8008a54:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a58:	1c41      	adds	r1, r0, #1
 8008a5a:	4623      	mov	r3, r4
 8008a5c:	42ab      	cmp	r3, r5
 8008a5e:	d30a      	bcc.n	8008a76 <__exponent+0x5e>
 8008a60:	f10d 0309 	add.w	r3, sp, #9
 8008a64:	1a9b      	subs	r3, r3, r2
 8008a66:	42ac      	cmp	r4, r5
 8008a68:	bf88      	it	hi
 8008a6a:	2300      	movhi	r3, #0
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	4403      	add	r3, r0
 8008a70:	1a18      	subs	r0, r3, r0
 8008a72:	b003      	add	sp, #12
 8008a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a76:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a7a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008a7e:	e7ed      	b.n	8008a5c <__exponent+0x44>
 8008a80:	2330      	movs	r3, #48	@ 0x30
 8008a82:	3130      	adds	r1, #48	@ 0x30
 8008a84:	7083      	strb	r3, [r0, #2]
 8008a86:	70c1      	strb	r1, [r0, #3]
 8008a88:	1d03      	adds	r3, r0, #4
 8008a8a:	e7f1      	b.n	8008a70 <__exponent+0x58>
 8008a8c:	0000      	movs	r0, r0
	...

08008a90 <_printf_float>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	b08d      	sub	sp, #52	@ 0x34
 8008a96:	460c      	mov	r4, r1
 8008a98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008a9c:	4616      	mov	r6, r2
 8008a9e:	461f      	mov	r7, r3
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	f000 fdad 	bl	8009600 <_localeconv_r>
 8008aa6:	f8d0 b000 	ldr.w	fp, [r0]
 8008aaa:	4658      	mov	r0, fp
 8008aac:	f7f7 fc80 	bl	80003b0 <strlen>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008abc:	6822      	ldr	r2, [r4, #0]
 8008abe:	9005      	str	r0, [sp, #20]
 8008ac0:	3307      	adds	r3, #7
 8008ac2:	f023 0307 	bic.w	r3, r3, #7
 8008ac6:	f103 0108 	add.w	r1, r3, #8
 8008aca:	f8c8 1000 	str.w	r1, [r8]
 8008ace:	ed93 0b00 	vldr	d0, [r3]
 8008ad2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008d30 <_printf_float+0x2a0>
 8008ad6:	eeb0 7bc0 	vabs.f64	d7, d0
 8008ada:	eeb4 7b46 	vcmp.f64	d7, d6
 8008ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008ae6:	dd24      	ble.n	8008b32 <_printf_float+0xa2>
 8008ae8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af0:	d502      	bpl.n	8008af8 <_printf_float+0x68>
 8008af2:	232d      	movs	r3, #45	@ 0x2d
 8008af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008af8:	498f      	ldr	r1, [pc, #572]	@ (8008d38 <_printf_float+0x2a8>)
 8008afa:	4b90      	ldr	r3, [pc, #576]	@ (8008d3c <_printf_float+0x2ac>)
 8008afc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008b00:	bf8c      	ite	hi
 8008b02:	4688      	movhi	r8, r1
 8008b04:	4698      	movls	r8, r3
 8008b06:	f022 0204 	bic.w	r2, r2, #4
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	6123      	str	r3, [r4, #16]
 8008b0e:	6022      	str	r2, [r4, #0]
 8008b10:	f04f 0a00 	mov.w	sl, #0
 8008b14:	9700      	str	r7, [sp, #0]
 8008b16:	4633      	mov	r3, r6
 8008b18:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f000 f9d1 	bl	8008ec4 <_printf_common>
 8008b22:	3001      	adds	r0, #1
 8008b24:	f040 8089 	bne.w	8008c3a <_printf_float+0x1aa>
 8008b28:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2c:	b00d      	add	sp, #52	@ 0x34
 8008b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b32:	eeb4 0b40 	vcmp.f64	d0, d0
 8008b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3a:	d709      	bvc.n	8008b50 <_printf_float+0xc0>
 8008b3c:	ee10 3a90 	vmov	r3, s1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	bfbc      	itt	lt
 8008b44:	232d      	movlt	r3, #45	@ 0x2d
 8008b46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b4a:	497d      	ldr	r1, [pc, #500]	@ (8008d40 <_printf_float+0x2b0>)
 8008b4c:	4b7d      	ldr	r3, [pc, #500]	@ (8008d44 <_printf_float+0x2b4>)
 8008b4e:	e7d5      	b.n	8008afc <_printf_float+0x6c>
 8008b50:	6863      	ldr	r3, [r4, #4]
 8008b52:	1c59      	adds	r1, r3, #1
 8008b54:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008b58:	d139      	bne.n	8008bce <_printf_float+0x13e>
 8008b5a:	2306      	movs	r3, #6
 8008b5c:	6063      	str	r3, [r4, #4]
 8008b5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b62:	2300      	movs	r3, #0
 8008b64:	6022      	str	r2, [r4, #0]
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008b6e:	ab09      	add	r3, sp, #36	@ 0x24
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	6861      	ldr	r1, [r4, #4]
 8008b74:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f7ff fef9 	bl	8008970 <__cvt>
 8008b7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b84:	4680      	mov	r8, r0
 8008b86:	d129      	bne.n	8008bdc <_printf_float+0x14c>
 8008b88:	1cc8      	adds	r0, r1, #3
 8008b8a:	db02      	blt.n	8008b92 <_printf_float+0x102>
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	4299      	cmp	r1, r3
 8008b90:	dd41      	ble.n	8008c16 <_printf_float+0x186>
 8008b92:	f1a9 0902 	sub.w	r9, r9, #2
 8008b96:	fa5f f989 	uxtb.w	r9, r9
 8008b9a:	3901      	subs	r1, #1
 8008b9c:	464a      	mov	r2, r9
 8008b9e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ba2:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ba4:	f7ff ff38 	bl	8008a18 <__exponent>
 8008ba8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008baa:	1813      	adds	r3, r2, r0
 8008bac:	2a01      	cmp	r2, #1
 8008bae:	4682      	mov	sl, r0
 8008bb0:	6123      	str	r3, [r4, #16]
 8008bb2:	dc02      	bgt.n	8008bba <_printf_float+0x12a>
 8008bb4:	6822      	ldr	r2, [r4, #0]
 8008bb6:	07d2      	lsls	r2, r2, #31
 8008bb8:	d501      	bpl.n	8008bbe <_printf_float+0x12e>
 8008bba:	3301      	adds	r3, #1
 8008bbc:	6123      	str	r3, [r4, #16]
 8008bbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0a6      	beq.n	8008b14 <_printf_float+0x84>
 8008bc6:	232d      	movs	r3, #45	@ 0x2d
 8008bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bcc:	e7a2      	b.n	8008b14 <_printf_float+0x84>
 8008bce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008bd2:	d1c4      	bne.n	8008b5e <_printf_float+0xce>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1c2      	bne.n	8008b5e <_printf_float+0xce>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e7bf      	b.n	8008b5c <_printf_float+0xcc>
 8008bdc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008be0:	d9db      	bls.n	8008b9a <_printf_float+0x10a>
 8008be2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008be6:	d118      	bne.n	8008c1a <_printf_float+0x18a>
 8008be8:	2900      	cmp	r1, #0
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	dd0b      	ble.n	8008c06 <_printf_float+0x176>
 8008bee:	6121      	str	r1, [r4, #16]
 8008bf0:	b913      	cbnz	r3, 8008bf8 <_printf_float+0x168>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	07d0      	lsls	r0, r2, #31
 8008bf6:	d502      	bpl.n	8008bfe <_printf_float+0x16e>
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	440b      	add	r3, r1
 8008bfc:	6123      	str	r3, [r4, #16]
 8008bfe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c00:	f04f 0a00 	mov.w	sl, #0
 8008c04:	e7db      	b.n	8008bbe <_printf_float+0x12e>
 8008c06:	b913      	cbnz	r3, 8008c0e <_printf_float+0x17e>
 8008c08:	6822      	ldr	r2, [r4, #0]
 8008c0a:	07d2      	lsls	r2, r2, #31
 8008c0c:	d501      	bpl.n	8008c12 <_printf_float+0x182>
 8008c0e:	3302      	adds	r3, #2
 8008c10:	e7f4      	b.n	8008bfc <_printf_float+0x16c>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e7f2      	b.n	8008bfc <_printf_float+0x16c>
 8008c16:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008c1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	db05      	blt.n	8008c2c <_printf_float+0x19c>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	6121      	str	r1, [r4, #16]
 8008c24:	07d8      	lsls	r0, r3, #31
 8008c26:	d5ea      	bpl.n	8008bfe <_printf_float+0x16e>
 8008c28:	1c4b      	adds	r3, r1, #1
 8008c2a:	e7e7      	b.n	8008bfc <_printf_float+0x16c>
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	bfd4      	ite	le
 8008c30:	f1c1 0202 	rsble	r2, r1, #2
 8008c34:	2201      	movgt	r2, #1
 8008c36:	4413      	add	r3, r2
 8008c38:	e7e0      	b.n	8008bfc <_printf_float+0x16c>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	055a      	lsls	r2, r3, #21
 8008c3e:	d407      	bmi.n	8008c50 <_printf_float+0x1c0>
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	4642      	mov	r2, r8
 8008c44:	4631      	mov	r1, r6
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d12a      	bne.n	8008ca4 <_printf_float+0x214>
 8008c4e:	e76b      	b.n	8008b28 <_printf_float+0x98>
 8008c50:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008c54:	f240 80e0 	bls.w	8008e18 <_printf_float+0x388>
 8008c58:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008c5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c64:	d133      	bne.n	8008cce <_printf_float+0x23e>
 8008c66:	4a38      	ldr	r2, [pc, #224]	@ (8008d48 <_printf_float+0x2b8>)
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	47b8      	blx	r7
 8008c70:	3001      	adds	r0, #1
 8008c72:	f43f af59 	beq.w	8008b28 <_printf_float+0x98>
 8008c76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008c7a:	4543      	cmp	r3, r8
 8008c7c:	db02      	blt.n	8008c84 <_printf_float+0x1f4>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	07d8      	lsls	r0, r3, #31
 8008c82:	d50f      	bpl.n	8008ca4 <_printf_float+0x214>
 8008c84:	9b05      	ldr	r3, [sp, #20]
 8008c86:	465a      	mov	r2, fp
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b8      	blx	r7
 8008c8e:	3001      	adds	r0, #1
 8008c90:	f43f af4a 	beq.w	8008b28 <_printf_float+0x98>
 8008c94:	f04f 0900 	mov.w	r9, #0
 8008c98:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c9c:	f104 0a1a 	add.w	sl, r4, #26
 8008ca0:	45c8      	cmp	r8, r9
 8008ca2:	dc09      	bgt.n	8008cb8 <_printf_float+0x228>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	079b      	lsls	r3, r3, #30
 8008ca8:	f100 8107 	bmi.w	8008eba <_printf_float+0x42a>
 8008cac:	68e0      	ldr	r0, [r4, #12]
 8008cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cb0:	4298      	cmp	r0, r3
 8008cb2:	bfb8      	it	lt
 8008cb4:	4618      	movlt	r0, r3
 8008cb6:	e739      	b.n	8008b2c <_printf_float+0x9c>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	4652      	mov	r2, sl
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b8      	blx	r7
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f43f af30 	beq.w	8008b28 <_printf_float+0x98>
 8008cc8:	f109 0901 	add.w	r9, r9, #1
 8008ccc:	e7e8      	b.n	8008ca0 <_printf_float+0x210>
 8008cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	dc3b      	bgt.n	8008d4c <_printf_float+0x2bc>
 8008cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d48 <_printf_float+0x2b8>)
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	f43f af22 	beq.w	8008b28 <_printf_float+0x98>
 8008ce4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ce8:	ea59 0303 	orrs.w	r3, r9, r3
 8008cec:	d102      	bne.n	8008cf4 <_printf_float+0x264>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	07d9      	lsls	r1, r3, #31
 8008cf2:	d5d7      	bpl.n	8008ca4 <_printf_float+0x214>
 8008cf4:	9b05      	ldr	r3, [sp, #20]
 8008cf6:	465a      	mov	r2, fp
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b8      	blx	r7
 8008cfe:	3001      	adds	r0, #1
 8008d00:	f43f af12 	beq.w	8008b28 <_printf_float+0x98>
 8008d04:	f04f 0a00 	mov.w	sl, #0
 8008d08:	f104 0b1a 	add.w	fp, r4, #26
 8008d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d0e:	425b      	negs	r3, r3
 8008d10:	4553      	cmp	r3, sl
 8008d12:	dc01      	bgt.n	8008d18 <_printf_float+0x288>
 8008d14:	464b      	mov	r3, r9
 8008d16:	e794      	b.n	8008c42 <_printf_float+0x1b2>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	465a      	mov	r2, fp
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b8      	blx	r7
 8008d22:	3001      	adds	r0, #1
 8008d24:	f43f af00 	beq.w	8008b28 <_printf_float+0x98>
 8008d28:	f10a 0a01 	add.w	sl, sl, #1
 8008d2c:	e7ee      	b.n	8008d0c <_printf_float+0x27c>
 8008d2e:	bf00      	nop
 8008d30:	ffffffff 	.word	0xffffffff
 8008d34:	7fefffff 	.word	0x7fefffff
 8008d38:	0800b580 	.word	0x0800b580
 8008d3c:	0800b57c 	.word	0x0800b57c
 8008d40:	0800b588 	.word	0x0800b588
 8008d44:	0800b584 	.word	0x0800b584
 8008d48:	0800b58c 	.word	0x0800b58c
 8008d4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d52:	4553      	cmp	r3, sl
 8008d54:	bfa8      	it	ge
 8008d56:	4653      	movge	r3, sl
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	4699      	mov	r9, r3
 8008d5c:	dc37      	bgt.n	8008dce <_printf_float+0x33e>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9307      	str	r3, [sp, #28]
 8008d62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d66:	f104 021a 	add.w	r2, r4, #26
 8008d6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d6c:	9907      	ldr	r1, [sp, #28]
 8008d6e:	9306      	str	r3, [sp, #24]
 8008d70:	eba3 0309 	sub.w	r3, r3, r9
 8008d74:	428b      	cmp	r3, r1
 8008d76:	dc31      	bgt.n	8008ddc <_printf_float+0x34c>
 8008d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7a:	459a      	cmp	sl, r3
 8008d7c:	dc3b      	bgt.n	8008df6 <_printf_float+0x366>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	07da      	lsls	r2, r3, #31
 8008d82:	d438      	bmi.n	8008df6 <_printf_float+0x366>
 8008d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d86:	ebaa 0903 	sub.w	r9, sl, r3
 8008d8a:	9b06      	ldr	r3, [sp, #24]
 8008d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8008d90:	4599      	cmp	r9, r3
 8008d92:	bfa8      	it	ge
 8008d94:	4699      	movge	r9, r3
 8008d96:	f1b9 0f00 	cmp.w	r9, #0
 8008d9a:	dc34      	bgt.n	8008e06 <_printf_float+0x376>
 8008d9c:	f04f 0800 	mov.w	r8, #0
 8008da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008da4:	f104 0b1a 	add.w	fp, r4, #26
 8008da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008daa:	ebaa 0303 	sub.w	r3, sl, r3
 8008dae:	eba3 0309 	sub.w	r3, r3, r9
 8008db2:	4543      	cmp	r3, r8
 8008db4:	f77f af76 	ble.w	8008ca4 <_printf_float+0x214>
 8008db8:	2301      	movs	r3, #1
 8008dba:	465a      	mov	r2, fp
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	47b8      	blx	r7
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	f43f aeb0 	beq.w	8008b28 <_printf_float+0x98>
 8008dc8:	f108 0801 	add.w	r8, r8, #1
 8008dcc:	e7ec      	b.n	8008da8 <_printf_float+0x318>
 8008dce:	4642      	mov	r2, r8
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	47b8      	blx	r7
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d1c1      	bne.n	8008d5e <_printf_float+0x2ce>
 8008dda:	e6a5      	b.n	8008b28 <_printf_float+0x98>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	4631      	mov	r1, r6
 8008de0:	4628      	mov	r0, r5
 8008de2:	9206      	str	r2, [sp, #24]
 8008de4:	47b8      	blx	r7
 8008de6:	3001      	adds	r0, #1
 8008de8:	f43f ae9e 	beq.w	8008b28 <_printf_float+0x98>
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	9a06      	ldr	r2, [sp, #24]
 8008df0:	3301      	adds	r3, #1
 8008df2:	9307      	str	r3, [sp, #28]
 8008df4:	e7b9      	b.n	8008d6a <_printf_float+0x2da>
 8008df6:	9b05      	ldr	r3, [sp, #20]
 8008df8:	465a      	mov	r2, fp
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b8      	blx	r7
 8008e00:	3001      	adds	r0, #1
 8008e02:	d1bf      	bne.n	8008d84 <_printf_float+0x2f4>
 8008e04:	e690      	b.n	8008b28 <_printf_float+0x98>
 8008e06:	9a06      	ldr	r2, [sp, #24]
 8008e08:	464b      	mov	r3, r9
 8008e0a:	4442      	add	r2, r8
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4628      	mov	r0, r5
 8008e10:	47b8      	blx	r7
 8008e12:	3001      	adds	r0, #1
 8008e14:	d1c2      	bne.n	8008d9c <_printf_float+0x30c>
 8008e16:	e687      	b.n	8008b28 <_printf_float+0x98>
 8008e18:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008e1c:	f1b9 0f01 	cmp.w	r9, #1
 8008e20:	dc01      	bgt.n	8008e26 <_printf_float+0x396>
 8008e22:	07db      	lsls	r3, r3, #31
 8008e24:	d536      	bpl.n	8008e94 <_printf_float+0x404>
 8008e26:	2301      	movs	r3, #1
 8008e28:	4642      	mov	r2, r8
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	47b8      	blx	r7
 8008e30:	3001      	adds	r0, #1
 8008e32:	f43f ae79 	beq.w	8008b28 <_printf_float+0x98>
 8008e36:	9b05      	ldr	r3, [sp, #20]
 8008e38:	465a      	mov	r2, fp
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	47b8      	blx	r7
 8008e40:	3001      	adds	r0, #1
 8008e42:	f43f ae71 	beq.w	8008b28 <_printf_float+0x98>
 8008e46:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008e4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e52:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e56:	d018      	beq.n	8008e8a <_printf_float+0x3fa>
 8008e58:	464b      	mov	r3, r9
 8008e5a:	f108 0201 	add.w	r2, r8, #1
 8008e5e:	4631      	mov	r1, r6
 8008e60:	4628      	mov	r0, r5
 8008e62:	47b8      	blx	r7
 8008e64:	3001      	adds	r0, #1
 8008e66:	d10c      	bne.n	8008e82 <_printf_float+0x3f2>
 8008e68:	e65e      	b.n	8008b28 <_printf_float+0x98>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	465a      	mov	r2, fp
 8008e6e:	4631      	mov	r1, r6
 8008e70:	4628      	mov	r0, r5
 8008e72:	47b8      	blx	r7
 8008e74:	3001      	adds	r0, #1
 8008e76:	f43f ae57 	beq.w	8008b28 <_printf_float+0x98>
 8008e7a:	f108 0801 	add.w	r8, r8, #1
 8008e7e:	45c8      	cmp	r8, r9
 8008e80:	dbf3      	blt.n	8008e6a <_printf_float+0x3da>
 8008e82:	4653      	mov	r3, sl
 8008e84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008e88:	e6dc      	b.n	8008c44 <_printf_float+0x1b4>
 8008e8a:	f04f 0800 	mov.w	r8, #0
 8008e8e:	f104 0b1a 	add.w	fp, r4, #26
 8008e92:	e7f4      	b.n	8008e7e <_printf_float+0x3ee>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4642      	mov	r2, r8
 8008e98:	e7e1      	b.n	8008e5e <_printf_float+0x3ce>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	464a      	mov	r2, r9
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b8      	blx	r7
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	f43f ae3f 	beq.w	8008b28 <_printf_float+0x98>
 8008eaa:	f108 0801 	add.w	r8, r8, #1
 8008eae:	68e3      	ldr	r3, [r4, #12]
 8008eb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eb2:	1a5b      	subs	r3, r3, r1
 8008eb4:	4543      	cmp	r3, r8
 8008eb6:	dcf0      	bgt.n	8008e9a <_printf_float+0x40a>
 8008eb8:	e6f8      	b.n	8008cac <_printf_float+0x21c>
 8008eba:	f04f 0800 	mov.w	r8, #0
 8008ebe:	f104 0919 	add.w	r9, r4, #25
 8008ec2:	e7f4      	b.n	8008eae <_printf_float+0x41e>

08008ec4 <_printf_common>:
 8008ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	4616      	mov	r6, r2
 8008eca:	4698      	mov	r8, r3
 8008ecc:	688a      	ldr	r2, [r1, #8]
 8008ece:	690b      	ldr	r3, [r1, #16]
 8008ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bfb8      	it	lt
 8008ed8:	4613      	movlt	r3, r2
 8008eda:	6033      	str	r3, [r6, #0]
 8008edc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ee0:	4607      	mov	r7, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	b10a      	cbz	r2, 8008eea <_printf_common+0x26>
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	6033      	str	r3, [r6, #0]
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	0699      	lsls	r1, r3, #26
 8008eee:	bf42      	ittt	mi
 8008ef0:	6833      	ldrmi	r3, [r6, #0]
 8008ef2:	3302      	addmi	r3, #2
 8008ef4:	6033      	strmi	r3, [r6, #0]
 8008ef6:	6825      	ldr	r5, [r4, #0]
 8008ef8:	f015 0506 	ands.w	r5, r5, #6
 8008efc:	d106      	bne.n	8008f0c <_printf_common+0x48>
 8008efe:	f104 0a19 	add.w	sl, r4, #25
 8008f02:	68e3      	ldr	r3, [r4, #12]
 8008f04:	6832      	ldr	r2, [r6, #0]
 8008f06:	1a9b      	subs	r3, r3, r2
 8008f08:	42ab      	cmp	r3, r5
 8008f0a:	dc26      	bgt.n	8008f5a <_printf_common+0x96>
 8008f0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f10:	6822      	ldr	r2, [r4, #0]
 8008f12:	3b00      	subs	r3, #0
 8008f14:	bf18      	it	ne
 8008f16:	2301      	movne	r3, #1
 8008f18:	0692      	lsls	r2, r2, #26
 8008f1a:	d42b      	bmi.n	8008f74 <_printf_common+0xb0>
 8008f1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f20:	4641      	mov	r1, r8
 8008f22:	4638      	mov	r0, r7
 8008f24:	47c8      	blx	r9
 8008f26:	3001      	adds	r0, #1
 8008f28:	d01e      	beq.n	8008f68 <_printf_common+0xa4>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	6922      	ldr	r2, [r4, #16]
 8008f2e:	f003 0306 	and.w	r3, r3, #6
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	bf02      	ittt	eq
 8008f36:	68e5      	ldreq	r5, [r4, #12]
 8008f38:	6833      	ldreq	r3, [r6, #0]
 8008f3a:	1aed      	subeq	r5, r5, r3
 8008f3c:	68a3      	ldr	r3, [r4, #8]
 8008f3e:	bf0c      	ite	eq
 8008f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f44:	2500      	movne	r5, #0
 8008f46:	4293      	cmp	r3, r2
 8008f48:	bfc4      	itt	gt
 8008f4a:	1a9b      	subgt	r3, r3, r2
 8008f4c:	18ed      	addgt	r5, r5, r3
 8008f4e:	2600      	movs	r6, #0
 8008f50:	341a      	adds	r4, #26
 8008f52:	42b5      	cmp	r5, r6
 8008f54:	d11a      	bne.n	8008f8c <_printf_common+0xc8>
 8008f56:	2000      	movs	r0, #0
 8008f58:	e008      	b.n	8008f6c <_printf_common+0xa8>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	4641      	mov	r1, r8
 8008f60:	4638      	mov	r0, r7
 8008f62:	47c8      	blx	r9
 8008f64:	3001      	adds	r0, #1
 8008f66:	d103      	bne.n	8008f70 <_printf_common+0xac>
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f70:	3501      	adds	r5, #1
 8008f72:	e7c6      	b.n	8008f02 <_printf_common+0x3e>
 8008f74:	18e1      	adds	r1, r4, r3
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	2030      	movs	r0, #48	@ 0x30
 8008f7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f7e:	4422      	add	r2, r4
 8008f80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f88:	3302      	adds	r3, #2
 8008f8a:	e7c7      	b.n	8008f1c <_printf_common+0x58>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4622      	mov	r2, r4
 8008f90:	4641      	mov	r1, r8
 8008f92:	4638      	mov	r0, r7
 8008f94:	47c8      	blx	r9
 8008f96:	3001      	adds	r0, #1
 8008f98:	d0e6      	beq.n	8008f68 <_printf_common+0xa4>
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	e7d9      	b.n	8008f52 <_printf_common+0x8e>
	...

08008fa0 <_printf_i>:
 8008fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	7e0f      	ldrb	r7, [r1, #24]
 8008fa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fa8:	2f78      	cmp	r7, #120	@ 0x78
 8008faa:	4691      	mov	r9, r2
 8008fac:	4680      	mov	r8, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	469a      	mov	sl, r3
 8008fb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fb6:	d807      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fb8:	2f62      	cmp	r7, #98	@ 0x62
 8008fba:	d80a      	bhi.n	8008fd2 <_printf_i+0x32>
 8008fbc:	2f00      	cmp	r7, #0
 8008fbe:	f000 80d1 	beq.w	8009164 <_printf_i+0x1c4>
 8008fc2:	2f58      	cmp	r7, #88	@ 0x58
 8008fc4:	f000 80b8 	beq.w	8009138 <_printf_i+0x198>
 8008fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fd0:	e03a      	b.n	8009048 <_printf_i+0xa8>
 8008fd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fd6:	2b15      	cmp	r3, #21
 8008fd8:	d8f6      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fda:	a101      	add	r1, pc, #4	@ (adr r1, 8008fe0 <_printf_i+0x40>)
 8008fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fe0:	08009039 	.word	0x08009039
 8008fe4:	0800904d 	.word	0x0800904d
 8008fe8:	08008fc9 	.word	0x08008fc9
 8008fec:	08008fc9 	.word	0x08008fc9
 8008ff0:	08008fc9 	.word	0x08008fc9
 8008ff4:	08008fc9 	.word	0x08008fc9
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	08008fc9 	.word	0x08008fc9
 8009000:	08008fc9 	.word	0x08008fc9
 8009004:	08008fc9 	.word	0x08008fc9
 8009008:	08008fc9 	.word	0x08008fc9
 800900c:	0800914b 	.word	0x0800914b
 8009010:	08009077 	.word	0x08009077
 8009014:	08009105 	.word	0x08009105
 8009018:	08008fc9 	.word	0x08008fc9
 800901c:	08008fc9 	.word	0x08008fc9
 8009020:	0800916d 	.word	0x0800916d
 8009024:	08008fc9 	.word	0x08008fc9
 8009028:	08009077 	.word	0x08009077
 800902c:	08008fc9 	.word	0x08008fc9
 8009030:	08008fc9 	.word	0x08008fc9
 8009034:	0800910d 	.word	0x0800910d
 8009038:	6833      	ldr	r3, [r6, #0]
 800903a:	1d1a      	adds	r2, r3, #4
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6032      	str	r2, [r6, #0]
 8009040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009044:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009048:	2301      	movs	r3, #1
 800904a:	e09c      	b.n	8009186 <_printf_i+0x1e6>
 800904c:	6833      	ldr	r3, [r6, #0]
 800904e:	6820      	ldr	r0, [r4, #0]
 8009050:	1d19      	adds	r1, r3, #4
 8009052:	6031      	str	r1, [r6, #0]
 8009054:	0606      	lsls	r6, r0, #24
 8009056:	d501      	bpl.n	800905c <_printf_i+0xbc>
 8009058:	681d      	ldr	r5, [r3, #0]
 800905a:	e003      	b.n	8009064 <_printf_i+0xc4>
 800905c:	0645      	lsls	r5, r0, #25
 800905e:	d5fb      	bpl.n	8009058 <_printf_i+0xb8>
 8009060:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009064:	2d00      	cmp	r5, #0
 8009066:	da03      	bge.n	8009070 <_printf_i+0xd0>
 8009068:	232d      	movs	r3, #45	@ 0x2d
 800906a:	426d      	negs	r5, r5
 800906c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009070:	4858      	ldr	r0, [pc, #352]	@ (80091d4 <_printf_i+0x234>)
 8009072:	230a      	movs	r3, #10
 8009074:	e011      	b.n	800909a <_printf_i+0xfa>
 8009076:	6821      	ldr	r1, [r4, #0]
 8009078:	6833      	ldr	r3, [r6, #0]
 800907a:	0608      	lsls	r0, r1, #24
 800907c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009080:	d402      	bmi.n	8009088 <_printf_i+0xe8>
 8009082:	0649      	lsls	r1, r1, #25
 8009084:	bf48      	it	mi
 8009086:	b2ad      	uxthmi	r5, r5
 8009088:	2f6f      	cmp	r7, #111	@ 0x6f
 800908a:	4852      	ldr	r0, [pc, #328]	@ (80091d4 <_printf_i+0x234>)
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	bf14      	ite	ne
 8009090:	230a      	movne	r3, #10
 8009092:	2308      	moveq	r3, #8
 8009094:	2100      	movs	r1, #0
 8009096:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800909a:	6866      	ldr	r6, [r4, #4]
 800909c:	60a6      	str	r6, [r4, #8]
 800909e:	2e00      	cmp	r6, #0
 80090a0:	db05      	blt.n	80090ae <_printf_i+0x10e>
 80090a2:	6821      	ldr	r1, [r4, #0]
 80090a4:	432e      	orrs	r6, r5
 80090a6:	f021 0104 	bic.w	r1, r1, #4
 80090aa:	6021      	str	r1, [r4, #0]
 80090ac:	d04b      	beq.n	8009146 <_printf_i+0x1a6>
 80090ae:	4616      	mov	r6, r2
 80090b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80090b4:	fb03 5711 	mls	r7, r3, r1, r5
 80090b8:	5dc7      	ldrb	r7, [r0, r7]
 80090ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090be:	462f      	mov	r7, r5
 80090c0:	42bb      	cmp	r3, r7
 80090c2:	460d      	mov	r5, r1
 80090c4:	d9f4      	bls.n	80090b0 <_printf_i+0x110>
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d10b      	bne.n	80090e2 <_printf_i+0x142>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	07df      	lsls	r7, r3, #31
 80090ce:	d508      	bpl.n	80090e2 <_printf_i+0x142>
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	6861      	ldr	r1, [r4, #4]
 80090d4:	4299      	cmp	r1, r3
 80090d6:	bfde      	ittt	le
 80090d8:	2330      	movle	r3, #48	@ 0x30
 80090da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090e2:	1b92      	subs	r2, r2, r6
 80090e4:	6122      	str	r2, [r4, #16]
 80090e6:	f8cd a000 	str.w	sl, [sp]
 80090ea:	464b      	mov	r3, r9
 80090ec:	aa03      	add	r2, sp, #12
 80090ee:	4621      	mov	r1, r4
 80090f0:	4640      	mov	r0, r8
 80090f2:	f7ff fee7 	bl	8008ec4 <_printf_common>
 80090f6:	3001      	adds	r0, #1
 80090f8:	d14a      	bne.n	8009190 <_printf_i+0x1f0>
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	b004      	add	sp, #16
 8009100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	f043 0320 	orr.w	r3, r3, #32
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	4832      	ldr	r0, [pc, #200]	@ (80091d8 <_printf_i+0x238>)
 800910e:	2778      	movs	r7, #120	@ 0x78
 8009110:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	6831      	ldr	r1, [r6, #0]
 8009118:	061f      	lsls	r7, r3, #24
 800911a:	f851 5b04 	ldr.w	r5, [r1], #4
 800911e:	d402      	bmi.n	8009126 <_printf_i+0x186>
 8009120:	065f      	lsls	r7, r3, #25
 8009122:	bf48      	it	mi
 8009124:	b2ad      	uxthmi	r5, r5
 8009126:	6031      	str	r1, [r6, #0]
 8009128:	07d9      	lsls	r1, r3, #31
 800912a:	bf44      	itt	mi
 800912c:	f043 0320 	orrmi.w	r3, r3, #32
 8009130:	6023      	strmi	r3, [r4, #0]
 8009132:	b11d      	cbz	r5, 800913c <_printf_i+0x19c>
 8009134:	2310      	movs	r3, #16
 8009136:	e7ad      	b.n	8009094 <_printf_i+0xf4>
 8009138:	4826      	ldr	r0, [pc, #152]	@ (80091d4 <_printf_i+0x234>)
 800913a:	e7e9      	b.n	8009110 <_printf_i+0x170>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	f023 0320 	bic.w	r3, r3, #32
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	e7f6      	b.n	8009134 <_printf_i+0x194>
 8009146:	4616      	mov	r6, r2
 8009148:	e7bd      	b.n	80090c6 <_printf_i+0x126>
 800914a:	6833      	ldr	r3, [r6, #0]
 800914c:	6825      	ldr	r5, [r4, #0]
 800914e:	6961      	ldr	r1, [r4, #20]
 8009150:	1d18      	adds	r0, r3, #4
 8009152:	6030      	str	r0, [r6, #0]
 8009154:	062e      	lsls	r6, r5, #24
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	d501      	bpl.n	800915e <_printf_i+0x1be>
 800915a:	6019      	str	r1, [r3, #0]
 800915c:	e002      	b.n	8009164 <_printf_i+0x1c4>
 800915e:	0668      	lsls	r0, r5, #25
 8009160:	d5fb      	bpl.n	800915a <_printf_i+0x1ba>
 8009162:	8019      	strh	r1, [r3, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	6123      	str	r3, [r4, #16]
 8009168:	4616      	mov	r6, r2
 800916a:	e7bc      	b.n	80090e6 <_printf_i+0x146>
 800916c:	6833      	ldr	r3, [r6, #0]
 800916e:	1d1a      	adds	r2, r3, #4
 8009170:	6032      	str	r2, [r6, #0]
 8009172:	681e      	ldr	r6, [r3, #0]
 8009174:	6862      	ldr	r2, [r4, #4]
 8009176:	2100      	movs	r1, #0
 8009178:	4630      	mov	r0, r6
 800917a:	f7f7 f8c9 	bl	8000310 <memchr>
 800917e:	b108      	cbz	r0, 8009184 <_printf_i+0x1e4>
 8009180:	1b80      	subs	r0, r0, r6
 8009182:	6060      	str	r0, [r4, #4]
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	2300      	movs	r3, #0
 800918a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800918e:	e7aa      	b.n	80090e6 <_printf_i+0x146>
 8009190:	6923      	ldr	r3, [r4, #16]
 8009192:	4632      	mov	r2, r6
 8009194:	4649      	mov	r1, r9
 8009196:	4640      	mov	r0, r8
 8009198:	47d0      	blx	sl
 800919a:	3001      	adds	r0, #1
 800919c:	d0ad      	beq.n	80090fa <_printf_i+0x15a>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	079b      	lsls	r3, r3, #30
 80091a2:	d413      	bmi.n	80091cc <_printf_i+0x22c>
 80091a4:	68e0      	ldr	r0, [r4, #12]
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	4298      	cmp	r0, r3
 80091aa:	bfb8      	it	lt
 80091ac:	4618      	movlt	r0, r3
 80091ae:	e7a6      	b.n	80090fe <_printf_i+0x15e>
 80091b0:	2301      	movs	r3, #1
 80091b2:	4632      	mov	r2, r6
 80091b4:	4649      	mov	r1, r9
 80091b6:	4640      	mov	r0, r8
 80091b8:	47d0      	blx	sl
 80091ba:	3001      	adds	r0, #1
 80091bc:	d09d      	beq.n	80090fa <_printf_i+0x15a>
 80091be:	3501      	adds	r5, #1
 80091c0:	68e3      	ldr	r3, [r4, #12]
 80091c2:	9903      	ldr	r1, [sp, #12]
 80091c4:	1a5b      	subs	r3, r3, r1
 80091c6:	42ab      	cmp	r3, r5
 80091c8:	dcf2      	bgt.n	80091b0 <_printf_i+0x210>
 80091ca:	e7eb      	b.n	80091a4 <_printf_i+0x204>
 80091cc:	2500      	movs	r5, #0
 80091ce:	f104 0619 	add.w	r6, r4, #25
 80091d2:	e7f5      	b.n	80091c0 <_printf_i+0x220>
 80091d4:	0800b58e 	.word	0x0800b58e
 80091d8:	0800b59f 	.word	0x0800b59f

080091dc <std>:
 80091dc:	2300      	movs	r3, #0
 80091de:	b510      	push	{r4, lr}
 80091e0:	4604      	mov	r4, r0
 80091e2:	e9c0 3300 	strd	r3, r3, [r0]
 80091e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ea:	6083      	str	r3, [r0, #8]
 80091ec:	8181      	strh	r1, [r0, #12]
 80091ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80091f0:	81c2      	strh	r2, [r0, #14]
 80091f2:	6183      	str	r3, [r0, #24]
 80091f4:	4619      	mov	r1, r3
 80091f6:	2208      	movs	r2, #8
 80091f8:	305c      	adds	r0, #92	@ 0x5c
 80091fa:	f000 f9f9 	bl	80095f0 <memset>
 80091fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009234 <std+0x58>)
 8009200:	6263      	str	r3, [r4, #36]	@ 0x24
 8009202:	4b0d      	ldr	r3, [pc, #52]	@ (8009238 <std+0x5c>)
 8009204:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009206:	4b0d      	ldr	r3, [pc, #52]	@ (800923c <std+0x60>)
 8009208:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800920a:	4b0d      	ldr	r3, [pc, #52]	@ (8009240 <std+0x64>)
 800920c:	6323      	str	r3, [r4, #48]	@ 0x30
 800920e:	4b0d      	ldr	r3, [pc, #52]	@ (8009244 <std+0x68>)
 8009210:	6224      	str	r4, [r4, #32]
 8009212:	429c      	cmp	r4, r3
 8009214:	d006      	beq.n	8009224 <std+0x48>
 8009216:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800921a:	4294      	cmp	r4, r2
 800921c:	d002      	beq.n	8009224 <std+0x48>
 800921e:	33d0      	adds	r3, #208	@ 0xd0
 8009220:	429c      	cmp	r4, r3
 8009222:	d105      	bne.n	8009230 <std+0x54>
 8009224:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800922c:	f000 ba5c 	b.w	80096e8 <__retarget_lock_init_recursive>
 8009230:	bd10      	pop	{r4, pc}
 8009232:	bf00      	nop
 8009234:	08009441 	.word	0x08009441
 8009238:	08009463 	.word	0x08009463
 800923c:	0800949b 	.word	0x0800949b
 8009240:	080094bf 	.word	0x080094bf
 8009244:	240003c4 	.word	0x240003c4

08009248 <stdio_exit_handler>:
 8009248:	4a02      	ldr	r2, [pc, #8]	@ (8009254 <stdio_exit_handler+0xc>)
 800924a:	4903      	ldr	r1, [pc, #12]	@ (8009258 <stdio_exit_handler+0x10>)
 800924c:	4803      	ldr	r0, [pc, #12]	@ (800925c <stdio_exit_handler+0x14>)
 800924e:	f000 b869 	b.w	8009324 <_fwalk_sglue>
 8009252:	bf00      	nop
 8009254:	24000010 	.word	0x24000010
 8009258:	0800af5d 	.word	0x0800af5d
 800925c:	24000020 	.word	0x24000020

08009260 <cleanup_stdio>:
 8009260:	6841      	ldr	r1, [r0, #4]
 8009262:	4b0c      	ldr	r3, [pc, #48]	@ (8009294 <cleanup_stdio+0x34>)
 8009264:	4299      	cmp	r1, r3
 8009266:	b510      	push	{r4, lr}
 8009268:	4604      	mov	r4, r0
 800926a:	d001      	beq.n	8009270 <cleanup_stdio+0x10>
 800926c:	f001 fe76 	bl	800af5c <_fflush_r>
 8009270:	68a1      	ldr	r1, [r4, #8]
 8009272:	4b09      	ldr	r3, [pc, #36]	@ (8009298 <cleanup_stdio+0x38>)
 8009274:	4299      	cmp	r1, r3
 8009276:	d002      	beq.n	800927e <cleanup_stdio+0x1e>
 8009278:	4620      	mov	r0, r4
 800927a:	f001 fe6f 	bl	800af5c <_fflush_r>
 800927e:	68e1      	ldr	r1, [r4, #12]
 8009280:	4b06      	ldr	r3, [pc, #24]	@ (800929c <cleanup_stdio+0x3c>)
 8009282:	4299      	cmp	r1, r3
 8009284:	d004      	beq.n	8009290 <cleanup_stdio+0x30>
 8009286:	4620      	mov	r0, r4
 8009288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800928c:	f001 be66 	b.w	800af5c <_fflush_r>
 8009290:	bd10      	pop	{r4, pc}
 8009292:	bf00      	nop
 8009294:	240003c4 	.word	0x240003c4
 8009298:	2400042c 	.word	0x2400042c
 800929c:	24000494 	.word	0x24000494

080092a0 <global_stdio_init.part.0>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	4b0b      	ldr	r3, [pc, #44]	@ (80092d0 <global_stdio_init.part.0+0x30>)
 80092a4:	4c0b      	ldr	r4, [pc, #44]	@ (80092d4 <global_stdio_init.part.0+0x34>)
 80092a6:	4a0c      	ldr	r2, [pc, #48]	@ (80092d8 <global_stdio_init.part.0+0x38>)
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	4620      	mov	r0, r4
 80092ac:	2200      	movs	r2, #0
 80092ae:	2104      	movs	r1, #4
 80092b0:	f7ff ff94 	bl	80091dc <std>
 80092b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092b8:	2201      	movs	r2, #1
 80092ba:	2109      	movs	r1, #9
 80092bc:	f7ff ff8e 	bl	80091dc <std>
 80092c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092c4:	2202      	movs	r2, #2
 80092c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ca:	2112      	movs	r1, #18
 80092cc:	f7ff bf86 	b.w	80091dc <std>
 80092d0:	240004fc 	.word	0x240004fc
 80092d4:	240003c4 	.word	0x240003c4
 80092d8:	08009249 	.word	0x08009249

080092dc <__sfp_lock_acquire>:
 80092dc:	4801      	ldr	r0, [pc, #4]	@ (80092e4 <__sfp_lock_acquire+0x8>)
 80092de:	f000 ba04 	b.w	80096ea <__retarget_lock_acquire_recursive>
 80092e2:	bf00      	nop
 80092e4:	24000505 	.word	0x24000505

080092e8 <__sfp_lock_release>:
 80092e8:	4801      	ldr	r0, [pc, #4]	@ (80092f0 <__sfp_lock_release+0x8>)
 80092ea:	f000 b9ff 	b.w	80096ec <__retarget_lock_release_recursive>
 80092ee:	bf00      	nop
 80092f0:	24000505 	.word	0x24000505

080092f4 <__sinit>:
 80092f4:	b510      	push	{r4, lr}
 80092f6:	4604      	mov	r4, r0
 80092f8:	f7ff fff0 	bl	80092dc <__sfp_lock_acquire>
 80092fc:	6a23      	ldr	r3, [r4, #32]
 80092fe:	b11b      	cbz	r3, 8009308 <__sinit+0x14>
 8009300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009304:	f7ff bff0 	b.w	80092e8 <__sfp_lock_release>
 8009308:	4b04      	ldr	r3, [pc, #16]	@ (800931c <__sinit+0x28>)
 800930a:	6223      	str	r3, [r4, #32]
 800930c:	4b04      	ldr	r3, [pc, #16]	@ (8009320 <__sinit+0x2c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1f5      	bne.n	8009300 <__sinit+0xc>
 8009314:	f7ff ffc4 	bl	80092a0 <global_stdio_init.part.0>
 8009318:	e7f2      	b.n	8009300 <__sinit+0xc>
 800931a:	bf00      	nop
 800931c:	08009261 	.word	0x08009261
 8009320:	240004fc 	.word	0x240004fc

08009324 <_fwalk_sglue>:
 8009324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009328:	4607      	mov	r7, r0
 800932a:	4688      	mov	r8, r1
 800932c:	4614      	mov	r4, r2
 800932e:	2600      	movs	r6, #0
 8009330:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009334:	f1b9 0901 	subs.w	r9, r9, #1
 8009338:	d505      	bpl.n	8009346 <_fwalk_sglue+0x22>
 800933a:	6824      	ldr	r4, [r4, #0]
 800933c:	2c00      	cmp	r4, #0
 800933e:	d1f7      	bne.n	8009330 <_fwalk_sglue+0xc>
 8009340:	4630      	mov	r0, r6
 8009342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d907      	bls.n	800935c <_fwalk_sglue+0x38>
 800934c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009350:	3301      	adds	r3, #1
 8009352:	d003      	beq.n	800935c <_fwalk_sglue+0x38>
 8009354:	4629      	mov	r1, r5
 8009356:	4638      	mov	r0, r7
 8009358:	47c0      	blx	r8
 800935a:	4306      	orrs	r6, r0
 800935c:	3568      	adds	r5, #104	@ 0x68
 800935e:	e7e9      	b.n	8009334 <_fwalk_sglue+0x10>

08009360 <iprintf>:
 8009360:	b40f      	push	{r0, r1, r2, r3}
 8009362:	b507      	push	{r0, r1, r2, lr}
 8009364:	4906      	ldr	r1, [pc, #24]	@ (8009380 <iprintf+0x20>)
 8009366:	ab04      	add	r3, sp, #16
 8009368:	6808      	ldr	r0, [r1, #0]
 800936a:	f853 2b04 	ldr.w	r2, [r3], #4
 800936e:	6881      	ldr	r1, [r0, #8]
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	f001 fc57 	bl	800ac24 <_vfiprintf_r>
 8009376:	b003      	add	sp, #12
 8009378:	f85d eb04 	ldr.w	lr, [sp], #4
 800937c:	b004      	add	sp, #16
 800937e:	4770      	bx	lr
 8009380:	2400001c 	.word	0x2400001c

08009384 <_puts_r>:
 8009384:	6a03      	ldr	r3, [r0, #32]
 8009386:	b570      	push	{r4, r5, r6, lr}
 8009388:	6884      	ldr	r4, [r0, #8]
 800938a:	4605      	mov	r5, r0
 800938c:	460e      	mov	r6, r1
 800938e:	b90b      	cbnz	r3, 8009394 <_puts_r+0x10>
 8009390:	f7ff ffb0 	bl	80092f4 <__sinit>
 8009394:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009396:	07db      	lsls	r3, r3, #31
 8009398:	d405      	bmi.n	80093a6 <_puts_r+0x22>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	0598      	lsls	r0, r3, #22
 800939e:	d402      	bmi.n	80093a6 <_puts_r+0x22>
 80093a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093a2:	f000 f9a2 	bl	80096ea <__retarget_lock_acquire_recursive>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	0719      	lsls	r1, r3, #28
 80093aa:	d502      	bpl.n	80093b2 <_puts_r+0x2e>
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d135      	bne.n	800941e <_puts_r+0x9a>
 80093b2:	4621      	mov	r1, r4
 80093b4:	4628      	mov	r0, r5
 80093b6:	f000 f8c5 	bl	8009544 <__swsetup_r>
 80093ba:	b380      	cbz	r0, 800941e <_puts_r+0x9a>
 80093bc:	f04f 35ff 	mov.w	r5, #4294967295
 80093c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093c2:	07da      	lsls	r2, r3, #31
 80093c4:	d405      	bmi.n	80093d2 <_puts_r+0x4e>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	059b      	lsls	r3, r3, #22
 80093ca:	d402      	bmi.n	80093d2 <_puts_r+0x4e>
 80093cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ce:	f000 f98d 	bl	80096ec <__retarget_lock_release_recursive>
 80093d2:	4628      	mov	r0, r5
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	da04      	bge.n	80093e4 <_puts_r+0x60>
 80093da:	69a2      	ldr	r2, [r4, #24]
 80093dc:	429a      	cmp	r2, r3
 80093de:	dc17      	bgt.n	8009410 <_puts_r+0x8c>
 80093e0:	290a      	cmp	r1, #10
 80093e2:	d015      	beq.n	8009410 <_puts_r+0x8c>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	6022      	str	r2, [r4, #0]
 80093ea:	7019      	strb	r1, [r3, #0]
 80093ec:	68a3      	ldr	r3, [r4, #8]
 80093ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093f2:	3b01      	subs	r3, #1
 80093f4:	60a3      	str	r3, [r4, #8]
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d1ed      	bne.n	80093d6 <_puts_r+0x52>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	da11      	bge.n	8009422 <_puts_r+0x9e>
 80093fe:	4622      	mov	r2, r4
 8009400:	210a      	movs	r1, #10
 8009402:	4628      	mov	r0, r5
 8009404:	f000 f85f 	bl	80094c6 <__swbuf_r>
 8009408:	3001      	adds	r0, #1
 800940a:	d0d7      	beq.n	80093bc <_puts_r+0x38>
 800940c:	250a      	movs	r5, #10
 800940e:	e7d7      	b.n	80093c0 <_puts_r+0x3c>
 8009410:	4622      	mov	r2, r4
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f857 	bl	80094c6 <__swbuf_r>
 8009418:	3001      	adds	r0, #1
 800941a:	d1e7      	bne.n	80093ec <_puts_r+0x68>
 800941c:	e7ce      	b.n	80093bc <_puts_r+0x38>
 800941e:	3e01      	subs	r6, #1
 8009420:	e7e4      	b.n	80093ec <_puts_r+0x68>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	6022      	str	r2, [r4, #0]
 8009428:	220a      	movs	r2, #10
 800942a:	701a      	strb	r2, [r3, #0]
 800942c:	e7ee      	b.n	800940c <_puts_r+0x88>
	...

08009430 <puts>:
 8009430:	4b02      	ldr	r3, [pc, #8]	@ (800943c <puts+0xc>)
 8009432:	4601      	mov	r1, r0
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	f7ff bfa5 	b.w	8009384 <_puts_r>
 800943a:	bf00      	nop
 800943c:	2400001c 	.word	0x2400001c

08009440 <__sread>:
 8009440:	b510      	push	{r4, lr}
 8009442:	460c      	mov	r4, r1
 8009444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009448:	f000 f900 	bl	800964c <_read_r>
 800944c:	2800      	cmp	r0, #0
 800944e:	bfab      	itete	ge
 8009450:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009452:	89a3      	ldrhlt	r3, [r4, #12]
 8009454:	181b      	addge	r3, r3, r0
 8009456:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800945a:	bfac      	ite	ge
 800945c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800945e:	81a3      	strhlt	r3, [r4, #12]
 8009460:	bd10      	pop	{r4, pc}

08009462 <__swrite>:
 8009462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	461f      	mov	r7, r3
 8009468:	898b      	ldrh	r3, [r1, #12]
 800946a:	05db      	lsls	r3, r3, #23
 800946c:	4605      	mov	r5, r0
 800946e:	460c      	mov	r4, r1
 8009470:	4616      	mov	r6, r2
 8009472:	d505      	bpl.n	8009480 <__swrite+0x1e>
 8009474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009478:	2302      	movs	r3, #2
 800947a:	2200      	movs	r2, #0
 800947c:	f000 f8d4 	bl	8009628 <_lseek_r>
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	4632      	mov	r2, r6
 800948e:	463b      	mov	r3, r7
 8009490:	4628      	mov	r0, r5
 8009492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009496:	f000 b8eb 	b.w	8009670 <_write_r>

0800949a <__sseek>:
 800949a:	b510      	push	{r4, lr}
 800949c:	460c      	mov	r4, r1
 800949e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a2:	f000 f8c1 	bl	8009628 <_lseek_r>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	bf15      	itete	ne
 80094ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094b6:	81a3      	strheq	r3, [r4, #12]
 80094b8:	bf18      	it	ne
 80094ba:	81a3      	strhne	r3, [r4, #12]
 80094bc:	bd10      	pop	{r4, pc}

080094be <__sclose>:
 80094be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c2:	f000 b8a1 	b.w	8009608 <_close_r>

080094c6 <__swbuf_r>:
 80094c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c8:	460e      	mov	r6, r1
 80094ca:	4614      	mov	r4, r2
 80094cc:	4605      	mov	r5, r0
 80094ce:	b118      	cbz	r0, 80094d8 <__swbuf_r+0x12>
 80094d0:	6a03      	ldr	r3, [r0, #32]
 80094d2:	b90b      	cbnz	r3, 80094d8 <__swbuf_r+0x12>
 80094d4:	f7ff ff0e 	bl	80092f4 <__sinit>
 80094d8:	69a3      	ldr	r3, [r4, #24]
 80094da:	60a3      	str	r3, [r4, #8]
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	071a      	lsls	r2, r3, #28
 80094e0:	d501      	bpl.n	80094e6 <__swbuf_r+0x20>
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	b943      	cbnz	r3, 80094f8 <__swbuf_r+0x32>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4628      	mov	r0, r5
 80094ea:	f000 f82b 	bl	8009544 <__swsetup_r>
 80094ee:	b118      	cbz	r0, 80094f8 <__swbuf_r+0x32>
 80094f0:	f04f 37ff 	mov.w	r7, #4294967295
 80094f4:	4638      	mov	r0, r7
 80094f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	6922      	ldr	r2, [r4, #16]
 80094fc:	1a98      	subs	r0, r3, r2
 80094fe:	6963      	ldr	r3, [r4, #20]
 8009500:	b2f6      	uxtb	r6, r6
 8009502:	4283      	cmp	r3, r0
 8009504:	4637      	mov	r7, r6
 8009506:	dc05      	bgt.n	8009514 <__swbuf_r+0x4e>
 8009508:	4621      	mov	r1, r4
 800950a:	4628      	mov	r0, r5
 800950c:	f001 fd26 	bl	800af5c <_fflush_r>
 8009510:	2800      	cmp	r0, #0
 8009512:	d1ed      	bne.n	80094f0 <__swbuf_r+0x2a>
 8009514:	68a3      	ldr	r3, [r4, #8]
 8009516:	3b01      	subs	r3, #1
 8009518:	60a3      	str	r3, [r4, #8]
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	6022      	str	r2, [r4, #0]
 8009520:	701e      	strb	r6, [r3, #0]
 8009522:	6962      	ldr	r2, [r4, #20]
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	429a      	cmp	r2, r3
 8009528:	d004      	beq.n	8009534 <__swbuf_r+0x6e>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	07db      	lsls	r3, r3, #31
 800952e:	d5e1      	bpl.n	80094f4 <__swbuf_r+0x2e>
 8009530:	2e0a      	cmp	r6, #10
 8009532:	d1df      	bne.n	80094f4 <__swbuf_r+0x2e>
 8009534:	4621      	mov	r1, r4
 8009536:	4628      	mov	r0, r5
 8009538:	f001 fd10 	bl	800af5c <_fflush_r>
 800953c:	2800      	cmp	r0, #0
 800953e:	d0d9      	beq.n	80094f4 <__swbuf_r+0x2e>
 8009540:	e7d6      	b.n	80094f0 <__swbuf_r+0x2a>
	...

08009544 <__swsetup_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4b29      	ldr	r3, [pc, #164]	@ (80095ec <__swsetup_r+0xa8>)
 8009548:	4605      	mov	r5, r0
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	460c      	mov	r4, r1
 800954e:	b118      	cbz	r0, 8009558 <__swsetup_r+0x14>
 8009550:	6a03      	ldr	r3, [r0, #32]
 8009552:	b90b      	cbnz	r3, 8009558 <__swsetup_r+0x14>
 8009554:	f7ff fece 	bl	80092f4 <__sinit>
 8009558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955c:	0719      	lsls	r1, r3, #28
 800955e:	d422      	bmi.n	80095a6 <__swsetup_r+0x62>
 8009560:	06da      	lsls	r2, r3, #27
 8009562:	d407      	bmi.n	8009574 <__swsetup_r+0x30>
 8009564:	2209      	movs	r2, #9
 8009566:	602a      	str	r2, [r5, #0]
 8009568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	f04f 30ff 	mov.w	r0, #4294967295
 8009572:	e033      	b.n	80095dc <__swsetup_r+0x98>
 8009574:	0758      	lsls	r0, r3, #29
 8009576:	d512      	bpl.n	800959e <__swsetup_r+0x5a>
 8009578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800957a:	b141      	cbz	r1, 800958e <__swsetup_r+0x4a>
 800957c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009580:	4299      	cmp	r1, r3
 8009582:	d002      	beq.n	800958a <__swsetup_r+0x46>
 8009584:	4628      	mov	r0, r5
 8009586:	f000 fea9 	bl	800a2dc <_free_r>
 800958a:	2300      	movs	r3, #0
 800958c:	6363      	str	r3, [r4, #52]	@ 0x34
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	2300      	movs	r3, #0
 8009598:	6063      	str	r3, [r4, #4]
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f043 0308 	orr.w	r3, r3, #8
 80095a4:	81a3      	strh	r3, [r4, #12]
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	b94b      	cbnz	r3, 80095be <__swsetup_r+0x7a>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095b4:	d003      	beq.n	80095be <__swsetup_r+0x7a>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f001 fd1d 	bl	800aff8 <__smakebuf_r>
 80095be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095c2:	f013 0201 	ands.w	r2, r3, #1
 80095c6:	d00a      	beq.n	80095de <__swsetup_r+0x9a>
 80095c8:	2200      	movs	r2, #0
 80095ca:	60a2      	str	r2, [r4, #8]
 80095cc:	6962      	ldr	r2, [r4, #20]
 80095ce:	4252      	negs	r2, r2
 80095d0:	61a2      	str	r2, [r4, #24]
 80095d2:	6922      	ldr	r2, [r4, #16]
 80095d4:	b942      	cbnz	r2, 80095e8 <__swsetup_r+0xa4>
 80095d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095da:	d1c5      	bne.n	8009568 <__swsetup_r+0x24>
 80095dc:	bd38      	pop	{r3, r4, r5, pc}
 80095de:	0799      	lsls	r1, r3, #30
 80095e0:	bf58      	it	pl
 80095e2:	6962      	ldrpl	r2, [r4, #20]
 80095e4:	60a2      	str	r2, [r4, #8]
 80095e6:	e7f4      	b.n	80095d2 <__swsetup_r+0x8e>
 80095e8:	2000      	movs	r0, #0
 80095ea:	e7f7      	b.n	80095dc <__swsetup_r+0x98>
 80095ec:	2400001c 	.word	0x2400001c

080095f0 <memset>:
 80095f0:	4402      	add	r2, r0
 80095f2:	4603      	mov	r3, r0
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d100      	bne.n	80095fa <memset+0xa>
 80095f8:	4770      	bx	lr
 80095fa:	f803 1b01 	strb.w	r1, [r3], #1
 80095fe:	e7f9      	b.n	80095f4 <memset+0x4>

08009600 <_localeconv_r>:
 8009600:	4800      	ldr	r0, [pc, #0]	@ (8009604 <_localeconv_r+0x4>)
 8009602:	4770      	bx	lr
 8009604:	2400015c 	.word	0x2400015c

08009608 <_close_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d06      	ldr	r5, [pc, #24]	@ (8009624 <_close_r+0x1c>)
 800960c:	2300      	movs	r3, #0
 800960e:	4604      	mov	r4, r0
 8009610:	4608      	mov	r0, r1
 8009612:	602b      	str	r3, [r5, #0]
 8009614:	f7f7 fed6 	bl	80013c4 <_close>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_close_r+0x1a>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_close_r+0x1a>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	24000500 	.word	0x24000500

08009628 <_lseek_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	@ (8009648 <_lseek_r+0x20>)
 800962c:	4604      	mov	r4, r0
 800962e:	4608      	mov	r0, r1
 8009630:	4611      	mov	r1, r2
 8009632:	2200      	movs	r2, #0
 8009634:	602a      	str	r2, [r5, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f7f7 feeb 	bl	8001412 <_lseek>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_lseek_r+0x1e>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_lseek_r+0x1e>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	24000500 	.word	0x24000500

0800964c <_read_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	@ (800966c <_read_r+0x20>)
 8009650:	4604      	mov	r4, r0
 8009652:	4608      	mov	r0, r1
 8009654:	4611      	mov	r1, r2
 8009656:	2200      	movs	r2, #0
 8009658:	602a      	str	r2, [r5, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f7f7 fe79 	bl	8001352 <_read>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_read_r+0x1e>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_read_r+0x1e>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	24000500 	.word	0x24000500

08009670 <_write_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d07      	ldr	r5, [pc, #28]	@ (8009690 <_write_r+0x20>)
 8009674:	4604      	mov	r4, r0
 8009676:	4608      	mov	r0, r1
 8009678:	4611      	mov	r1, r2
 800967a:	2200      	movs	r2, #0
 800967c:	602a      	str	r2, [r5, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	f7f7 fe84 	bl	800138c <_write>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_write_r+0x1e>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_write_r+0x1e>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	24000500 	.word	0x24000500

08009694 <__errno>:
 8009694:	4b01      	ldr	r3, [pc, #4]	@ (800969c <__errno+0x8>)
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	2400001c 	.word	0x2400001c

080096a0 <__libc_init_array>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	4d0d      	ldr	r5, [pc, #52]	@ (80096d8 <__libc_init_array+0x38>)
 80096a4:	4c0d      	ldr	r4, [pc, #52]	@ (80096dc <__libc_init_array+0x3c>)
 80096a6:	1b64      	subs	r4, r4, r5
 80096a8:	10a4      	asrs	r4, r4, #2
 80096aa:	2600      	movs	r6, #0
 80096ac:	42a6      	cmp	r6, r4
 80096ae:	d109      	bne.n	80096c4 <__libc_init_array+0x24>
 80096b0:	4d0b      	ldr	r5, [pc, #44]	@ (80096e0 <__libc_init_array+0x40>)
 80096b2:	4c0c      	ldr	r4, [pc, #48]	@ (80096e4 <__libc_init_array+0x44>)
 80096b4:	f001 feee 	bl	800b494 <_init>
 80096b8:	1b64      	subs	r4, r4, r5
 80096ba:	10a4      	asrs	r4, r4, #2
 80096bc:	2600      	movs	r6, #0
 80096be:	42a6      	cmp	r6, r4
 80096c0:	d105      	bne.n	80096ce <__libc_init_array+0x2e>
 80096c2:	bd70      	pop	{r4, r5, r6, pc}
 80096c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c8:	4798      	blx	r3
 80096ca:	3601      	adds	r6, #1
 80096cc:	e7ee      	b.n	80096ac <__libc_init_array+0xc>
 80096ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d2:	4798      	blx	r3
 80096d4:	3601      	adds	r6, #1
 80096d6:	e7f2      	b.n	80096be <__libc_init_array+0x1e>
 80096d8:	0800b910 	.word	0x0800b910
 80096dc:	0800b910 	.word	0x0800b910
 80096e0:	0800b910 	.word	0x0800b910
 80096e4:	0800b914 	.word	0x0800b914

080096e8 <__retarget_lock_init_recursive>:
 80096e8:	4770      	bx	lr

080096ea <__retarget_lock_acquire_recursive>:
 80096ea:	4770      	bx	lr

080096ec <__retarget_lock_release_recursive>:
 80096ec:	4770      	bx	lr

080096ee <memcpy>:
 80096ee:	440a      	add	r2, r1
 80096f0:	4291      	cmp	r1, r2
 80096f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80096f6:	d100      	bne.n	80096fa <memcpy+0xc>
 80096f8:	4770      	bx	lr
 80096fa:	b510      	push	{r4, lr}
 80096fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009704:	4291      	cmp	r1, r2
 8009706:	d1f9      	bne.n	80096fc <memcpy+0xe>
 8009708:	bd10      	pop	{r4, pc}

0800970a <quorem>:
 800970a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970e:	6903      	ldr	r3, [r0, #16]
 8009710:	690c      	ldr	r4, [r1, #16]
 8009712:	42a3      	cmp	r3, r4
 8009714:	4607      	mov	r7, r0
 8009716:	db7e      	blt.n	8009816 <quorem+0x10c>
 8009718:	3c01      	subs	r4, #1
 800971a:	f101 0814 	add.w	r8, r1, #20
 800971e:	00a3      	lsls	r3, r4, #2
 8009720:	f100 0514 	add.w	r5, r0, #20
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800972a:	9301      	str	r3, [sp, #4]
 800972c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009734:	3301      	adds	r3, #1
 8009736:	429a      	cmp	r2, r3
 8009738:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800973c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009740:	d32e      	bcc.n	80097a0 <quorem+0x96>
 8009742:	f04f 0a00 	mov.w	sl, #0
 8009746:	46c4      	mov	ip, r8
 8009748:	46ae      	mov	lr, r5
 800974a:	46d3      	mov	fp, sl
 800974c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009750:	b298      	uxth	r0, r3
 8009752:	fb06 a000 	mla	r0, r6, r0, sl
 8009756:	0c02      	lsrs	r2, r0, #16
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	fb06 2303 	mla	r3, r6, r3, r2
 800975e:	f8de 2000 	ldr.w	r2, [lr]
 8009762:	b280      	uxth	r0, r0
 8009764:	b292      	uxth	r2, r2
 8009766:	1a12      	subs	r2, r2, r0
 8009768:	445a      	add	r2, fp
 800976a:	f8de 0000 	ldr.w	r0, [lr]
 800976e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009772:	b29b      	uxth	r3, r3
 8009774:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009778:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800977c:	b292      	uxth	r2, r2
 800977e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009782:	45e1      	cmp	r9, ip
 8009784:	f84e 2b04 	str.w	r2, [lr], #4
 8009788:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800978c:	d2de      	bcs.n	800974c <quorem+0x42>
 800978e:	9b00      	ldr	r3, [sp, #0]
 8009790:	58eb      	ldr	r3, [r5, r3]
 8009792:	b92b      	cbnz	r3, 80097a0 <quorem+0x96>
 8009794:	9b01      	ldr	r3, [sp, #4]
 8009796:	3b04      	subs	r3, #4
 8009798:	429d      	cmp	r5, r3
 800979a:	461a      	mov	r2, r3
 800979c:	d32f      	bcc.n	80097fe <quorem+0xf4>
 800979e:	613c      	str	r4, [r7, #16]
 80097a0:	4638      	mov	r0, r7
 80097a2:	f001 f90d 	bl	800a9c0 <__mcmp>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	db25      	blt.n	80097f6 <quorem+0xec>
 80097aa:	4629      	mov	r1, r5
 80097ac:	2000      	movs	r0, #0
 80097ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80097b2:	f8d1 c000 	ldr.w	ip, [r1]
 80097b6:	fa1f fe82 	uxth.w	lr, r2
 80097ba:	fa1f f38c 	uxth.w	r3, ip
 80097be:	eba3 030e 	sub.w	r3, r3, lr
 80097c2:	4403      	add	r3, r0
 80097c4:	0c12      	lsrs	r2, r2, #16
 80097c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80097ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d4:	45c1      	cmp	r9, r8
 80097d6:	f841 3b04 	str.w	r3, [r1], #4
 80097da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097de:	d2e6      	bcs.n	80097ae <quorem+0xa4>
 80097e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097e8:	b922      	cbnz	r2, 80097f4 <quorem+0xea>
 80097ea:	3b04      	subs	r3, #4
 80097ec:	429d      	cmp	r5, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	d30b      	bcc.n	800980a <quorem+0x100>
 80097f2:	613c      	str	r4, [r7, #16]
 80097f4:	3601      	adds	r6, #1
 80097f6:	4630      	mov	r0, r6
 80097f8:	b003      	add	sp, #12
 80097fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fe:	6812      	ldr	r2, [r2, #0]
 8009800:	3b04      	subs	r3, #4
 8009802:	2a00      	cmp	r2, #0
 8009804:	d1cb      	bne.n	800979e <quorem+0x94>
 8009806:	3c01      	subs	r4, #1
 8009808:	e7c6      	b.n	8009798 <quorem+0x8e>
 800980a:	6812      	ldr	r2, [r2, #0]
 800980c:	3b04      	subs	r3, #4
 800980e:	2a00      	cmp	r2, #0
 8009810:	d1ef      	bne.n	80097f2 <quorem+0xe8>
 8009812:	3c01      	subs	r4, #1
 8009814:	e7ea      	b.n	80097ec <quorem+0xe2>
 8009816:	2000      	movs	r0, #0
 8009818:	e7ee      	b.n	80097f8 <quorem+0xee>
 800981a:	0000      	movs	r0, r0
 800981c:	0000      	movs	r0, r0
	...

08009820 <_dtoa_r>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	ed2d 8b02 	vpush	{d8}
 8009828:	69c7      	ldr	r7, [r0, #28]
 800982a:	b091      	sub	sp, #68	@ 0x44
 800982c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009830:	ec55 4b10 	vmov	r4, r5, d0
 8009834:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009836:	9107      	str	r1, [sp, #28]
 8009838:	4681      	mov	r9, r0
 800983a:	9209      	str	r2, [sp, #36]	@ 0x24
 800983c:	930d      	str	r3, [sp, #52]	@ 0x34
 800983e:	b97f      	cbnz	r7, 8009860 <_dtoa_r+0x40>
 8009840:	2010      	movs	r0, #16
 8009842:	f000 fd95 	bl	800a370 <malloc>
 8009846:	4602      	mov	r2, r0
 8009848:	f8c9 001c 	str.w	r0, [r9, #28]
 800984c:	b920      	cbnz	r0, 8009858 <_dtoa_r+0x38>
 800984e:	4ba0      	ldr	r3, [pc, #640]	@ (8009ad0 <_dtoa_r+0x2b0>)
 8009850:	21ef      	movs	r1, #239	@ 0xef
 8009852:	48a0      	ldr	r0, [pc, #640]	@ (8009ad4 <_dtoa_r+0x2b4>)
 8009854:	f001 fc3e 	bl	800b0d4 <__assert_func>
 8009858:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800985c:	6007      	str	r7, [r0, #0]
 800985e:	60c7      	str	r7, [r0, #12]
 8009860:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009864:	6819      	ldr	r1, [r3, #0]
 8009866:	b159      	cbz	r1, 8009880 <_dtoa_r+0x60>
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	604a      	str	r2, [r1, #4]
 800986c:	2301      	movs	r3, #1
 800986e:	4093      	lsls	r3, r2
 8009870:	608b      	str	r3, [r1, #8]
 8009872:	4648      	mov	r0, r9
 8009874:	f000 fe72 	bl	800a55c <_Bfree>
 8009878:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	1e2b      	subs	r3, r5, #0
 8009882:	bfbb      	ittet	lt
 8009884:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009888:	9303      	strlt	r3, [sp, #12]
 800988a:	2300      	movge	r3, #0
 800988c:	2201      	movlt	r2, #1
 800988e:	bfac      	ite	ge
 8009890:	6033      	strge	r3, [r6, #0]
 8009892:	6032      	strlt	r2, [r6, #0]
 8009894:	4b90      	ldr	r3, [pc, #576]	@ (8009ad8 <_dtoa_r+0x2b8>)
 8009896:	9e03      	ldr	r6, [sp, #12]
 8009898:	43b3      	bics	r3, r6
 800989a:	d110      	bne.n	80098be <_dtoa_r+0x9e>
 800989c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800989e:	f242 730f 	movw	r3, #9999	@ 0x270f
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80098a8:	4323      	orrs	r3, r4
 80098aa:	f000 84e6 	beq.w	800a27a <_dtoa_r+0xa5a>
 80098ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098b0:	4f8a      	ldr	r7, [pc, #552]	@ (8009adc <_dtoa_r+0x2bc>)
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 84e8 	beq.w	800a288 <_dtoa_r+0xa68>
 80098b8:	1cfb      	adds	r3, r7, #3
 80098ba:	f000 bce3 	b.w	800a284 <_dtoa_r+0xa64>
 80098be:	ed9d 8b02 	vldr	d8, [sp, #8]
 80098c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80098c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ca:	d10a      	bne.n	80098e2 <_dtoa_r+0xc2>
 80098cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098ce:	2301      	movs	r3, #1
 80098d0:	6013      	str	r3, [r2, #0]
 80098d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098d4:	b113      	cbz	r3, 80098dc <_dtoa_r+0xbc>
 80098d6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80098d8:	4b81      	ldr	r3, [pc, #516]	@ (8009ae0 <_dtoa_r+0x2c0>)
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	4f81      	ldr	r7, [pc, #516]	@ (8009ae4 <_dtoa_r+0x2c4>)
 80098de:	f000 bcd3 	b.w	800a288 <_dtoa_r+0xa68>
 80098e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80098e4:	a90f      	add	r1, sp, #60	@ 0x3c
 80098e6:	4648      	mov	r0, r9
 80098e8:	eeb0 0b48 	vmov.f64	d0, d8
 80098ec:	f001 f918 	bl	800ab20 <__d2b>
 80098f0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80098f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098f6:	9001      	str	r0, [sp, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d045      	beq.n	8009988 <_dtoa_r+0x168>
 80098fc:	eeb0 7b48 	vmov.f64	d7, d8
 8009900:	ee18 1a90 	vmov	r1, s17
 8009904:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009908:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800990c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009910:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009914:	2500      	movs	r5, #0
 8009916:	ee07 1a90 	vmov	s15, r1
 800991a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800991e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009ab8 <_dtoa_r+0x298>
 8009922:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009926:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009ac0 <_dtoa_r+0x2a0>
 800992a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800992e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009ac8 <_dtoa_r+0x2a8>
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800993a:	eeb0 7b46 	vmov.f64	d7, d6
 800993e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009942:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009946:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800994a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994e:	ee16 8a90 	vmov	r8, s13
 8009952:	d508      	bpl.n	8009966 <_dtoa_r+0x146>
 8009954:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009958:	eeb4 6b47 	vcmp.f64	d6, d7
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	bf18      	it	ne
 8009962:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009966:	f1b8 0f16 	cmp.w	r8, #22
 800996a:	d82b      	bhi.n	80099c4 <_dtoa_r+0x1a4>
 800996c:	495e      	ldr	r1, [pc, #376]	@ (8009ae8 <_dtoa_r+0x2c8>)
 800996e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009972:	ed91 7b00 	vldr	d7, [r1]
 8009976:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800997a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997e:	d501      	bpl.n	8009984 <_dtoa_r+0x164>
 8009980:	f108 38ff 	add.w	r8, r8, #4294967295
 8009984:	2100      	movs	r1, #0
 8009986:	e01e      	b.n	80099c6 <_dtoa_r+0x1a6>
 8009988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800998a:	4413      	add	r3, r2
 800998c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009990:	2920      	cmp	r1, #32
 8009992:	bfc1      	itttt	gt
 8009994:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009998:	408e      	lslgt	r6, r1
 800999a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800999e:	fa24 f101 	lsrgt.w	r1, r4, r1
 80099a2:	bfd6      	itet	le
 80099a4:	f1c1 0120 	rsble	r1, r1, #32
 80099a8:	4331      	orrgt	r1, r6
 80099aa:	fa04 f101 	lslle.w	r1, r4, r1
 80099ae:	ee07 1a90 	vmov	s15, r1
 80099b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80099b6:	3b01      	subs	r3, #1
 80099b8:	ee17 1a90 	vmov	r1, s15
 80099bc:	2501      	movs	r5, #1
 80099be:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80099c2:	e7a8      	b.n	8009916 <_dtoa_r+0xf6>
 80099c4:	2101      	movs	r1, #1
 80099c6:	1ad2      	subs	r2, r2, r3
 80099c8:	1e53      	subs	r3, r2, #1
 80099ca:	9306      	str	r3, [sp, #24]
 80099cc:	bf45      	ittet	mi
 80099ce:	f1c2 0301 	rsbmi	r3, r2, #1
 80099d2:	9304      	strmi	r3, [sp, #16]
 80099d4:	2300      	movpl	r3, #0
 80099d6:	2300      	movmi	r3, #0
 80099d8:	bf4c      	ite	mi
 80099da:	9306      	strmi	r3, [sp, #24]
 80099dc:	9304      	strpl	r3, [sp, #16]
 80099de:	f1b8 0f00 	cmp.w	r8, #0
 80099e2:	910c      	str	r1, [sp, #48]	@ 0x30
 80099e4:	db18      	blt.n	8009a18 <_dtoa_r+0x1f8>
 80099e6:	9b06      	ldr	r3, [sp, #24]
 80099e8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80099ec:	4443      	add	r3, r8
 80099ee:	9306      	str	r3, [sp, #24]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9a07      	ldr	r2, [sp, #28]
 80099f4:	2a09      	cmp	r2, #9
 80099f6:	d845      	bhi.n	8009a84 <_dtoa_r+0x264>
 80099f8:	2a05      	cmp	r2, #5
 80099fa:	bfc4      	itt	gt
 80099fc:	3a04      	subgt	r2, #4
 80099fe:	9207      	strgt	r2, [sp, #28]
 8009a00:	9a07      	ldr	r2, [sp, #28]
 8009a02:	f1a2 0202 	sub.w	r2, r2, #2
 8009a06:	bfcc      	ite	gt
 8009a08:	2400      	movgt	r4, #0
 8009a0a:	2401      	movle	r4, #1
 8009a0c:	2a03      	cmp	r2, #3
 8009a0e:	d844      	bhi.n	8009a9a <_dtoa_r+0x27a>
 8009a10:	e8df f002 	tbb	[pc, r2]
 8009a14:	0b173634 	.word	0x0b173634
 8009a18:	9b04      	ldr	r3, [sp, #16]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	eba3 0308 	sub.w	r3, r3, r8
 8009a20:	9304      	str	r3, [sp, #16]
 8009a22:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a24:	f1c8 0300 	rsb	r3, r8, #0
 8009a28:	e7e3      	b.n	80099f2 <_dtoa_r+0x1d2>
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	9208      	str	r2, [sp, #32]
 8009a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a30:	eb08 0b02 	add.w	fp, r8, r2
 8009a34:	f10b 0a01 	add.w	sl, fp, #1
 8009a38:	4652      	mov	r2, sl
 8009a3a:	2a01      	cmp	r2, #1
 8009a3c:	bfb8      	it	lt
 8009a3e:	2201      	movlt	r2, #1
 8009a40:	e006      	b.n	8009a50 <_dtoa_r+0x230>
 8009a42:	2201      	movs	r2, #1
 8009a44:	9208      	str	r2, [sp, #32]
 8009a46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	dd29      	ble.n	8009aa0 <_dtoa_r+0x280>
 8009a4c:	4693      	mov	fp, r2
 8009a4e:	4692      	mov	sl, r2
 8009a50:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009a54:	2100      	movs	r1, #0
 8009a56:	2004      	movs	r0, #4
 8009a58:	f100 0614 	add.w	r6, r0, #20
 8009a5c:	4296      	cmp	r6, r2
 8009a5e:	d926      	bls.n	8009aae <_dtoa_r+0x28e>
 8009a60:	6079      	str	r1, [r7, #4]
 8009a62:	4648      	mov	r0, r9
 8009a64:	9305      	str	r3, [sp, #20]
 8009a66:	f000 fd39 	bl	800a4dc <_Balloc>
 8009a6a:	9b05      	ldr	r3, [sp, #20]
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d13e      	bne.n	8009af0 <_dtoa_r+0x2d0>
 8009a72:	4b1e      	ldr	r3, [pc, #120]	@ (8009aec <_dtoa_r+0x2cc>)
 8009a74:	4602      	mov	r2, r0
 8009a76:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a7a:	e6ea      	b.n	8009852 <_dtoa_r+0x32>
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	e7e1      	b.n	8009a44 <_dtoa_r+0x224>
 8009a80:	2200      	movs	r2, #0
 8009a82:	e7d3      	b.n	8009a2c <_dtoa_r+0x20c>
 8009a84:	2401      	movs	r4, #1
 8009a86:	2200      	movs	r2, #0
 8009a88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009a8c:	f04f 3bff 	mov.w	fp, #4294967295
 8009a90:	2100      	movs	r1, #0
 8009a92:	46da      	mov	sl, fp
 8009a94:	2212      	movs	r2, #18
 8009a96:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a98:	e7da      	b.n	8009a50 <_dtoa_r+0x230>
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	9208      	str	r2, [sp, #32]
 8009a9e:	e7f5      	b.n	8009a8c <_dtoa_r+0x26c>
 8009aa0:	f04f 0b01 	mov.w	fp, #1
 8009aa4:	46da      	mov	sl, fp
 8009aa6:	465a      	mov	r2, fp
 8009aa8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009aac:	e7d0      	b.n	8009a50 <_dtoa_r+0x230>
 8009aae:	3101      	adds	r1, #1
 8009ab0:	0040      	lsls	r0, r0, #1
 8009ab2:	e7d1      	b.n	8009a58 <_dtoa_r+0x238>
 8009ab4:	f3af 8000 	nop.w
 8009ab8:	636f4361 	.word	0x636f4361
 8009abc:	3fd287a7 	.word	0x3fd287a7
 8009ac0:	8b60c8b3 	.word	0x8b60c8b3
 8009ac4:	3fc68a28 	.word	0x3fc68a28
 8009ac8:	509f79fb 	.word	0x509f79fb
 8009acc:	3fd34413 	.word	0x3fd34413
 8009ad0:	0800b5bd 	.word	0x0800b5bd
 8009ad4:	0800b5d4 	.word	0x0800b5d4
 8009ad8:	7ff00000 	.word	0x7ff00000
 8009adc:	0800b5b9 	.word	0x0800b5b9
 8009ae0:	0800b58d 	.word	0x0800b58d
 8009ae4:	0800b58c 	.word	0x0800b58c
 8009ae8:	0800b728 	.word	0x0800b728
 8009aec:	0800b62c 	.word	0x0800b62c
 8009af0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009af4:	f1ba 0f0e 	cmp.w	sl, #14
 8009af8:	6010      	str	r0, [r2, #0]
 8009afa:	d86e      	bhi.n	8009bda <_dtoa_r+0x3ba>
 8009afc:	2c00      	cmp	r4, #0
 8009afe:	d06c      	beq.n	8009bda <_dtoa_r+0x3ba>
 8009b00:	f1b8 0f00 	cmp.w	r8, #0
 8009b04:	f340 80b4 	ble.w	8009c70 <_dtoa_r+0x450>
 8009b08:	4ac8      	ldr	r2, [pc, #800]	@ (8009e2c <_dtoa_r+0x60c>)
 8009b0a:	f008 010f 	and.w	r1, r8, #15
 8009b0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009b12:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009b16:	ed92 7b00 	vldr	d7, [r2]
 8009b1a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009b1e:	f000 809b 	beq.w	8009c58 <_dtoa_r+0x438>
 8009b22:	4ac3      	ldr	r2, [pc, #780]	@ (8009e30 <_dtoa_r+0x610>)
 8009b24:	ed92 6b08 	vldr	d6, [r2, #32]
 8009b28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009b2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009b30:	f001 010f 	and.w	r1, r1, #15
 8009b34:	2203      	movs	r2, #3
 8009b36:	48be      	ldr	r0, [pc, #760]	@ (8009e30 <_dtoa_r+0x610>)
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	f040 808f 	bne.w	8009c5c <_dtoa_r+0x43c>
 8009b3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b50:	2900      	cmp	r1, #0
 8009b52:	f000 80b3 	beq.w	8009cbc <_dtoa_r+0x49c>
 8009b56:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009b5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b62:	f140 80ab 	bpl.w	8009cbc <_dtoa_r+0x49c>
 8009b66:	f1ba 0f00 	cmp.w	sl, #0
 8009b6a:	f000 80a7 	beq.w	8009cbc <_dtoa_r+0x49c>
 8009b6e:	f1bb 0f00 	cmp.w	fp, #0
 8009b72:	dd30      	ble.n	8009bd6 <_dtoa_r+0x3b6>
 8009b74:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009b78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b80:	f108 31ff 	add.w	r1, r8, #4294967295
 8009b84:	9105      	str	r1, [sp, #20]
 8009b86:	3201      	adds	r2, #1
 8009b88:	465c      	mov	r4, fp
 8009b8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b8e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009b92:	ee07 2a90 	vmov	s15, r2
 8009b96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009b9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009b9e:	ee15 2a90 	vmov	r2, s11
 8009ba2:	ec51 0b15 	vmov	r0, r1, d5
 8009ba6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009baa:	2c00      	cmp	r4, #0
 8009bac:	f040 808a 	bne.w	8009cc4 <_dtoa_r+0x4a4>
 8009bb0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009bb4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009bb8:	ec41 0b17 	vmov	d7, r0, r1
 8009bbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc4:	f300 826a 	bgt.w	800a09c <_dtoa_r+0x87c>
 8009bc8:	eeb1 7b47 	vneg.f64	d7, d7
 8009bcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd4:	d423      	bmi.n	8009c1e <_dtoa_r+0x3fe>
 8009bd6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009bda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009bdc:	2a00      	cmp	r2, #0
 8009bde:	f2c0 8129 	blt.w	8009e34 <_dtoa_r+0x614>
 8009be2:	f1b8 0f0e 	cmp.w	r8, #14
 8009be6:	f300 8125 	bgt.w	8009e34 <_dtoa_r+0x614>
 8009bea:	4b90      	ldr	r3, [pc, #576]	@ (8009e2c <_dtoa_r+0x60c>)
 8009bec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009bf0:	ed93 6b00 	vldr	d6, [r3]
 8009bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f280 80c8 	bge.w	8009d8c <_dtoa_r+0x56c>
 8009bfc:	f1ba 0f00 	cmp.w	sl, #0
 8009c00:	f300 80c4 	bgt.w	8009d8c <_dtoa_r+0x56c>
 8009c04:	d10b      	bne.n	8009c1e <_dtoa_r+0x3fe>
 8009c06:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009c0a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009c0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1a:	f2c0 823c 	blt.w	800a096 <_dtoa_r+0x876>
 8009c1e:	2400      	movs	r4, #0
 8009c20:	4625      	mov	r5, r4
 8009c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c24:	43db      	mvns	r3, r3
 8009c26:	9305      	str	r3, [sp, #20]
 8009c28:	463e      	mov	r6, r7
 8009c2a:	f04f 0800 	mov.w	r8, #0
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4648      	mov	r0, r9
 8009c32:	f000 fc93 	bl	800a55c <_Bfree>
 8009c36:	2d00      	cmp	r5, #0
 8009c38:	f000 80a2 	beq.w	8009d80 <_dtoa_r+0x560>
 8009c3c:	f1b8 0f00 	cmp.w	r8, #0
 8009c40:	d005      	beq.n	8009c4e <_dtoa_r+0x42e>
 8009c42:	45a8      	cmp	r8, r5
 8009c44:	d003      	beq.n	8009c4e <_dtoa_r+0x42e>
 8009c46:	4641      	mov	r1, r8
 8009c48:	4648      	mov	r0, r9
 8009c4a:	f000 fc87 	bl	800a55c <_Bfree>
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4648      	mov	r0, r9
 8009c52:	f000 fc83 	bl	800a55c <_Bfree>
 8009c56:	e093      	b.n	8009d80 <_dtoa_r+0x560>
 8009c58:	2202      	movs	r2, #2
 8009c5a:	e76c      	b.n	8009b36 <_dtoa_r+0x316>
 8009c5c:	07cc      	lsls	r4, r1, #31
 8009c5e:	d504      	bpl.n	8009c6a <_dtoa_r+0x44a>
 8009c60:	ed90 6b00 	vldr	d6, [r0]
 8009c64:	3201      	adds	r2, #1
 8009c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c6a:	1049      	asrs	r1, r1, #1
 8009c6c:	3008      	adds	r0, #8
 8009c6e:	e763      	b.n	8009b38 <_dtoa_r+0x318>
 8009c70:	d022      	beq.n	8009cb8 <_dtoa_r+0x498>
 8009c72:	f1c8 0100 	rsb	r1, r8, #0
 8009c76:	4a6d      	ldr	r2, [pc, #436]	@ (8009e2c <_dtoa_r+0x60c>)
 8009c78:	f001 000f 	and.w	r0, r1, #15
 8009c7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009c80:	ed92 7b00 	vldr	d7, [r2]
 8009c84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c8c:	4868      	ldr	r0, [pc, #416]	@ (8009e30 <_dtoa_r+0x610>)
 8009c8e:	1109      	asrs	r1, r1, #4
 8009c90:	2400      	movs	r4, #0
 8009c92:	2202      	movs	r2, #2
 8009c94:	b929      	cbnz	r1, 8009ca2 <_dtoa_r+0x482>
 8009c96:	2c00      	cmp	r4, #0
 8009c98:	f43f af57 	beq.w	8009b4a <_dtoa_r+0x32a>
 8009c9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ca0:	e753      	b.n	8009b4a <_dtoa_r+0x32a>
 8009ca2:	07ce      	lsls	r6, r1, #31
 8009ca4:	d505      	bpl.n	8009cb2 <_dtoa_r+0x492>
 8009ca6:	ed90 6b00 	vldr	d6, [r0]
 8009caa:	3201      	adds	r2, #1
 8009cac:	2401      	movs	r4, #1
 8009cae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009cb2:	1049      	asrs	r1, r1, #1
 8009cb4:	3008      	adds	r0, #8
 8009cb6:	e7ed      	b.n	8009c94 <_dtoa_r+0x474>
 8009cb8:	2202      	movs	r2, #2
 8009cba:	e746      	b.n	8009b4a <_dtoa_r+0x32a>
 8009cbc:	f8cd 8014 	str.w	r8, [sp, #20]
 8009cc0:	4654      	mov	r4, sl
 8009cc2:	e762      	b.n	8009b8a <_dtoa_r+0x36a>
 8009cc4:	4a59      	ldr	r2, [pc, #356]	@ (8009e2c <_dtoa_r+0x60c>)
 8009cc6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009cca:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009cce:	9a08      	ldr	r2, [sp, #32]
 8009cd0:	ec41 0b17 	vmov	d7, r0, r1
 8009cd4:	443c      	add	r4, r7
 8009cd6:	b34a      	cbz	r2, 8009d2c <_dtoa_r+0x50c>
 8009cd8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009cdc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009ce0:	463e      	mov	r6, r7
 8009ce2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009ce6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009cea:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009cee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009cf2:	ee14 2a90 	vmov	r2, s9
 8009cf6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009cfa:	3230      	adds	r2, #48	@ 0x30
 8009cfc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d08:	f806 2b01 	strb.w	r2, [r6], #1
 8009d0c:	d438      	bmi.n	8009d80 <_dtoa_r+0x560>
 8009d0e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009d12:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1a:	d46e      	bmi.n	8009dfa <_dtoa_r+0x5da>
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	f43f af5a 	beq.w	8009bd6 <_dtoa_r+0x3b6>
 8009d22:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009d26:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d2a:	e7e0      	b.n	8009cee <_dtoa_r+0x4ce>
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	463e      	mov	r6, r7
 8009d30:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d34:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009d38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d3c:	ee14 2a90 	vmov	r2, s9
 8009d40:	3230      	adds	r2, #48	@ 0x30
 8009d42:	f806 2b01 	strb.w	r2, [r6], #1
 8009d46:	42a6      	cmp	r6, r4
 8009d48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009d4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d50:	d119      	bne.n	8009d86 <_dtoa_r+0x566>
 8009d52:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009d56:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009d5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d62:	dc4a      	bgt.n	8009dfa <_dtoa_r+0x5da>
 8009d64:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009d68:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d70:	f57f af31 	bpl.w	8009bd6 <_dtoa_r+0x3b6>
 8009d74:	460e      	mov	r6, r1
 8009d76:	3901      	subs	r1, #1
 8009d78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d7c:	2b30      	cmp	r3, #48	@ 0x30
 8009d7e:	d0f9      	beq.n	8009d74 <_dtoa_r+0x554>
 8009d80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009d84:	e027      	b.n	8009dd6 <_dtoa_r+0x5b6>
 8009d86:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d8a:	e7d5      	b.n	8009d38 <_dtoa_r+0x518>
 8009d8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d90:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009d94:	463e      	mov	r6, r7
 8009d96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009d9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009d9e:	ee15 3a10 	vmov	r3, s10
 8009da2:	3330      	adds	r3, #48	@ 0x30
 8009da4:	f806 3b01 	strb.w	r3, [r6], #1
 8009da8:	1bf3      	subs	r3, r6, r7
 8009daa:	459a      	cmp	sl, r3
 8009dac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009db0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009db4:	d132      	bne.n	8009e1c <_dtoa_r+0x5fc>
 8009db6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009dba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc2:	dc18      	bgt.n	8009df6 <_dtoa_r+0x5d6>
 8009dc4:	eeb4 7b46 	vcmp.f64	d7, d6
 8009dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dcc:	d103      	bne.n	8009dd6 <_dtoa_r+0x5b6>
 8009dce:	ee15 3a10 	vmov	r3, s10
 8009dd2:	07db      	lsls	r3, r3, #31
 8009dd4:	d40f      	bmi.n	8009df6 <_dtoa_r+0x5d6>
 8009dd6:	9901      	ldr	r1, [sp, #4]
 8009dd8:	4648      	mov	r0, r9
 8009dda:	f000 fbbf 	bl	800a55c <_Bfree>
 8009dde:	2300      	movs	r3, #0
 8009de0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009de2:	7033      	strb	r3, [r6, #0]
 8009de4:	f108 0301 	add.w	r3, r8, #1
 8009de8:	6013      	str	r3, [r2, #0]
 8009dea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 824b 	beq.w	800a288 <_dtoa_r+0xa68>
 8009df2:	601e      	str	r6, [r3, #0]
 8009df4:	e248      	b.n	800a288 <_dtoa_r+0xa68>
 8009df6:	f8cd 8014 	str.w	r8, [sp, #20]
 8009dfa:	4633      	mov	r3, r6
 8009dfc:	461e      	mov	r6, r3
 8009dfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e02:	2a39      	cmp	r2, #57	@ 0x39
 8009e04:	d106      	bne.n	8009e14 <_dtoa_r+0x5f4>
 8009e06:	429f      	cmp	r7, r3
 8009e08:	d1f8      	bne.n	8009dfc <_dtoa_r+0x5dc>
 8009e0a:	9a05      	ldr	r2, [sp, #20]
 8009e0c:	3201      	adds	r2, #1
 8009e0e:	9205      	str	r2, [sp, #20]
 8009e10:	2230      	movs	r2, #48	@ 0x30
 8009e12:	703a      	strb	r2, [r7, #0]
 8009e14:	781a      	ldrb	r2, [r3, #0]
 8009e16:	3201      	adds	r2, #1
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	e7b1      	b.n	8009d80 <_dtoa_r+0x560>
 8009e1c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e28:	d1b5      	bne.n	8009d96 <_dtoa_r+0x576>
 8009e2a:	e7d4      	b.n	8009dd6 <_dtoa_r+0x5b6>
 8009e2c:	0800b728 	.word	0x0800b728
 8009e30:	0800b700 	.word	0x0800b700
 8009e34:	9908      	ldr	r1, [sp, #32]
 8009e36:	2900      	cmp	r1, #0
 8009e38:	f000 80e9 	beq.w	800a00e <_dtoa_r+0x7ee>
 8009e3c:	9907      	ldr	r1, [sp, #28]
 8009e3e:	2901      	cmp	r1, #1
 8009e40:	f300 80cb 	bgt.w	8009fda <_dtoa_r+0x7ba>
 8009e44:	2d00      	cmp	r5, #0
 8009e46:	f000 80c4 	beq.w	8009fd2 <_dtoa_r+0x7b2>
 8009e4a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009e4e:	9e04      	ldr	r6, [sp, #16]
 8009e50:	461c      	mov	r4, r3
 8009e52:	9305      	str	r3, [sp, #20]
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	4413      	add	r3, r2
 8009e58:	9304      	str	r3, [sp, #16]
 8009e5a:	9b06      	ldr	r3, [sp, #24]
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	4413      	add	r3, r2
 8009e60:	4648      	mov	r0, r9
 8009e62:	9306      	str	r3, [sp, #24]
 8009e64:	f000 fc2e 	bl	800a6c4 <__i2b>
 8009e68:	9b05      	ldr	r3, [sp, #20]
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	b166      	cbz	r6, 8009e88 <_dtoa_r+0x668>
 8009e6e:	9a06      	ldr	r2, [sp, #24]
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	dd09      	ble.n	8009e88 <_dtoa_r+0x668>
 8009e74:	42b2      	cmp	r2, r6
 8009e76:	9904      	ldr	r1, [sp, #16]
 8009e78:	bfa8      	it	ge
 8009e7a:	4632      	movge	r2, r6
 8009e7c:	1a89      	subs	r1, r1, r2
 8009e7e:	9104      	str	r1, [sp, #16]
 8009e80:	9906      	ldr	r1, [sp, #24]
 8009e82:	1ab6      	subs	r6, r6, r2
 8009e84:	1a8a      	subs	r2, r1, r2
 8009e86:	9206      	str	r2, [sp, #24]
 8009e88:	b30b      	cbz	r3, 8009ece <_dtoa_r+0x6ae>
 8009e8a:	9a08      	ldr	r2, [sp, #32]
 8009e8c:	2a00      	cmp	r2, #0
 8009e8e:	f000 80c5 	beq.w	800a01c <_dtoa_r+0x7fc>
 8009e92:	2c00      	cmp	r4, #0
 8009e94:	f000 80bf 	beq.w	800a016 <_dtoa_r+0x7f6>
 8009e98:	4629      	mov	r1, r5
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	4648      	mov	r0, r9
 8009e9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ea0:	f000 fcc8 	bl	800a834 <__pow5mult>
 8009ea4:	9a01      	ldr	r2, [sp, #4]
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	4648      	mov	r0, r9
 8009eac:	f000 fc20 	bl	800a6f0 <__multiply>
 8009eb0:	9901      	ldr	r1, [sp, #4]
 8009eb2:	9005      	str	r0, [sp, #20]
 8009eb4:	4648      	mov	r0, r9
 8009eb6:	f000 fb51 	bl	800a55c <_Bfree>
 8009eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ebc:	1b1b      	subs	r3, r3, r4
 8009ebe:	f000 80b0 	beq.w	800a022 <_dtoa_r+0x802>
 8009ec2:	9905      	ldr	r1, [sp, #20]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f000 fcb4 	bl	800a834 <__pow5mult>
 8009ecc:	9001      	str	r0, [sp, #4]
 8009ece:	2101      	movs	r1, #1
 8009ed0:	4648      	mov	r0, r9
 8009ed2:	f000 fbf7 	bl	800a6c4 <__i2b>
 8009ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ed8:	4604      	mov	r4, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 81da 	beq.w	800a294 <_dtoa_r+0xa74>
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	4648      	mov	r0, r9
 8009ee6:	f000 fca5 	bl	800a834 <__pow5mult>
 8009eea:	9b07      	ldr	r3, [sp, #28]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	4604      	mov	r4, r0
 8009ef0:	f300 80a0 	bgt.w	800a034 <_dtoa_r+0x814>
 8009ef4:	9b02      	ldr	r3, [sp, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f040 8096 	bne.w	800a028 <_dtoa_r+0x808>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009f02:	2a00      	cmp	r2, #0
 8009f04:	f040 8092 	bne.w	800a02c <_dtoa_r+0x80c>
 8009f08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009f0c:	0d12      	lsrs	r2, r2, #20
 8009f0e:	0512      	lsls	r2, r2, #20
 8009f10:	2a00      	cmp	r2, #0
 8009f12:	f000 808d 	beq.w	800a030 <_dtoa_r+0x810>
 8009f16:	9b04      	ldr	r3, [sp, #16]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	9304      	str	r3, [sp, #16]
 8009f1c:	9b06      	ldr	r3, [sp, #24]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	9306      	str	r3, [sp, #24]
 8009f22:	2301      	movs	r3, #1
 8009f24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 81b9 	beq.w	800a2a0 <_dtoa_r+0xa80>
 8009f2e:	6922      	ldr	r2, [r4, #16]
 8009f30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009f34:	6910      	ldr	r0, [r2, #16]
 8009f36:	f000 fb79 	bl	800a62c <__hi0bits>
 8009f3a:	f1c0 0020 	rsb	r0, r0, #32
 8009f3e:	9b06      	ldr	r3, [sp, #24]
 8009f40:	4418      	add	r0, r3
 8009f42:	f010 001f 	ands.w	r0, r0, #31
 8009f46:	f000 8081 	beq.w	800a04c <_dtoa_r+0x82c>
 8009f4a:	f1c0 0220 	rsb	r2, r0, #32
 8009f4e:	2a04      	cmp	r2, #4
 8009f50:	dd73      	ble.n	800a03a <_dtoa_r+0x81a>
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	f1c0 001c 	rsb	r0, r0, #28
 8009f58:	4403      	add	r3, r0
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	9b06      	ldr	r3, [sp, #24]
 8009f5e:	4406      	add	r6, r0
 8009f60:	4403      	add	r3, r0
 8009f62:	9306      	str	r3, [sp, #24]
 8009f64:	9b04      	ldr	r3, [sp, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dd05      	ble.n	8009f76 <_dtoa_r+0x756>
 8009f6a:	9901      	ldr	r1, [sp, #4]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	4648      	mov	r0, r9
 8009f70:	f000 fcba 	bl	800a8e8 <__lshift>
 8009f74:	9001      	str	r0, [sp, #4]
 8009f76:	9b06      	ldr	r3, [sp, #24]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	dd05      	ble.n	8009f88 <_dtoa_r+0x768>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4648      	mov	r0, r9
 8009f82:	f000 fcb1 	bl	800a8e8 <__lshift>
 8009f86:	4604      	mov	r4, r0
 8009f88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d060      	beq.n	800a050 <_dtoa_r+0x830>
 8009f8e:	9801      	ldr	r0, [sp, #4]
 8009f90:	4621      	mov	r1, r4
 8009f92:	f000 fd15 	bl	800a9c0 <__mcmp>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	da5a      	bge.n	800a050 <_dtoa_r+0x830>
 8009f9a:	f108 33ff 	add.w	r3, r8, #4294967295
 8009f9e:	9305      	str	r3, [sp, #20]
 8009fa0:	9901      	ldr	r1, [sp, #4]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	220a      	movs	r2, #10
 8009fa6:	4648      	mov	r0, r9
 8009fa8:	f000 fafa 	bl	800a5a0 <__multadd>
 8009fac:	9b08      	ldr	r3, [sp, #32]
 8009fae:	9001      	str	r0, [sp, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 8177 	beq.w	800a2a4 <_dtoa_r+0xa84>
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	2300      	movs	r3, #0
 8009fba:	220a      	movs	r2, #10
 8009fbc:	4648      	mov	r0, r9
 8009fbe:	f000 faef 	bl	800a5a0 <__multadd>
 8009fc2:	f1bb 0f00 	cmp.w	fp, #0
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	dc6e      	bgt.n	800a0a8 <_dtoa_r+0x888>
 8009fca:	9b07      	ldr	r3, [sp, #28]
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	dc48      	bgt.n	800a062 <_dtoa_r+0x842>
 8009fd0:	e06a      	b.n	800a0a8 <_dtoa_r+0x888>
 8009fd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009fd8:	e739      	b.n	8009e4e <_dtoa_r+0x62e>
 8009fda:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009fde:	42a3      	cmp	r3, r4
 8009fe0:	db07      	blt.n	8009ff2 <_dtoa_r+0x7d2>
 8009fe2:	f1ba 0f00 	cmp.w	sl, #0
 8009fe6:	eba3 0404 	sub.w	r4, r3, r4
 8009fea:	db0b      	blt.n	800a004 <_dtoa_r+0x7e4>
 8009fec:	9e04      	ldr	r6, [sp, #16]
 8009fee:	4652      	mov	r2, sl
 8009ff0:	e72f      	b.n	8009e52 <_dtoa_r+0x632>
 8009ff2:	1ae2      	subs	r2, r4, r3
 8009ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ff6:	9e04      	ldr	r6, [sp, #16]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4623      	mov	r3, r4
 800a000:	2400      	movs	r4, #0
 800a002:	e726      	b.n	8009e52 <_dtoa_r+0x632>
 800a004:	9a04      	ldr	r2, [sp, #16]
 800a006:	eba2 060a 	sub.w	r6, r2, sl
 800a00a:	2200      	movs	r2, #0
 800a00c:	e721      	b.n	8009e52 <_dtoa_r+0x632>
 800a00e:	9e04      	ldr	r6, [sp, #16]
 800a010:	9d08      	ldr	r5, [sp, #32]
 800a012:	461c      	mov	r4, r3
 800a014:	e72a      	b.n	8009e6c <_dtoa_r+0x64c>
 800a016:	9a01      	ldr	r2, [sp, #4]
 800a018:	9205      	str	r2, [sp, #20]
 800a01a:	e752      	b.n	8009ec2 <_dtoa_r+0x6a2>
 800a01c:	9901      	ldr	r1, [sp, #4]
 800a01e:	461a      	mov	r2, r3
 800a020:	e751      	b.n	8009ec6 <_dtoa_r+0x6a6>
 800a022:	9b05      	ldr	r3, [sp, #20]
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	e752      	b.n	8009ece <_dtoa_r+0x6ae>
 800a028:	2300      	movs	r3, #0
 800a02a:	e77b      	b.n	8009f24 <_dtoa_r+0x704>
 800a02c:	9b02      	ldr	r3, [sp, #8]
 800a02e:	e779      	b.n	8009f24 <_dtoa_r+0x704>
 800a030:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a032:	e778      	b.n	8009f26 <_dtoa_r+0x706>
 800a034:	2300      	movs	r3, #0
 800a036:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a038:	e779      	b.n	8009f2e <_dtoa_r+0x70e>
 800a03a:	d093      	beq.n	8009f64 <_dtoa_r+0x744>
 800a03c:	9b04      	ldr	r3, [sp, #16]
 800a03e:	321c      	adds	r2, #28
 800a040:	4413      	add	r3, r2
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	9b06      	ldr	r3, [sp, #24]
 800a046:	4416      	add	r6, r2
 800a048:	4413      	add	r3, r2
 800a04a:	e78a      	b.n	8009f62 <_dtoa_r+0x742>
 800a04c:	4602      	mov	r2, r0
 800a04e:	e7f5      	b.n	800a03c <_dtoa_r+0x81c>
 800a050:	f1ba 0f00 	cmp.w	sl, #0
 800a054:	f8cd 8014 	str.w	r8, [sp, #20]
 800a058:	46d3      	mov	fp, sl
 800a05a:	dc21      	bgt.n	800a0a0 <_dtoa_r+0x880>
 800a05c:	9b07      	ldr	r3, [sp, #28]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	dd1e      	ble.n	800a0a0 <_dtoa_r+0x880>
 800a062:	f1bb 0f00 	cmp.w	fp, #0
 800a066:	f47f addc 	bne.w	8009c22 <_dtoa_r+0x402>
 800a06a:	4621      	mov	r1, r4
 800a06c:	465b      	mov	r3, fp
 800a06e:	2205      	movs	r2, #5
 800a070:	4648      	mov	r0, r9
 800a072:	f000 fa95 	bl	800a5a0 <__multadd>
 800a076:	4601      	mov	r1, r0
 800a078:	4604      	mov	r4, r0
 800a07a:	9801      	ldr	r0, [sp, #4]
 800a07c:	f000 fca0 	bl	800a9c0 <__mcmp>
 800a080:	2800      	cmp	r0, #0
 800a082:	f77f adce 	ble.w	8009c22 <_dtoa_r+0x402>
 800a086:	463e      	mov	r6, r7
 800a088:	2331      	movs	r3, #49	@ 0x31
 800a08a:	f806 3b01 	strb.w	r3, [r6], #1
 800a08e:	9b05      	ldr	r3, [sp, #20]
 800a090:	3301      	adds	r3, #1
 800a092:	9305      	str	r3, [sp, #20]
 800a094:	e5c9      	b.n	8009c2a <_dtoa_r+0x40a>
 800a096:	f8cd 8014 	str.w	r8, [sp, #20]
 800a09a:	4654      	mov	r4, sl
 800a09c:	4625      	mov	r5, r4
 800a09e:	e7f2      	b.n	800a086 <_dtoa_r+0x866>
 800a0a0:	9b08      	ldr	r3, [sp, #32]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 8102 	beq.w	800a2ac <_dtoa_r+0xa8c>
 800a0a8:	2e00      	cmp	r6, #0
 800a0aa:	dd05      	ble.n	800a0b8 <_dtoa_r+0x898>
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	4632      	mov	r2, r6
 800a0b0:	4648      	mov	r0, r9
 800a0b2:	f000 fc19 	bl	800a8e8 <__lshift>
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d058      	beq.n	800a170 <_dtoa_r+0x950>
 800a0be:	6869      	ldr	r1, [r5, #4]
 800a0c0:	4648      	mov	r0, r9
 800a0c2:	f000 fa0b 	bl	800a4dc <_Balloc>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	b928      	cbnz	r0, 800a0d6 <_dtoa_r+0x8b6>
 800a0ca:	4b82      	ldr	r3, [pc, #520]	@ (800a2d4 <_dtoa_r+0xab4>)
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a0d2:	f7ff bbbe 	b.w	8009852 <_dtoa_r+0x32>
 800a0d6:	692a      	ldr	r2, [r5, #16]
 800a0d8:	3202      	adds	r2, #2
 800a0da:	0092      	lsls	r2, r2, #2
 800a0dc:	f105 010c 	add.w	r1, r5, #12
 800a0e0:	300c      	adds	r0, #12
 800a0e2:	f7ff fb04 	bl	80096ee <memcpy>
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4648      	mov	r0, r9
 800a0ec:	f000 fbfc 	bl	800a8e8 <__lshift>
 800a0f0:	1c7b      	adds	r3, r7, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	eb07 030b 	add.w	r3, r7, fp
 800a0f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0fa:	9b02      	ldr	r3, [sp, #8]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	46a8      	mov	r8, r5
 800a102:	9308      	str	r3, [sp, #32]
 800a104:	4605      	mov	r5, r0
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	9801      	ldr	r0, [sp, #4]
 800a10a:	4621      	mov	r1, r4
 800a10c:	f103 3bff 	add.w	fp, r3, #4294967295
 800a110:	f7ff fafb 	bl	800970a <quorem>
 800a114:	4641      	mov	r1, r8
 800a116:	9002      	str	r0, [sp, #8]
 800a118:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a11c:	9801      	ldr	r0, [sp, #4]
 800a11e:	f000 fc4f 	bl	800a9c0 <__mcmp>
 800a122:	462a      	mov	r2, r5
 800a124:	9006      	str	r0, [sp, #24]
 800a126:	4621      	mov	r1, r4
 800a128:	4648      	mov	r0, r9
 800a12a:	f000 fc65 	bl	800a9f8 <__mdiff>
 800a12e:	68c2      	ldr	r2, [r0, #12]
 800a130:	4606      	mov	r6, r0
 800a132:	b9fa      	cbnz	r2, 800a174 <_dtoa_r+0x954>
 800a134:	4601      	mov	r1, r0
 800a136:	9801      	ldr	r0, [sp, #4]
 800a138:	f000 fc42 	bl	800a9c0 <__mcmp>
 800a13c:	4602      	mov	r2, r0
 800a13e:	4631      	mov	r1, r6
 800a140:	4648      	mov	r0, r9
 800a142:	920a      	str	r2, [sp, #40]	@ 0x28
 800a144:	f000 fa0a 	bl	800a55c <_Bfree>
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a14c:	9e04      	ldr	r6, [sp, #16]
 800a14e:	ea42 0103 	orr.w	r1, r2, r3
 800a152:	9b08      	ldr	r3, [sp, #32]
 800a154:	4319      	orrs	r1, r3
 800a156:	d10f      	bne.n	800a178 <_dtoa_r+0x958>
 800a158:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a15c:	d028      	beq.n	800a1b0 <_dtoa_r+0x990>
 800a15e:	9b06      	ldr	r3, [sp, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	dd02      	ble.n	800a16a <_dtoa_r+0x94a>
 800a164:	9b02      	ldr	r3, [sp, #8]
 800a166:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a16a:	f88b a000 	strb.w	sl, [fp]
 800a16e:	e55e      	b.n	8009c2e <_dtoa_r+0x40e>
 800a170:	4628      	mov	r0, r5
 800a172:	e7bd      	b.n	800a0f0 <_dtoa_r+0x8d0>
 800a174:	2201      	movs	r2, #1
 800a176:	e7e2      	b.n	800a13e <_dtoa_r+0x91e>
 800a178:	9b06      	ldr	r3, [sp, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	db04      	blt.n	800a188 <_dtoa_r+0x968>
 800a17e:	9907      	ldr	r1, [sp, #28]
 800a180:	430b      	orrs	r3, r1
 800a182:	9908      	ldr	r1, [sp, #32]
 800a184:	430b      	orrs	r3, r1
 800a186:	d120      	bne.n	800a1ca <_dtoa_r+0x9aa>
 800a188:	2a00      	cmp	r2, #0
 800a18a:	ddee      	ble.n	800a16a <_dtoa_r+0x94a>
 800a18c:	9901      	ldr	r1, [sp, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	4648      	mov	r0, r9
 800a192:	f000 fba9 	bl	800a8e8 <__lshift>
 800a196:	4621      	mov	r1, r4
 800a198:	9001      	str	r0, [sp, #4]
 800a19a:	f000 fc11 	bl	800a9c0 <__mcmp>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	dc03      	bgt.n	800a1aa <_dtoa_r+0x98a>
 800a1a2:	d1e2      	bne.n	800a16a <_dtoa_r+0x94a>
 800a1a4:	f01a 0f01 	tst.w	sl, #1
 800a1a8:	d0df      	beq.n	800a16a <_dtoa_r+0x94a>
 800a1aa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a1ae:	d1d9      	bne.n	800a164 <_dtoa_r+0x944>
 800a1b0:	2339      	movs	r3, #57	@ 0x39
 800a1b2:	f88b 3000 	strb.w	r3, [fp]
 800a1b6:	4633      	mov	r3, r6
 800a1b8:	461e      	mov	r6, r3
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a1c0:	2a39      	cmp	r2, #57	@ 0x39
 800a1c2:	d052      	beq.n	800a26a <_dtoa_r+0xa4a>
 800a1c4:	3201      	adds	r2, #1
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	e531      	b.n	8009c2e <_dtoa_r+0x40e>
 800a1ca:	2a00      	cmp	r2, #0
 800a1cc:	dd07      	ble.n	800a1de <_dtoa_r+0x9be>
 800a1ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a1d2:	d0ed      	beq.n	800a1b0 <_dtoa_r+0x990>
 800a1d4:	f10a 0301 	add.w	r3, sl, #1
 800a1d8:	f88b 3000 	strb.w	r3, [fp]
 800a1dc:	e527      	b.n	8009c2e <_dtoa_r+0x40e>
 800a1de:	9b04      	ldr	r3, [sp, #16]
 800a1e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1e2:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d029      	beq.n	800a23e <_dtoa_r+0xa1e>
 800a1ea:	9901      	ldr	r1, [sp, #4]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	220a      	movs	r2, #10
 800a1f0:	4648      	mov	r0, r9
 800a1f2:	f000 f9d5 	bl	800a5a0 <__multadd>
 800a1f6:	45a8      	cmp	r8, r5
 800a1f8:	9001      	str	r0, [sp, #4]
 800a1fa:	f04f 0300 	mov.w	r3, #0
 800a1fe:	f04f 020a 	mov.w	r2, #10
 800a202:	4641      	mov	r1, r8
 800a204:	4648      	mov	r0, r9
 800a206:	d107      	bne.n	800a218 <_dtoa_r+0x9f8>
 800a208:	f000 f9ca 	bl	800a5a0 <__multadd>
 800a20c:	4680      	mov	r8, r0
 800a20e:	4605      	mov	r5, r0
 800a210:	9b04      	ldr	r3, [sp, #16]
 800a212:	3301      	adds	r3, #1
 800a214:	9304      	str	r3, [sp, #16]
 800a216:	e776      	b.n	800a106 <_dtoa_r+0x8e6>
 800a218:	f000 f9c2 	bl	800a5a0 <__multadd>
 800a21c:	4629      	mov	r1, r5
 800a21e:	4680      	mov	r8, r0
 800a220:	2300      	movs	r3, #0
 800a222:	220a      	movs	r2, #10
 800a224:	4648      	mov	r0, r9
 800a226:	f000 f9bb 	bl	800a5a0 <__multadd>
 800a22a:	4605      	mov	r5, r0
 800a22c:	e7f0      	b.n	800a210 <_dtoa_r+0x9f0>
 800a22e:	f1bb 0f00 	cmp.w	fp, #0
 800a232:	bfcc      	ite	gt
 800a234:	465e      	movgt	r6, fp
 800a236:	2601      	movle	r6, #1
 800a238:	443e      	add	r6, r7
 800a23a:	f04f 0800 	mov.w	r8, #0
 800a23e:	9901      	ldr	r1, [sp, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	4648      	mov	r0, r9
 800a244:	f000 fb50 	bl	800a8e8 <__lshift>
 800a248:	4621      	mov	r1, r4
 800a24a:	9001      	str	r0, [sp, #4]
 800a24c:	f000 fbb8 	bl	800a9c0 <__mcmp>
 800a250:	2800      	cmp	r0, #0
 800a252:	dcb0      	bgt.n	800a1b6 <_dtoa_r+0x996>
 800a254:	d102      	bne.n	800a25c <_dtoa_r+0xa3c>
 800a256:	f01a 0f01 	tst.w	sl, #1
 800a25a:	d1ac      	bne.n	800a1b6 <_dtoa_r+0x996>
 800a25c:	4633      	mov	r3, r6
 800a25e:	461e      	mov	r6, r3
 800a260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a264:	2a30      	cmp	r2, #48	@ 0x30
 800a266:	d0fa      	beq.n	800a25e <_dtoa_r+0xa3e>
 800a268:	e4e1      	b.n	8009c2e <_dtoa_r+0x40e>
 800a26a:	429f      	cmp	r7, r3
 800a26c:	d1a4      	bne.n	800a1b8 <_dtoa_r+0x998>
 800a26e:	9b05      	ldr	r3, [sp, #20]
 800a270:	3301      	adds	r3, #1
 800a272:	9305      	str	r3, [sp, #20]
 800a274:	2331      	movs	r3, #49	@ 0x31
 800a276:	703b      	strb	r3, [r7, #0]
 800a278:	e4d9      	b.n	8009c2e <_dtoa_r+0x40e>
 800a27a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a27c:	4f16      	ldr	r7, [pc, #88]	@ (800a2d8 <_dtoa_r+0xab8>)
 800a27e:	b11b      	cbz	r3, 800a288 <_dtoa_r+0xa68>
 800a280:	f107 0308 	add.w	r3, r7, #8
 800a284:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	4638      	mov	r0, r7
 800a28a:	b011      	add	sp, #68	@ 0x44
 800a28c:	ecbd 8b02 	vpop	{d8}
 800a290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a294:	9b07      	ldr	r3, [sp, #28]
 800a296:	2b01      	cmp	r3, #1
 800a298:	f77f ae2c 	ble.w	8009ef4 <_dtoa_r+0x6d4>
 800a29c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a29e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	e64c      	b.n	8009f3e <_dtoa_r+0x71e>
 800a2a4:	f1bb 0f00 	cmp.w	fp, #0
 800a2a8:	f77f aed8 	ble.w	800a05c <_dtoa_r+0x83c>
 800a2ac:	463e      	mov	r6, r7
 800a2ae:	9801      	ldr	r0, [sp, #4]
 800a2b0:	4621      	mov	r1, r4
 800a2b2:	f7ff fa2a 	bl	800970a <quorem>
 800a2b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a2ba:	f806 ab01 	strb.w	sl, [r6], #1
 800a2be:	1bf2      	subs	r2, r6, r7
 800a2c0:	4593      	cmp	fp, r2
 800a2c2:	ddb4      	ble.n	800a22e <_dtoa_r+0xa0e>
 800a2c4:	9901      	ldr	r1, [sp, #4]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	220a      	movs	r2, #10
 800a2ca:	4648      	mov	r0, r9
 800a2cc:	f000 f968 	bl	800a5a0 <__multadd>
 800a2d0:	9001      	str	r0, [sp, #4]
 800a2d2:	e7ec      	b.n	800a2ae <_dtoa_r+0xa8e>
 800a2d4:	0800b62c 	.word	0x0800b62c
 800a2d8:	0800b5b0 	.word	0x0800b5b0

0800a2dc <_free_r>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	4605      	mov	r5, r0
 800a2e0:	2900      	cmp	r1, #0
 800a2e2:	d041      	beq.n	800a368 <_free_r+0x8c>
 800a2e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e8:	1f0c      	subs	r4, r1, #4
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	bfb8      	it	lt
 800a2ee:	18e4      	addlt	r4, r4, r3
 800a2f0:	f000 f8e8 	bl	800a4c4 <__malloc_lock>
 800a2f4:	4a1d      	ldr	r2, [pc, #116]	@ (800a36c <_free_r+0x90>)
 800a2f6:	6813      	ldr	r3, [r2, #0]
 800a2f8:	b933      	cbnz	r3, 800a308 <_free_r+0x2c>
 800a2fa:	6063      	str	r3, [r4, #4]
 800a2fc:	6014      	str	r4, [r2, #0]
 800a2fe:	4628      	mov	r0, r5
 800a300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a304:	f000 b8e4 	b.w	800a4d0 <__malloc_unlock>
 800a308:	42a3      	cmp	r3, r4
 800a30a:	d908      	bls.n	800a31e <_free_r+0x42>
 800a30c:	6820      	ldr	r0, [r4, #0]
 800a30e:	1821      	adds	r1, r4, r0
 800a310:	428b      	cmp	r3, r1
 800a312:	bf01      	itttt	eq
 800a314:	6819      	ldreq	r1, [r3, #0]
 800a316:	685b      	ldreq	r3, [r3, #4]
 800a318:	1809      	addeq	r1, r1, r0
 800a31a:	6021      	streq	r1, [r4, #0]
 800a31c:	e7ed      	b.n	800a2fa <_free_r+0x1e>
 800a31e:	461a      	mov	r2, r3
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	b10b      	cbz	r3, 800a328 <_free_r+0x4c>
 800a324:	42a3      	cmp	r3, r4
 800a326:	d9fa      	bls.n	800a31e <_free_r+0x42>
 800a328:	6811      	ldr	r1, [r2, #0]
 800a32a:	1850      	adds	r0, r2, r1
 800a32c:	42a0      	cmp	r0, r4
 800a32e:	d10b      	bne.n	800a348 <_free_r+0x6c>
 800a330:	6820      	ldr	r0, [r4, #0]
 800a332:	4401      	add	r1, r0
 800a334:	1850      	adds	r0, r2, r1
 800a336:	4283      	cmp	r3, r0
 800a338:	6011      	str	r1, [r2, #0]
 800a33a:	d1e0      	bne.n	800a2fe <_free_r+0x22>
 800a33c:	6818      	ldr	r0, [r3, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	6053      	str	r3, [r2, #4]
 800a342:	4408      	add	r0, r1
 800a344:	6010      	str	r0, [r2, #0]
 800a346:	e7da      	b.n	800a2fe <_free_r+0x22>
 800a348:	d902      	bls.n	800a350 <_free_r+0x74>
 800a34a:	230c      	movs	r3, #12
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	e7d6      	b.n	800a2fe <_free_r+0x22>
 800a350:	6820      	ldr	r0, [r4, #0]
 800a352:	1821      	adds	r1, r4, r0
 800a354:	428b      	cmp	r3, r1
 800a356:	bf04      	itt	eq
 800a358:	6819      	ldreq	r1, [r3, #0]
 800a35a:	685b      	ldreq	r3, [r3, #4]
 800a35c:	6063      	str	r3, [r4, #4]
 800a35e:	bf04      	itt	eq
 800a360:	1809      	addeq	r1, r1, r0
 800a362:	6021      	streq	r1, [r4, #0]
 800a364:	6054      	str	r4, [r2, #4]
 800a366:	e7ca      	b.n	800a2fe <_free_r+0x22>
 800a368:	bd38      	pop	{r3, r4, r5, pc}
 800a36a:	bf00      	nop
 800a36c:	2400050c 	.word	0x2400050c

0800a370 <malloc>:
 800a370:	4b02      	ldr	r3, [pc, #8]	@ (800a37c <malloc+0xc>)
 800a372:	4601      	mov	r1, r0
 800a374:	6818      	ldr	r0, [r3, #0]
 800a376:	f000 b825 	b.w	800a3c4 <_malloc_r>
 800a37a:	bf00      	nop
 800a37c:	2400001c 	.word	0x2400001c

0800a380 <sbrk_aligned>:
 800a380:	b570      	push	{r4, r5, r6, lr}
 800a382:	4e0f      	ldr	r6, [pc, #60]	@ (800a3c0 <sbrk_aligned+0x40>)
 800a384:	460c      	mov	r4, r1
 800a386:	6831      	ldr	r1, [r6, #0]
 800a388:	4605      	mov	r5, r0
 800a38a:	b911      	cbnz	r1, 800a392 <sbrk_aligned+0x12>
 800a38c:	f000 fe92 	bl	800b0b4 <_sbrk_r>
 800a390:	6030      	str	r0, [r6, #0]
 800a392:	4621      	mov	r1, r4
 800a394:	4628      	mov	r0, r5
 800a396:	f000 fe8d 	bl	800b0b4 <_sbrk_r>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	d103      	bne.n	800a3a6 <sbrk_aligned+0x26>
 800a39e:	f04f 34ff 	mov.w	r4, #4294967295
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	bd70      	pop	{r4, r5, r6, pc}
 800a3a6:	1cc4      	adds	r4, r0, #3
 800a3a8:	f024 0403 	bic.w	r4, r4, #3
 800a3ac:	42a0      	cmp	r0, r4
 800a3ae:	d0f8      	beq.n	800a3a2 <sbrk_aligned+0x22>
 800a3b0:	1a21      	subs	r1, r4, r0
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f000 fe7e 	bl	800b0b4 <_sbrk_r>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d1f2      	bne.n	800a3a2 <sbrk_aligned+0x22>
 800a3bc:	e7ef      	b.n	800a39e <sbrk_aligned+0x1e>
 800a3be:	bf00      	nop
 800a3c0:	24000508 	.word	0x24000508

0800a3c4 <_malloc_r>:
 800a3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c8:	1ccd      	adds	r5, r1, #3
 800a3ca:	f025 0503 	bic.w	r5, r5, #3
 800a3ce:	3508      	adds	r5, #8
 800a3d0:	2d0c      	cmp	r5, #12
 800a3d2:	bf38      	it	cc
 800a3d4:	250c      	movcc	r5, #12
 800a3d6:	2d00      	cmp	r5, #0
 800a3d8:	4606      	mov	r6, r0
 800a3da:	db01      	blt.n	800a3e0 <_malloc_r+0x1c>
 800a3dc:	42a9      	cmp	r1, r5
 800a3de:	d904      	bls.n	800a3ea <_malloc_r+0x26>
 800a3e0:	230c      	movs	r3, #12
 800a3e2:	6033      	str	r3, [r6, #0]
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4c0 <_malloc_r+0xfc>
 800a3ee:	f000 f869 	bl	800a4c4 <__malloc_lock>
 800a3f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a3f6:	461c      	mov	r4, r3
 800a3f8:	bb44      	cbnz	r4, 800a44c <_malloc_r+0x88>
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7ff ffbf 	bl	800a380 <sbrk_aligned>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	4604      	mov	r4, r0
 800a406:	d158      	bne.n	800a4ba <_malloc_r+0xf6>
 800a408:	f8d8 4000 	ldr.w	r4, [r8]
 800a40c:	4627      	mov	r7, r4
 800a40e:	2f00      	cmp	r7, #0
 800a410:	d143      	bne.n	800a49a <_malloc_r+0xd6>
 800a412:	2c00      	cmp	r4, #0
 800a414:	d04b      	beq.n	800a4ae <_malloc_r+0xea>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	4639      	mov	r1, r7
 800a41a:	4630      	mov	r0, r6
 800a41c:	eb04 0903 	add.w	r9, r4, r3
 800a420:	f000 fe48 	bl	800b0b4 <_sbrk_r>
 800a424:	4581      	cmp	r9, r0
 800a426:	d142      	bne.n	800a4ae <_malloc_r+0xea>
 800a428:	6821      	ldr	r1, [r4, #0]
 800a42a:	1a6d      	subs	r5, r5, r1
 800a42c:	4629      	mov	r1, r5
 800a42e:	4630      	mov	r0, r6
 800a430:	f7ff ffa6 	bl	800a380 <sbrk_aligned>
 800a434:	3001      	adds	r0, #1
 800a436:	d03a      	beq.n	800a4ae <_malloc_r+0xea>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	442b      	add	r3, r5
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	f8d8 3000 	ldr.w	r3, [r8]
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	bb62      	cbnz	r2, 800a4a0 <_malloc_r+0xdc>
 800a446:	f8c8 7000 	str.w	r7, [r8]
 800a44a:	e00f      	b.n	800a46c <_malloc_r+0xa8>
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	1b52      	subs	r2, r2, r5
 800a450:	d420      	bmi.n	800a494 <_malloc_r+0xd0>
 800a452:	2a0b      	cmp	r2, #11
 800a454:	d917      	bls.n	800a486 <_malloc_r+0xc2>
 800a456:	1961      	adds	r1, r4, r5
 800a458:	42a3      	cmp	r3, r4
 800a45a:	6025      	str	r5, [r4, #0]
 800a45c:	bf18      	it	ne
 800a45e:	6059      	strne	r1, [r3, #4]
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	bf08      	it	eq
 800a464:	f8c8 1000 	streq.w	r1, [r8]
 800a468:	5162      	str	r2, [r4, r5]
 800a46a:	604b      	str	r3, [r1, #4]
 800a46c:	4630      	mov	r0, r6
 800a46e:	f000 f82f 	bl	800a4d0 <__malloc_unlock>
 800a472:	f104 000b 	add.w	r0, r4, #11
 800a476:	1d23      	adds	r3, r4, #4
 800a478:	f020 0007 	bic.w	r0, r0, #7
 800a47c:	1ac2      	subs	r2, r0, r3
 800a47e:	bf1c      	itt	ne
 800a480:	1a1b      	subne	r3, r3, r0
 800a482:	50a3      	strne	r3, [r4, r2]
 800a484:	e7af      	b.n	800a3e6 <_malloc_r+0x22>
 800a486:	6862      	ldr	r2, [r4, #4]
 800a488:	42a3      	cmp	r3, r4
 800a48a:	bf0c      	ite	eq
 800a48c:	f8c8 2000 	streq.w	r2, [r8]
 800a490:	605a      	strne	r2, [r3, #4]
 800a492:	e7eb      	b.n	800a46c <_malloc_r+0xa8>
 800a494:	4623      	mov	r3, r4
 800a496:	6864      	ldr	r4, [r4, #4]
 800a498:	e7ae      	b.n	800a3f8 <_malloc_r+0x34>
 800a49a:	463c      	mov	r4, r7
 800a49c:	687f      	ldr	r7, [r7, #4]
 800a49e:	e7b6      	b.n	800a40e <_malloc_r+0x4a>
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	d1fb      	bne.n	800a4a0 <_malloc_r+0xdc>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	6053      	str	r3, [r2, #4]
 800a4ac:	e7de      	b.n	800a46c <_malloc_r+0xa8>
 800a4ae:	230c      	movs	r3, #12
 800a4b0:	6033      	str	r3, [r6, #0]
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f000 f80c 	bl	800a4d0 <__malloc_unlock>
 800a4b8:	e794      	b.n	800a3e4 <_malloc_r+0x20>
 800a4ba:	6005      	str	r5, [r0, #0]
 800a4bc:	e7d6      	b.n	800a46c <_malloc_r+0xa8>
 800a4be:	bf00      	nop
 800a4c0:	2400050c 	.word	0x2400050c

0800a4c4 <__malloc_lock>:
 800a4c4:	4801      	ldr	r0, [pc, #4]	@ (800a4cc <__malloc_lock+0x8>)
 800a4c6:	f7ff b910 	b.w	80096ea <__retarget_lock_acquire_recursive>
 800a4ca:	bf00      	nop
 800a4cc:	24000504 	.word	0x24000504

0800a4d0 <__malloc_unlock>:
 800a4d0:	4801      	ldr	r0, [pc, #4]	@ (800a4d8 <__malloc_unlock+0x8>)
 800a4d2:	f7ff b90b 	b.w	80096ec <__retarget_lock_release_recursive>
 800a4d6:	bf00      	nop
 800a4d8:	24000504 	.word	0x24000504

0800a4dc <_Balloc>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	69c6      	ldr	r6, [r0, #28]
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	460d      	mov	r5, r1
 800a4e4:	b976      	cbnz	r6, 800a504 <_Balloc+0x28>
 800a4e6:	2010      	movs	r0, #16
 800a4e8:	f7ff ff42 	bl	800a370 <malloc>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	61e0      	str	r0, [r4, #28]
 800a4f0:	b920      	cbnz	r0, 800a4fc <_Balloc+0x20>
 800a4f2:	4b18      	ldr	r3, [pc, #96]	@ (800a554 <_Balloc+0x78>)
 800a4f4:	4818      	ldr	r0, [pc, #96]	@ (800a558 <_Balloc+0x7c>)
 800a4f6:	216b      	movs	r1, #107	@ 0x6b
 800a4f8:	f000 fdec 	bl	800b0d4 <__assert_func>
 800a4fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a500:	6006      	str	r6, [r0, #0]
 800a502:	60c6      	str	r6, [r0, #12]
 800a504:	69e6      	ldr	r6, [r4, #28]
 800a506:	68f3      	ldr	r3, [r6, #12]
 800a508:	b183      	cbz	r3, 800a52c <_Balloc+0x50>
 800a50a:	69e3      	ldr	r3, [r4, #28]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a512:	b9b8      	cbnz	r0, 800a544 <_Balloc+0x68>
 800a514:	2101      	movs	r1, #1
 800a516:	fa01 f605 	lsl.w	r6, r1, r5
 800a51a:	1d72      	adds	r2, r6, #5
 800a51c:	0092      	lsls	r2, r2, #2
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 fdf6 	bl	800b110 <_calloc_r>
 800a524:	b160      	cbz	r0, 800a540 <_Balloc+0x64>
 800a526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a52a:	e00e      	b.n	800a54a <_Balloc+0x6e>
 800a52c:	2221      	movs	r2, #33	@ 0x21
 800a52e:	2104      	movs	r1, #4
 800a530:	4620      	mov	r0, r4
 800a532:	f000 fded 	bl	800b110 <_calloc_r>
 800a536:	69e3      	ldr	r3, [r4, #28]
 800a538:	60f0      	str	r0, [r6, #12]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1e4      	bne.n	800a50a <_Balloc+0x2e>
 800a540:	2000      	movs	r0, #0
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	6802      	ldr	r2, [r0, #0]
 800a546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a54a:	2300      	movs	r3, #0
 800a54c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a550:	e7f7      	b.n	800a542 <_Balloc+0x66>
 800a552:	bf00      	nop
 800a554:	0800b5bd 	.word	0x0800b5bd
 800a558:	0800b63d 	.word	0x0800b63d

0800a55c <_Bfree>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	69c6      	ldr	r6, [r0, #28]
 800a560:	4605      	mov	r5, r0
 800a562:	460c      	mov	r4, r1
 800a564:	b976      	cbnz	r6, 800a584 <_Bfree+0x28>
 800a566:	2010      	movs	r0, #16
 800a568:	f7ff ff02 	bl	800a370 <malloc>
 800a56c:	4602      	mov	r2, r0
 800a56e:	61e8      	str	r0, [r5, #28]
 800a570:	b920      	cbnz	r0, 800a57c <_Bfree+0x20>
 800a572:	4b09      	ldr	r3, [pc, #36]	@ (800a598 <_Bfree+0x3c>)
 800a574:	4809      	ldr	r0, [pc, #36]	@ (800a59c <_Bfree+0x40>)
 800a576:	218f      	movs	r1, #143	@ 0x8f
 800a578:	f000 fdac 	bl	800b0d4 <__assert_func>
 800a57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a580:	6006      	str	r6, [r0, #0]
 800a582:	60c6      	str	r6, [r0, #12]
 800a584:	b13c      	cbz	r4, 800a596 <_Bfree+0x3a>
 800a586:	69eb      	ldr	r3, [r5, #28]
 800a588:	6862      	ldr	r2, [r4, #4]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a590:	6021      	str	r1, [r4, #0]
 800a592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a596:	bd70      	pop	{r4, r5, r6, pc}
 800a598:	0800b5bd 	.word	0x0800b5bd
 800a59c:	0800b63d 	.word	0x0800b63d

0800a5a0 <__multadd>:
 800a5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a4:	690d      	ldr	r5, [r1, #16]
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	461e      	mov	r6, r3
 800a5ac:	f101 0c14 	add.w	ip, r1, #20
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a5b6:	b299      	uxth	r1, r3
 800a5b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a5bc:	0c1e      	lsrs	r6, r3, #16
 800a5be:	0c0b      	lsrs	r3, r1, #16
 800a5c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a5c4:	b289      	uxth	r1, r1
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5cc:	4285      	cmp	r5, r0
 800a5ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a5d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5d6:	dcec      	bgt.n	800a5b2 <__multadd+0x12>
 800a5d8:	b30e      	cbz	r6, 800a61e <__multadd+0x7e>
 800a5da:	68a3      	ldr	r3, [r4, #8]
 800a5dc:	42ab      	cmp	r3, r5
 800a5de:	dc19      	bgt.n	800a614 <__multadd+0x74>
 800a5e0:	6861      	ldr	r1, [r4, #4]
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	3101      	adds	r1, #1
 800a5e6:	f7ff ff79 	bl	800a4dc <_Balloc>
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	b928      	cbnz	r0, 800a5fa <__multadd+0x5a>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a624 <__multadd+0x84>)
 800a5f2:	480d      	ldr	r0, [pc, #52]	@ (800a628 <__multadd+0x88>)
 800a5f4:	21ba      	movs	r1, #186	@ 0xba
 800a5f6:	f000 fd6d 	bl	800b0d4 <__assert_func>
 800a5fa:	6922      	ldr	r2, [r4, #16]
 800a5fc:	3202      	adds	r2, #2
 800a5fe:	f104 010c 	add.w	r1, r4, #12
 800a602:	0092      	lsls	r2, r2, #2
 800a604:	300c      	adds	r0, #12
 800a606:	f7ff f872 	bl	80096ee <memcpy>
 800a60a:	4621      	mov	r1, r4
 800a60c:	4638      	mov	r0, r7
 800a60e:	f7ff ffa5 	bl	800a55c <_Bfree>
 800a612:	4644      	mov	r4, r8
 800a614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a618:	3501      	adds	r5, #1
 800a61a:	615e      	str	r6, [r3, #20]
 800a61c:	6125      	str	r5, [r4, #16]
 800a61e:	4620      	mov	r0, r4
 800a620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a624:	0800b62c 	.word	0x0800b62c
 800a628:	0800b63d 	.word	0x0800b63d

0800a62c <__hi0bits>:
 800a62c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a630:	4603      	mov	r3, r0
 800a632:	bf36      	itet	cc
 800a634:	0403      	lslcc	r3, r0, #16
 800a636:	2000      	movcs	r0, #0
 800a638:	2010      	movcc	r0, #16
 800a63a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a63e:	bf3c      	itt	cc
 800a640:	021b      	lslcc	r3, r3, #8
 800a642:	3008      	addcc	r0, #8
 800a644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a648:	bf3c      	itt	cc
 800a64a:	011b      	lslcc	r3, r3, #4
 800a64c:	3004      	addcc	r0, #4
 800a64e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a652:	bf3c      	itt	cc
 800a654:	009b      	lslcc	r3, r3, #2
 800a656:	3002      	addcc	r0, #2
 800a658:	2b00      	cmp	r3, #0
 800a65a:	db05      	blt.n	800a668 <__hi0bits+0x3c>
 800a65c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a660:	f100 0001 	add.w	r0, r0, #1
 800a664:	bf08      	it	eq
 800a666:	2020      	moveq	r0, #32
 800a668:	4770      	bx	lr

0800a66a <__lo0bits>:
 800a66a:	6803      	ldr	r3, [r0, #0]
 800a66c:	4602      	mov	r2, r0
 800a66e:	f013 0007 	ands.w	r0, r3, #7
 800a672:	d00b      	beq.n	800a68c <__lo0bits+0x22>
 800a674:	07d9      	lsls	r1, r3, #31
 800a676:	d421      	bmi.n	800a6bc <__lo0bits+0x52>
 800a678:	0798      	lsls	r0, r3, #30
 800a67a:	bf49      	itett	mi
 800a67c:	085b      	lsrmi	r3, r3, #1
 800a67e:	089b      	lsrpl	r3, r3, #2
 800a680:	2001      	movmi	r0, #1
 800a682:	6013      	strmi	r3, [r2, #0]
 800a684:	bf5c      	itt	pl
 800a686:	6013      	strpl	r3, [r2, #0]
 800a688:	2002      	movpl	r0, #2
 800a68a:	4770      	bx	lr
 800a68c:	b299      	uxth	r1, r3
 800a68e:	b909      	cbnz	r1, 800a694 <__lo0bits+0x2a>
 800a690:	0c1b      	lsrs	r3, r3, #16
 800a692:	2010      	movs	r0, #16
 800a694:	b2d9      	uxtb	r1, r3
 800a696:	b909      	cbnz	r1, 800a69c <__lo0bits+0x32>
 800a698:	3008      	adds	r0, #8
 800a69a:	0a1b      	lsrs	r3, r3, #8
 800a69c:	0719      	lsls	r1, r3, #28
 800a69e:	bf04      	itt	eq
 800a6a0:	091b      	lsreq	r3, r3, #4
 800a6a2:	3004      	addeq	r0, #4
 800a6a4:	0799      	lsls	r1, r3, #30
 800a6a6:	bf04      	itt	eq
 800a6a8:	089b      	lsreq	r3, r3, #2
 800a6aa:	3002      	addeq	r0, #2
 800a6ac:	07d9      	lsls	r1, r3, #31
 800a6ae:	d403      	bmi.n	800a6b8 <__lo0bits+0x4e>
 800a6b0:	085b      	lsrs	r3, r3, #1
 800a6b2:	f100 0001 	add.w	r0, r0, #1
 800a6b6:	d003      	beq.n	800a6c0 <__lo0bits+0x56>
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	4770      	bx	lr
 800a6bc:	2000      	movs	r0, #0
 800a6be:	4770      	bx	lr
 800a6c0:	2020      	movs	r0, #32
 800a6c2:	4770      	bx	lr

0800a6c4 <__i2b>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	f7ff ff07 	bl	800a4dc <_Balloc>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	b928      	cbnz	r0, 800a6de <__i2b+0x1a>
 800a6d2:	4b05      	ldr	r3, [pc, #20]	@ (800a6e8 <__i2b+0x24>)
 800a6d4:	4805      	ldr	r0, [pc, #20]	@ (800a6ec <__i2b+0x28>)
 800a6d6:	f240 1145 	movw	r1, #325	@ 0x145
 800a6da:	f000 fcfb 	bl	800b0d4 <__assert_func>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	6144      	str	r4, [r0, #20]
 800a6e2:	6103      	str	r3, [r0, #16]
 800a6e4:	bd10      	pop	{r4, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0800b62c 	.word	0x0800b62c
 800a6ec:	0800b63d 	.word	0x0800b63d

0800a6f0 <__multiply>:
 800a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	4617      	mov	r7, r2
 800a6f6:	690a      	ldr	r2, [r1, #16]
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	bfa8      	it	ge
 800a6fe:	463b      	movge	r3, r7
 800a700:	4689      	mov	r9, r1
 800a702:	bfa4      	itt	ge
 800a704:	460f      	movge	r7, r1
 800a706:	4699      	movge	r9, r3
 800a708:	693d      	ldr	r5, [r7, #16]
 800a70a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	eb05 060a 	add.w	r6, r5, sl
 800a716:	42b3      	cmp	r3, r6
 800a718:	b085      	sub	sp, #20
 800a71a:	bfb8      	it	lt
 800a71c:	3101      	addlt	r1, #1
 800a71e:	f7ff fedd 	bl	800a4dc <_Balloc>
 800a722:	b930      	cbnz	r0, 800a732 <__multiply+0x42>
 800a724:	4602      	mov	r2, r0
 800a726:	4b41      	ldr	r3, [pc, #260]	@ (800a82c <__multiply+0x13c>)
 800a728:	4841      	ldr	r0, [pc, #260]	@ (800a830 <__multiply+0x140>)
 800a72a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a72e:	f000 fcd1 	bl	800b0d4 <__assert_func>
 800a732:	f100 0414 	add.w	r4, r0, #20
 800a736:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a73a:	4623      	mov	r3, r4
 800a73c:	2200      	movs	r2, #0
 800a73e:	4573      	cmp	r3, lr
 800a740:	d320      	bcc.n	800a784 <__multiply+0x94>
 800a742:	f107 0814 	add.w	r8, r7, #20
 800a746:	f109 0114 	add.w	r1, r9, #20
 800a74a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a74e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a752:	9302      	str	r3, [sp, #8]
 800a754:	1beb      	subs	r3, r5, r7
 800a756:	3b15      	subs	r3, #21
 800a758:	f023 0303 	bic.w	r3, r3, #3
 800a75c:	3304      	adds	r3, #4
 800a75e:	3715      	adds	r7, #21
 800a760:	42bd      	cmp	r5, r7
 800a762:	bf38      	it	cc
 800a764:	2304      	movcc	r3, #4
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	9b02      	ldr	r3, [sp, #8]
 800a76a:	9103      	str	r1, [sp, #12]
 800a76c:	428b      	cmp	r3, r1
 800a76e:	d80c      	bhi.n	800a78a <__multiply+0x9a>
 800a770:	2e00      	cmp	r6, #0
 800a772:	dd03      	ble.n	800a77c <__multiply+0x8c>
 800a774:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d055      	beq.n	800a828 <__multiply+0x138>
 800a77c:	6106      	str	r6, [r0, #16]
 800a77e:	b005      	add	sp, #20
 800a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a784:	f843 2b04 	str.w	r2, [r3], #4
 800a788:	e7d9      	b.n	800a73e <__multiply+0x4e>
 800a78a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a78e:	f1ba 0f00 	cmp.w	sl, #0
 800a792:	d01f      	beq.n	800a7d4 <__multiply+0xe4>
 800a794:	46c4      	mov	ip, r8
 800a796:	46a1      	mov	r9, r4
 800a798:	2700      	movs	r7, #0
 800a79a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a79e:	f8d9 3000 	ldr.w	r3, [r9]
 800a7a2:	fa1f fb82 	uxth.w	fp, r2
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7ac:	443b      	add	r3, r7
 800a7ae:	f8d9 7000 	ldr.w	r7, [r9]
 800a7b2:	0c12      	lsrs	r2, r2, #16
 800a7b4:	0c3f      	lsrs	r7, r7, #16
 800a7b6:	fb0a 7202 	mla	r2, sl, r2, r7
 800a7ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7c4:	4565      	cmp	r5, ip
 800a7c6:	f849 3b04 	str.w	r3, [r9], #4
 800a7ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a7ce:	d8e4      	bhi.n	800a79a <__multiply+0xaa>
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	50e7      	str	r7, [r4, r3]
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a7da:	3104      	adds	r1, #4
 800a7dc:	f1b9 0f00 	cmp.w	r9, #0
 800a7e0:	d020      	beq.n	800a824 <__multiply+0x134>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	4647      	mov	r7, r8
 800a7e6:	46a4      	mov	ip, r4
 800a7e8:	f04f 0a00 	mov.w	sl, #0
 800a7ec:	f8b7 b000 	ldrh.w	fp, [r7]
 800a7f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a7f4:	fb09 220b 	mla	r2, r9, fp, r2
 800a7f8:	4452      	add	r2, sl
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a800:	f84c 3b04 	str.w	r3, [ip], #4
 800a804:	f857 3b04 	ldr.w	r3, [r7], #4
 800a808:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a80c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a810:	fb09 330a 	mla	r3, r9, sl, r3
 800a814:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a818:	42bd      	cmp	r5, r7
 800a81a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a81e:	d8e5      	bhi.n	800a7ec <__multiply+0xfc>
 800a820:	9a01      	ldr	r2, [sp, #4]
 800a822:	50a3      	str	r3, [r4, r2]
 800a824:	3404      	adds	r4, #4
 800a826:	e79f      	b.n	800a768 <__multiply+0x78>
 800a828:	3e01      	subs	r6, #1
 800a82a:	e7a1      	b.n	800a770 <__multiply+0x80>
 800a82c:	0800b62c 	.word	0x0800b62c
 800a830:	0800b63d 	.word	0x0800b63d

0800a834 <__pow5mult>:
 800a834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a838:	4615      	mov	r5, r2
 800a83a:	f012 0203 	ands.w	r2, r2, #3
 800a83e:	4607      	mov	r7, r0
 800a840:	460e      	mov	r6, r1
 800a842:	d007      	beq.n	800a854 <__pow5mult+0x20>
 800a844:	4c25      	ldr	r4, [pc, #148]	@ (800a8dc <__pow5mult+0xa8>)
 800a846:	3a01      	subs	r2, #1
 800a848:	2300      	movs	r3, #0
 800a84a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a84e:	f7ff fea7 	bl	800a5a0 <__multadd>
 800a852:	4606      	mov	r6, r0
 800a854:	10ad      	asrs	r5, r5, #2
 800a856:	d03d      	beq.n	800a8d4 <__pow5mult+0xa0>
 800a858:	69fc      	ldr	r4, [r7, #28]
 800a85a:	b97c      	cbnz	r4, 800a87c <__pow5mult+0x48>
 800a85c:	2010      	movs	r0, #16
 800a85e:	f7ff fd87 	bl	800a370 <malloc>
 800a862:	4602      	mov	r2, r0
 800a864:	61f8      	str	r0, [r7, #28]
 800a866:	b928      	cbnz	r0, 800a874 <__pow5mult+0x40>
 800a868:	4b1d      	ldr	r3, [pc, #116]	@ (800a8e0 <__pow5mult+0xac>)
 800a86a:	481e      	ldr	r0, [pc, #120]	@ (800a8e4 <__pow5mult+0xb0>)
 800a86c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a870:	f000 fc30 	bl	800b0d4 <__assert_func>
 800a874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a878:	6004      	str	r4, [r0, #0]
 800a87a:	60c4      	str	r4, [r0, #12]
 800a87c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a884:	b94c      	cbnz	r4, 800a89a <__pow5mult+0x66>
 800a886:	f240 2171 	movw	r1, #625	@ 0x271
 800a88a:	4638      	mov	r0, r7
 800a88c:	f7ff ff1a 	bl	800a6c4 <__i2b>
 800a890:	2300      	movs	r3, #0
 800a892:	f8c8 0008 	str.w	r0, [r8, #8]
 800a896:	4604      	mov	r4, r0
 800a898:	6003      	str	r3, [r0, #0]
 800a89a:	f04f 0900 	mov.w	r9, #0
 800a89e:	07eb      	lsls	r3, r5, #31
 800a8a0:	d50a      	bpl.n	800a8b8 <__pow5mult+0x84>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f7ff ff22 	bl	800a6f0 <__multiply>
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	4680      	mov	r8, r0
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff fe53 	bl	800a55c <_Bfree>
 800a8b6:	4646      	mov	r6, r8
 800a8b8:	106d      	asrs	r5, r5, #1
 800a8ba:	d00b      	beq.n	800a8d4 <__pow5mult+0xa0>
 800a8bc:	6820      	ldr	r0, [r4, #0]
 800a8be:	b938      	cbnz	r0, 800a8d0 <__pow5mult+0x9c>
 800a8c0:	4622      	mov	r2, r4
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	f7ff ff13 	bl	800a6f0 <__multiply>
 800a8ca:	6020      	str	r0, [r4, #0]
 800a8cc:	f8c0 9000 	str.w	r9, [r0]
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	e7e4      	b.n	800a89e <__pow5mult+0x6a>
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8da:	bf00      	nop
 800a8dc:	0800b6f0 	.word	0x0800b6f0
 800a8e0:	0800b5bd 	.word	0x0800b5bd
 800a8e4:	0800b63d 	.word	0x0800b63d

0800a8e8 <__lshift>:
 800a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	6849      	ldr	r1, [r1, #4]
 800a8f0:	6923      	ldr	r3, [r4, #16]
 800a8f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8f6:	68a3      	ldr	r3, [r4, #8]
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	4691      	mov	r9, r2
 800a8fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a900:	f108 0601 	add.w	r6, r8, #1
 800a904:	42b3      	cmp	r3, r6
 800a906:	db0b      	blt.n	800a920 <__lshift+0x38>
 800a908:	4638      	mov	r0, r7
 800a90a:	f7ff fde7 	bl	800a4dc <_Balloc>
 800a90e:	4605      	mov	r5, r0
 800a910:	b948      	cbnz	r0, 800a926 <__lshift+0x3e>
 800a912:	4602      	mov	r2, r0
 800a914:	4b28      	ldr	r3, [pc, #160]	@ (800a9b8 <__lshift+0xd0>)
 800a916:	4829      	ldr	r0, [pc, #164]	@ (800a9bc <__lshift+0xd4>)
 800a918:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a91c:	f000 fbda 	bl	800b0d4 <__assert_func>
 800a920:	3101      	adds	r1, #1
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	e7ee      	b.n	800a904 <__lshift+0x1c>
 800a926:	2300      	movs	r3, #0
 800a928:	f100 0114 	add.w	r1, r0, #20
 800a92c:	f100 0210 	add.w	r2, r0, #16
 800a930:	4618      	mov	r0, r3
 800a932:	4553      	cmp	r3, sl
 800a934:	db33      	blt.n	800a99e <__lshift+0xb6>
 800a936:	6920      	ldr	r0, [r4, #16]
 800a938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a93c:	f104 0314 	add.w	r3, r4, #20
 800a940:	f019 091f 	ands.w	r9, r9, #31
 800a944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a948:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a94c:	d02b      	beq.n	800a9a6 <__lshift+0xbe>
 800a94e:	f1c9 0e20 	rsb	lr, r9, #32
 800a952:	468a      	mov	sl, r1
 800a954:	2200      	movs	r2, #0
 800a956:	6818      	ldr	r0, [r3, #0]
 800a958:	fa00 f009 	lsl.w	r0, r0, r9
 800a95c:	4310      	orrs	r0, r2
 800a95e:	f84a 0b04 	str.w	r0, [sl], #4
 800a962:	f853 2b04 	ldr.w	r2, [r3], #4
 800a966:	459c      	cmp	ip, r3
 800a968:	fa22 f20e 	lsr.w	r2, r2, lr
 800a96c:	d8f3      	bhi.n	800a956 <__lshift+0x6e>
 800a96e:	ebac 0304 	sub.w	r3, ip, r4
 800a972:	3b15      	subs	r3, #21
 800a974:	f023 0303 	bic.w	r3, r3, #3
 800a978:	3304      	adds	r3, #4
 800a97a:	f104 0015 	add.w	r0, r4, #21
 800a97e:	4560      	cmp	r0, ip
 800a980:	bf88      	it	hi
 800a982:	2304      	movhi	r3, #4
 800a984:	50ca      	str	r2, [r1, r3]
 800a986:	b10a      	cbz	r2, 800a98c <__lshift+0xa4>
 800a988:	f108 0602 	add.w	r6, r8, #2
 800a98c:	3e01      	subs	r6, #1
 800a98e:	4638      	mov	r0, r7
 800a990:	612e      	str	r6, [r5, #16]
 800a992:	4621      	mov	r1, r4
 800a994:	f7ff fde2 	bl	800a55c <_Bfree>
 800a998:	4628      	mov	r0, r5
 800a99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a99e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	e7c5      	b.n	800a932 <__lshift+0x4a>
 800a9a6:	3904      	subs	r1, #4
 800a9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9b0:	459c      	cmp	ip, r3
 800a9b2:	d8f9      	bhi.n	800a9a8 <__lshift+0xc0>
 800a9b4:	e7ea      	b.n	800a98c <__lshift+0xa4>
 800a9b6:	bf00      	nop
 800a9b8:	0800b62c 	.word	0x0800b62c
 800a9bc:	0800b63d 	.word	0x0800b63d

0800a9c0 <__mcmp>:
 800a9c0:	690a      	ldr	r2, [r1, #16]
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	6900      	ldr	r0, [r0, #16]
 800a9c6:	1a80      	subs	r0, r0, r2
 800a9c8:	b530      	push	{r4, r5, lr}
 800a9ca:	d10e      	bne.n	800a9ea <__mcmp+0x2a>
 800a9cc:	3314      	adds	r3, #20
 800a9ce:	3114      	adds	r1, #20
 800a9d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a9d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a9d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a9dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a9e0:	4295      	cmp	r5, r2
 800a9e2:	d003      	beq.n	800a9ec <__mcmp+0x2c>
 800a9e4:	d205      	bcs.n	800a9f2 <__mcmp+0x32>
 800a9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ea:	bd30      	pop	{r4, r5, pc}
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d3f3      	bcc.n	800a9d8 <__mcmp+0x18>
 800a9f0:	e7fb      	b.n	800a9ea <__mcmp+0x2a>
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	e7f9      	b.n	800a9ea <__mcmp+0x2a>
	...

0800a9f8 <__mdiff>:
 800a9f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	4689      	mov	r9, r1
 800a9fe:	4606      	mov	r6, r0
 800aa00:	4611      	mov	r1, r2
 800aa02:	4648      	mov	r0, r9
 800aa04:	4614      	mov	r4, r2
 800aa06:	f7ff ffdb 	bl	800a9c0 <__mcmp>
 800aa0a:	1e05      	subs	r5, r0, #0
 800aa0c:	d112      	bne.n	800aa34 <__mdiff+0x3c>
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4630      	mov	r0, r6
 800aa12:	f7ff fd63 	bl	800a4dc <_Balloc>
 800aa16:	4602      	mov	r2, r0
 800aa18:	b928      	cbnz	r0, 800aa26 <__mdiff+0x2e>
 800aa1a:	4b3f      	ldr	r3, [pc, #252]	@ (800ab18 <__mdiff+0x120>)
 800aa1c:	f240 2137 	movw	r1, #567	@ 0x237
 800aa20:	483e      	ldr	r0, [pc, #248]	@ (800ab1c <__mdiff+0x124>)
 800aa22:	f000 fb57 	bl	800b0d4 <__assert_func>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	b003      	add	sp, #12
 800aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa34:	bfbc      	itt	lt
 800aa36:	464b      	movlt	r3, r9
 800aa38:	46a1      	movlt	r9, r4
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa40:	bfba      	itte	lt
 800aa42:	461c      	movlt	r4, r3
 800aa44:	2501      	movlt	r5, #1
 800aa46:	2500      	movge	r5, #0
 800aa48:	f7ff fd48 	bl	800a4dc <_Balloc>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	b918      	cbnz	r0, 800aa58 <__mdiff+0x60>
 800aa50:	4b31      	ldr	r3, [pc, #196]	@ (800ab18 <__mdiff+0x120>)
 800aa52:	f240 2145 	movw	r1, #581	@ 0x245
 800aa56:	e7e3      	b.n	800aa20 <__mdiff+0x28>
 800aa58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa5c:	6926      	ldr	r6, [r4, #16]
 800aa5e:	60c5      	str	r5, [r0, #12]
 800aa60:	f109 0310 	add.w	r3, r9, #16
 800aa64:	f109 0514 	add.w	r5, r9, #20
 800aa68:	f104 0e14 	add.w	lr, r4, #20
 800aa6c:	f100 0b14 	add.w	fp, r0, #20
 800aa70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	46d9      	mov	r9, fp
 800aa7c:	f04f 0c00 	mov.w	ip, #0
 800aa80:	9b01      	ldr	r3, [sp, #4]
 800aa82:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa86:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa8a:	9301      	str	r3, [sp, #4]
 800aa8c:	fa1f f38a 	uxth.w	r3, sl
 800aa90:	4619      	mov	r1, r3
 800aa92:	b283      	uxth	r3, r0
 800aa94:	1acb      	subs	r3, r1, r3
 800aa96:	0c00      	lsrs	r0, r0, #16
 800aa98:	4463      	add	r3, ip
 800aa9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aaa8:	4576      	cmp	r6, lr
 800aaaa:	f849 3b04 	str.w	r3, [r9], #4
 800aaae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aab2:	d8e5      	bhi.n	800aa80 <__mdiff+0x88>
 800aab4:	1b33      	subs	r3, r6, r4
 800aab6:	3b15      	subs	r3, #21
 800aab8:	f023 0303 	bic.w	r3, r3, #3
 800aabc:	3415      	adds	r4, #21
 800aabe:	3304      	adds	r3, #4
 800aac0:	42a6      	cmp	r6, r4
 800aac2:	bf38      	it	cc
 800aac4:	2304      	movcc	r3, #4
 800aac6:	441d      	add	r5, r3
 800aac8:	445b      	add	r3, fp
 800aaca:	461e      	mov	r6, r3
 800aacc:	462c      	mov	r4, r5
 800aace:	4544      	cmp	r4, r8
 800aad0:	d30e      	bcc.n	800aaf0 <__mdiff+0xf8>
 800aad2:	f108 0103 	add.w	r1, r8, #3
 800aad6:	1b49      	subs	r1, r1, r5
 800aad8:	f021 0103 	bic.w	r1, r1, #3
 800aadc:	3d03      	subs	r5, #3
 800aade:	45a8      	cmp	r8, r5
 800aae0:	bf38      	it	cc
 800aae2:	2100      	movcc	r1, #0
 800aae4:	440b      	add	r3, r1
 800aae6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aaea:	b191      	cbz	r1, 800ab12 <__mdiff+0x11a>
 800aaec:	6117      	str	r7, [r2, #16]
 800aaee:	e79d      	b.n	800aa2c <__mdiff+0x34>
 800aaf0:	f854 1b04 	ldr.w	r1, [r4], #4
 800aaf4:	46e6      	mov	lr, ip
 800aaf6:	0c08      	lsrs	r0, r1, #16
 800aaf8:	fa1c fc81 	uxtah	ip, ip, r1
 800aafc:	4471      	add	r1, lr
 800aafe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab02:	b289      	uxth	r1, r1
 800ab04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab08:	f846 1b04 	str.w	r1, [r6], #4
 800ab0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab10:	e7dd      	b.n	800aace <__mdiff+0xd6>
 800ab12:	3f01      	subs	r7, #1
 800ab14:	e7e7      	b.n	800aae6 <__mdiff+0xee>
 800ab16:	bf00      	nop
 800ab18:	0800b62c 	.word	0x0800b62c
 800ab1c:	0800b63d 	.word	0x0800b63d

0800ab20 <__d2b>:
 800ab20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab24:	460f      	mov	r7, r1
 800ab26:	2101      	movs	r1, #1
 800ab28:	ec59 8b10 	vmov	r8, r9, d0
 800ab2c:	4616      	mov	r6, r2
 800ab2e:	f7ff fcd5 	bl	800a4dc <_Balloc>
 800ab32:	4604      	mov	r4, r0
 800ab34:	b930      	cbnz	r0, 800ab44 <__d2b+0x24>
 800ab36:	4602      	mov	r2, r0
 800ab38:	4b23      	ldr	r3, [pc, #140]	@ (800abc8 <__d2b+0xa8>)
 800ab3a:	4824      	ldr	r0, [pc, #144]	@ (800abcc <__d2b+0xac>)
 800ab3c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab40:	f000 fac8 	bl	800b0d4 <__assert_func>
 800ab44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab4c:	b10d      	cbz	r5, 800ab52 <__d2b+0x32>
 800ab4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	f1b8 0300 	subs.w	r3, r8, #0
 800ab58:	d023      	beq.n	800aba2 <__d2b+0x82>
 800ab5a:	4668      	mov	r0, sp
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	f7ff fd84 	bl	800a66a <__lo0bits>
 800ab62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab66:	b1d0      	cbz	r0, 800ab9e <__d2b+0x7e>
 800ab68:	f1c0 0320 	rsb	r3, r0, #32
 800ab6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab70:	430b      	orrs	r3, r1
 800ab72:	40c2      	lsrs	r2, r0
 800ab74:	6163      	str	r3, [r4, #20]
 800ab76:	9201      	str	r2, [sp, #4]
 800ab78:	9b01      	ldr	r3, [sp, #4]
 800ab7a:	61a3      	str	r3, [r4, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bf0c      	ite	eq
 800ab80:	2201      	moveq	r2, #1
 800ab82:	2202      	movne	r2, #2
 800ab84:	6122      	str	r2, [r4, #16]
 800ab86:	b1a5      	cbz	r5, 800abb2 <__d2b+0x92>
 800ab88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab8c:	4405      	add	r5, r0
 800ab8e:	603d      	str	r5, [r7, #0]
 800ab90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab94:	6030      	str	r0, [r6, #0]
 800ab96:	4620      	mov	r0, r4
 800ab98:	b003      	add	sp, #12
 800ab9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab9e:	6161      	str	r1, [r4, #20]
 800aba0:	e7ea      	b.n	800ab78 <__d2b+0x58>
 800aba2:	a801      	add	r0, sp, #4
 800aba4:	f7ff fd61 	bl	800a66a <__lo0bits>
 800aba8:	9b01      	ldr	r3, [sp, #4]
 800abaa:	6163      	str	r3, [r4, #20]
 800abac:	3020      	adds	r0, #32
 800abae:	2201      	movs	r2, #1
 800abb0:	e7e8      	b.n	800ab84 <__d2b+0x64>
 800abb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800abba:	6038      	str	r0, [r7, #0]
 800abbc:	6918      	ldr	r0, [r3, #16]
 800abbe:	f7ff fd35 	bl	800a62c <__hi0bits>
 800abc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abc6:	e7e5      	b.n	800ab94 <__d2b+0x74>
 800abc8:	0800b62c 	.word	0x0800b62c
 800abcc:	0800b63d 	.word	0x0800b63d

0800abd0 <__sfputc_r>:
 800abd0:	6893      	ldr	r3, [r2, #8]
 800abd2:	3b01      	subs	r3, #1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	b410      	push	{r4}
 800abd8:	6093      	str	r3, [r2, #8]
 800abda:	da08      	bge.n	800abee <__sfputc_r+0x1e>
 800abdc:	6994      	ldr	r4, [r2, #24]
 800abde:	42a3      	cmp	r3, r4
 800abe0:	db01      	blt.n	800abe6 <__sfputc_r+0x16>
 800abe2:	290a      	cmp	r1, #10
 800abe4:	d103      	bne.n	800abee <__sfputc_r+0x1e>
 800abe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abea:	f7fe bc6c 	b.w	80094c6 <__swbuf_r>
 800abee:	6813      	ldr	r3, [r2, #0]
 800abf0:	1c58      	adds	r0, r3, #1
 800abf2:	6010      	str	r0, [r2, #0]
 800abf4:	7019      	strb	r1, [r3, #0]
 800abf6:	4608      	mov	r0, r1
 800abf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <__sfputs_r>:
 800abfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac00:	4606      	mov	r6, r0
 800ac02:	460f      	mov	r7, r1
 800ac04:	4614      	mov	r4, r2
 800ac06:	18d5      	adds	r5, r2, r3
 800ac08:	42ac      	cmp	r4, r5
 800ac0a:	d101      	bne.n	800ac10 <__sfputs_r+0x12>
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e007      	b.n	800ac20 <__sfputs_r+0x22>
 800ac10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac14:	463a      	mov	r2, r7
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff ffda 	bl	800abd0 <__sfputc_r>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	d1f3      	bne.n	800ac08 <__sfputs_r+0xa>
 800ac20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac24 <_vfiprintf_r>:
 800ac24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac28:	460d      	mov	r5, r1
 800ac2a:	b09d      	sub	sp, #116	@ 0x74
 800ac2c:	4614      	mov	r4, r2
 800ac2e:	4698      	mov	r8, r3
 800ac30:	4606      	mov	r6, r0
 800ac32:	b118      	cbz	r0, 800ac3c <_vfiprintf_r+0x18>
 800ac34:	6a03      	ldr	r3, [r0, #32]
 800ac36:	b90b      	cbnz	r3, 800ac3c <_vfiprintf_r+0x18>
 800ac38:	f7fe fb5c 	bl	80092f4 <__sinit>
 800ac3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac3e:	07d9      	lsls	r1, r3, #31
 800ac40:	d405      	bmi.n	800ac4e <_vfiprintf_r+0x2a>
 800ac42:	89ab      	ldrh	r3, [r5, #12]
 800ac44:	059a      	lsls	r2, r3, #22
 800ac46:	d402      	bmi.n	800ac4e <_vfiprintf_r+0x2a>
 800ac48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac4a:	f7fe fd4e 	bl	80096ea <__retarget_lock_acquire_recursive>
 800ac4e:	89ab      	ldrh	r3, [r5, #12]
 800ac50:	071b      	lsls	r3, r3, #28
 800ac52:	d501      	bpl.n	800ac58 <_vfiprintf_r+0x34>
 800ac54:	692b      	ldr	r3, [r5, #16]
 800ac56:	b99b      	cbnz	r3, 800ac80 <_vfiprintf_r+0x5c>
 800ac58:	4629      	mov	r1, r5
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f7fe fc72 	bl	8009544 <__swsetup_r>
 800ac60:	b170      	cbz	r0, 800ac80 <_vfiprintf_r+0x5c>
 800ac62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac64:	07dc      	lsls	r4, r3, #31
 800ac66:	d504      	bpl.n	800ac72 <_vfiprintf_r+0x4e>
 800ac68:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6c:	b01d      	add	sp, #116	@ 0x74
 800ac6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac72:	89ab      	ldrh	r3, [r5, #12]
 800ac74:	0598      	lsls	r0, r3, #22
 800ac76:	d4f7      	bmi.n	800ac68 <_vfiprintf_r+0x44>
 800ac78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac7a:	f7fe fd37 	bl	80096ec <__retarget_lock_release_recursive>
 800ac7e:	e7f3      	b.n	800ac68 <_vfiprintf_r+0x44>
 800ac80:	2300      	movs	r3, #0
 800ac82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac84:	2320      	movs	r3, #32
 800ac86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac8e:	2330      	movs	r3, #48	@ 0x30
 800ac90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ae40 <_vfiprintf_r+0x21c>
 800ac94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac98:	f04f 0901 	mov.w	r9, #1
 800ac9c:	4623      	mov	r3, r4
 800ac9e:	469a      	mov	sl, r3
 800aca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aca4:	b10a      	cbz	r2, 800acaa <_vfiprintf_r+0x86>
 800aca6:	2a25      	cmp	r2, #37	@ 0x25
 800aca8:	d1f9      	bne.n	800ac9e <_vfiprintf_r+0x7a>
 800acaa:	ebba 0b04 	subs.w	fp, sl, r4
 800acae:	d00b      	beq.n	800acc8 <_vfiprintf_r+0xa4>
 800acb0:	465b      	mov	r3, fp
 800acb2:	4622      	mov	r2, r4
 800acb4:	4629      	mov	r1, r5
 800acb6:	4630      	mov	r0, r6
 800acb8:	f7ff ffa1 	bl	800abfe <__sfputs_r>
 800acbc:	3001      	adds	r0, #1
 800acbe:	f000 80a7 	beq.w	800ae10 <_vfiprintf_r+0x1ec>
 800acc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acc4:	445a      	add	r2, fp
 800acc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800acc8:	f89a 3000 	ldrb.w	r3, [sl]
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 809f 	beq.w	800ae10 <_vfiprintf_r+0x1ec>
 800acd2:	2300      	movs	r3, #0
 800acd4:	f04f 32ff 	mov.w	r2, #4294967295
 800acd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acdc:	f10a 0a01 	add.w	sl, sl, #1
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	9307      	str	r3, [sp, #28]
 800ace4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ace8:	931a      	str	r3, [sp, #104]	@ 0x68
 800acea:	4654      	mov	r4, sl
 800acec:	2205      	movs	r2, #5
 800acee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf2:	4853      	ldr	r0, [pc, #332]	@ (800ae40 <_vfiprintf_r+0x21c>)
 800acf4:	f7f5 fb0c 	bl	8000310 <memchr>
 800acf8:	9a04      	ldr	r2, [sp, #16]
 800acfa:	b9d8      	cbnz	r0, 800ad34 <_vfiprintf_r+0x110>
 800acfc:	06d1      	lsls	r1, r2, #27
 800acfe:	bf44      	itt	mi
 800ad00:	2320      	movmi	r3, #32
 800ad02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad06:	0713      	lsls	r3, r2, #28
 800ad08:	bf44      	itt	mi
 800ad0a:	232b      	movmi	r3, #43	@ 0x2b
 800ad0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad10:	f89a 3000 	ldrb.w	r3, [sl]
 800ad14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad16:	d015      	beq.n	800ad44 <_vfiprintf_r+0x120>
 800ad18:	9a07      	ldr	r2, [sp, #28]
 800ad1a:	4654      	mov	r4, sl
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	f04f 0c0a 	mov.w	ip, #10
 800ad22:	4621      	mov	r1, r4
 800ad24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad28:	3b30      	subs	r3, #48	@ 0x30
 800ad2a:	2b09      	cmp	r3, #9
 800ad2c:	d94b      	bls.n	800adc6 <_vfiprintf_r+0x1a2>
 800ad2e:	b1b0      	cbz	r0, 800ad5e <_vfiprintf_r+0x13a>
 800ad30:	9207      	str	r2, [sp, #28]
 800ad32:	e014      	b.n	800ad5e <_vfiprintf_r+0x13a>
 800ad34:	eba0 0308 	sub.w	r3, r0, r8
 800ad38:	fa09 f303 	lsl.w	r3, r9, r3
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	9304      	str	r3, [sp, #16]
 800ad40:	46a2      	mov	sl, r4
 800ad42:	e7d2      	b.n	800acea <_vfiprintf_r+0xc6>
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	1d19      	adds	r1, r3, #4
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	9103      	str	r1, [sp, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	bfbb      	ittet	lt
 800ad50:	425b      	neglt	r3, r3
 800ad52:	f042 0202 	orrlt.w	r2, r2, #2
 800ad56:	9307      	strge	r3, [sp, #28]
 800ad58:	9307      	strlt	r3, [sp, #28]
 800ad5a:	bfb8      	it	lt
 800ad5c:	9204      	strlt	r2, [sp, #16]
 800ad5e:	7823      	ldrb	r3, [r4, #0]
 800ad60:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad62:	d10a      	bne.n	800ad7a <_vfiprintf_r+0x156>
 800ad64:	7863      	ldrb	r3, [r4, #1]
 800ad66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad68:	d132      	bne.n	800add0 <_vfiprintf_r+0x1ac>
 800ad6a:	9b03      	ldr	r3, [sp, #12]
 800ad6c:	1d1a      	adds	r2, r3, #4
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	9203      	str	r2, [sp, #12]
 800ad72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad76:	3402      	adds	r4, #2
 800ad78:	9305      	str	r3, [sp, #20]
 800ad7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae50 <_vfiprintf_r+0x22c>
 800ad7e:	7821      	ldrb	r1, [r4, #0]
 800ad80:	2203      	movs	r2, #3
 800ad82:	4650      	mov	r0, sl
 800ad84:	f7f5 fac4 	bl	8000310 <memchr>
 800ad88:	b138      	cbz	r0, 800ad9a <_vfiprintf_r+0x176>
 800ad8a:	9b04      	ldr	r3, [sp, #16]
 800ad8c:	eba0 000a 	sub.w	r0, r0, sl
 800ad90:	2240      	movs	r2, #64	@ 0x40
 800ad92:	4082      	lsls	r2, r0
 800ad94:	4313      	orrs	r3, r2
 800ad96:	3401      	adds	r4, #1
 800ad98:	9304      	str	r3, [sp, #16]
 800ad9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9e:	4829      	ldr	r0, [pc, #164]	@ (800ae44 <_vfiprintf_r+0x220>)
 800ada0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ada4:	2206      	movs	r2, #6
 800ada6:	f7f5 fab3 	bl	8000310 <memchr>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d03f      	beq.n	800ae2e <_vfiprintf_r+0x20a>
 800adae:	4b26      	ldr	r3, [pc, #152]	@ (800ae48 <_vfiprintf_r+0x224>)
 800adb0:	bb1b      	cbnz	r3, 800adfa <_vfiprintf_r+0x1d6>
 800adb2:	9b03      	ldr	r3, [sp, #12]
 800adb4:	3307      	adds	r3, #7
 800adb6:	f023 0307 	bic.w	r3, r3, #7
 800adba:	3308      	adds	r3, #8
 800adbc:	9303      	str	r3, [sp, #12]
 800adbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adc0:	443b      	add	r3, r7
 800adc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800adc4:	e76a      	b.n	800ac9c <_vfiprintf_r+0x78>
 800adc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800adca:	460c      	mov	r4, r1
 800adcc:	2001      	movs	r0, #1
 800adce:	e7a8      	b.n	800ad22 <_vfiprintf_r+0xfe>
 800add0:	2300      	movs	r3, #0
 800add2:	3401      	adds	r4, #1
 800add4:	9305      	str	r3, [sp, #20]
 800add6:	4619      	mov	r1, r3
 800add8:	f04f 0c0a 	mov.w	ip, #10
 800addc:	4620      	mov	r0, r4
 800adde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ade2:	3a30      	subs	r2, #48	@ 0x30
 800ade4:	2a09      	cmp	r2, #9
 800ade6:	d903      	bls.n	800adf0 <_vfiprintf_r+0x1cc>
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d0c6      	beq.n	800ad7a <_vfiprintf_r+0x156>
 800adec:	9105      	str	r1, [sp, #20]
 800adee:	e7c4      	b.n	800ad7a <_vfiprintf_r+0x156>
 800adf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adf4:	4604      	mov	r4, r0
 800adf6:	2301      	movs	r3, #1
 800adf8:	e7f0      	b.n	800addc <_vfiprintf_r+0x1b8>
 800adfa:	ab03      	add	r3, sp, #12
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	462a      	mov	r2, r5
 800ae00:	4b12      	ldr	r3, [pc, #72]	@ (800ae4c <_vfiprintf_r+0x228>)
 800ae02:	a904      	add	r1, sp, #16
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7fd fe43 	bl	8008a90 <_printf_float>
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	1c78      	adds	r0, r7, #1
 800ae0e:	d1d6      	bne.n	800adbe <_vfiprintf_r+0x19a>
 800ae10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae12:	07d9      	lsls	r1, r3, #31
 800ae14:	d405      	bmi.n	800ae22 <_vfiprintf_r+0x1fe>
 800ae16:	89ab      	ldrh	r3, [r5, #12]
 800ae18:	059a      	lsls	r2, r3, #22
 800ae1a:	d402      	bmi.n	800ae22 <_vfiprintf_r+0x1fe>
 800ae1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae1e:	f7fe fc65 	bl	80096ec <__retarget_lock_release_recursive>
 800ae22:	89ab      	ldrh	r3, [r5, #12]
 800ae24:	065b      	lsls	r3, r3, #25
 800ae26:	f53f af1f 	bmi.w	800ac68 <_vfiprintf_r+0x44>
 800ae2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae2c:	e71e      	b.n	800ac6c <_vfiprintf_r+0x48>
 800ae2e:	ab03      	add	r3, sp, #12
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	462a      	mov	r2, r5
 800ae34:	4b05      	ldr	r3, [pc, #20]	@ (800ae4c <_vfiprintf_r+0x228>)
 800ae36:	a904      	add	r1, sp, #16
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f7fe f8b1 	bl	8008fa0 <_printf_i>
 800ae3e:	e7e4      	b.n	800ae0a <_vfiprintf_r+0x1e6>
 800ae40:	0800b696 	.word	0x0800b696
 800ae44:	0800b6a0 	.word	0x0800b6a0
 800ae48:	08008a91 	.word	0x08008a91
 800ae4c:	0800abff 	.word	0x0800abff
 800ae50:	0800b69c 	.word	0x0800b69c

0800ae54 <__sflush_r>:
 800ae54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5c:	0716      	lsls	r6, r2, #28
 800ae5e:	4605      	mov	r5, r0
 800ae60:	460c      	mov	r4, r1
 800ae62:	d454      	bmi.n	800af0e <__sflush_r+0xba>
 800ae64:	684b      	ldr	r3, [r1, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	dc02      	bgt.n	800ae70 <__sflush_r+0x1c>
 800ae6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dd48      	ble.n	800af02 <__sflush_r+0xae>
 800ae70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae72:	2e00      	cmp	r6, #0
 800ae74:	d045      	beq.n	800af02 <__sflush_r+0xae>
 800ae76:	2300      	movs	r3, #0
 800ae78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae7c:	682f      	ldr	r7, [r5, #0]
 800ae7e:	6a21      	ldr	r1, [r4, #32]
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	d030      	beq.n	800aee6 <__sflush_r+0x92>
 800ae84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	0759      	lsls	r1, r3, #29
 800ae8a:	d505      	bpl.n	800ae98 <__sflush_r+0x44>
 800ae8c:	6863      	ldr	r3, [r4, #4]
 800ae8e:	1ad2      	subs	r2, r2, r3
 800ae90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae92:	b10b      	cbz	r3, 800ae98 <__sflush_r+0x44>
 800ae94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae96:	1ad2      	subs	r2, r2, r3
 800ae98:	2300      	movs	r3, #0
 800ae9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae9c:	6a21      	ldr	r1, [r4, #32]
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b0      	blx	r6
 800aea2:	1c43      	adds	r3, r0, #1
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	d106      	bne.n	800aeb6 <__sflush_r+0x62>
 800aea8:	6829      	ldr	r1, [r5, #0]
 800aeaa:	291d      	cmp	r1, #29
 800aeac:	d82b      	bhi.n	800af06 <__sflush_r+0xb2>
 800aeae:	4a2a      	ldr	r2, [pc, #168]	@ (800af58 <__sflush_r+0x104>)
 800aeb0:	40ca      	lsrs	r2, r1
 800aeb2:	07d6      	lsls	r6, r2, #31
 800aeb4:	d527      	bpl.n	800af06 <__sflush_r+0xb2>
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	6062      	str	r2, [r4, #4]
 800aeba:	04d9      	lsls	r1, r3, #19
 800aebc:	6922      	ldr	r2, [r4, #16]
 800aebe:	6022      	str	r2, [r4, #0]
 800aec0:	d504      	bpl.n	800aecc <__sflush_r+0x78>
 800aec2:	1c42      	adds	r2, r0, #1
 800aec4:	d101      	bne.n	800aeca <__sflush_r+0x76>
 800aec6:	682b      	ldr	r3, [r5, #0]
 800aec8:	b903      	cbnz	r3, 800aecc <__sflush_r+0x78>
 800aeca:	6560      	str	r0, [r4, #84]	@ 0x54
 800aecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aece:	602f      	str	r7, [r5, #0]
 800aed0:	b1b9      	cbz	r1, 800af02 <__sflush_r+0xae>
 800aed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aed6:	4299      	cmp	r1, r3
 800aed8:	d002      	beq.n	800aee0 <__sflush_r+0x8c>
 800aeda:	4628      	mov	r0, r5
 800aedc:	f7ff f9fe 	bl	800a2dc <_free_r>
 800aee0:	2300      	movs	r3, #0
 800aee2:	6363      	str	r3, [r4, #52]	@ 0x34
 800aee4:	e00d      	b.n	800af02 <__sflush_r+0xae>
 800aee6:	2301      	movs	r3, #1
 800aee8:	4628      	mov	r0, r5
 800aeea:	47b0      	blx	r6
 800aeec:	4602      	mov	r2, r0
 800aeee:	1c50      	adds	r0, r2, #1
 800aef0:	d1c9      	bne.n	800ae86 <__sflush_r+0x32>
 800aef2:	682b      	ldr	r3, [r5, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d0c6      	beq.n	800ae86 <__sflush_r+0x32>
 800aef8:	2b1d      	cmp	r3, #29
 800aefa:	d001      	beq.n	800af00 <__sflush_r+0xac>
 800aefc:	2b16      	cmp	r3, #22
 800aefe:	d11e      	bne.n	800af3e <__sflush_r+0xea>
 800af00:	602f      	str	r7, [r5, #0]
 800af02:	2000      	movs	r0, #0
 800af04:	e022      	b.n	800af4c <__sflush_r+0xf8>
 800af06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af0a:	b21b      	sxth	r3, r3
 800af0c:	e01b      	b.n	800af46 <__sflush_r+0xf2>
 800af0e:	690f      	ldr	r7, [r1, #16]
 800af10:	2f00      	cmp	r7, #0
 800af12:	d0f6      	beq.n	800af02 <__sflush_r+0xae>
 800af14:	0793      	lsls	r3, r2, #30
 800af16:	680e      	ldr	r6, [r1, #0]
 800af18:	bf08      	it	eq
 800af1a:	694b      	ldreq	r3, [r1, #20]
 800af1c:	600f      	str	r7, [r1, #0]
 800af1e:	bf18      	it	ne
 800af20:	2300      	movne	r3, #0
 800af22:	eba6 0807 	sub.w	r8, r6, r7
 800af26:	608b      	str	r3, [r1, #8]
 800af28:	f1b8 0f00 	cmp.w	r8, #0
 800af2c:	dde9      	ble.n	800af02 <__sflush_r+0xae>
 800af2e:	6a21      	ldr	r1, [r4, #32]
 800af30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af32:	4643      	mov	r3, r8
 800af34:	463a      	mov	r2, r7
 800af36:	4628      	mov	r0, r5
 800af38:	47b0      	blx	r6
 800af3a:	2800      	cmp	r0, #0
 800af3c:	dc08      	bgt.n	800af50 <__sflush_r+0xfc>
 800af3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af46:	81a3      	strh	r3, [r4, #12]
 800af48:	f04f 30ff 	mov.w	r0, #4294967295
 800af4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af50:	4407      	add	r7, r0
 800af52:	eba8 0800 	sub.w	r8, r8, r0
 800af56:	e7e7      	b.n	800af28 <__sflush_r+0xd4>
 800af58:	20400001 	.word	0x20400001

0800af5c <_fflush_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	690b      	ldr	r3, [r1, #16]
 800af60:	4605      	mov	r5, r0
 800af62:	460c      	mov	r4, r1
 800af64:	b913      	cbnz	r3, 800af6c <_fflush_r+0x10>
 800af66:	2500      	movs	r5, #0
 800af68:	4628      	mov	r0, r5
 800af6a:	bd38      	pop	{r3, r4, r5, pc}
 800af6c:	b118      	cbz	r0, 800af76 <_fflush_r+0x1a>
 800af6e:	6a03      	ldr	r3, [r0, #32]
 800af70:	b90b      	cbnz	r3, 800af76 <_fflush_r+0x1a>
 800af72:	f7fe f9bf 	bl	80092f4 <__sinit>
 800af76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d0f3      	beq.n	800af66 <_fflush_r+0xa>
 800af7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af80:	07d0      	lsls	r0, r2, #31
 800af82:	d404      	bmi.n	800af8e <_fflush_r+0x32>
 800af84:	0599      	lsls	r1, r3, #22
 800af86:	d402      	bmi.n	800af8e <_fflush_r+0x32>
 800af88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af8a:	f7fe fbae 	bl	80096ea <__retarget_lock_acquire_recursive>
 800af8e:	4628      	mov	r0, r5
 800af90:	4621      	mov	r1, r4
 800af92:	f7ff ff5f 	bl	800ae54 <__sflush_r>
 800af96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af98:	07da      	lsls	r2, r3, #31
 800af9a:	4605      	mov	r5, r0
 800af9c:	d4e4      	bmi.n	800af68 <_fflush_r+0xc>
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	059b      	lsls	r3, r3, #22
 800afa2:	d4e1      	bmi.n	800af68 <_fflush_r+0xc>
 800afa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afa6:	f7fe fba1 	bl	80096ec <__retarget_lock_release_recursive>
 800afaa:	e7dd      	b.n	800af68 <_fflush_r+0xc>

0800afac <__swhatbuf_r>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	460c      	mov	r4, r1
 800afb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb4:	2900      	cmp	r1, #0
 800afb6:	b096      	sub	sp, #88	@ 0x58
 800afb8:	4615      	mov	r5, r2
 800afba:	461e      	mov	r6, r3
 800afbc:	da0d      	bge.n	800afda <__swhatbuf_r+0x2e>
 800afbe:	89a3      	ldrh	r3, [r4, #12]
 800afc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afc4:	f04f 0100 	mov.w	r1, #0
 800afc8:	bf14      	ite	ne
 800afca:	2340      	movne	r3, #64	@ 0x40
 800afcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800afd0:	2000      	movs	r0, #0
 800afd2:	6031      	str	r1, [r6, #0]
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	b016      	add	sp, #88	@ 0x58
 800afd8:	bd70      	pop	{r4, r5, r6, pc}
 800afda:	466a      	mov	r2, sp
 800afdc:	f000 f848 	bl	800b070 <_fstat_r>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	dbec      	blt.n	800afbe <__swhatbuf_r+0x12>
 800afe4:	9901      	ldr	r1, [sp, #4]
 800afe6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800afea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800afee:	4259      	negs	r1, r3
 800aff0:	4159      	adcs	r1, r3
 800aff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aff6:	e7eb      	b.n	800afd0 <__swhatbuf_r+0x24>

0800aff8 <__smakebuf_r>:
 800aff8:	898b      	ldrh	r3, [r1, #12]
 800affa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800affc:	079d      	lsls	r5, r3, #30
 800affe:	4606      	mov	r6, r0
 800b000:	460c      	mov	r4, r1
 800b002:	d507      	bpl.n	800b014 <__smakebuf_r+0x1c>
 800b004:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	2301      	movs	r3, #1
 800b00e:	6163      	str	r3, [r4, #20]
 800b010:	b003      	add	sp, #12
 800b012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b014:	ab01      	add	r3, sp, #4
 800b016:	466a      	mov	r2, sp
 800b018:	f7ff ffc8 	bl	800afac <__swhatbuf_r>
 800b01c:	9f00      	ldr	r7, [sp, #0]
 800b01e:	4605      	mov	r5, r0
 800b020:	4639      	mov	r1, r7
 800b022:	4630      	mov	r0, r6
 800b024:	f7ff f9ce 	bl	800a3c4 <_malloc_r>
 800b028:	b948      	cbnz	r0, 800b03e <__smakebuf_r+0x46>
 800b02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b02e:	059a      	lsls	r2, r3, #22
 800b030:	d4ee      	bmi.n	800b010 <__smakebuf_r+0x18>
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	f043 0302 	orr.w	r3, r3, #2
 800b03a:	81a3      	strh	r3, [r4, #12]
 800b03c:	e7e2      	b.n	800b004 <__smakebuf_r+0xc>
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	6020      	str	r0, [r4, #0]
 800b042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	9b01      	ldr	r3, [sp, #4]
 800b04a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b04e:	b15b      	cbz	r3, 800b068 <__smakebuf_r+0x70>
 800b050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b054:	4630      	mov	r0, r6
 800b056:	f000 f81d 	bl	800b094 <_isatty_r>
 800b05a:	b128      	cbz	r0, 800b068 <__smakebuf_r+0x70>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	f023 0303 	bic.w	r3, r3, #3
 800b062:	f043 0301 	orr.w	r3, r3, #1
 800b066:	81a3      	strh	r3, [r4, #12]
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	431d      	orrs	r5, r3
 800b06c:	81a5      	strh	r5, [r4, #12]
 800b06e:	e7cf      	b.n	800b010 <__smakebuf_r+0x18>

0800b070 <_fstat_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d07      	ldr	r5, [pc, #28]	@ (800b090 <_fstat_r+0x20>)
 800b074:	2300      	movs	r3, #0
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	4611      	mov	r1, r2
 800b07c:	602b      	str	r3, [r5, #0]
 800b07e:	f7f6 f9ad 	bl	80013dc <_fstat>
 800b082:	1c43      	adds	r3, r0, #1
 800b084:	d102      	bne.n	800b08c <_fstat_r+0x1c>
 800b086:	682b      	ldr	r3, [r5, #0]
 800b088:	b103      	cbz	r3, 800b08c <_fstat_r+0x1c>
 800b08a:	6023      	str	r3, [r4, #0]
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
 800b08e:	bf00      	nop
 800b090:	24000500 	.word	0x24000500

0800b094 <_isatty_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4d06      	ldr	r5, [pc, #24]	@ (800b0b0 <_isatty_r+0x1c>)
 800b098:	2300      	movs	r3, #0
 800b09a:	4604      	mov	r4, r0
 800b09c:	4608      	mov	r0, r1
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	f7f6 f9ac 	bl	80013fc <_isatty>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_isatty_r+0x1a>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_isatty_r+0x1a>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	24000500 	.word	0x24000500

0800b0b4 <_sbrk_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d06      	ldr	r5, [pc, #24]	@ (800b0d0 <_sbrk_r+0x1c>)
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	602b      	str	r3, [r5, #0]
 800b0c0:	f7f6 f9b4 	bl	800142c <_sbrk>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d102      	bne.n	800b0ce <_sbrk_r+0x1a>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	b103      	cbz	r3, 800b0ce <_sbrk_r+0x1a>
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	24000500 	.word	0x24000500

0800b0d4 <__assert_func>:
 800b0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0d6:	4614      	mov	r4, r2
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4b09      	ldr	r3, [pc, #36]	@ (800b100 <__assert_func+0x2c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4605      	mov	r5, r0
 800b0e0:	68d8      	ldr	r0, [r3, #12]
 800b0e2:	b14c      	cbz	r4, 800b0f8 <__assert_func+0x24>
 800b0e4:	4b07      	ldr	r3, [pc, #28]	@ (800b104 <__assert_func+0x30>)
 800b0e6:	9100      	str	r1, [sp, #0]
 800b0e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0ec:	4906      	ldr	r1, [pc, #24]	@ (800b108 <__assert_func+0x34>)
 800b0ee:	462b      	mov	r3, r5
 800b0f0:	f000 f842 	bl	800b178 <fiprintf>
 800b0f4:	f000 f852 	bl	800b19c <abort>
 800b0f8:	4b04      	ldr	r3, [pc, #16]	@ (800b10c <__assert_func+0x38>)
 800b0fa:	461c      	mov	r4, r3
 800b0fc:	e7f3      	b.n	800b0e6 <__assert_func+0x12>
 800b0fe:	bf00      	nop
 800b100:	2400001c 	.word	0x2400001c
 800b104:	0800b6b1 	.word	0x0800b6b1
 800b108:	0800b6be 	.word	0x0800b6be
 800b10c:	0800b6ec 	.word	0x0800b6ec

0800b110 <_calloc_r>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	fba1 5402 	umull	r5, r4, r1, r2
 800b116:	b934      	cbnz	r4, 800b126 <_calloc_r+0x16>
 800b118:	4629      	mov	r1, r5
 800b11a:	f7ff f953 	bl	800a3c4 <_malloc_r>
 800b11e:	4606      	mov	r6, r0
 800b120:	b928      	cbnz	r0, 800b12e <_calloc_r+0x1e>
 800b122:	4630      	mov	r0, r6
 800b124:	bd70      	pop	{r4, r5, r6, pc}
 800b126:	220c      	movs	r2, #12
 800b128:	6002      	str	r2, [r0, #0]
 800b12a:	2600      	movs	r6, #0
 800b12c:	e7f9      	b.n	800b122 <_calloc_r+0x12>
 800b12e:	462a      	mov	r2, r5
 800b130:	4621      	mov	r1, r4
 800b132:	f7fe fa5d 	bl	80095f0 <memset>
 800b136:	e7f4      	b.n	800b122 <_calloc_r+0x12>

0800b138 <__ascii_mbtowc>:
 800b138:	b082      	sub	sp, #8
 800b13a:	b901      	cbnz	r1, 800b13e <__ascii_mbtowc+0x6>
 800b13c:	a901      	add	r1, sp, #4
 800b13e:	b142      	cbz	r2, 800b152 <__ascii_mbtowc+0x1a>
 800b140:	b14b      	cbz	r3, 800b156 <__ascii_mbtowc+0x1e>
 800b142:	7813      	ldrb	r3, [r2, #0]
 800b144:	600b      	str	r3, [r1, #0]
 800b146:	7812      	ldrb	r2, [r2, #0]
 800b148:	1e10      	subs	r0, r2, #0
 800b14a:	bf18      	it	ne
 800b14c:	2001      	movne	r0, #1
 800b14e:	b002      	add	sp, #8
 800b150:	4770      	bx	lr
 800b152:	4610      	mov	r0, r2
 800b154:	e7fb      	b.n	800b14e <__ascii_mbtowc+0x16>
 800b156:	f06f 0001 	mvn.w	r0, #1
 800b15a:	e7f8      	b.n	800b14e <__ascii_mbtowc+0x16>

0800b15c <__ascii_wctomb>:
 800b15c:	4603      	mov	r3, r0
 800b15e:	4608      	mov	r0, r1
 800b160:	b141      	cbz	r1, 800b174 <__ascii_wctomb+0x18>
 800b162:	2aff      	cmp	r2, #255	@ 0xff
 800b164:	d904      	bls.n	800b170 <__ascii_wctomb+0x14>
 800b166:	228a      	movs	r2, #138	@ 0x8a
 800b168:	601a      	str	r2, [r3, #0]
 800b16a:	f04f 30ff 	mov.w	r0, #4294967295
 800b16e:	4770      	bx	lr
 800b170:	700a      	strb	r2, [r1, #0]
 800b172:	2001      	movs	r0, #1
 800b174:	4770      	bx	lr
	...

0800b178 <fiprintf>:
 800b178:	b40e      	push	{r1, r2, r3}
 800b17a:	b503      	push	{r0, r1, lr}
 800b17c:	4601      	mov	r1, r0
 800b17e:	ab03      	add	r3, sp, #12
 800b180:	4805      	ldr	r0, [pc, #20]	@ (800b198 <fiprintf+0x20>)
 800b182:	f853 2b04 	ldr.w	r2, [r3], #4
 800b186:	6800      	ldr	r0, [r0, #0]
 800b188:	9301      	str	r3, [sp, #4]
 800b18a:	f7ff fd4b 	bl	800ac24 <_vfiprintf_r>
 800b18e:	b002      	add	sp, #8
 800b190:	f85d eb04 	ldr.w	lr, [sp], #4
 800b194:	b003      	add	sp, #12
 800b196:	4770      	bx	lr
 800b198:	2400001c 	.word	0x2400001c

0800b19c <abort>:
 800b19c:	b508      	push	{r3, lr}
 800b19e:	2006      	movs	r0, #6
 800b1a0:	f000 f82c 	bl	800b1fc <raise>
 800b1a4:	2001      	movs	r0, #1
 800b1a6:	f7f6 f8c9 	bl	800133c <_exit>

0800b1aa <_raise_r>:
 800b1aa:	291f      	cmp	r1, #31
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	d904      	bls.n	800b1be <_raise_r+0x14>
 800b1b4:	2316      	movs	r3, #22
 800b1b6:	6003      	str	r3, [r0, #0]
 800b1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1bc:	bd38      	pop	{r3, r4, r5, pc}
 800b1be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1c0:	b112      	cbz	r2, 800b1c8 <_raise_r+0x1e>
 800b1c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1c6:	b94b      	cbnz	r3, 800b1dc <_raise_r+0x32>
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f000 f831 	bl	800b230 <_getpid_r>
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	4601      	mov	r1, r0
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1d8:	f000 b818 	b.w	800b20c <_kill_r>
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d00a      	beq.n	800b1f6 <_raise_r+0x4c>
 800b1e0:	1c59      	adds	r1, r3, #1
 800b1e2:	d103      	bne.n	800b1ec <_raise_r+0x42>
 800b1e4:	2316      	movs	r3, #22
 800b1e6:	6003      	str	r3, [r0, #0]
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	e7e7      	b.n	800b1bc <_raise_r+0x12>
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	4798      	blx	r3
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e7e0      	b.n	800b1bc <_raise_r+0x12>
	...

0800b1fc <raise>:
 800b1fc:	4b02      	ldr	r3, [pc, #8]	@ (800b208 <raise+0xc>)
 800b1fe:	4601      	mov	r1, r0
 800b200:	6818      	ldr	r0, [r3, #0]
 800b202:	f7ff bfd2 	b.w	800b1aa <_raise_r>
 800b206:	bf00      	nop
 800b208:	2400001c 	.word	0x2400001c

0800b20c <_kill_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d07      	ldr	r5, [pc, #28]	@ (800b22c <_kill_r+0x20>)
 800b210:	2300      	movs	r3, #0
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	4611      	mov	r1, r2
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	f7f6 f87f 	bl	800131c <_kill>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d102      	bne.n	800b228 <_kill_r+0x1c>
 800b222:	682b      	ldr	r3, [r5, #0]
 800b224:	b103      	cbz	r3, 800b228 <_kill_r+0x1c>
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	24000500 	.word	0x24000500

0800b230 <_getpid_r>:
 800b230:	f7f6 b86c 	b.w	800130c <_getpid>
 800b234:	0000      	movs	r0, r0
	...

0800b238 <fmod>:
 800b238:	b508      	push	{r3, lr}
 800b23a:	ed2d 8b04 	vpush	{d8-d9}
 800b23e:	eeb0 9b40 	vmov.f64	d9, d0
 800b242:	eeb0 8b41 	vmov.f64	d8, d1
 800b246:	f000 f81b 	bl	800b280 <__ieee754_fmod>
 800b24a:	eeb4 9b48 	vcmp.f64	d9, d8
 800b24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b252:	d60c      	bvs.n	800b26e <fmod+0x36>
 800b254:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800b278 <fmod+0x40>
 800b258:	eeb4 8b49 	vcmp.f64	d8, d9
 800b25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b260:	d105      	bne.n	800b26e <fmod+0x36>
 800b262:	f7fe fa17 	bl	8009694 <__errno>
 800b266:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800b26a:	2321      	movs	r3, #33	@ 0x21
 800b26c:	6003      	str	r3, [r0, #0]
 800b26e:	ecbd 8b04 	vpop	{d8-d9}
 800b272:	bd08      	pop	{r3, pc}
 800b274:	f3af 8000 	nop.w
	...

0800b280 <__ieee754_fmod>:
 800b280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b284:	ed8d 1b00 	vstr	d1, [sp]
 800b288:	e9dd 0600 	ldrd	r0, r6, [sp]
 800b28c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b290:	ea50 0305 	orrs.w	r3, r0, r5
 800b294:	4686      	mov	lr, r0
 800b296:	d00d      	beq.n	800b2b4 <__ieee754_fmod+0x34>
 800b298:	ee10 ca90 	vmov	ip, s1
 800b29c:	4b77      	ldr	r3, [pc, #476]	@ (800b47c <__ieee754_fmod+0x1fc>)
 800b29e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800b2a2:	4598      	cmp	r8, r3
 800b2a4:	d806      	bhi.n	800b2b4 <__ieee754_fmod+0x34>
 800b2a6:	4243      	negs	r3, r0
 800b2a8:	4a75      	ldr	r2, [pc, #468]	@ (800b480 <__ieee754_fmod+0x200>)
 800b2aa:	4303      	orrs	r3, r0
 800b2ac:	ea45 73d3 	orr.w	r3, r5, r3, lsr #31
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d908      	bls.n	800b2c6 <__ieee754_fmod+0x46>
 800b2b4:	ed9d 7b00 	vldr	d7, [sp]
 800b2b8:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b2bc:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800b2c0:	b003      	add	sp, #12
 800b2c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2c6:	ee10 9a10 	vmov	r9, s0
 800b2ca:	45a8      	cmp	r8, r5
 800b2cc:	464f      	mov	r7, r9
 800b2ce:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800b2d2:	dc09      	bgt.n	800b2e8 <__ieee754_fmod+0x68>
 800b2d4:	dbf4      	blt.n	800b2c0 <__ieee754_fmod+0x40>
 800b2d6:	4548      	cmp	r0, r9
 800b2d8:	d8f2      	bhi.n	800b2c0 <__ieee754_fmod+0x40>
 800b2da:	d105      	bne.n	800b2e8 <__ieee754_fmod+0x68>
 800b2dc:	4b69      	ldr	r3, [pc, #420]	@ (800b484 <__ieee754_fmod+0x204>)
 800b2de:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800b2e2:	ed93 0b00 	vldr	d0, [r3]
 800b2e6:	e7eb      	b.n	800b2c0 <__ieee754_fmod+0x40>
 800b2e8:	4965      	ldr	r1, [pc, #404]	@ (800b480 <__ieee754_fmod+0x200>)
 800b2ea:	ea1c 0f01 	tst.w	ip, r1
 800b2ee:	d14a      	bne.n	800b386 <__ieee754_fmod+0x106>
 800b2f0:	f1b8 0f00 	cmp.w	r8, #0
 800b2f4:	d13f      	bne.n	800b376 <__ieee754_fmod+0xf6>
 800b2f6:	4a64      	ldr	r2, [pc, #400]	@ (800b488 <__ieee754_fmod+0x208>)
 800b2f8:	464b      	mov	r3, r9
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	dc38      	bgt.n	800b370 <__ieee754_fmod+0xf0>
 800b2fe:	420e      	tst	r6, r1
 800b300:	d150      	bne.n	800b3a4 <__ieee754_fmod+0x124>
 800b302:	2d00      	cmp	r5, #0
 800b304:	d147      	bne.n	800b396 <__ieee754_fmod+0x116>
 800b306:	4b60      	ldr	r3, [pc, #384]	@ (800b488 <__ieee754_fmod+0x208>)
 800b308:	4601      	mov	r1, r0
 800b30a:	2900      	cmp	r1, #0
 800b30c:	dc40      	bgt.n	800b390 <__ieee754_fmod+0x110>
 800b30e:	495f      	ldr	r1, [pc, #380]	@ (800b48c <__ieee754_fmod+0x20c>)
 800b310:	428a      	cmp	r2, r1
 800b312:	db4b      	blt.n	800b3ac <__ieee754_fmod+0x12c>
 800b314:	f3cc 0113 	ubfx	r1, ip, #0, #20
 800b318:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800b31c:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 800b48c <__ieee754_fmod+0x20c>
 800b320:	4563      	cmp	r3, ip
 800b322:	db58      	blt.n	800b3d6 <__ieee754_fmod+0x156>
 800b324:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b328:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800b32c:	1ad0      	subs	r0, r2, r3
 800b32e:	1b8a      	subs	r2, r1, r6
 800b330:	eba7 050e 	sub.w	r5, r7, lr
 800b334:	2800      	cmp	r0, #0
 800b336:	d164      	bne.n	800b402 <__ieee754_fmod+0x182>
 800b338:	4577      	cmp	r7, lr
 800b33a:	bf38      	it	cc
 800b33c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800b340:	2a00      	cmp	r2, #0
 800b342:	bfbc      	itt	lt
 800b344:	463d      	movlt	r5, r7
 800b346:	460a      	movlt	r2, r1
 800b348:	ea52 0105 	orrs.w	r1, r2, r5
 800b34c:	d0c6      	beq.n	800b2dc <__ieee754_fmod+0x5c>
 800b34e:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800b352:	db6b      	blt.n	800b42c <__ieee754_fmod+0x1ac>
 800b354:	494d      	ldr	r1, [pc, #308]	@ (800b48c <__ieee754_fmod+0x20c>)
 800b356:	428b      	cmp	r3, r1
 800b358:	db6e      	blt.n	800b438 <__ieee754_fmod+0x1b8>
 800b35a:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800b35e:	4322      	orrs	r2, r4
 800b360:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800b364:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800b368:	4628      	mov	r0, r5
 800b36a:	ec41 0b10 	vmov	d0, r0, r1
 800b36e:	e7a7      	b.n	800b2c0 <__ieee754_fmod+0x40>
 800b370:	3a01      	subs	r2, #1
 800b372:	005b      	lsls	r3, r3, #1
 800b374:	e7c1      	b.n	800b2fa <__ieee754_fmod+0x7a>
 800b376:	4a45      	ldr	r2, [pc, #276]	@ (800b48c <__ieee754_fmod+0x20c>)
 800b378:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	ddbe      	ble.n	800b2fe <__ieee754_fmod+0x7e>
 800b380:	3a01      	subs	r2, #1
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	e7fa      	b.n	800b37c <__ieee754_fmod+0xfc>
 800b386:	ea4f 5228 	mov.w	r2, r8, asr #20
 800b38a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b38e:	e7b6      	b.n	800b2fe <__ieee754_fmod+0x7e>
 800b390:	3b01      	subs	r3, #1
 800b392:	0049      	lsls	r1, r1, #1
 800b394:	e7b9      	b.n	800b30a <__ieee754_fmod+0x8a>
 800b396:	4b3d      	ldr	r3, [pc, #244]	@ (800b48c <__ieee754_fmod+0x20c>)
 800b398:	02e9      	lsls	r1, r5, #11
 800b39a:	2900      	cmp	r1, #0
 800b39c:	ddb7      	ble.n	800b30e <__ieee754_fmod+0x8e>
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	0049      	lsls	r1, r1, #1
 800b3a2:	e7fa      	b.n	800b39a <__ieee754_fmod+0x11a>
 800b3a4:	152b      	asrs	r3, r5, #20
 800b3a6:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b3aa:	e7b0      	b.n	800b30e <__ieee754_fmod+0x8e>
 800b3ac:	eba1 0c02 	sub.w	ip, r1, r2
 800b3b0:	f1bc 0f1f 	cmp.w	ip, #31
 800b3b4:	dc09      	bgt.n	800b3ca <__ieee754_fmod+0x14a>
 800b3b6:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800b3ba:	fa08 f70c 	lsl.w	r7, r8, ip
 800b3be:	fa29 f101 	lsr.w	r1, r9, r1
 800b3c2:	4339      	orrs	r1, r7
 800b3c4:	fa09 f70c 	lsl.w	r7, r9, ip
 800b3c8:	e7a8      	b.n	800b31c <__ieee754_fmod+0x9c>
 800b3ca:	4931      	ldr	r1, [pc, #196]	@ (800b490 <__ieee754_fmod+0x210>)
 800b3cc:	1a89      	subs	r1, r1, r2
 800b3ce:	fa09 f101 	lsl.w	r1, r9, r1
 800b3d2:	2700      	movs	r7, #0
 800b3d4:	e7a2      	b.n	800b31c <__ieee754_fmod+0x9c>
 800b3d6:	ebac 0c03 	sub.w	ip, ip, r3
 800b3da:	f1bc 0f1f 	cmp.w	ip, #31
 800b3de:	dc09      	bgt.n	800b3f4 <__ieee754_fmod+0x174>
 800b3e0:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800b3e4:	fa05 f50c 	lsl.w	r5, r5, ip
 800b3e8:	fa20 f606 	lsr.w	r6, r0, r6
 800b3ec:	432e      	orrs	r6, r5
 800b3ee:	fa00 fe0c 	lsl.w	lr, r0, ip
 800b3f2:	e79b      	b.n	800b32c <__ieee754_fmod+0xac>
 800b3f4:	4e26      	ldr	r6, [pc, #152]	@ (800b490 <__ieee754_fmod+0x210>)
 800b3f6:	1af6      	subs	r6, r6, r3
 800b3f8:	fa00 f606 	lsl.w	r6, r0, r6
 800b3fc:	f04f 0e00 	mov.w	lr, #0
 800b400:	e794      	b.n	800b32c <__ieee754_fmod+0xac>
 800b402:	4577      	cmp	r7, lr
 800b404:	bf38      	it	cc
 800b406:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	da05      	bge.n	800b41a <__ieee754_fmod+0x19a>
 800b40e:	0ffa      	lsrs	r2, r7, #31
 800b410:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b414:	007f      	lsls	r7, r7, #1
 800b416:	3801      	subs	r0, #1
 800b418:	e789      	b.n	800b32e <__ieee754_fmod+0xae>
 800b41a:	ea52 0105 	orrs.w	r1, r2, r5
 800b41e:	f43f af5d 	beq.w	800b2dc <__ieee754_fmod+0x5c>
 800b422:	0fe9      	lsrs	r1, r5, #31
 800b424:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800b428:	006f      	lsls	r7, r5, #1
 800b42a:	e7f4      	b.n	800b416 <__ieee754_fmod+0x196>
 800b42c:	0fe9      	lsrs	r1, r5, #31
 800b42e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b432:	006d      	lsls	r5, r5, #1
 800b434:	3b01      	subs	r3, #1
 800b436:	e78a      	b.n	800b34e <__ieee754_fmod+0xce>
 800b438:	1ac9      	subs	r1, r1, r3
 800b43a:	2914      	cmp	r1, #20
 800b43c:	dc0a      	bgt.n	800b454 <__ieee754_fmod+0x1d4>
 800b43e:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800b442:	fa02 f303 	lsl.w	r3, r2, r3
 800b446:	40cd      	lsrs	r5, r1
 800b448:	432b      	orrs	r3, r5
 800b44a:	410a      	asrs	r2, r1
 800b44c:	ea42 0104 	orr.w	r1, r2, r4
 800b450:	4618      	mov	r0, r3
 800b452:	e78a      	b.n	800b36a <__ieee754_fmod+0xea>
 800b454:	291f      	cmp	r1, #31
 800b456:	dc07      	bgt.n	800b468 <__ieee754_fmod+0x1e8>
 800b458:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800b45c:	40cd      	lsrs	r5, r1
 800b45e:	fa02 f303 	lsl.w	r3, r2, r3
 800b462:	432b      	orrs	r3, r5
 800b464:	4622      	mov	r2, r4
 800b466:	e7f1      	b.n	800b44c <__ieee754_fmod+0x1cc>
 800b468:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800b46c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800b470:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800b474:	33e2      	adds	r3, #226	@ 0xe2
 800b476:	fa42 f303 	asr.w	r3, r2, r3
 800b47a:	e7f3      	b.n	800b464 <__ieee754_fmod+0x1e4>
 800b47c:	7fefffff 	.word	0x7fefffff
 800b480:	7ff00000 	.word	0x7ff00000
 800b484:	0800b8f8 	.word	0x0800b8f8
 800b488:	fffffbed 	.word	0xfffffbed
 800b48c:	fffffc02 	.word	0xfffffc02
 800b490:	fffffbe2 	.word	0xfffffbe2

0800b494 <_init>:
 800b494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b496:	bf00      	nop
 800b498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49a:	bc08      	pop	{r3}
 800b49c:	469e      	mov	lr, r3
 800b49e:	4770      	bx	lr

0800b4a0 <_fini>:
 800b4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a2:	bf00      	nop
 800b4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4a6:	bc08      	pop	{r3}
 800b4a8:	469e      	mov	lr, r3
 800b4aa:	4770      	bx	lr
=======
}
 8001416:	bf00      	nop
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40010000 	.word	0x40010000
 8001424:	58024400 	.word	0x58024400
 8001428:	58021000 	.word	0x58021000

0800142c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0bc      	sub	sp, #240	@ 0xf0
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	22b8      	movs	r2, #184	@ 0xb8
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f008 f9a7 	bl	80097a0 <memset>
  if(huart->Instance==USART2)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a63      	ldr	r2, [pc, #396]	@ (80015e4 <HAL_UART_MspInit+0x1b8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d172      	bne.n	8001542 <HAL_UART_MspInit+0x116>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800145c:	f04f 0202 	mov.w	r2, #2
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f854 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800147e:	f7ff fc77 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	4b59      	ldr	r3, [pc, #356]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 8001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001488:	4a57      	ldr	r2, [pc, #348]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800148e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001492:	4b55      	ldr	r3, [pc, #340]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b51      	ldr	r3, [pc, #324]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a6:	4a50      	ldr	r2, [pc, #320]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b0:	4b4d      	ldr	r3, [pc, #308]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b4a      	ldr	r3, [pc, #296]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c4:	4a48      	ldr	r2, [pc, #288]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ce:	4b46      	ldr	r3, [pc, #280]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014dc:	2308      	movs	r3, #8
 80014de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f4:	2307      	movs	r3, #7
 80014f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014fe:	4619      	mov	r1, r3
 8001500:	483a      	ldr	r0, [pc, #232]	@ (80015ec <HAL_UART_MspInit+0x1c0>)
 8001502:	f001 f9ef 	bl	80028e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001506:	2320      	movs	r3, #32
 8001508:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151e:	2307      	movs	r3, #7
 8001520:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001524:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001528:	4619      	mov	r1, r3
 800152a:	4831      	ldr	r0, [pc, #196]	@ (80015f0 <HAL_UART_MspInit+0x1c4>)
 800152c:	f001 f9da 	bl	80028e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	2026      	movs	r0, #38	@ 0x26
 8001536:	f000 fbc4 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800153a:	2026      	movs	r0, #38	@ 0x26
 800153c:	f000 fbdb 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001540:	e04b      	b.n	80015da <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2b      	ldr	r2, [pc, #172]	@ (80015f4 <HAL_UART_MspInit+0x1c8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d146      	bne.n	80015da <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800154c:	f04f 0202 	mov.w	r2, #2
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	4618      	mov	r0, r3
 8001564:	f002 ffdc 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_UART_MspInit+0x146>
      Error_Handler();
 800156e:	f7ff fbff 	bl	8000d70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001572:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 8001574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001578:	4a1b      	ldr	r2, [pc, #108]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 800157a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800157e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 8001584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001588:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001590:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001596:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_UART_MspInit+0x1bc>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c8:	2307      	movs	r3, #7
 80015ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015d2:	4619      	mov	r1, r3
 80015d4:	4806      	ldr	r0, [pc, #24]	@ (80015f0 <HAL_UART_MspInit+0x1c4>)
 80015d6:	f001 f985 	bl	80028e4 <HAL_GPIO_Init>
}
 80015da:	bf00      	nop
 80015dc:	37f0      	adds	r7, #240	@ 0xf0
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40004400 	.word	0x40004400
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58020000 	.word	0x58020000
 80015f0:	58020c00 	.word	0x58020c00
 80015f4:	40004800 	.word	0x40004800

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f000 fa19 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <USART2_IRQHandler+0x10>)
 800165e:	f005 fd57 	bl	8007110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	240002a4 	.word	0x240002a4

0800166c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return 1;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_kill>:

int _kill(int pid, int sig)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001686:	f008 f893 	bl	80097b0 <__errno>
 800168a:	4603      	mov	r3, r0
 800168c:	2216      	movs	r2, #22
 800168e:	601a      	str	r2, [r3, #0]
  return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_exit>:

void _exit (int status)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ffe7 	bl	800167c <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ae:	bf00      	nop
 80016b0:	e7fd      	b.n	80016ae <_exit+0x12>

080016b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e00a      	b.n	80016da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016c4:	f3af 8000 	nop.w
 80016c8:	4601      	mov	r1, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	60ba      	str	r2, [r7, #8]
 80016d0:	b2ca      	uxtb	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbf0      	blt.n	80016c4 <_read+0x12>
  }

  return len;
 80016e2:	687b      	ldr	r3, [r7, #4]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e009      	b.n	8001712 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f846 	bl	8000798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	dbf1      	blt.n	80016fe <_write+0x12>
  }
  return len;
 800171a:	687b      	ldr	r3, [r7, #4]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_close>:

int _close(int file)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800172c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800174c:	605a      	str	r2, [r3, #4]
  return 0;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_isatty>:

int _isatty(int file)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001772:	b480      	push	{r7}
 8001774:	b085      	sub	sp, #20
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001794:	4a14      	ldr	r2, [pc, #80]	@ (80017e8 <_sbrk+0x5c>)
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <_sbrk+0x60>)
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <_sbrk+0x64>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	@ (80017f4 <_sbrk+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d207      	bcs.n	80017cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017bc:	f007 fff8 	bl	80097b0 <__errno>
 80017c0:	4603      	mov	r3, r0
 80017c2:	220c      	movs	r2, #12
 80017c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ca:	e009      	b.n	80017e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017cc:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <_sbrk+0x64>)
 80017dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	24050000 	.word	0x24050000
 80017ec:	00000400 	.word	0x00000400
 80017f0:	240003d4 	.word	0x240003d4
 80017f4:	24000528 	.word	0x24000528

080017f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017fc:	4b3e      	ldr	r3, [pc, #248]	@ (80018f8 <SystemInit+0x100>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001802:	4a3d      	ldr	r2, [pc, #244]	@ (80018f8 <SystemInit+0x100>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800180c:	4b3b      	ldr	r3, [pc, #236]	@ (80018fc <SystemInit+0x104>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	2b06      	cmp	r3, #6
 8001816:	d807      	bhi.n	8001828 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001818:	4b38      	ldr	r3, [pc, #224]	@ (80018fc <SystemInit+0x104>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 030f 	bic.w	r3, r3, #15
 8001820:	4a36      	ldr	r2, [pc, #216]	@ (80018fc <SystemInit+0x104>)
 8001822:	f043 0307 	orr.w	r3, r3, #7
 8001826:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001828:	4b35      	ldr	r3, [pc, #212]	@ (8001900 <SystemInit+0x108>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a34      	ldr	r2, [pc, #208]	@ (8001900 <SystemInit+0x108>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001834:	4b32      	ldr	r3, [pc, #200]	@ (8001900 <SystemInit+0x108>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800183a:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <SystemInit+0x108>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4930      	ldr	r1, [pc, #192]	@ (8001900 <SystemInit+0x108>)
 8001840:	4b30      	ldr	r3, [pc, #192]	@ (8001904 <SystemInit+0x10c>)
 8001842:	4013      	ands	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001846:	4b2d      	ldr	r3, [pc, #180]	@ (80018fc <SystemInit+0x104>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001852:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <SystemInit+0x104>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 030f 	bic.w	r3, r3, #15
 800185a:	4a28      	ldr	r2, [pc, #160]	@ (80018fc <SystemInit+0x104>)
 800185c:	f043 0307 	orr.w	r3, r3, #7
 8001860:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001862:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <SystemInit+0x108>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001868:	4b25      	ldr	r3, [pc, #148]	@ (8001900 <SystemInit+0x108>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800186e:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <SystemInit+0x108>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001874:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <SystemInit+0x108>)
 8001876:	4a24      	ldr	r2, [pc, #144]	@ (8001908 <SystemInit+0x110>)
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <SystemInit+0x108>)
 800187c:	4a23      	ldr	r2, [pc, #140]	@ (800190c <SystemInit+0x114>)
 800187e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001880:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <SystemInit+0x108>)
 8001882:	4a23      	ldr	r2, [pc, #140]	@ (8001910 <SystemInit+0x118>)
 8001884:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001886:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <SystemInit+0x108>)
 8001888:	2200      	movs	r2, #0
 800188a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800188c:	4b1c      	ldr	r3, [pc, #112]	@ (8001900 <SystemInit+0x108>)
 800188e:	4a20      	ldr	r2, [pc, #128]	@ (8001910 <SystemInit+0x118>)
 8001890:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <SystemInit+0x108>)
 8001894:	2200      	movs	r2, #0
 8001896:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <SystemInit+0x108>)
 800189a:	4a1d      	ldr	r2, [pc, #116]	@ (8001910 <SystemInit+0x118>)
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <SystemInit+0x108>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <SystemInit+0x108>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a15      	ldr	r2, [pc, #84]	@ (8001900 <SystemInit+0x108>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <SystemInit+0x108>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <SystemInit+0x108>)
 80018b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d113      	bne.n	80018ec <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <SystemInit+0x108>)
 80018c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <SystemInit+0x108>)
 80018cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <SystemInit+0x11c>)
 80018d6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018da:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <SystemInit+0x108>)
 80018de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018e2:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <SystemInit+0x108>)
 80018e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	52002000 	.word	0x52002000
 8001900:	58024400 	.word	0x58024400
 8001904:	eaf6ed7f 	.word	0xeaf6ed7f
 8001908:	02020200 	.word	0x02020200
 800190c:	01ff0000 	.word	0x01ff0000
 8001910:	01010280 	.word	0x01010280
 8001914:	52004000 	.word	0x52004000

08001918 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <ExitRun0Mode+0x2c>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <ExitRun0Mode+0x2c>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001928:	bf00      	nop
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <ExitRun0Mode+0x2c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f9      	beq.n	800192a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	58024800 	.word	0x58024800

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001984 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800194c:	f7ff ffe4 	bl	8001918 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001950:	f7ff ff52 	bl	80017f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001956:	490d      	ldr	r1, [pc, #52]	@ (800198c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800196c:	4c0a      	ldr	r4, [pc, #40]	@ (8001998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f007 ff1f 	bl	80097bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197e:	f7fe ff1d 	bl	80007bc <main>
  bx  lr
 8001982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001984:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001988:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800198c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001990:	0800ba1c 	.word	0x0800ba1c
  ldr r2, =_sbss
 8001994:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001998:	24000528 	.word	0x24000528

0800199c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC3_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a6:	2003      	movs	r0, #3
 80019a8:	f000 f980 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019ac:	f002 fbe2 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_Init+0x68>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	4913      	ldr	r1, [pc, #76]	@ (8001a0c <HAL_Init+0x6c>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <HAL_Init+0x68>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <HAL_Init+0x6c>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a10 <HAL_Init+0x70>)
 80019e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <HAL_Init+0x74>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ea:	200f      	movs	r0, #15
 80019ec:	f000 f814 	bl	8001a18 <HAL_InitTick>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e002      	b.n	8001a00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019fa:	f7ff fc35 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	0800b65c 	.word	0x0800b65c
 8001a10:	24000014 	.word	0x24000014
 8001a14:	24000010 	.word	0x24000010

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_InitTick+0x60>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e021      	b.n	8001a70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <HAL_InitTick+0x64>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <HAL_InitTick+0x60>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f965 	bl	8001d12 <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a60:	f000 f92f 	bl	8001cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	@ (8001a80 <HAL_InitTick+0x68>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2400001c 	.word	0x2400001c
 8001a7c:	24000010 	.word	0x24000010
 8001a80:	24000018 	.word	0x24000018

08001a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	2400001c 	.word	0x2400001c
 8001aa8:	240003d8 	.word	0x240003d8

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	240003d8 	.word	0x240003d8

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001adc:	d005      	beq.n	8001aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_Delay+0x44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aea:	bf00      	nop
 8001aec:	f7ff ffde 	bl	8001aac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f7      	bhi.n	8001aec <HAL_Delay+0x28>
  {
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2400001c 	.word	0x2400001c

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x40>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x40>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00
 8001b50:	05fa0000 	.word	0x05fa0000

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	@ (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	@ 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c8c:	f7ff ff8e 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff29 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff40 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff90 	bl	8001c00 <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5f 	bl	8001bac <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff33 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffa4 	bl	8001c68 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d30:	f3bf 8f5f 	dmb	sy
}
 8001d34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <HAL_MPU_Disable+0x28>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	4a06      	ldr	r2, [pc, #24]	@ (8001d54 <HAL_MPU_Disable+0x28>)
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d40:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_MPU_Disable+0x2c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00
 8001d58:	e000ed90 	.word	0xe000ed90

08001d5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d64:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <HAL_MPU_Enable+0x38>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_MPU_Enable+0x3c>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	4a09      	ldr	r2, [pc, #36]	@ (8001d98 <HAL_MPU_Enable+0x3c>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7a:	f3bf 8f4f 	dsb	sy
}
 8001d7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d80:	f3bf 8f6f 	isb	sy
}
 8001d84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed90 	.word	0xe000ed90
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	785a      	ldrb	r2, [r3, #1]
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <HAL_MPU_ConfigRegion+0x7c>)
 8001daa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HAL_MPU_ConfigRegion+0x7c>)
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <HAL_MPU_ConfigRegion+0x7c>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001db8:	4a17      	ldr	r2, [pc, #92]	@ (8001e18 <HAL_MPU_ConfigRegion+0x7c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7b1b      	ldrb	r3, [r3, #12]
 8001dc4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7adb      	ldrb	r3, [r3, #11]
 8001dca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7a9b      	ldrb	r3, [r3, #10]
 8001dd2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7b5b      	ldrb	r3, [r3, #13]
 8001dda:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ddc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7b9b      	ldrb	r3, [r3, #14]
 8001de2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001de4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7bdb      	ldrb	r3, [r3, #15]
 8001dea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7a5b      	ldrb	r3, [r3, #9]
 8001df2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001df4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7a1b      	ldrb	r3, [r3, #8]
 8001dfa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dfc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e04:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e06:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e08:	6113      	str	r3, [r2, #16]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed90 	.word	0xe000ed90

08001e1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff fe42 	bl	8001aac <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e2dc      	b.n	80023ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d008      	beq.n	8001e52 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2280      	movs	r2, #128	@ 0x80
 8001e44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e2cd      	b.n	80023ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a76      	ldr	r2, [pc, #472]	@ (8002030 <HAL_DMA_Abort+0x214>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d04a      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a74      	ldr	r2, [pc, #464]	@ (8002034 <HAL_DMA_Abort+0x218>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d045      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a73      	ldr	r2, [pc, #460]	@ (8002038 <HAL_DMA_Abort+0x21c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d040      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a71      	ldr	r2, [pc, #452]	@ (800203c <HAL_DMA_Abort+0x220>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d03b      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a70      	ldr	r2, [pc, #448]	@ (8002040 <HAL_DMA_Abort+0x224>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d036      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6e      	ldr	r2, [pc, #440]	@ (8002044 <HAL_DMA_Abort+0x228>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d031      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6d      	ldr	r2, [pc, #436]	@ (8002048 <HAL_DMA_Abort+0x22c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d02c      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6b      	ldr	r2, [pc, #428]	@ (800204c <HAL_DMA_Abort+0x230>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d027      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6a      	ldr	r2, [pc, #424]	@ (8002050 <HAL_DMA_Abort+0x234>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d022      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a68      	ldr	r2, [pc, #416]	@ (8002054 <HAL_DMA_Abort+0x238>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01d      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a67      	ldr	r2, [pc, #412]	@ (8002058 <HAL_DMA_Abort+0x23c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d018      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a65      	ldr	r2, [pc, #404]	@ (800205c <HAL_DMA_Abort+0x240>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a64      	ldr	r2, [pc, #400]	@ (8002060 <HAL_DMA_Abort+0x244>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a62      	ldr	r2, [pc, #392]	@ (8002064 <HAL_DMA_Abort+0x248>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d009      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a61      	ldr	r2, [pc, #388]	@ (8002068 <HAL_DMA_Abort+0x24c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d004      	beq.n	8001ef2 <HAL_DMA_Abort+0xd6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a5f      	ldr	r2, [pc, #380]	@ (800206c <HAL_DMA_Abort+0x250>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_DMA_Abort+0xda>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_DMA_Abort+0xdc>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 021e 	bic.w	r2, r2, #30
 8001f0a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f1a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e00a      	b.n	8001f3a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 020e 	bic.w	r2, r2, #14
 8001f32:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002030 <HAL_DMA_Abort+0x214>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d072      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3a      	ldr	r2, [pc, #232]	@ (8002034 <HAL_DMA_Abort+0x218>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d06d      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a39      	ldr	r2, [pc, #228]	@ (8002038 <HAL_DMA_Abort+0x21c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d068      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a37      	ldr	r2, [pc, #220]	@ (800203c <HAL_DMA_Abort+0x220>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d063      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a36      	ldr	r2, [pc, #216]	@ (8002040 <HAL_DMA_Abort+0x224>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d05e      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a34      	ldr	r2, [pc, #208]	@ (8002044 <HAL_DMA_Abort+0x228>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d059      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a33      	ldr	r2, [pc, #204]	@ (8002048 <HAL_DMA_Abort+0x22c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d054      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a31      	ldr	r2, [pc, #196]	@ (800204c <HAL_DMA_Abort+0x230>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d04f      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a30      	ldr	r2, [pc, #192]	@ (8002050 <HAL_DMA_Abort+0x234>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d04a      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a2e      	ldr	r2, [pc, #184]	@ (8002054 <HAL_DMA_Abort+0x238>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d045      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8002058 <HAL_DMA_Abort+0x23c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d040      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2b      	ldr	r2, [pc, #172]	@ (800205c <HAL_DMA_Abort+0x240>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d03b      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8002060 <HAL_DMA_Abort+0x244>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d036      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	@ (8002064 <HAL_DMA_Abort+0x248>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d031      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a27      	ldr	r2, [pc, #156]	@ (8002068 <HAL_DMA_Abort+0x24c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d02c      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a25      	ldr	r2, [pc, #148]	@ (800206c <HAL_DMA_Abort+0x250>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d027      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a24      	ldr	r2, [pc, #144]	@ (8002070 <HAL_DMA_Abort+0x254>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d022      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a22      	ldr	r2, [pc, #136]	@ (8002074 <HAL_DMA_Abort+0x258>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01d      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a21      	ldr	r2, [pc, #132]	@ (8002078 <HAL_DMA_Abort+0x25c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d018      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800207c <HAL_DMA_Abort+0x260>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <HAL_DMA_Abort+0x264>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00e      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1c      	ldr	r2, [pc, #112]	@ (8002084 <HAL_DMA_Abort+0x268>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d009      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1b      	ldr	r2, [pc, #108]	@ (8002088 <HAL_DMA_Abort+0x26c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d004      	beq.n	800202a <HAL_DMA_Abort+0x20e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	@ (800208c <HAL_DMA_Abort+0x270>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d132      	bne.n	8002090 <HAL_DMA_Abort+0x274>
 800202a:	2301      	movs	r3, #1
 800202c:	e031      	b.n	8002092 <HAL_DMA_Abort+0x276>
 800202e:	bf00      	nop
 8002030:	40020010 	.word	0x40020010
 8002034:	40020028 	.word	0x40020028
 8002038:	40020040 	.word	0x40020040
 800203c:	40020058 	.word	0x40020058
 8002040:	40020070 	.word	0x40020070
 8002044:	40020088 	.word	0x40020088
 8002048:	400200a0 	.word	0x400200a0
 800204c:	400200b8 	.word	0x400200b8
 8002050:	40020410 	.word	0x40020410
 8002054:	40020428 	.word	0x40020428
 8002058:	40020440 	.word	0x40020440
 800205c:	40020458 	.word	0x40020458
 8002060:	40020470 	.word	0x40020470
 8002064:	40020488 	.word	0x40020488
 8002068:	400204a0 	.word	0x400204a0
 800206c:	400204b8 	.word	0x400204b8
 8002070:	58025408 	.word	0x58025408
 8002074:	5802541c 	.word	0x5802541c
 8002078:	58025430 	.word	0x58025430
 800207c:	58025444 	.word	0x58025444
 8002080:	58025458 	.word	0x58025458
 8002084:	5802546c 	.word	0x5802546c
 8002088:	58025480 	.word	0x58025480
 800208c:	58025494 	.word	0x58025494
 8002090:	2300      	movs	r3, #0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6d      	ldr	r2, [pc, #436]	@ (8002260 <HAL_DMA_Abort+0x444>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d04a      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002264 <HAL_DMA_Abort+0x448>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d045      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6a      	ldr	r2, [pc, #424]	@ (8002268 <HAL_DMA_Abort+0x44c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d040      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a68      	ldr	r2, [pc, #416]	@ (800226c <HAL_DMA_Abort+0x450>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d03b      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a67      	ldr	r2, [pc, #412]	@ (8002270 <HAL_DMA_Abort+0x454>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d036      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a65      	ldr	r2, [pc, #404]	@ (8002274 <HAL_DMA_Abort+0x458>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d031      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a64      	ldr	r2, [pc, #400]	@ (8002278 <HAL_DMA_Abort+0x45c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d02c      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a62      	ldr	r2, [pc, #392]	@ (800227c <HAL_DMA_Abort+0x460>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d027      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a61      	ldr	r2, [pc, #388]	@ (8002280 <HAL_DMA_Abort+0x464>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d022      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5f      	ldr	r2, [pc, #380]	@ (8002284 <HAL_DMA_Abort+0x468>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01d      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a5e      	ldr	r2, [pc, #376]	@ (8002288 <HAL_DMA_Abort+0x46c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d018      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a5c      	ldr	r2, [pc, #368]	@ (800228c <HAL_DMA_Abort+0x470>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5b      	ldr	r2, [pc, #364]	@ (8002290 <HAL_DMA_Abort+0x474>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00e      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a59      	ldr	r2, [pc, #356]	@ (8002294 <HAL_DMA_Abort+0x478>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d009      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a58      	ldr	r2, [pc, #352]	@ (8002298 <HAL_DMA_Abort+0x47c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d004      	beq.n	8002146 <HAL_DMA_Abort+0x32a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a56      	ldr	r2, [pc, #344]	@ (800229c <HAL_DMA_Abort+0x480>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d108      	bne.n	8002158 <HAL_DMA_Abort+0x33c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e007      	b.n	8002168 <HAL_DMA_Abort+0x34c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002168:	e013      	b.n	8002192 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216a:	f7ff fc9f 	bl	8001aac <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b05      	cmp	r3, #5
 8002176:	d90c      	bls.n	8002192 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2203      	movs	r2, #3
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e12d      	b.n	80023ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1e5      	bne.n	800216a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002260 <HAL_DMA_Abort+0x444>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04a      	beq.n	800223e <HAL_DMA_Abort+0x422>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <HAL_DMA_Abort+0x448>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d045      	beq.n	800223e <HAL_DMA_Abort+0x422>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <HAL_DMA_Abort+0x44c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d040      	beq.n	800223e <HAL_DMA_Abort+0x422>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2a      	ldr	r2, [pc, #168]	@ (800226c <HAL_DMA_Abort+0x450>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d03b      	beq.n	800223e <HAL_DMA_Abort+0x422>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a29      	ldr	r2, [pc, #164]	@ (8002270 <HAL_DMA_Abort+0x454>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d036      	beq.n	800223e <HAL_DMA_Abort+0x422>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a27      	ldr	r2, [pc, #156]	@ (8002274 <HAL_DMA_Abort+0x458>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d031      	beq.n	800223e <HAL_DMA_Abort+0x422>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a26      	ldr	r2, [pc, #152]	@ (8002278 <HAL_DMA_Abort+0x45c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d02c      	beq.n	800223e <HAL_DMA_Abort+0x422>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a24      	ldr	r2, [pc, #144]	@ (800227c <HAL_DMA_Abort+0x460>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d027      	beq.n	800223e <HAL_DMA_Abort+0x422>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a23      	ldr	r2, [pc, #140]	@ (8002280 <HAL_DMA_Abort+0x464>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d022      	beq.n	800223e <HAL_DMA_Abort+0x422>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <HAL_DMA_Abort+0x468>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01d      	beq.n	800223e <HAL_DMA_Abort+0x422>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a20      	ldr	r2, [pc, #128]	@ (8002288 <HAL_DMA_Abort+0x46c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d018      	beq.n	800223e <HAL_DMA_Abort+0x422>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <HAL_DMA_Abort+0x470>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_DMA_Abort+0x422>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <HAL_DMA_Abort+0x474>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00e      	beq.n	800223e <HAL_DMA_Abort+0x422>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1b      	ldr	r2, [pc, #108]	@ (8002294 <HAL_DMA_Abort+0x478>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d009      	beq.n	800223e <HAL_DMA_Abort+0x422>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1a      	ldr	r2, [pc, #104]	@ (8002298 <HAL_DMA_Abort+0x47c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d004      	beq.n	800223e <HAL_DMA_Abort+0x422>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a18      	ldr	r2, [pc, #96]	@ (800229c <HAL_DMA_Abort+0x480>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_DMA_Abort+0x426>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_DMA_Abort+0x428>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d02b      	beq.n	80022a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	223f      	movs	r2, #63	@ 0x3f
 8002258:	409a      	lsls	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	e02a      	b.n	80022b6 <HAL_DMA_Abort+0x49a>
 8002260:	40020010 	.word	0x40020010
 8002264:	40020028 	.word	0x40020028
 8002268:	40020040 	.word	0x40020040
 800226c:	40020058 	.word	0x40020058
 8002270:	40020070 	.word	0x40020070
 8002274:	40020088 	.word	0x40020088
 8002278:	400200a0 	.word	0x400200a0
 800227c:	400200b8 	.word	0x400200b8
 8002280:	40020410 	.word	0x40020410
 8002284:	40020428 	.word	0x40020428
 8002288:	40020440 	.word	0x40020440
 800228c:	40020458 	.word	0x40020458
 8002290:	40020470 	.word	0x40020470
 8002294:	40020488 	.word	0x40020488
 8002298:	400204a0 	.word	0x400204a0
 800229c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2201      	movs	r2, #1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a4f      	ldr	r2, [pc, #316]	@ (80023f8 <HAL_DMA_Abort+0x5dc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d072      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a4d      	ldr	r2, [pc, #308]	@ (80023fc <HAL_DMA_Abort+0x5e0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d06d      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002400 <HAL_DMA_Abort+0x5e4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d068      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002404 <HAL_DMA_Abort+0x5e8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d063      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a49      	ldr	r2, [pc, #292]	@ (8002408 <HAL_DMA_Abort+0x5ec>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d05e      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a47      	ldr	r2, [pc, #284]	@ (800240c <HAL_DMA_Abort+0x5f0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d059      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a46      	ldr	r2, [pc, #280]	@ (8002410 <HAL_DMA_Abort+0x5f4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d054      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a44      	ldr	r2, [pc, #272]	@ (8002414 <HAL_DMA_Abort+0x5f8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04f      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a43      	ldr	r2, [pc, #268]	@ (8002418 <HAL_DMA_Abort+0x5fc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04a      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a41      	ldr	r2, [pc, #260]	@ (800241c <HAL_DMA_Abort+0x600>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d045      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a40      	ldr	r2, [pc, #256]	@ (8002420 <HAL_DMA_Abort+0x604>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d040      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a3e      	ldr	r2, [pc, #248]	@ (8002424 <HAL_DMA_Abort+0x608>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d03b      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a3d      	ldr	r2, [pc, #244]	@ (8002428 <HAL_DMA_Abort+0x60c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d036      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a3b      	ldr	r2, [pc, #236]	@ (800242c <HAL_DMA_Abort+0x610>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a3a      	ldr	r2, [pc, #232]	@ (8002430 <HAL_DMA_Abort+0x614>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d02c      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a38      	ldr	r2, [pc, #224]	@ (8002434 <HAL_DMA_Abort+0x618>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d027      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a37      	ldr	r2, [pc, #220]	@ (8002438 <HAL_DMA_Abort+0x61c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a35      	ldr	r2, [pc, #212]	@ (800243c <HAL_DMA_Abort+0x620>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a34      	ldr	r2, [pc, #208]	@ (8002440 <HAL_DMA_Abort+0x624>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a32      	ldr	r2, [pc, #200]	@ (8002444 <HAL_DMA_Abort+0x628>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a31      	ldr	r2, [pc, #196]	@ (8002448 <HAL_DMA_Abort+0x62c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00e      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2f      	ldr	r2, [pc, #188]	@ (800244c <HAL_DMA_Abort+0x630>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2e      	ldr	r2, [pc, #184]	@ (8002450 <HAL_DMA_Abort+0x634>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_DMA_Abort+0x58a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002454 <HAL_DMA_Abort+0x638>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Abort+0x58e>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_DMA_Abort+0x590>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d015      	beq.n	80023dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40020010 	.word	0x40020010
 80023fc:	40020028 	.word	0x40020028
 8002400:	40020040 	.word	0x40020040
 8002404:	40020058 	.word	0x40020058
 8002408:	40020070 	.word	0x40020070
 800240c:	40020088 	.word	0x40020088
 8002410:	400200a0 	.word	0x400200a0
 8002414:	400200b8 	.word	0x400200b8
 8002418:	40020410 	.word	0x40020410
 800241c:	40020428 	.word	0x40020428
 8002420:	40020440 	.word	0x40020440
 8002424:	40020458 	.word	0x40020458
 8002428:	40020470 	.word	0x40020470
 800242c:	40020488 	.word	0x40020488
 8002430:	400204a0 	.word	0x400204a0
 8002434:	400204b8 	.word	0x400204b8
 8002438:	58025408 	.word	0x58025408
 800243c:	5802541c 	.word	0x5802541c
 8002440:	58025430 	.word	0x58025430
 8002444:	58025444 	.word	0x58025444
 8002448:	58025458 	.word	0x58025458
 800244c:	5802546c 	.word	0x5802546c
 8002450:	58025480 	.word	0x58025480
 8002454:	58025494 	.word	0x58025494

08002458 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e237      	b.n	80028da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d004      	beq.n	8002480 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2280      	movs	r2, #128	@ 0x80
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e22c      	b.n	80028da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5c      	ldr	r2, [pc, #368]	@ (80025f8 <HAL_DMA_Abort_IT+0x1a0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d04a      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5b      	ldr	r2, [pc, #364]	@ (80025fc <HAL_DMA_Abort_IT+0x1a4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d045      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a59      	ldr	r2, [pc, #356]	@ (8002600 <HAL_DMA_Abort_IT+0x1a8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d040      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a58      	ldr	r2, [pc, #352]	@ (8002604 <HAL_DMA_Abort_IT+0x1ac>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d03b      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a56      	ldr	r2, [pc, #344]	@ (8002608 <HAL_DMA_Abort_IT+0x1b0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d036      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a55      	ldr	r2, [pc, #340]	@ (800260c <HAL_DMA_Abort_IT+0x1b4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d031      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a53      	ldr	r2, [pc, #332]	@ (8002610 <HAL_DMA_Abort_IT+0x1b8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d02c      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a52      	ldr	r2, [pc, #328]	@ (8002614 <HAL_DMA_Abort_IT+0x1bc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d027      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a50      	ldr	r2, [pc, #320]	@ (8002618 <HAL_DMA_Abort_IT+0x1c0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d022      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a4f      	ldr	r2, [pc, #316]	@ (800261c <HAL_DMA_Abort_IT+0x1c4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d01d      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002620 <HAL_DMA_Abort_IT+0x1c8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d018      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002624 <HAL_DMA_Abort_IT+0x1cc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002628 <HAL_DMA_Abort_IT+0x1d0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a49      	ldr	r2, [pc, #292]	@ (800262c <HAL_DMA_Abort_IT+0x1d4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a47      	ldr	r2, [pc, #284]	@ (8002630 <HAL_DMA_Abort_IT+0x1d8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a46      	ldr	r2, [pc, #280]	@ (8002634 <HAL_DMA_Abort_IT+0x1dc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Abort_IT+0xcc>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_DMA_Abort_IT+0xce>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8086 	beq.w	8002638 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2204      	movs	r2, #4
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2f      	ldr	r2, [pc, #188]	@ (80025f8 <HAL_DMA_Abort_IT+0x1a0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d04a      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2e      	ldr	r2, [pc, #184]	@ (80025fc <HAL_DMA_Abort_IT+0x1a4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d045      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2c      	ldr	r2, [pc, #176]	@ (8002600 <HAL_DMA_Abort_IT+0x1a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d040      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a2b      	ldr	r2, [pc, #172]	@ (8002604 <HAL_DMA_Abort_IT+0x1ac>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d03b      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a29      	ldr	r2, [pc, #164]	@ (8002608 <HAL_DMA_Abort_IT+0x1b0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d036      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a28      	ldr	r2, [pc, #160]	@ (800260c <HAL_DMA_Abort_IT+0x1b4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d031      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a26      	ldr	r2, [pc, #152]	@ (8002610 <HAL_DMA_Abort_IT+0x1b8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02c      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a25      	ldr	r2, [pc, #148]	@ (8002614 <HAL_DMA_Abort_IT+0x1bc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d027      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a23      	ldr	r2, [pc, #140]	@ (8002618 <HAL_DMA_Abort_IT+0x1c0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d022      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a22      	ldr	r2, [pc, #136]	@ (800261c <HAL_DMA_Abort_IT+0x1c4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d01d      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a20      	ldr	r2, [pc, #128]	@ (8002620 <HAL_DMA_Abort_IT+0x1c8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d018      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002624 <HAL_DMA_Abort_IT+0x1cc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d013      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <HAL_DMA_Abort_IT+0x1d0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00e      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1c      	ldr	r2, [pc, #112]	@ (800262c <HAL_DMA_Abort_IT+0x1d4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002630 <HAL_DMA_Abort_IT+0x1d8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x17c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a19      	ldr	r2, [pc, #100]	@ (8002634 <HAL_DMA_Abort_IT+0x1dc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d108      	bne.n	80025e6 <HAL_DMA_Abort_IT+0x18e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e178      	b.n	80028d8 <HAL_DMA_Abort_IT+0x480>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e16f      	b.n	80028d8 <HAL_DMA_Abort_IT+0x480>
 80025f8:	40020010 	.word	0x40020010
 80025fc:	40020028 	.word	0x40020028
 8002600:	40020040 	.word	0x40020040
 8002604:	40020058 	.word	0x40020058
 8002608:	40020070 	.word	0x40020070
 800260c:	40020088 	.word	0x40020088
 8002610:	400200a0 	.word	0x400200a0
 8002614:	400200b8 	.word	0x400200b8
 8002618:	40020410 	.word	0x40020410
 800261c:	40020428 	.word	0x40020428
 8002620:	40020440 	.word	0x40020440
 8002624:	40020458 	.word	0x40020458
 8002628:	40020470 	.word	0x40020470
 800262c:	40020488 	.word	0x40020488
 8002630:	400204a0 	.word	0x400204a0
 8002634:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 020e 	bic.w	r2, r2, #14
 8002646:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6c      	ldr	r2, [pc, #432]	@ (8002800 <HAL_DMA_Abort_IT+0x3a8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d04a      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6b      	ldr	r2, [pc, #428]	@ (8002804 <HAL_DMA_Abort_IT+0x3ac>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d045      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a69      	ldr	r2, [pc, #420]	@ (8002808 <HAL_DMA_Abort_IT+0x3b0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d040      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a68      	ldr	r2, [pc, #416]	@ (800280c <HAL_DMA_Abort_IT+0x3b4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d03b      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a66      	ldr	r2, [pc, #408]	@ (8002810 <HAL_DMA_Abort_IT+0x3b8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d036      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_DMA_Abort_IT+0x3bc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d031      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a63      	ldr	r2, [pc, #396]	@ (8002818 <HAL_DMA_Abort_IT+0x3c0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02c      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a62      	ldr	r2, [pc, #392]	@ (800281c <HAL_DMA_Abort_IT+0x3c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d027      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a60      	ldr	r2, [pc, #384]	@ (8002820 <HAL_DMA_Abort_IT+0x3c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d022      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002824 <HAL_DMA_Abort_IT+0x3cc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d01d      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002828 <HAL_DMA_Abort_IT+0x3d0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d018      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5c      	ldr	r2, [pc, #368]	@ (800282c <HAL_DMA_Abort_IT+0x3d4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002830 <HAL_DMA_Abort_IT+0x3d8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a59      	ldr	r2, [pc, #356]	@ (8002834 <HAL_DMA_Abort_IT+0x3dc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a57      	ldr	r2, [pc, #348]	@ (8002838 <HAL_DMA_Abort_IT+0x3e0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x290>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a56      	ldr	r2, [pc, #344]	@ (800283c <HAL_DMA_Abort_IT+0x3e4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d108      	bne.n	80026fa <HAL_DMA_Abort_IT+0x2a2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e007      	b.n	800270a <HAL_DMA_Abort_IT+0x2b2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a3c      	ldr	r2, [pc, #240]	@ (8002800 <HAL_DMA_Abort_IT+0x3a8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d072      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a3a      	ldr	r2, [pc, #232]	@ (8002804 <HAL_DMA_Abort_IT+0x3ac>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d06d      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a39      	ldr	r2, [pc, #228]	@ (8002808 <HAL_DMA_Abort_IT+0x3b0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d068      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a37      	ldr	r2, [pc, #220]	@ (800280c <HAL_DMA_Abort_IT+0x3b4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d063      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a36      	ldr	r2, [pc, #216]	@ (8002810 <HAL_DMA_Abort_IT+0x3b8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d05e      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a34      	ldr	r2, [pc, #208]	@ (8002814 <HAL_DMA_Abort_IT+0x3bc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d059      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a33      	ldr	r2, [pc, #204]	@ (8002818 <HAL_DMA_Abort_IT+0x3c0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d054      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a31      	ldr	r2, [pc, #196]	@ (800281c <HAL_DMA_Abort_IT+0x3c4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d04f      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a30      	ldr	r2, [pc, #192]	@ (8002820 <HAL_DMA_Abort_IT+0x3c8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04a      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2e      	ldr	r2, [pc, #184]	@ (8002824 <HAL_DMA_Abort_IT+0x3cc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d045      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2d      	ldr	r2, [pc, #180]	@ (8002828 <HAL_DMA_Abort_IT+0x3d0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d040      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2b      	ldr	r2, [pc, #172]	@ (800282c <HAL_DMA_Abort_IT+0x3d4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d03b      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2a      	ldr	r2, [pc, #168]	@ (8002830 <HAL_DMA_Abort_IT+0x3d8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d036      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a28      	ldr	r2, [pc, #160]	@ (8002834 <HAL_DMA_Abort_IT+0x3dc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d031      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a27      	ldr	r2, [pc, #156]	@ (8002838 <HAL_DMA_Abort_IT+0x3e0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d02c      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a25      	ldr	r2, [pc, #148]	@ (800283c <HAL_DMA_Abort_IT+0x3e4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d027      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a24      	ldr	r2, [pc, #144]	@ (8002840 <HAL_DMA_Abort_IT+0x3e8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a22      	ldr	r2, [pc, #136]	@ (8002844 <HAL_DMA_Abort_IT+0x3ec>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01d      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a21      	ldr	r2, [pc, #132]	@ (8002848 <HAL_DMA_Abort_IT+0x3f0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d018      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1f      	ldr	r2, [pc, #124]	@ (800284c <HAL_DMA_Abort_IT+0x3f4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002850 <HAL_DMA_Abort_IT+0x3f8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002854 <HAL_DMA_Abort_IT+0x3fc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002858 <HAL_DMA_Abort_IT+0x400>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_DMA_Abort_IT+0x3a2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a19      	ldr	r2, [pc, #100]	@ (800285c <HAL_DMA_Abort_IT+0x404>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d132      	bne.n	8002860 <HAL_DMA_Abort_IT+0x408>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e031      	b.n	8002862 <HAL_DMA_Abort_IT+0x40a>
 80027fe:	bf00      	nop
 8002800:	40020010 	.word	0x40020010
 8002804:	40020028 	.word	0x40020028
 8002808:	40020040 	.word	0x40020040
 800280c:	40020058 	.word	0x40020058
 8002810:	40020070 	.word	0x40020070
 8002814:	40020088 	.word	0x40020088
 8002818:	400200a0 	.word	0x400200a0
 800281c:	400200b8 	.word	0x400200b8
 8002820:	40020410 	.word	0x40020410
 8002824:	40020428 	.word	0x40020428
 8002828:	40020440 	.word	0x40020440
 800282c:	40020458 	.word	0x40020458
 8002830:	40020470 	.word	0x40020470
 8002834:	40020488 	.word	0x40020488
 8002838:	400204a0 	.word	0x400204a0
 800283c:	400204b8 	.word	0x400204b8
 8002840:	58025408 	.word	0x58025408
 8002844:	5802541c 	.word	0x5802541c
 8002848:	58025430 	.word	0x58025430
 800284c:	58025444 	.word	0x58025444
 8002850:	58025458 	.word	0x58025458
 8002854:	5802546c 	.word	0x5802546c
 8002858:	58025480 	.word	0x58025480
 800285c:	58025494 	.word	0x58025494
 8002860:	2300      	movs	r3, #0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d028      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002874:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2201      	movs	r2, #1
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002894:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	@ 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028f2:	4b86      	ldr	r3, [pc, #536]	@ (8002b0c <HAL_GPIO_Init+0x228>)
 80028f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028f6:	e18c      	b.n	8002c12 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 817e 	beq.w	8002c0c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d005      	beq.n	8002928 <HAL_GPIO_Init+0x44>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d130      	bne.n	800298a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800295e:	2201      	movs	r2, #1
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 0201 	and.w	r2, r3, #1
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b03      	cmp	r3, #3
 8002994:	d017      	beq.n	80029c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d123      	bne.n	8002a1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	08da      	lsrs	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3208      	adds	r2, #8
 80029da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	08da      	lsrs	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3208      	adds	r2, #8
 8002a14:	69b9      	ldr	r1, [r7, #24]
 8002a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0203 	and.w	r2, r3, #3
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80d8 	beq.w	8002c0c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b10 <HAL_GPIO_Init+0x22c>)
 8002a5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a62:	4a2b      	ldr	r2, [pc, #172]	@ (8002b10 <HAL_GPIO_Init+0x22c>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a6c:	4b28      	ldr	r3, [pc, #160]	@ (8002b10 <HAL_GPIO_Init+0x22c>)
 8002a6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7a:	4a26      	ldr	r2, [pc, #152]	@ (8002b14 <HAL_GPIO_Init+0x230>)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3302      	adds	r3, #2
 8002a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b18 <HAL_GPIO_Init+0x234>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d04a      	beq.n	8002b3c <HAL_GPIO_Init+0x258>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b1c <HAL_GPIO_Init+0x238>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02b      	beq.n	8002b06 <HAL_GPIO_Init+0x222>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_GPIO_Init+0x23c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d025      	beq.n	8002b02 <HAL_GPIO_Init+0x21e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b24 <HAL_GPIO_Init+0x240>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01f      	beq.n	8002afe <HAL_GPIO_Init+0x21a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	@ (8002b28 <HAL_GPIO_Init+0x244>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x216>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <HAL_GPIO_Init+0x248>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x212>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a17      	ldr	r2, [pc, #92]	@ (8002b30 <HAL_GPIO_Init+0x24c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x20e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a16      	ldr	r2, [pc, #88]	@ (8002b34 <HAL_GPIO_Init+0x250>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x20a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	@ (8002b38 <HAL_GPIO_Init+0x254>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x206>
 8002ae6:	2309      	movs	r3, #9
 8002ae8:	e029      	b.n	8002b3e <HAL_GPIO_Init+0x25a>
 8002aea:	230a      	movs	r3, #10
 8002aec:	e027      	b.n	8002b3e <HAL_GPIO_Init+0x25a>
 8002aee:	2307      	movs	r3, #7
 8002af0:	e025      	b.n	8002b3e <HAL_GPIO_Init+0x25a>
 8002af2:	2306      	movs	r3, #6
 8002af4:	e023      	b.n	8002b3e <HAL_GPIO_Init+0x25a>
 8002af6:	2305      	movs	r3, #5
 8002af8:	e021      	b.n	8002b3e <HAL_GPIO_Init+0x25a>
 8002afa:	2304      	movs	r3, #4
 8002afc:	e01f      	b.n	8002b3e <HAL_GPIO_Init+0x25a>
 8002afe:	2303      	movs	r3, #3
 8002b00:	e01d      	b.n	8002b3e <HAL_GPIO_Init+0x25a>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e01b      	b.n	8002b3e <HAL_GPIO_Init+0x25a>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e019      	b.n	8002b3e <HAL_GPIO_Init+0x25a>
 8002b0a:	bf00      	nop
 8002b0c:	58000080 	.word	0x58000080
 8002b10:	58024400 	.word	0x58024400
 8002b14:	58000400 	.word	0x58000400
 8002b18:	58020000 	.word	0x58020000
 8002b1c:	58020400 	.word	0x58020400
 8002b20:	58020800 	.word	0x58020800
 8002b24:	58020c00 	.word	0x58020c00
 8002b28:	58021000 	.word	0x58021000
 8002b2c:	58021400 	.word	0x58021400
 8002b30:	58021800 	.word	0x58021800
 8002b34:	58021c00 	.word	0x58021c00
 8002b38:	58022400 	.word	0x58022400
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	f002 0203 	and.w	r2, r2, #3
 8002b44:	0092      	lsls	r2, r2, #2
 8002b46:	4093      	lsls	r3, r2
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b4e:	4938      	ldr	r1, [pc, #224]	@ (8002c30 <HAL_GPIO_Init+0x34c>)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	3302      	adds	r3, #2
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f ae6b 	bne.w	80028f8 <HAL_GPIO_Init+0x14>
  }
}
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
 8002c26:	3724      	adds	r7, #36	@ 0x24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	58000400 	.word	0x58000400

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e08b      	b.n	8002d92 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fb04 	bl	800129c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	@ 0x24
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	e006      	b.n	8002cf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d108      	bne.n	8002d0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	e007      	b.n	8002d1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b1d      	ldr	r3, [pc, #116]	@ (8002d9c <HAL_I2C_Init+0x134>)
 8002d26:	430b      	orrs	r3, r1
 8002d28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69d9      	ldr	r1, [r3, #28]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	02008000 	.word	0x02008000

08002da0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	4608      	mov	r0, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	461a      	mov	r2, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	817b      	strh	r3, [r7, #10]
 8002db2:	460b      	mov	r3, r1
 8002db4:	813b      	strh	r3, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	f040 80fd 	bne.w	8002fc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_I2C_Mem_Read+0x34>
 8002dce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dda:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0f1      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_I2C_Mem_Read+0x4e>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e0ea      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x224>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002df6:	f7fe fe59 	bl	8001aac <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2319      	movs	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f95b 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0d5      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2222      	movs	r2, #34	@ 0x22
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2240      	movs	r2, #64	@ 0x40
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e40:	88f8      	ldrh	r0, [r7, #6]
 8002e42:	893a      	ldrh	r2, [r7, #8]
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	4603      	mov	r3, r0
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f8bf 	bl	8002fd4 <I2C_RequestMemoryRead>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0ad      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2bff      	cmp	r3, #255	@ 0xff
 8002e70:	d90e      	bls.n	8002e90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	22ff      	movs	r2, #255	@ 0xff
 8002e76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	8979      	ldrh	r1, [r7, #10]
 8002e80:	4b52      	ldr	r3, [pc, #328]	@ (8002fcc <HAL_I2C_Mem_Read+0x22c>)
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fadf 	bl	800344c <I2C_TransferConfig>
 8002e8e:	e00f      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8002fcc <HAL_I2C_Mem_Read+0x22c>)
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 face 	bl	800344c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2104      	movs	r1, #4
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f902 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e07c      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d034      	beq.n	8002f70 <HAL_I2C_Mem_Read+0x1d0>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d130      	bne.n	8002f70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f14:	2200      	movs	r2, #0
 8002f16:	2180      	movs	r1, #128	@ 0x80
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f8d3 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e04d      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2bff      	cmp	r3, #255	@ 0xff
 8002f30:	d90e      	bls.n	8002f50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	22ff      	movs	r2, #255	@ 0xff
 8002f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	8979      	ldrh	r1, [r7, #10]
 8002f40:	2300      	movs	r3, #0
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fa7f 	bl	800344c <I2C_TransferConfig>
 8002f4e:	e00f      	b.n	8002f70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	8979      	ldrh	r1, [r7, #10]
 8002f62:	2300      	movs	r3, #0
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa6e 	bl	800344c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d19a      	bne.n	8002eb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f940 	bl	8003204 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e01a      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2220      	movs	r2, #32
 8002f94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_I2C_Mem_Read+0x230>)
 8002fa2:	400b      	ands	r3, r1
 8002fa4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
  }
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	80002400 	.word	0x80002400
 8002fd0:	fe00e800 	.word	0xfe00e800

08002fd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	817b      	strh	r3, [r7, #10]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	813b      	strh	r3, [r7, #8]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	8979      	ldrh	r1, [r7, #10]
 8002ff4:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <I2C_RequestMemoryRead+0xa4>)
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 fa26 	bl	800344c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f8b6 	bl	8003176 <I2C_WaitOnTXISFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e02c      	b.n	800306e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800301a:	893b      	ldrh	r3, [r7, #8]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	629a      	str	r2, [r3, #40]	@ 0x28
 8003024:	e015      	b.n	8003052 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003026:	893b      	ldrh	r3, [r7, #8]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	b29b      	uxth	r3, r3
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	69b9      	ldr	r1, [r7, #24]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f89c 	bl	8003176 <I2C_WaitOnTXISFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e012      	b.n	800306e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003048:	893b      	ldrh	r3, [r7, #8]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2200      	movs	r2, #0
 800305a:	2140      	movs	r1, #64	@ 0x40
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f831 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	80002000 	.word	0x80002000

0800307c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d103      	bne.n	800309a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d007      	beq.n	80030b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	619a      	str	r2, [r3, #24]
  }
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d4:	e03b      	b.n	800314e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f8d6 	bl	800328c <I2C_IsErrorOccurred>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e041      	b.n	800316e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030f0:	d02d      	beq.n	800314e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7fe fcdb 	bl	8001aac <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d122      	bne.n	800314e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	429a      	cmp	r2, r3
 8003124:	d113      	bne.n	800314e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	f043 0220 	orr.w	r2, r3, #32
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e00f      	b.n	800316e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	429a      	cmp	r2, r3
 800316a:	d0b4      	beq.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003182:	e033      	b.n	80031ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f87f 	bl	800328c <I2C_IsErrorOccurred>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e031      	b.n	80031fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800319e:	d025      	beq.n	80031ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a0:	f7fe fc84 	bl	8001aac <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d302      	bcc.n	80031b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11a      	bne.n	80031ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d013      	beq.n	80031ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d1c4      	bne.n	8003184 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003210:	e02f      	b.n	8003272 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f838 	bl	800328c <I2C_IsErrorOccurred>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e02d      	b.n	8003282 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7fe fc41 	bl	8001aac <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d11a      	bne.n	8003272 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b20      	cmp	r3, #32
 8003248:	d013      	beq.n	8003272 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e007      	b.n	8003282 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b20      	cmp	r3, #32
 800327e:	d1c8      	bne.n	8003212 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	@ 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d068      	beq.n	800338a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2210      	movs	r2, #16
 80032be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032c0:	e049      	b.n	8003356 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032c8:	d045      	beq.n	8003356 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032ca:	f7fe fbef 	bl	8001aac <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d302      	bcc.n	80032e0 <I2C_IsErrorOccurred+0x54>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d13a      	bne.n	8003356 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003302:	d121      	bne.n	8003348 <I2C_IsErrorOccurred+0xbc>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800330a:	d01d      	beq.n	8003348 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	2b20      	cmp	r3, #32
 8003310:	d01a      	beq.n	8003348 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003320:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003322:	f7fe fbc3 	bl	8001aac <HAL_GetTick>
 8003326:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003328:	e00e      	b.n	8003348 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800332a:	f7fe fbbf 	bl	8001aac <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b19      	cmp	r3, #25
 8003336:	d907      	bls.n	8003348 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	f043 0320 	orr.w	r3, r3, #32
 800333e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003346:	e006      	b.n	8003356 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	d1e9      	bne.n	800332a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b20      	cmp	r3, #32
 8003362:	d003      	beq.n	800336c <I2C_IsErrorOccurred+0xe0>
 8003364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0aa      	beq.n	80032c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800336c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80033f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01c      	beq.n	800343a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff fe3b 	bl	800307c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <I2C_IsErrorOccurred+0x1bc>)
 8003412:	400b      	ands	r3, r1
 8003414:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	431a      	orrs	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800343a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800343e:	4618      	mov	r0, r3
 8003440:	3728      	adds	r7, #40	@ 0x28
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	fe00e800 	.word	0xfe00e800

0800344c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	817b      	strh	r3, [r7, #10]
 800345a:	4613      	mov	r3, r2
 800345c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003464:	7a7b      	ldrb	r3, [r7, #9]
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800346c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	4313      	orrs	r3, r2
 8003476:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800347a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	0d5b      	lsrs	r3, r3, #21
 8003486:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <I2C_TransferConfig+0x60>)
 800348c:	430b      	orrs	r3, r1
 800348e:	43db      	mvns	r3, r3
 8003490:	ea02 0103 	and.w	r1, r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	03ff63ff 	.word	0x03ff63ff

080034b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d138      	bne.n	8003538 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e032      	b.n	800353a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	@ 0x24
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003502:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b20      	cmp	r3, #32
 800355a:	d139      	bne.n	80035d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003566:	2302      	movs	r3, #2
 8003568:	e033      	b.n	80035d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2224      	movs	r2, #36	@ 0x24
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003598:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035e8:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00a      	beq.n	800360a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035f4:	4b16      	ldr	r3, [pc, #88]	@ (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d001      	beq.n	8003606 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01f      	b.n	8003646 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e01d      	b.n	8003646 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800360a:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f023 0207 	bic.w	r2, r3, #7
 8003612:	490f      	ldr	r1, [pc, #60]	@ (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4313      	orrs	r3, r2
 8003618:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800361a:	f7fe fa47 	bl	8001aac <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003620:	e009      	b.n	8003636 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003622:	f7fe fa43 	bl	8001aac <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003630:	d901      	bls.n	8003636 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e007      	b.n	8003646 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_PWREx_ConfigSupply+0x70>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800363e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003642:	d1ee      	bne.n	8003622 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	58024800 	.word	0x58024800

08003654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	@ 0x30
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e3c8      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8087 	beq.w	8003782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003674:	4b88      	ldr	r3, [pc, #544]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800367e:	4b86      	ldr	r3, [pc, #536]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003682:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003686:	2b10      	cmp	r3, #16
 8003688:	d007      	beq.n	800369a <HAL_RCC_OscConfig+0x46>
 800368a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368c:	2b18      	cmp	r3, #24
 800368e:	d110      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5e>
 8003690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d10b      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369a:	4b7f      	ldr	r3, [pc, #508]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d06c      	beq.n	8003780 <HAL_RCC_OscConfig+0x12c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d168      	bne.n	8003780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e3a2      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x76>
 80036bc:	4b76      	ldr	r3, [pc, #472]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a75      	ldr	r2, [pc, #468]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e02e      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x98>
 80036d2:	4b71      	ldr	r3, [pc, #452]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a70      	ldr	r2, [pc, #448]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80036d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b6e      	ldr	r3, [pc, #440]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80036e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e01d      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0xbc>
 80036f6:	4b68      	ldr	r3, [pc, #416]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a67      	ldr	r2, [pc, #412]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80036fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b65      	ldr	r3, [pc, #404]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a64      	ldr	r2, [pc, #400]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e00b      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 8003710:	4b61      	ldr	r3, [pc, #388]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a60      	ldr	r2, [pc, #384]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b5e      	ldr	r3, [pc, #376]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a5d      	ldr	r2, [pc, #372]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d013      	beq.n	8003758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe f9bc 	bl	8001aac <HAL_GetTick>
 8003734:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fe f9b8 	bl	8001aac <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	@ 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e356      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800374a:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0xe4>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe f9a8 	bl	8001aac <HAL_GetTick>
 800375c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe f9a4 	bl	8001aac <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	@ 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e342      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003772:	4b49      	ldr	r3, [pc, #292]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x10c>
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 808c 	beq.w	80038a8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003790:	4b41      	ldr	r3, [pc, #260]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003798:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800379a:	4b3f      	ldr	r3, [pc, #252]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 800379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <HAL_RCC_OscConfig+0x162>
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	2b18      	cmp	r3, #24
 80037aa:	d137      	bne.n	800381c <HAL_RCC_OscConfig+0x1c8>
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d132      	bne.n	800381c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b6:	4b38      	ldr	r3, [pc, #224]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x17a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e314      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037ce:	4b32      	ldr	r3, [pc, #200]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 0219 	bic.w	r2, r3, #25
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	492f      	ldr	r1, [pc, #188]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe f964 	bl	8001aac <HAL_GetTick>
 80037e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e8:	f7fe f960 	bl	8001aac <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e2fe      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037fa:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	061b      	lsls	r3, r3, #24
 8003814:	4920      	ldr	r1, [pc, #128]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800381a:	e045      	b.n	80038a8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d026      	beq.n	8003872 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003824:	4b1c      	ldr	r3, [pc, #112]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 0219 	bic.w	r2, r3, #25
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4919      	ldr	r1, [pc, #100]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fe f939 	bl	8001aac <HAL_GetTick>
 800383a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383e:	f7fe f935 	bl	8001aac <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e2d3      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003850:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	490b      	ldr	r1, [pc, #44]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	e01a      	b.n	80038a8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003872:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a08      	ldr	r2, [pc, #32]	@ (8003898 <HAL_RCC_OscConfig+0x244>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fe f915 	bl	8001aac <HAL_GetTick>
 8003882:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003884:	e00a      	b.n	800389c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003886:	f7fe f911 	bl	8001aac <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d903      	bls.n	800389c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e2af      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
 8003898:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800389c:	4b96      	ldr	r3, [pc, #600]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ee      	bne.n	8003886 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d06a      	beq.n	800398a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b4:	4b90      	ldr	r3, [pc, #576]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038be:	4b8e      	ldr	r3, [pc, #568]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d007      	beq.n	80038da <HAL_RCC_OscConfig+0x286>
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b18      	cmp	r3, #24
 80038ce:	d11b      	bne.n	8003908 <HAL_RCC_OscConfig+0x2b4>
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d116      	bne.n	8003908 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038da:	4b87      	ldr	r3, [pc, #540]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_RCC_OscConfig+0x29e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2b80      	cmp	r3, #128	@ 0x80
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e282      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038f2:	4b81      	ldr	r3, [pc, #516]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	061b      	lsls	r3, r3, #24
 8003900:	497d      	ldr	r1, [pc, #500]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003906:	e040      	b.n	800398a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d023      	beq.n	8003958 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003910:	4b79      	ldr	r3, [pc, #484]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a78      	ldr	r2, [pc, #480]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800391a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe f8c6 	bl	8001aac <HAL_GetTick>
 8003920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003924:	f7fe f8c2 	bl	8001aac <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e260      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003936:	4b70      	ldr	r3, [pc, #448]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003942:	4b6d      	ldr	r3, [pc, #436]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	061b      	lsls	r3, r3, #24
 8003950:	4969      	ldr	r1, [pc, #420]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	60cb      	str	r3, [r1, #12]
 8003956:	e018      	b.n	800398a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003958:	4b67      	ldr	r3, [pc, #412]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a66      	ldr	r2, [pc, #408]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 800395e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fe f8a2 	bl	8001aac <HAL_GetTick>
 8003968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800396c:	f7fe f89e 	bl	8001aac <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e23c      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800397e:	4b5e      	ldr	r3, [pc, #376]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d036      	beq.n	8003a04 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d019      	beq.n	80039d2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399e:	4b56      	ldr	r3, [pc, #344]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a2:	4a55      	ldr	r2, [pc, #340]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fe f87f 	bl	8001aac <HAL_GetTick>
 80039ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b2:	f7fe f87b 	bl	8001aac <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e219      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039c4:	4b4c      	ldr	r3, [pc, #304]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x35e>
 80039d0:	e018      	b.n	8003a04 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d2:	4b49      	ldr	r3, [pc, #292]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d6:	4a48      	ldr	r2, [pc, #288]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7fe f865 	bl	8001aac <HAL_GetTick>
 80039e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e6:	f7fe f861 	bl	8001aac <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1ff      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039f8:	4b3f      	ldr	r3, [pc, #252]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 80039fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f0      	bne.n	80039e6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d036      	beq.n	8003a7e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d019      	beq.n	8003a4c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a18:	4b37      	ldr	r3, [pc, #220]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a36      	ldr	r2, [pc, #216]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a24:	f7fe f842 	bl	8001aac <HAL_GetTick>
 8003a28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a2c:	f7fe f83e 	bl	8001aac <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1dc      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x3d8>
 8003a4a:	e018      	b.n	8003a7e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a29      	ldr	r2, [pc, #164]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a58:	f7fe f828 	bl	8001aac <HAL_GetTick>
 8003a5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a60:	f7fe f824 	bl	8001aac <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1c2      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a72:	4b21      	ldr	r3, [pc, #132]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8086 	beq.w	8003b98 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003afc <HAL_RCC_OscConfig+0x4a8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1a      	ldr	r2, [pc, #104]	@ (8003afc <HAL_RCC_OscConfig+0x4a8>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a98:	f7fe f808 	bl	8001aac <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fe f804 	bl	8001aac <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	@ 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1a2      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab2:	4b12      	ldr	r3, [pc, #72]	@ (8003afc <HAL_RCC_OscConfig+0x4a8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d106      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x480>
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	4a0b      	ldr	r2, [pc, #44]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad2:	e032      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4ac>
 8003adc:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	4a05      	ldr	r2, [pc, #20]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae8:	4b03      	ldr	r3, [pc, #12]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	4a02      	ldr	r2, [pc, #8]	@ (8003af8 <HAL_RCC_OscConfig+0x4a4>)
 8003aee:	f023 0304 	bic.w	r3, r3, #4
 8003af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af4:	e021      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e6>
 8003af6:	bf00      	nop
 8003af8:	58024400 	.word	0x58024400
 8003afc:	58024800 	.word	0x58024800
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x4ce>
 8003b08:	4b83      	ldr	r3, [pc, #524]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	4a82      	ldr	r2, [pc, #520]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b14:	4b80      	ldr	r3, [pc, #512]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	4a7f      	ldr	r2, [pc, #508]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e6>
 8003b22:	4b7d      	ldr	r3, [pc, #500]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	4a7c      	ldr	r2, [pc, #496]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	4a79      	ldr	r2, [pc, #484]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fd ffb3 	bl	8001aac <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fd ffaf 	bl	8001aac <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e14b      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b60:	4b6d      	ldr	r3, [pc, #436]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RCC_OscConfig+0x4f6>
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fd ff9d 	bl	8001aac <HAL_GetTick>
 8003b72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fd ff99 	bl	8001aac <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e135      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b8c:	4b62      	ldr	r3, [pc, #392]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 812a 	beq.w	8003df6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003baa:	2b18      	cmp	r3, #24
 8003bac:	f000 80ba 	beq.w	8003d24 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	f040 8095 	bne.w	8003ce4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bba:	4b57      	ldr	r3, [pc, #348]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a56      	ldr	r2, [pc, #344]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003bc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fd ff71 	bl	8001aac <HAL_GetTick>
 8003bca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fd ff6d 	bl	8001aac <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e10b      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003be0:	4b4d      	ldr	r3, [pc, #308]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bec:	4b4a      	ldr	r3, [pc, #296]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003bee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d1c <HAL_RCC_OscConfig+0x6c8>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	4945      	ldr	r1, [pc, #276]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c14:	3b01      	subs	r3, #1
 8003c16:	025b      	lsls	r3, r3, #9
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	3b01      	subs	r3, #1
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c36:	4938      	ldr	r1, [pc, #224]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c3c:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	4a35      	ldr	r2, [pc, #212]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c48:	4b33      	ldr	r3, [pc, #204]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c4c:	4b34      	ldr	r3, [pc, #208]	@ (8003d20 <HAL_RCC_OscConfig+0x6cc>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c54:	00d2      	lsls	r2, r2, #3
 8003c56:	4930      	ldr	r1, [pc, #192]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	f023 020c 	bic.w	r2, r3, #12
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	492b      	ldr	r1, [pc, #172]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	f023 0202 	bic.w	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	4927      	ldr	r1, [pc, #156]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c80:	4b25      	ldr	r3, [pc, #148]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	4a24      	ldr	r2, [pc, #144]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8c:	4b22      	ldr	r3, [pc, #136]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	4a21      	ldr	r2, [pc, #132]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c98:	4b1f      	ldr	r3, [pc, #124]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003c9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb0:	4b19      	ldr	r3, [pc, #100]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a18      	ldr	r2, [pc, #96]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fef6 	bl	8001aac <HAL_GetTick>
 8003cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fd fef2 	bl	8001aac <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e090      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cd6:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x670>
 8003ce2:	e088      	b.n	8003df6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fedc 	bl	8001aac <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fd fed8 	bl	8001aac <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e076      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d0a:	4b03      	ldr	r3, [pc, #12]	@ (8003d18 <HAL_RCC_OscConfig+0x6c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x6a4>
 8003d16:	e06e      	b.n	8003df6 <HAL_RCC_OscConfig+0x7a2>
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	fffffc0c 	.word	0xfffffc0c
 8003d20:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d24:	4b36      	ldr	r3, [pc, #216]	@ (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d2a:	4b35      	ldr	r3, [pc, #212]	@ (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d031      	beq.n	8003d9c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0203 	and.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d12a      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d122      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d11a      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	0a5b      	lsrs	r3, r3, #9
 8003d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d111      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	0c1b      	lsrs	r3, r3, #16
 8003d7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d108      	bne.n	8003d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	0e1b      	lsrs	r3, r3, #24
 8003d8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e02b      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003da0:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003daa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d01f      	beq.n	8003df6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003db6:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dba:	4a11      	ldr	r2, [pc, #68]	@ (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dc2:	f7fd fe73 	bl	8001aac <HAL_GetTick>
 8003dc6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dc8:	bf00      	nop
 8003dca:	f7fd fe6f 	bl	8001aac <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d0f9      	beq.n	8003dca <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dda:	4b0a      	ldr	r3, [pc, #40]	@ (8003e04 <HAL_RCC_OscConfig+0x7b0>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003de2:	00d2      	lsls	r2, r2, #3
 8003de4:	4906      	ldr	r1, [pc, #24]	@ (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003dea:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	4a04      	ldr	r2, [pc, #16]	@ (8003e00 <HAL_RCC_OscConfig+0x7ac>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3730      	adds	r7, #48	@ 0x30
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	58024400 	.word	0x58024400
 8003e04:	ffff0007 	.word	0xffff0007

08003e08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e19c      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b8a      	ldr	r3, [pc, #552]	@ (8004048 <HAL_RCC_ClockConfig+0x240>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d910      	bls.n	8003e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b87      	ldr	r3, [pc, #540]	@ (8004048 <HAL_RCC_ClockConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 020f 	bic.w	r2, r3, #15
 8003e32:	4985      	ldr	r1, [pc, #532]	@ (8004048 <HAL_RCC_ClockConfig+0x240>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b83      	ldr	r3, [pc, #524]	@ (8004048 <HAL_RCC_ClockConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e184      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d010      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	4b7b      	ldr	r3, [pc, #492]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d908      	bls.n	8003e7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e68:	4b78      	ldr	r3, [pc, #480]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	4975      	ldr	r1, [pc, #468]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d010      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	4b70      	ldr	r3, [pc, #448]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d908      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e96:	4b6d      	ldr	r3, [pc, #436]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	496a      	ldr	r1, [pc, #424]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699a      	ldr	r2, [r3, #24]
 8003eb8:	4b64      	ldr	r3, [pc, #400]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d908      	bls.n	8003ed6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ec4:	4b61      	ldr	r3, [pc, #388]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	495e      	ldr	r1, [pc, #376]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d010      	beq.n	8003f04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69da      	ldr	r2, [r3, #28]
 8003ee6:	4b59      	ldr	r3, [pc, #356]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d908      	bls.n	8003f04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ef2:	4b56      	ldr	r3, [pc, #344]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	4953      	ldr	r1, [pc, #332]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d010      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	4b4d      	ldr	r3, [pc, #308]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d908      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b4a      	ldr	r3, [pc, #296]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f023 020f 	bic.w	r2, r3, #15
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4947      	ldr	r1, [pc, #284]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d055      	beq.n	8003fea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f3e:	4b43      	ldr	r3, [pc, #268]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4940      	ldr	r1, [pc, #256]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f58:	4b3c      	ldr	r3, [pc, #240]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d121      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0f6      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f70:	4b36      	ldr	r3, [pc, #216]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d115      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0ea      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f88:	4b30      	ldr	r3, [pc, #192]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0de      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f98:	4b2c      	ldr	r3, [pc, #176]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0d6      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa8:	4b28      	ldr	r3, [pc, #160]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f023 0207 	bic.w	r2, r3, #7
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4925      	ldr	r1, [pc, #148]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fba:	f7fd fd77 	bl	8001aac <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc2:	f7fd fd73 	bl	8001aac <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0be      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d1eb      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d010      	beq.n	8004018 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	4b14      	ldr	r3, [pc, #80]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	429a      	cmp	r2, r3
 8004004:	d208      	bcs.n	8004018 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004006:	4b11      	ldr	r3, [pc, #68]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f023 020f 	bic.w	r2, r3, #15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	490e      	ldr	r1, [pc, #56]	@ (800404c <HAL_RCC_ClockConfig+0x244>)
 8004014:	4313      	orrs	r3, r2
 8004016:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004018:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <HAL_RCC_ClockConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d214      	bcs.n	8004050 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b08      	ldr	r3, [pc, #32]	@ (8004048 <HAL_RCC_ClockConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 020f 	bic.w	r2, r3, #15
 800402e:	4906      	ldr	r1, [pc, #24]	@ (8004048 <HAL_RCC_ClockConfig+0x240>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b04      	ldr	r3, [pc, #16]	@ (8004048 <HAL_RCC_ClockConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e086      	b.n	8004156 <HAL_RCC_ClockConfig+0x34e>
 8004048:	52002000 	.word	0x52002000
 800404c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d010      	beq.n	800407e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	4b3f      	ldr	r3, [pc, #252]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004068:	429a      	cmp	r2, r3
 800406a:	d208      	bcs.n	800407e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800406c:	4b3c      	ldr	r3, [pc, #240]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	4939      	ldr	r1, [pc, #228]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 800407a:	4313      	orrs	r3, r2
 800407c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	4b34      	ldr	r3, [pc, #208]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004096:	429a      	cmp	r2, r3
 8004098:	d208      	bcs.n	80040ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800409a:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	492e      	ldr	r1, [pc, #184]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	4b28      	ldr	r3, [pc, #160]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d208      	bcs.n	80040da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040c8:	4b25      	ldr	r3, [pc, #148]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	4922      	ldr	r1, [pc, #136]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d010      	beq.n	8004108 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d208      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	4917      	ldr	r1, [pc, #92]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004104:	4313      	orrs	r3, r2
 8004106:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004108:	f000 f834 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b14      	ldr	r3, [pc, #80]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	4912      	ldr	r1, [pc, #72]	@ (8004164 <HAL_RCC_ClockConfig+0x35c>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
 8004124:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004126:	4b0e      	ldr	r3, [pc, #56]	@ (8004160 <HAL_RCC_ClockConfig+0x358>)
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	4a0d      	ldr	r2, [pc, #52]	@ (8004164 <HAL_RCC_ClockConfig+0x35c>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
 800413c:	4a0a      	ldr	r2, [pc, #40]	@ (8004168 <HAL_RCC_ClockConfig+0x360>)
 800413e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004140:	4a0a      	ldr	r2, [pc, #40]	@ (800416c <HAL_RCC_ClockConfig+0x364>)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004146:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <HAL_RCC_ClockConfig+0x368>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fc64 	bl	8001a18 <HAL_InitTick>
 8004150:	4603      	mov	r3, r0
 8004152:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
 8004164:	0800b65c 	.word	0x0800b65c
 8004168:	24000014 	.word	0x24000014
 800416c:	24000010 	.word	0x24000010
 8004170:	24000018 	.word	0x24000018

08004174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	b480      	push	{r7}
 8004176:	b089      	sub	sp, #36	@ 0x24
 8004178:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800417a:	4bb3      	ldr	r3, [pc, #716]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004182:	2b18      	cmp	r3, #24
 8004184:	f200 8155 	bhi.w	8004432 <HAL_RCC_GetSysClockFreq+0x2be>
 8004188:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <HAL_RCC_GetSysClockFreq+0x1c>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041f5 	.word	0x080041f5
 8004194:	08004433 	.word	0x08004433
 8004198:	08004433 	.word	0x08004433
 800419c:	08004433 	.word	0x08004433
 80041a0:	08004433 	.word	0x08004433
 80041a4:	08004433 	.word	0x08004433
 80041a8:	08004433 	.word	0x08004433
 80041ac:	08004433 	.word	0x08004433
 80041b0:	0800421b 	.word	0x0800421b
 80041b4:	08004433 	.word	0x08004433
 80041b8:	08004433 	.word	0x08004433
 80041bc:	08004433 	.word	0x08004433
 80041c0:	08004433 	.word	0x08004433
 80041c4:	08004433 	.word	0x08004433
 80041c8:	08004433 	.word	0x08004433
 80041cc:	08004433 	.word	0x08004433
 80041d0:	08004221 	.word	0x08004221
 80041d4:	08004433 	.word	0x08004433
 80041d8:	08004433 	.word	0x08004433
 80041dc:	08004433 	.word	0x08004433
 80041e0:	08004433 	.word	0x08004433
 80041e4:	08004433 	.word	0x08004433
 80041e8:	08004433 	.word	0x08004433
 80041ec:	08004433 	.word	0x08004433
 80041f0:	08004227 	.word	0x08004227
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f4:	4b94      	ldr	r3, [pc, #592]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004200:	4b91      	ldr	r3, [pc, #580]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	4a90      	ldr	r2, [pc, #576]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004212:	e111      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004214:	4b8d      	ldr	r3, [pc, #564]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004216:	61bb      	str	r3, [r7, #24]
      break;
 8004218:	e10e      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800421a:	4b8d      	ldr	r3, [pc, #564]	@ (8004450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800421c:	61bb      	str	r3, [r7, #24]
      break;
 800421e:	e10b      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004220:	4b8c      	ldr	r3, [pc, #560]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004222:	61bb      	str	r3, [r7, #24]
      break;
 8004224:	e108      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004226:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004230:	4b85      	ldr	r3, [pc, #532]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800423a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800423c:	4b82      	ldr	r3, [pc, #520]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004246:	4b80      	ldr	r3, [pc, #512]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424a:	08db      	lsrs	r3, r3, #3
 800424c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80e1 	beq.w	800442c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b02      	cmp	r3, #2
 800426e:	f000 8083 	beq.w	8004378 <HAL_RCC_GetSysClockFreq+0x204>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b02      	cmp	r3, #2
 8004276:	f200 80a1 	bhi.w	80043bc <HAL_RCC_GetSysClockFreq+0x248>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x114>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d056      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004286:	e099      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004288:	4b6f      	ldr	r3, [pc, #444]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02d      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004294:	4b6c      	ldr	r3, [pc, #432]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	4a6b      	ldr	r2, [pc, #428]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b62      	ldr	r3, [pc, #392]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042ee:	e087      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800445c <HAL_RCC_GetSysClockFreq+0x2e8>
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b51      	ldr	r3, [pc, #324]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a02 	vldr	s12, [r7, #8]
 8004316:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004332:	e065      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004460 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b40      	ldr	r3, [pc, #256]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a02 	vldr	s12, [r7, #8]
 800435a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004376:	e043      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004464 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b2f      	ldr	r3, [pc, #188]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a02 	vldr	s12, [r7, #8]
 800439e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043ba:	e021      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004460 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004400:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	0a5b      	lsrs	r3, r3, #9
 8004406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440a:	3301      	adds	r3, #1
 800440c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004418:	edd7 6a07 	vldr	s13, [r7, #28]
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004424:	ee17 3a90 	vmov	r3, s15
 8004428:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800442a:	e005      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
      break;
 8004430:	e002      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004432:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004434:	61bb      	str	r3, [r7, #24]
      break;
 8004436:	bf00      	nop
  }

  return sysclockfreq;
 8004438:	69bb      	ldr	r3, [r7, #24]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3724      	adds	r7, #36	@ 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	58024400 	.word	0x58024400
 800444c:	03d09000 	.word	0x03d09000
 8004450:	003d0900 	.word	0x003d0900
 8004454:	017d7840 	.word	0x017d7840
 8004458:	46000000 	.word	0x46000000
 800445c:	4c742400 	.word	0x4c742400
 8004460:	4a742400 	.word	0x4a742400
 8004464:	4bbebc20 	.word	0x4bbebc20

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800446e:	f7ff fe81 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8004472:	4602      	mov	r2, r0
 8004474:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	490f      	ldr	r1, [pc, #60]	@ (80044bc <HAL_RCC_GetHCLKFreq+0x54>)
 8004480:	5ccb      	ldrb	r3, [r1, r3]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800448c:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	4a09      	ldr	r2, [pc, #36]	@ (80044bc <HAL_RCC_GetHCLKFreq+0x54>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	fa22 f303 	lsr.w	r3, r2, r3
 80044a2:	4a07      	ldr	r2, [pc, #28]	@ (80044c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80044a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044a6:	4a07      	ldr	r2, [pc, #28]	@ (80044c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044ac:	4b04      	ldr	r3, [pc, #16]	@ (80044c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	58024400 	.word	0x58024400
 80044bc:	0800b65c 	.word	0x0800b65c
 80044c0:	24000014 	.word	0x24000014
 80044c4:	24000010 	.word	0x24000010

080044c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044cc:	f7ff ffcc 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4904      	ldr	r1, [pc, #16]	@ (80044f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	58024400 	.word	0x58024400
 80044f0:	0800b65c 	.word	0x0800b65c

080044f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80044f8:	f7ff ffb6 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4904      	ldr	r1, [pc, #16]	@ (800451c <HAL_RCC_GetPCLK2Freq+0x28>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	58024400 	.word	0x58024400
 800451c:	0800b65c 	.word	0x0800b65c

08004520 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004524:	b0c6      	sub	sp, #280	@ 0x118
 8004526:	af00      	add	r7, sp, #0
 8004528:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800452c:	2300      	movs	r3, #0
 800452e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004532:	2300      	movs	r3, #0
 8004534:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004544:	2500      	movs	r5, #0
 8004546:	ea54 0305 	orrs.w	r3, r4, r5
 800454a:	d049      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800454c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004552:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004556:	d02f      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004558:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800455c:	d828      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800455e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004562:	d01a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004564:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004568:	d822      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004572:	d007      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004574:	e01c      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004576:	4bab      	ldr	r3, [pc, #684]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	4aaa      	ldr	r2, [pc, #680]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800457c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004582:	e01a      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004588:	3308      	adds	r3, #8
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f001 fc25 	bl	8005ddc <RCCEx_PLL2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004598:	e00f      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800459a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459e:	3328      	adds	r3, #40	@ 0x28
 80045a0:	2102      	movs	r1, #2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 fccc 	bl	8005f40 <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80045b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045c2:	4b98      	ldr	r3, [pc, #608]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045d0:	4a94      	ldr	r2, [pc, #592]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045d2:	430b      	orrs	r3, r1
 80045d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80045d6:	e003      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80045ec:	f04f 0900 	mov.w	r9, #0
 80045f0:	ea58 0309 	orrs.w	r3, r8, r9
 80045f4:	d047      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d82a      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004600:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800461d 	.word	0x0800461d
 800460c:	0800462b 	.word	0x0800462b
 8004610:	08004641 	.word	0x08004641
 8004614:	0800465f 	.word	0x0800465f
 8004618:	0800465f 	.word	0x0800465f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4b81      	ldr	r3, [pc, #516]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004620:	4a80      	ldr	r2, [pc, #512]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004628:	e01a      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800462a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800462e:	3308      	adds	r3, #8
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f001 fbd2 	bl	8005ddc <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800463e:	e00f      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004644:	3328      	adds	r3, #40	@ 0x28
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f001 fc79 	bl	8005f40 <RCCEx_PLL3_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004654:	e004      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800465c:	e000      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800465e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004668:	4b6e      	ldr	r3, [pc, #440]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800466a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466c:	f023 0107 	bic.w	r1, r3, #7
 8004670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004676:	4a6b      	ldr	r2, [pc, #428]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004678:	430b      	orrs	r3, r1
 800467a:	6513      	str	r3, [r2, #80]	@ 0x50
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004682:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004692:	f04f 0b00 	mov.w	fp, #0
 8004696:	ea5a 030b 	orrs.w	r3, sl, fp
 800469a:	d05b      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800469c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046a4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80046a8:	d03b      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80046aa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80046ae:	d834      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046b4:	d037      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80046b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046ba:	d82e      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80046c0:	d033      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80046c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80046c6:	d828      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046cc:	d01a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80046ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046d2:	d822      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80046d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046dc:	d007      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80046de:	e01c      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e0:	4b50      	ldr	r3, [pc, #320]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	4a4f      	ldr	r2, [pc, #316]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046ec:	e01e      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f2:	3308      	adds	r3, #8
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 fb70 	bl	8005ddc <RCCEx_PLL2_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004702:	e013      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004708:	3328      	adds	r3, #40	@ 0x28
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f001 fc17 	bl	8005f40 <RCCEx_PLL3_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004718:	e008      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004720:	e004      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004722:	bf00      	nop
 8004724:	e002      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004726:	bf00      	nop
 8004728:	e000      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800472a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004734:	4b3b      	ldr	r3, [pc, #236]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004738:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800473c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004740:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004744:	4a37      	ldr	r2, [pc, #220]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004746:	430b      	orrs	r3, r1
 8004748:	6593      	str	r3, [r2, #88]	@ 0x58
 800474a:	e003      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004750:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004760:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800476a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d05d      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004778:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800477c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004780:	d03b      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004782:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004786:	d834      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004788:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800478c:	d037      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800478e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004792:	d82e      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004794:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004798:	d033      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800479a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800479e:	d828      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047a4:	d01a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80047a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047aa:	d822      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80047b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047b4:	d007      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80047b6:	e01c      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	4a19      	ldr	r2, [pc, #100]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047c4:	e01e      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ca:	3308      	adds	r3, #8
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fb04 	bl	8005ddc <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047da:	e013      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e0:	3328      	adds	r3, #40	@ 0x28
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 fbab 	bl	8005f40 <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047f0:	e008      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047f8:	e004      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10d      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800480c:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004810:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004818:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800481c:	4a01      	ldr	r2, [pc, #4]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800481e:	430b      	orrs	r3, r1
 8004820:	6593      	str	r3, [r2, #88]	@ 0x58
 8004822:	e005      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800482c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800483c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004846:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d03a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004856:	2b30      	cmp	r3, #48	@ 0x30
 8004858:	d01f      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800485a:	2b30      	cmp	r3, #48	@ 0x30
 800485c:	d819      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800485e:	2b20      	cmp	r3, #32
 8004860:	d00c      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004862:	2b20      	cmp	r3, #32
 8004864:	d815      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d019      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800486a:	2b10      	cmp	r3, #16
 800486c:	d111      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486e:	4baa      	ldr	r3, [pc, #680]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004872:	4aa9      	ldr	r2, [pc, #676]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800487c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004880:	3308      	adds	r3, #8
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f001 faa9 	bl	8005ddc <RCCEx_PLL2_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004898:	e002      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800489e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80048a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80048b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b6:	4a98      	ldr	r2, [pc, #608]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048b8:	430b      	orrs	r3, r1
 80048ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80048d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80048dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80048e0:	460b      	mov	r3, r1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	d051      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80048e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048f0:	d035      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80048f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048f6:	d82e      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048fc:	d031      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80048fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004902:	d828      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004908:	d01a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490e:	d822      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004918:	d007      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800491a:	e01c      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	4a7d      	ldr	r2, [pc, #500]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004928:	e01c      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800492a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492e:	3308      	adds	r3, #8
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fa52 	bl	8005ddc <RCCEx_PLL2_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800493e:	e011      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004944:	3328      	adds	r3, #40	@ 0x28
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f001 faf9 	bl	8005f40 <RCCEx_PLL3_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004954:	e006      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800495c:	e002      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800496c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800496e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004970:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497a:	4a67      	ldr	r2, [pc, #412]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800497c:	430b      	orrs	r3, r1
 800497e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004980:	e003      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004996:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800499a:	2300      	movs	r3, #0
 800499c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049a0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4313      	orrs	r3, r2
 80049a8:	d053      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80049aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049b4:	d033      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80049b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049ba:	d82c      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049c0:	d02f      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80049c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049c6:	d826      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049cc:	d02b      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80049ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049d2:	d820      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049d8:	d012      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80049da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049de:	d81a      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d022      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e8:	d115      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ee:	3308      	adds	r3, #8
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 f9f2 	bl	8005ddc <RCCEx_PLL2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049fe:	e015      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a04:	3328      	adds	r3, #40	@ 0x28
 8004a06:	2101      	movs	r1, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 fa99 	bl	8005f40 <RCCEx_PLL3_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a14:	e00a      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a1c:	e006      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a1e:	bf00      	nop
 8004a20:	e004      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a22:	bf00      	nop
 8004a24:	e002      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a26:	bf00      	nop
 8004a28:	e000      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a34:	4b38      	ldr	r3, [pc, #224]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a38:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a42:	4a35      	ldr	r2, [pc, #212]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a48:	e003      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004a68:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d058      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a7e:	d033      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a84:	d82c      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a8a:	d02f      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a90:	d826      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a96:	d02b      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004a98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a9c:	d820      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aa2:	d012      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aa8:	d81a      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d022      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004aae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ab2:	d115      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab8:	3308      	adds	r3, #8
 8004aba:	2101      	movs	r1, #1
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 f98d 	bl	8005ddc <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e015      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ace:	3328      	adds	r3, #40	@ 0x28
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fa34 	bl	8005f40 <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ade:	e00a      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ae6:	e006      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ae8:	bf00      	nop
 8004aea:	e004      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004aec:	bf00      	nop
 8004aee:	e002      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004af0:	bf00      	nop
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10e      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004afe:	4b06      	ldr	r3, [pc, #24]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b0e:	4a02      	ldr	r2, [pc, #8]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b14:	e006      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004b16:	bf00      	nop
 8004b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004b3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4313      	orrs	r3, r2
 8004b42:	d037      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b4e:	d00e      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b54:	d816      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d018      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b5e:	d111      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b60:	4bc4      	ldr	r3, [pc, #784]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	4ac3      	ldr	r2, [pc, #780]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b6c:	e00f      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b72:	3308      	adds	r3, #8
 8004b74:	2101      	movs	r1, #1
 8004b76:	4618      	mov	r0, r3
 8004b78:	f001 f930 	bl	8005ddc <RCCEx_PLL2_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b82:	e004      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b8a:	e000      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b96:	4bb7      	ldr	r3, [pc, #732]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba4:	4ab3      	ldr	r2, [pc, #716]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004bca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d039      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d81c      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004bde:	a201      	add	r2, pc, #4	@ (adr r2, 8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004c21 	.word	0x08004c21
 8004be8:	08004bf5 	.word	0x08004bf5
 8004bec:	08004c03 	.word	0x08004c03
 8004bf0:	08004c21 	.word	0x08004c21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf4:	4b9f      	ldr	r3, [pc, #636]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	4a9e      	ldr	r2, [pc, #632]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c00:	e00f      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c06:	3308      	adds	r3, #8
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 f8e6 	bl	8005ddc <RCCEx_PLL2_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c16:	e004      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c1e:	e000      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c2a:	4b92      	ldr	r3, [pc, #584]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c2e:	f023 0103 	bic.w	r1, r3, #3
 8004c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c38:	4a8e      	ldr	r2, [pc, #568]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c3e:	e003      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f000 8099 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c6a:	4b83      	ldr	r3, [pc, #524]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a82      	ldr	r2, [pc, #520]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c76:	f7fc ff19 	bl	8001aac <HAL_GetTick>
 8004c7a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fc ff14 	bl	8001aac <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b64      	cmp	r3, #100	@ 0x64
 8004c8e:	d903      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c96:	e005      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c98:	4b77      	ldr	r3, [pc, #476]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0ed      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d173      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004cac:	4b71      	ldr	r3, [pc, #452]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cb8:	4053      	eors	r3, r2
 8004cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d015      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc2:	4b6c      	ldr	r3, [pc, #432]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cce:	4b69      	ldr	r3, [pc, #420]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd2:	4a68      	ldr	r2, [pc, #416]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cda:	4b66      	ldr	r3, [pc, #408]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cde:	4a65      	ldr	r2, [pc, #404]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ce6:	4a63      	ldr	r2, [pc, #396]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cfa:	d118      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fed6 	bl	8001aac <HAL_GetTick>
 8004d00:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d04:	e00d      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d06:	f7fc fed1 	bl	8001aac <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004d10:	1ad2      	subs	r2, r2, r3
 8004d12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d903      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004d20:	e005      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d22:	4b54      	ldr	r3, [pc, #336]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0eb      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d129      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d46:	d10e      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004d48:	4b4a      	ldr	r3, [pc, #296]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d58:	091a      	lsrs	r2, r3, #4
 8004d5a:	4b48      	ldr	r3, [pc, #288]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	4a45      	ldr	r2, [pc, #276]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6113      	str	r3, [r2, #16]
 8004d64:	e005      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004d66:	4b43      	ldr	r3, [pc, #268]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	4a42      	ldr	r2, [pc, #264]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d70:	6113      	str	r3, [r2, #16]
 8004d72:	4b40      	ldr	r3, [pc, #256]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d74:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d82:	4a3c      	ldr	r2, [pc, #240]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d84:	430b      	orrs	r3, r1
 8004d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d88:	e008      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f002 0301 	and.w	r3, r2, #1
 8004da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004db2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f000 808f 	beq.w	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dc4:	2b28      	cmp	r3, #40	@ 0x28
 8004dc6:	d871      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004eb5 	.word	0x08004eb5
 8004dd4:	08004ead 	.word	0x08004ead
 8004dd8:	08004ead 	.word	0x08004ead
 8004ddc:	08004ead 	.word	0x08004ead
 8004de0:	08004ead 	.word	0x08004ead
 8004de4:	08004ead 	.word	0x08004ead
 8004de8:	08004ead 	.word	0x08004ead
 8004dec:	08004ead 	.word	0x08004ead
 8004df0:	08004e81 	.word	0x08004e81
 8004df4:	08004ead 	.word	0x08004ead
 8004df8:	08004ead 	.word	0x08004ead
 8004dfc:	08004ead 	.word	0x08004ead
 8004e00:	08004ead 	.word	0x08004ead
 8004e04:	08004ead 	.word	0x08004ead
 8004e08:	08004ead 	.word	0x08004ead
 8004e0c:	08004ead 	.word	0x08004ead
 8004e10:	08004e97 	.word	0x08004e97
 8004e14:	08004ead 	.word	0x08004ead
 8004e18:	08004ead 	.word	0x08004ead
 8004e1c:	08004ead 	.word	0x08004ead
 8004e20:	08004ead 	.word	0x08004ead
 8004e24:	08004ead 	.word	0x08004ead
 8004e28:	08004ead 	.word	0x08004ead
 8004e2c:	08004ead 	.word	0x08004ead
 8004e30:	08004eb5 	.word	0x08004eb5
 8004e34:	08004ead 	.word	0x08004ead
 8004e38:	08004ead 	.word	0x08004ead
 8004e3c:	08004ead 	.word	0x08004ead
 8004e40:	08004ead 	.word	0x08004ead
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004ead 	.word	0x08004ead
 8004e4c:	08004ead 	.word	0x08004ead
 8004e50:	08004eb5 	.word	0x08004eb5
 8004e54:	08004ead 	.word	0x08004ead
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004ead 	.word	0x08004ead
 8004e60:	08004ead 	.word	0x08004ead
 8004e64:	08004ead 	.word	0x08004ead
 8004e68:	08004ead 	.word	0x08004ead
 8004e6c:	08004ead 	.word	0x08004ead
 8004e70:	08004eb5 	.word	0x08004eb5
 8004e74:	58024400 	.word	0x58024400
 8004e78:	58024800 	.word	0x58024800
 8004e7c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e84:	3308      	adds	r3, #8
 8004e86:	2101      	movs	r1, #1
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 ffa7 	bl	8005ddc <RCCEx_PLL2_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e94:	e00f      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e9a:	3328      	adds	r3, #40	@ 0x28
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 f84e 	bl	8005f40 <RCCEx_PLL3_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004eaa:	e004      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ebe:	4bbf      	ldr	r3, [pc, #764]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ecc:	4abb      	ldr	r2, [pc, #748]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ed2:	e003      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ed8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f002 0302 	and.w	r3, r2, #2
 8004ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ef2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d041      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d824      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f59 	.word	0x08004f59
 8004f10:	08004f25 	.word	0x08004f25
 8004f14:	08004f3b 	.word	0x08004f3b
 8004f18:	08004f59 	.word	0x08004f59
 8004f1c:	08004f59 	.word	0x08004f59
 8004f20:	08004f59 	.word	0x08004f59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f28:	3308      	adds	r3, #8
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 ff55 	bl	8005ddc <RCCEx_PLL2_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f38:	e00f      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3e:	3328      	adds	r3, #40	@ 0x28
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fffc 	bl	8005f40 <RCCEx_PLL3_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f4e:	e004      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f56:	e000      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f62:	4b96      	ldr	r3, [pc, #600]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f66:	f023 0107 	bic.w	r1, r3, #7
 8004f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f70:	4a92      	ldr	r2, [pc, #584]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f72:	430b      	orrs	r3, r1
 8004f74:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f76:	e003      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f002 0304 	and.w	r3, r2, #4
 8004f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f90:	2300      	movs	r3, #0
 8004f92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f96:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	d044      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d825      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004fac:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08005001 	.word	0x08005001
 8004fb8:	08004fcd 	.word	0x08004fcd
 8004fbc:	08004fe3 	.word	0x08004fe3
 8004fc0:	08005001 	.word	0x08005001
 8004fc4:	08005001 	.word	0x08005001
 8004fc8:	08005001 	.word	0x08005001
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 ff01 	bl	8005ddc <RCCEx_PLL2_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004fe0:	e00f      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe6:	3328      	adds	r3, #40	@ 0x28
 8004fe8:	2101      	movs	r1, #1
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 ffa8 	bl	8005f40 <RCCEx_PLL3_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ff6:	e004      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ffe:	e000      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800500a:	4b6c      	ldr	r3, [pc, #432]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500e:	f023 0107 	bic.w	r1, r3, #7
 8005012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501a:	4a68      	ldr	r2, [pc, #416]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800501c:	430b      	orrs	r3, r1
 800501e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005020:	e003      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005026:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f002 0320 	and.w	r3, r2, #32
 8005036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005040:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005044:	460b      	mov	r3, r1
 8005046:	4313      	orrs	r3, r2
 8005048:	d055      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005056:	d033      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800505c:	d82c      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005062:	d02f      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005068:	d826      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800506a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800506e:	d02b      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005070:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005074:	d820      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005076:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800507a:	d012      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800507c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005080:	d81a      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d022      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005086:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800508a:	d115      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005090:	3308      	adds	r3, #8
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fea1 	bl	8005ddc <RCCEx_PLL2_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80050a0:	e015      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a6:	3328      	adds	r3, #40	@ 0x28
 80050a8:	2102      	movs	r1, #2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ff48 	bl	8005f40 <RCCEx_PLL3_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80050b6:	e00a      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050be:	e006      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050c0:	bf00      	nop
 80050c2:	e004      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050c4:	bf00      	nop
 80050c6:	e002      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050c8:	bf00      	nop
 80050ca:	e000      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050d6:	4b39      	ldr	r3, [pc, #228]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80050de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050e6:	4a35      	ldr	r2, [pc, #212]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050e8:	430b      	orrs	r3, r1
 80050ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80050ec:	e003      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005102:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005106:	2300      	movs	r3, #0
 8005108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800510c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005110:	460b      	mov	r3, r1
 8005112:	4313      	orrs	r3, r2
 8005114:	d058      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800511e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005122:	d033      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005124:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005128:	d82c      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512e:	d02f      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005134:	d826      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005136:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800513a:	d02b      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800513c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005140:	d820      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005146:	d012      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800514c:	d81a      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d022      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005156:	d115      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515c:	3308      	adds	r3, #8
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fe3b 	bl	8005ddc <RCCEx_PLL2_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800516c:	e015      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005172:	3328      	adds	r3, #40	@ 0x28
 8005174:	2102      	movs	r1, #2
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fee2 	bl	8005f40 <RCCEx_PLL3_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005182:	e00a      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800518a:	e006      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800518c:	bf00      	nop
 800518e:	e004      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005190:	bf00      	nop
 8005192:	e002      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005194:	bf00      	nop
 8005196:	e000      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10e      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051a2:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80051aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051b2:	4a02      	ldr	r2, [pc, #8]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80051b8:	e006      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80051ba:	bf00      	nop
 80051bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80051d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051d8:	2300      	movs	r3, #0
 80051da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80051e2:	460b      	mov	r3, r1
 80051e4:	4313      	orrs	r3, r2
 80051e6:	d055      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80051e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80051f4:	d033      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80051f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80051fa:	d82c      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005200:	d02f      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005206:	d826      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005208:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800520c:	d02b      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800520e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005212:	d820      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005218:	d012      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800521a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800521e:	d81a      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d022      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005228:	d115      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800522a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522e:	3308      	adds	r3, #8
 8005230:	2100      	movs	r1, #0
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fdd2 	bl	8005ddc <RCCEx_PLL2_Config>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800523e:	e015      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005244:	3328      	adds	r3, #40	@ 0x28
 8005246:	2102      	movs	r1, #2
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fe79 	bl	8005f40 <RCCEx_PLL3_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005254:	e00a      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800525c:	e006      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800525e:	bf00      	nop
 8005260:	e004      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005262:	bf00      	nop
 8005264:	e002      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800526a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800526c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10b      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005274:	4ba0      	ldr	r3, [pc, #640]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005278:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005280:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005284:	4a9c      	ldr	r2, [pc, #624]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005286:	430b      	orrs	r3, r1
 8005288:	6593      	str	r3, [r2, #88]	@ 0x58
 800528a:	e003      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005290:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f002 0308 	and.w	r3, r2, #8
 80052a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052a4:	2300      	movs	r3, #0
 80052a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80052aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80052ae:	460b      	mov	r3, r1
 80052b0:	4313      	orrs	r3, r2
 80052b2:	d01e      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c6:	3328      	adds	r3, #40	@ 0x28
 80052c8:	2102      	movs	r1, #2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fe38 	bl	8005f40 <RCCEx_PLL3_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80052dc:	4b86      	ldr	r3, [pc, #536]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ec:	4a82      	ldr	r2, [pc, #520]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052ee:	430b      	orrs	r3, r1
 80052f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f002 0310 	and.w	r3, r2, #16
 80052fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005302:	2300      	movs	r3, #0
 8005304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005308:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800530c:	460b      	mov	r3, r1
 800530e:	4313      	orrs	r3, r2
 8005310:	d01e      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800531a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800531e:	d10c      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005324:	3328      	adds	r3, #40	@ 0x28
 8005326:	2102      	movs	r1, #2
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fe09 	bl	8005f40 <RCCEx_PLL3_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800533a:	4b6f      	ldr	r3, [pc, #444]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800534a:	4a6b      	ldr	r2, [pc, #428]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800534c:	430b      	orrs	r3, r1
 800534e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800535c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800535e:	2300      	movs	r3, #0
 8005360:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005362:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005366:	460b      	mov	r3, r1
 8005368:	4313      	orrs	r3, r2
 800536a:	d03e      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005378:	d022      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800537a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800537e:	d81b      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005388:	d00b      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800538a:	e015      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005390:	3308      	adds	r3, #8
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fd21 	bl	8005ddc <RCCEx_PLL2_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80053a0:	e00f      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a6:	3328      	adds	r3, #40	@ 0x28
 80053a8:	2102      	movs	r1, #2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fdc8 	bl	8005f40 <RCCEx_PLL3_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80053b6:	e004      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053be:	e000      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80053c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053ca:	4b4b      	ldr	r3, [pc, #300]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80053d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053da:	4a47      	ldr	r2, [pc, #284]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053dc:	430b      	orrs	r3, r1
 80053de:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e0:	e003      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80053f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80053f8:	2300      	movs	r3, #0
 80053fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80053fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005400:	460b      	mov	r3, r1
 8005402:	4313      	orrs	r3, r2
 8005404:	d03b      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800540e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005412:	d01f      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005414:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005418:	d818      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800541a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800541e:	d003      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005424:	d007      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005426:	e011      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005428:	4b33      	ldr	r3, [pc, #204]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542c:	4a32      	ldr	r2, [pc, #200]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800542e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005434:	e00f      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543a:	3328      	adds	r3, #40	@ 0x28
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fd7e 	bl	8005f40 <RCCEx_PLL3_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800544a:	e004      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005452:	e000      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10b      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800545e:	4b26      	ldr	r3, [pc, #152]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005462:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800546e:	4a22      	ldr	r2, [pc, #136]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005470:	430b      	orrs	r3, r1
 8005472:	6553      	str	r3, [r2, #84]	@ 0x54
 8005474:	e003      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005476:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800547a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800547e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800548a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800548c:	2300      	movs	r3, #0
 800548e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005490:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005494:	460b      	mov	r3, r1
 8005496:	4313      	orrs	r3, r2
 8005498:	d034      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a8:	d007      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80054aa:	e011      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ac:	4b12      	ldr	r3, [pc, #72]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b0:	4a11      	ldr	r2, [pc, #68]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054b8:	e00e      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054be:	3308      	adds	r3, #8
 80054c0:	2102      	movs	r1, #2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fc8a 	bl	8005ddc <RCCEx_PLL2_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054ce:	e003      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10d      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054e0:	4b05      	ldr	r3, [pc, #20]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ee:	4a02      	ldr	r2, [pc, #8]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054f4:	e006      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80054f6:	bf00      	nop
 80054f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005510:	663b      	str	r3, [r7, #96]	@ 0x60
 8005512:	2300      	movs	r3, #0
 8005514:	667b      	str	r3, [r7, #100]	@ 0x64
 8005516:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800551a:	460b      	mov	r3, r1
 800551c:	4313      	orrs	r3, r2
 800551e:	d00c      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005524:	3328      	adds	r3, #40	@ 0x28
 8005526:	2102      	movs	r1, #2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fd09 	bl	8005f40 <RCCEx_PLL3_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800553a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005546:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005548:	2300      	movs	r3, #0
 800554a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800554c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d036      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800555c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005560:	d018      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005566:	d811      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800556c:	d014      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800556e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005572:	d80b      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d011      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800557c:	d106      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557e:	4bb7      	ldr	r3, [pc, #732]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	4ab6      	ldr	r2, [pc, #728]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800558a:	e008      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005592:	e004      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005594:	bf00      	nop
 8005596:	e002      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005598:	bf00      	nop
 800559a:	e000      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800559c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a6:	4bad      	ldr	r3, [pc, #692]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055b4:	4aa9      	ldr	r2, [pc, #676]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80055ba:	e003      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80055d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80055d2:	2300      	movs	r3, #0
 80055d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80055d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80055da:	460b      	mov	r3, r1
 80055dc:	4313      	orrs	r3, r2
 80055de:	d009      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055e0:	4b9e      	ldr	r3, [pc, #632]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ee:	4a9b      	ldr	r2, [pc, #620]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005600:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005602:	2300      	movs	r3, #0
 8005604:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005606:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d009      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005610:	4b92      	ldr	r3, [pc, #584]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005614:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800561e:	4a8f      	ldr	r2, [pc, #572]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005620:	430b      	orrs	r3, r1
 8005622:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005630:	643b      	str	r3, [r7, #64]	@ 0x40
 8005632:	2300      	movs	r3, #0
 8005634:	647b      	str	r3, [r7, #68]	@ 0x44
 8005636:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800563a:	460b      	mov	r3, r1
 800563c:	4313      	orrs	r3, r2
 800563e:	d00e      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005640:	4b86      	ldr	r3, [pc, #536]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	4a85      	ldr	r2, [pc, #532]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005646:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800564a:	6113      	str	r3, [r2, #16]
 800564c:	4b83      	ldr	r3, [pc, #524]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800564e:	6919      	ldr	r1, [r3, #16]
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005658:	4a80      	ldr	r2, [pc, #512]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800565a:	430b      	orrs	r3, r1
 800565c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800565e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800566a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800566c:	2300      	movs	r3, #0
 800566e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005670:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005674:	460b      	mov	r3, r1
 8005676:	4313      	orrs	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800567a:	4b78      	ldr	r3, [pc, #480]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800567c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800567e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005688:	4a74      	ldr	r2, [pc, #464]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800568a:	430b      	orrs	r3, r1
 800568c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800569a:	633b      	str	r3, [r7, #48]	@ 0x30
 800569c:	2300      	movs	r3, #0
 800569e:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80056a4:	460b      	mov	r3, r1
 80056a6:	4313      	orrs	r3, r2
 80056a8:	d00a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056aa:	4b6c      	ldr	r3, [pc, #432]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ae:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	4a68      	ldr	r2, [pc, #416]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056bc:	430b      	orrs	r3, r1
 80056be:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	2100      	movs	r1, #0
 80056ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80056d6:	460b      	mov	r3, r1
 80056d8:	4313      	orrs	r3, r2
 80056da:	d011      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e0:	3308      	adds	r3, #8
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb79 	bl	8005ddc <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80056f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	2100      	movs	r1, #0
 800570a:	6239      	str	r1, [r7, #32]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
 8005712:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005716:	460b      	mov	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	d011      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800571c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005720:	3308      	adds	r3, #8
 8005722:	2101      	movs	r1, #1
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fb59 	bl	8005ddc <RCCEx_PLL2_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800573c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	2100      	movs	r1, #0
 800574a:	61b9      	str	r1, [r7, #24]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005756:	460b      	mov	r3, r1
 8005758:	4313      	orrs	r3, r2
 800575a:	d011      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005760:	3308      	adds	r3, #8
 8005762:	2102      	movs	r1, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fb39 	bl	8005ddc <RCCEx_PLL2_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800577c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	2100      	movs	r1, #0
 800578a:	6139      	str	r1, [r7, #16]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d011      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a0:	3328      	adds	r3, #40	@ 0x28
 80057a2:	2100      	movs	r1, #0
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fbcb 	bl	8005f40 <RCCEx_PLL3_Config>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80057b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80057c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	2100      	movs	r1, #0
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	d011      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e0:	3328      	adds	r3, #40	@ 0x28
 80057e2:	2101      	movs	r1, #1
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fbab 	bl	8005f40 <RCCEx_PLL3_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80057f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	2100      	movs	r1, #0
 800580a:	6039      	str	r1, [r7, #0]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	607b      	str	r3, [r7, #4]
 8005812:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d011      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	3328      	adds	r3, #40	@ 0x28
 8005822:	2102      	movs	r1, #2
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fb8b 	bl	8005f40 <RCCEx_PLL3_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800583c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005840:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	e000      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
}
 800584e:	4618      	mov	r0, r3
 8005850:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005854:	46bd      	mov	sp, r7
 8005856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585a:	bf00      	nop
 800585c:	58024400 	.word	0x58024400

08005860 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005864:	f7fe fe00 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b06      	ldr	r3, [pc, #24]	@ (8005884 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4904      	ldr	r1, [pc, #16]	@ (8005888 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005880:	4618      	mov	r0, r3
 8005882:	bd80      	pop	{r7, pc}
 8005884:	58024400 	.word	0x58024400
 8005888:	0800b65c 	.word	0x0800b65c

0800588c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	@ 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005894:	4ba1      	ldr	r3, [pc, #644]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800589e:	4b9f      	ldr	r3, [pc, #636]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	0b1b      	lsrs	r3, r3, #12
 80058a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058aa:	4b9c      	ldr	r3, [pc, #624]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80058b6:	4b99      	ldr	r3, [pc, #612]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ba:	08db      	lsrs	r3, r3, #3
 80058bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8111 	beq.w	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	f000 8083 	beq.w	80059e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	f200 80a1 	bhi.w	8005a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d056      	beq.n	80059a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80058f6:	e099      	b.n	8005a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f8:	4b88      	ldr	r3, [pc, #544]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d02d      	beq.n	8005960 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005904:	4b85      	ldr	r3, [pc, #532]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	08db      	lsrs	r3, r3, #3
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	4a84      	ldr	r2, [pc, #528]	@ (8005b20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
 8005914:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	ee07 3a90 	vmov	s15, r3
 800591c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592e:	4b7b      	ldr	r3, [pc, #492]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005942:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800595e:	e087      	b.n	8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800596e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005972:	4b6a      	ldr	r3, [pc, #424]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005982:	ed97 6a03 	vldr	s12, [r7, #12]
 8005986:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800598a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059a2:	e065      	b.n	8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b6:	4b59      	ldr	r3, [pc, #356]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059e6:	e043      	b.n	8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80059f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fa:	4b48      	ldr	r3, [pc, #288]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a2a:	e021      	b.n	8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3e:	4b37      	ldr	r3, [pc, #220]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a70:	4b2a      	ldr	r3, [pc, #168]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a74:	0a5b      	lsrs	r3, r3, #9
 8005a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a96:	ee17 2a90 	vmov	r2, s15
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa2:	0c1b      	lsrs	r3, r3, #16
 8005aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac4:	ee17 2a90 	vmov	r2, s15
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005acc:	4b13      	ldr	r3, [pc, #76]	@ (8005b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad0:	0e1b      	lsrs	r3, r3, #24
 8005ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005af2:	ee17 2a90 	vmov	r2, s15
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005afa:	e008      	b.n	8005b0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	609a      	str	r2, [r3, #8]
}
 8005b0e:	bf00      	nop
 8005b10:	3724      	adds	r7, #36	@ 0x24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	03d09000 	.word	0x03d09000
 8005b24:	46000000 	.word	0x46000000
 8005b28:	4c742400 	.word	0x4c742400
 8005b2c:	4a742400 	.word	0x4a742400
 8005b30:	4bbebc20 	.word	0x4bbebc20

08005b34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b089      	sub	sp, #36	@ 0x24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b3c:	4ba1      	ldr	r3, [pc, #644]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b46:	4b9f      	ldr	r3, [pc, #636]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4a:	0d1b      	lsrs	r3, r3, #20
 8005b4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b52:	4b9c      	ldr	r3, [pc, #624]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b5e:	4b99      	ldr	r3, [pc, #612]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	08db      	lsrs	r3, r3, #3
 8005b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8111 	beq.w	8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	f000 8083 	beq.w	8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	f200 80a1 	bhi.w	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d056      	beq.n	8005c4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b9e:	e099      	b.n	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ba0:	4b88      	ldr	r3, [pc, #544]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d02d      	beq.n	8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bac:	4b85      	ldr	r3, [pc, #532]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	08db      	lsrs	r3, r3, #3
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	4a84      	ldr	r2, [pc, #528]	@ (8005dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c06:	e087      	b.n	8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c4a:	e065      	b.n	8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5e:	4b59      	ldr	r3, [pc, #356]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c8e:	e043      	b.n	8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca2:	4b48      	ldr	r3, [pc, #288]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cd2:	e021      	b.n	8005d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce6:	4b37      	ldr	r3, [pc, #220]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d18:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1c:	0a5b      	lsrs	r3, r3, #9
 8005d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d3e:	ee17 2a90 	vmov	r2, s15
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005d46:	4b1f      	ldr	r3, [pc, #124]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d50:	ee07 3a90 	vmov	s15, r3
 8005d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d6c:	ee17 2a90 	vmov	r2, s15
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005d74:	4b13      	ldr	r3, [pc, #76]	@ (8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d78:	0e1b      	lsrs	r3, r3, #24
 8005d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9a:	ee17 2a90 	vmov	r2, s15
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005da2:	e008      	b.n	8005db6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	609a      	str	r2, [r3, #8]
}
 8005db6:	bf00      	nop
 8005db8:	3724      	adds	r7, #36	@ 0x24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	58024400 	.word	0x58024400
 8005dc8:	03d09000 	.word	0x03d09000
 8005dcc:	46000000 	.word	0x46000000
 8005dd0:	4c742400 	.word	0x4c742400
 8005dd4:	4a742400 	.word	0x4a742400
 8005dd8:	4bbebc20 	.word	0x4bbebc20

08005ddc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dea:	4b53      	ldr	r3, [pc, #332]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d101      	bne.n	8005dfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e099      	b.n	8005f2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a4e      	ldr	r2, [pc, #312]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e06:	f7fb fe51 	bl	8001aac <HAL_GetTick>
 8005e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e0c:	e008      	b.n	8005e20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e0e:	f7fb fe4d 	bl	8001aac <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e086      	b.n	8005f2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e20:	4b45      	ldr	r3, [pc, #276]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f0      	bne.n	8005e0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e2c:	4b42      	ldr	r3, [pc, #264]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	031b      	lsls	r3, r3, #12
 8005e3a:	493f      	ldr	r1, [pc, #252]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	025b      	lsls	r3, r3, #9
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	041b      	lsls	r3, r3, #16
 8005e5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	061b      	lsls	r3, r3, #24
 8005e6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e70:	4931      	ldr	r1, [pc, #196]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e76:	4b30      	ldr	r3, [pc, #192]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	492d      	ldr	r1, [pc, #180]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e88:	4b2b      	ldr	r3, [pc, #172]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8c:	f023 0220 	bic.w	r2, r3, #32
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	4928      	ldr	r1, [pc, #160]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e9a:	4b27      	ldr	r3, [pc, #156]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9e:	4a26      	ldr	r2, [pc, #152]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ea0:	f023 0310 	bic.w	r3, r3, #16
 8005ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ea6:	4b24      	ldr	r3, [pc, #144]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eaa:	4b24      	ldr	r3, [pc, #144]	@ (8005f3c <RCCEx_PLL2_Config+0x160>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	69d2      	ldr	r2, [r2, #28]
 8005eb2:	00d2      	lsls	r2, r2, #3
 8005eb4:	4920      	ldr	r1, [pc, #128]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005eba:	4b1f      	ldr	r3, [pc, #124]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ec0:	f043 0310 	orr.w	r3, r3, #16
 8005ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	4a19      	ldr	r2, [pc, #100]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ed2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ed8:	e00f      	b.n	8005efa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d106      	bne.n	8005eee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ee0:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee4:	4a14      	ldr	r2, [pc, #80]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005eec:	e005      	b.n	8005efa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005eee:	4b12      	ldr	r3, [pc, #72]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	4a11      	ldr	r2, [pc, #68]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005efa:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a0e      	ldr	r2, [pc, #56]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005f00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f06:	f7fb fdd1 	bl	8001aac <HAL_GetTick>
 8005f0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f0c:	e008      	b.n	8005f20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f0e:	f7fb fdcd 	bl	8001aac <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e006      	b.n	8005f2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f20:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <RCCEx_PLL2_Config+0x15c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	ffff0007 	.word	0xffff0007

08005f40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f4e:	4b53      	ldr	r3, [pc, #332]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d101      	bne.n	8005f5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e099      	b.n	8006092 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f5e:	4b4f      	ldr	r3, [pc, #316]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a4e      	ldr	r2, [pc, #312]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6a:	f7fb fd9f 	bl	8001aac <HAL_GetTick>
 8005f6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f70:	e008      	b.n	8005f84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f72:	f7fb fd9b 	bl	8001aac <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e086      	b.n	8006092 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f84:	4b45      	ldr	r3, [pc, #276]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f0      	bne.n	8005f72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f90:	4b42      	ldr	r3, [pc, #264]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f94:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	051b      	lsls	r3, r3, #20
 8005f9e:	493f      	ldr	r1, [pc, #252]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	025b      	lsls	r3, r3, #9
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	061b      	lsls	r3, r3, #24
 8005fd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005fd4:	4931      	ldr	r1, [pc, #196]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005fda:	4b30      	ldr	r3, [pc, #192]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	492d      	ldr	r1, [pc, #180]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fec:	4b2b      	ldr	r3, [pc, #172]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	4928      	ldr	r1, [pc, #160]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ffe:	4b27      	ldr	r3, [pc, #156]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	4a26      	ldr	r2, [pc, #152]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006008:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800600a:	4b24      	ldr	r3, [pc, #144]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 800600c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800600e:	4b24      	ldr	r3, [pc, #144]	@ (80060a0 <RCCEx_PLL3_Config+0x160>)
 8006010:	4013      	ands	r3, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	69d2      	ldr	r2, [r2, #28]
 8006016:	00d2      	lsls	r2, r2, #3
 8006018:	4920      	ldr	r1, [pc, #128]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 800601a:	4313      	orrs	r3, r2
 800601c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800601e:	4b1f      	ldr	r3, [pc, #124]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006022:	4a1e      	ldr	r2, [pc, #120]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006028:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006030:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006034:	4a19      	ldr	r2, [pc, #100]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006036:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800603a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800603c:	e00f      	b.n	800605e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d106      	bne.n	8006052 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006044:	4b15      	ldr	r3, [pc, #84]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006048:	4a14      	ldr	r2, [pc, #80]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 800604a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800604e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006050:	e005      	b.n	800605e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006052:	4b12      	ldr	r3, [pc, #72]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	4a11      	ldr	r2, [pc, #68]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006058:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800605c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800605e:	4b0f      	ldr	r3, [pc, #60]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a0e      	ldr	r2, [pc, #56]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800606a:	f7fb fd1f 	bl	8001aac <HAL_GetTick>
 800606e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006070:	e008      	b.n	8006084 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006072:	f7fb fd1b 	bl	8001aac <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e006      	b.n	8006092 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006084:	4b05      	ldr	r3, [pc, #20]	@ (800609c <RCCEx_PLL3_Config+0x15c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	58024400 	.word	0x58024400
 80060a0:	ffff0007 	.word	0xffff0007

080060a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e049      	b.n	800614a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fb f950 	bl	8001370 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f000 fa66 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <HAL_TIM_PWM_Start+0x24>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e03c      	b.n	80061f2 <HAL_TIM_PWM_Start+0x9e>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b04      	cmp	r3, #4
 800617c:	d109      	bne.n	8006192 <HAL_TIM_PWM_Start+0x3e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b01      	cmp	r3, #1
 8006188:	bf14      	ite	ne
 800618a:	2301      	movne	r3, #1
 800618c:	2300      	moveq	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	e02f      	b.n	80061f2 <HAL_TIM_PWM_Start+0x9e>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b08      	cmp	r3, #8
 8006196:	d109      	bne.n	80061ac <HAL_TIM_PWM_Start+0x58>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	e022      	b.n	80061f2 <HAL_TIM_PWM_Start+0x9e>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b0c      	cmp	r3, #12
 80061b0:	d109      	bne.n	80061c6 <HAL_TIM_PWM_Start+0x72>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	bf14      	ite	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	2300      	moveq	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	e015      	b.n	80061f2 <HAL_TIM_PWM_Start+0x9e>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d109      	bne.n	80061e0 <HAL_TIM_PWM_Start+0x8c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e008      	b.n	80061f2 <HAL_TIM_PWM_Start+0x9e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	bf14      	ite	ne
 80061ec:	2301      	movne	r3, #1
 80061ee:	2300      	moveq	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e0ab      	b.n	8006352 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <HAL_TIM_PWM_Start+0xb6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006208:	e023      	b.n	8006252 <HAL_TIM_PWM_Start+0xfe>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b04      	cmp	r3, #4
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0xc6>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006218:	e01b      	b.n	8006252 <HAL_TIM_PWM_Start+0xfe>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b08      	cmp	r3, #8
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start+0xd6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006228:	e013      	b.n	8006252 <HAL_TIM_PWM_Start+0xfe>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b0c      	cmp	r3, #12
 800622e:	d104      	bne.n	800623a <HAL_TIM_PWM_Start+0xe6>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006238:	e00b      	b.n	8006252 <HAL_TIM_PWM_Start+0xfe>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b10      	cmp	r3, #16
 800623e:	d104      	bne.n	800624a <HAL_TIM_PWM_Start+0xf6>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006248:	e003      	b.n	8006252 <HAL_TIM_PWM_Start+0xfe>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2202      	movs	r2, #2
 800624e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2201      	movs	r2, #1
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fd2c 	bl	8006cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a3d      	ldr	r2, [pc, #244]	@ (800635c <HAL_TIM_PWM_Start+0x208>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <HAL_TIM_PWM_Start+0x13e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a3c      	ldr	r2, [pc, #240]	@ (8006360 <HAL_TIM_PWM_Start+0x20c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00e      	beq.n	8006292 <HAL_TIM_PWM_Start+0x13e>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a3a      	ldr	r2, [pc, #232]	@ (8006364 <HAL_TIM_PWM_Start+0x210>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_TIM_PWM_Start+0x13e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a39      	ldr	r2, [pc, #228]	@ (8006368 <HAL_TIM_PWM_Start+0x214>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d004      	beq.n	8006292 <HAL_TIM_PWM_Start+0x13e>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a37      	ldr	r2, [pc, #220]	@ (800636c <HAL_TIM_PWM_Start+0x218>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d101      	bne.n	8006296 <HAL_TIM_PWM_Start+0x142>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <HAL_TIM_PWM_Start+0x144>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a2a      	ldr	r2, [pc, #168]	@ (800635c <HAL_TIM_PWM_Start+0x208>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d02c      	beq.n	8006310 <HAL_TIM_PWM_Start+0x1bc>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062be:	d027      	beq.n	8006310 <HAL_TIM_PWM_Start+0x1bc>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006370 <HAL_TIM_PWM_Start+0x21c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d022      	beq.n	8006310 <HAL_TIM_PWM_Start+0x1bc>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a29      	ldr	r2, [pc, #164]	@ (8006374 <HAL_TIM_PWM_Start+0x220>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d01d      	beq.n	8006310 <HAL_TIM_PWM_Start+0x1bc>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a27      	ldr	r2, [pc, #156]	@ (8006378 <HAL_TIM_PWM_Start+0x224>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d018      	beq.n	8006310 <HAL_TIM_PWM_Start+0x1bc>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006360 <HAL_TIM_PWM_Start+0x20c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d013      	beq.n	8006310 <HAL_TIM_PWM_Start+0x1bc>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a23      	ldr	r2, [pc, #140]	@ (800637c <HAL_TIM_PWM_Start+0x228>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00e      	beq.n	8006310 <HAL_TIM_PWM_Start+0x1bc>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006364 <HAL_TIM_PWM_Start+0x210>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d009      	beq.n	8006310 <HAL_TIM_PWM_Start+0x1bc>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1f      	ldr	r2, [pc, #124]	@ (8006380 <HAL_TIM_PWM_Start+0x22c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_TIM_PWM_Start+0x1bc>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1e      	ldr	r2, [pc, #120]	@ (8006384 <HAL_TIM_PWM_Start+0x230>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d115      	bne.n	800633c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	4b1c      	ldr	r3, [pc, #112]	@ (8006388 <HAL_TIM_PWM_Start+0x234>)
 8006318:	4013      	ands	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b06      	cmp	r3, #6
 8006320:	d015      	beq.n	800634e <HAL_TIM_PWM_Start+0x1fa>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006328:	d011      	beq.n	800634e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633a:	e008      	b.n	800634e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e000      	b.n	8006350 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40010000 	.word	0x40010000
 8006360:	40010400 	.word	0x40010400
 8006364:	40014000 	.word	0x40014000
 8006368:	40014400 	.word	0x40014400
 800636c:	40014800 	.word	0x40014800
 8006370:	40000400 	.word	0x40000400
 8006374:	40000800 	.word	0x40000800
 8006378:	40000c00 	.word	0x40000c00
 800637c:	40001800 	.word	0x40001800
 8006380:	4000e000 	.word	0x4000e000
 8006384:	4000e400 	.word	0x4000e400
 8006388:	00010007 	.word	0x00010007

0800638c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e0ff      	b.n	80065aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b14      	cmp	r3, #20
 80063b6:	f200 80f0 	bhi.w	800659a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063ba:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	08006415 	.word	0x08006415
 80063c4:	0800659b 	.word	0x0800659b
 80063c8:	0800659b 	.word	0x0800659b
 80063cc:	0800659b 	.word	0x0800659b
 80063d0:	08006455 	.word	0x08006455
 80063d4:	0800659b 	.word	0x0800659b
 80063d8:	0800659b 	.word	0x0800659b
 80063dc:	0800659b 	.word	0x0800659b
 80063e0:	08006497 	.word	0x08006497
 80063e4:	0800659b 	.word	0x0800659b
 80063e8:	0800659b 	.word	0x0800659b
 80063ec:	0800659b 	.word	0x0800659b
 80063f0:	080064d7 	.word	0x080064d7
 80063f4:	0800659b 	.word	0x0800659b
 80063f8:	0800659b 	.word	0x0800659b
 80063fc:	0800659b 	.word	0x0800659b
 8006400:	08006519 	.word	0x08006519
 8006404:	0800659b 	.word	0x0800659b
 8006408:	0800659b 	.word	0x0800659b
 800640c:	0800659b 	.word	0x0800659b
 8006410:	08006559 	.word	0x08006559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f976 	bl	800670c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0208 	orr.w	r2, r2, #8
 800642e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0204 	bic.w	r2, r2, #4
 800643e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6999      	ldr	r1, [r3, #24]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	619a      	str	r2, [r3, #24]
      break;
 8006452:	e0a5      	b.n	80065a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f9e6 	bl	800682c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800646e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6999      	ldr	r1, [r3, #24]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	021a      	lsls	r2, r3, #8
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	619a      	str	r2, [r3, #24]
      break;
 8006494:	e084      	b.n	80065a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fa4f 	bl	8006940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69da      	ldr	r2, [r3, #28]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0208 	orr.w	r2, r2, #8
 80064b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0204 	bic.w	r2, r2, #4
 80064c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69d9      	ldr	r1, [r3, #28]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	61da      	str	r2, [r3, #28]
      break;
 80064d4:	e064      	b.n	80065a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fab7 	bl	8006a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69d9      	ldr	r1, [r3, #28]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	021a      	lsls	r2, r3, #8
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	61da      	str	r2, [r3, #28]
      break;
 8006516:	e043      	b.n	80065a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fb00 	bl	8006b24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0208 	orr.w	r2, r2, #8
 8006532:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0204 	bic.w	r2, r2, #4
 8006542:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	691a      	ldr	r2, [r3, #16]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006556:	e023      	b.n	80065a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fb44 	bl	8006bec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006582:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	021a      	lsls	r2, r3, #8
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006598:	e002      	b.n	80065a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
      break;
 800659e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop

080065b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a47      	ldr	r2, [pc, #284]	@ (80066e4 <TIM_Base_SetConfig+0x130>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d2:	d00f      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a44      	ldr	r2, [pc, #272]	@ (80066e8 <TIM_Base_SetConfig+0x134>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00b      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a43      	ldr	r2, [pc, #268]	@ (80066ec <TIM_Base_SetConfig+0x138>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a42      	ldr	r2, [pc, #264]	@ (80066f0 <TIM_Base_SetConfig+0x13c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a41      	ldr	r2, [pc, #260]	@ (80066f4 <TIM_Base_SetConfig+0x140>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d108      	bne.n	8006606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a36      	ldr	r2, [pc, #216]	@ (80066e4 <TIM_Base_SetConfig+0x130>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d027      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006614:	d023      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a33      	ldr	r2, [pc, #204]	@ (80066e8 <TIM_Base_SetConfig+0x134>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01f      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a32      	ldr	r2, [pc, #200]	@ (80066ec <TIM_Base_SetConfig+0x138>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d01b      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a31      	ldr	r2, [pc, #196]	@ (80066f0 <TIM_Base_SetConfig+0x13c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d017      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a30      	ldr	r2, [pc, #192]	@ (80066f4 <TIM_Base_SetConfig+0x140>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d013      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2f      	ldr	r2, [pc, #188]	@ (80066f8 <TIM_Base_SetConfig+0x144>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00f      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2e      	ldr	r2, [pc, #184]	@ (80066fc <TIM_Base_SetConfig+0x148>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00b      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2d      	ldr	r2, [pc, #180]	@ (8006700 <TIM_Base_SetConfig+0x14c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d007      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2c      	ldr	r2, [pc, #176]	@ (8006704 <TIM_Base_SetConfig+0x150>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_Base_SetConfig+0xaa>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2b      	ldr	r2, [pc, #172]	@ (8006708 <TIM_Base_SetConfig+0x154>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d108      	bne.n	8006670 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a14      	ldr	r2, [pc, #80]	@ (80066e4 <TIM_Base_SetConfig+0x130>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00f      	beq.n	80066b6 <TIM_Base_SetConfig+0x102>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a16      	ldr	r2, [pc, #88]	@ (80066f4 <TIM_Base_SetConfig+0x140>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00b      	beq.n	80066b6 <TIM_Base_SetConfig+0x102>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a15      	ldr	r2, [pc, #84]	@ (80066f8 <TIM_Base_SetConfig+0x144>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d007      	beq.n	80066b6 <TIM_Base_SetConfig+0x102>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a14      	ldr	r2, [pc, #80]	@ (80066fc <TIM_Base_SetConfig+0x148>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_Base_SetConfig+0x102>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a13      	ldr	r2, [pc, #76]	@ (8006700 <TIM_Base_SetConfig+0x14c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d103      	bne.n	80066be <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f043 0204 	orr.w	r2, r3, #4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40010400 	.word	0x40010400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800
 8006704:	4000e000 	.word	0x4000e000
 8006708:	4000e400 	.word	0x4000e400

0800670c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f023 0201 	bic.w	r2, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4b37      	ldr	r3, [pc, #220]	@ (8006814 <TIM_OC1_SetConfig+0x108>)
 8006738:	4013      	ands	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 0302 	bic.w	r3, r3, #2
 8006754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a2d      	ldr	r2, [pc, #180]	@ (8006818 <TIM_OC1_SetConfig+0x10c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00f      	beq.n	8006788 <TIM_OC1_SetConfig+0x7c>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a2c      	ldr	r2, [pc, #176]	@ (800681c <TIM_OC1_SetConfig+0x110>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00b      	beq.n	8006788 <TIM_OC1_SetConfig+0x7c>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a2b      	ldr	r2, [pc, #172]	@ (8006820 <TIM_OC1_SetConfig+0x114>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d007      	beq.n	8006788 <TIM_OC1_SetConfig+0x7c>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a2a      	ldr	r2, [pc, #168]	@ (8006824 <TIM_OC1_SetConfig+0x118>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC1_SetConfig+0x7c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a29      	ldr	r2, [pc, #164]	@ (8006828 <TIM_OC1_SetConfig+0x11c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d10c      	bne.n	80067a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0308 	bic.w	r3, r3, #8
 800678e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f023 0304 	bic.w	r3, r3, #4
 80067a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006818 <TIM_OC1_SetConfig+0x10c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00f      	beq.n	80067ca <TIM_OC1_SetConfig+0xbe>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1b      	ldr	r2, [pc, #108]	@ (800681c <TIM_OC1_SetConfig+0x110>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00b      	beq.n	80067ca <TIM_OC1_SetConfig+0xbe>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006820 <TIM_OC1_SetConfig+0x114>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <TIM_OC1_SetConfig+0xbe>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a19      	ldr	r2, [pc, #100]	@ (8006824 <TIM_OC1_SetConfig+0x118>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC1_SetConfig+0xbe>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a18      	ldr	r2, [pc, #96]	@ (8006828 <TIM_OC1_SetConfig+0x11c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d111      	bne.n	80067ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	621a      	str	r2, [r3, #32]
}
 8006808:	bf00      	nop
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	fffeff8f 	.word	0xfffeff8f
 8006818:	40010000 	.word	0x40010000
 800681c:	40010400 	.word	0x40010400
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800

0800682c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f023 0210 	bic.w	r2, r3, #16
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4b34      	ldr	r3, [pc, #208]	@ (8006928 <TIM_OC2_SetConfig+0xfc>)
 8006858:	4013      	ands	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0320 	bic.w	r3, r3, #32
 8006876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a29      	ldr	r2, [pc, #164]	@ (800692c <TIM_OC2_SetConfig+0x100>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_OC2_SetConfig+0x68>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a28      	ldr	r2, [pc, #160]	@ (8006930 <TIM_OC2_SetConfig+0x104>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d10d      	bne.n	80068b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800689a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1e      	ldr	r2, [pc, #120]	@ (800692c <TIM_OC2_SetConfig+0x100>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00f      	beq.n	80068d8 <TIM_OC2_SetConfig+0xac>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006930 <TIM_OC2_SetConfig+0x104>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_OC2_SetConfig+0xac>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006934 <TIM_OC2_SetConfig+0x108>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_OC2_SetConfig+0xac>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <TIM_OC2_SetConfig+0x10c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC2_SetConfig+0xac>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a1a      	ldr	r2, [pc, #104]	@ (800693c <TIM_OC2_SetConfig+0x110>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d113      	bne.n	8006900 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	feff8fff 	.word	0xfeff8fff
 800692c:	40010000 	.word	0x40010000
 8006930:	40010400 	.word	0x40010400
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400
 800693c:	40014800 	.word	0x40014800

08006940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4b33      	ldr	r3, [pc, #204]	@ (8006a38 <TIM_OC3_SetConfig+0xf8>)
 800696c:	4013      	ands	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a28      	ldr	r2, [pc, #160]	@ (8006a3c <TIM_OC3_SetConfig+0xfc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_OC3_SetConfig+0x66>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a27      	ldr	r2, [pc, #156]	@ (8006a40 <TIM_OC3_SetConfig+0x100>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d10d      	bne.n	80069c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a3c <TIM_OC3_SetConfig+0xfc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00f      	beq.n	80069ea <TIM_OC3_SetConfig+0xaa>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a40 <TIM_OC3_SetConfig+0x100>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00b      	beq.n	80069ea <TIM_OC3_SetConfig+0xaa>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a44 <TIM_OC3_SetConfig+0x104>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d007      	beq.n	80069ea <TIM_OC3_SetConfig+0xaa>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a48 <TIM_OC3_SetConfig+0x108>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_OC3_SetConfig+0xaa>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a19      	ldr	r2, [pc, #100]	@ (8006a4c <TIM_OC3_SetConfig+0x10c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d113      	bne.n	8006a12 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	621a      	str	r2, [r3, #32]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	fffeff8f 	.word	0xfffeff8f
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40010400 	.word	0x40010400
 8006a44:	40014000 	.word	0x40014000
 8006a48:	40014400 	.word	0x40014400
 8006a4c:	40014800 	.word	0x40014800

08006a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4b24      	ldr	r3, [pc, #144]	@ (8006b0c <TIM_OC4_SetConfig+0xbc>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	031b      	lsls	r3, r3, #12
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a19      	ldr	r2, [pc, #100]	@ (8006b10 <TIM_OC4_SetConfig+0xc0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00f      	beq.n	8006ad0 <TIM_OC4_SetConfig+0x80>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a18      	ldr	r2, [pc, #96]	@ (8006b14 <TIM_OC4_SetConfig+0xc4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_OC4_SetConfig+0x80>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a17      	ldr	r2, [pc, #92]	@ (8006b18 <TIM_OC4_SetConfig+0xc8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_OC4_SetConfig+0x80>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a16      	ldr	r2, [pc, #88]	@ (8006b1c <TIM_OC4_SetConfig+0xcc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_OC4_SetConfig+0x80>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a15      	ldr	r2, [pc, #84]	@ (8006b20 <TIM_OC4_SetConfig+0xd0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d109      	bne.n	8006ae4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	019b      	lsls	r3, r3, #6
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	feff8fff 	.word	0xfeff8fff
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40010400 	.word	0x40010400
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	40014400 	.word	0x40014400
 8006b20:	40014800 	.word	0x40014800

08006b24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4b21      	ldr	r3, [pc, #132]	@ (8006bd4 <TIM_OC5_SetConfig+0xb0>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	041b      	lsls	r3, r3, #16
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a18      	ldr	r2, [pc, #96]	@ (8006bd8 <TIM_OC5_SetConfig+0xb4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00f      	beq.n	8006b9a <TIM_OC5_SetConfig+0x76>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a17      	ldr	r2, [pc, #92]	@ (8006bdc <TIM_OC5_SetConfig+0xb8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00b      	beq.n	8006b9a <TIM_OC5_SetConfig+0x76>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a16      	ldr	r2, [pc, #88]	@ (8006be0 <TIM_OC5_SetConfig+0xbc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d007      	beq.n	8006b9a <TIM_OC5_SetConfig+0x76>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a15      	ldr	r2, [pc, #84]	@ (8006be4 <TIM_OC5_SetConfig+0xc0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d003      	beq.n	8006b9a <TIM_OC5_SetConfig+0x76>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a14      	ldr	r2, [pc, #80]	@ (8006be8 <TIM_OC5_SetConfig+0xc4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d109      	bne.n	8006bae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	621a      	str	r2, [r3, #32]
}
 8006bc8:	bf00      	nop
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	fffeff8f 	.word	0xfffeff8f
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40010400 	.word	0x40010400
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4b22      	ldr	r3, [pc, #136]	@ (8006ca0 <TIM_OC6_SetConfig+0xb4>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	051b      	lsls	r3, r3, #20
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a19      	ldr	r2, [pc, #100]	@ (8006ca4 <TIM_OC6_SetConfig+0xb8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00f      	beq.n	8006c64 <TIM_OC6_SetConfig+0x78>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <TIM_OC6_SetConfig+0xbc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00b      	beq.n	8006c64 <TIM_OC6_SetConfig+0x78>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a17      	ldr	r2, [pc, #92]	@ (8006cac <TIM_OC6_SetConfig+0xc0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d007      	beq.n	8006c64 <TIM_OC6_SetConfig+0x78>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a16      	ldr	r2, [pc, #88]	@ (8006cb0 <TIM_OC6_SetConfig+0xc4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_OC6_SetConfig+0x78>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a15      	ldr	r2, [pc, #84]	@ (8006cb4 <TIM_OC6_SetConfig+0xc8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d109      	bne.n	8006c78 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	029b      	lsls	r3, r3, #10
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	feff8fff 	.word	0xfeff8fff
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010400 	.word	0x40010400
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40014400 	.word	0x40014400
 8006cb4:	40014800 	.word	0x40014800

08006cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2201      	movs	r2, #1
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1a      	ldr	r2, [r3, #32]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	401a      	ands	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e077      	b.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a35      	ldr	r2, [pc, #212]	@ (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a34      	ldr	r2, [pc, #208]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d108      	bne.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a25      	ldr	r2, [pc, #148]	@ (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d02c      	beq.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8e:	d027      	beq.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a22      	ldr	r2, [pc, #136]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d022      	beq.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a21      	ldr	r2, [pc, #132]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d01d      	beq.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d018      	beq.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a1a      	ldr	r2, [pc, #104]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d013      	beq.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00e      	beq.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a1a      	ldr	r2, [pc, #104]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a18      	ldr	r2, [pc, #96]	@ (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a17      	ldr	r2, [pc, #92]	@ (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10c      	bne.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006de6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40010400 	.word	0x40010400
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800
 8006e28:	40000c00 	.word	0x40000c00
 8006e2c:	40001800 	.word	0x40001800
 8006e30:	40014000 	.word	0x40014000
 8006e34:	4000e000 	.word	0x4000e000
 8006e38:	4000e400 	.word	0x4000e400

08006e3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e073      	b.n	8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a19      	ldr	r2, [pc, #100]	@ (8006f4c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a18      	ldr	r2, [pc, #96]	@ (8006f50 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d11c      	bne.n	8006f2e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efe:	051b      	lsls	r3, r3, #20
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40010400 	.word	0x40010400

08006f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e042      	b.n	8006fec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fa fa57 	bl	800142c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2224      	movs	r2, #36	@ 0x24
 8006f82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fb18 	bl	80085d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fca9 	bl	80078fc <UART_SetConfig>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e01b      	b.n	8006fec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fb97 	bl	8008718 <UART_CheckIdleState>
 8006fea:	4603      	mov	r3, r0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08a      	sub	sp, #40	@ 0x28
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	4613      	mov	r3, r2
 8007002:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700a:	2b20      	cmp	r3, #32
 800700c:	d17b      	bne.n	8007106 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_UART_Transmit+0x26>
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e074      	b.n	8007108 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2221      	movs	r2, #33	@ 0x21
 800702a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800702e:	f7fa fd3d 	bl	8001aac <HAL_GetTick>
 8007032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	88fa      	ldrh	r2, [r7, #6]
 8007038:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	88fa      	ldrh	r2, [r7, #6]
 8007040:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704c:	d108      	bne.n	8007060 <HAL_UART_Transmit+0x6c>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e003      	b.n	8007068 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007064:	2300      	movs	r3, #0
 8007066:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007068:	e030      	b.n	80070cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2200      	movs	r2, #0
 8007072:	2180      	movs	r1, #128	@ 0x80
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f001 fbf9 	bl	800886c <UART_WaitOnFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e03d      	b.n	8007108 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	3302      	adds	r3, #2
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	e007      	b.n	80070ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	3301      	adds	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1c8      	bne.n	800706a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2200      	movs	r2, #0
 80070e0:	2140      	movs	r1, #64	@ 0x40
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f001 fbc2 	bl	800886c <UART_WaitOnFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e006      	b.n	8007108 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e000      	b.n	8007108 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007106:	2302      	movs	r3, #2
  }
}
 8007108:	4618      	mov	r0, r3
 800710a:	3720      	adds	r7, #32
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b0ba      	sub	sp, #232	@ 0xe8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800713a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800713e:	4013      	ands	r3, r2
 8007140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d11b      	bne.n	8007184 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800714c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b00      	cmp	r3, #0
 8007156:	d015      	beq.n	8007184 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d105      	bne.n	8007170 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8393 	beq.w	80078a0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
      }
      return;
 8007182:	e38d      	b.n	80078a0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8123 	beq.w	80073d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800718e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007192:	4b8d      	ldr	r3, [pc, #564]	@ (80073c8 <HAL_UART_IRQHandler+0x2b8>)
 8007194:	4013      	ands	r3, r2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d106      	bne.n	80071a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800719a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800719e:	4b8b      	ldr	r3, [pc, #556]	@ (80073cc <HAL_UART_IRQHandler+0x2bc>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 8116 	beq.w	80073d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d011      	beq.n	80071d8 <HAL_UART_IRQHandler+0xc8>
 80071b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2201      	movs	r2, #1
 80071c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ce:	f043 0201 	orr.w	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d011      	beq.n	8007208 <HAL_UART_IRQHandler+0xf8>
 80071e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2202      	movs	r2, #2
 80071f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071fe:	f043 0204 	orr.w	r2, r3, #4
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d011      	beq.n	8007238 <HAL_UART_IRQHandler+0x128>
 8007214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2204      	movs	r2, #4
 8007226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722e:	f043 0202 	orr.w	r2, r3, #2
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d017      	beq.n	8007274 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d105      	bne.n	800725c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007250:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007254:	4b5c      	ldr	r3, [pc, #368]	@ (80073c8 <HAL_UART_IRQHandler+0x2b8>)
 8007256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2208      	movs	r2, #8
 8007262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800726a:	f043 0208 	orr.w	r2, r3, #8
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800727c:	2b00      	cmp	r3, #0
 800727e:	d012      	beq.n	80072a6 <HAL_UART_IRQHandler+0x196>
 8007280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007284:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00c      	beq.n	80072a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729c:	f043 0220 	orr.w	r2, r3, #32
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 82f9 	beq.w	80078a4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d013      	beq.n	80072e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fa:	2b40      	cmp	r3, #64	@ 0x40
 80072fc:	d005      	beq.n	800730a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007302:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007306:	2b00      	cmp	r3, #0
 8007308:	d054      	beq.n	80073b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 fb1c 	bl	8008948 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731a:	2b40      	cmp	r3, #64	@ 0x40
 800731c:	d146      	bne.n	80073ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3308      	adds	r3, #8
 8007346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800734a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800734e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1d9      	bne.n	800731e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007370:	2b00      	cmp	r3, #0
 8007372:	d017      	beq.n	80073a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800737a:	4a15      	ldr	r2, [pc, #84]	@ (80073d0 <HAL_UART_IRQHandler+0x2c0>)
 800737c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007384:	4618      	mov	r0, r3
 8007386:	f7fb f867 	bl	8002458 <HAL_DMA_Abort_IT>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d019      	beq.n	80073c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800739e:	4610      	mov	r0, r2
 80073a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a2:	e00f      	b.n	80073c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fa93 	bl	80078d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073aa:	e00b      	b.n	80073c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa8f 	bl	80078d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b2:	e007      	b.n	80073c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fa8b 	bl	80078d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80073c2:	e26f      	b.n	80078a4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	bf00      	nop
    return;
 80073c6:	e26d      	b.n	80078a4 <HAL_UART_IRQHandler+0x794>
 80073c8:	10000001 	.word	0x10000001
 80073cc:	04000120 	.word	0x04000120
 80073d0:	08008a15 	.word	0x08008a15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	f040 8203 	bne.w	80077e4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 81fc 	beq.w	80077e4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 81f5 	beq.w	80077e4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2210      	movs	r2, #16
 8007400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800740c:	2b40      	cmp	r3, #64	@ 0x40
 800740e:	f040 816d 	bne.w	80076ec <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4aa4      	ldr	r2, [pc, #656]	@ (80076ac <HAL_UART_IRQHandler+0x59c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d068      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4aa1      	ldr	r2, [pc, #644]	@ (80076b0 <HAL_UART_IRQHandler+0x5a0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d061      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a9f      	ldr	r2, [pc, #636]	@ (80076b4 <HAL_UART_IRQHandler+0x5a4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d05a      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a9c      	ldr	r2, [pc, #624]	@ (80076b8 <HAL_UART_IRQHandler+0x5a8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d053      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a9a      	ldr	r2, [pc, #616]	@ (80076bc <HAL_UART_IRQHandler+0x5ac>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d04c      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a97      	ldr	r2, [pc, #604]	@ (80076c0 <HAL_UART_IRQHandler+0x5b0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d045      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a95      	ldr	r2, [pc, #596]	@ (80076c4 <HAL_UART_IRQHandler+0x5b4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d03e      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a92      	ldr	r2, [pc, #584]	@ (80076c8 <HAL_UART_IRQHandler+0x5b8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d037      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a90      	ldr	r2, [pc, #576]	@ (80076cc <HAL_UART_IRQHandler+0x5bc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d030      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a8d      	ldr	r2, [pc, #564]	@ (80076d0 <HAL_UART_IRQHandler+0x5c0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d029      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a8b      	ldr	r2, [pc, #556]	@ (80076d4 <HAL_UART_IRQHandler+0x5c4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d022      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a88      	ldr	r2, [pc, #544]	@ (80076d8 <HAL_UART_IRQHandler+0x5c8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01b      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a86      	ldr	r2, [pc, #536]	@ (80076dc <HAL_UART_IRQHandler+0x5cc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d014      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a83      	ldr	r2, [pc, #524]	@ (80076e0 <HAL_UART_IRQHandler+0x5d0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00d      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a81      	ldr	r2, [pc, #516]	@ (80076e4 <HAL_UART_IRQHandler+0x5d4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d006      	beq.n	80074f2 <HAL_UART_IRQHandler+0x3e2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a7e      	ldr	r2, [pc, #504]	@ (80076e8 <HAL_UART_IRQHandler+0x5d8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d106      	bne.n	8007500 <HAL_UART_IRQHandler+0x3f0>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	e005      	b.n	800750c <HAL_UART_IRQHandler+0x3fc>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80ad 	beq.w	8007674 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007520:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007524:	429a      	cmp	r2, r3
 8007526:	f080 80a5 	bcs.w	8007674 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007530:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007540:	f000 8087 	beq.w	8007652 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007558:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800755c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800756e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007572:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800757a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1da      	bne.n	8007544 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800759e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075a0:	f023 0301 	bic.w	r3, r3, #1
 80075a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3308      	adds	r3, #8
 80075ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80075b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80075b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80075ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80075c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e1      	bne.n	800758e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80075da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3308      	adds	r3, #8
 80075ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80075ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e3      	bne.n	80075ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800761e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007620:	f023 0310 	bic.w	r3, r3, #16
 8007624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007632:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007634:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007638:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e4      	bne.n	8007610 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800764c:	4618      	mov	r0, r3
 800764e:	f7fa fbe5 	bl	8001e1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007664:	b29b      	uxth	r3, r3
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	b29b      	uxth	r3, r3
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f939 	bl	80078e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007672:	e119      	b.n	80078a8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800767a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800767e:	429a      	cmp	r2, r3
 8007680:	f040 8112 	bne.w	80078a8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007690:	f040 810a 	bne.w	80078a8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f91e 	bl	80078e4 <HAL_UARTEx_RxEventCallback>
      return;
 80076a8:	e0fe      	b.n	80078a8 <HAL_UART_IRQHandler+0x798>
 80076aa:	bf00      	nop
 80076ac:	40020010 	.word	0x40020010
 80076b0:	40020028 	.word	0x40020028
 80076b4:	40020040 	.word	0x40020040
 80076b8:	40020058 	.word	0x40020058
 80076bc:	40020070 	.word	0x40020070
 80076c0:	40020088 	.word	0x40020088
 80076c4:	400200a0 	.word	0x400200a0
 80076c8:	400200b8 	.word	0x400200b8
 80076cc:	40020410 	.word	0x40020410
 80076d0:	40020428 	.word	0x40020428
 80076d4:	40020440 	.word	0x40020440
 80076d8:	40020458 	.word	0x40020458
 80076dc:	40020470 	.word	0x40020470
 80076e0:	40020488 	.word	0x40020488
 80076e4:	400204a0 	.word	0x400204a0
 80076e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80cf 	beq.w	80078ac <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800770e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 80ca 	beq.w	80078ac <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007728:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800772c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800773a:	647b      	str	r3, [r7, #68]	@ 0x44
 800773c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007740:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e4      	bne.n	8007718 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3308      	adds	r3, #8
 8007754:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	623b      	str	r3, [r7, #32]
   return(result);
 800775e:	6a3a      	ldr	r2, [r7, #32]
 8007760:	4b55      	ldr	r3, [pc, #340]	@ (80078b8 <HAL_UART_IRQHandler+0x7a8>)
 8007762:	4013      	ands	r3, r2
 8007764:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007772:	633a      	str	r2, [r7, #48]	@ 0x30
 8007774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e3      	bne.n	800774e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0310 	bic.w	r3, r3, #16
 80077ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	69b9      	ldr	r1, [r7, #24]
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	617b      	str	r3, [r7, #20]
   return(result);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e4      	bne.n	800779a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f881 	bl	80078e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077e2:	e063      	b.n	80078ac <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00e      	beq.n	800780e <HAL_UART_IRQHandler+0x6fe>
 80077f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d008      	beq.n	800780e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007804:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 f941 	bl	8008a8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800780c:	e051      	b.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007816:	2b00      	cmp	r3, #0
 8007818:	d014      	beq.n	8007844 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800781a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800781e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007822:	2b00      	cmp	r3, #0
 8007824:	d105      	bne.n	8007832 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800782a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d008      	beq.n	8007844 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007836:	2b00      	cmp	r3, #0
 8007838:	d03a      	beq.n	80078b0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
    }
    return;
 8007842:	e035      	b.n	80078b0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d009      	beq.n	8007864 <HAL_UART_IRQHandler+0x754>
 8007850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f8eb 	bl	8008a38 <UART_EndTransmit_IT>
    return;
 8007862:	e026      	b.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <HAL_UART_IRQHandler+0x774>
 8007870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007874:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 f91a 	bl	8008ab6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007882:	e016      	b.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d010      	beq.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
 8007890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007894:	2b00      	cmp	r3, #0
 8007896:	da0c      	bge.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 f902 	bl	8008aa2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800789e:	e008      	b.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80078a0:	bf00      	nop
 80078a2:	e006      	b.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80078a4:	bf00      	nop
 80078a6:	e004      	b.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80078a8:	bf00      	nop
 80078aa:	e002      	b.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80078ac:	bf00      	nop
 80078ae:	e000      	b.n	80078b2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80078b0:	bf00      	nop
  }
}
 80078b2:	37e8      	adds	r7, #232	@ 0xe8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	effffffe 	.word	0xeffffffe

080078bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007900:	b092      	sub	sp, #72	@ 0x48
 8007902:	af00      	add	r7, sp, #0
 8007904:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	431a      	orrs	r2, r3
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	431a      	orrs	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	4313      	orrs	r3, r2
 8007922:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4bbe      	ldr	r3, [pc, #760]	@ (8007c24 <UART_SetConfig+0x328>)
 800792c:	4013      	ands	r3, r2
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007934:	430b      	orrs	r3, r1
 8007936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4ab3      	ldr	r2, [pc, #716]	@ (8007c28 <UART_SetConfig+0x32c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d004      	beq.n	8007968 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007964:	4313      	orrs	r3, r2
 8007966:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	4baf      	ldr	r3, [pc, #700]	@ (8007c2c <UART_SetConfig+0x330>)
 8007970:	4013      	ands	r3, r2
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	6812      	ldr	r2, [r2, #0]
 8007976:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007978:	430b      	orrs	r3, r1
 800797a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007982:	f023 010f 	bic.w	r1, r3, #15
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4aa6      	ldr	r2, [pc, #664]	@ (8007c30 <UART_SetConfig+0x334>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d177      	bne.n	8007a8c <UART_SetConfig+0x190>
 800799c:	4ba5      	ldr	r3, [pc, #660]	@ (8007c34 <UART_SetConfig+0x338>)
 800799e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079a4:	2b28      	cmp	r3, #40	@ 0x28
 80079a6:	d86d      	bhi.n	8007a84 <UART_SetConfig+0x188>
 80079a8:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <UART_SetConfig+0xb4>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	08007a55 	.word	0x08007a55
 80079b4:	08007a85 	.word	0x08007a85
 80079b8:	08007a85 	.word	0x08007a85
 80079bc:	08007a85 	.word	0x08007a85
 80079c0:	08007a85 	.word	0x08007a85
 80079c4:	08007a85 	.word	0x08007a85
 80079c8:	08007a85 	.word	0x08007a85
 80079cc:	08007a85 	.word	0x08007a85
 80079d0:	08007a5d 	.word	0x08007a5d
 80079d4:	08007a85 	.word	0x08007a85
 80079d8:	08007a85 	.word	0x08007a85
 80079dc:	08007a85 	.word	0x08007a85
 80079e0:	08007a85 	.word	0x08007a85
 80079e4:	08007a85 	.word	0x08007a85
 80079e8:	08007a85 	.word	0x08007a85
 80079ec:	08007a85 	.word	0x08007a85
 80079f0:	08007a65 	.word	0x08007a65
 80079f4:	08007a85 	.word	0x08007a85
 80079f8:	08007a85 	.word	0x08007a85
 80079fc:	08007a85 	.word	0x08007a85
 8007a00:	08007a85 	.word	0x08007a85
 8007a04:	08007a85 	.word	0x08007a85
 8007a08:	08007a85 	.word	0x08007a85
 8007a0c:	08007a85 	.word	0x08007a85
 8007a10:	08007a6d 	.word	0x08007a6d
 8007a14:	08007a85 	.word	0x08007a85
 8007a18:	08007a85 	.word	0x08007a85
 8007a1c:	08007a85 	.word	0x08007a85
 8007a20:	08007a85 	.word	0x08007a85
 8007a24:	08007a85 	.word	0x08007a85
 8007a28:	08007a85 	.word	0x08007a85
 8007a2c:	08007a85 	.word	0x08007a85
 8007a30:	08007a75 	.word	0x08007a75
 8007a34:	08007a85 	.word	0x08007a85
 8007a38:	08007a85 	.word	0x08007a85
 8007a3c:	08007a85 	.word	0x08007a85
 8007a40:	08007a85 	.word	0x08007a85
 8007a44:	08007a85 	.word	0x08007a85
 8007a48:	08007a85 	.word	0x08007a85
 8007a4c:	08007a85 	.word	0x08007a85
 8007a50:	08007a7d 	.word	0x08007a7d
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5a:	e326      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a62:	e322      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007a64:	2308      	movs	r3, #8
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	e31e      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e31a      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007a74:	2320      	movs	r3, #32
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e316      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007a7c:	2340      	movs	r3, #64	@ 0x40
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e312      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007a84:	2380      	movs	r3, #128	@ 0x80
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e30e      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a69      	ldr	r2, [pc, #420]	@ (8007c38 <UART_SetConfig+0x33c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d130      	bne.n	8007af8 <UART_SetConfig+0x1fc>
 8007a96:	4b67      	ldr	r3, [pc, #412]	@ (8007c34 <UART_SetConfig+0x338>)
 8007a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d826      	bhi.n	8007af0 <UART_SetConfig+0x1f4>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <UART_SetConfig+0x1ac>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ac1 	.word	0x08007ac1
 8007aac:	08007ac9 	.word	0x08007ac9
 8007ab0:	08007ad1 	.word	0x08007ad1
 8007ab4:	08007ad9 	.word	0x08007ad9
 8007ab8:	08007ae1 	.word	0x08007ae1
 8007abc:	08007ae9 	.word	0x08007ae9
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e2f0      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e2ec      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e2e8      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007ad8:	2310      	movs	r3, #16
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e2e4      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007ae0:	2320      	movs	r3, #32
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e2e0      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007ae8:	2340      	movs	r3, #64	@ 0x40
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e2dc      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007af0:	2380      	movs	r3, #128	@ 0x80
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e2d8      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a4f      	ldr	r2, [pc, #316]	@ (8007c3c <UART_SetConfig+0x340>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d130      	bne.n	8007b64 <UART_SetConfig+0x268>
 8007b02:	4b4c      	ldr	r3, [pc, #304]	@ (8007c34 <UART_SetConfig+0x338>)
 8007b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	d826      	bhi.n	8007b5c <UART_SetConfig+0x260>
 8007b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <UART_SetConfig+0x218>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b2d 	.word	0x08007b2d
 8007b18:	08007b35 	.word	0x08007b35
 8007b1c:	08007b3d 	.word	0x08007b3d
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b4d 	.word	0x08007b4d
 8007b28:	08007b55 	.word	0x08007b55
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e2ba      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007b34:	2304      	movs	r3, #4
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e2b6      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b42:	e2b2      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007b44:	2310      	movs	r3, #16
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e2ae      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007b4c:	2320      	movs	r3, #32
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e2aa      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007b54:	2340      	movs	r3, #64	@ 0x40
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	e2a6      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007b5c:	2380      	movs	r3, #128	@ 0x80
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e2a2      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a35      	ldr	r2, [pc, #212]	@ (8007c40 <UART_SetConfig+0x344>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d130      	bne.n	8007bd0 <UART_SetConfig+0x2d4>
 8007b6e:	4b31      	ldr	r3, [pc, #196]	@ (8007c34 <UART_SetConfig+0x338>)
 8007b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	2b05      	cmp	r3, #5
 8007b78:	d826      	bhi.n	8007bc8 <UART_SetConfig+0x2cc>
 8007b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <UART_SetConfig+0x284>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007b99 	.word	0x08007b99
 8007b84:	08007ba1 	.word	0x08007ba1
 8007b88:	08007ba9 	.word	0x08007ba9
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007bb9 	.word	0x08007bb9
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e284      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e280      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007ba8:	2308      	movs	r3, #8
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e27c      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e278      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007bb8:	2320      	movs	r3, #32
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e274      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007bc0:	2340      	movs	r3, #64	@ 0x40
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e270      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007bc8:	2380      	movs	r3, #128	@ 0x80
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e26c      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c44 <UART_SetConfig+0x348>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d142      	bne.n	8007c60 <UART_SetConfig+0x364>
 8007bda:	4b16      	ldr	r3, [pc, #88]	@ (8007c34 <UART_SetConfig+0x338>)
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	d838      	bhi.n	8007c58 <UART_SetConfig+0x35c>
 8007be6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bec <UART_SetConfig+0x2f0>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c05 	.word	0x08007c05
 8007bf0:	08007c0d 	.word	0x08007c0d
 8007bf4:	08007c15 	.word	0x08007c15
 8007bf8:	08007c1d 	.word	0x08007c1d
 8007bfc:	08007c49 	.word	0x08007c49
 8007c00:	08007c51 	.word	0x08007c51
 8007c04:	2300      	movs	r3, #0
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e24e      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c12:	e24a      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007c14:	2308      	movs	r3, #8
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1a:	e246      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c22:	e242      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007c24:	cfff69f3 	.word	0xcfff69f3
 8007c28:	58000c00 	.word	0x58000c00
 8007c2c:	11fff4ff 	.word	0x11fff4ff
 8007c30:	40011000 	.word	0x40011000
 8007c34:	58024400 	.word	0x58024400
 8007c38:	40004400 	.word	0x40004400
 8007c3c:	40004800 	.word	0x40004800
 8007c40:	40004c00 	.word	0x40004c00
 8007c44:	40005000 	.word	0x40005000
 8007c48:	2320      	movs	r3, #32
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e22c      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007c50:	2340      	movs	r3, #64	@ 0x40
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e228      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007c58:	2380      	movs	r3, #128	@ 0x80
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e224      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4ab1      	ldr	r2, [pc, #708]	@ (8007f2c <UART_SetConfig+0x630>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d176      	bne.n	8007d58 <UART_SetConfig+0x45c>
 8007c6a:	4bb1      	ldr	r3, [pc, #708]	@ (8007f30 <UART_SetConfig+0x634>)
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c72:	2b28      	cmp	r3, #40	@ 0x28
 8007c74:	d86c      	bhi.n	8007d50 <UART_SetConfig+0x454>
 8007c76:	a201      	add	r2, pc, #4	@ (adr r2, 8007c7c <UART_SetConfig+0x380>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007d21 	.word	0x08007d21
 8007c80:	08007d51 	.word	0x08007d51
 8007c84:	08007d51 	.word	0x08007d51
 8007c88:	08007d51 	.word	0x08007d51
 8007c8c:	08007d51 	.word	0x08007d51
 8007c90:	08007d51 	.word	0x08007d51
 8007c94:	08007d51 	.word	0x08007d51
 8007c98:	08007d51 	.word	0x08007d51
 8007c9c:	08007d29 	.word	0x08007d29
 8007ca0:	08007d51 	.word	0x08007d51
 8007ca4:	08007d51 	.word	0x08007d51
 8007ca8:	08007d51 	.word	0x08007d51
 8007cac:	08007d51 	.word	0x08007d51
 8007cb0:	08007d51 	.word	0x08007d51
 8007cb4:	08007d51 	.word	0x08007d51
 8007cb8:	08007d51 	.word	0x08007d51
 8007cbc:	08007d31 	.word	0x08007d31
 8007cc0:	08007d51 	.word	0x08007d51
 8007cc4:	08007d51 	.word	0x08007d51
 8007cc8:	08007d51 	.word	0x08007d51
 8007ccc:	08007d51 	.word	0x08007d51
 8007cd0:	08007d51 	.word	0x08007d51
 8007cd4:	08007d51 	.word	0x08007d51
 8007cd8:	08007d51 	.word	0x08007d51
 8007cdc:	08007d39 	.word	0x08007d39
 8007ce0:	08007d51 	.word	0x08007d51
 8007ce4:	08007d51 	.word	0x08007d51
 8007ce8:	08007d51 	.word	0x08007d51
 8007cec:	08007d51 	.word	0x08007d51
 8007cf0:	08007d51 	.word	0x08007d51
 8007cf4:	08007d51 	.word	0x08007d51
 8007cf8:	08007d51 	.word	0x08007d51
 8007cfc:	08007d41 	.word	0x08007d41
 8007d00:	08007d51 	.word	0x08007d51
 8007d04:	08007d51 	.word	0x08007d51
 8007d08:	08007d51 	.word	0x08007d51
 8007d0c:	08007d51 	.word	0x08007d51
 8007d10:	08007d51 	.word	0x08007d51
 8007d14:	08007d51 	.word	0x08007d51
 8007d18:	08007d51 	.word	0x08007d51
 8007d1c:	08007d49 	.word	0x08007d49
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d26:	e1c0      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2e:	e1bc      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e1b8      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e1b4      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007d40:	2320      	movs	r3, #32
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e1b0      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007d48:	2340      	movs	r3, #64	@ 0x40
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e1ac      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007d50:	2380      	movs	r3, #128	@ 0x80
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e1a8      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a75      	ldr	r2, [pc, #468]	@ (8007f34 <UART_SetConfig+0x638>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d130      	bne.n	8007dc4 <UART_SetConfig+0x4c8>
 8007d62:	4b73      	ldr	r3, [pc, #460]	@ (8007f30 <UART_SetConfig+0x634>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b05      	cmp	r3, #5
 8007d6c:	d826      	bhi.n	8007dbc <UART_SetConfig+0x4c0>
 8007d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d74 <UART_SetConfig+0x478>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d8d 	.word	0x08007d8d
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	08007d9d 	.word	0x08007d9d
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d92:	e18a      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007d94:	2304      	movs	r3, #4
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e186      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e182      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007da4:	2310      	movs	r3, #16
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e17e      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007dac:	2320      	movs	r3, #32
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e17a      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007db4:	2340      	movs	r3, #64	@ 0x40
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e176      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007dbc:	2380      	movs	r3, #128	@ 0x80
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc2:	e172      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a5b      	ldr	r2, [pc, #364]	@ (8007f38 <UART_SetConfig+0x63c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d130      	bne.n	8007e30 <UART_SetConfig+0x534>
 8007dce:	4b58      	ldr	r3, [pc, #352]	@ (8007f30 <UART_SetConfig+0x634>)
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b05      	cmp	r3, #5
 8007dd8:	d826      	bhi.n	8007e28 <UART_SetConfig+0x52c>
 8007dda:	a201      	add	r2, pc, #4	@ (adr r2, 8007de0 <UART_SetConfig+0x4e4>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007df9 	.word	0x08007df9
 8007de4:	08007e01 	.word	0x08007e01
 8007de8:	08007e09 	.word	0x08007e09
 8007dec:	08007e11 	.word	0x08007e11
 8007df0:	08007e19 	.word	0x08007e19
 8007df4:	08007e21 	.word	0x08007e21
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfe:	e154      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007e00:	2304      	movs	r3, #4
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e06:	e150      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007e08:	2308      	movs	r3, #8
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0e:	e14c      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007e10:	2310      	movs	r3, #16
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e16:	e148      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007e18:	2320      	movs	r3, #32
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1e:	e144      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007e20:	2340      	movs	r3, #64	@ 0x40
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e26:	e140      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007e28:	2380      	movs	r3, #128	@ 0x80
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2e:	e13c      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a41      	ldr	r2, [pc, #260]	@ (8007f3c <UART_SetConfig+0x640>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	f040 8082 	bne.w	8007f40 <UART_SetConfig+0x644>
 8007e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f30 <UART_SetConfig+0x634>)
 8007e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e44:	2b28      	cmp	r3, #40	@ 0x28
 8007e46:	d86d      	bhi.n	8007f24 <UART_SetConfig+0x628>
 8007e48:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <UART_SetConfig+0x554>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007ef5 	.word	0x08007ef5
 8007e54:	08007f25 	.word	0x08007f25
 8007e58:	08007f25 	.word	0x08007f25
 8007e5c:	08007f25 	.word	0x08007f25
 8007e60:	08007f25 	.word	0x08007f25
 8007e64:	08007f25 	.word	0x08007f25
 8007e68:	08007f25 	.word	0x08007f25
 8007e6c:	08007f25 	.word	0x08007f25
 8007e70:	08007efd 	.word	0x08007efd
 8007e74:	08007f25 	.word	0x08007f25
 8007e78:	08007f25 	.word	0x08007f25
 8007e7c:	08007f25 	.word	0x08007f25
 8007e80:	08007f25 	.word	0x08007f25
 8007e84:	08007f25 	.word	0x08007f25
 8007e88:	08007f25 	.word	0x08007f25
 8007e8c:	08007f25 	.word	0x08007f25
 8007e90:	08007f05 	.word	0x08007f05
 8007e94:	08007f25 	.word	0x08007f25
 8007e98:	08007f25 	.word	0x08007f25
 8007e9c:	08007f25 	.word	0x08007f25
 8007ea0:	08007f25 	.word	0x08007f25
 8007ea4:	08007f25 	.word	0x08007f25
 8007ea8:	08007f25 	.word	0x08007f25
 8007eac:	08007f25 	.word	0x08007f25
 8007eb0:	08007f0d 	.word	0x08007f0d
 8007eb4:	08007f25 	.word	0x08007f25
 8007eb8:	08007f25 	.word	0x08007f25
 8007ebc:	08007f25 	.word	0x08007f25
 8007ec0:	08007f25 	.word	0x08007f25
 8007ec4:	08007f25 	.word	0x08007f25
 8007ec8:	08007f25 	.word	0x08007f25
 8007ecc:	08007f25 	.word	0x08007f25
 8007ed0:	08007f15 	.word	0x08007f15
 8007ed4:	08007f25 	.word	0x08007f25
 8007ed8:	08007f25 	.word	0x08007f25
 8007edc:	08007f25 	.word	0x08007f25
 8007ee0:	08007f25 	.word	0x08007f25
 8007ee4:	08007f25 	.word	0x08007f25
 8007ee8:	08007f25 	.word	0x08007f25
 8007eec:	08007f25 	.word	0x08007f25
 8007ef0:	08007f1d 	.word	0x08007f1d
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efa:	e0d6      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007efc:	2304      	movs	r3, #4
 8007efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f02:	e0d2      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007f04:	2308      	movs	r3, #8
 8007f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f0a:	e0ce      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007f0c:	2310      	movs	r3, #16
 8007f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f12:	e0ca      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007f14:	2320      	movs	r3, #32
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1a:	e0c6      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007f1c:	2340      	movs	r3, #64	@ 0x40
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f22:	e0c2      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007f24:	2380      	movs	r3, #128	@ 0x80
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2a:	e0be      	b.n	80080aa <UART_SetConfig+0x7ae>
 8007f2c:	40011400 	.word	0x40011400
 8007f30:	58024400 	.word	0x58024400
 8007f34:	40007800 	.word	0x40007800
 8007f38:	40007c00 	.word	0x40007c00
 8007f3c:	40011800 	.word	0x40011800
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4aad      	ldr	r2, [pc, #692]	@ (80081fc <UART_SetConfig+0x900>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d176      	bne.n	8008038 <UART_SetConfig+0x73c>
 8007f4a:	4bad      	ldr	r3, [pc, #692]	@ (8008200 <UART_SetConfig+0x904>)
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f52:	2b28      	cmp	r3, #40	@ 0x28
 8007f54:	d86c      	bhi.n	8008030 <UART_SetConfig+0x734>
 8007f56:	a201      	add	r2, pc, #4	@ (adr r2, 8007f5c <UART_SetConfig+0x660>)
 8007f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5c:	08008001 	.word	0x08008001
 8007f60:	08008031 	.word	0x08008031
 8007f64:	08008031 	.word	0x08008031
 8007f68:	08008031 	.word	0x08008031
 8007f6c:	08008031 	.word	0x08008031
 8007f70:	08008031 	.word	0x08008031
 8007f74:	08008031 	.word	0x08008031
 8007f78:	08008031 	.word	0x08008031
 8007f7c:	08008009 	.word	0x08008009
 8007f80:	08008031 	.word	0x08008031
 8007f84:	08008031 	.word	0x08008031
 8007f88:	08008031 	.word	0x08008031
 8007f8c:	08008031 	.word	0x08008031
 8007f90:	08008031 	.word	0x08008031
 8007f94:	08008031 	.word	0x08008031
 8007f98:	08008031 	.word	0x08008031
 8007f9c:	08008011 	.word	0x08008011
 8007fa0:	08008031 	.word	0x08008031
 8007fa4:	08008031 	.word	0x08008031
 8007fa8:	08008031 	.word	0x08008031
 8007fac:	08008031 	.word	0x08008031
 8007fb0:	08008031 	.word	0x08008031
 8007fb4:	08008031 	.word	0x08008031
 8007fb8:	08008031 	.word	0x08008031
 8007fbc:	08008019 	.word	0x08008019
 8007fc0:	08008031 	.word	0x08008031
 8007fc4:	08008031 	.word	0x08008031
 8007fc8:	08008031 	.word	0x08008031
 8007fcc:	08008031 	.word	0x08008031
 8007fd0:	08008031 	.word	0x08008031
 8007fd4:	08008031 	.word	0x08008031
 8007fd8:	08008031 	.word	0x08008031
 8007fdc:	08008021 	.word	0x08008021
 8007fe0:	08008031 	.word	0x08008031
 8007fe4:	08008031 	.word	0x08008031
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	08008031 	.word	0x08008031
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008031 	.word	0x08008031
 8007ff8:	08008031 	.word	0x08008031
 8007ffc:	08008029 	.word	0x08008029
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008006:	e050      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800e:	e04c      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008016:	e048      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801e:	e044      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008020:	2320      	movs	r3, #32
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008026:	e040      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008028:	2340      	movs	r3, #64	@ 0x40
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802e:	e03c      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008030:	2380      	movs	r3, #128	@ 0x80
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008036:	e038      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a71      	ldr	r2, [pc, #452]	@ (8008204 <UART_SetConfig+0x908>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d130      	bne.n	80080a4 <UART_SetConfig+0x7a8>
 8008042:	4b6f      	ldr	r3, [pc, #444]	@ (8008200 <UART_SetConfig+0x904>)
 8008044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b05      	cmp	r3, #5
 800804c:	d826      	bhi.n	800809c <UART_SetConfig+0x7a0>
 800804e:	a201      	add	r2, pc, #4	@ (adr r2, 8008054 <UART_SetConfig+0x758>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800807d 	.word	0x0800807d
 8008060:	08008085 	.word	0x08008085
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008095 	.word	0x08008095
 800806c:	2302      	movs	r3, #2
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008072:	e01a      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008074:	2304      	movs	r3, #4
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807a:	e016      	b.n	80080aa <UART_SetConfig+0x7ae>
 800807c:	2308      	movs	r3, #8
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008082:	e012      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008084:	2310      	movs	r3, #16
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808a:	e00e      	b.n	80080aa <UART_SetConfig+0x7ae>
 800808c:	2320      	movs	r3, #32
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008092:	e00a      	b.n	80080aa <UART_SetConfig+0x7ae>
 8008094:	2340      	movs	r3, #64	@ 0x40
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809a:	e006      	b.n	80080aa <UART_SetConfig+0x7ae>
 800809c:	2380      	movs	r3, #128	@ 0x80
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a2:	e002      	b.n	80080aa <UART_SetConfig+0x7ae>
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a55      	ldr	r2, [pc, #340]	@ (8008204 <UART_SetConfig+0x908>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	f040 80f8 	bne.w	80082a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	dc46      	bgt.n	800814c <UART_SetConfig+0x850>
 80080be:	2b02      	cmp	r3, #2
 80080c0:	db75      	blt.n	80081ae <UART_SetConfig+0x8b2>
 80080c2:	3b02      	subs	r3, #2
 80080c4:	2b1e      	cmp	r3, #30
 80080c6:	d872      	bhi.n	80081ae <UART_SetConfig+0x8b2>
 80080c8:	a201      	add	r2, pc, #4	@ (adr r2, 80080d0 <UART_SetConfig+0x7d4>)
 80080ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ce:	bf00      	nop
 80080d0:	08008153 	.word	0x08008153
 80080d4:	080081af 	.word	0x080081af
 80080d8:	0800815b 	.word	0x0800815b
 80080dc:	080081af 	.word	0x080081af
 80080e0:	080081af 	.word	0x080081af
 80080e4:	080081af 	.word	0x080081af
 80080e8:	0800816b 	.word	0x0800816b
 80080ec:	080081af 	.word	0x080081af
 80080f0:	080081af 	.word	0x080081af
 80080f4:	080081af 	.word	0x080081af
 80080f8:	080081af 	.word	0x080081af
 80080fc:	080081af 	.word	0x080081af
 8008100:	080081af 	.word	0x080081af
 8008104:	080081af 	.word	0x080081af
 8008108:	0800817b 	.word	0x0800817b
 800810c:	080081af 	.word	0x080081af
 8008110:	080081af 	.word	0x080081af
 8008114:	080081af 	.word	0x080081af
 8008118:	080081af 	.word	0x080081af
 800811c:	080081af 	.word	0x080081af
 8008120:	080081af 	.word	0x080081af
 8008124:	080081af 	.word	0x080081af
 8008128:	080081af 	.word	0x080081af
 800812c:	080081af 	.word	0x080081af
 8008130:	080081af 	.word	0x080081af
 8008134:	080081af 	.word	0x080081af
 8008138:	080081af 	.word	0x080081af
 800813c:	080081af 	.word	0x080081af
 8008140:	080081af 	.word	0x080081af
 8008144:	080081af 	.word	0x080081af
 8008148:	080081a1 	.word	0x080081a1
 800814c:	2b40      	cmp	r3, #64	@ 0x40
 800814e:	d02a      	beq.n	80081a6 <UART_SetConfig+0x8aa>
 8008150:	e02d      	b.n	80081ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008152:	f7fd fb85 	bl	8005860 <HAL_RCCEx_GetD3PCLK1Freq>
 8008156:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008158:	e02f      	b.n	80081ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800815a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800815e:	4618      	mov	r0, r3
 8008160:	f7fd fb94 	bl	800588c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008168:	e027      	b.n	80081ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800816a:	f107 0318 	add.w	r3, r7, #24
 800816e:	4618      	mov	r0, r3
 8008170:	f7fd fce0 	bl	8005b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008178:	e01f      	b.n	80081ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800817a:	4b21      	ldr	r3, [pc, #132]	@ (8008200 <UART_SetConfig+0x904>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b00      	cmp	r3, #0
 8008184:	d009      	beq.n	800819a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008186:	4b1e      	ldr	r3, [pc, #120]	@ (8008200 <UART_SetConfig+0x904>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	08db      	lsrs	r3, r3, #3
 800818c:	f003 0303 	and.w	r3, r3, #3
 8008190:	4a1d      	ldr	r2, [pc, #116]	@ (8008208 <UART_SetConfig+0x90c>)
 8008192:	fa22 f303 	lsr.w	r3, r2, r3
 8008196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008198:	e00f      	b.n	80081ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800819a:	4b1b      	ldr	r3, [pc, #108]	@ (8008208 <UART_SetConfig+0x90c>)
 800819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800819e:	e00c      	b.n	80081ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081a0:	4b1a      	ldr	r3, [pc, #104]	@ (800820c <UART_SetConfig+0x910>)
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a4:	e009      	b.n	80081ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ac:	e005      	b.n	80081ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80081ae:	2300      	movs	r3, #0
 80081b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 81ee 	beq.w	800859e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c6:	4a12      	ldr	r2, [pc, #72]	@ (8008210 <UART_SetConfig+0x914>)
 80081c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081cc:	461a      	mov	r2, r3
 80081ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081d4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	4613      	mov	r3, r2
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	4413      	add	r3, r2
 80081e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d305      	bcc.n	80081f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d910      	bls.n	8008214 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081f8:	e1d1      	b.n	800859e <UART_SetConfig+0xca2>
 80081fa:	bf00      	nop
 80081fc:	40011c00 	.word	0x40011c00
 8008200:	58024400 	.word	0x58024400
 8008204:	58000c00 	.word	0x58000c00
 8008208:	03d09000 	.word	0x03d09000
 800820c:	003d0900 	.word	0x003d0900
 8008210:	0800b66c 	.word	0x0800b66c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008216:	2200      	movs	r2, #0
 8008218:	60bb      	str	r3, [r7, #8]
 800821a:	60fa      	str	r2, [r7, #12]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008220:	4ac0      	ldr	r2, [pc, #768]	@ (8008524 <UART_SetConfig+0xc28>)
 8008222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008226:	b29b      	uxth	r3, r3
 8008228:	2200      	movs	r2, #0
 800822a:	603b      	str	r3, [r7, #0]
 800822c:	607a      	str	r2, [r7, #4]
 800822e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008236:	f7f8 f8c3 	bl	80003c0 <__aeabi_uldivmod>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4610      	mov	r0, r2
 8008240:	4619      	mov	r1, r3
 8008242:	f04f 0200 	mov.w	r2, #0
 8008246:	f04f 0300 	mov.w	r3, #0
 800824a:	020b      	lsls	r3, r1, #8
 800824c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008250:	0202      	lsls	r2, r0, #8
 8008252:	6979      	ldr	r1, [r7, #20]
 8008254:	6849      	ldr	r1, [r1, #4]
 8008256:	0849      	lsrs	r1, r1, #1
 8008258:	2000      	movs	r0, #0
 800825a:	460c      	mov	r4, r1
 800825c:	4605      	mov	r5, r0
 800825e:	eb12 0804 	adds.w	r8, r2, r4
 8008262:	eb43 0905 	adc.w	r9, r3, r5
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	469a      	mov	sl, r3
 800826e:	4693      	mov	fp, r2
 8008270:	4652      	mov	r2, sl
 8008272:	465b      	mov	r3, fp
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f8 f8a2 	bl	80003c0 <__aeabi_uldivmod>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4613      	mov	r3, r2
 8008282:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800828a:	d308      	bcc.n	800829e <UART_SetConfig+0x9a2>
 800828c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008292:	d204      	bcs.n	800829e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800829a:	60da      	str	r2, [r3, #12]
 800829c:	e17f      	b.n	800859e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80082a4:	e17b      	b.n	800859e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ae:	f040 80bd 	bne.w	800842c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80082b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	dc48      	bgt.n	800834c <UART_SetConfig+0xa50>
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	db7b      	blt.n	80083b6 <UART_SetConfig+0xaba>
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d879      	bhi.n	80083b6 <UART_SetConfig+0xaba>
 80082c2:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <UART_SetConfig+0x9cc>)
 80082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c8:	08008353 	.word	0x08008353
 80082cc:	0800835b 	.word	0x0800835b
 80082d0:	080083b7 	.word	0x080083b7
 80082d4:	080083b7 	.word	0x080083b7
 80082d8:	08008363 	.word	0x08008363
 80082dc:	080083b7 	.word	0x080083b7
 80082e0:	080083b7 	.word	0x080083b7
 80082e4:	080083b7 	.word	0x080083b7
 80082e8:	08008373 	.word	0x08008373
 80082ec:	080083b7 	.word	0x080083b7
 80082f0:	080083b7 	.word	0x080083b7
 80082f4:	080083b7 	.word	0x080083b7
 80082f8:	080083b7 	.word	0x080083b7
 80082fc:	080083b7 	.word	0x080083b7
 8008300:	080083b7 	.word	0x080083b7
 8008304:	080083b7 	.word	0x080083b7
 8008308:	08008383 	.word	0x08008383
 800830c:	080083b7 	.word	0x080083b7
 8008310:	080083b7 	.word	0x080083b7
 8008314:	080083b7 	.word	0x080083b7
 8008318:	080083b7 	.word	0x080083b7
 800831c:	080083b7 	.word	0x080083b7
 8008320:	080083b7 	.word	0x080083b7
 8008324:	080083b7 	.word	0x080083b7
 8008328:	080083b7 	.word	0x080083b7
 800832c:	080083b7 	.word	0x080083b7
 8008330:	080083b7 	.word	0x080083b7
 8008334:	080083b7 	.word	0x080083b7
 8008338:	080083b7 	.word	0x080083b7
 800833c:	080083b7 	.word	0x080083b7
 8008340:	080083b7 	.word	0x080083b7
 8008344:	080083b7 	.word	0x080083b7
 8008348:	080083a9 	.word	0x080083a9
 800834c:	2b40      	cmp	r3, #64	@ 0x40
 800834e:	d02e      	beq.n	80083ae <UART_SetConfig+0xab2>
 8008350:	e031      	b.n	80083b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008352:	f7fc f8b9 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 8008356:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008358:	e033      	b.n	80083c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800835a:	f7fc f8cb 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 800835e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008360:	e02f      	b.n	80083c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008366:	4618      	mov	r0, r3
 8008368:	f7fd fa90 	bl	800588c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008370:	e027      	b.n	80083c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008372:	f107 0318 	add.w	r3, r7, #24
 8008376:	4618      	mov	r0, r3
 8008378:	f7fd fbdc 	bl	8005b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008380:	e01f      	b.n	80083c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008382:	4b69      	ldr	r3, [pc, #420]	@ (8008528 <UART_SetConfig+0xc2c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800838e:	4b66      	ldr	r3, [pc, #408]	@ (8008528 <UART_SetConfig+0xc2c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	08db      	lsrs	r3, r3, #3
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	4a64      	ldr	r2, [pc, #400]	@ (800852c <UART_SetConfig+0xc30>)
 800839a:	fa22 f303 	lsr.w	r3, r2, r3
 800839e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083a0:	e00f      	b.n	80083c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80083a2:	4b62      	ldr	r3, [pc, #392]	@ (800852c <UART_SetConfig+0xc30>)
 80083a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a6:	e00c      	b.n	80083c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083a8:	4b61      	ldr	r3, [pc, #388]	@ (8008530 <UART_SetConfig+0xc34>)
 80083aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ac:	e009      	b.n	80083c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b4:	e005      	b.n	80083c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80ea 	beq.w	800859e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	4a55      	ldr	r2, [pc, #340]	@ (8008524 <UART_SetConfig+0xc28>)
 80083d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d4:	461a      	mov	r2, r3
 80083d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083dc:	005a      	lsls	r2, r3, #1
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	441a      	add	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f2:	2b0f      	cmp	r3, #15
 80083f4:	d916      	bls.n	8008424 <UART_SetConfig+0xb28>
 80083f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083fc:	d212      	bcs.n	8008424 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	b29b      	uxth	r3, r3
 8008402:	f023 030f 	bic.w	r3, r3, #15
 8008406:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	b29b      	uxth	r3, r3
 800840e:	f003 0307 	and.w	r3, r3, #7
 8008412:	b29a      	uxth	r2, r3
 8008414:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008416:	4313      	orrs	r3, r2
 8008418:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008420:	60da      	str	r2, [r3, #12]
 8008422:	e0bc      	b.n	800859e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800842a:	e0b8      	b.n	800859e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800842c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008430:	2b20      	cmp	r3, #32
 8008432:	dc4b      	bgt.n	80084cc <UART_SetConfig+0xbd0>
 8008434:	2b00      	cmp	r3, #0
 8008436:	f2c0 8087 	blt.w	8008548 <UART_SetConfig+0xc4c>
 800843a:	2b20      	cmp	r3, #32
 800843c:	f200 8084 	bhi.w	8008548 <UART_SetConfig+0xc4c>
 8008440:	a201      	add	r2, pc, #4	@ (adr r2, 8008448 <UART_SetConfig+0xb4c>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	080084d3 	.word	0x080084d3
 800844c:	080084db 	.word	0x080084db
 8008450:	08008549 	.word	0x08008549
 8008454:	08008549 	.word	0x08008549
 8008458:	080084e3 	.word	0x080084e3
 800845c:	08008549 	.word	0x08008549
 8008460:	08008549 	.word	0x08008549
 8008464:	08008549 	.word	0x08008549
 8008468:	080084f3 	.word	0x080084f3
 800846c:	08008549 	.word	0x08008549
 8008470:	08008549 	.word	0x08008549
 8008474:	08008549 	.word	0x08008549
 8008478:	08008549 	.word	0x08008549
 800847c:	08008549 	.word	0x08008549
 8008480:	08008549 	.word	0x08008549
 8008484:	08008549 	.word	0x08008549
 8008488:	08008503 	.word	0x08008503
 800848c:	08008549 	.word	0x08008549
 8008490:	08008549 	.word	0x08008549
 8008494:	08008549 	.word	0x08008549
 8008498:	08008549 	.word	0x08008549
 800849c:	08008549 	.word	0x08008549
 80084a0:	08008549 	.word	0x08008549
 80084a4:	08008549 	.word	0x08008549
 80084a8:	08008549 	.word	0x08008549
 80084ac:	08008549 	.word	0x08008549
 80084b0:	08008549 	.word	0x08008549
 80084b4:	08008549 	.word	0x08008549
 80084b8:	08008549 	.word	0x08008549
 80084bc:	08008549 	.word	0x08008549
 80084c0:	08008549 	.word	0x08008549
 80084c4:	08008549 	.word	0x08008549
 80084c8:	0800853b 	.word	0x0800853b
 80084cc:	2b40      	cmp	r3, #64	@ 0x40
 80084ce:	d037      	beq.n	8008540 <UART_SetConfig+0xc44>
 80084d0:	e03a      	b.n	8008548 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084d2:	f7fb fff9 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 80084d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084d8:	e03c      	b.n	8008554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084da:	f7fc f80b 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 80084de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084e0:	e038      	b.n	8008554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fd f9d0 	bl	800588c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f0:	e030      	b.n	8008554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084f2:	f107 0318 	add.w	r3, r7, #24
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fd fb1c 	bl	8005b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008500:	e028      	b.n	8008554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008502:	4b09      	ldr	r3, [pc, #36]	@ (8008528 <UART_SetConfig+0xc2c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d012      	beq.n	8008534 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800850e:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <UART_SetConfig+0xc2c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	08db      	lsrs	r3, r3, #3
 8008514:	f003 0303 	and.w	r3, r3, #3
 8008518:	4a04      	ldr	r2, [pc, #16]	@ (800852c <UART_SetConfig+0xc30>)
 800851a:	fa22 f303 	lsr.w	r3, r2, r3
 800851e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008520:	e018      	b.n	8008554 <UART_SetConfig+0xc58>
 8008522:	bf00      	nop
 8008524:	0800b66c 	.word	0x0800b66c
 8008528:	58024400 	.word	0x58024400
 800852c:	03d09000 	.word	0x03d09000
 8008530:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008534:	4b24      	ldr	r3, [pc, #144]	@ (80085c8 <UART_SetConfig+0xccc>)
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008538:	e00c      	b.n	8008554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800853a:	4b24      	ldr	r3, [pc, #144]	@ (80085cc <UART_SetConfig+0xcd0>)
 800853c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853e:	e009      	b.n	8008554 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008540:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008546:	e005      	b.n	8008554 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008548:	2300      	movs	r3, #0
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008552:	bf00      	nop
    }

    if (pclk != 0U)
 8008554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d021      	beq.n	800859e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855e:	4a1c      	ldr	r2, [pc, #112]	@ (80085d0 <UART_SetConfig+0xcd4>)
 8008560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008564:	461a      	mov	r2, r3
 8008566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008568:	fbb3 f2f2 	udiv	r2, r3, r2
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	085b      	lsrs	r3, r3, #1
 8008572:	441a      	add	r2, r3
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	fbb2 f3f3 	udiv	r3, r2, r3
 800857c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800857e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008580:	2b0f      	cmp	r3, #15
 8008582:	d909      	bls.n	8008598 <UART_SetConfig+0xc9c>
 8008584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800858a:	d205      	bcs.n	8008598 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	b29a      	uxth	r2, r3
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	60da      	str	r2, [r3, #12]
 8008596:	e002      	b.n	800859e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2200      	movs	r2, #0
 80085b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2200      	movs	r2, #0
 80085b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80085ba:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3748      	adds	r7, #72	@ 0x48
 80085c2:	46bd      	mov	sp, r7
 80085c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085c8:	03d09000 	.word	0x03d09000
 80085cc:	003d0900 	.word	0x003d0900
 80085d0:	0800b66c 	.word	0x0800b66c

080085d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008668:	f003 0310 	and.w	r3, r3, #16
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01a      	beq.n	80086ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086d2:	d10a      	bne.n	80086ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	605a      	str	r2, [r3, #4]
  }
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b098      	sub	sp, #96	@ 0x60
 800871c:	af02      	add	r7, sp, #8
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008728:	f7f9 f9c0 	bl	8001aac <HAL_GetTick>
 800872c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b08      	cmp	r3, #8
 800873a:	d12f      	bne.n	800879c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800873c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008744:	2200      	movs	r2, #0
 8008746:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f88e 	bl	800886c <UART_WaitOnFlagUntilTimeout>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d022      	beq.n	800879c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875e:	e853 3f00 	ldrex	r3, [r3]
 8008762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800876a:	653b      	str	r3, [r7, #80]	@ 0x50
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008774:	647b      	str	r3, [r7, #68]	@ 0x44
 8008776:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800877a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e6      	bne.n	8008756 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e063      	b.n	8008864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d149      	bne.n	800883e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087b2:	2200      	movs	r2, #0
 80087b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f857 	bl	800886c <UART_WaitOnFlagUntilTimeout>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d03c      	beq.n	800883e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	623b      	str	r3, [r7, #32]
   return(result);
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80087e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e6      	bne.n	80087c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3308      	adds	r3, #8
 80087fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	60fb      	str	r3, [r7, #12]
   return(result);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f023 0301 	bic.w	r3, r3, #1
 800880c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008816:	61fa      	str	r2, [r7, #28]
 8008818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	69b9      	ldr	r1, [r7, #24]
 800881c:	69fa      	ldr	r2, [r7, #28]
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	617b      	str	r3, [r7, #20]
   return(result);
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e5      	bne.n	80087f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e012      	b.n	8008864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3758      	adds	r7, #88	@ 0x58
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	603b      	str	r3, [r7, #0]
 8008878:	4613      	mov	r3, r2
 800887a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800887c:	e04f      	b.n	800891e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008884:	d04b      	beq.n	800891e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008886:	f7f9 f911 	bl	8001aac <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	429a      	cmp	r2, r3
 8008894:	d302      	bcc.n	800889c <UART_WaitOnFlagUntilTimeout+0x30>
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e04e      	b.n	800893e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d037      	beq.n	800891e <UART_WaitOnFlagUntilTimeout+0xb2>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b80      	cmp	r3, #128	@ 0x80
 80088b2:	d034      	beq.n	800891e <UART_WaitOnFlagUntilTimeout+0xb2>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b40      	cmp	r3, #64	@ 0x40
 80088b8:	d031      	beq.n	800891e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d110      	bne.n	80088ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2208      	movs	r2, #8
 80088ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 f839 	bl	8008948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2208      	movs	r2, #8
 80088da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e029      	b.n	800893e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f8:	d111      	bne.n	800891e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f81f 	bl	8008948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2220      	movs	r2, #32
 800890e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e00f      	b.n	800893e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4013      	ands	r3, r2
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	429a      	cmp	r2, r3
 800892c:	bf0c      	ite	eq
 800892e:	2301      	moveq	r3, #1
 8008930:	2300      	movne	r3, #0
 8008932:	b2db      	uxtb	r3, r3
 8008934:	461a      	mov	r2, r3
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	429a      	cmp	r2, r3
 800893a:	d0a0      	beq.n	800887e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b095      	sub	sp, #84	@ 0x54
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800895e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008960:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800896e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008970:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008974:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800897c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e6      	bne.n	8008950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3308      	adds	r3, #8
 8008988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	61fb      	str	r3, [r7, #28]
   return(result);
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	4b1e      	ldr	r3, [pc, #120]	@ (8008a10 <UART_EndRxTransfer+0xc8>)
 8008996:	4013      	ands	r3, r2
 8008998:	64bb      	str	r3, [r7, #72]	@ 0x48
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e5      	bne.n	8008982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d118      	bne.n	80089f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f023 0310 	bic.w	r3, r3, #16
 80089d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089dc:	61bb      	str	r3, [r7, #24]
 80089de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e6      	bne.n	80089be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a04:	bf00      	nop
 8008a06:	3754      	adds	r7, #84	@ 0x54
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	effffffe 	.word	0xeffffffe

08008a14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f7fe ff50 	bl	80078d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a30:	bf00      	nop
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a54:	61fb      	str	r3, [r7, #28]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	61bb      	str	r3, [r7, #24]
 8008a60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6979      	ldr	r1, [r7, #20]
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e6      	bne.n	8008a40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7fe ff1b 	bl	80078bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a86:	bf00      	nop
 8008a88:	3720      	adds	r7, #32
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008abe:	bf00      	nop
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b085      	sub	sp, #20
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e027      	b.n	8008b30 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2224      	movs	r2, #36	@ 0x24
 8008aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 0201 	bic.w	r2, r2, #1
 8008b06:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008b0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e02d      	b.n	8008bb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2224      	movs	r2, #36	@ 0x24
 8008b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0201 	bic.w	r2, r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f84f 	bl	8008c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d101      	bne.n	8008bd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bcc:	2302      	movs	r3, #2
 8008bce:	e02d      	b.n	8008c2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2224      	movs	r2, #36	@ 0x24
 8008bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 0201 	bic.w	r2, r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f811 	bl	8008c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d108      	bne.n	8008c56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c54:	e031      	b.n	8008cba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c56:	2310      	movs	r3, #16
 8008c58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c5a:	2310      	movs	r3, #16
 8008c5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	0e5b      	lsrs	r3, r3, #25
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	0f5b      	lsrs	r3, r3, #29
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	7b3a      	ldrb	r2, [r7, #12]
 8008c82:	4911      	ldr	r1, [pc, #68]	@ (8008cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8008c84:	5c8a      	ldrb	r2, [r1, r2]
 8008c86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c8a:	7b3a      	ldrb	r2, [r7, #12]
 8008c8c:	490f      	ldr	r1, [pc, #60]	@ (8008ccc <UARTEx_SetNbDataToProcess+0x98>)
 8008c8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c90:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	7b7a      	ldrb	r2, [r7, #13]
 8008ca0:	4909      	ldr	r1, [pc, #36]	@ (8008cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8008ca2:	5c8a      	ldrb	r2, [r1, r2]
 8008ca4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ca8:	7b7a      	ldrb	r2, [r7, #13]
 8008caa:	4908      	ldr	r1, [pc, #32]	@ (8008ccc <UARTEx_SetNbDataToProcess+0x98>)
 8008cac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cae:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	0800b684 	.word	0x0800b684
 8008ccc:	0800b68c 	.word	0x0800b68c

08008cd0 <__cvt>:
 8008cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cd2:	ed2d 8b02 	vpush	{d8}
 8008cd6:	eeb0 8b40 	vmov.f64	d8, d0
 8008cda:	b085      	sub	sp, #20
 8008cdc:	4617      	mov	r7, r2
 8008cde:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008ce0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ce2:	ee18 2a90 	vmov	r2, s17
 8008ce6:	f025 0520 	bic.w	r5, r5, #32
 8008cea:	2a00      	cmp	r2, #0
 8008cec:	bfb6      	itet	lt
 8008cee:	222d      	movlt	r2, #45	@ 0x2d
 8008cf0:	2200      	movge	r2, #0
 8008cf2:	eeb1 8b40 	vneglt.f64	d8, d0
 8008cf6:	2d46      	cmp	r5, #70	@ 0x46
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	d004      	beq.n	8008d08 <__cvt+0x38>
 8008cfe:	2d45      	cmp	r5, #69	@ 0x45
 8008d00:	d100      	bne.n	8008d04 <__cvt+0x34>
 8008d02:	3401      	adds	r4, #1
 8008d04:	2102      	movs	r1, #2
 8008d06:	e000      	b.n	8008d0a <__cvt+0x3a>
 8008d08:	2103      	movs	r1, #3
 8008d0a:	ab03      	add	r3, sp, #12
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	ab02      	add	r3, sp, #8
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	4622      	mov	r2, r4
 8008d14:	4633      	mov	r3, r6
 8008d16:	eeb0 0b48 	vmov.f64	d0, d8
 8008d1a:	f000 fe11 	bl	8009940 <_dtoa_r>
 8008d1e:	2d47      	cmp	r5, #71	@ 0x47
 8008d20:	d114      	bne.n	8008d4c <__cvt+0x7c>
 8008d22:	07fb      	lsls	r3, r7, #31
 8008d24:	d50a      	bpl.n	8008d3c <__cvt+0x6c>
 8008d26:	1902      	adds	r2, r0, r4
 8008d28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d30:	bf08      	it	eq
 8008d32:	9203      	streq	r2, [sp, #12]
 8008d34:	2130      	movs	r1, #48	@ 0x30
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d319      	bcc.n	8008d70 <__cvt+0xa0>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d40:	1a1b      	subs	r3, r3, r0
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	b005      	add	sp, #20
 8008d46:	ecbd 8b02 	vpop	{d8}
 8008d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4c:	2d46      	cmp	r5, #70	@ 0x46
 8008d4e:	eb00 0204 	add.w	r2, r0, r4
 8008d52:	d1e9      	bne.n	8008d28 <__cvt+0x58>
 8008d54:	7803      	ldrb	r3, [r0, #0]
 8008d56:	2b30      	cmp	r3, #48	@ 0x30
 8008d58:	d107      	bne.n	8008d6a <__cvt+0x9a>
 8008d5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d62:	bf1c      	itt	ne
 8008d64:	f1c4 0401 	rsbne	r4, r4, #1
 8008d68:	6034      	strne	r4, [r6, #0]
 8008d6a:	6833      	ldr	r3, [r6, #0]
 8008d6c:	441a      	add	r2, r3
 8008d6e:	e7db      	b.n	8008d28 <__cvt+0x58>
 8008d70:	1c5c      	adds	r4, r3, #1
 8008d72:	9403      	str	r4, [sp, #12]
 8008d74:	7019      	strb	r1, [r3, #0]
 8008d76:	e7de      	b.n	8008d36 <__cvt+0x66>

08008d78 <__exponent>:
 8008d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d7a:	2900      	cmp	r1, #0
 8008d7c:	bfba      	itte	lt
 8008d7e:	4249      	neglt	r1, r1
 8008d80:	232d      	movlt	r3, #45	@ 0x2d
 8008d82:	232b      	movge	r3, #43	@ 0x2b
 8008d84:	2909      	cmp	r1, #9
 8008d86:	7002      	strb	r2, [r0, #0]
 8008d88:	7043      	strb	r3, [r0, #1]
 8008d8a:	dd29      	ble.n	8008de0 <__exponent+0x68>
 8008d8c:	f10d 0307 	add.w	r3, sp, #7
 8008d90:	461d      	mov	r5, r3
 8008d92:	270a      	movs	r7, #10
 8008d94:	461a      	mov	r2, r3
 8008d96:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d9a:	fb07 1416 	mls	r4, r7, r6, r1
 8008d9e:	3430      	adds	r4, #48	@ 0x30
 8008da0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008da4:	460c      	mov	r4, r1
 8008da6:	2c63      	cmp	r4, #99	@ 0x63
 8008da8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008dac:	4631      	mov	r1, r6
 8008dae:	dcf1      	bgt.n	8008d94 <__exponent+0x1c>
 8008db0:	3130      	adds	r1, #48	@ 0x30
 8008db2:	1e94      	subs	r4, r2, #2
 8008db4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008db8:	1c41      	adds	r1, r0, #1
 8008dba:	4623      	mov	r3, r4
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	d30a      	bcc.n	8008dd6 <__exponent+0x5e>
 8008dc0:	f10d 0309 	add.w	r3, sp, #9
 8008dc4:	1a9b      	subs	r3, r3, r2
 8008dc6:	42ac      	cmp	r4, r5
 8008dc8:	bf88      	it	hi
 8008dca:	2300      	movhi	r3, #0
 8008dcc:	3302      	adds	r3, #2
 8008dce:	4403      	add	r3, r0
 8008dd0:	1a18      	subs	r0, r3, r0
 8008dd2:	b003      	add	sp, #12
 8008dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008dda:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008dde:	e7ed      	b.n	8008dbc <__exponent+0x44>
 8008de0:	2330      	movs	r3, #48	@ 0x30
 8008de2:	3130      	adds	r1, #48	@ 0x30
 8008de4:	7083      	strb	r3, [r0, #2]
 8008de6:	70c1      	strb	r1, [r0, #3]
 8008de8:	1d03      	adds	r3, r0, #4
 8008dea:	e7f1      	b.n	8008dd0 <__exponent+0x58>
 8008dec:	0000      	movs	r0, r0
	...

08008df0 <_printf_float>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	b08d      	sub	sp, #52	@ 0x34
 8008df6:	460c      	mov	r4, r1
 8008df8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	461f      	mov	r7, r3
 8008e00:	4605      	mov	r5, r0
 8008e02:	f000 fd03 	bl	800980c <_localeconv_r>
 8008e06:	f8d0 b000 	ldr.w	fp, [r0]
 8008e0a:	4658      	mov	r0, fp
 8008e0c:	f7f7 fad0 	bl	80003b0 <strlen>
 8008e10:	2300      	movs	r3, #0
 8008e12:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e14:	f8d8 3000 	ldr.w	r3, [r8]
 8008e18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008e1c:	6822      	ldr	r2, [r4, #0]
 8008e1e:	9005      	str	r0, [sp, #20]
 8008e20:	3307      	adds	r3, #7
 8008e22:	f023 0307 	bic.w	r3, r3, #7
 8008e26:	f103 0108 	add.w	r1, r3, #8
 8008e2a:	f8c8 1000 	str.w	r1, [r8]
 8008e2e:	ed93 0b00 	vldr	d0, [r3]
 8008e32:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009090 <_printf_float+0x2a0>
 8008e36:	eeb0 7bc0 	vabs.f64	d7, d0
 8008e3a:	eeb4 7b46 	vcmp.f64	d7, d6
 8008e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e42:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008e46:	dd24      	ble.n	8008e92 <_printf_float+0xa2>
 8008e48:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e50:	d502      	bpl.n	8008e58 <_printf_float+0x68>
 8008e52:	232d      	movs	r3, #45	@ 0x2d
 8008e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e58:	498f      	ldr	r1, [pc, #572]	@ (8009098 <_printf_float+0x2a8>)
 8008e5a:	4b90      	ldr	r3, [pc, #576]	@ (800909c <_printf_float+0x2ac>)
 8008e5c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008e60:	bf8c      	ite	hi
 8008e62:	4688      	movhi	r8, r1
 8008e64:	4698      	movls	r8, r3
 8008e66:	f022 0204 	bic.w	r2, r2, #4
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	6022      	str	r2, [r4, #0]
 8008e70:	f04f 0a00 	mov.w	sl, #0
 8008e74:	9700      	str	r7, [sp, #0]
 8008e76:	4633      	mov	r3, r6
 8008e78:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f000 f9d1 	bl	8009224 <_printf_common>
 8008e82:	3001      	adds	r0, #1
 8008e84:	f040 8089 	bne.w	8008f9a <_printf_float+0x1aa>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e8c:	b00d      	add	sp, #52	@ 0x34
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	eeb4 0b40 	vcmp.f64	d0, d0
 8008e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9a:	d709      	bvc.n	8008eb0 <_printf_float+0xc0>
 8008e9c:	ee10 3a90 	vmov	r3, s1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bfbc      	itt	lt
 8008ea4:	232d      	movlt	r3, #45	@ 0x2d
 8008ea6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008eaa:	497d      	ldr	r1, [pc, #500]	@ (80090a0 <_printf_float+0x2b0>)
 8008eac:	4b7d      	ldr	r3, [pc, #500]	@ (80090a4 <_printf_float+0x2b4>)
 8008eae:	e7d5      	b.n	8008e5c <_printf_float+0x6c>
 8008eb0:	6863      	ldr	r3, [r4, #4]
 8008eb2:	1c59      	adds	r1, r3, #1
 8008eb4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008eb8:	d139      	bne.n	8008f2e <_printf_float+0x13e>
 8008eba:	2306      	movs	r3, #6
 8008ebc:	6063      	str	r3, [r4, #4]
 8008ebe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6022      	str	r2, [r4, #0]
 8008ec6:	9303      	str	r3, [sp, #12]
 8008ec8:	ab0a      	add	r3, sp, #40	@ 0x28
 8008eca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008ece:	ab09      	add	r3, sp, #36	@ 0x24
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	6861      	ldr	r1, [r4, #4]
 8008ed4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f7ff fef9 	bl	8008cd0 <__cvt>
 8008ede:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008ee2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	d129      	bne.n	8008f3c <_printf_float+0x14c>
 8008ee8:	1cc8      	adds	r0, r1, #3
 8008eea:	db02      	blt.n	8008ef2 <_printf_float+0x102>
 8008eec:	6863      	ldr	r3, [r4, #4]
 8008eee:	4299      	cmp	r1, r3
 8008ef0:	dd41      	ble.n	8008f76 <_printf_float+0x186>
 8008ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8008ef6:	fa5f f989 	uxtb.w	r9, r9
 8008efa:	3901      	subs	r1, #1
 8008efc:	464a      	mov	r2, r9
 8008efe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f02:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f04:	f7ff ff38 	bl	8008d78 <__exponent>
 8008f08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f0a:	1813      	adds	r3, r2, r0
 8008f0c:	2a01      	cmp	r2, #1
 8008f0e:	4682      	mov	sl, r0
 8008f10:	6123      	str	r3, [r4, #16]
 8008f12:	dc02      	bgt.n	8008f1a <_printf_float+0x12a>
 8008f14:	6822      	ldr	r2, [r4, #0]
 8008f16:	07d2      	lsls	r2, r2, #31
 8008f18:	d501      	bpl.n	8008f1e <_printf_float+0x12e>
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	6123      	str	r3, [r4, #16]
 8008f1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0a6      	beq.n	8008e74 <_printf_float+0x84>
 8008f26:	232d      	movs	r3, #45	@ 0x2d
 8008f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f2c:	e7a2      	b.n	8008e74 <_printf_float+0x84>
 8008f2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f32:	d1c4      	bne.n	8008ebe <_printf_float+0xce>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1c2      	bne.n	8008ebe <_printf_float+0xce>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e7bf      	b.n	8008ebc <_printf_float+0xcc>
 8008f3c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008f40:	d9db      	bls.n	8008efa <_printf_float+0x10a>
 8008f42:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008f46:	d118      	bne.n	8008f7a <_printf_float+0x18a>
 8008f48:	2900      	cmp	r1, #0
 8008f4a:	6863      	ldr	r3, [r4, #4]
 8008f4c:	dd0b      	ble.n	8008f66 <_printf_float+0x176>
 8008f4e:	6121      	str	r1, [r4, #16]
 8008f50:	b913      	cbnz	r3, 8008f58 <_printf_float+0x168>
 8008f52:	6822      	ldr	r2, [r4, #0]
 8008f54:	07d0      	lsls	r0, r2, #31
 8008f56:	d502      	bpl.n	8008f5e <_printf_float+0x16e>
 8008f58:	3301      	adds	r3, #1
 8008f5a:	440b      	add	r3, r1
 8008f5c:	6123      	str	r3, [r4, #16]
 8008f5e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f60:	f04f 0a00 	mov.w	sl, #0
 8008f64:	e7db      	b.n	8008f1e <_printf_float+0x12e>
 8008f66:	b913      	cbnz	r3, 8008f6e <_printf_float+0x17e>
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	07d2      	lsls	r2, r2, #31
 8008f6c:	d501      	bpl.n	8008f72 <_printf_float+0x182>
 8008f6e:	3302      	adds	r3, #2
 8008f70:	e7f4      	b.n	8008f5c <_printf_float+0x16c>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e7f2      	b.n	8008f5c <_printf_float+0x16c>
 8008f76:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008f7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f7c:	4299      	cmp	r1, r3
 8008f7e:	db05      	blt.n	8008f8c <_printf_float+0x19c>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	6121      	str	r1, [r4, #16]
 8008f84:	07d8      	lsls	r0, r3, #31
 8008f86:	d5ea      	bpl.n	8008f5e <_printf_float+0x16e>
 8008f88:	1c4b      	adds	r3, r1, #1
 8008f8a:	e7e7      	b.n	8008f5c <_printf_float+0x16c>
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	bfd4      	ite	le
 8008f90:	f1c1 0202 	rsble	r2, r1, #2
 8008f94:	2201      	movgt	r2, #1
 8008f96:	4413      	add	r3, r2
 8008f98:	e7e0      	b.n	8008f5c <_printf_float+0x16c>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	055a      	lsls	r2, r3, #21
 8008f9e:	d407      	bmi.n	8008fb0 <_printf_float+0x1c0>
 8008fa0:	6923      	ldr	r3, [r4, #16]
 8008fa2:	4642      	mov	r2, r8
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b8      	blx	r7
 8008faa:	3001      	adds	r0, #1
 8008fac:	d12a      	bne.n	8009004 <_printf_float+0x214>
 8008fae:	e76b      	b.n	8008e88 <_printf_float+0x98>
 8008fb0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008fb4:	f240 80e0 	bls.w	8009178 <_printf_float+0x388>
 8008fb8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008fbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc4:	d133      	bne.n	800902e <_printf_float+0x23e>
 8008fc6:	4a38      	ldr	r2, [pc, #224]	@ (80090a8 <_printf_float+0x2b8>)
 8008fc8:	2301      	movs	r3, #1
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4628      	mov	r0, r5
 8008fce:	47b8      	blx	r7
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f43f af59 	beq.w	8008e88 <_printf_float+0x98>
 8008fd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008fda:	4543      	cmp	r3, r8
 8008fdc:	db02      	blt.n	8008fe4 <_printf_float+0x1f4>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	07d8      	lsls	r0, r3, #31
 8008fe2:	d50f      	bpl.n	8009004 <_printf_float+0x214>
 8008fe4:	9b05      	ldr	r3, [sp, #20]
 8008fe6:	465a      	mov	r2, fp
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4628      	mov	r0, r5
 8008fec:	47b8      	blx	r7
 8008fee:	3001      	adds	r0, #1
 8008ff0:	f43f af4a 	beq.w	8008e88 <_printf_float+0x98>
 8008ff4:	f04f 0900 	mov.w	r9, #0
 8008ff8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008ffc:	f104 0a1a 	add.w	sl, r4, #26
 8009000:	45c8      	cmp	r8, r9
 8009002:	dc09      	bgt.n	8009018 <_printf_float+0x228>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	079b      	lsls	r3, r3, #30
 8009008:	f100 8107 	bmi.w	800921a <_printf_float+0x42a>
 800900c:	68e0      	ldr	r0, [r4, #12]
 800900e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009010:	4298      	cmp	r0, r3
 8009012:	bfb8      	it	lt
 8009014:	4618      	movlt	r0, r3
 8009016:	e739      	b.n	8008e8c <_printf_float+0x9c>
 8009018:	2301      	movs	r3, #1
 800901a:	4652      	mov	r2, sl
 800901c:	4631      	mov	r1, r6
 800901e:	4628      	mov	r0, r5
 8009020:	47b8      	blx	r7
 8009022:	3001      	adds	r0, #1
 8009024:	f43f af30 	beq.w	8008e88 <_printf_float+0x98>
 8009028:	f109 0901 	add.w	r9, r9, #1
 800902c:	e7e8      	b.n	8009000 <_printf_float+0x210>
 800902e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc3b      	bgt.n	80090ac <_printf_float+0x2bc>
 8009034:	4a1c      	ldr	r2, [pc, #112]	@ (80090a8 <_printf_float+0x2b8>)
 8009036:	2301      	movs	r3, #1
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	f43f af22 	beq.w	8008e88 <_printf_float+0x98>
 8009044:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009048:	ea59 0303 	orrs.w	r3, r9, r3
 800904c:	d102      	bne.n	8009054 <_printf_float+0x264>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	07d9      	lsls	r1, r3, #31
 8009052:	d5d7      	bpl.n	8009004 <_printf_float+0x214>
 8009054:	9b05      	ldr	r3, [sp, #20]
 8009056:	465a      	mov	r2, fp
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	f43f af12 	beq.w	8008e88 <_printf_float+0x98>
 8009064:	f04f 0a00 	mov.w	sl, #0
 8009068:	f104 0b1a 	add.w	fp, r4, #26
 800906c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800906e:	425b      	negs	r3, r3
 8009070:	4553      	cmp	r3, sl
 8009072:	dc01      	bgt.n	8009078 <_printf_float+0x288>
 8009074:	464b      	mov	r3, r9
 8009076:	e794      	b.n	8008fa2 <_printf_float+0x1b2>
 8009078:	2301      	movs	r3, #1
 800907a:	465a      	mov	r2, fp
 800907c:	4631      	mov	r1, r6
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	f43f af00 	beq.w	8008e88 <_printf_float+0x98>
 8009088:	f10a 0a01 	add.w	sl, sl, #1
 800908c:	e7ee      	b.n	800906c <_printf_float+0x27c>
 800908e:	bf00      	nop
 8009090:	ffffffff 	.word	0xffffffff
 8009094:	7fefffff 	.word	0x7fefffff
 8009098:	0800b698 	.word	0x0800b698
 800909c:	0800b694 	.word	0x0800b694
 80090a0:	0800b6a0 	.word	0x0800b6a0
 80090a4:	0800b69c 	.word	0x0800b69c
 80090a8:	0800b6a4 	.word	0x0800b6a4
 80090ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090b2:	4553      	cmp	r3, sl
 80090b4:	bfa8      	it	ge
 80090b6:	4653      	movge	r3, sl
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	4699      	mov	r9, r3
 80090bc:	dc37      	bgt.n	800912e <_printf_float+0x33e>
 80090be:	2300      	movs	r3, #0
 80090c0:	9307      	str	r3, [sp, #28]
 80090c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090c6:	f104 021a 	add.w	r2, r4, #26
 80090ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090cc:	9907      	ldr	r1, [sp, #28]
 80090ce:	9306      	str	r3, [sp, #24]
 80090d0:	eba3 0309 	sub.w	r3, r3, r9
 80090d4:	428b      	cmp	r3, r1
 80090d6:	dc31      	bgt.n	800913c <_printf_float+0x34c>
 80090d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090da:	459a      	cmp	sl, r3
 80090dc:	dc3b      	bgt.n	8009156 <_printf_float+0x366>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	07da      	lsls	r2, r3, #31
 80090e2:	d438      	bmi.n	8009156 <_printf_float+0x366>
 80090e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e6:	ebaa 0903 	sub.w	r9, sl, r3
 80090ea:	9b06      	ldr	r3, [sp, #24]
 80090ec:	ebaa 0303 	sub.w	r3, sl, r3
 80090f0:	4599      	cmp	r9, r3
 80090f2:	bfa8      	it	ge
 80090f4:	4699      	movge	r9, r3
 80090f6:	f1b9 0f00 	cmp.w	r9, #0
 80090fa:	dc34      	bgt.n	8009166 <_printf_float+0x376>
 80090fc:	f04f 0800 	mov.w	r8, #0
 8009100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009104:	f104 0b1a 	add.w	fp, r4, #26
 8009108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910a:	ebaa 0303 	sub.w	r3, sl, r3
 800910e:	eba3 0309 	sub.w	r3, r3, r9
 8009112:	4543      	cmp	r3, r8
 8009114:	f77f af76 	ble.w	8009004 <_printf_float+0x214>
 8009118:	2301      	movs	r3, #1
 800911a:	465a      	mov	r2, fp
 800911c:	4631      	mov	r1, r6
 800911e:	4628      	mov	r0, r5
 8009120:	47b8      	blx	r7
 8009122:	3001      	adds	r0, #1
 8009124:	f43f aeb0 	beq.w	8008e88 <_printf_float+0x98>
 8009128:	f108 0801 	add.w	r8, r8, #1
 800912c:	e7ec      	b.n	8009108 <_printf_float+0x318>
 800912e:	4642      	mov	r2, r8
 8009130:	4631      	mov	r1, r6
 8009132:	4628      	mov	r0, r5
 8009134:	47b8      	blx	r7
 8009136:	3001      	adds	r0, #1
 8009138:	d1c1      	bne.n	80090be <_printf_float+0x2ce>
 800913a:	e6a5      	b.n	8008e88 <_printf_float+0x98>
 800913c:	2301      	movs	r3, #1
 800913e:	4631      	mov	r1, r6
 8009140:	4628      	mov	r0, r5
 8009142:	9206      	str	r2, [sp, #24]
 8009144:	47b8      	blx	r7
 8009146:	3001      	adds	r0, #1
 8009148:	f43f ae9e 	beq.w	8008e88 <_printf_float+0x98>
 800914c:	9b07      	ldr	r3, [sp, #28]
 800914e:	9a06      	ldr	r2, [sp, #24]
 8009150:	3301      	adds	r3, #1
 8009152:	9307      	str	r3, [sp, #28]
 8009154:	e7b9      	b.n	80090ca <_printf_float+0x2da>
 8009156:	9b05      	ldr	r3, [sp, #20]
 8009158:	465a      	mov	r2, fp
 800915a:	4631      	mov	r1, r6
 800915c:	4628      	mov	r0, r5
 800915e:	47b8      	blx	r7
 8009160:	3001      	adds	r0, #1
 8009162:	d1bf      	bne.n	80090e4 <_printf_float+0x2f4>
 8009164:	e690      	b.n	8008e88 <_printf_float+0x98>
 8009166:	9a06      	ldr	r2, [sp, #24]
 8009168:	464b      	mov	r3, r9
 800916a:	4442      	add	r2, r8
 800916c:	4631      	mov	r1, r6
 800916e:	4628      	mov	r0, r5
 8009170:	47b8      	blx	r7
 8009172:	3001      	adds	r0, #1
 8009174:	d1c2      	bne.n	80090fc <_printf_float+0x30c>
 8009176:	e687      	b.n	8008e88 <_printf_float+0x98>
 8009178:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800917c:	f1b9 0f01 	cmp.w	r9, #1
 8009180:	dc01      	bgt.n	8009186 <_printf_float+0x396>
 8009182:	07db      	lsls	r3, r3, #31
 8009184:	d536      	bpl.n	80091f4 <_printf_float+0x404>
 8009186:	2301      	movs	r3, #1
 8009188:	4642      	mov	r2, r8
 800918a:	4631      	mov	r1, r6
 800918c:	4628      	mov	r0, r5
 800918e:	47b8      	blx	r7
 8009190:	3001      	adds	r0, #1
 8009192:	f43f ae79 	beq.w	8008e88 <_printf_float+0x98>
 8009196:	9b05      	ldr	r3, [sp, #20]
 8009198:	465a      	mov	r2, fp
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	f43f ae71 	beq.w	8008e88 <_printf_float+0x98>
 80091a6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80091aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80091b6:	d018      	beq.n	80091ea <_printf_float+0x3fa>
 80091b8:	464b      	mov	r3, r9
 80091ba:	f108 0201 	add.w	r2, r8, #1
 80091be:	4631      	mov	r1, r6
 80091c0:	4628      	mov	r0, r5
 80091c2:	47b8      	blx	r7
 80091c4:	3001      	adds	r0, #1
 80091c6:	d10c      	bne.n	80091e2 <_printf_float+0x3f2>
 80091c8:	e65e      	b.n	8008e88 <_printf_float+0x98>
 80091ca:	2301      	movs	r3, #1
 80091cc:	465a      	mov	r2, fp
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b8      	blx	r7
 80091d4:	3001      	adds	r0, #1
 80091d6:	f43f ae57 	beq.w	8008e88 <_printf_float+0x98>
 80091da:	f108 0801 	add.w	r8, r8, #1
 80091de:	45c8      	cmp	r8, r9
 80091e0:	dbf3      	blt.n	80091ca <_printf_float+0x3da>
 80091e2:	4653      	mov	r3, sl
 80091e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80091e8:	e6dc      	b.n	8008fa4 <_printf_float+0x1b4>
 80091ea:	f04f 0800 	mov.w	r8, #0
 80091ee:	f104 0b1a 	add.w	fp, r4, #26
 80091f2:	e7f4      	b.n	80091de <_printf_float+0x3ee>
 80091f4:	2301      	movs	r3, #1
 80091f6:	4642      	mov	r2, r8
 80091f8:	e7e1      	b.n	80091be <_printf_float+0x3ce>
 80091fa:	2301      	movs	r3, #1
 80091fc:	464a      	mov	r2, r9
 80091fe:	4631      	mov	r1, r6
 8009200:	4628      	mov	r0, r5
 8009202:	47b8      	blx	r7
 8009204:	3001      	adds	r0, #1
 8009206:	f43f ae3f 	beq.w	8008e88 <_printf_float+0x98>
 800920a:	f108 0801 	add.w	r8, r8, #1
 800920e:	68e3      	ldr	r3, [r4, #12]
 8009210:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009212:	1a5b      	subs	r3, r3, r1
 8009214:	4543      	cmp	r3, r8
 8009216:	dcf0      	bgt.n	80091fa <_printf_float+0x40a>
 8009218:	e6f8      	b.n	800900c <_printf_float+0x21c>
 800921a:	f04f 0800 	mov.w	r8, #0
 800921e:	f104 0919 	add.w	r9, r4, #25
 8009222:	e7f4      	b.n	800920e <_printf_float+0x41e>

08009224 <_printf_common>:
 8009224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009228:	4616      	mov	r6, r2
 800922a:	4698      	mov	r8, r3
 800922c:	688a      	ldr	r2, [r1, #8]
 800922e:	690b      	ldr	r3, [r1, #16]
 8009230:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009234:	4293      	cmp	r3, r2
 8009236:	bfb8      	it	lt
 8009238:	4613      	movlt	r3, r2
 800923a:	6033      	str	r3, [r6, #0]
 800923c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009240:	4607      	mov	r7, r0
 8009242:	460c      	mov	r4, r1
 8009244:	b10a      	cbz	r2, 800924a <_printf_common+0x26>
 8009246:	3301      	adds	r3, #1
 8009248:	6033      	str	r3, [r6, #0]
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	0699      	lsls	r1, r3, #26
 800924e:	bf42      	ittt	mi
 8009250:	6833      	ldrmi	r3, [r6, #0]
 8009252:	3302      	addmi	r3, #2
 8009254:	6033      	strmi	r3, [r6, #0]
 8009256:	6825      	ldr	r5, [r4, #0]
 8009258:	f015 0506 	ands.w	r5, r5, #6
 800925c:	d106      	bne.n	800926c <_printf_common+0x48>
 800925e:	f104 0a19 	add.w	sl, r4, #25
 8009262:	68e3      	ldr	r3, [r4, #12]
 8009264:	6832      	ldr	r2, [r6, #0]
 8009266:	1a9b      	subs	r3, r3, r2
 8009268:	42ab      	cmp	r3, r5
 800926a:	dc26      	bgt.n	80092ba <_printf_common+0x96>
 800926c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	3b00      	subs	r3, #0
 8009274:	bf18      	it	ne
 8009276:	2301      	movne	r3, #1
 8009278:	0692      	lsls	r2, r2, #26
 800927a:	d42b      	bmi.n	80092d4 <_printf_common+0xb0>
 800927c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009280:	4641      	mov	r1, r8
 8009282:	4638      	mov	r0, r7
 8009284:	47c8      	blx	r9
 8009286:	3001      	adds	r0, #1
 8009288:	d01e      	beq.n	80092c8 <_printf_common+0xa4>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	6922      	ldr	r2, [r4, #16]
 800928e:	f003 0306 	and.w	r3, r3, #6
 8009292:	2b04      	cmp	r3, #4
 8009294:	bf02      	ittt	eq
 8009296:	68e5      	ldreq	r5, [r4, #12]
 8009298:	6833      	ldreq	r3, [r6, #0]
 800929a:	1aed      	subeq	r5, r5, r3
 800929c:	68a3      	ldr	r3, [r4, #8]
 800929e:	bf0c      	ite	eq
 80092a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092a4:	2500      	movne	r5, #0
 80092a6:	4293      	cmp	r3, r2
 80092a8:	bfc4      	itt	gt
 80092aa:	1a9b      	subgt	r3, r3, r2
 80092ac:	18ed      	addgt	r5, r5, r3
 80092ae:	2600      	movs	r6, #0
 80092b0:	341a      	adds	r4, #26
 80092b2:	42b5      	cmp	r5, r6
 80092b4:	d11a      	bne.n	80092ec <_printf_common+0xc8>
 80092b6:	2000      	movs	r0, #0
 80092b8:	e008      	b.n	80092cc <_printf_common+0xa8>
 80092ba:	2301      	movs	r3, #1
 80092bc:	4652      	mov	r2, sl
 80092be:	4641      	mov	r1, r8
 80092c0:	4638      	mov	r0, r7
 80092c2:	47c8      	blx	r9
 80092c4:	3001      	adds	r0, #1
 80092c6:	d103      	bne.n	80092d0 <_printf_common+0xac>
 80092c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d0:	3501      	adds	r5, #1
 80092d2:	e7c6      	b.n	8009262 <_printf_common+0x3e>
 80092d4:	18e1      	adds	r1, r4, r3
 80092d6:	1c5a      	adds	r2, r3, #1
 80092d8:	2030      	movs	r0, #48	@ 0x30
 80092da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092de:	4422      	add	r2, r4
 80092e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092e8:	3302      	adds	r3, #2
 80092ea:	e7c7      	b.n	800927c <_printf_common+0x58>
 80092ec:	2301      	movs	r3, #1
 80092ee:	4622      	mov	r2, r4
 80092f0:	4641      	mov	r1, r8
 80092f2:	4638      	mov	r0, r7
 80092f4:	47c8      	blx	r9
 80092f6:	3001      	adds	r0, #1
 80092f8:	d0e6      	beq.n	80092c8 <_printf_common+0xa4>
 80092fa:	3601      	adds	r6, #1
 80092fc:	e7d9      	b.n	80092b2 <_printf_common+0x8e>
	...

08009300 <_printf_i>:
 8009300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009304:	7e0f      	ldrb	r7, [r1, #24]
 8009306:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009308:	2f78      	cmp	r7, #120	@ 0x78
 800930a:	4691      	mov	r9, r2
 800930c:	4680      	mov	r8, r0
 800930e:	460c      	mov	r4, r1
 8009310:	469a      	mov	sl, r3
 8009312:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009316:	d807      	bhi.n	8009328 <_printf_i+0x28>
 8009318:	2f62      	cmp	r7, #98	@ 0x62
 800931a:	d80a      	bhi.n	8009332 <_printf_i+0x32>
 800931c:	2f00      	cmp	r7, #0
 800931e:	f000 80d1 	beq.w	80094c4 <_printf_i+0x1c4>
 8009322:	2f58      	cmp	r7, #88	@ 0x58
 8009324:	f000 80b8 	beq.w	8009498 <_printf_i+0x198>
 8009328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800932c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009330:	e03a      	b.n	80093a8 <_printf_i+0xa8>
 8009332:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009336:	2b15      	cmp	r3, #21
 8009338:	d8f6      	bhi.n	8009328 <_printf_i+0x28>
 800933a:	a101      	add	r1, pc, #4	@ (adr r1, 8009340 <_printf_i+0x40>)
 800933c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009340:	08009399 	.word	0x08009399
 8009344:	080093ad 	.word	0x080093ad
 8009348:	08009329 	.word	0x08009329
 800934c:	08009329 	.word	0x08009329
 8009350:	08009329 	.word	0x08009329
 8009354:	08009329 	.word	0x08009329
 8009358:	080093ad 	.word	0x080093ad
 800935c:	08009329 	.word	0x08009329
 8009360:	08009329 	.word	0x08009329
 8009364:	08009329 	.word	0x08009329
 8009368:	08009329 	.word	0x08009329
 800936c:	080094ab 	.word	0x080094ab
 8009370:	080093d7 	.word	0x080093d7
 8009374:	08009465 	.word	0x08009465
 8009378:	08009329 	.word	0x08009329
 800937c:	08009329 	.word	0x08009329
 8009380:	080094cd 	.word	0x080094cd
 8009384:	08009329 	.word	0x08009329
 8009388:	080093d7 	.word	0x080093d7
 800938c:	08009329 	.word	0x08009329
 8009390:	08009329 	.word	0x08009329
 8009394:	0800946d 	.word	0x0800946d
 8009398:	6833      	ldr	r3, [r6, #0]
 800939a:	1d1a      	adds	r2, r3, #4
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6032      	str	r2, [r6, #0]
 80093a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093a8:	2301      	movs	r3, #1
 80093aa:	e09c      	b.n	80094e6 <_printf_i+0x1e6>
 80093ac:	6833      	ldr	r3, [r6, #0]
 80093ae:	6820      	ldr	r0, [r4, #0]
 80093b0:	1d19      	adds	r1, r3, #4
 80093b2:	6031      	str	r1, [r6, #0]
 80093b4:	0606      	lsls	r6, r0, #24
 80093b6:	d501      	bpl.n	80093bc <_printf_i+0xbc>
 80093b8:	681d      	ldr	r5, [r3, #0]
 80093ba:	e003      	b.n	80093c4 <_printf_i+0xc4>
 80093bc:	0645      	lsls	r5, r0, #25
 80093be:	d5fb      	bpl.n	80093b8 <_printf_i+0xb8>
 80093c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093c4:	2d00      	cmp	r5, #0
 80093c6:	da03      	bge.n	80093d0 <_printf_i+0xd0>
 80093c8:	232d      	movs	r3, #45	@ 0x2d
 80093ca:	426d      	negs	r5, r5
 80093cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093d0:	4858      	ldr	r0, [pc, #352]	@ (8009534 <_printf_i+0x234>)
 80093d2:	230a      	movs	r3, #10
 80093d4:	e011      	b.n	80093fa <_printf_i+0xfa>
 80093d6:	6821      	ldr	r1, [r4, #0]
 80093d8:	6833      	ldr	r3, [r6, #0]
 80093da:	0608      	lsls	r0, r1, #24
 80093dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80093e0:	d402      	bmi.n	80093e8 <_printf_i+0xe8>
 80093e2:	0649      	lsls	r1, r1, #25
 80093e4:	bf48      	it	mi
 80093e6:	b2ad      	uxthmi	r5, r5
 80093e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80093ea:	4852      	ldr	r0, [pc, #328]	@ (8009534 <_printf_i+0x234>)
 80093ec:	6033      	str	r3, [r6, #0]
 80093ee:	bf14      	ite	ne
 80093f0:	230a      	movne	r3, #10
 80093f2:	2308      	moveq	r3, #8
 80093f4:	2100      	movs	r1, #0
 80093f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093fa:	6866      	ldr	r6, [r4, #4]
 80093fc:	60a6      	str	r6, [r4, #8]
 80093fe:	2e00      	cmp	r6, #0
 8009400:	db05      	blt.n	800940e <_printf_i+0x10e>
 8009402:	6821      	ldr	r1, [r4, #0]
 8009404:	432e      	orrs	r6, r5
 8009406:	f021 0104 	bic.w	r1, r1, #4
 800940a:	6021      	str	r1, [r4, #0]
 800940c:	d04b      	beq.n	80094a6 <_printf_i+0x1a6>
 800940e:	4616      	mov	r6, r2
 8009410:	fbb5 f1f3 	udiv	r1, r5, r3
 8009414:	fb03 5711 	mls	r7, r3, r1, r5
 8009418:	5dc7      	ldrb	r7, [r0, r7]
 800941a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800941e:	462f      	mov	r7, r5
 8009420:	42bb      	cmp	r3, r7
 8009422:	460d      	mov	r5, r1
 8009424:	d9f4      	bls.n	8009410 <_printf_i+0x110>
 8009426:	2b08      	cmp	r3, #8
 8009428:	d10b      	bne.n	8009442 <_printf_i+0x142>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	07df      	lsls	r7, r3, #31
 800942e:	d508      	bpl.n	8009442 <_printf_i+0x142>
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	6861      	ldr	r1, [r4, #4]
 8009434:	4299      	cmp	r1, r3
 8009436:	bfde      	ittt	le
 8009438:	2330      	movle	r3, #48	@ 0x30
 800943a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800943e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009442:	1b92      	subs	r2, r2, r6
 8009444:	6122      	str	r2, [r4, #16]
 8009446:	f8cd a000 	str.w	sl, [sp]
 800944a:	464b      	mov	r3, r9
 800944c:	aa03      	add	r2, sp, #12
 800944e:	4621      	mov	r1, r4
 8009450:	4640      	mov	r0, r8
 8009452:	f7ff fee7 	bl	8009224 <_printf_common>
 8009456:	3001      	adds	r0, #1
 8009458:	d14a      	bne.n	80094f0 <_printf_i+0x1f0>
 800945a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800945e:	b004      	add	sp, #16
 8009460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	f043 0320 	orr.w	r3, r3, #32
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	4832      	ldr	r0, [pc, #200]	@ (8009538 <_printf_i+0x238>)
 800946e:	2778      	movs	r7, #120	@ 0x78
 8009470:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	6831      	ldr	r1, [r6, #0]
 8009478:	061f      	lsls	r7, r3, #24
 800947a:	f851 5b04 	ldr.w	r5, [r1], #4
 800947e:	d402      	bmi.n	8009486 <_printf_i+0x186>
 8009480:	065f      	lsls	r7, r3, #25
 8009482:	bf48      	it	mi
 8009484:	b2ad      	uxthmi	r5, r5
 8009486:	6031      	str	r1, [r6, #0]
 8009488:	07d9      	lsls	r1, r3, #31
 800948a:	bf44      	itt	mi
 800948c:	f043 0320 	orrmi.w	r3, r3, #32
 8009490:	6023      	strmi	r3, [r4, #0]
 8009492:	b11d      	cbz	r5, 800949c <_printf_i+0x19c>
 8009494:	2310      	movs	r3, #16
 8009496:	e7ad      	b.n	80093f4 <_printf_i+0xf4>
 8009498:	4826      	ldr	r0, [pc, #152]	@ (8009534 <_printf_i+0x234>)
 800949a:	e7e9      	b.n	8009470 <_printf_i+0x170>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	f023 0320 	bic.w	r3, r3, #32
 80094a2:	6023      	str	r3, [r4, #0]
 80094a4:	e7f6      	b.n	8009494 <_printf_i+0x194>
 80094a6:	4616      	mov	r6, r2
 80094a8:	e7bd      	b.n	8009426 <_printf_i+0x126>
 80094aa:	6833      	ldr	r3, [r6, #0]
 80094ac:	6825      	ldr	r5, [r4, #0]
 80094ae:	6961      	ldr	r1, [r4, #20]
 80094b0:	1d18      	adds	r0, r3, #4
 80094b2:	6030      	str	r0, [r6, #0]
 80094b4:	062e      	lsls	r6, r5, #24
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	d501      	bpl.n	80094be <_printf_i+0x1be>
 80094ba:	6019      	str	r1, [r3, #0]
 80094bc:	e002      	b.n	80094c4 <_printf_i+0x1c4>
 80094be:	0668      	lsls	r0, r5, #25
 80094c0:	d5fb      	bpl.n	80094ba <_printf_i+0x1ba>
 80094c2:	8019      	strh	r1, [r3, #0]
 80094c4:	2300      	movs	r3, #0
 80094c6:	6123      	str	r3, [r4, #16]
 80094c8:	4616      	mov	r6, r2
 80094ca:	e7bc      	b.n	8009446 <_printf_i+0x146>
 80094cc:	6833      	ldr	r3, [r6, #0]
 80094ce:	1d1a      	adds	r2, r3, #4
 80094d0:	6032      	str	r2, [r6, #0]
 80094d2:	681e      	ldr	r6, [r3, #0]
 80094d4:	6862      	ldr	r2, [r4, #4]
 80094d6:	2100      	movs	r1, #0
 80094d8:	4630      	mov	r0, r6
 80094da:	f7f6 ff19 	bl	8000310 <memchr>
 80094de:	b108      	cbz	r0, 80094e4 <_printf_i+0x1e4>
 80094e0:	1b80      	subs	r0, r0, r6
 80094e2:	6060      	str	r0, [r4, #4]
 80094e4:	6863      	ldr	r3, [r4, #4]
 80094e6:	6123      	str	r3, [r4, #16]
 80094e8:	2300      	movs	r3, #0
 80094ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094ee:	e7aa      	b.n	8009446 <_printf_i+0x146>
 80094f0:	6923      	ldr	r3, [r4, #16]
 80094f2:	4632      	mov	r2, r6
 80094f4:	4649      	mov	r1, r9
 80094f6:	4640      	mov	r0, r8
 80094f8:	47d0      	blx	sl
 80094fa:	3001      	adds	r0, #1
 80094fc:	d0ad      	beq.n	800945a <_printf_i+0x15a>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	079b      	lsls	r3, r3, #30
 8009502:	d413      	bmi.n	800952c <_printf_i+0x22c>
 8009504:	68e0      	ldr	r0, [r4, #12]
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	4298      	cmp	r0, r3
 800950a:	bfb8      	it	lt
 800950c:	4618      	movlt	r0, r3
 800950e:	e7a6      	b.n	800945e <_printf_i+0x15e>
 8009510:	2301      	movs	r3, #1
 8009512:	4632      	mov	r2, r6
 8009514:	4649      	mov	r1, r9
 8009516:	4640      	mov	r0, r8
 8009518:	47d0      	blx	sl
 800951a:	3001      	adds	r0, #1
 800951c:	d09d      	beq.n	800945a <_printf_i+0x15a>
 800951e:	3501      	adds	r5, #1
 8009520:	68e3      	ldr	r3, [r4, #12]
 8009522:	9903      	ldr	r1, [sp, #12]
 8009524:	1a5b      	subs	r3, r3, r1
 8009526:	42ab      	cmp	r3, r5
 8009528:	dcf2      	bgt.n	8009510 <_printf_i+0x210>
 800952a:	e7eb      	b.n	8009504 <_printf_i+0x204>
 800952c:	2500      	movs	r5, #0
 800952e:	f104 0619 	add.w	r6, r4, #25
 8009532:	e7f5      	b.n	8009520 <_printf_i+0x220>
 8009534:	0800b6a6 	.word	0x0800b6a6
 8009538:	0800b6b7 	.word	0x0800b6b7

0800953c <std>:
 800953c:	2300      	movs	r3, #0
 800953e:	b510      	push	{r4, lr}
 8009540:	4604      	mov	r4, r0
 8009542:	e9c0 3300 	strd	r3, r3, [r0]
 8009546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800954a:	6083      	str	r3, [r0, #8]
 800954c:	8181      	strh	r1, [r0, #12]
 800954e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009550:	81c2      	strh	r2, [r0, #14]
 8009552:	6183      	str	r3, [r0, #24]
 8009554:	4619      	mov	r1, r3
 8009556:	2208      	movs	r2, #8
 8009558:	305c      	adds	r0, #92	@ 0x5c
 800955a:	f000 f921 	bl	80097a0 <memset>
 800955e:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <std+0x58>)
 8009560:	6263      	str	r3, [r4, #36]	@ 0x24
 8009562:	4b0d      	ldr	r3, [pc, #52]	@ (8009598 <std+0x5c>)
 8009564:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009566:	4b0d      	ldr	r3, [pc, #52]	@ (800959c <std+0x60>)
 8009568:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800956a:	4b0d      	ldr	r3, [pc, #52]	@ (80095a0 <std+0x64>)
 800956c:	6323      	str	r3, [r4, #48]	@ 0x30
 800956e:	4b0d      	ldr	r3, [pc, #52]	@ (80095a4 <std+0x68>)
 8009570:	6224      	str	r4, [r4, #32]
 8009572:	429c      	cmp	r4, r3
 8009574:	d006      	beq.n	8009584 <std+0x48>
 8009576:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800957a:	4294      	cmp	r4, r2
 800957c:	d002      	beq.n	8009584 <std+0x48>
 800957e:	33d0      	adds	r3, #208	@ 0xd0
 8009580:	429c      	cmp	r4, r3
 8009582:	d105      	bne.n	8009590 <std+0x54>
 8009584:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800958c:	f000 b93a 	b.w	8009804 <__retarget_lock_init_recursive>
 8009590:	bd10      	pop	{r4, pc}
 8009592:	bf00      	nop
 8009594:	0800b039 	.word	0x0800b039
 8009598:	0800b05b 	.word	0x0800b05b
 800959c:	0800b093 	.word	0x0800b093
 80095a0:	0800b0b7 	.word	0x0800b0b7
 80095a4:	240003dc 	.word	0x240003dc

080095a8 <stdio_exit_handler>:
 80095a8:	4a02      	ldr	r2, [pc, #8]	@ (80095b4 <stdio_exit_handler+0xc>)
 80095aa:	4903      	ldr	r1, [pc, #12]	@ (80095b8 <stdio_exit_handler+0x10>)
 80095ac:	4803      	ldr	r0, [pc, #12]	@ (80095bc <stdio_exit_handler+0x14>)
 80095ae:	f000 b869 	b.w	8009684 <_fwalk_sglue>
 80095b2:	bf00      	nop
 80095b4:	24000020 	.word	0x24000020
 80095b8:	0800a8dd 	.word	0x0800a8dd
 80095bc:	24000030 	.word	0x24000030

080095c0 <cleanup_stdio>:
 80095c0:	6841      	ldr	r1, [r0, #4]
 80095c2:	4b0c      	ldr	r3, [pc, #48]	@ (80095f4 <cleanup_stdio+0x34>)
 80095c4:	4299      	cmp	r1, r3
 80095c6:	b510      	push	{r4, lr}
 80095c8:	4604      	mov	r4, r0
 80095ca:	d001      	beq.n	80095d0 <cleanup_stdio+0x10>
 80095cc:	f001 f986 	bl	800a8dc <_fflush_r>
 80095d0:	68a1      	ldr	r1, [r4, #8]
 80095d2:	4b09      	ldr	r3, [pc, #36]	@ (80095f8 <cleanup_stdio+0x38>)
 80095d4:	4299      	cmp	r1, r3
 80095d6:	d002      	beq.n	80095de <cleanup_stdio+0x1e>
 80095d8:	4620      	mov	r0, r4
 80095da:	f001 f97f 	bl	800a8dc <_fflush_r>
 80095de:	68e1      	ldr	r1, [r4, #12]
 80095e0:	4b06      	ldr	r3, [pc, #24]	@ (80095fc <cleanup_stdio+0x3c>)
 80095e2:	4299      	cmp	r1, r3
 80095e4:	d004      	beq.n	80095f0 <cleanup_stdio+0x30>
 80095e6:	4620      	mov	r0, r4
 80095e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ec:	f001 b976 	b.w	800a8dc <_fflush_r>
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	bf00      	nop
 80095f4:	240003dc 	.word	0x240003dc
 80095f8:	24000444 	.word	0x24000444
 80095fc:	240004ac 	.word	0x240004ac

08009600 <global_stdio_init.part.0>:
 8009600:	b510      	push	{r4, lr}
 8009602:	4b0b      	ldr	r3, [pc, #44]	@ (8009630 <global_stdio_init.part.0+0x30>)
 8009604:	4c0b      	ldr	r4, [pc, #44]	@ (8009634 <global_stdio_init.part.0+0x34>)
 8009606:	4a0c      	ldr	r2, [pc, #48]	@ (8009638 <global_stdio_init.part.0+0x38>)
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	4620      	mov	r0, r4
 800960c:	2200      	movs	r2, #0
 800960e:	2104      	movs	r1, #4
 8009610:	f7ff ff94 	bl	800953c <std>
 8009614:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009618:	2201      	movs	r2, #1
 800961a:	2109      	movs	r1, #9
 800961c:	f7ff ff8e 	bl	800953c <std>
 8009620:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009624:	2202      	movs	r2, #2
 8009626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800962a:	2112      	movs	r1, #18
 800962c:	f7ff bf86 	b.w	800953c <std>
 8009630:	24000514 	.word	0x24000514
 8009634:	240003dc 	.word	0x240003dc
 8009638:	080095a9 	.word	0x080095a9

0800963c <__sfp_lock_acquire>:
 800963c:	4801      	ldr	r0, [pc, #4]	@ (8009644 <__sfp_lock_acquire+0x8>)
 800963e:	f000 b8e2 	b.w	8009806 <__retarget_lock_acquire_recursive>
 8009642:	bf00      	nop
 8009644:	24000519 	.word	0x24000519

08009648 <__sfp_lock_release>:
 8009648:	4801      	ldr	r0, [pc, #4]	@ (8009650 <__sfp_lock_release+0x8>)
 800964a:	f000 b8dd 	b.w	8009808 <__retarget_lock_release_recursive>
 800964e:	bf00      	nop
 8009650:	24000519 	.word	0x24000519

08009654 <__sinit>:
 8009654:	b510      	push	{r4, lr}
 8009656:	4604      	mov	r4, r0
 8009658:	f7ff fff0 	bl	800963c <__sfp_lock_acquire>
 800965c:	6a23      	ldr	r3, [r4, #32]
 800965e:	b11b      	cbz	r3, 8009668 <__sinit+0x14>
 8009660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009664:	f7ff bff0 	b.w	8009648 <__sfp_lock_release>
 8009668:	4b04      	ldr	r3, [pc, #16]	@ (800967c <__sinit+0x28>)
 800966a:	6223      	str	r3, [r4, #32]
 800966c:	4b04      	ldr	r3, [pc, #16]	@ (8009680 <__sinit+0x2c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1f5      	bne.n	8009660 <__sinit+0xc>
 8009674:	f7ff ffc4 	bl	8009600 <global_stdio_init.part.0>
 8009678:	e7f2      	b.n	8009660 <__sinit+0xc>
 800967a:	bf00      	nop
 800967c:	080095c1 	.word	0x080095c1
 8009680:	24000514 	.word	0x24000514

08009684 <_fwalk_sglue>:
 8009684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009688:	4607      	mov	r7, r0
 800968a:	4688      	mov	r8, r1
 800968c:	4614      	mov	r4, r2
 800968e:	2600      	movs	r6, #0
 8009690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009694:	f1b9 0901 	subs.w	r9, r9, #1
 8009698:	d505      	bpl.n	80096a6 <_fwalk_sglue+0x22>
 800969a:	6824      	ldr	r4, [r4, #0]
 800969c:	2c00      	cmp	r4, #0
 800969e:	d1f7      	bne.n	8009690 <_fwalk_sglue+0xc>
 80096a0:	4630      	mov	r0, r6
 80096a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096a6:	89ab      	ldrh	r3, [r5, #12]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d907      	bls.n	80096bc <_fwalk_sglue+0x38>
 80096ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096b0:	3301      	adds	r3, #1
 80096b2:	d003      	beq.n	80096bc <_fwalk_sglue+0x38>
 80096b4:	4629      	mov	r1, r5
 80096b6:	4638      	mov	r0, r7
 80096b8:	47c0      	blx	r8
 80096ba:	4306      	orrs	r6, r0
 80096bc:	3568      	adds	r5, #104	@ 0x68
 80096be:	e7e9      	b.n	8009694 <_fwalk_sglue+0x10>

080096c0 <iprintf>:
 80096c0:	b40f      	push	{r0, r1, r2, r3}
 80096c2:	b507      	push	{r0, r1, r2, lr}
 80096c4:	4906      	ldr	r1, [pc, #24]	@ (80096e0 <iprintf+0x20>)
 80096c6:	ab04      	add	r3, sp, #16
 80096c8:	6808      	ldr	r0, [r1, #0]
 80096ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ce:	6881      	ldr	r1, [r0, #8]
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	f000 febd 	bl	800a450 <_vfiprintf_r>
 80096d6:	b003      	add	sp, #12
 80096d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096dc:	b004      	add	sp, #16
 80096de:	4770      	bx	lr
 80096e0:	2400002c 	.word	0x2400002c

080096e4 <_puts_r>:
 80096e4:	6a03      	ldr	r3, [r0, #32]
 80096e6:	b570      	push	{r4, r5, r6, lr}
 80096e8:	6884      	ldr	r4, [r0, #8]
 80096ea:	4605      	mov	r5, r0
 80096ec:	460e      	mov	r6, r1
 80096ee:	b90b      	cbnz	r3, 80096f4 <_puts_r+0x10>
 80096f0:	f7ff ffb0 	bl	8009654 <__sinit>
 80096f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096f6:	07db      	lsls	r3, r3, #31
 80096f8:	d405      	bmi.n	8009706 <_puts_r+0x22>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	0598      	lsls	r0, r3, #22
 80096fe:	d402      	bmi.n	8009706 <_puts_r+0x22>
 8009700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009702:	f000 f880 	bl	8009806 <__retarget_lock_acquire_recursive>
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	0719      	lsls	r1, r3, #28
 800970a:	d502      	bpl.n	8009712 <_puts_r+0x2e>
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d135      	bne.n	800977e <_puts_r+0x9a>
 8009712:	4621      	mov	r1, r4
 8009714:	4628      	mov	r0, r5
 8009716:	f001 fd11 	bl	800b13c <__swsetup_r>
 800971a:	b380      	cbz	r0, 800977e <_puts_r+0x9a>
 800971c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009722:	07da      	lsls	r2, r3, #31
 8009724:	d405      	bmi.n	8009732 <_puts_r+0x4e>
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	059b      	lsls	r3, r3, #22
 800972a:	d402      	bmi.n	8009732 <_puts_r+0x4e>
 800972c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800972e:	f000 f86b 	bl	8009808 <__retarget_lock_release_recursive>
 8009732:	4628      	mov	r0, r5
 8009734:	bd70      	pop	{r4, r5, r6, pc}
 8009736:	2b00      	cmp	r3, #0
 8009738:	da04      	bge.n	8009744 <_puts_r+0x60>
 800973a:	69a2      	ldr	r2, [r4, #24]
 800973c:	429a      	cmp	r2, r3
 800973e:	dc17      	bgt.n	8009770 <_puts_r+0x8c>
 8009740:	290a      	cmp	r1, #10
 8009742:	d015      	beq.n	8009770 <_puts_r+0x8c>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	6022      	str	r2, [r4, #0]
 800974a:	7019      	strb	r1, [r3, #0]
 800974c:	68a3      	ldr	r3, [r4, #8]
 800974e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009752:	3b01      	subs	r3, #1
 8009754:	60a3      	str	r3, [r4, #8]
 8009756:	2900      	cmp	r1, #0
 8009758:	d1ed      	bne.n	8009736 <_puts_r+0x52>
 800975a:	2b00      	cmp	r3, #0
 800975c:	da11      	bge.n	8009782 <_puts_r+0x9e>
 800975e:	4622      	mov	r2, r4
 8009760:	210a      	movs	r1, #10
 8009762:	4628      	mov	r0, r5
 8009764:	f001 fcab 	bl	800b0be <__swbuf_r>
 8009768:	3001      	adds	r0, #1
 800976a:	d0d7      	beq.n	800971c <_puts_r+0x38>
 800976c:	250a      	movs	r5, #10
 800976e:	e7d7      	b.n	8009720 <_puts_r+0x3c>
 8009770:	4622      	mov	r2, r4
 8009772:	4628      	mov	r0, r5
 8009774:	f001 fca3 	bl	800b0be <__swbuf_r>
 8009778:	3001      	adds	r0, #1
 800977a:	d1e7      	bne.n	800974c <_puts_r+0x68>
 800977c:	e7ce      	b.n	800971c <_puts_r+0x38>
 800977e:	3e01      	subs	r6, #1
 8009780:	e7e4      	b.n	800974c <_puts_r+0x68>
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	6022      	str	r2, [r4, #0]
 8009788:	220a      	movs	r2, #10
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	e7ee      	b.n	800976c <_puts_r+0x88>
	...

08009790 <puts>:
 8009790:	4b02      	ldr	r3, [pc, #8]	@ (800979c <puts+0xc>)
 8009792:	4601      	mov	r1, r0
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f7ff bfa5 	b.w	80096e4 <_puts_r>
 800979a:	bf00      	nop
 800979c:	2400002c 	.word	0x2400002c

080097a0 <memset>:
 80097a0:	4402      	add	r2, r0
 80097a2:	4603      	mov	r3, r0
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d100      	bne.n	80097aa <memset+0xa>
 80097a8:	4770      	bx	lr
 80097aa:	f803 1b01 	strb.w	r1, [r3], #1
 80097ae:	e7f9      	b.n	80097a4 <memset+0x4>

080097b0 <__errno>:
 80097b0:	4b01      	ldr	r3, [pc, #4]	@ (80097b8 <__errno+0x8>)
 80097b2:	6818      	ldr	r0, [r3, #0]
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	2400002c 	.word	0x2400002c

080097bc <__libc_init_array>:
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	4d0d      	ldr	r5, [pc, #52]	@ (80097f4 <__libc_init_array+0x38>)
 80097c0:	4c0d      	ldr	r4, [pc, #52]	@ (80097f8 <__libc_init_array+0x3c>)
 80097c2:	1b64      	subs	r4, r4, r5
 80097c4:	10a4      	asrs	r4, r4, #2
 80097c6:	2600      	movs	r6, #0
 80097c8:	42a6      	cmp	r6, r4
 80097ca:	d109      	bne.n	80097e0 <__libc_init_array+0x24>
 80097cc:	4d0b      	ldr	r5, [pc, #44]	@ (80097fc <__libc_init_array+0x40>)
 80097ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009800 <__libc_init_array+0x44>)
 80097d0:	f001 fefe 	bl	800b5d0 <_init>
 80097d4:	1b64      	subs	r4, r4, r5
 80097d6:	10a4      	asrs	r4, r4, #2
 80097d8:	2600      	movs	r6, #0
 80097da:	42a6      	cmp	r6, r4
 80097dc:	d105      	bne.n	80097ea <__libc_init_array+0x2e>
 80097de:	bd70      	pop	{r4, r5, r6, pc}
 80097e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e4:	4798      	blx	r3
 80097e6:	3601      	adds	r6, #1
 80097e8:	e7ee      	b.n	80097c8 <__libc_init_array+0xc>
 80097ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ee:	4798      	blx	r3
 80097f0:	3601      	adds	r6, #1
 80097f2:	e7f2      	b.n	80097da <__libc_init_array+0x1e>
 80097f4:	0800ba14 	.word	0x0800ba14
 80097f8:	0800ba14 	.word	0x0800ba14
 80097fc:	0800ba14 	.word	0x0800ba14
 8009800:	0800ba18 	.word	0x0800ba18

08009804 <__retarget_lock_init_recursive>:
 8009804:	4770      	bx	lr

08009806 <__retarget_lock_acquire_recursive>:
 8009806:	4770      	bx	lr

08009808 <__retarget_lock_release_recursive>:
 8009808:	4770      	bx	lr
	...

0800980c <_localeconv_r>:
 800980c:	4800      	ldr	r0, [pc, #0]	@ (8009810 <_localeconv_r+0x4>)
 800980e:	4770      	bx	lr
 8009810:	2400016c 	.word	0x2400016c

08009814 <memcpy>:
 8009814:	440a      	add	r2, r1
 8009816:	4291      	cmp	r1, r2
 8009818:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800981c:	d100      	bne.n	8009820 <memcpy+0xc>
 800981e:	4770      	bx	lr
 8009820:	b510      	push	{r4, lr}
 8009822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982a:	4291      	cmp	r1, r2
 800982c:	d1f9      	bne.n	8009822 <memcpy+0xe>
 800982e:	bd10      	pop	{r4, pc}

08009830 <quorem>:
 8009830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	6903      	ldr	r3, [r0, #16]
 8009836:	690c      	ldr	r4, [r1, #16]
 8009838:	42a3      	cmp	r3, r4
 800983a:	4607      	mov	r7, r0
 800983c:	db7e      	blt.n	800993c <quorem+0x10c>
 800983e:	3c01      	subs	r4, #1
 8009840:	f101 0814 	add.w	r8, r1, #20
 8009844:	00a3      	lsls	r3, r4, #2
 8009846:	f100 0514 	add.w	r5, r0, #20
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009856:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800985a:	3301      	adds	r3, #1
 800985c:	429a      	cmp	r2, r3
 800985e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009862:	fbb2 f6f3 	udiv	r6, r2, r3
 8009866:	d32e      	bcc.n	80098c6 <quorem+0x96>
 8009868:	f04f 0a00 	mov.w	sl, #0
 800986c:	46c4      	mov	ip, r8
 800986e:	46ae      	mov	lr, r5
 8009870:	46d3      	mov	fp, sl
 8009872:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009876:	b298      	uxth	r0, r3
 8009878:	fb06 a000 	mla	r0, r6, r0, sl
 800987c:	0c02      	lsrs	r2, r0, #16
 800987e:	0c1b      	lsrs	r3, r3, #16
 8009880:	fb06 2303 	mla	r3, r6, r3, r2
 8009884:	f8de 2000 	ldr.w	r2, [lr]
 8009888:	b280      	uxth	r0, r0
 800988a:	b292      	uxth	r2, r2
 800988c:	1a12      	subs	r2, r2, r0
 800988e:	445a      	add	r2, fp
 8009890:	f8de 0000 	ldr.w	r0, [lr]
 8009894:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009898:	b29b      	uxth	r3, r3
 800989a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800989e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80098a2:	b292      	uxth	r2, r2
 80098a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80098a8:	45e1      	cmp	r9, ip
 80098aa:	f84e 2b04 	str.w	r2, [lr], #4
 80098ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80098b2:	d2de      	bcs.n	8009872 <quorem+0x42>
 80098b4:	9b00      	ldr	r3, [sp, #0]
 80098b6:	58eb      	ldr	r3, [r5, r3]
 80098b8:	b92b      	cbnz	r3, 80098c6 <quorem+0x96>
 80098ba:	9b01      	ldr	r3, [sp, #4]
 80098bc:	3b04      	subs	r3, #4
 80098be:	429d      	cmp	r5, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	d32f      	bcc.n	8009924 <quorem+0xf4>
 80098c4:	613c      	str	r4, [r7, #16]
 80098c6:	4638      	mov	r0, r7
 80098c8:	f001 faae 	bl	800ae28 <__mcmp>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	db25      	blt.n	800991c <quorem+0xec>
 80098d0:	4629      	mov	r1, r5
 80098d2:	2000      	movs	r0, #0
 80098d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80098d8:	f8d1 c000 	ldr.w	ip, [r1]
 80098dc:	fa1f fe82 	uxth.w	lr, r2
 80098e0:	fa1f f38c 	uxth.w	r3, ip
 80098e4:	eba3 030e 	sub.w	r3, r3, lr
 80098e8:	4403      	add	r3, r0
 80098ea:	0c12      	lsrs	r2, r2, #16
 80098ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80098f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098fa:	45c1      	cmp	r9, r8
 80098fc:	f841 3b04 	str.w	r3, [r1], #4
 8009900:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009904:	d2e6      	bcs.n	80098d4 <quorem+0xa4>
 8009906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800990a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800990e:	b922      	cbnz	r2, 800991a <quorem+0xea>
 8009910:	3b04      	subs	r3, #4
 8009912:	429d      	cmp	r5, r3
 8009914:	461a      	mov	r2, r3
 8009916:	d30b      	bcc.n	8009930 <quorem+0x100>
 8009918:	613c      	str	r4, [r7, #16]
 800991a:	3601      	adds	r6, #1
 800991c:	4630      	mov	r0, r6
 800991e:	b003      	add	sp, #12
 8009920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	3b04      	subs	r3, #4
 8009928:	2a00      	cmp	r2, #0
 800992a:	d1cb      	bne.n	80098c4 <quorem+0x94>
 800992c:	3c01      	subs	r4, #1
 800992e:	e7c6      	b.n	80098be <quorem+0x8e>
 8009930:	6812      	ldr	r2, [r2, #0]
 8009932:	3b04      	subs	r3, #4
 8009934:	2a00      	cmp	r2, #0
 8009936:	d1ef      	bne.n	8009918 <quorem+0xe8>
 8009938:	3c01      	subs	r4, #1
 800993a:	e7ea      	b.n	8009912 <quorem+0xe2>
 800993c:	2000      	movs	r0, #0
 800993e:	e7ee      	b.n	800991e <quorem+0xee>

08009940 <_dtoa_r>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	ed2d 8b02 	vpush	{d8}
 8009948:	69c7      	ldr	r7, [r0, #28]
 800994a:	b091      	sub	sp, #68	@ 0x44
 800994c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009950:	ec55 4b10 	vmov	r4, r5, d0
 8009954:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009956:	9107      	str	r1, [sp, #28]
 8009958:	4681      	mov	r9, r0
 800995a:	9209      	str	r2, [sp, #36]	@ 0x24
 800995c:	930d      	str	r3, [sp, #52]	@ 0x34
 800995e:	b97f      	cbnz	r7, 8009980 <_dtoa_r+0x40>
 8009960:	2010      	movs	r0, #16
 8009962:	f000 fe8d 	bl	800a680 <malloc>
 8009966:	4602      	mov	r2, r0
 8009968:	f8c9 001c 	str.w	r0, [r9, #28]
 800996c:	b920      	cbnz	r0, 8009978 <_dtoa_r+0x38>
 800996e:	4ba0      	ldr	r3, [pc, #640]	@ (8009bf0 <_dtoa_r+0x2b0>)
 8009970:	21ef      	movs	r1, #239	@ 0xef
 8009972:	48a0      	ldr	r0, [pc, #640]	@ (8009bf4 <_dtoa_r+0x2b4>)
 8009974:	f001 fd12 	bl	800b39c <__assert_func>
 8009978:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800997c:	6007      	str	r7, [r0, #0]
 800997e:	60c7      	str	r7, [r0, #12]
 8009980:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009984:	6819      	ldr	r1, [r3, #0]
 8009986:	b159      	cbz	r1, 80099a0 <_dtoa_r+0x60>
 8009988:	685a      	ldr	r2, [r3, #4]
 800998a:	604a      	str	r2, [r1, #4]
 800998c:	2301      	movs	r3, #1
 800998e:	4093      	lsls	r3, r2
 8009990:	608b      	str	r3, [r1, #8]
 8009992:	4648      	mov	r0, r9
 8009994:	f001 f816 	bl	800a9c4 <_Bfree>
 8009998:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	1e2b      	subs	r3, r5, #0
 80099a2:	bfbb      	ittet	lt
 80099a4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80099a8:	9303      	strlt	r3, [sp, #12]
 80099aa:	2300      	movge	r3, #0
 80099ac:	2201      	movlt	r2, #1
 80099ae:	bfac      	ite	ge
 80099b0:	6033      	strge	r3, [r6, #0]
 80099b2:	6032      	strlt	r2, [r6, #0]
 80099b4:	4b90      	ldr	r3, [pc, #576]	@ (8009bf8 <_dtoa_r+0x2b8>)
 80099b6:	9e03      	ldr	r6, [sp, #12]
 80099b8:	43b3      	bics	r3, r6
 80099ba:	d110      	bne.n	80099de <_dtoa_r+0x9e>
 80099bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099be:	f242 730f 	movw	r3, #9999	@ 0x270f
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80099c8:	4323      	orrs	r3, r4
 80099ca:	f000 84e6 	beq.w	800a39a <_dtoa_r+0xa5a>
 80099ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80099d0:	4f8a      	ldr	r7, [pc, #552]	@ (8009bfc <_dtoa_r+0x2bc>)
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 84e8 	beq.w	800a3a8 <_dtoa_r+0xa68>
 80099d8:	1cfb      	adds	r3, r7, #3
 80099da:	f000 bce3 	b.w	800a3a4 <_dtoa_r+0xa64>
 80099de:	ed9d 8b02 	vldr	d8, [sp, #8]
 80099e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ea:	d10a      	bne.n	8009a02 <_dtoa_r+0xc2>
 80099ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099ee:	2301      	movs	r3, #1
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80099f4:	b113      	cbz	r3, 80099fc <_dtoa_r+0xbc>
 80099f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80099f8:	4b81      	ldr	r3, [pc, #516]	@ (8009c00 <_dtoa_r+0x2c0>)
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	4f81      	ldr	r7, [pc, #516]	@ (8009c04 <_dtoa_r+0x2c4>)
 80099fe:	f000 bcd3 	b.w	800a3a8 <_dtoa_r+0xa68>
 8009a02:	aa0e      	add	r2, sp, #56	@ 0x38
 8009a04:	a90f      	add	r1, sp, #60	@ 0x3c
 8009a06:	4648      	mov	r0, r9
 8009a08:	eeb0 0b48 	vmov.f64	d0, d8
 8009a0c:	f001 fabc 	bl	800af88 <__d2b>
 8009a10:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009a14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a16:	9001      	str	r0, [sp, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d045      	beq.n	8009aa8 <_dtoa_r+0x168>
 8009a1c:	eeb0 7b48 	vmov.f64	d7, d8
 8009a20:	ee18 1a90 	vmov	r1, s17
 8009a24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009a28:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009a2c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009a30:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009a34:	2500      	movs	r5, #0
 8009a36:	ee07 1a90 	vmov	s15, r1
 8009a3a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009a3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009bd8 <_dtoa_r+0x298>
 8009a42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009a46:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009be0 <_dtoa_r+0x2a0>
 8009a4a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009a4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009be8 <_dtoa_r+0x2a8>
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009a5a:	eeb0 7b46 	vmov.f64	d7, d6
 8009a5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009a62:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009a66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6e:	ee16 8a90 	vmov	r8, s13
 8009a72:	d508      	bpl.n	8009a86 <_dtoa_r+0x146>
 8009a74:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009a78:	eeb4 6b47 	vcmp.f64	d6, d7
 8009a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a80:	bf18      	it	ne
 8009a82:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8009a86:	f1b8 0f16 	cmp.w	r8, #22
 8009a8a:	d82b      	bhi.n	8009ae4 <_dtoa_r+0x1a4>
 8009a8c:	495e      	ldr	r1, [pc, #376]	@ (8009c08 <_dtoa_r+0x2c8>)
 8009a8e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009a92:	ed91 7b00 	vldr	d7, [r1]
 8009a96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a9e:	d501      	bpl.n	8009aa4 <_dtoa_r+0x164>
 8009aa0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	e01e      	b.n	8009ae6 <_dtoa_r+0x1a6>
 8009aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aaa:	4413      	add	r3, r2
 8009aac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009ab0:	2920      	cmp	r1, #32
 8009ab2:	bfc1      	itttt	gt
 8009ab4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009ab8:	408e      	lslgt	r6, r1
 8009aba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009abe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009ac2:	bfd6      	itet	le
 8009ac4:	f1c1 0120 	rsble	r1, r1, #32
 8009ac8:	4331      	orrgt	r1, r6
 8009aca:	fa04 f101 	lslle.w	r1, r4, r1
 8009ace:	ee07 1a90 	vmov	s15, r1
 8009ad2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	ee17 1a90 	vmov	r1, s15
 8009adc:	2501      	movs	r5, #1
 8009ade:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009ae2:	e7a8      	b.n	8009a36 <_dtoa_r+0xf6>
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	1ad2      	subs	r2, r2, r3
 8009ae8:	1e53      	subs	r3, r2, #1
 8009aea:	9306      	str	r3, [sp, #24]
 8009aec:	bf45      	ittet	mi
 8009aee:	f1c2 0301 	rsbmi	r3, r2, #1
 8009af2:	9304      	strmi	r3, [sp, #16]
 8009af4:	2300      	movpl	r3, #0
 8009af6:	2300      	movmi	r3, #0
 8009af8:	bf4c      	ite	mi
 8009afa:	9306      	strmi	r3, [sp, #24]
 8009afc:	9304      	strpl	r3, [sp, #16]
 8009afe:	f1b8 0f00 	cmp.w	r8, #0
 8009b02:	910c      	str	r1, [sp, #48]	@ 0x30
 8009b04:	db18      	blt.n	8009b38 <_dtoa_r+0x1f8>
 8009b06:	9b06      	ldr	r3, [sp, #24]
 8009b08:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009b0c:	4443      	add	r3, r8
 8009b0e:	9306      	str	r3, [sp, #24]
 8009b10:	2300      	movs	r3, #0
 8009b12:	9a07      	ldr	r2, [sp, #28]
 8009b14:	2a09      	cmp	r2, #9
 8009b16:	d845      	bhi.n	8009ba4 <_dtoa_r+0x264>
 8009b18:	2a05      	cmp	r2, #5
 8009b1a:	bfc4      	itt	gt
 8009b1c:	3a04      	subgt	r2, #4
 8009b1e:	9207      	strgt	r2, [sp, #28]
 8009b20:	9a07      	ldr	r2, [sp, #28]
 8009b22:	f1a2 0202 	sub.w	r2, r2, #2
 8009b26:	bfcc      	ite	gt
 8009b28:	2400      	movgt	r4, #0
 8009b2a:	2401      	movle	r4, #1
 8009b2c:	2a03      	cmp	r2, #3
 8009b2e:	d844      	bhi.n	8009bba <_dtoa_r+0x27a>
 8009b30:	e8df f002 	tbb	[pc, r2]
 8009b34:	0b173634 	.word	0x0b173634
 8009b38:	9b04      	ldr	r3, [sp, #16]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	eba3 0308 	sub.w	r3, r3, r8
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	920a      	str	r2, [sp, #40]	@ 0x28
 8009b44:	f1c8 0300 	rsb	r3, r8, #0
 8009b48:	e7e3      	b.n	8009b12 <_dtoa_r+0x1d2>
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	9208      	str	r2, [sp, #32]
 8009b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b50:	eb08 0b02 	add.w	fp, r8, r2
 8009b54:	f10b 0a01 	add.w	sl, fp, #1
 8009b58:	4652      	mov	r2, sl
 8009b5a:	2a01      	cmp	r2, #1
 8009b5c:	bfb8      	it	lt
 8009b5e:	2201      	movlt	r2, #1
 8009b60:	e006      	b.n	8009b70 <_dtoa_r+0x230>
 8009b62:	2201      	movs	r2, #1
 8009b64:	9208      	str	r2, [sp, #32]
 8009b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	dd29      	ble.n	8009bc0 <_dtoa_r+0x280>
 8009b6c:	4693      	mov	fp, r2
 8009b6e:	4692      	mov	sl, r2
 8009b70:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009b74:	2100      	movs	r1, #0
 8009b76:	2004      	movs	r0, #4
 8009b78:	f100 0614 	add.w	r6, r0, #20
 8009b7c:	4296      	cmp	r6, r2
 8009b7e:	d926      	bls.n	8009bce <_dtoa_r+0x28e>
 8009b80:	6079      	str	r1, [r7, #4]
 8009b82:	4648      	mov	r0, r9
 8009b84:	9305      	str	r3, [sp, #20]
 8009b86:	f000 fedd 	bl	800a944 <_Balloc>
 8009b8a:	9b05      	ldr	r3, [sp, #20]
 8009b8c:	4607      	mov	r7, r0
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d13e      	bne.n	8009c10 <_dtoa_r+0x2d0>
 8009b92:	4b1e      	ldr	r3, [pc, #120]	@ (8009c0c <_dtoa_r+0x2cc>)
 8009b94:	4602      	mov	r2, r0
 8009b96:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b9a:	e6ea      	b.n	8009972 <_dtoa_r+0x32>
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	e7e1      	b.n	8009b64 <_dtoa_r+0x224>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	e7d3      	b.n	8009b4c <_dtoa_r+0x20c>
 8009ba4:	2401      	movs	r4, #1
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009bac:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	46da      	mov	sl, fp
 8009bb4:	2212      	movs	r2, #18
 8009bb6:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bb8:	e7da      	b.n	8009b70 <_dtoa_r+0x230>
 8009bba:	2201      	movs	r2, #1
 8009bbc:	9208      	str	r2, [sp, #32]
 8009bbe:	e7f5      	b.n	8009bac <_dtoa_r+0x26c>
 8009bc0:	f04f 0b01 	mov.w	fp, #1
 8009bc4:	46da      	mov	sl, fp
 8009bc6:	465a      	mov	r2, fp
 8009bc8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009bcc:	e7d0      	b.n	8009b70 <_dtoa_r+0x230>
 8009bce:	3101      	adds	r1, #1
 8009bd0:	0040      	lsls	r0, r0, #1
 8009bd2:	e7d1      	b.n	8009b78 <_dtoa_r+0x238>
 8009bd4:	f3af 8000 	nop.w
 8009bd8:	636f4361 	.word	0x636f4361
 8009bdc:	3fd287a7 	.word	0x3fd287a7
 8009be0:	8b60c8b3 	.word	0x8b60c8b3
 8009be4:	3fc68a28 	.word	0x3fc68a28
 8009be8:	509f79fb 	.word	0x509f79fb
 8009bec:	3fd34413 	.word	0x3fd34413
 8009bf0:	0800b6d5 	.word	0x0800b6d5
 8009bf4:	0800b6ec 	.word	0x0800b6ec
 8009bf8:	7ff00000 	.word	0x7ff00000
 8009bfc:	0800b6d1 	.word	0x0800b6d1
 8009c00:	0800b6a5 	.word	0x0800b6a5
 8009c04:	0800b6a4 	.word	0x0800b6a4
 8009c08:	0800b840 	.word	0x0800b840
 8009c0c:	0800b744 	.word	0x0800b744
 8009c10:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009c14:	f1ba 0f0e 	cmp.w	sl, #14
 8009c18:	6010      	str	r0, [r2, #0]
 8009c1a:	d86e      	bhi.n	8009cfa <_dtoa_r+0x3ba>
 8009c1c:	2c00      	cmp	r4, #0
 8009c1e:	d06c      	beq.n	8009cfa <_dtoa_r+0x3ba>
 8009c20:	f1b8 0f00 	cmp.w	r8, #0
 8009c24:	f340 80b4 	ble.w	8009d90 <_dtoa_r+0x450>
 8009c28:	4ac8      	ldr	r2, [pc, #800]	@ (8009f4c <_dtoa_r+0x60c>)
 8009c2a:	f008 010f 	and.w	r1, r8, #15
 8009c2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009c32:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009c36:	ed92 7b00 	vldr	d7, [r2]
 8009c3a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009c3e:	f000 809b 	beq.w	8009d78 <_dtoa_r+0x438>
 8009c42:	4ac3      	ldr	r2, [pc, #780]	@ (8009f50 <_dtoa_r+0x610>)
 8009c44:	ed92 6b08 	vldr	d6, [r2, #32]
 8009c48:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009c4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009c50:	f001 010f 	and.w	r1, r1, #15
 8009c54:	2203      	movs	r2, #3
 8009c56:	48be      	ldr	r0, [pc, #760]	@ (8009f50 <_dtoa_r+0x610>)
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	f040 808f 	bne.w	8009d7c <_dtoa_r+0x43c>
 8009c5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009c66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009c6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c70:	2900      	cmp	r1, #0
 8009c72:	f000 80b3 	beq.w	8009ddc <_dtoa_r+0x49c>
 8009c76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009c7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c82:	f140 80ab 	bpl.w	8009ddc <_dtoa_r+0x49c>
 8009c86:	f1ba 0f00 	cmp.w	sl, #0
 8009c8a:	f000 80a7 	beq.w	8009ddc <_dtoa_r+0x49c>
 8009c8e:	f1bb 0f00 	cmp.w	fp, #0
 8009c92:	dd30      	ble.n	8009cf6 <_dtoa_r+0x3b6>
 8009c94:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009c98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ca0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8009ca4:	9105      	str	r1, [sp, #20]
 8009ca6:	3201      	adds	r2, #1
 8009ca8:	465c      	mov	r4, fp
 8009caa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009cae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009cb2:	ee07 2a90 	vmov	s15, r2
 8009cb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009cba:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009cbe:	ee15 2a90 	vmov	r2, s11
 8009cc2:	ec51 0b15 	vmov	r0, r1, d5
 8009cc6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009cca:	2c00      	cmp	r4, #0
 8009ccc:	f040 808a 	bne.w	8009de4 <_dtoa_r+0x4a4>
 8009cd0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009cd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009cd8:	ec41 0b17 	vmov	d7, r0, r1
 8009cdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce4:	f300 826a 	bgt.w	800a1bc <_dtoa_r+0x87c>
 8009ce8:	eeb1 7b47 	vneg.f64	d7, d7
 8009cec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf4:	d423      	bmi.n	8009d3e <_dtoa_r+0x3fe>
 8009cf6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009cfa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009cfc:	2a00      	cmp	r2, #0
 8009cfe:	f2c0 8129 	blt.w	8009f54 <_dtoa_r+0x614>
 8009d02:	f1b8 0f0e 	cmp.w	r8, #14
 8009d06:	f300 8125 	bgt.w	8009f54 <_dtoa_r+0x614>
 8009d0a:	4b90      	ldr	r3, [pc, #576]	@ (8009f4c <_dtoa_r+0x60c>)
 8009d0c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d10:	ed93 6b00 	vldr	d6, [r3]
 8009d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f280 80c8 	bge.w	8009eac <_dtoa_r+0x56c>
 8009d1c:	f1ba 0f00 	cmp.w	sl, #0
 8009d20:	f300 80c4 	bgt.w	8009eac <_dtoa_r+0x56c>
 8009d24:	d10b      	bne.n	8009d3e <_dtoa_r+0x3fe>
 8009d26:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009d2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3a:	f2c0 823c 	blt.w	800a1b6 <_dtoa_r+0x876>
 8009d3e:	2400      	movs	r4, #0
 8009d40:	4625      	mov	r5, r4
 8009d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d44:	43db      	mvns	r3, r3
 8009d46:	9305      	str	r3, [sp, #20]
 8009d48:	463e      	mov	r6, r7
 8009d4a:	f04f 0800 	mov.w	r8, #0
 8009d4e:	4621      	mov	r1, r4
 8009d50:	4648      	mov	r0, r9
 8009d52:	f000 fe37 	bl	800a9c4 <_Bfree>
 8009d56:	2d00      	cmp	r5, #0
 8009d58:	f000 80a2 	beq.w	8009ea0 <_dtoa_r+0x560>
 8009d5c:	f1b8 0f00 	cmp.w	r8, #0
 8009d60:	d005      	beq.n	8009d6e <_dtoa_r+0x42e>
 8009d62:	45a8      	cmp	r8, r5
 8009d64:	d003      	beq.n	8009d6e <_dtoa_r+0x42e>
 8009d66:	4641      	mov	r1, r8
 8009d68:	4648      	mov	r0, r9
 8009d6a:	f000 fe2b 	bl	800a9c4 <_Bfree>
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4648      	mov	r0, r9
 8009d72:	f000 fe27 	bl	800a9c4 <_Bfree>
 8009d76:	e093      	b.n	8009ea0 <_dtoa_r+0x560>
 8009d78:	2202      	movs	r2, #2
 8009d7a:	e76c      	b.n	8009c56 <_dtoa_r+0x316>
 8009d7c:	07cc      	lsls	r4, r1, #31
 8009d7e:	d504      	bpl.n	8009d8a <_dtoa_r+0x44a>
 8009d80:	ed90 6b00 	vldr	d6, [r0]
 8009d84:	3201      	adds	r2, #1
 8009d86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d8a:	1049      	asrs	r1, r1, #1
 8009d8c:	3008      	adds	r0, #8
 8009d8e:	e763      	b.n	8009c58 <_dtoa_r+0x318>
 8009d90:	d022      	beq.n	8009dd8 <_dtoa_r+0x498>
 8009d92:	f1c8 0100 	rsb	r1, r8, #0
 8009d96:	4a6d      	ldr	r2, [pc, #436]	@ (8009f4c <_dtoa_r+0x60c>)
 8009d98:	f001 000f 	and.w	r0, r1, #15
 8009d9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009da0:	ed92 7b00 	vldr	d7, [r2]
 8009da4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009da8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009dac:	4868      	ldr	r0, [pc, #416]	@ (8009f50 <_dtoa_r+0x610>)
 8009dae:	1109      	asrs	r1, r1, #4
 8009db0:	2400      	movs	r4, #0
 8009db2:	2202      	movs	r2, #2
 8009db4:	b929      	cbnz	r1, 8009dc2 <_dtoa_r+0x482>
 8009db6:	2c00      	cmp	r4, #0
 8009db8:	f43f af57 	beq.w	8009c6a <_dtoa_r+0x32a>
 8009dbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009dc0:	e753      	b.n	8009c6a <_dtoa_r+0x32a>
 8009dc2:	07ce      	lsls	r6, r1, #31
 8009dc4:	d505      	bpl.n	8009dd2 <_dtoa_r+0x492>
 8009dc6:	ed90 6b00 	vldr	d6, [r0]
 8009dca:	3201      	adds	r2, #1
 8009dcc:	2401      	movs	r4, #1
 8009dce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009dd2:	1049      	asrs	r1, r1, #1
 8009dd4:	3008      	adds	r0, #8
 8009dd6:	e7ed      	b.n	8009db4 <_dtoa_r+0x474>
 8009dd8:	2202      	movs	r2, #2
 8009dda:	e746      	b.n	8009c6a <_dtoa_r+0x32a>
 8009ddc:	f8cd 8014 	str.w	r8, [sp, #20]
 8009de0:	4654      	mov	r4, sl
 8009de2:	e762      	b.n	8009caa <_dtoa_r+0x36a>
 8009de4:	4a59      	ldr	r2, [pc, #356]	@ (8009f4c <_dtoa_r+0x60c>)
 8009de6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009dea:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009dee:	9a08      	ldr	r2, [sp, #32]
 8009df0:	ec41 0b17 	vmov	d7, r0, r1
 8009df4:	443c      	add	r4, r7
 8009df6:	b34a      	cbz	r2, 8009e4c <_dtoa_r+0x50c>
 8009df8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009dfc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009e00:	463e      	mov	r6, r7
 8009e02:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009e06:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009e0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e0e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e12:	ee14 2a90 	vmov	r2, s9
 8009e16:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e1a:	3230      	adds	r2, #48	@ 0x30
 8009e1c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e28:	f806 2b01 	strb.w	r2, [r6], #1
 8009e2c:	d438      	bmi.n	8009ea0 <_dtoa_r+0x560>
 8009e2e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009e32:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e3a:	d46e      	bmi.n	8009f1a <_dtoa_r+0x5da>
 8009e3c:	42a6      	cmp	r6, r4
 8009e3e:	f43f af5a 	beq.w	8009cf6 <_dtoa_r+0x3b6>
 8009e42:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009e46:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e4a:	e7e0      	b.n	8009e0e <_dtoa_r+0x4ce>
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	463e      	mov	r6, r7
 8009e50:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e54:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009e58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e5c:	ee14 2a90 	vmov	r2, s9
 8009e60:	3230      	adds	r2, #48	@ 0x30
 8009e62:	f806 2b01 	strb.w	r2, [r6], #1
 8009e66:	42a6      	cmp	r6, r4
 8009e68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e70:	d119      	bne.n	8009ea6 <_dtoa_r+0x566>
 8009e72:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009e76:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009e7a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e82:	dc4a      	bgt.n	8009f1a <_dtoa_r+0x5da>
 8009e84:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009e88:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e90:	f57f af31 	bpl.w	8009cf6 <_dtoa_r+0x3b6>
 8009e94:	460e      	mov	r6, r1
 8009e96:	3901      	subs	r1, #1
 8009e98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e9c:	2b30      	cmp	r3, #48	@ 0x30
 8009e9e:	d0f9      	beq.n	8009e94 <_dtoa_r+0x554>
 8009ea0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009ea4:	e027      	b.n	8009ef6 <_dtoa_r+0x5b6>
 8009ea6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009eaa:	e7d5      	b.n	8009e58 <_dtoa_r+0x518>
 8009eac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009eb0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009eb4:	463e      	mov	r6, r7
 8009eb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009eba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009ebe:	ee15 3a10 	vmov	r3, s10
 8009ec2:	3330      	adds	r3, #48	@ 0x30
 8009ec4:	f806 3b01 	strb.w	r3, [r6], #1
 8009ec8:	1bf3      	subs	r3, r6, r7
 8009eca:	459a      	cmp	sl, r3
 8009ecc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009ed0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009ed4:	d132      	bne.n	8009f3c <_dtoa_r+0x5fc>
 8009ed6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009eda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee2:	dc18      	bgt.n	8009f16 <_dtoa_r+0x5d6>
 8009ee4:	eeb4 7b46 	vcmp.f64	d7, d6
 8009ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eec:	d103      	bne.n	8009ef6 <_dtoa_r+0x5b6>
 8009eee:	ee15 3a10 	vmov	r3, s10
 8009ef2:	07db      	lsls	r3, r3, #31
 8009ef4:	d40f      	bmi.n	8009f16 <_dtoa_r+0x5d6>
 8009ef6:	9901      	ldr	r1, [sp, #4]
 8009ef8:	4648      	mov	r0, r9
 8009efa:	f000 fd63 	bl	800a9c4 <_Bfree>
 8009efe:	2300      	movs	r3, #0
 8009f00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f02:	7033      	strb	r3, [r6, #0]
 8009f04:	f108 0301 	add.w	r3, r8, #1
 8009f08:	6013      	str	r3, [r2, #0]
 8009f0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 824b 	beq.w	800a3a8 <_dtoa_r+0xa68>
 8009f12:	601e      	str	r6, [r3, #0]
 8009f14:	e248      	b.n	800a3a8 <_dtoa_r+0xa68>
 8009f16:	f8cd 8014 	str.w	r8, [sp, #20]
 8009f1a:	4633      	mov	r3, r6
 8009f1c:	461e      	mov	r6, r3
 8009f1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f22:	2a39      	cmp	r2, #57	@ 0x39
 8009f24:	d106      	bne.n	8009f34 <_dtoa_r+0x5f4>
 8009f26:	429f      	cmp	r7, r3
 8009f28:	d1f8      	bne.n	8009f1c <_dtoa_r+0x5dc>
 8009f2a:	9a05      	ldr	r2, [sp, #20]
 8009f2c:	3201      	adds	r2, #1
 8009f2e:	9205      	str	r2, [sp, #20]
 8009f30:	2230      	movs	r2, #48	@ 0x30
 8009f32:	703a      	strb	r2, [r7, #0]
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	3201      	adds	r2, #1
 8009f38:	701a      	strb	r2, [r3, #0]
 8009f3a:	e7b1      	b.n	8009ea0 <_dtoa_r+0x560>
 8009f3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f48:	d1b5      	bne.n	8009eb6 <_dtoa_r+0x576>
 8009f4a:	e7d4      	b.n	8009ef6 <_dtoa_r+0x5b6>
 8009f4c:	0800b840 	.word	0x0800b840
 8009f50:	0800b818 	.word	0x0800b818
 8009f54:	9908      	ldr	r1, [sp, #32]
 8009f56:	2900      	cmp	r1, #0
 8009f58:	f000 80e9 	beq.w	800a12e <_dtoa_r+0x7ee>
 8009f5c:	9907      	ldr	r1, [sp, #28]
 8009f5e:	2901      	cmp	r1, #1
 8009f60:	f300 80cb 	bgt.w	800a0fa <_dtoa_r+0x7ba>
 8009f64:	2d00      	cmp	r5, #0
 8009f66:	f000 80c4 	beq.w	800a0f2 <_dtoa_r+0x7b2>
 8009f6a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009f6e:	9e04      	ldr	r6, [sp, #16]
 8009f70:	461c      	mov	r4, r3
 8009f72:	9305      	str	r3, [sp, #20]
 8009f74:	9b04      	ldr	r3, [sp, #16]
 8009f76:	4413      	add	r3, r2
 8009f78:	9304      	str	r3, [sp, #16]
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	4413      	add	r3, r2
 8009f80:	4648      	mov	r0, r9
 8009f82:	9306      	str	r3, [sp, #24]
 8009f84:	f000 fdd2 	bl	800ab2c <__i2b>
 8009f88:	9b05      	ldr	r3, [sp, #20]
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	b166      	cbz	r6, 8009fa8 <_dtoa_r+0x668>
 8009f8e:	9a06      	ldr	r2, [sp, #24]
 8009f90:	2a00      	cmp	r2, #0
 8009f92:	dd09      	ble.n	8009fa8 <_dtoa_r+0x668>
 8009f94:	42b2      	cmp	r2, r6
 8009f96:	9904      	ldr	r1, [sp, #16]
 8009f98:	bfa8      	it	ge
 8009f9a:	4632      	movge	r2, r6
 8009f9c:	1a89      	subs	r1, r1, r2
 8009f9e:	9104      	str	r1, [sp, #16]
 8009fa0:	9906      	ldr	r1, [sp, #24]
 8009fa2:	1ab6      	subs	r6, r6, r2
 8009fa4:	1a8a      	subs	r2, r1, r2
 8009fa6:	9206      	str	r2, [sp, #24]
 8009fa8:	b30b      	cbz	r3, 8009fee <_dtoa_r+0x6ae>
 8009faa:	9a08      	ldr	r2, [sp, #32]
 8009fac:	2a00      	cmp	r2, #0
 8009fae:	f000 80c5 	beq.w	800a13c <_dtoa_r+0x7fc>
 8009fb2:	2c00      	cmp	r4, #0
 8009fb4:	f000 80bf 	beq.w	800a136 <_dtoa_r+0x7f6>
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4622      	mov	r2, r4
 8009fbc:	4648      	mov	r0, r9
 8009fbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fc0:	f000 fe6c 	bl	800ac9c <__pow5mult>
 8009fc4:	9a01      	ldr	r2, [sp, #4]
 8009fc6:	4601      	mov	r1, r0
 8009fc8:	4605      	mov	r5, r0
 8009fca:	4648      	mov	r0, r9
 8009fcc:	f000 fdc4 	bl	800ab58 <__multiply>
 8009fd0:	9901      	ldr	r1, [sp, #4]
 8009fd2:	9005      	str	r0, [sp, #20]
 8009fd4:	4648      	mov	r0, r9
 8009fd6:	f000 fcf5 	bl	800a9c4 <_Bfree>
 8009fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fdc:	1b1b      	subs	r3, r3, r4
 8009fde:	f000 80b0 	beq.w	800a142 <_dtoa_r+0x802>
 8009fe2:	9905      	ldr	r1, [sp, #20]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	4648      	mov	r0, r9
 8009fe8:	f000 fe58 	bl	800ac9c <__pow5mult>
 8009fec:	9001      	str	r0, [sp, #4]
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4648      	mov	r0, r9
 8009ff2:	f000 fd9b 	bl	800ab2c <__i2b>
 8009ff6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 81da 	beq.w	800a3b4 <_dtoa_r+0xa74>
 800a000:	461a      	mov	r2, r3
 800a002:	4601      	mov	r1, r0
 800a004:	4648      	mov	r0, r9
 800a006:	f000 fe49 	bl	800ac9c <__pow5mult>
 800a00a:	9b07      	ldr	r3, [sp, #28]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	4604      	mov	r4, r0
 800a010:	f300 80a0 	bgt.w	800a154 <_dtoa_r+0x814>
 800a014:	9b02      	ldr	r3, [sp, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f040 8096 	bne.w	800a148 <_dtoa_r+0x808>
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a022:	2a00      	cmp	r2, #0
 800a024:	f040 8092 	bne.w	800a14c <_dtoa_r+0x80c>
 800a028:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a02c:	0d12      	lsrs	r2, r2, #20
 800a02e:	0512      	lsls	r2, r2, #20
 800a030:	2a00      	cmp	r2, #0
 800a032:	f000 808d 	beq.w	800a150 <_dtoa_r+0x810>
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	3301      	adds	r3, #1
 800a03a:	9304      	str	r3, [sp, #16]
 800a03c:	9b06      	ldr	r3, [sp, #24]
 800a03e:	3301      	adds	r3, #1
 800a040:	9306      	str	r3, [sp, #24]
 800a042:	2301      	movs	r3, #1
 800a044:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a046:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 81b9 	beq.w	800a3c0 <_dtoa_r+0xa80>
 800a04e:	6922      	ldr	r2, [r4, #16]
 800a050:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a054:	6910      	ldr	r0, [r2, #16]
 800a056:	f000 fd1d 	bl	800aa94 <__hi0bits>
 800a05a:	f1c0 0020 	rsb	r0, r0, #32
 800a05e:	9b06      	ldr	r3, [sp, #24]
 800a060:	4418      	add	r0, r3
 800a062:	f010 001f 	ands.w	r0, r0, #31
 800a066:	f000 8081 	beq.w	800a16c <_dtoa_r+0x82c>
 800a06a:	f1c0 0220 	rsb	r2, r0, #32
 800a06e:	2a04      	cmp	r2, #4
 800a070:	dd73      	ble.n	800a15a <_dtoa_r+0x81a>
 800a072:	9b04      	ldr	r3, [sp, #16]
 800a074:	f1c0 001c 	rsb	r0, r0, #28
 800a078:	4403      	add	r3, r0
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	9b06      	ldr	r3, [sp, #24]
 800a07e:	4406      	add	r6, r0
 800a080:	4403      	add	r3, r0
 800a082:	9306      	str	r3, [sp, #24]
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	dd05      	ble.n	800a096 <_dtoa_r+0x756>
 800a08a:	9901      	ldr	r1, [sp, #4]
 800a08c:	461a      	mov	r2, r3
 800a08e:	4648      	mov	r0, r9
 800a090:	f000 fe5e 	bl	800ad50 <__lshift>
 800a094:	9001      	str	r0, [sp, #4]
 800a096:	9b06      	ldr	r3, [sp, #24]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	dd05      	ble.n	800a0a8 <_dtoa_r+0x768>
 800a09c:	4621      	mov	r1, r4
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4648      	mov	r0, r9
 800a0a2:	f000 fe55 	bl	800ad50 <__lshift>
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d060      	beq.n	800a170 <_dtoa_r+0x830>
 800a0ae:	9801      	ldr	r0, [sp, #4]
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	f000 feb9 	bl	800ae28 <__mcmp>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	da5a      	bge.n	800a170 <_dtoa_r+0x830>
 800a0ba:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800a0be:	9305      	str	r3, [sp, #20]
 800a0c0:	9901      	ldr	r1, [sp, #4]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	4648      	mov	r0, r9
 800a0c8:	f000 fc9e 	bl	800aa08 <__multadd>
 800a0cc:	9b08      	ldr	r3, [sp, #32]
 800a0ce:	9001      	str	r0, [sp, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 8177 	beq.w	800a3c4 <_dtoa_r+0xa84>
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	2300      	movs	r3, #0
 800a0da:	220a      	movs	r2, #10
 800a0dc:	4648      	mov	r0, r9
 800a0de:	f000 fc93 	bl	800aa08 <__multadd>
 800a0e2:	f1bb 0f00 	cmp.w	fp, #0
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	dc6e      	bgt.n	800a1c8 <_dtoa_r+0x888>
 800a0ea:	9b07      	ldr	r3, [sp, #28]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	dc48      	bgt.n	800a182 <_dtoa_r+0x842>
 800a0f0:	e06a      	b.n	800a1c8 <_dtoa_r+0x888>
 800a0f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a0f8:	e739      	b.n	8009f6e <_dtoa_r+0x62e>
 800a0fa:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800a0fe:	42a3      	cmp	r3, r4
 800a100:	db07      	blt.n	800a112 <_dtoa_r+0x7d2>
 800a102:	f1ba 0f00 	cmp.w	sl, #0
 800a106:	eba3 0404 	sub.w	r4, r3, r4
 800a10a:	db0b      	blt.n	800a124 <_dtoa_r+0x7e4>
 800a10c:	9e04      	ldr	r6, [sp, #16]
 800a10e:	4652      	mov	r2, sl
 800a110:	e72f      	b.n	8009f72 <_dtoa_r+0x632>
 800a112:	1ae2      	subs	r2, r4, r3
 800a114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a116:	9e04      	ldr	r6, [sp, #16]
 800a118:	4413      	add	r3, r2
 800a11a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a11c:	4652      	mov	r2, sl
 800a11e:	4623      	mov	r3, r4
 800a120:	2400      	movs	r4, #0
 800a122:	e726      	b.n	8009f72 <_dtoa_r+0x632>
 800a124:	9a04      	ldr	r2, [sp, #16]
 800a126:	eba2 060a 	sub.w	r6, r2, sl
 800a12a:	2200      	movs	r2, #0
 800a12c:	e721      	b.n	8009f72 <_dtoa_r+0x632>
 800a12e:	9e04      	ldr	r6, [sp, #16]
 800a130:	9d08      	ldr	r5, [sp, #32]
 800a132:	461c      	mov	r4, r3
 800a134:	e72a      	b.n	8009f8c <_dtoa_r+0x64c>
 800a136:	9a01      	ldr	r2, [sp, #4]
 800a138:	9205      	str	r2, [sp, #20]
 800a13a:	e752      	b.n	8009fe2 <_dtoa_r+0x6a2>
 800a13c:	9901      	ldr	r1, [sp, #4]
 800a13e:	461a      	mov	r2, r3
 800a140:	e751      	b.n	8009fe6 <_dtoa_r+0x6a6>
 800a142:	9b05      	ldr	r3, [sp, #20]
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	e752      	b.n	8009fee <_dtoa_r+0x6ae>
 800a148:	2300      	movs	r3, #0
 800a14a:	e77b      	b.n	800a044 <_dtoa_r+0x704>
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	e779      	b.n	800a044 <_dtoa_r+0x704>
 800a150:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a152:	e778      	b.n	800a046 <_dtoa_r+0x706>
 800a154:	2300      	movs	r3, #0
 800a156:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a158:	e779      	b.n	800a04e <_dtoa_r+0x70e>
 800a15a:	d093      	beq.n	800a084 <_dtoa_r+0x744>
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	321c      	adds	r2, #28
 800a160:	4413      	add	r3, r2
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	9b06      	ldr	r3, [sp, #24]
 800a166:	4416      	add	r6, r2
 800a168:	4413      	add	r3, r2
 800a16a:	e78a      	b.n	800a082 <_dtoa_r+0x742>
 800a16c:	4602      	mov	r2, r0
 800a16e:	e7f5      	b.n	800a15c <_dtoa_r+0x81c>
 800a170:	f1ba 0f00 	cmp.w	sl, #0
 800a174:	f8cd 8014 	str.w	r8, [sp, #20]
 800a178:	46d3      	mov	fp, sl
 800a17a:	dc21      	bgt.n	800a1c0 <_dtoa_r+0x880>
 800a17c:	9b07      	ldr	r3, [sp, #28]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	dd1e      	ble.n	800a1c0 <_dtoa_r+0x880>
 800a182:	f1bb 0f00 	cmp.w	fp, #0
 800a186:	f47f addc 	bne.w	8009d42 <_dtoa_r+0x402>
 800a18a:	4621      	mov	r1, r4
 800a18c:	465b      	mov	r3, fp
 800a18e:	2205      	movs	r2, #5
 800a190:	4648      	mov	r0, r9
 800a192:	f000 fc39 	bl	800aa08 <__multadd>
 800a196:	4601      	mov	r1, r0
 800a198:	4604      	mov	r4, r0
 800a19a:	9801      	ldr	r0, [sp, #4]
 800a19c:	f000 fe44 	bl	800ae28 <__mcmp>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	f77f adce 	ble.w	8009d42 <_dtoa_r+0x402>
 800a1a6:	463e      	mov	r6, r7
 800a1a8:	2331      	movs	r3, #49	@ 0x31
 800a1aa:	f806 3b01 	strb.w	r3, [r6], #1
 800a1ae:	9b05      	ldr	r3, [sp, #20]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	e5c9      	b.n	8009d4a <_dtoa_r+0x40a>
 800a1b6:	f8cd 8014 	str.w	r8, [sp, #20]
 800a1ba:	4654      	mov	r4, sl
 800a1bc:	4625      	mov	r5, r4
 800a1be:	e7f2      	b.n	800a1a6 <_dtoa_r+0x866>
 800a1c0:	9b08      	ldr	r3, [sp, #32]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 8102 	beq.w	800a3cc <_dtoa_r+0xa8c>
 800a1c8:	2e00      	cmp	r6, #0
 800a1ca:	dd05      	ble.n	800a1d8 <_dtoa_r+0x898>
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	4632      	mov	r2, r6
 800a1d0:	4648      	mov	r0, r9
 800a1d2:	f000 fdbd 	bl	800ad50 <__lshift>
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d058      	beq.n	800a290 <_dtoa_r+0x950>
 800a1de:	6869      	ldr	r1, [r5, #4]
 800a1e0:	4648      	mov	r0, r9
 800a1e2:	f000 fbaf 	bl	800a944 <_Balloc>
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	b928      	cbnz	r0, 800a1f6 <_dtoa_r+0x8b6>
 800a1ea:	4b82      	ldr	r3, [pc, #520]	@ (800a3f4 <_dtoa_r+0xab4>)
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a1f2:	f7ff bbbe 	b.w	8009972 <_dtoa_r+0x32>
 800a1f6:	692a      	ldr	r2, [r5, #16]
 800a1f8:	3202      	adds	r2, #2
 800a1fa:	0092      	lsls	r2, r2, #2
 800a1fc:	f105 010c 	add.w	r1, r5, #12
 800a200:	300c      	adds	r0, #12
 800a202:	f7ff fb07 	bl	8009814 <memcpy>
 800a206:	2201      	movs	r2, #1
 800a208:	4631      	mov	r1, r6
 800a20a:	4648      	mov	r0, r9
 800a20c:	f000 fda0 	bl	800ad50 <__lshift>
 800a210:	1c7b      	adds	r3, r7, #1
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	eb07 030b 	add.w	r3, r7, fp
 800a218:	9309      	str	r3, [sp, #36]	@ 0x24
 800a21a:	9b02      	ldr	r3, [sp, #8]
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	46a8      	mov	r8, r5
 800a222:	9308      	str	r3, [sp, #32]
 800a224:	4605      	mov	r5, r0
 800a226:	9b04      	ldr	r3, [sp, #16]
 800a228:	9801      	ldr	r0, [sp, #4]
 800a22a:	4621      	mov	r1, r4
 800a22c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a230:	f7ff fafe 	bl	8009830 <quorem>
 800a234:	4641      	mov	r1, r8
 800a236:	9002      	str	r0, [sp, #8]
 800a238:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a23c:	9801      	ldr	r0, [sp, #4]
 800a23e:	f000 fdf3 	bl	800ae28 <__mcmp>
 800a242:	462a      	mov	r2, r5
 800a244:	9006      	str	r0, [sp, #24]
 800a246:	4621      	mov	r1, r4
 800a248:	4648      	mov	r0, r9
 800a24a:	f000 fe09 	bl	800ae60 <__mdiff>
 800a24e:	68c2      	ldr	r2, [r0, #12]
 800a250:	4606      	mov	r6, r0
 800a252:	b9fa      	cbnz	r2, 800a294 <_dtoa_r+0x954>
 800a254:	4601      	mov	r1, r0
 800a256:	9801      	ldr	r0, [sp, #4]
 800a258:	f000 fde6 	bl	800ae28 <__mcmp>
 800a25c:	4602      	mov	r2, r0
 800a25e:	4631      	mov	r1, r6
 800a260:	4648      	mov	r0, r9
 800a262:	920a      	str	r2, [sp, #40]	@ 0x28
 800a264:	f000 fbae 	bl	800a9c4 <_Bfree>
 800a268:	9b07      	ldr	r3, [sp, #28]
 800a26a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a26c:	9e04      	ldr	r6, [sp, #16]
 800a26e:	ea42 0103 	orr.w	r1, r2, r3
 800a272:	9b08      	ldr	r3, [sp, #32]
 800a274:	4319      	orrs	r1, r3
 800a276:	d10f      	bne.n	800a298 <_dtoa_r+0x958>
 800a278:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a27c:	d028      	beq.n	800a2d0 <_dtoa_r+0x990>
 800a27e:	9b06      	ldr	r3, [sp, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	dd02      	ble.n	800a28a <_dtoa_r+0x94a>
 800a284:	9b02      	ldr	r3, [sp, #8]
 800a286:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a28a:	f88b a000 	strb.w	sl, [fp]
 800a28e:	e55e      	b.n	8009d4e <_dtoa_r+0x40e>
 800a290:	4628      	mov	r0, r5
 800a292:	e7bd      	b.n	800a210 <_dtoa_r+0x8d0>
 800a294:	2201      	movs	r2, #1
 800a296:	e7e2      	b.n	800a25e <_dtoa_r+0x91e>
 800a298:	9b06      	ldr	r3, [sp, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	db04      	blt.n	800a2a8 <_dtoa_r+0x968>
 800a29e:	9907      	ldr	r1, [sp, #28]
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	9908      	ldr	r1, [sp, #32]
 800a2a4:	430b      	orrs	r3, r1
 800a2a6:	d120      	bne.n	800a2ea <_dtoa_r+0x9aa>
 800a2a8:	2a00      	cmp	r2, #0
 800a2aa:	ddee      	ble.n	800a28a <_dtoa_r+0x94a>
 800a2ac:	9901      	ldr	r1, [sp, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	4648      	mov	r0, r9
 800a2b2:	f000 fd4d 	bl	800ad50 <__lshift>
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	9001      	str	r0, [sp, #4]
 800a2ba:	f000 fdb5 	bl	800ae28 <__mcmp>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	dc03      	bgt.n	800a2ca <_dtoa_r+0x98a>
 800a2c2:	d1e2      	bne.n	800a28a <_dtoa_r+0x94a>
 800a2c4:	f01a 0f01 	tst.w	sl, #1
 800a2c8:	d0df      	beq.n	800a28a <_dtoa_r+0x94a>
 800a2ca:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a2ce:	d1d9      	bne.n	800a284 <_dtoa_r+0x944>
 800a2d0:	2339      	movs	r3, #57	@ 0x39
 800a2d2:	f88b 3000 	strb.w	r3, [fp]
 800a2d6:	4633      	mov	r3, r6
 800a2d8:	461e      	mov	r6, r3
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a2e0:	2a39      	cmp	r2, #57	@ 0x39
 800a2e2:	d052      	beq.n	800a38a <_dtoa_r+0xa4a>
 800a2e4:	3201      	adds	r2, #1
 800a2e6:	701a      	strb	r2, [r3, #0]
 800a2e8:	e531      	b.n	8009d4e <_dtoa_r+0x40e>
 800a2ea:	2a00      	cmp	r2, #0
 800a2ec:	dd07      	ble.n	800a2fe <_dtoa_r+0x9be>
 800a2ee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a2f2:	d0ed      	beq.n	800a2d0 <_dtoa_r+0x990>
 800a2f4:	f10a 0301 	add.w	r3, sl, #1
 800a2f8:	f88b 3000 	strb.w	r3, [fp]
 800a2fc:	e527      	b.n	8009d4e <_dtoa_r+0x40e>
 800a2fe:	9b04      	ldr	r3, [sp, #16]
 800a300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a302:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a306:	4293      	cmp	r3, r2
 800a308:	d029      	beq.n	800a35e <_dtoa_r+0xa1e>
 800a30a:	9901      	ldr	r1, [sp, #4]
 800a30c:	2300      	movs	r3, #0
 800a30e:	220a      	movs	r2, #10
 800a310:	4648      	mov	r0, r9
 800a312:	f000 fb79 	bl	800aa08 <__multadd>
 800a316:	45a8      	cmp	r8, r5
 800a318:	9001      	str	r0, [sp, #4]
 800a31a:	f04f 0300 	mov.w	r3, #0
 800a31e:	f04f 020a 	mov.w	r2, #10
 800a322:	4641      	mov	r1, r8
 800a324:	4648      	mov	r0, r9
 800a326:	d107      	bne.n	800a338 <_dtoa_r+0x9f8>
 800a328:	f000 fb6e 	bl	800aa08 <__multadd>
 800a32c:	4680      	mov	r8, r0
 800a32e:	4605      	mov	r5, r0
 800a330:	9b04      	ldr	r3, [sp, #16]
 800a332:	3301      	adds	r3, #1
 800a334:	9304      	str	r3, [sp, #16]
 800a336:	e776      	b.n	800a226 <_dtoa_r+0x8e6>
 800a338:	f000 fb66 	bl	800aa08 <__multadd>
 800a33c:	4629      	mov	r1, r5
 800a33e:	4680      	mov	r8, r0
 800a340:	2300      	movs	r3, #0
 800a342:	220a      	movs	r2, #10
 800a344:	4648      	mov	r0, r9
 800a346:	f000 fb5f 	bl	800aa08 <__multadd>
 800a34a:	4605      	mov	r5, r0
 800a34c:	e7f0      	b.n	800a330 <_dtoa_r+0x9f0>
 800a34e:	f1bb 0f00 	cmp.w	fp, #0
 800a352:	bfcc      	ite	gt
 800a354:	465e      	movgt	r6, fp
 800a356:	2601      	movle	r6, #1
 800a358:	443e      	add	r6, r7
 800a35a:	f04f 0800 	mov.w	r8, #0
 800a35e:	9901      	ldr	r1, [sp, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	4648      	mov	r0, r9
 800a364:	f000 fcf4 	bl	800ad50 <__lshift>
 800a368:	4621      	mov	r1, r4
 800a36a:	9001      	str	r0, [sp, #4]
 800a36c:	f000 fd5c 	bl	800ae28 <__mcmp>
 800a370:	2800      	cmp	r0, #0
 800a372:	dcb0      	bgt.n	800a2d6 <_dtoa_r+0x996>
 800a374:	d102      	bne.n	800a37c <_dtoa_r+0xa3c>
 800a376:	f01a 0f01 	tst.w	sl, #1
 800a37a:	d1ac      	bne.n	800a2d6 <_dtoa_r+0x996>
 800a37c:	4633      	mov	r3, r6
 800a37e:	461e      	mov	r6, r3
 800a380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a384:	2a30      	cmp	r2, #48	@ 0x30
 800a386:	d0fa      	beq.n	800a37e <_dtoa_r+0xa3e>
 800a388:	e4e1      	b.n	8009d4e <_dtoa_r+0x40e>
 800a38a:	429f      	cmp	r7, r3
 800a38c:	d1a4      	bne.n	800a2d8 <_dtoa_r+0x998>
 800a38e:	9b05      	ldr	r3, [sp, #20]
 800a390:	3301      	adds	r3, #1
 800a392:	9305      	str	r3, [sp, #20]
 800a394:	2331      	movs	r3, #49	@ 0x31
 800a396:	703b      	strb	r3, [r7, #0]
 800a398:	e4d9      	b.n	8009d4e <_dtoa_r+0x40e>
 800a39a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a39c:	4f16      	ldr	r7, [pc, #88]	@ (800a3f8 <_dtoa_r+0xab8>)
 800a39e:	b11b      	cbz	r3, 800a3a8 <_dtoa_r+0xa68>
 800a3a0:	f107 0308 	add.w	r3, r7, #8
 800a3a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	b011      	add	sp, #68	@ 0x44
 800a3ac:	ecbd 8b02 	vpop	{d8}
 800a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b4:	9b07      	ldr	r3, [sp, #28]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	f77f ae2c 	ble.w	800a014 <_dtoa_r+0x6d4>
 800a3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3c0:	2001      	movs	r0, #1
 800a3c2:	e64c      	b.n	800a05e <_dtoa_r+0x71e>
 800a3c4:	f1bb 0f00 	cmp.w	fp, #0
 800a3c8:	f77f aed8 	ble.w	800a17c <_dtoa_r+0x83c>
 800a3cc:	463e      	mov	r6, r7
 800a3ce:	9801      	ldr	r0, [sp, #4]
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	f7ff fa2d 	bl	8009830 <quorem>
 800a3d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a3da:	f806 ab01 	strb.w	sl, [r6], #1
 800a3de:	1bf2      	subs	r2, r6, r7
 800a3e0:	4593      	cmp	fp, r2
 800a3e2:	ddb4      	ble.n	800a34e <_dtoa_r+0xa0e>
 800a3e4:	9901      	ldr	r1, [sp, #4]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	220a      	movs	r2, #10
 800a3ea:	4648      	mov	r0, r9
 800a3ec:	f000 fb0c 	bl	800aa08 <__multadd>
 800a3f0:	9001      	str	r0, [sp, #4]
 800a3f2:	e7ec      	b.n	800a3ce <_dtoa_r+0xa8e>
 800a3f4:	0800b744 	.word	0x0800b744
 800a3f8:	0800b6c8 	.word	0x0800b6c8

0800a3fc <__sfputc_r>:
 800a3fc:	6893      	ldr	r3, [r2, #8]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	b410      	push	{r4}
 800a404:	6093      	str	r3, [r2, #8]
 800a406:	da08      	bge.n	800a41a <__sfputc_r+0x1e>
 800a408:	6994      	ldr	r4, [r2, #24]
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	db01      	blt.n	800a412 <__sfputc_r+0x16>
 800a40e:	290a      	cmp	r1, #10
 800a410:	d103      	bne.n	800a41a <__sfputc_r+0x1e>
 800a412:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a416:	f000 be52 	b.w	800b0be <__swbuf_r>
 800a41a:	6813      	ldr	r3, [r2, #0]
 800a41c:	1c58      	adds	r0, r3, #1
 800a41e:	6010      	str	r0, [r2, #0]
 800a420:	7019      	strb	r1, [r3, #0]
 800a422:	4608      	mov	r0, r1
 800a424:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <__sfputs_r>:
 800a42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42c:	4606      	mov	r6, r0
 800a42e:	460f      	mov	r7, r1
 800a430:	4614      	mov	r4, r2
 800a432:	18d5      	adds	r5, r2, r3
 800a434:	42ac      	cmp	r4, r5
 800a436:	d101      	bne.n	800a43c <__sfputs_r+0x12>
 800a438:	2000      	movs	r0, #0
 800a43a:	e007      	b.n	800a44c <__sfputs_r+0x22>
 800a43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a440:	463a      	mov	r2, r7
 800a442:	4630      	mov	r0, r6
 800a444:	f7ff ffda 	bl	800a3fc <__sfputc_r>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d1f3      	bne.n	800a434 <__sfputs_r+0xa>
 800a44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a450 <_vfiprintf_r>:
 800a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	460d      	mov	r5, r1
 800a456:	b09d      	sub	sp, #116	@ 0x74
 800a458:	4614      	mov	r4, r2
 800a45a:	4698      	mov	r8, r3
 800a45c:	4606      	mov	r6, r0
 800a45e:	b118      	cbz	r0, 800a468 <_vfiprintf_r+0x18>
 800a460:	6a03      	ldr	r3, [r0, #32]
 800a462:	b90b      	cbnz	r3, 800a468 <_vfiprintf_r+0x18>
 800a464:	f7ff f8f6 	bl	8009654 <__sinit>
 800a468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a46a:	07d9      	lsls	r1, r3, #31
 800a46c:	d405      	bmi.n	800a47a <_vfiprintf_r+0x2a>
 800a46e:	89ab      	ldrh	r3, [r5, #12]
 800a470:	059a      	lsls	r2, r3, #22
 800a472:	d402      	bmi.n	800a47a <_vfiprintf_r+0x2a>
 800a474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a476:	f7ff f9c6 	bl	8009806 <__retarget_lock_acquire_recursive>
 800a47a:	89ab      	ldrh	r3, [r5, #12]
 800a47c:	071b      	lsls	r3, r3, #28
 800a47e:	d501      	bpl.n	800a484 <_vfiprintf_r+0x34>
 800a480:	692b      	ldr	r3, [r5, #16]
 800a482:	b99b      	cbnz	r3, 800a4ac <_vfiprintf_r+0x5c>
 800a484:	4629      	mov	r1, r5
 800a486:	4630      	mov	r0, r6
 800a488:	f000 fe58 	bl	800b13c <__swsetup_r>
 800a48c:	b170      	cbz	r0, 800a4ac <_vfiprintf_r+0x5c>
 800a48e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a490:	07dc      	lsls	r4, r3, #31
 800a492:	d504      	bpl.n	800a49e <_vfiprintf_r+0x4e>
 800a494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a498:	b01d      	add	sp, #116	@ 0x74
 800a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49e:	89ab      	ldrh	r3, [r5, #12]
 800a4a0:	0598      	lsls	r0, r3, #22
 800a4a2:	d4f7      	bmi.n	800a494 <_vfiprintf_r+0x44>
 800a4a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4a6:	f7ff f9af 	bl	8009808 <__retarget_lock_release_recursive>
 800a4aa:	e7f3      	b.n	800a494 <_vfiprintf_r+0x44>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4b0:	2320      	movs	r3, #32
 800a4b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ba:	2330      	movs	r3, #48	@ 0x30
 800a4bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a66c <_vfiprintf_r+0x21c>
 800a4c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4c4:	f04f 0901 	mov.w	r9, #1
 800a4c8:	4623      	mov	r3, r4
 800a4ca:	469a      	mov	sl, r3
 800a4cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4d0:	b10a      	cbz	r2, 800a4d6 <_vfiprintf_r+0x86>
 800a4d2:	2a25      	cmp	r2, #37	@ 0x25
 800a4d4:	d1f9      	bne.n	800a4ca <_vfiprintf_r+0x7a>
 800a4d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a4da:	d00b      	beq.n	800a4f4 <_vfiprintf_r+0xa4>
 800a4dc:	465b      	mov	r3, fp
 800a4de:	4622      	mov	r2, r4
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7ff ffa1 	bl	800a42a <__sfputs_r>
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	f000 80a7 	beq.w	800a63c <_vfiprintf_r+0x1ec>
 800a4ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4f0:	445a      	add	r2, fp
 800a4f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 809f 	beq.w	800a63c <_vfiprintf_r+0x1ec>
 800a4fe:	2300      	movs	r3, #0
 800a500:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a508:	f10a 0a01 	add.w	sl, sl, #1
 800a50c:	9304      	str	r3, [sp, #16]
 800a50e:	9307      	str	r3, [sp, #28]
 800a510:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a514:	931a      	str	r3, [sp, #104]	@ 0x68
 800a516:	4654      	mov	r4, sl
 800a518:	2205      	movs	r2, #5
 800a51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51e:	4853      	ldr	r0, [pc, #332]	@ (800a66c <_vfiprintf_r+0x21c>)
 800a520:	f7f5 fef6 	bl	8000310 <memchr>
 800a524:	9a04      	ldr	r2, [sp, #16]
 800a526:	b9d8      	cbnz	r0, 800a560 <_vfiprintf_r+0x110>
 800a528:	06d1      	lsls	r1, r2, #27
 800a52a:	bf44      	itt	mi
 800a52c:	2320      	movmi	r3, #32
 800a52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a532:	0713      	lsls	r3, r2, #28
 800a534:	bf44      	itt	mi
 800a536:	232b      	movmi	r3, #43	@ 0x2b
 800a538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a53c:	f89a 3000 	ldrb.w	r3, [sl]
 800a540:	2b2a      	cmp	r3, #42	@ 0x2a
 800a542:	d015      	beq.n	800a570 <_vfiprintf_r+0x120>
 800a544:	9a07      	ldr	r2, [sp, #28]
 800a546:	4654      	mov	r4, sl
 800a548:	2000      	movs	r0, #0
 800a54a:	f04f 0c0a 	mov.w	ip, #10
 800a54e:	4621      	mov	r1, r4
 800a550:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a554:	3b30      	subs	r3, #48	@ 0x30
 800a556:	2b09      	cmp	r3, #9
 800a558:	d94b      	bls.n	800a5f2 <_vfiprintf_r+0x1a2>
 800a55a:	b1b0      	cbz	r0, 800a58a <_vfiprintf_r+0x13a>
 800a55c:	9207      	str	r2, [sp, #28]
 800a55e:	e014      	b.n	800a58a <_vfiprintf_r+0x13a>
 800a560:	eba0 0308 	sub.w	r3, r0, r8
 800a564:	fa09 f303 	lsl.w	r3, r9, r3
 800a568:	4313      	orrs	r3, r2
 800a56a:	9304      	str	r3, [sp, #16]
 800a56c:	46a2      	mov	sl, r4
 800a56e:	e7d2      	b.n	800a516 <_vfiprintf_r+0xc6>
 800a570:	9b03      	ldr	r3, [sp, #12]
 800a572:	1d19      	adds	r1, r3, #4
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	9103      	str	r1, [sp, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	bfbb      	ittet	lt
 800a57c:	425b      	neglt	r3, r3
 800a57e:	f042 0202 	orrlt.w	r2, r2, #2
 800a582:	9307      	strge	r3, [sp, #28]
 800a584:	9307      	strlt	r3, [sp, #28]
 800a586:	bfb8      	it	lt
 800a588:	9204      	strlt	r2, [sp, #16]
 800a58a:	7823      	ldrb	r3, [r4, #0]
 800a58c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a58e:	d10a      	bne.n	800a5a6 <_vfiprintf_r+0x156>
 800a590:	7863      	ldrb	r3, [r4, #1]
 800a592:	2b2a      	cmp	r3, #42	@ 0x2a
 800a594:	d132      	bne.n	800a5fc <_vfiprintf_r+0x1ac>
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	1d1a      	adds	r2, r3, #4
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	9203      	str	r2, [sp, #12]
 800a59e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5a2:	3402      	adds	r4, #2
 800a5a4:	9305      	str	r3, [sp, #20]
 800a5a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a67c <_vfiprintf_r+0x22c>
 800a5aa:	7821      	ldrb	r1, [r4, #0]
 800a5ac:	2203      	movs	r2, #3
 800a5ae:	4650      	mov	r0, sl
 800a5b0:	f7f5 feae 	bl	8000310 <memchr>
 800a5b4:	b138      	cbz	r0, 800a5c6 <_vfiprintf_r+0x176>
 800a5b6:	9b04      	ldr	r3, [sp, #16]
 800a5b8:	eba0 000a 	sub.w	r0, r0, sl
 800a5bc:	2240      	movs	r2, #64	@ 0x40
 800a5be:	4082      	lsls	r2, r0
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	3401      	adds	r4, #1
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ca:	4829      	ldr	r0, [pc, #164]	@ (800a670 <_vfiprintf_r+0x220>)
 800a5cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5d0:	2206      	movs	r2, #6
 800a5d2:	f7f5 fe9d 	bl	8000310 <memchr>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d03f      	beq.n	800a65a <_vfiprintf_r+0x20a>
 800a5da:	4b26      	ldr	r3, [pc, #152]	@ (800a674 <_vfiprintf_r+0x224>)
 800a5dc:	bb1b      	cbnz	r3, 800a626 <_vfiprintf_r+0x1d6>
 800a5de:	9b03      	ldr	r3, [sp, #12]
 800a5e0:	3307      	adds	r3, #7
 800a5e2:	f023 0307 	bic.w	r3, r3, #7
 800a5e6:	3308      	adds	r3, #8
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ec:	443b      	add	r3, r7
 800a5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5f0:	e76a      	b.n	800a4c8 <_vfiprintf_r+0x78>
 800a5f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	2001      	movs	r0, #1
 800a5fa:	e7a8      	b.n	800a54e <_vfiprintf_r+0xfe>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	3401      	adds	r4, #1
 800a600:	9305      	str	r3, [sp, #20]
 800a602:	4619      	mov	r1, r3
 800a604:	f04f 0c0a 	mov.w	ip, #10
 800a608:	4620      	mov	r0, r4
 800a60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a60e:	3a30      	subs	r2, #48	@ 0x30
 800a610:	2a09      	cmp	r2, #9
 800a612:	d903      	bls.n	800a61c <_vfiprintf_r+0x1cc>
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0c6      	beq.n	800a5a6 <_vfiprintf_r+0x156>
 800a618:	9105      	str	r1, [sp, #20]
 800a61a:	e7c4      	b.n	800a5a6 <_vfiprintf_r+0x156>
 800a61c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a620:	4604      	mov	r4, r0
 800a622:	2301      	movs	r3, #1
 800a624:	e7f0      	b.n	800a608 <_vfiprintf_r+0x1b8>
 800a626:	ab03      	add	r3, sp, #12
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	462a      	mov	r2, r5
 800a62c:	4b12      	ldr	r3, [pc, #72]	@ (800a678 <_vfiprintf_r+0x228>)
 800a62e:	a904      	add	r1, sp, #16
 800a630:	4630      	mov	r0, r6
 800a632:	f7fe fbdd 	bl	8008df0 <_printf_float>
 800a636:	4607      	mov	r7, r0
 800a638:	1c78      	adds	r0, r7, #1
 800a63a:	d1d6      	bne.n	800a5ea <_vfiprintf_r+0x19a>
 800a63c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a63e:	07d9      	lsls	r1, r3, #31
 800a640:	d405      	bmi.n	800a64e <_vfiprintf_r+0x1fe>
 800a642:	89ab      	ldrh	r3, [r5, #12]
 800a644:	059a      	lsls	r2, r3, #22
 800a646:	d402      	bmi.n	800a64e <_vfiprintf_r+0x1fe>
 800a648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a64a:	f7ff f8dd 	bl	8009808 <__retarget_lock_release_recursive>
 800a64e:	89ab      	ldrh	r3, [r5, #12]
 800a650:	065b      	lsls	r3, r3, #25
 800a652:	f53f af1f 	bmi.w	800a494 <_vfiprintf_r+0x44>
 800a656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a658:	e71e      	b.n	800a498 <_vfiprintf_r+0x48>
 800a65a:	ab03      	add	r3, sp, #12
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	462a      	mov	r2, r5
 800a660:	4b05      	ldr	r3, [pc, #20]	@ (800a678 <_vfiprintf_r+0x228>)
 800a662:	a904      	add	r1, sp, #16
 800a664:	4630      	mov	r0, r6
 800a666:	f7fe fe4b 	bl	8009300 <_printf_i>
 800a66a:	e7e4      	b.n	800a636 <_vfiprintf_r+0x1e6>
 800a66c:	0800b755 	.word	0x0800b755
 800a670:	0800b75f 	.word	0x0800b75f
 800a674:	08008df1 	.word	0x08008df1
 800a678:	0800a42b 	.word	0x0800a42b
 800a67c:	0800b75b 	.word	0x0800b75b

0800a680 <malloc>:
 800a680:	4b02      	ldr	r3, [pc, #8]	@ (800a68c <malloc+0xc>)
 800a682:	4601      	mov	r1, r0
 800a684:	6818      	ldr	r0, [r3, #0]
 800a686:	f000 b825 	b.w	800a6d4 <_malloc_r>
 800a68a:	bf00      	nop
 800a68c:	2400002c 	.word	0x2400002c

0800a690 <sbrk_aligned>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	4e0f      	ldr	r6, [pc, #60]	@ (800a6d0 <sbrk_aligned+0x40>)
 800a694:	460c      	mov	r4, r1
 800a696:	6831      	ldr	r1, [r6, #0]
 800a698:	4605      	mov	r5, r0
 800a69a:	b911      	cbnz	r1, 800a6a2 <sbrk_aligned+0x12>
 800a69c:	f000 fe3a 	bl	800b314 <_sbrk_r>
 800a6a0:	6030      	str	r0, [r6, #0]
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f000 fe35 	bl	800b314 <_sbrk_r>
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	d103      	bne.n	800a6b6 <sbrk_aligned+0x26>
 800a6ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	1cc4      	adds	r4, r0, #3
 800a6b8:	f024 0403 	bic.w	r4, r4, #3
 800a6bc:	42a0      	cmp	r0, r4
 800a6be:	d0f8      	beq.n	800a6b2 <sbrk_aligned+0x22>
 800a6c0:	1a21      	subs	r1, r4, r0
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 fe26 	bl	800b314 <_sbrk_r>
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d1f2      	bne.n	800a6b2 <sbrk_aligned+0x22>
 800a6cc:	e7ef      	b.n	800a6ae <sbrk_aligned+0x1e>
 800a6ce:	bf00      	nop
 800a6d0:	2400051c 	.word	0x2400051c

0800a6d4 <_malloc_r>:
 800a6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d8:	1ccd      	adds	r5, r1, #3
 800a6da:	f025 0503 	bic.w	r5, r5, #3
 800a6de:	3508      	adds	r5, #8
 800a6e0:	2d0c      	cmp	r5, #12
 800a6e2:	bf38      	it	cc
 800a6e4:	250c      	movcc	r5, #12
 800a6e6:	2d00      	cmp	r5, #0
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	db01      	blt.n	800a6f0 <_malloc_r+0x1c>
 800a6ec:	42a9      	cmp	r1, r5
 800a6ee:	d904      	bls.n	800a6fa <_malloc_r+0x26>
 800a6f0:	230c      	movs	r3, #12
 800a6f2:	6033      	str	r3, [r6, #0]
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7d0 <_malloc_r+0xfc>
 800a6fe:	f000 f915 	bl	800a92c <__malloc_lock>
 800a702:	f8d8 3000 	ldr.w	r3, [r8]
 800a706:	461c      	mov	r4, r3
 800a708:	bb44      	cbnz	r4, 800a75c <_malloc_r+0x88>
 800a70a:	4629      	mov	r1, r5
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff ffbf 	bl	800a690 <sbrk_aligned>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	4604      	mov	r4, r0
 800a716:	d158      	bne.n	800a7ca <_malloc_r+0xf6>
 800a718:	f8d8 4000 	ldr.w	r4, [r8]
 800a71c:	4627      	mov	r7, r4
 800a71e:	2f00      	cmp	r7, #0
 800a720:	d143      	bne.n	800a7aa <_malloc_r+0xd6>
 800a722:	2c00      	cmp	r4, #0
 800a724:	d04b      	beq.n	800a7be <_malloc_r+0xea>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	4639      	mov	r1, r7
 800a72a:	4630      	mov	r0, r6
 800a72c:	eb04 0903 	add.w	r9, r4, r3
 800a730:	f000 fdf0 	bl	800b314 <_sbrk_r>
 800a734:	4581      	cmp	r9, r0
 800a736:	d142      	bne.n	800a7be <_malloc_r+0xea>
 800a738:	6821      	ldr	r1, [r4, #0]
 800a73a:	1a6d      	subs	r5, r5, r1
 800a73c:	4629      	mov	r1, r5
 800a73e:	4630      	mov	r0, r6
 800a740:	f7ff ffa6 	bl	800a690 <sbrk_aligned>
 800a744:	3001      	adds	r0, #1
 800a746:	d03a      	beq.n	800a7be <_malloc_r+0xea>
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	442b      	add	r3, r5
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	f8d8 3000 	ldr.w	r3, [r8]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	bb62      	cbnz	r2, 800a7b0 <_malloc_r+0xdc>
 800a756:	f8c8 7000 	str.w	r7, [r8]
 800a75a:	e00f      	b.n	800a77c <_malloc_r+0xa8>
 800a75c:	6822      	ldr	r2, [r4, #0]
 800a75e:	1b52      	subs	r2, r2, r5
 800a760:	d420      	bmi.n	800a7a4 <_malloc_r+0xd0>
 800a762:	2a0b      	cmp	r2, #11
 800a764:	d917      	bls.n	800a796 <_malloc_r+0xc2>
 800a766:	1961      	adds	r1, r4, r5
 800a768:	42a3      	cmp	r3, r4
 800a76a:	6025      	str	r5, [r4, #0]
 800a76c:	bf18      	it	ne
 800a76e:	6059      	strne	r1, [r3, #4]
 800a770:	6863      	ldr	r3, [r4, #4]
 800a772:	bf08      	it	eq
 800a774:	f8c8 1000 	streq.w	r1, [r8]
 800a778:	5162      	str	r2, [r4, r5]
 800a77a:	604b      	str	r3, [r1, #4]
 800a77c:	4630      	mov	r0, r6
 800a77e:	f000 f8db 	bl	800a938 <__malloc_unlock>
 800a782:	f104 000b 	add.w	r0, r4, #11
 800a786:	1d23      	adds	r3, r4, #4
 800a788:	f020 0007 	bic.w	r0, r0, #7
 800a78c:	1ac2      	subs	r2, r0, r3
 800a78e:	bf1c      	itt	ne
 800a790:	1a1b      	subne	r3, r3, r0
 800a792:	50a3      	strne	r3, [r4, r2]
 800a794:	e7af      	b.n	800a6f6 <_malloc_r+0x22>
 800a796:	6862      	ldr	r2, [r4, #4]
 800a798:	42a3      	cmp	r3, r4
 800a79a:	bf0c      	ite	eq
 800a79c:	f8c8 2000 	streq.w	r2, [r8]
 800a7a0:	605a      	strne	r2, [r3, #4]
 800a7a2:	e7eb      	b.n	800a77c <_malloc_r+0xa8>
 800a7a4:	4623      	mov	r3, r4
 800a7a6:	6864      	ldr	r4, [r4, #4]
 800a7a8:	e7ae      	b.n	800a708 <_malloc_r+0x34>
 800a7aa:	463c      	mov	r4, r7
 800a7ac:	687f      	ldr	r7, [r7, #4]
 800a7ae:	e7b6      	b.n	800a71e <_malloc_r+0x4a>
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	d1fb      	bne.n	800a7b0 <_malloc_r+0xdc>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	6053      	str	r3, [r2, #4]
 800a7bc:	e7de      	b.n	800a77c <_malloc_r+0xa8>
 800a7be:	230c      	movs	r3, #12
 800a7c0:	6033      	str	r3, [r6, #0]
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f000 f8b8 	bl	800a938 <__malloc_unlock>
 800a7c8:	e794      	b.n	800a6f4 <_malloc_r+0x20>
 800a7ca:	6005      	str	r5, [r0, #0]
 800a7cc:	e7d6      	b.n	800a77c <_malloc_r+0xa8>
 800a7ce:	bf00      	nop
 800a7d0:	24000520 	.word	0x24000520

0800a7d4 <__sflush_r>:
 800a7d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7dc:	0716      	lsls	r6, r2, #28
 800a7de:	4605      	mov	r5, r0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	d454      	bmi.n	800a88e <__sflush_r+0xba>
 800a7e4:	684b      	ldr	r3, [r1, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	dc02      	bgt.n	800a7f0 <__sflush_r+0x1c>
 800a7ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd48      	ble.n	800a882 <__sflush_r+0xae>
 800a7f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7f2:	2e00      	cmp	r6, #0
 800a7f4:	d045      	beq.n	800a882 <__sflush_r+0xae>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7fc:	682f      	ldr	r7, [r5, #0]
 800a7fe:	6a21      	ldr	r1, [r4, #32]
 800a800:	602b      	str	r3, [r5, #0]
 800a802:	d030      	beq.n	800a866 <__sflush_r+0x92>
 800a804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a806:	89a3      	ldrh	r3, [r4, #12]
 800a808:	0759      	lsls	r1, r3, #29
 800a80a:	d505      	bpl.n	800a818 <__sflush_r+0x44>
 800a80c:	6863      	ldr	r3, [r4, #4]
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a812:	b10b      	cbz	r3, 800a818 <__sflush_r+0x44>
 800a814:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a816:	1ad2      	subs	r2, r2, r3
 800a818:	2300      	movs	r3, #0
 800a81a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a81c:	6a21      	ldr	r1, [r4, #32]
 800a81e:	4628      	mov	r0, r5
 800a820:	47b0      	blx	r6
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	d106      	bne.n	800a836 <__sflush_r+0x62>
 800a828:	6829      	ldr	r1, [r5, #0]
 800a82a:	291d      	cmp	r1, #29
 800a82c:	d82b      	bhi.n	800a886 <__sflush_r+0xb2>
 800a82e:	4a2a      	ldr	r2, [pc, #168]	@ (800a8d8 <__sflush_r+0x104>)
 800a830:	40ca      	lsrs	r2, r1
 800a832:	07d6      	lsls	r6, r2, #31
 800a834:	d527      	bpl.n	800a886 <__sflush_r+0xb2>
 800a836:	2200      	movs	r2, #0
 800a838:	6062      	str	r2, [r4, #4]
 800a83a:	04d9      	lsls	r1, r3, #19
 800a83c:	6922      	ldr	r2, [r4, #16]
 800a83e:	6022      	str	r2, [r4, #0]
 800a840:	d504      	bpl.n	800a84c <__sflush_r+0x78>
 800a842:	1c42      	adds	r2, r0, #1
 800a844:	d101      	bne.n	800a84a <__sflush_r+0x76>
 800a846:	682b      	ldr	r3, [r5, #0]
 800a848:	b903      	cbnz	r3, 800a84c <__sflush_r+0x78>
 800a84a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a84c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a84e:	602f      	str	r7, [r5, #0]
 800a850:	b1b9      	cbz	r1, 800a882 <__sflush_r+0xae>
 800a852:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a856:	4299      	cmp	r1, r3
 800a858:	d002      	beq.n	800a860 <__sflush_r+0x8c>
 800a85a:	4628      	mov	r0, r5
 800a85c:	f000 fdd0 	bl	800b400 <_free_r>
 800a860:	2300      	movs	r3, #0
 800a862:	6363      	str	r3, [r4, #52]	@ 0x34
 800a864:	e00d      	b.n	800a882 <__sflush_r+0xae>
 800a866:	2301      	movs	r3, #1
 800a868:	4628      	mov	r0, r5
 800a86a:	47b0      	blx	r6
 800a86c:	4602      	mov	r2, r0
 800a86e:	1c50      	adds	r0, r2, #1
 800a870:	d1c9      	bne.n	800a806 <__sflush_r+0x32>
 800a872:	682b      	ldr	r3, [r5, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0c6      	beq.n	800a806 <__sflush_r+0x32>
 800a878:	2b1d      	cmp	r3, #29
 800a87a:	d001      	beq.n	800a880 <__sflush_r+0xac>
 800a87c:	2b16      	cmp	r3, #22
 800a87e:	d11e      	bne.n	800a8be <__sflush_r+0xea>
 800a880:	602f      	str	r7, [r5, #0]
 800a882:	2000      	movs	r0, #0
 800a884:	e022      	b.n	800a8cc <__sflush_r+0xf8>
 800a886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a88a:	b21b      	sxth	r3, r3
 800a88c:	e01b      	b.n	800a8c6 <__sflush_r+0xf2>
 800a88e:	690f      	ldr	r7, [r1, #16]
 800a890:	2f00      	cmp	r7, #0
 800a892:	d0f6      	beq.n	800a882 <__sflush_r+0xae>
 800a894:	0793      	lsls	r3, r2, #30
 800a896:	680e      	ldr	r6, [r1, #0]
 800a898:	bf08      	it	eq
 800a89a:	694b      	ldreq	r3, [r1, #20]
 800a89c:	600f      	str	r7, [r1, #0]
 800a89e:	bf18      	it	ne
 800a8a0:	2300      	movne	r3, #0
 800a8a2:	eba6 0807 	sub.w	r8, r6, r7
 800a8a6:	608b      	str	r3, [r1, #8]
 800a8a8:	f1b8 0f00 	cmp.w	r8, #0
 800a8ac:	dde9      	ble.n	800a882 <__sflush_r+0xae>
 800a8ae:	6a21      	ldr	r1, [r4, #32]
 800a8b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8b2:	4643      	mov	r3, r8
 800a8b4:	463a      	mov	r2, r7
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	47b0      	blx	r6
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	dc08      	bgt.n	800a8d0 <__sflush_r+0xfc>
 800a8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8c6:	81a3      	strh	r3, [r4, #12]
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d0:	4407      	add	r7, r0
 800a8d2:	eba8 0800 	sub.w	r8, r8, r0
 800a8d6:	e7e7      	b.n	800a8a8 <__sflush_r+0xd4>
 800a8d8:	20400001 	.word	0x20400001

0800a8dc <_fflush_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	690b      	ldr	r3, [r1, #16]
 800a8e0:	4605      	mov	r5, r0
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	b913      	cbnz	r3, 800a8ec <_fflush_r+0x10>
 800a8e6:	2500      	movs	r5, #0
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	b118      	cbz	r0, 800a8f6 <_fflush_r+0x1a>
 800a8ee:	6a03      	ldr	r3, [r0, #32]
 800a8f0:	b90b      	cbnz	r3, 800a8f6 <_fflush_r+0x1a>
 800a8f2:	f7fe feaf 	bl	8009654 <__sinit>
 800a8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d0f3      	beq.n	800a8e6 <_fflush_r+0xa>
 800a8fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a900:	07d0      	lsls	r0, r2, #31
 800a902:	d404      	bmi.n	800a90e <_fflush_r+0x32>
 800a904:	0599      	lsls	r1, r3, #22
 800a906:	d402      	bmi.n	800a90e <_fflush_r+0x32>
 800a908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a90a:	f7fe ff7c 	bl	8009806 <__retarget_lock_acquire_recursive>
 800a90e:	4628      	mov	r0, r5
 800a910:	4621      	mov	r1, r4
 800a912:	f7ff ff5f 	bl	800a7d4 <__sflush_r>
 800a916:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a918:	07da      	lsls	r2, r3, #31
 800a91a:	4605      	mov	r5, r0
 800a91c:	d4e4      	bmi.n	800a8e8 <_fflush_r+0xc>
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	059b      	lsls	r3, r3, #22
 800a922:	d4e1      	bmi.n	800a8e8 <_fflush_r+0xc>
 800a924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a926:	f7fe ff6f 	bl	8009808 <__retarget_lock_release_recursive>
 800a92a:	e7dd      	b.n	800a8e8 <_fflush_r+0xc>

0800a92c <__malloc_lock>:
 800a92c:	4801      	ldr	r0, [pc, #4]	@ (800a934 <__malloc_lock+0x8>)
 800a92e:	f7fe bf6a 	b.w	8009806 <__retarget_lock_acquire_recursive>
 800a932:	bf00      	nop
 800a934:	24000518 	.word	0x24000518

0800a938 <__malloc_unlock>:
 800a938:	4801      	ldr	r0, [pc, #4]	@ (800a940 <__malloc_unlock+0x8>)
 800a93a:	f7fe bf65 	b.w	8009808 <__retarget_lock_release_recursive>
 800a93e:	bf00      	nop
 800a940:	24000518 	.word	0x24000518

0800a944 <_Balloc>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	69c6      	ldr	r6, [r0, #28]
 800a948:	4604      	mov	r4, r0
 800a94a:	460d      	mov	r5, r1
 800a94c:	b976      	cbnz	r6, 800a96c <_Balloc+0x28>
 800a94e:	2010      	movs	r0, #16
 800a950:	f7ff fe96 	bl	800a680 <malloc>
 800a954:	4602      	mov	r2, r0
 800a956:	61e0      	str	r0, [r4, #28]
 800a958:	b920      	cbnz	r0, 800a964 <_Balloc+0x20>
 800a95a:	4b18      	ldr	r3, [pc, #96]	@ (800a9bc <_Balloc+0x78>)
 800a95c:	4818      	ldr	r0, [pc, #96]	@ (800a9c0 <_Balloc+0x7c>)
 800a95e:	216b      	movs	r1, #107	@ 0x6b
 800a960:	f000 fd1c 	bl	800b39c <__assert_func>
 800a964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a968:	6006      	str	r6, [r0, #0]
 800a96a:	60c6      	str	r6, [r0, #12]
 800a96c:	69e6      	ldr	r6, [r4, #28]
 800a96e:	68f3      	ldr	r3, [r6, #12]
 800a970:	b183      	cbz	r3, 800a994 <_Balloc+0x50>
 800a972:	69e3      	ldr	r3, [r4, #28]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a97a:	b9b8      	cbnz	r0, 800a9ac <_Balloc+0x68>
 800a97c:	2101      	movs	r1, #1
 800a97e:	fa01 f605 	lsl.w	r6, r1, r5
 800a982:	1d72      	adds	r2, r6, #5
 800a984:	0092      	lsls	r2, r2, #2
 800a986:	4620      	mov	r0, r4
 800a988:	f000 fd26 	bl	800b3d8 <_calloc_r>
 800a98c:	b160      	cbz	r0, 800a9a8 <_Balloc+0x64>
 800a98e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a992:	e00e      	b.n	800a9b2 <_Balloc+0x6e>
 800a994:	2221      	movs	r2, #33	@ 0x21
 800a996:	2104      	movs	r1, #4
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 fd1d 	bl	800b3d8 <_calloc_r>
 800a99e:	69e3      	ldr	r3, [r4, #28]
 800a9a0:	60f0      	str	r0, [r6, #12]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e4      	bne.n	800a972 <_Balloc+0x2e>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	6802      	ldr	r2, [r0, #0]
 800a9ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9b8:	e7f7      	b.n	800a9aa <_Balloc+0x66>
 800a9ba:	bf00      	nop
 800a9bc:	0800b6d5 	.word	0x0800b6d5
 800a9c0:	0800b766 	.word	0x0800b766

0800a9c4 <_Bfree>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	69c6      	ldr	r6, [r0, #28]
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	b976      	cbnz	r6, 800a9ec <_Bfree+0x28>
 800a9ce:	2010      	movs	r0, #16
 800a9d0:	f7ff fe56 	bl	800a680 <malloc>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	61e8      	str	r0, [r5, #28]
 800a9d8:	b920      	cbnz	r0, 800a9e4 <_Bfree+0x20>
 800a9da:	4b09      	ldr	r3, [pc, #36]	@ (800aa00 <_Bfree+0x3c>)
 800a9dc:	4809      	ldr	r0, [pc, #36]	@ (800aa04 <_Bfree+0x40>)
 800a9de:	218f      	movs	r1, #143	@ 0x8f
 800a9e0:	f000 fcdc 	bl	800b39c <__assert_func>
 800a9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9e8:	6006      	str	r6, [r0, #0]
 800a9ea:	60c6      	str	r6, [r0, #12]
 800a9ec:	b13c      	cbz	r4, 800a9fe <_Bfree+0x3a>
 800a9ee:	69eb      	ldr	r3, [r5, #28]
 800a9f0:	6862      	ldr	r2, [r4, #4]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9f8:	6021      	str	r1, [r4, #0]
 800a9fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	0800b6d5 	.word	0x0800b6d5
 800aa04:	0800b766 	.word	0x0800b766

0800aa08 <__multadd>:
 800aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0c:	690d      	ldr	r5, [r1, #16]
 800aa0e:	4607      	mov	r7, r0
 800aa10:	460c      	mov	r4, r1
 800aa12:	461e      	mov	r6, r3
 800aa14:	f101 0c14 	add.w	ip, r1, #20
 800aa18:	2000      	movs	r0, #0
 800aa1a:	f8dc 3000 	ldr.w	r3, [ip]
 800aa1e:	b299      	uxth	r1, r3
 800aa20:	fb02 6101 	mla	r1, r2, r1, r6
 800aa24:	0c1e      	lsrs	r6, r3, #16
 800aa26:	0c0b      	lsrs	r3, r1, #16
 800aa28:	fb02 3306 	mla	r3, r2, r6, r3
 800aa2c:	b289      	uxth	r1, r1
 800aa2e:	3001      	adds	r0, #1
 800aa30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa34:	4285      	cmp	r5, r0
 800aa36:	f84c 1b04 	str.w	r1, [ip], #4
 800aa3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa3e:	dcec      	bgt.n	800aa1a <__multadd+0x12>
 800aa40:	b30e      	cbz	r6, 800aa86 <__multadd+0x7e>
 800aa42:	68a3      	ldr	r3, [r4, #8]
 800aa44:	42ab      	cmp	r3, r5
 800aa46:	dc19      	bgt.n	800aa7c <__multadd+0x74>
 800aa48:	6861      	ldr	r1, [r4, #4]
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	3101      	adds	r1, #1
 800aa4e:	f7ff ff79 	bl	800a944 <_Balloc>
 800aa52:	4680      	mov	r8, r0
 800aa54:	b928      	cbnz	r0, 800aa62 <__multadd+0x5a>
 800aa56:	4602      	mov	r2, r0
 800aa58:	4b0c      	ldr	r3, [pc, #48]	@ (800aa8c <__multadd+0x84>)
 800aa5a:	480d      	ldr	r0, [pc, #52]	@ (800aa90 <__multadd+0x88>)
 800aa5c:	21ba      	movs	r1, #186	@ 0xba
 800aa5e:	f000 fc9d 	bl	800b39c <__assert_func>
 800aa62:	6922      	ldr	r2, [r4, #16]
 800aa64:	3202      	adds	r2, #2
 800aa66:	f104 010c 	add.w	r1, r4, #12
 800aa6a:	0092      	lsls	r2, r2, #2
 800aa6c:	300c      	adds	r0, #12
 800aa6e:	f7fe fed1 	bl	8009814 <memcpy>
 800aa72:	4621      	mov	r1, r4
 800aa74:	4638      	mov	r0, r7
 800aa76:	f7ff ffa5 	bl	800a9c4 <_Bfree>
 800aa7a:	4644      	mov	r4, r8
 800aa7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa80:	3501      	adds	r5, #1
 800aa82:	615e      	str	r6, [r3, #20]
 800aa84:	6125      	str	r5, [r4, #16]
 800aa86:	4620      	mov	r0, r4
 800aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8c:	0800b744 	.word	0x0800b744
 800aa90:	0800b766 	.word	0x0800b766

0800aa94 <__hi0bits>:
 800aa94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa98:	4603      	mov	r3, r0
 800aa9a:	bf36      	itet	cc
 800aa9c:	0403      	lslcc	r3, r0, #16
 800aa9e:	2000      	movcs	r0, #0
 800aaa0:	2010      	movcc	r0, #16
 800aaa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaa6:	bf3c      	itt	cc
 800aaa8:	021b      	lslcc	r3, r3, #8
 800aaaa:	3008      	addcc	r0, #8
 800aaac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aab0:	bf3c      	itt	cc
 800aab2:	011b      	lslcc	r3, r3, #4
 800aab4:	3004      	addcc	r0, #4
 800aab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaba:	bf3c      	itt	cc
 800aabc:	009b      	lslcc	r3, r3, #2
 800aabe:	3002      	addcc	r0, #2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	db05      	blt.n	800aad0 <__hi0bits+0x3c>
 800aac4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aac8:	f100 0001 	add.w	r0, r0, #1
 800aacc:	bf08      	it	eq
 800aace:	2020      	moveq	r0, #32
 800aad0:	4770      	bx	lr

0800aad2 <__lo0bits>:
 800aad2:	6803      	ldr	r3, [r0, #0]
 800aad4:	4602      	mov	r2, r0
 800aad6:	f013 0007 	ands.w	r0, r3, #7
 800aada:	d00b      	beq.n	800aaf4 <__lo0bits+0x22>
 800aadc:	07d9      	lsls	r1, r3, #31
 800aade:	d421      	bmi.n	800ab24 <__lo0bits+0x52>
 800aae0:	0798      	lsls	r0, r3, #30
 800aae2:	bf49      	itett	mi
 800aae4:	085b      	lsrmi	r3, r3, #1
 800aae6:	089b      	lsrpl	r3, r3, #2
 800aae8:	2001      	movmi	r0, #1
 800aaea:	6013      	strmi	r3, [r2, #0]
 800aaec:	bf5c      	itt	pl
 800aaee:	6013      	strpl	r3, [r2, #0]
 800aaf0:	2002      	movpl	r0, #2
 800aaf2:	4770      	bx	lr
 800aaf4:	b299      	uxth	r1, r3
 800aaf6:	b909      	cbnz	r1, 800aafc <__lo0bits+0x2a>
 800aaf8:	0c1b      	lsrs	r3, r3, #16
 800aafa:	2010      	movs	r0, #16
 800aafc:	b2d9      	uxtb	r1, r3
 800aafe:	b909      	cbnz	r1, 800ab04 <__lo0bits+0x32>
 800ab00:	3008      	adds	r0, #8
 800ab02:	0a1b      	lsrs	r3, r3, #8
 800ab04:	0719      	lsls	r1, r3, #28
 800ab06:	bf04      	itt	eq
 800ab08:	091b      	lsreq	r3, r3, #4
 800ab0a:	3004      	addeq	r0, #4
 800ab0c:	0799      	lsls	r1, r3, #30
 800ab0e:	bf04      	itt	eq
 800ab10:	089b      	lsreq	r3, r3, #2
 800ab12:	3002      	addeq	r0, #2
 800ab14:	07d9      	lsls	r1, r3, #31
 800ab16:	d403      	bmi.n	800ab20 <__lo0bits+0x4e>
 800ab18:	085b      	lsrs	r3, r3, #1
 800ab1a:	f100 0001 	add.w	r0, r0, #1
 800ab1e:	d003      	beq.n	800ab28 <__lo0bits+0x56>
 800ab20:	6013      	str	r3, [r2, #0]
 800ab22:	4770      	bx	lr
 800ab24:	2000      	movs	r0, #0
 800ab26:	4770      	bx	lr
 800ab28:	2020      	movs	r0, #32
 800ab2a:	4770      	bx	lr

0800ab2c <__i2b>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	460c      	mov	r4, r1
 800ab30:	2101      	movs	r1, #1
 800ab32:	f7ff ff07 	bl	800a944 <_Balloc>
 800ab36:	4602      	mov	r2, r0
 800ab38:	b928      	cbnz	r0, 800ab46 <__i2b+0x1a>
 800ab3a:	4b05      	ldr	r3, [pc, #20]	@ (800ab50 <__i2b+0x24>)
 800ab3c:	4805      	ldr	r0, [pc, #20]	@ (800ab54 <__i2b+0x28>)
 800ab3e:	f240 1145 	movw	r1, #325	@ 0x145
 800ab42:	f000 fc2b 	bl	800b39c <__assert_func>
 800ab46:	2301      	movs	r3, #1
 800ab48:	6144      	str	r4, [r0, #20]
 800ab4a:	6103      	str	r3, [r0, #16]
 800ab4c:	bd10      	pop	{r4, pc}
 800ab4e:	bf00      	nop
 800ab50:	0800b744 	.word	0x0800b744
 800ab54:	0800b766 	.word	0x0800b766

0800ab58 <__multiply>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	4617      	mov	r7, r2
 800ab5e:	690a      	ldr	r2, [r1, #16]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	bfa8      	it	ge
 800ab66:	463b      	movge	r3, r7
 800ab68:	4689      	mov	r9, r1
 800ab6a:	bfa4      	itt	ge
 800ab6c:	460f      	movge	r7, r1
 800ab6e:	4699      	movge	r9, r3
 800ab70:	693d      	ldr	r5, [r7, #16]
 800ab72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	eb05 060a 	add.w	r6, r5, sl
 800ab7e:	42b3      	cmp	r3, r6
 800ab80:	b085      	sub	sp, #20
 800ab82:	bfb8      	it	lt
 800ab84:	3101      	addlt	r1, #1
 800ab86:	f7ff fedd 	bl	800a944 <_Balloc>
 800ab8a:	b930      	cbnz	r0, 800ab9a <__multiply+0x42>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	4b41      	ldr	r3, [pc, #260]	@ (800ac94 <__multiply+0x13c>)
 800ab90:	4841      	ldr	r0, [pc, #260]	@ (800ac98 <__multiply+0x140>)
 800ab92:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab96:	f000 fc01 	bl	800b39c <__assert_func>
 800ab9a:	f100 0414 	add.w	r4, r0, #20
 800ab9e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800aba2:	4623      	mov	r3, r4
 800aba4:	2200      	movs	r2, #0
 800aba6:	4573      	cmp	r3, lr
 800aba8:	d320      	bcc.n	800abec <__multiply+0x94>
 800abaa:	f107 0814 	add.w	r8, r7, #20
 800abae:	f109 0114 	add.w	r1, r9, #20
 800abb2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800abb6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800abba:	9302      	str	r3, [sp, #8]
 800abbc:	1beb      	subs	r3, r5, r7
 800abbe:	3b15      	subs	r3, #21
 800abc0:	f023 0303 	bic.w	r3, r3, #3
 800abc4:	3304      	adds	r3, #4
 800abc6:	3715      	adds	r7, #21
 800abc8:	42bd      	cmp	r5, r7
 800abca:	bf38      	it	cc
 800abcc:	2304      	movcc	r3, #4
 800abce:	9301      	str	r3, [sp, #4]
 800abd0:	9b02      	ldr	r3, [sp, #8]
 800abd2:	9103      	str	r1, [sp, #12]
 800abd4:	428b      	cmp	r3, r1
 800abd6:	d80c      	bhi.n	800abf2 <__multiply+0x9a>
 800abd8:	2e00      	cmp	r6, #0
 800abda:	dd03      	ble.n	800abe4 <__multiply+0x8c>
 800abdc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d055      	beq.n	800ac90 <__multiply+0x138>
 800abe4:	6106      	str	r6, [r0, #16]
 800abe6:	b005      	add	sp, #20
 800abe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abec:	f843 2b04 	str.w	r2, [r3], #4
 800abf0:	e7d9      	b.n	800aba6 <__multiply+0x4e>
 800abf2:	f8b1 a000 	ldrh.w	sl, [r1]
 800abf6:	f1ba 0f00 	cmp.w	sl, #0
 800abfa:	d01f      	beq.n	800ac3c <__multiply+0xe4>
 800abfc:	46c4      	mov	ip, r8
 800abfe:	46a1      	mov	r9, r4
 800ac00:	2700      	movs	r7, #0
 800ac02:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac06:	f8d9 3000 	ldr.w	r3, [r9]
 800ac0a:	fa1f fb82 	uxth.w	fp, r2
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac14:	443b      	add	r3, r7
 800ac16:	f8d9 7000 	ldr.w	r7, [r9]
 800ac1a:	0c12      	lsrs	r2, r2, #16
 800ac1c:	0c3f      	lsrs	r7, r7, #16
 800ac1e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ac22:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac2c:	4565      	cmp	r5, ip
 800ac2e:	f849 3b04 	str.w	r3, [r9], #4
 800ac32:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ac36:	d8e4      	bhi.n	800ac02 <__multiply+0xaa>
 800ac38:	9b01      	ldr	r3, [sp, #4]
 800ac3a:	50e7      	str	r7, [r4, r3]
 800ac3c:	9b03      	ldr	r3, [sp, #12]
 800ac3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac42:	3104      	adds	r1, #4
 800ac44:	f1b9 0f00 	cmp.w	r9, #0
 800ac48:	d020      	beq.n	800ac8c <__multiply+0x134>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	4647      	mov	r7, r8
 800ac4e:	46a4      	mov	ip, r4
 800ac50:	f04f 0a00 	mov.w	sl, #0
 800ac54:	f8b7 b000 	ldrh.w	fp, [r7]
 800ac58:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ac5c:	fb09 220b 	mla	r2, r9, fp, r2
 800ac60:	4452      	add	r2, sl
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac68:	f84c 3b04 	str.w	r3, [ip], #4
 800ac6c:	f857 3b04 	ldr.w	r3, [r7], #4
 800ac70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac74:	f8bc 3000 	ldrh.w	r3, [ip]
 800ac78:	fb09 330a 	mla	r3, r9, sl, r3
 800ac7c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ac80:	42bd      	cmp	r5, r7
 800ac82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac86:	d8e5      	bhi.n	800ac54 <__multiply+0xfc>
 800ac88:	9a01      	ldr	r2, [sp, #4]
 800ac8a:	50a3      	str	r3, [r4, r2]
 800ac8c:	3404      	adds	r4, #4
 800ac8e:	e79f      	b.n	800abd0 <__multiply+0x78>
 800ac90:	3e01      	subs	r6, #1
 800ac92:	e7a1      	b.n	800abd8 <__multiply+0x80>
 800ac94:	0800b744 	.word	0x0800b744
 800ac98:	0800b766 	.word	0x0800b766

0800ac9c <__pow5mult>:
 800ac9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca0:	4615      	mov	r5, r2
 800aca2:	f012 0203 	ands.w	r2, r2, #3
 800aca6:	4607      	mov	r7, r0
 800aca8:	460e      	mov	r6, r1
 800acaa:	d007      	beq.n	800acbc <__pow5mult+0x20>
 800acac:	4c25      	ldr	r4, [pc, #148]	@ (800ad44 <__pow5mult+0xa8>)
 800acae:	3a01      	subs	r2, #1
 800acb0:	2300      	movs	r3, #0
 800acb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acb6:	f7ff fea7 	bl	800aa08 <__multadd>
 800acba:	4606      	mov	r6, r0
 800acbc:	10ad      	asrs	r5, r5, #2
 800acbe:	d03d      	beq.n	800ad3c <__pow5mult+0xa0>
 800acc0:	69fc      	ldr	r4, [r7, #28]
 800acc2:	b97c      	cbnz	r4, 800ace4 <__pow5mult+0x48>
 800acc4:	2010      	movs	r0, #16
 800acc6:	f7ff fcdb 	bl	800a680 <malloc>
 800acca:	4602      	mov	r2, r0
 800accc:	61f8      	str	r0, [r7, #28]
 800acce:	b928      	cbnz	r0, 800acdc <__pow5mult+0x40>
 800acd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ad48 <__pow5mult+0xac>)
 800acd2:	481e      	ldr	r0, [pc, #120]	@ (800ad4c <__pow5mult+0xb0>)
 800acd4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800acd8:	f000 fb60 	bl	800b39c <__assert_func>
 800acdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ace0:	6004      	str	r4, [r0, #0]
 800ace2:	60c4      	str	r4, [r0, #12]
 800ace4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ace8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acec:	b94c      	cbnz	r4, 800ad02 <__pow5mult+0x66>
 800acee:	f240 2171 	movw	r1, #625	@ 0x271
 800acf2:	4638      	mov	r0, r7
 800acf4:	f7ff ff1a 	bl	800ab2c <__i2b>
 800acf8:	2300      	movs	r3, #0
 800acfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800acfe:	4604      	mov	r4, r0
 800ad00:	6003      	str	r3, [r0, #0]
 800ad02:	f04f 0900 	mov.w	r9, #0
 800ad06:	07eb      	lsls	r3, r5, #31
 800ad08:	d50a      	bpl.n	800ad20 <__pow5mult+0x84>
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f7ff ff22 	bl	800ab58 <__multiply>
 800ad14:	4631      	mov	r1, r6
 800ad16:	4680      	mov	r8, r0
 800ad18:	4638      	mov	r0, r7
 800ad1a:	f7ff fe53 	bl	800a9c4 <_Bfree>
 800ad1e:	4646      	mov	r6, r8
 800ad20:	106d      	asrs	r5, r5, #1
 800ad22:	d00b      	beq.n	800ad3c <__pow5mult+0xa0>
 800ad24:	6820      	ldr	r0, [r4, #0]
 800ad26:	b938      	cbnz	r0, 800ad38 <__pow5mult+0x9c>
 800ad28:	4622      	mov	r2, r4
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	f7ff ff13 	bl	800ab58 <__multiply>
 800ad32:	6020      	str	r0, [r4, #0]
 800ad34:	f8c0 9000 	str.w	r9, [r0]
 800ad38:	4604      	mov	r4, r0
 800ad3a:	e7e4      	b.n	800ad06 <__pow5mult+0x6a>
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad42:	bf00      	nop
 800ad44:	0800b808 	.word	0x0800b808
 800ad48:	0800b6d5 	.word	0x0800b6d5
 800ad4c:	0800b766 	.word	0x0800b766

0800ad50 <__lshift>:
 800ad50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	460c      	mov	r4, r1
 800ad56:	6849      	ldr	r1, [r1, #4]
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad5e:	68a3      	ldr	r3, [r4, #8]
 800ad60:	4607      	mov	r7, r0
 800ad62:	4691      	mov	r9, r2
 800ad64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad68:	f108 0601 	add.w	r6, r8, #1
 800ad6c:	42b3      	cmp	r3, r6
 800ad6e:	db0b      	blt.n	800ad88 <__lshift+0x38>
 800ad70:	4638      	mov	r0, r7
 800ad72:	f7ff fde7 	bl	800a944 <_Balloc>
 800ad76:	4605      	mov	r5, r0
 800ad78:	b948      	cbnz	r0, 800ad8e <__lshift+0x3e>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	4b28      	ldr	r3, [pc, #160]	@ (800ae20 <__lshift+0xd0>)
 800ad7e:	4829      	ldr	r0, [pc, #164]	@ (800ae24 <__lshift+0xd4>)
 800ad80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad84:	f000 fb0a 	bl	800b39c <__assert_func>
 800ad88:	3101      	adds	r1, #1
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	e7ee      	b.n	800ad6c <__lshift+0x1c>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f100 0114 	add.w	r1, r0, #20
 800ad94:	f100 0210 	add.w	r2, r0, #16
 800ad98:	4618      	mov	r0, r3
 800ad9a:	4553      	cmp	r3, sl
 800ad9c:	db33      	blt.n	800ae06 <__lshift+0xb6>
 800ad9e:	6920      	ldr	r0, [r4, #16]
 800ada0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ada4:	f104 0314 	add.w	r3, r4, #20
 800ada8:	f019 091f 	ands.w	r9, r9, #31
 800adac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800adb4:	d02b      	beq.n	800ae0e <__lshift+0xbe>
 800adb6:	f1c9 0e20 	rsb	lr, r9, #32
 800adba:	468a      	mov	sl, r1
 800adbc:	2200      	movs	r2, #0
 800adbe:	6818      	ldr	r0, [r3, #0]
 800adc0:	fa00 f009 	lsl.w	r0, r0, r9
 800adc4:	4310      	orrs	r0, r2
 800adc6:	f84a 0b04 	str.w	r0, [sl], #4
 800adca:	f853 2b04 	ldr.w	r2, [r3], #4
 800adce:	459c      	cmp	ip, r3
 800add0:	fa22 f20e 	lsr.w	r2, r2, lr
 800add4:	d8f3      	bhi.n	800adbe <__lshift+0x6e>
 800add6:	ebac 0304 	sub.w	r3, ip, r4
 800adda:	3b15      	subs	r3, #21
 800addc:	f023 0303 	bic.w	r3, r3, #3
 800ade0:	3304      	adds	r3, #4
 800ade2:	f104 0015 	add.w	r0, r4, #21
 800ade6:	4560      	cmp	r0, ip
 800ade8:	bf88      	it	hi
 800adea:	2304      	movhi	r3, #4
 800adec:	50ca      	str	r2, [r1, r3]
 800adee:	b10a      	cbz	r2, 800adf4 <__lshift+0xa4>
 800adf0:	f108 0602 	add.w	r6, r8, #2
 800adf4:	3e01      	subs	r6, #1
 800adf6:	4638      	mov	r0, r7
 800adf8:	612e      	str	r6, [r5, #16]
 800adfa:	4621      	mov	r1, r4
 800adfc:	f7ff fde2 	bl	800a9c4 <_Bfree>
 800ae00:	4628      	mov	r0, r5
 800ae02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	e7c5      	b.n	800ad9a <__lshift+0x4a>
 800ae0e:	3904      	subs	r1, #4
 800ae10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae18:	459c      	cmp	ip, r3
 800ae1a:	d8f9      	bhi.n	800ae10 <__lshift+0xc0>
 800ae1c:	e7ea      	b.n	800adf4 <__lshift+0xa4>
 800ae1e:	bf00      	nop
 800ae20:	0800b744 	.word	0x0800b744
 800ae24:	0800b766 	.word	0x0800b766

0800ae28 <__mcmp>:
 800ae28:	690a      	ldr	r2, [r1, #16]
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	6900      	ldr	r0, [r0, #16]
 800ae2e:	1a80      	subs	r0, r0, r2
 800ae30:	b530      	push	{r4, r5, lr}
 800ae32:	d10e      	bne.n	800ae52 <__mcmp+0x2a>
 800ae34:	3314      	adds	r3, #20
 800ae36:	3114      	adds	r1, #20
 800ae38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae48:	4295      	cmp	r5, r2
 800ae4a:	d003      	beq.n	800ae54 <__mcmp+0x2c>
 800ae4c:	d205      	bcs.n	800ae5a <__mcmp+0x32>
 800ae4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae52:	bd30      	pop	{r4, r5, pc}
 800ae54:	42a3      	cmp	r3, r4
 800ae56:	d3f3      	bcc.n	800ae40 <__mcmp+0x18>
 800ae58:	e7fb      	b.n	800ae52 <__mcmp+0x2a>
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	e7f9      	b.n	800ae52 <__mcmp+0x2a>
	...

0800ae60 <__mdiff>:
 800ae60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	4689      	mov	r9, r1
 800ae66:	4606      	mov	r6, r0
 800ae68:	4611      	mov	r1, r2
 800ae6a:	4648      	mov	r0, r9
 800ae6c:	4614      	mov	r4, r2
 800ae6e:	f7ff ffdb 	bl	800ae28 <__mcmp>
 800ae72:	1e05      	subs	r5, r0, #0
 800ae74:	d112      	bne.n	800ae9c <__mdiff+0x3c>
 800ae76:	4629      	mov	r1, r5
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f7ff fd63 	bl	800a944 <_Balloc>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	b928      	cbnz	r0, 800ae8e <__mdiff+0x2e>
 800ae82:	4b3f      	ldr	r3, [pc, #252]	@ (800af80 <__mdiff+0x120>)
 800ae84:	f240 2137 	movw	r1, #567	@ 0x237
 800ae88:	483e      	ldr	r0, [pc, #248]	@ (800af84 <__mdiff+0x124>)
 800ae8a:	f000 fa87 	bl	800b39c <__assert_func>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae94:	4610      	mov	r0, r2
 800ae96:	b003      	add	sp, #12
 800ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9c:	bfbc      	itt	lt
 800ae9e:	464b      	movlt	r3, r9
 800aea0:	46a1      	movlt	r9, r4
 800aea2:	4630      	mov	r0, r6
 800aea4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aea8:	bfba      	itte	lt
 800aeaa:	461c      	movlt	r4, r3
 800aeac:	2501      	movlt	r5, #1
 800aeae:	2500      	movge	r5, #0
 800aeb0:	f7ff fd48 	bl	800a944 <_Balloc>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	b918      	cbnz	r0, 800aec0 <__mdiff+0x60>
 800aeb8:	4b31      	ldr	r3, [pc, #196]	@ (800af80 <__mdiff+0x120>)
 800aeba:	f240 2145 	movw	r1, #581	@ 0x245
 800aebe:	e7e3      	b.n	800ae88 <__mdiff+0x28>
 800aec0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aec4:	6926      	ldr	r6, [r4, #16]
 800aec6:	60c5      	str	r5, [r0, #12]
 800aec8:	f109 0310 	add.w	r3, r9, #16
 800aecc:	f109 0514 	add.w	r5, r9, #20
 800aed0:	f104 0e14 	add.w	lr, r4, #20
 800aed4:	f100 0b14 	add.w	fp, r0, #20
 800aed8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aedc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	46d9      	mov	r9, fp
 800aee4:	f04f 0c00 	mov.w	ip, #0
 800aee8:	9b01      	ldr	r3, [sp, #4]
 800aeea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aeee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aef2:	9301      	str	r3, [sp, #4]
 800aef4:	fa1f f38a 	uxth.w	r3, sl
 800aef8:	4619      	mov	r1, r3
 800aefa:	b283      	uxth	r3, r0
 800aefc:	1acb      	subs	r3, r1, r3
 800aefe:	0c00      	lsrs	r0, r0, #16
 800af00:	4463      	add	r3, ip
 800af02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af10:	4576      	cmp	r6, lr
 800af12:	f849 3b04 	str.w	r3, [r9], #4
 800af16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af1a:	d8e5      	bhi.n	800aee8 <__mdiff+0x88>
 800af1c:	1b33      	subs	r3, r6, r4
 800af1e:	3b15      	subs	r3, #21
 800af20:	f023 0303 	bic.w	r3, r3, #3
 800af24:	3415      	adds	r4, #21
 800af26:	3304      	adds	r3, #4
 800af28:	42a6      	cmp	r6, r4
 800af2a:	bf38      	it	cc
 800af2c:	2304      	movcc	r3, #4
 800af2e:	441d      	add	r5, r3
 800af30:	445b      	add	r3, fp
 800af32:	461e      	mov	r6, r3
 800af34:	462c      	mov	r4, r5
 800af36:	4544      	cmp	r4, r8
 800af38:	d30e      	bcc.n	800af58 <__mdiff+0xf8>
 800af3a:	f108 0103 	add.w	r1, r8, #3
 800af3e:	1b49      	subs	r1, r1, r5
 800af40:	f021 0103 	bic.w	r1, r1, #3
 800af44:	3d03      	subs	r5, #3
 800af46:	45a8      	cmp	r8, r5
 800af48:	bf38      	it	cc
 800af4a:	2100      	movcc	r1, #0
 800af4c:	440b      	add	r3, r1
 800af4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af52:	b191      	cbz	r1, 800af7a <__mdiff+0x11a>
 800af54:	6117      	str	r7, [r2, #16]
 800af56:	e79d      	b.n	800ae94 <__mdiff+0x34>
 800af58:	f854 1b04 	ldr.w	r1, [r4], #4
 800af5c:	46e6      	mov	lr, ip
 800af5e:	0c08      	lsrs	r0, r1, #16
 800af60:	fa1c fc81 	uxtah	ip, ip, r1
 800af64:	4471      	add	r1, lr
 800af66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af6a:	b289      	uxth	r1, r1
 800af6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af70:	f846 1b04 	str.w	r1, [r6], #4
 800af74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af78:	e7dd      	b.n	800af36 <__mdiff+0xd6>
 800af7a:	3f01      	subs	r7, #1
 800af7c:	e7e7      	b.n	800af4e <__mdiff+0xee>
 800af7e:	bf00      	nop
 800af80:	0800b744 	.word	0x0800b744
 800af84:	0800b766 	.word	0x0800b766

0800af88 <__d2b>:
 800af88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af8c:	460f      	mov	r7, r1
 800af8e:	2101      	movs	r1, #1
 800af90:	ec59 8b10 	vmov	r8, r9, d0
 800af94:	4616      	mov	r6, r2
 800af96:	f7ff fcd5 	bl	800a944 <_Balloc>
 800af9a:	4604      	mov	r4, r0
 800af9c:	b930      	cbnz	r0, 800afac <__d2b+0x24>
 800af9e:	4602      	mov	r2, r0
 800afa0:	4b23      	ldr	r3, [pc, #140]	@ (800b030 <__d2b+0xa8>)
 800afa2:	4824      	ldr	r0, [pc, #144]	@ (800b034 <__d2b+0xac>)
 800afa4:	f240 310f 	movw	r1, #783	@ 0x30f
 800afa8:	f000 f9f8 	bl	800b39c <__assert_func>
 800afac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afb4:	b10d      	cbz	r5, 800afba <__d2b+0x32>
 800afb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afba:	9301      	str	r3, [sp, #4]
 800afbc:	f1b8 0300 	subs.w	r3, r8, #0
 800afc0:	d023      	beq.n	800b00a <__d2b+0x82>
 800afc2:	4668      	mov	r0, sp
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	f7ff fd84 	bl	800aad2 <__lo0bits>
 800afca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afce:	b1d0      	cbz	r0, 800b006 <__d2b+0x7e>
 800afd0:	f1c0 0320 	rsb	r3, r0, #32
 800afd4:	fa02 f303 	lsl.w	r3, r2, r3
 800afd8:	430b      	orrs	r3, r1
 800afda:	40c2      	lsrs	r2, r0
 800afdc:	6163      	str	r3, [r4, #20]
 800afde:	9201      	str	r2, [sp, #4]
 800afe0:	9b01      	ldr	r3, [sp, #4]
 800afe2:	61a3      	str	r3, [r4, #24]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	bf0c      	ite	eq
 800afe8:	2201      	moveq	r2, #1
 800afea:	2202      	movne	r2, #2
 800afec:	6122      	str	r2, [r4, #16]
 800afee:	b1a5      	cbz	r5, 800b01a <__d2b+0x92>
 800aff0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aff4:	4405      	add	r5, r0
 800aff6:	603d      	str	r5, [r7, #0]
 800aff8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800affc:	6030      	str	r0, [r6, #0]
 800affe:	4620      	mov	r0, r4
 800b000:	b003      	add	sp, #12
 800b002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b006:	6161      	str	r1, [r4, #20]
 800b008:	e7ea      	b.n	800afe0 <__d2b+0x58>
 800b00a:	a801      	add	r0, sp, #4
 800b00c:	f7ff fd61 	bl	800aad2 <__lo0bits>
 800b010:	9b01      	ldr	r3, [sp, #4]
 800b012:	6163      	str	r3, [r4, #20]
 800b014:	3020      	adds	r0, #32
 800b016:	2201      	movs	r2, #1
 800b018:	e7e8      	b.n	800afec <__d2b+0x64>
 800b01a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b01e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b022:	6038      	str	r0, [r7, #0]
 800b024:	6918      	ldr	r0, [r3, #16]
 800b026:	f7ff fd35 	bl	800aa94 <__hi0bits>
 800b02a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b02e:	e7e5      	b.n	800affc <__d2b+0x74>
 800b030:	0800b744 	.word	0x0800b744
 800b034:	0800b766 	.word	0x0800b766

0800b038 <__sread>:
 800b038:	b510      	push	{r4, lr}
 800b03a:	460c      	mov	r4, r1
 800b03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b040:	f000 f956 	bl	800b2f0 <_read_r>
 800b044:	2800      	cmp	r0, #0
 800b046:	bfab      	itete	ge
 800b048:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b04a:	89a3      	ldrhlt	r3, [r4, #12]
 800b04c:	181b      	addge	r3, r3, r0
 800b04e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b052:	bfac      	ite	ge
 800b054:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b056:	81a3      	strhlt	r3, [r4, #12]
 800b058:	bd10      	pop	{r4, pc}

0800b05a <__swrite>:
 800b05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b05e:	461f      	mov	r7, r3
 800b060:	898b      	ldrh	r3, [r1, #12]
 800b062:	05db      	lsls	r3, r3, #23
 800b064:	4605      	mov	r5, r0
 800b066:	460c      	mov	r4, r1
 800b068:	4616      	mov	r6, r2
 800b06a:	d505      	bpl.n	800b078 <__swrite+0x1e>
 800b06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b070:	2302      	movs	r3, #2
 800b072:	2200      	movs	r2, #0
 800b074:	f000 f92a 	bl	800b2cc <_lseek_r>
 800b078:	89a3      	ldrh	r3, [r4, #12]
 800b07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b07e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b082:	81a3      	strh	r3, [r4, #12]
 800b084:	4632      	mov	r2, r6
 800b086:	463b      	mov	r3, r7
 800b088:	4628      	mov	r0, r5
 800b08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b08e:	f000 b951 	b.w	800b334 <_write_r>

0800b092 <__sseek>:
 800b092:	b510      	push	{r4, lr}
 800b094:	460c      	mov	r4, r1
 800b096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b09a:	f000 f917 	bl	800b2cc <_lseek_r>
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	bf15      	itete	ne
 800b0a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b0a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b0aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b0ae:	81a3      	strheq	r3, [r4, #12]
 800b0b0:	bf18      	it	ne
 800b0b2:	81a3      	strhne	r3, [r4, #12]
 800b0b4:	bd10      	pop	{r4, pc}

0800b0b6 <__sclose>:
 800b0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ba:	f000 b94d 	b.w	800b358 <_close_r>

0800b0be <__swbuf_r>:
 800b0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c0:	460e      	mov	r6, r1
 800b0c2:	4614      	mov	r4, r2
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	b118      	cbz	r0, 800b0d0 <__swbuf_r+0x12>
 800b0c8:	6a03      	ldr	r3, [r0, #32]
 800b0ca:	b90b      	cbnz	r3, 800b0d0 <__swbuf_r+0x12>
 800b0cc:	f7fe fac2 	bl	8009654 <__sinit>
 800b0d0:	69a3      	ldr	r3, [r4, #24]
 800b0d2:	60a3      	str	r3, [r4, #8]
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	071a      	lsls	r2, r3, #28
 800b0d8:	d501      	bpl.n	800b0de <__swbuf_r+0x20>
 800b0da:	6923      	ldr	r3, [r4, #16]
 800b0dc:	b943      	cbnz	r3, 800b0f0 <__swbuf_r+0x32>
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f000 f82b 	bl	800b13c <__swsetup_r>
 800b0e6:	b118      	cbz	r0, 800b0f0 <__swbuf_r+0x32>
 800b0e8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	6922      	ldr	r2, [r4, #16]
 800b0f4:	1a98      	subs	r0, r3, r2
 800b0f6:	6963      	ldr	r3, [r4, #20]
 800b0f8:	b2f6      	uxtb	r6, r6
 800b0fa:	4283      	cmp	r3, r0
 800b0fc:	4637      	mov	r7, r6
 800b0fe:	dc05      	bgt.n	800b10c <__swbuf_r+0x4e>
 800b100:	4621      	mov	r1, r4
 800b102:	4628      	mov	r0, r5
 800b104:	f7ff fbea 	bl	800a8dc <_fflush_r>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d1ed      	bne.n	800b0e8 <__swbuf_r+0x2a>
 800b10c:	68a3      	ldr	r3, [r4, #8]
 800b10e:	3b01      	subs	r3, #1
 800b110:	60a3      	str	r3, [r4, #8]
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	6022      	str	r2, [r4, #0]
 800b118:	701e      	strb	r6, [r3, #0]
 800b11a:	6962      	ldr	r2, [r4, #20]
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	429a      	cmp	r2, r3
 800b120:	d004      	beq.n	800b12c <__swbuf_r+0x6e>
 800b122:	89a3      	ldrh	r3, [r4, #12]
 800b124:	07db      	lsls	r3, r3, #31
 800b126:	d5e1      	bpl.n	800b0ec <__swbuf_r+0x2e>
 800b128:	2e0a      	cmp	r6, #10
 800b12a:	d1df      	bne.n	800b0ec <__swbuf_r+0x2e>
 800b12c:	4621      	mov	r1, r4
 800b12e:	4628      	mov	r0, r5
 800b130:	f7ff fbd4 	bl	800a8dc <_fflush_r>
 800b134:	2800      	cmp	r0, #0
 800b136:	d0d9      	beq.n	800b0ec <__swbuf_r+0x2e>
 800b138:	e7d6      	b.n	800b0e8 <__swbuf_r+0x2a>
	...

0800b13c <__swsetup_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4b29      	ldr	r3, [pc, #164]	@ (800b1e4 <__swsetup_r+0xa8>)
 800b140:	4605      	mov	r5, r0
 800b142:	6818      	ldr	r0, [r3, #0]
 800b144:	460c      	mov	r4, r1
 800b146:	b118      	cbz	r0, 800b150 <__swsetup_r+0x14>
 800b148:	6a03      	ldr	r3, [r0, #32]
 800b14a:	b90b      	cbnz	r3, 800b150 <__swsetup_r+0x14>
 800b14c:	f7fe fa82 	bl	8009654 <__sinit>
 800b150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b154:	0719      	lsls	r1, r3, #28
 800b156:	d422      	bmi.n	800b19e <__swsetup_r+0x62>
 800b158:	06da      	lsls	r2, r3, #27
 800b15a:	d407      	bmi.n	800b16c <__swsetup_r+0x30>
 800b15c:	2209      	movs	r2, #9
 800b15e:	602a      	str	r2, [r5, #0]
 800b160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b164:	81a3      	strh	r3, [r4, #12]
 800b166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b16a:	e033      	b.n	800b1d4 <__swsetup_r+0x98>
 800b16c:	0758      	lsls	r0, r3, #29
 800b16e:	d512      	bpl.n	800b196 <__swsetup_r+0x5a>
 800b170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b172:	b141      	cbz	r1, 800b186 <__swsetup_r+0x4a>
 800b174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b178:	4299      	cmp	r1, r3
 800b17a:	d002      	beq.n	800b182 <__swsetup_r+0x46>
 800b17c:	4628      	mov	r0, r5
 800b17e:	f000 f93f 	bl	800b400 <_free_r>
 800b182:	2300      	movs	r3, #0
 800b184:	6363      	str	r3, [r4, #52]	@ 0x34
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b18c:	81a3      	strh	r3, [r4, #12]
 800b18e:	2300      	movs	r3, #0
 800b190:	6063      	str	r3, [r4, #4]
 800b192:	6923      	ldr	r3, [r4, #16]
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	f043 0308 	orr.w	r3, r3, #8
 800b19c:	81a3      	strh	r3, [r4, #12]
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	b94b      	cbnz	r3, 800b1b6 <__swsetup_r+0x7a>
 800b1a2:	89a3      	ldrh	r3, [r4, #12]
 800b1a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b1a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1ac:	d003      	beq.n	800b1b6 <__swsetup_r+0x7a>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f000 f83f 	bl	800b234 <__smakebuf_r>
 800b1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ba:	f013 0201 	ands.w	r2, r3, #1
 800b1be:	d00a      	beq.n	800b1d6 <__swsetup_r+0x9a>
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	60a2      	str	r2, [r4, #8]
 800b1c4:	6962      	ldr	r2, [r4, #20]
 800b1c6:	4252      	negs	r2, r2
 800b1c8:	61a2      	str	r2, [r4, #24]
 800b1ca:	6922      	ldr	r2, [r4, #16]
 800b1cc:	b942      	cbnz	r2, 800b1e0 <__swsetup_r+0xa4>
 800b1ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b1d2:	d1c5      	bne.n	800b160 <__swsetup_r+0x24>
 800b1d4:	bd38      	pop	{r3, r4, r5, pc}
 800b1d6:	0799      	lsls	r1, r3, #30
 800b1d8:	bf58      	it	pl
 800b1da:	6962      	ldrpl	r2, [r4, #20]
 800b1dc:	60a2      	str	r2, [r4, #8]
 800b1de:	e7f4      	b.n	800b1ca <__swsetup_r+0x8e>
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	e7f7      	b.n	800b1d4 <__swsetup_r+0x98>
 800b1e4:	2400002c 	.word	0x2400002c

0800b1e8 <__swhatbuf_r>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f0:	2900      	cmp	r1, #0
 800b1f2:	b096      	sub	sp, #88	@ 0x58
 800b1f4:	4615      	mov	r5, r2
 800b1f6:	461e      	mov	r6, r3
 800b1f8:	da0d      	bge.n	800b216 <__swhatbuf_r+0x2e>
 800b1fa:	89a3      	ldrh	r3, [r4, #12]
 800b1fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b200:	f04f 0100 	mov.w	r1, #0
 800b204:	bf14      	ite	ne
 800b206:	2340      	movne	r3, #64	@ 0x40
 800b208:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b20c:	2000      	movs	r0, #0
 800b20e:	6031      	str	r1, [r6, #0]
 800b210:	602b      	str	r3, [r5, #0]
 800b212:	b016      	add	sp, #88	@ 0x58
 800b214:	bd70      	pop	{r4, r5, r6, pc}
 800b216:	466a      	mov	r2, sp
 800b218:	f000 f8ae 	bl	800b378 <_fstat_r>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	dbec      	blt.n	800b1fa <__swhatbuf_r+0x12>
 800b220:	9901      	ldr	r1, [sp, #4]
 800b222:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b226:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b22a:	4259      	negs	r1, r3
 800b22c:	4159      	adcs	r1, r3
 800b22e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b232:	e7eb      	b.n	800b20c <__swhatbuf_r+0x24>

0800b234 <__smakebuf_r>:
 800b234:	898b      	ldrh	r3, [r1, #12]
 800b236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b238:	079d      	lsls	r5, r3, #30
 800b23a:	4606      	mov	r6, r0
 800b23c:	460c      	mov	r4, r1
 800b23e:	d507      	bpl.n	800b250 <__smakebuf_r+0x1c>
 800b240:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	2301      	movs	r3, #1
 800b24a:	6163      	str	r3, [r4, #20]
 800b24c:	b003      	add	sp, #12
 800b24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b250:	ab01      	add	r3, sp, #4
 800b252:	466a      	mov	r2, sp
 800b254:	f7ff ffc8 	bl	800b1e8 <__swhatbuf_r>
 800b258:	9f00      	ldr	r7, [sp, #0]
 800b25a:	4605      	mov	r5, r0
 800b25c:	4639      	mov	r1, r7
 800b25e:	4630      	mov	r0, r6
 800b260:	f7ff fa38 	bl	800a6d4 <_malloc_r>
 800b264:	b948      	cbnz	r0, 800b27a <__smakebuf_r+0x46>
 800b266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b26a:	059a      	lsls	r2, r3, #22
 800b26c:	d4ee      	bmi.n	800b24c <__smakebuf_r+0x18>
 800b26e:	f023 0303 	bic.w	r3, r3, #3
 800b272:	f043 0302 	orr.w	r3, r3, #2
 800b276:	81a3      	strh	r3, [r4, #12]
 800b278:	e7e2      	b.n	800b240 <__smakebuf_r+0xc>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	6020      	str	r0, [r4, #0]
 800b27e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b282:	81a3      	strh	r3, [r4, #12]
 800b284:	9b01      	ldr	r3, [sp, #4]
 800b286:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b28a:	b15b      	cbz	r3, 800b2a4 <__smakebuf_r+0x70>
 800b28c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b290:	4630      	mov	r0, r6
 800b292:	f000 f80b 	bl	800b2ac <_isatty_r>
 800b296:	b128      	cbz	r0, 800b2a4 <__smakebuf_r+0x70>
 800b298:	89a3      	ldrh	r3, [r4, #12]
 800b29a:	f023 0303 	bic.w	r3, r3, #3
 800b29e:	f043 0301 	orr.w	r3, r3, #1
 800b2a2:	81a3      	strh	r3, [r4, #12]
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	431d      	orrs	r5, r3
 800b2a8:	81a5      	strh	r5, [r4, #12]
 800b2aa:	e7cf      	b.n	800b24c <__smakebuf_r+0x18>

0800b2ac <_isatty_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4d06      	ldr	r5, [pc, #24]	@ (800b2c8 <_isatty_r+0x1c>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	602b      	str	r3, [r5, #0]
 800b2b8:	f7f6 fa50 	bl	800175c <_isatty>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_isatty_r+0x1a>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_isatty_r+0x1a>
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	24000524 	.word	0x24000524

0800b2cc <_lseek_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d07      	ldr	r5, [pc, #28]	@ (800b2ec <_lseek_r+0x20>)
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	4608      	mov	r0, r1
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	602a      	str	r2, [r5, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f7f6 fa49 	bl	8001772 <_lseek>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d102      	bne.n	800b2ea <_lseek_r+0x1e>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	b103      	cbz	r3, 800b2ea <_lseek_r+0x1e>
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	24000524 	.word	0x24000524

0800b2f0 <_read_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d07      	ldr	r5, [pc, #28]	@ (800b310 <_read_r+0x20>)
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	4608      	mov	r0, r1
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	602a      	str	r2, [r5, #0]
 800b2fe:	461a      	mov	r2, r3
 800b300:	f7f6 f9d7 	bl	80016b2 <_read>
 800b304:	1c43      	adds	r3, r0, #1
 800b306:	d102      	bne.n	800b30e <_read_r+0x1e>
 800b308:	682b      	ldr	r3, [r5, #0]
 800b30a:	b103      	cbz	r3, 800b30e <_read_r+0x1e>
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	bd38      	pop	{r3, r4, r5, pc}
 800b310:	24000524 	.word	0x24000524

0800b314 <_sbrk_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d06      	ldr	r5, [pc, #24]	@ (800b330 <_sbrk_r+0x1c>)
 800b318:	2300      	movs	r3, #0
 800b31a:	4604      	mov	r4, r0
 800b31c:	4608      	mov	r0, r1
 800b31e:	602b      	str	r3, [r5, #0]
 800b320:	f7f6 fa34 	bl	800178c <_sbrk>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_sbrk_r+0x1a>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_sbrk_r+0x1a>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	24000524 	.word	0x24000524

0800b334 <_write_r>:
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	4d07      	ldr	r5, [pc, #28]	@ (800b354 <_write_r+0x20>)
 800b338:	4604      	mov	r4, r0
 800b33a:	4608      	mov	r0, r1
 800b33c:	4611      	mov	r1, r2
 800b33e:	2200      	movs	r2, #0
 800b340:	602a      	str	r2, [r5, #0]
 800b342:	461a      	mov	r2, r3
 800b344:	f7f6 f9d2 	bl	80016ec <_write>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d102      	bne.n	800b352 <_write_r+0x1e>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	b103      	cbz	r3, 800b352 <_write_r+0x1e>
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	bd38      	pop	{r3, r4, r5, pc}
 800b354:	24000524 	.word	0x24000524

0800b358 <_close_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d06      	ldr	r5, [pc, #24]	@ (800b374 <_close_r+0x1c>)
 800b35c:	2300      	movs	r3, #0
 800b35e:	4604      	mov	r4, r0
 800b360:	4608      	mov	r0, r1
 800b362:	602b      	str	r3, [r5, #0]
 800b364:	f7f6 f9de 	bl	8001724 <_close>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d102      	bne.n	800b372 <_close_r+0x1a>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	b103      	cbz	r3, 800b372 <_close_r+0x1a>
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	24000524 	.word	0x24000524

0800b378 <_fstat_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4d07      	ldr	r5, [pc, #28]	@ (800b398 <_fstat_r+0x20>)
 800b37c:	2300      	movs	r3, #0
 800b37e:	4604      	mov	r4, r0
 800b380:	4608      	mov	r0, r1
 800b382:	4611      	mov	r1, r2
 800b384:	602b      	str	r3, [r5, #0]
 800b386:	f7f6 f9d9 	bl	800173c <_fstat>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	d102      	bne.n	800b394 <_fstat_r+0x1c>
 800b38e:	682b      	ldr	r3, [r5, #0]
 800b390:	b103      	cbz	r3, 800b394 <_fstat_r+0x1c>
 800b392:	6023      	str	r3, [r4, #0]
 800b394:	bd38      	pop	{r3, r4, r5, pc}
 800b396:	bf00      	nop
 800b398:	24000524 	.word	0x24000524

0800b39c <__assert_func>:
 800b39c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b39e:	4614      	mov	r4, r2
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4b09      	ldr	r3, [pc, #36]	@ (800b3c8 <__assert_func+0x2c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	68d8      	ldr	r0, [r3, #12]
 800b3aa:	b14c      	cbz	r4, 800b3c0 <__assert_func+0x24>
 800b3ac:	4b07      	ldr	r3, [pc, #28]	@ (800b3cc <__assert_func+0x30>)
 800b3ae:	9100      	str	r1, [sp, #0]
 800b3b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3b4:	4906      	ldr	r1, [pc, #24]	@ (800b3d0 <__assert_func+0x34>)
 800b3b6:	462b      	mov	r3, r5
 800b3b8:	f000 f87e 	bl	800b4b8 <fiprintf>
 800b3bc:	f000 f89b 	bl	800b4f6 <abort>
 800b3c0:	4b04      	ldr	r3, [pc, #16]	@ (800b3d4 <__assert_func+0x38>)
 800b3c2:	461c      	mov	r4, r3
 800b3c4:	e7f3      	b.n	800b3ae <__assert_func+0x12>
 800b3c6:	bf00      	nop
 800b3c8:	2400002c 	.word	0x2400002c
 800b3cc:	0800b7c9 	.word	0x0800b7c9
 800b3d0:	0800b7d6 	.word	0x0800b7d6
 800b3d4:	0800b804 	.word	0x0800b804

0800b3d8 <_calloc_r>:
 800b3d8:	b570      	push	{r4, r5, r6, lr}
 800b3da:	fba1 5402 	umull	r5, r4, r1, r2
 800b3de:	b934      	cbnz	r4, 800b3ee <_calloc_r+0x16>
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	f7ff f977 	bl	800a6d4 <_malloc_r>
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	b928      	cbnz	r0, 800b3f6 <_calloc_r+0x1e>
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	bd70      	pop	{r4, r5, r6, pc}
 800b3ee:	220c      	movs	r2, #12
 800b3f0:	6002      	str	r2, [r0, #0]
 800b3f2:	2600      	movs	r6, #0
 800b3f4:	e7f9      	b.n	800b3ea <_calloc_r+0x12>
 800b3f6:	462a      	mov	r2, r5
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	f7fe f9d1 	bl	80097a0 <memset>
 800b3fe:	e7f4      	b.n	800b3ea <_calloc_r+0x12>

0800b400 <_free_r>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	4605      	mov	r5, r0
 800b404:	2900      	cmp	r1, #0
 800b406:	d041      	beq.n	800b48c <_free_r+0x8c>
 800b408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b40c:	1f0c      	subs	r4, r1, #4
 800b40e:	2b00      	cmp	r3, #0
 800b410:	bfb8      	it	lt
 800b412:	18e4      	addlt	r4, r4, r3
 800b414:	f7ff fa8a 	bl	800a92c <__malloc_lock>
 800b418:	4a1d      	ldr	r2, [pc, #116]	@ (800b490 <_free_r+0x90>)
 800b41a:	6813      	ldr	r3, [r2, #0]
 800b41c:	b933      	cbnz	r3, 800b42c <_free_r+0x2c>
 800b41e:	6063      	str	r3, [r4, #4]
 800b420:	6014      	str	r4, [r2, #0]
 800b422:	4628      	mov	r0, r5
 800b424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b428:	f7ff ba86 	b.w	800a938 <__malloc_unlock>
 800b42c:	42a3      	cmp	r3, r4
 800b42e:	d908      	bls.n	800b442 <_free_r+0x42>
 800b430:	6820      	ldr	r0, [r4, #0]
 800b432:	1821      	adds	r1, r4, r0
 800b434:	428b      	cmp	r3, r1
 800b436:	bf01      	itttt	eq
 800b438:	6819      	ldreq	r1, [r3, #0]
 800b43a:	685b      	ldreq	r3, [r3, #4]
 800b43c:	1809      	addeq	r1, r1, r0
 800b43e:	6021      	streq	r1, [r4, #0]
 800b440:	e7ed      	b.n	800b41e <_free_r+0x1e>
 800b442:	461a      	mov	r2, r3
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	b10b      	cbz	r3, 800b44c <_free_r+0x4c>
 800b448:	42a3      	cmp	r3, r4
 800b44a:	d9fa      	bls.n	800b442 <_free_r+0x42>
 800b44c:	6811      	ldr	r1, [r2, #0]
 800b44e:	1850      	adds	r0, r2, r1
 800b450:	42a0      	cmp	r0, r4
 800b452:	d10b      	bne.n	800b46c <_free_r+0x6c>
 800b454:	6820      	ldr	r0, [r4, #0]
 800b456:	4401      	add	r1, r0
 800b458:	1850      	adds	r0, r2, r1
 800b45a:	4283      	cmp	r3, r0
 800b45c:	6011      	str	r1, [r2, #0]
 800b45e:	d1e0      	bne.n	800b422 <_free_r+0x22>
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	6053      	str	r3, [r2, #4]
 800b466:	4408      	add	r0, r1
 800b468:	6010      	str	r0, [r2, #0]
 800b46a:	e7da      	b.n	800b422 <_free_r+0x22>
 800b46c:	d902      	bls.n	800b474 <_free_r+0x74>
 800b46e:	230c      	movs	r3, #12
 800b470:	602b      	str	r3, [r5, #0]
 800b472:	e7d6      	b.n	800b422 <_free_r+0x22>
 800b474:	6820      	ldr	r0, [r4, #0]
 800b476:	1821      	adds	r1, r4, r0
 800b478:	428b      	cmp	r3, r1
 800b47a:	bf04      	itt	eq
 800b47c:	6819      	ldreq	r1, [r3, #0]
 800b47e:	685b      	ldreq	r3, [r3, #4]
 800b480:	6063      	str	r3, [r4, #4]
 800b482:	bf04      	itt	eq
 800b484:	1809      	addeq	r1, r1, r0
 800b486:	6021      	streq	r1, [r4, #0]
 800b488:	6054      	str	r4, [r2, #4]
 800b48a:	e7ca      	b.n	800b422 <_free_r+0x22>
 800b48c:	bd38      	pop	{r3, r4, r5, pc}
 800b48e:	bf00      	nop
 800b490:	24000520 	.word	0x24000520

0800b494 <__ascii_mbtowc>:
 800b494:	b082      	sub	sp, #8
 800b496:	b901      	cbnz	r1, 800b49a <__ascii_mbtowc+0x6>
 800b498:	a901      	add	r1, sp, #4
 800b49a:	b142      	cbz	r2, 800b4ae <__ascii_mbtowc+0x1a>
 800b49c:	b14b      	cbz	r3, 800b4b2 <__ascii_mbtowc+0x1e>
 800b49e:	7813      	ldrb	r3, [r2, #0]
 800b4a0:	600b      	str	r3, [r1, #0]
 800b4a2:	7812      	ldrb	r2, [r2, #0]
 800b4a4:	1e10      	subs	r0, r2, #0
 800b4a6:	bf18      	it	ne
 800b4a8:	2001      	movne	r0, #1
 800b4aa:	b002      	add	sp, #8
 800b4ac:	4770      	bx	lr
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	e7fb      	b.n	800b4aa <__ascii_mbtowc+0x16>
 800b4b2:	f06f 0001 	mvn.w	r0, #1
 800b4b6:	e7f8      	b.n	800b4aa <__ascii_mbtowc+0x16>

0800b4b8 <fiprintf>:
 800b4b8:	b40e      	push	{r1, r2, r3}
 800b4ba:	b503      	push	{r0, r1, lr}
 800b4bc:	4601      	mov	r1, r0
 800b4be:	ab03      	add	r3, sp, #12
 800b4c0:	4805      	ldr	r0, [pc, #20]	@ (800b4d8 <fiprintf+0x20>)
 800b4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c6:	6800      	ldr	r0, [r0, #0]
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	f7fe ffc1 	bl	800a450 <_vfiprintf_r>
 800b4ce:	b002      	add	sp, #8
 800b4d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4d4:	b003      	add	sp, #12
 800b4d6:	4770      	bx	lr
 800b4d8:	2400002c 	.word	0x2400002c

0800b4dc <__ascii_wctomb>:
 800b4dc:	4603      	mov	r3, r0
 800b4de:	4608      	mov	r0, r1
 800b4e0:	b141      	cbz	r1, 800b4f4 <__ascii_wctomb+0x18>
 800b4e2:	2aff      	cmp	r2, #255	@ 0xff
 800b4e4:	d904      	bls.n	800b4f0 <__ascii_wctomb+0x14>
 800b4e6:	228a      	movs	r2, #138	@ 0x8a
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4ee:	4770      	bx	lr
 800b4f0:	700a      	strb	r2, [r1, #0]
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	4770      	bx	lr

0800b4f6 <abort>:
 800b4f6:	b508      	push	{r3, lr}
 800b4f8:	2006      	movs	r0, #6
 800b4fa:	f000 f82b 	bl	800b554 <raise>
 800b4fe:	2001      	movs	r0, #1
 800b500:	f7f6 f8cc 	bl	800169c <_exit>

0800b504 <_raise_r>:
 800b504:	291f      	cmp	r1, #31
 800b506:	b538      	push	{r3, r4, r5, lr}
 800b508:	4605      	mov	r5, r0
 800b50a:	460c      	mov	r4, r1
 800b50c:	d904      	bls.n	800b518 <_raise_r+0x14>
 800b50e:	2316      	movs	r3, #22
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b51a:	b112      	cbz	r2, 800b522 <_raise_r+0x1e>
 800b51c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b520:	b94b      	cbnz	r3, 800b536 <_raise_r+0x32>
 800b522:	4628      	mov	r0, r5
 800b524:	f000 f830 	bl	800b588 <_getpid_r>
 800b528:	4622      	mov	r2, r4
 800b52a:	4601      	mov	r1, r0
 800b52c:	4628      	mov	r0, r5
 800b52e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b532:	f000 b817 	b.w	800b564 <_kill_r>
 800b536:	2b01      	cmp	r3, #1
 800b538:	d00a      	beq.n	800b550 <_raise_r+0x4c>
 800b53a:	1c59      	adds	r1, r3, #1
 800b53c:	d103      	bne.n	800b546 <_raise_r+0x42>
 800b53e:	2316      	movs	r3, #22
 800b540:	6003      	str	r3, [r0, #0]
 800b542:	2001      	movs	r0, #1
 800b544:	e7e7      	b.n	800b516 <_raise_r+0x12>
 800b546:	2100      	movs	r1, #0
 800b548:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b54c:	4620      	mov	r0, r4
 800b54e:	4798      	blx	r3
 800b550:	2000      	movs	r0, #0
 800b552:	e7e0      	b.n	800b516 <_raise_r+0x12>

0800b554 <raise>:
 800b554:	4b02      	ldr	r3, [pc, #8]	@ (800b560 <raise+0xc>)
 800b556:	4601      	mov	r1, r0
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	f7ff bfd3 	b.w	800b504 <_raise_r>
 800b55e:	bf00      	nop
 800b560:	2400002c 	.word	0x2400002c

0800b564 <_kill_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d07      	ldr	r5, [pc, #28]	@ (800b584 <_kill_r+0x20>)
 800b568:	2300      	movs	r3, #0
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	4611      	mov	r1, r2
 800b570:	602b      	str	r3, [r5, #0]
 800b572:	f7f6 f883 	bl	800167c <_kill>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	d102      	bne.n	800b580 <_kill_r+0x1c>
 800b57a:	682b      	ldr	r3, [r5, #0]
 800b57c:	b103      	cbz	r3, 800b580 <_kill_r+0x1c>
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	bd38      	pop	{r3, r4, r5, pc}
 800b582:	bf00      	nop
 800b584:	24000524 	.word	0x24000524

0800b588 <_getpid_r>:
 800b588:	f7f6 b870 	b.w	800166c <_getpid>

0800b58c <sqrtf>:
 800b58c:	b508      	push	{r3, lr}
 800b58e:	ed2d 8b02 	vpush	{d8}
 800b592:	eeb0 8a40 	vmov.f32	s16, s0
 800b596:	f000 f817 	bl	800b5c8 <__ieee754_sqrtf>
 800b59a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a2:	d60c      	bvs.n	800b5be <sqrtf+0x32>
 800b5a4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b5c4 <sqrtf+0x38>
 800b5a8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b0:	d505      	bpl.n	800b5be <sqrtf+0x32>
 800b5b2:	f7fe f8fd 	bl	80097b0 <__errno>
 800b5b6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b5ba:	2321      	movs	r3, #33	@ 0x21
 800b5bc:	6003      	str	r3, [r0, #0]
 800b5be:	ecbd 8b02 	vpop	{d8}
 800b5c2:	bd08      	pop	{r3, pc}
 800b5c4:	00000000 	.word	0x00000000

0800b5c8 <__ieee754_sqrtf>:
 800b5c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b5cc:	4770      	bx	lr
	...

0800b5d0 <_init>:
 800b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d2:	bf00      	nop
 800b5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5d6:	bc08      	pop	{r3}
 800b5d8:	469e      	mov	lr, r3
 800b5da:	4770      	bx	lr

0800b5dc <_fini>:
 800b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5de:	bf00      	nop
 800b5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e2:	bc08      	pop	{r3}
 800b5e4:	469e      	mov	lr, r3
 800b5e6:	4770      	bx	lr
>>>>>>> 185885c (working on rudder control)
