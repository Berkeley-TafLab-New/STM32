
STM32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc2c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  0800df00  0800df00  0000ef00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e7f0  0800e7f0  0000f7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e7f8  0800e7f8  0000f7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e7fc  0800e7fc  0000f7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  24000000  0800e800  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008a0  240001f8  0800e9f8  000101f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a98  0800e9f8  00010a98  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bee9  00000000  00000000  00010226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035a9  00000000  00000000  0002c10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001640  00000000  00000000  0002f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000118c  00000000  00000000  00030cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035879  00000000  00000000  00031e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f49b  00000000  00000000  000676fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152083  00000000  00000000  00086b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d8c1b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f74  00000000  00000000  001d8c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001dfbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f8 	.word	0x240001f8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dee4 	.word	0x0800dee4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001fc 	.word	0x240001fc
 800030c:	0800dee4 	.word	0x0800dee4

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <AS5600_read_angle>:
 */

#include "AS5600.h"
#include "stdint.h"

HAL_StatusTypeDef AS5600_read_angle(I2C_HandleTypeDef *hi2c, float *angle){
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af04      	add	r7, sp, #16
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    
    HAL_StatusTypeDef ret ;
    uint8_t angle_buff[2]; // hold the 2 bits from the Raw Angle 
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG, I2C_MEMADD_SIZE_8BIT,angle_buff,2,HAL_MAX_DELAY);//HAL_MAX_DELAY is blockling 
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	2302      	movs	r3, #2
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2301      	movs	r3, #1
 8000728:	220c      	movs	r2, #12
 800072a:	216c      	movs	r1, #108	@ 0x6c
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f003 fdc9 	bl	80042c4 <HAL_I2C_Mem_Read>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK){
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <AS5600_read_angle+0x38>
    	handle_error(ret);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f87e 	bl	8000840 <handle_error>
    }
    uint16_t raw_angle = (((angle_buff[0]<<8)|angle_buff[1])&0x0FFF);
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	b21b      	sxth	r3, r3
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	7a7b      	ldrb	r3, [r7, #9]
 800074e:	b21b      	sxth	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b21b      	sxth	r3, r3
 8000754:	b29b      	uxth	r3, r3
 8000756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800075a:	81bb      	strh	r3, [r7, #12]

    *angle = 360.0f*((float)raw_angle/4096.0f);
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000766:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000788 <AS5600_read_angle+0x7c>
 800076a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800078c <AS5600_read_angle+0x80>
 8000772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	45800000 	.word	0x45800000
 800078c:	43b40000 	.word	0x43b40000

08000790 <AS5600_config_ZPOS>:
    }
}



HAL_StatusTypeDef AS5600_config_ZPOS(I2C_HandleTypeDef *hi2c) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af04      	add	r7, sp, #16
 8000796:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t angle_buff;

    // Read current raw angle
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG,
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	461a      	mov	r2, r3
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	2302      	movs	r3, #2
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	220c      	movs	r2, #12
 80007ac:	216c      	movs	r1, #108	@ 0x6c
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f003 fd88 	bl	80042c4 <HAL_I2C_Mem_Read>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73bb      	strb	r3, [r7, #14]
                          I2C_MEMADD_SIZE_8BIT, angle_buff, 2, HAL_MAX_DELAY);
    if (ret != HAL_OK) {
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <AS5600_config_ZPOS+0x3a>
        handle_error(ret);
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f83d 	bl	8000840 <handle_error>
        return ret;
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	e036      	b.n	8000838 <AS5600_config_ZPOS+0xa8>
    }

    // Extract 12-bit raw angle
    uint16_t raw_angle = ((angle_buff << 8) | angle_buff) & 0x0FFF;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	461a      	mov	r2, r3
 80007d0:	0212      	lsls	r2, r2, #8
 80007d2:	4413      	add	r3, r2
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007da:	81bb      	strh	r3, [r7, #12]

    // Split into ZPOS register values
    uint8_t zpos_data = {
        (uint8_t)((raw_angle >> 8) & 0x0F),  // High byte (4 bits)
 80007dc:	89bb      	ldrh	r3, [r7, #12]
 80007de:	0a1b      	lsrs	r3, r3, #8
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	b2db      	uxtb	r3, r3
    uint8_t zpos_data = {
 80007ea:	72fb      	strb	r3, [r7, #11]
        (uint8_t)(raw_angle & 0xFF)          // Low byte (8 bits)
    };

    // Write to ZPOS registers
    ret = HAL_I2C_Mem_Write(hi2c, (AS5600_ADRESS<<1), AS5600_ZPOS_HI_REG,
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295
 80007f0:	9302      	str	r3, [sp, #8]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	f107 030b 	add.w	r3, r7, #11
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2301      	movs	r3, #1
 80007fe:	2201      	movs	r2, #1
 8000800:	216c      	movs	r1, #108	@ 0x6c
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f003 fc4a 	bl	800409c <HAL_I2C_Mem_Write>
 8000808:	4603      	mov	r3, r0
 800080a:	73bb      	strb	r3, [r7, #14]
                           I2C_MEMADD_SIZE_8BIT, &zpos_data, 1, HAL_MAX_DELAY);
    if (ret != HAL_OK) return ret;
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <AS5600_config_ZPOS+0x86>
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	e010      	b.n	8000838 <AS5600_config_ZPOS+0xa8>

    ret = HAL_I2C_Mem_Write(hi2c, (AS5600_ADRESS<<1), AS5600_ZPOS_LO_REG,
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	9302      	str	r3, [sp, #8]
 800081c:	2301      	movs	r3, #1
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	f107 030b 	add.w	r3, r7, #11
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2202      	movs	r2, #2
 800082a:	216c      	movs	r1, #108	@ 0x6c
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f003 fc35 	bl	800409c <HAL_I2C_Mem_Write>
 8000832:	4603      	mov	r3, r0
 8000834:	73bb      	strb	r3, [r7, #14]
                           I2C_MEMADD_SIZE_8BIT, &zpos_data, 1, HAL_MAX_DELAY);
    return ret;
 8000836:	7bbb      	ldrb	r3, [r7, #14]

    }
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <handle_error>:





void handle_error(HAL_StatusTypeDef status) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d004      	beq.n	800085a <handle_error+0x1a>
        // Implement error handling logic (e.g., log error or reset I²C bus)
        printf("I2C Error: %d\n", status);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4619      	mov	r1, r3
 8000854:	4803      	ldr	r0, [pc, #12]	@ (8000864 <handle_error+0x24>)
 8000856:	f00b f8a7 	bl	800b9a8 <iprintf>
    }
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	0800df44 	.word	0x0800df44

08000868 <__io_putchar>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000870:	1d39      	adds	r1, r7, #4
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	2201      	movs	r2, #1
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <__io_putchar+0x20>)
 800087a:	f007 fea1 	bl	80085c0 <HAL_UART_Transmit>
     //HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1); //enable to get debug over STLINK

    return ch;
 800087e:	687b      	ldr	r3, [r7, #4]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000348 	.word	0x24000348

0800088c <System_Init>:
//uart interrupt ring buffer init
void System_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  // Initialize ring buffer
  ring_buffer_init(&uart_ring_buffer);
 8000892:	481e      	ldr	r0, [pc, #120]	@ (800090c <System_Init+0x80>)
 8000894:	f001 f8bc 	bl	8001a10 <ring_buffer_init>
  ring_buffer_init(&uart2_ring_buffer);
 8000898:	481d      	ldr	r0, [pc, #116]	@ (8000910 <System_Init+0x84>)
 800089a:	f001 f8b9 	bl	8001a10 <ring_buffer_init>

  // Start UART reception in interrupt mode
  HAL_UART_Receive_IT(&huart3, &rx_data_s, 1); // initialising Stlink interrupts
 800089e:	2201      	movs	r2, #1
 80008a0:	491c      	ldr	r1, [pc, #112]	@ (8000914 <System_Init+0x88>)
 80008a2:	481d      	ldr	r0, [pc, #116]	@ (8000918 <System_Init+0x8c>)
 80008a4:	f007 ff1a 	bl	80086dc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data_uart2, 1); // initialising XBee interrupts
 80008a8:	2201      	movs	r2, #1
 80008aa:	491c      	ldr	r1, [pc, #112]	@ (800091c <System_Init+0x90>)
 80008ac:	481c      	ldr	r0, [pc, #112]	@ (8000920 <System_Init+0x94>)
 80008ae:	f007 ff15 	bl	80086dc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &ucRxData, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	491b      	ldr	r1, [pc, #108]	@ (8000924 <System_Init+0x98>)
 80008b6:	481c      	ldr	r0, [pc, #112]	@ (8000928 <System_Init+0x9c>)
 80008b8:	f007 ff10 	bl	80086dc <HAL_UART_Receive_IT>

  //Start the rudder
  // Initialize rudder control
  rudder_init(&htim1, TIM_CHANNEL_2);
 80008bc:	2104      	movs	r1, #4
 80008be:	481b      	ldr	r0, [pc, #108]	@ (800092c <System_Init+0xa0>)
 80008c0:	f001 f914 	bl	8001aec <rudder_init>

  // Set initial rudder position
  rudder_target_angle = rudder_straight;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <System_Init+0xa4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000934 <System_Init+0xa8>)
 80008ca:	6013      	str	r3, [r2, #0]
  rudder_current_angle = rudder_straight;
 80008cc:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <System_Init+0xa4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a19      	ldr	r2, [pc, #100]	@ (8000938 <System_Init+0xac>)
 80008d2:	6013      	str	r3, [r2, #0]
  uint32_t initial_pulse = 500 + (rudder_current_angle * (2000.0f / 180.0f));
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <System_Init+0xac>)
 80008d6:	edd3 7a00 	vldr	s15, [r3]
 80008da:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800093c <System_Init+0xb0>
 80008de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008e2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000940 <System_Init+0xb4>
 80008e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ee:	ee17 3a90 	vmov	r3, s15
 80008f2:	607b      	str	r3, [r7, #4]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, initial_pulse);
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <System_Init+0xa0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	639a      	str	r2, [r3, #56]	@ 0x38

  // Start PWM for rudder servo
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008fc:	2104      	movs	r1, #4
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <System_Init+0xa0>)
 8000900:	f006 ff0e 	bl	8007720 <HAL_TIM_PWM_Start>

 }
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	24000474 	.word	0x24000474
 8000910:	24000578 	.word	0x24000578
 8000914:	2400067d 	.word	0x2400067d
 8000918:	240003dc 	.word	0x240003dc
 800091c:	2400067c 	.word	0x2400067c
 8000920:	24000348 	.word	0x24000348
 8000924:	2400067e 	.word	0x2400067e
 8000928:	240002b4 	.word	0x240002b4
 800092c:	24000268 	.word	0x24000268
 8000930:	24000000 	.word	0x24000000
 8000934:	2400000c 	.word	0x2400000c
 8000938:	24000008 	.word	0x24000008
 800093c:	4131c71c 	.word	0x4131c71c
 8000940:	43fa0000 	.word	0x43fa0000

08000944 <HAL_UART_RxCpltCallback>:
 

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b092      	sub	sp, #72	@ 0x48
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]


  if(huart->Instance==USART1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4aa4      	ldr	r2, [pc, #656]	@ (8000be4 <HAL_UART_RxCpltCallback+0x2a0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d109      	bne.n	800096a <HAL_UART_RxCpltCallback+0x26>
	   {
	       WitSerialDataIn(ucRxData);
 8000956:	4ba4      	ldr	r3, [pc, #656]	@ (8000be8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f001 ff02 	bl	8002764 <WitSerialDataIn>
	       UART_Start_Receive_IT(huart, &ucRxData, 1);
 8000960:	2201      	movs	r2, #1
 8000962:	49a1      	ldr	r1, [pc, #644]	@ (8000be8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f009 fb21 	bl	8009fac <UART_Start_Receive_IT>
	   }


  if (huart->Instance == USART3) { // Ensure this is for the correct UART instance
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a9f      	ldr	r2, [pc, #636]	@ (8000bec <HAL_UART_RxCpltCallback+0x2a8>)
 8000970:	4293      	cmp	r3, r2
 8000972:	f040 80e7 	bne.w	8000b44 <HAL_UART_RxCpltCallback+0x200>
      // Add received byte to the ring buffer
      ring_buffer_put(&uart_ring_buffer, rx_data_s);
 8000976:	4b9e      	ldr	r3, [pc, #632]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	489d      	ldr	r0, [pc, #628]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x2b0>)
 800097e:	f001 f859 	bl	8001a34 <ring_buffer_put>


      //adding manual rudder controls

      if (rx_data_uart2 == '[') {
 8000982:	4b9d      	ldr	r3, [pc, #628]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b5b      	cmp	r3, #91	@ 0x5b
 8000988:	d13e      	bne.n	8000a08 <HAL_UART_RxCpltCallback+0xc4>
              // Move rudder left
              rudder_target_angle -= 5.0f;
 800098a:	4b9c      	ldr	r3, [pc, #624]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 800098c:	edd3 7a00 	vldr	s15, [r3]
 8000990:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000998:	4b98      	ldr	r3, [pc, #608]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 800099a:	edc3 7a00 	vstr	s15, [r3]
              if (rudder_target_angle < (rudder_straight - rudder_range))
 800099e:	4b98      	ldr	r3, [pc, #608]	@ (8000c00 <HAL_UART_RxCpltCallback+0x2bc>)
 80009a0:	ed93 7a00 	vldr	s14, [r3]
 80009a4:	4b97      	ldr	r3, [pc, #604]	@ (8000c04 <HAL_UART_RxCpltCallback+0x2c0>)
 80009a6:	edd3 7a00 	vldr	s15, [r3]
 80009aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009ae:	4b93      	ldr	r3, [pc, #588]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 80009b0:	edd3 7a00 	vldr	s15, [r3]
 80009b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009bc:	dd0a      	ble.n	80009d4 <HAL_UART_RxCpltCallback+0x90>
                  rudder_target_angle = rudder_straight - rudder_range;
 80009be:	4b90      	ldr	r3, [pc, #576]	@ (8000c00 <HAL_UART_RxCpltCallback+0x2bc>)
 80009c0:	ed93 7a00 	vldr	s14, [r3]
 80009c4:	4b8f      	ldr	r3, [pc, #572]	@ (8000c04 <HAL_UART_RxCpltCallback+0x2c0>)
 80009c6:	edd3 7a00 	vldr	s15, [r3]
 80009ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ce:	4b8b      	ldr	r3, [pc, #556]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 80009d0:	edc3 7a00 	vstr	s15, [r3]

              char response[40];
              sprintf(response, "Rudder LEFT: %.1f degrees\r\n", rudder_target_angle);
 80009d4:	4b89      	ldr	r3, [pc, #548]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 80009d6:	edd3 7a00 	vldr	s15, [r3]
 80009da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009de:	f107 000c 	add.w	r0, r7, #12
 80009e2:	ec53 2b17 	vmov	r2, r3, d7
 80009e6:	4988      	ldr	r1, [pc, #544]	@ (8000c08 <HAL_UART_RxCpltCallback+0x2c4>)
 80009e8:	f00b f856 	bl	800ba98 <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), 100);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fced 	bl	80003d0 <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	f107 010c 	add.w	r1, r7, #12
 80009fe:	2364      	movs	r3, #100	@ 0x64
 8000a00:	4882      	ldr	r0, [pc, #520]	@ (8000c0c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a02:	f007 fddd 	bl	80085c0 <HAL_UART_Transmit>
 8000a06:	e041      	b.n	8000a8c <HAL_UART_RxCpltCallback+0x148>

          }
          else if (rx_data_uart2 == ']') {
 8000a08:	4b7b      	ldr	r3, [pc, #492]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b5d      	cmp	r3, #93	@ 0x5d
 8000a0e:	d13d      	bne.n	8000a8c <HAL_UART_RxCpltCallback+0x148>
              // Move rudder right
              rudder_target_angle += 5.0f;
 8000a10:	4b7a      	ldr	r3, [pc, #488]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000a1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a1e:	4b77      	ldr	r3, [pc, #476]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 8000a20:	edc3 7a00 	vstr	s15, [r3]
              if (rudder_target_angle > (rudder_straight + rudder_range))
 8000a24:	4b76      	ldr	r3, [pc, #472]	@ (8000c00 <HAL_UART_RxCpltCallback+0x2bc>)
 8000a26:	ed93 7a00 	vldr	s14, [r3]
 8000a2a:	4b76      	ldr	r3, [pc, #472]	@ (8000c04 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a2c:	edd3 7a00 	vldr	s15, [r3]
 8000a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a34:	4b71      	ldr	r3, [pc, #452]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 8000a36:	edd3 7a00 	vldr	s15, [r3]
 8000a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	d50a      	bpl.n	8000a5a <HAL_UART_RxCpltCallback+0x116>
                  rudder_target_angle = rudder_straight + rudder_range;
 8000a44:	4b6e      	ldr	r3, [pc, #440]	@ (8000c00 <HAL_UART_RxCpltCallback+0x2bc>)
 8000a46:	ed93 7a00 	vldr	s14, [r3]
 8000a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8000c04 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a4c:	edd3 7a00 	vldr	s15, [r3]
 8000a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a54:	4b69      	ldr	r3, [pc, #420]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 8000a56:	edc3 7a00 	vstr	s15, [r3]

              char response[40];
              sprintf(response, "Rudder RIGHT: %.1f degrees\r\n", rudder_target_angle);
 8000a5a:	4b68      	ldr	r3, [pc, #416]	@ (8000bfc <HAL_UART_RxCpltCallback+0x2b8>)
 8000a5c:	edd3 7a00 	vldr	s15, [r3]
 8000a60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a64:	f107 000c 	add.w	r0, r7, #12
 8000a68:	ec53 2b17 	vmov	r2, r3, d7
 8000a6c:	4968      	ldr	r1, [pc, #416]	@ (8000c10 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a6e:	f00b f813 	bl	800ba98 <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), 100);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fcaa 	bl	80003d0 <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f107 010c 	add.w	r1, r7, #12
 8000a84:	2364      	movs	r3, #100	@ 0x64
 8000a86:	4861      	ldr	r0, [pc, #388]	@ (8000c0c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a88:	f007 fd9a 	bl	80085c0 <HAL_UART_Transmit>
          }


      // Check if we received a carriage return '\r' (end of command)
      if (rx_data_s == '\r') {
 8000a8c:	4b58      	ldr	r3, [pc, #352]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b0d      	cmp	r3, #13
 8000a92:	d152      	bne.n	8000b3a <HAL_UART_RxCpltCallback+0x1f6>
          uint8_t data;
          uint16_t index = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
          // Extract the command from the ring buffer
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000a9a:	e009      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0x16c>
              command_buffer[index++] = (char)data;
 8000a9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8000aac:	4b59      	ldr	r3, [pc, #356]	@ (8000c14 <HAL_UART_RxCpltCallback+0x2d0>)
 8000aae:	5499      	strb	r1, [r3, r2]
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000ab0:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	484f      	ldr	r0, [pc, #316]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ab8:	f000 ffe9 	bl	8001a8e <ring_buffer_get>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <HAL_UART_RxCpltCallback+0x18e>
 8000ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ac6:	2b0d      	cmp	r3, #13
 8000ac8:	d003      	beq.n	8000ad2 <HAL_UART_RxCpltCallback+0x18e>
 8000aca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ace:	2b3e      	cmp	r3, #62	@ 0x3e
 8000ad0:	d9e4      	bls.n	8000a9c <HAL_UART_RxCpltCallback+0x158>
          }
          command_buffer[index] = '\0'; // Null-terminate the string
 8000ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ad6:	4a4f      	ldr	r2, [pc, #316]	@ (8000c14 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	54d1      	strb	r1, [r2, r3]
          // Process the command
          const char *response;
          if (strcmp(command_buffer, "hello") == 0) {
 8000adc:	494e      	ldr	r1, [pc, #312]	@ (8000c18 <HAL_UART_RxCpltCallback+0x2d4>)
 8000ade:	484d      	ldr	r0, [pc, #308]	@ (8000c14 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ae0:	f7ff fc16 	bl	8000310 <strcmp>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <HAL_UART_RxCpltCallback+0x1ac>
              response = "Hello to you too!\n";
 8000aea:	4b4c      	ldr	r3, [pc, #304]	@ (8000c1c <HAL_UART_RxCpltCallback+0x2d8>)
 8000aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8000aee:	e014      	b.n	8000b1a <HAL_UART_RxCpltCallback+0x1d6>
          } else if (strcmp(command_buffer, "setzerouart") == 0) {
 8000af0:	494b      	ldr	r1, [pc, #300]	@ (8000c20 <HAL_UART_RxCpltCallback+0x2dc>)
 8000af2:	4848      	ldr	r0, [pc, #288]	@ (8000c14 <HAL_UART_RxCpltCallback+0x2d0>)
 8000af4:	f7ff fc0c 	bl	8000310 <strcmp>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10b      	bne.n	8000b16 <HAL_UART_RxCpltCallback+0x1d2>
              if (AS5600_config_ZPOS(&hi2c1) == HAL_OK) {
 8000afe:	4849      	ldr	r0, [pc, #292]	@ (8000c24 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b00:	f7ff fe46 	bl	8000790 <AS5600_config_ZPOS>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <HAL_UART_RxCpltCallback+0x1cc>
                  response = "ZPOS set successfully.\n";
 8000b0a:	4b47      	ldr	r3, [pc, #284]	@ (8000c28 <HAL_UART_RxCpltCallback+0x2e4>)
 8000b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b0e:	e004      	b.n	8000b1a <HAL_UART_RxCpltCallback+0x1d6>
              } else {
                  response = "Failed to set ZPOS.\n";
 8000b10:	4b46      	ldr	r3, [pc, #280]	@ (8000c2c <HAL_UART_RxCpltCallback+0x2e8>)
 8000b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b14:	e001      	b.n	8000b1a <HAL_UART_RxCpltCallback+0x1d6>
              }
          } else {
              response = "Uh oh, something didn't work...\n";
 8000b16:	4b46      	ldr	r3, [pc, #280]	@ (8000c30 <HAL_UART_RxCpltCallback+0x2ec>)
 8000b18:	643b      	str	r3, [r7, #64]	@ 0x40
          }
          // Transmit the response
          HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000b1a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000b1c:	f7ff fc58 	bl	80003d0 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000b2a:	4842      	ldr	r0, [pc, #264]	@ (8000c34 <HAL_UART_RxCpltCallback+0x2f0>)
 8000b2c:	f007 fd48 	bl	80085c0 <HAL_UART_Transmit>
          // Clear the command buffer for reuse
          memset(command_buffer, 0, COMMAND_MAX_LENGTH);
 8000b30:	2240      	movs	r2, #64	@ 0x40
 8000b32:	2100      	movs	r1, #0
 8000b34:	4837      	ldr	r0, [pc, #220]	@ (8000c14 <HAL_UART_RxCpltCallback+0x2d0>)
 8000b36:	f00b f8a9 	bl	800bc8c <memset>
      }
      // Re-enable UART interrupt for next byte reception
      HAL_UART_Receive_IT(&huart3, &rx_data_s, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	492c      	ldr	r1, [pc, #176]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000b3e:	483d      	ldr	r0, [pc, #244]	@ (8000c34 <HAL_UART_RxCpltCallback+0x2f0>)
 8000b40:	f007 fdcc 	bl	80086dc <HAL_UART_Receive_IT>
  }
    
  if (huart->Instance == USART2) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a3b      	ldr	r2, [pc, #236]	@ (8000c38 <HAL_UART_RxCpltCallback+0x2f4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	f040 809e 	bne.w	8000c8c <HAL_UART_RxCpltCallback+0x348>
    ring_buffer_put(&uart2_ring_buffer, rx_data_uart2);
 8000b50:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	4839      	ldr	r0, [pc, #228]	@ (8000c3c <HAL_UART_RxCpltCallback+0x2f8>)
 8000b58:	f000 ff6c 	bl	8001a34 <ring_buffer_put>
    printf("Recieved on Xbee!");
 8000b5c:	4838      	ldr	r0, [pc, #224]	@ (8000c40 <HAL_UART_RxCpltCallback+0x2fc>)
 8000b5e:	f00a ff23 	bl	800b9a8 <iprintf>
    if (rx_data_uart2 == '\r') {
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b0d      	cmp	r3, #13
 8000b68:	f040 808b 	bne.w	8000c82 <HAL_UART_RxCpltCallback+0x33e>
        uint8_t data;
        uint16_t index = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        while (ring_buffer_get(&uart2_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000b70:	e007      	b.n	8000b82 <HAL_UART_RxCpltCallback+0x23e>
            command_buffer_xbee[index++] = (char)data;
 8000b72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000b74:	1c5a      	adds	r2, r3, #1
 8000b76:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8000b78:	461a      	mov	r2, r3
 8000b7a:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8000b7e:	4b31      	ldr	r3, [pc, #196]	@ (8000c44 <HAL_UART_RxCpltCallback+0x300>)
 8000b80:	5499      	strb	r1, [r3, r2]
        while (ring_buffer_get(&uart2_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000b82:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8000b86:	4619      	mov	r1, r3
 8000b88:	482c      	ldr	r0, [pc, #176]	@ (8000c3c <HAL_UART_RxCpltCallback+0x2f8>)
 8000b8a:	f000 ff80 	bl	8001a8e <ring_buffer_get>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <HAL_UART_RxCpltCallback+0x25e>
 8000b94:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000b98:	2b0d      	cmp	r3, #13
 8000b9a:	d002      	beq.n	8000ba2 <HAL_UART_RxCpltCallback+0x25e>
 8000b9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000b9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000ba0:	d9e7      	bls.n	8000b72 <HAL_UART_RxCpltCallback+0x22e>
        }
        command_buffer_xbee[index] = '\0';
 8000ba2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000ba4:	4a27      	ldr	r2, [pc, #156]	@ (8000c44 <HAL_UART_RxCpltCallback+0x300>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	54d1      	strb	r1, [r2, r3]

        const char *response;
        if (strcmp(command_buffer_xbee, "hello") == 0) {
 8000baa:	491b      	ldr	r1, [pc, #108]	@ (8000c18 <HAL_UART_RxCpltCallback+0x2d4>)
 8000bac:	4825      	ldr	r0, [pc, #148]	@ (8000c44 <HAL_UART_RxCpltCallback+0x300>)
 8000bae:	f7ff fbaf 	bl	8000310 <strcmp>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <HAL_UART_RxCpltCallback+0x27a>
            response = "Hello to you Xbee!\n";
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <HAL_UART_RxCpltCallback+0x304>)
 8000bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000bbc:	e04e      	b.n	8000c5c <HAL_UART_RxCpltCallback+0x318>
        } else if (strcmp(command_buffer_xbee, "setzero") == 0) { // make it a switch case
 8000bbe:	4923      	ldr	r1, [pc, #140]	@ (8000c4c <HAL_UART_RxCpltCallback+0x308>)
 8000bc0:	4820      	ldr	r0, [pc, #128]	@ (8000c44 <HAL_UART_RxCpltCallback+0x300>)
 8000bc2:	f7ff fba5 	bl	8000310 <strcmp>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d145      	bne.n	8000c58 <HAL_UART_RxCpltCallback+0x314>
            if (AS5600_config_ZPOS(&hi2c1) == HAL_OK) {
 8000bcc:	4815      	ldr	r0, [pc, #84]	@ (8000c24 <HAL_UART_RxCpltCallback+0x2e0>)
 8000bce:	f7ff fddf 	bl	8000790 <AS5600_config_ZPOS>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <HAL_UART_RxCpltCallback+0x29a>
                response = "ZPOS set successfully via xbee.\n";
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <HAL_UART_RxCpltCallback+0x30c>)
 8000bda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000bdc:	e03e      	b.n	8000c5c <HAL_UART_RxCpltCallback+0x318>
            } else {
                response = "Failed to set ZPOS via Xbee.\n";
 8000bde:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <HAL_UART_RxCpltCallback+0x310>)
 8000be0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000be2:	e03b      	b.n	8000c5c <HAL_UART_RxCpltCallback+0x318>
 8000be4:	40011000 	.word	0x40011000
 8000be8:	2400067e 	.word	0x2400067e
 8000bec:	40004800 	.word	0x40004800
 8000bf0:	2400067d 	.word	0x2400067d
 8000bf4:	24000474 	.word	0x24000474
 8000bf8:	2400067c 	.word	0x2400067c
 8000bfc:	2400000c 	.word	0x2400000c
 8000c00:	24000000 	.word	0x24000000
 8000c04:	24000004 	.word	0x24000004
 8000c08:	0800df54 	.word	0x0800df54
 8000c0c:	24000348 	.word	0x24000348
 8000c10:	0800df70 	.word	0x0800df70
 8000c14:	24000680 	.word	0x24000680
 8000c18:	0800df90 	.word	0x0800df90
 8000c1c:	0800df98 	.word	0x0800df98
 8000c20:	0800dfac 	.word	0x0800dfac
 8000c24:	24000214 	.word	0x24000214
 8000c28:	0800dfb8 	.word	0x0800dfb8
 8000c2c:	0800dfd0 	.word	0x0800dfd0
 8000c30:	0800dfe8 	.word	0x0800dfe8
 8000c34:	240003dc 	.word	0x240003dc
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	24000578 	.word	0x24000578
 8000c40:	0800e00c 	.word	0x0800e00c
 8000c44:	240006c0 	.word	0x240006c0
 8000c48:	0800e020 	.word	0x0800e020
 8000c4c:	0800e034 	.word	0x0800e034
 8000c50:	0800e03c 	.word	0x0800e03c
 8000c54:	0800e060 	.word	0x0800e060
            }
        } else {
            response = "Unrecognized command from XBee\n";
 8000c58:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_UART_RxCpltCallback+0x350>)
 8000c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000c5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c5e:	f7ff fbb7 	bl	80003d0 <strlen>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000c6c:	480a      	ldr	r0, [pc, #40]	@ (8000c98 <HAL_UART_RxCpltCallback+0x354>)
 8000c6e:	f007 fca7 	bl	80085c0 <HAL_UART_Transmit>
        printf(response);
 8000c72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c74:	f00a fe98 	bl	800b9a8 <iprintf>
        memset(command_buffer_xbee, 0, COMMAND_MAX_LENGTH);
 8000c78:	2240      	movs	r2, #64	@ 0x40
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <HAL_UART_RxCpltCallback+0x358>)
 8000c7e:	f00b f805 	bl	800bc8c <memset>
    }


    //HAL_UART_Receive_IT(&huart2, &rx_data_uart2, 1); // Restart interrupt
    UART_Start_Receive_IT(huart, &rx_data_uart2, 1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	4906      	ldr	r1, [pc, #24]	@ (8000ca0 <HAL_UART_RxCpltCallback+0x35c>)
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f009 f990 	bl	8009fac <UART_Start_Receive_IT>

  }


 }
 8000c8c:	bf00      	nop
 8000c8e:	3748      	adds	r7, #72	@ 0x48
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	0800e080 	.word	0x0800e080
 8000c98:	24000348 	.word	0x24000348
 8000c9c:	240006c0 	.word	0x240006c0
 8000ca0:	2400067c 	.word	0x2400067c

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b0ad      	sub	sp, #180	@ 0xb4
 8000ca8:	af06      	add	r7, sp, #24
  float fAcc[3], fGyro[3], fAngle[3], fYaw;
  int i;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000caa:	f000 fe7f 	bl	80019ac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cae:	f001 fff5 	bl	8002c9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb2:	f000 fa9f 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 fcbf 	bl	8001638 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cba:	f000 fb39 	bl	8001330 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000cbe:	f000 fbd7 	bl	8001470 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cc2:	f000 fc21 	bl	8001508 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000cc6:	f000 fc6b 	bl	80015a0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000cca:	f000 faf1 	bl	80012b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  WitInit(WIT_PROTOCOL_NORMAL, 0x50);
 8000cce:	2150      	movs	r1, #80	@ 0x50
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f001 ff95 	bl	8002c00 <WitInit>
  WitSerialWriteRegister(SensorUartSend);
 8000cd6:	4828      	ldr	r0, [pc, #160]	@ (8000d78 <main+0xd4>)
 8000cd8:	f001 fc88 	bl	80025ec <WitSerialWriteRegister>
  WitRegisterCallBack(CopeSensorData);
 8000cdc:	4827      	ldr	r0, [pc, #156]	@ (8000d7c <main+0xd8>)
 8000cde:	f001 fe6f 	bl	80029c0 <WitRegisterCallBack>

  System_Init();
 8000ce2:	f7ff fdd3 	bl	800088c <System_Init>
  AutoScanSensor();
 8000ce6:	f000 fe0b 	bl	8001900 <AutoScanSensor>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cea:	2100      	movs	r1, #0
 8000cec:	4824      	ldr	r0, [pc, #144]	@ (8000d80 <main+0xdc>)
 8000cee:	f006 fd17 	bl	8007720 <HAL_TIM_PWM_Start>

  float angle;
  char str[] = "System Booted";
 8000cf2:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <main+0xe0>)
 8000cf4:	f107 0414 	add.w	r4, r7, #20
 8000cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfa:	c407      	stmia	r4!, {r0, r1, r2}
 8000cfc:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 2000);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fb64 	bl	80003d0 <strlen>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	f107 0114 	add.w	r1, r7, #20
 8000d10:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d14:	481c      	ldr	r0, [pc, #112]	@ (8000d88 <main+0xe4>)
 8000d16:	f007 fc53 	bl	80085c0 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000d1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d1e:	f002 f84f 	bl	8002dc0 <HAL_Delay>
  ServoController sail_servo;
  sail_servo.htim= &htim1;
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <main+0xdc>)
 8000d24:	60fb      	str	r3, [r7, #12]
  sail_servo.channel = TIM_CHANNEL_1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef i2c_status = AS5600_read_angle(&hi2c1, &angle);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4816      	ldr	r0, [pc, #88]	@ (8000d8c <main+0xe8>)
 8000d32:	f7ff fceb 	bl	800070c <AS5600_read_angle>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	  if (i2c_status== HAL_OK){
		 // printf("the angle is %f \n", angle);
	  }
	  
	  if (i2c_status != HAL_OK) {
 8000d3c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <main+0xa8>
	      printf("Error reading angle from AS5600\n");
 8000d44:	4812      	ldr	r0, [pc, #72]	@ (8000d90 <main+0xec>)
 8000d46:	f00a fe9f 	bl	800ba88 <puts>
	      continue; // Skip to the next iteration
 8000d4a:	e249      	b.n	80011e0 <main+0x53c>
	  }
    
	  copy_wind_pos(&sail_servo, angle);
 8000d4c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	eeb0 0a67 	vmov.f32	s0, s15
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 ffee 	bl	8001d38 <copy_wind_pos>
	  rudder_move_to();
 8000d5c:	f000 fedc 	bl	8001b18 <rudder_move_to>

    if(s_cDataUpdate)
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <main+0xf0>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0e0      	beq.n	8000d2a <main+0x86>
    		{
    			printf("3");
 8000d68:	2033      	movs	r0, #51	@ 0x33
 8000d6a:	f00a fe2f 	bl	800b9cc <putchar>
            // Assumes AX, AY, AZ are sequential registers starting at AX
            // Assumes GX, GY, GZ are sequential registers starting at GX
            // Assumes Roll, Pitch, Yaw are sequential registers starting at Roll
    			for(i = 0; i < 3; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d74:	e063      	b.n	8000e3e <main+0x19a>
 8000d76:	bf00      	nop
 8000d78:	080017a5 	.word	0x080017a5
 8000d7c:	080017cd 	.word	0x080017cd
 8000d80:	24000268 	.word	0x24000268
 8000d84:	0800e1a4 	.word	0x0800e1a4
 8000d88:	240003dc 	.word	0x240003dc
 8000d8c:	24000214 	.word	0x24000214
 8000d90:	0800e0a0 	.word	0x0800e0a0
 8000d94:	24000470 	.word	0x24000470
    			{
    				fAcc[i] = sReg[AX+i] / 32768.0f * 16.0f;
 8000d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d9c:	3334      	adds	r3, #52	@ 0x34
 8000d9e:	4adc      	ldr	r2, [pc, #880]	@ (8001110 <main+0x46c>)
 8000da0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dac:	eddf 6ad9 	vldr	s13, [pc, #868]	@ 8001114 <main+0x470>
 8000db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db4:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	3398      	adds	r3, #152	@ 0x98
 8000dc4:	443b      	add	r3, r7
 8000dc6:	3b58      	subs	r3, #88	@ 0x58
 8000dc8:	edc3 7a00 	vstr	s15, [r3]
    				fGyro[i] = sReg[GX+i] / 32768.0f * 2000.0f;
 8000dcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dd0:	3337      	adds	r3, #55	@ 0x37
 8000dd2:	4acf      	ldr	r2, [pc, #828]	@ (8001110 <main+0x46c>)
 8000dd4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de0:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8001114 <main+0x470>
 8000de4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de8:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 8001118 <main+0x474>
 8000dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	3398      	adds	r3, #152	@ 0x98
 8000df8:	443b      	add	r3, r7
 8000dfa:	3b64      	subs	r3, #100	@ 0x64
 8000dfc:	edc3 7a00 	vstr	s15, [r3]
    				fAngle[i] = sReg[Roll+i] / 32768.0f * 180.0f;
 8000e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e04:	333d      	adds	r3, #61	@ 0x3d
 8000e06:	4ac2      	ldr	r2, [pc, #776]	@ (8001110 <main+0x46c>)
 8000e08:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e14:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001114 <main+0x470>
 8000e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e1c:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 800111c <main+0x478>
 8000e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	3398      	adds	r3, #152	@ 0x98
 8000e2c:	443b      	add	r3, r7
 8000e2e:	3b70      	subs	r3, #112	@ 0x70
 8000e30:	edc3 7a00 	vstr	s15, [r3]
    			for(i = 0; i < 3; i++)
 8000e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e38:	3301      	adds	r3, #1
 8000e3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	dda8      	ble.n	8000d98 <main+0xf4>
				// Use int32_t for intermediate signed 32-bit values
				// Use uint16_t cast for low words when combining to avoid sign extension issues
				// Use float for final calculated values

				// Longitude & Latitude Calculation
				int32_t iLon = ((int32_t)(short)sReg[LonH] << 16) | (uint16_t)sReg[LonL];
 8000e46:	4bb2      	ldr	r3, [pc, #712]	@ (8001110 <main+0x46c>)
 8000e48:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 8000e4c:	041b      	lsls	r3, r3, #16
 8000e4e:	4ab0      	ldr	r2, [pc, #704]	@ (8001110 <main+0x46c>)
 8000e50:	f9b2 2092 	ldrsh.w	r2, [r2, #146]	@ 0x92
 8000e54:	b292      	uxth	r2, r2
 8000e56:	4313      	orrs	r3, r2
 8000e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				int32_t iLat = ((int32_t)(short)sReg[LatH] << 16) | (uint16_t)sReg[LatL];
 8000e5c:	4bac      	ldr	r3, [pc, #688]	@ (8001110 <main+0x46c>)
 8000e5e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 8000e62:	041b      	lsls	r3, r3, #16
 8000e64:	4aaa      	ldr	r2, [pc, #680]	@ (8001110 <main+0x46c>)
 8000e66:	f9b2 2096 	ldrsh.w	r2, [r2, #150]	@ 0x96
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

				// Convert from ddmm.mmmmm format (scaled by 100000) to decimal degrees
				float fLon_deg = (float)(iLon / 10000000); // Extract degrees (dd)
 8000e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e76:	4aaa      	ldr	r2, [pc, #680]	@ (8001120 <main+0x47c>)
 8000e78:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7c:	1592      	asrs	r2, r2, #22
 8000e7e:	17db      	asrs	r3, r3, #31
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
				float fLon_min = (float)((iLon % 10000000) / 100000.0f); // Extract minutes (mm.mmmmm)
 8000e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e92:	4aa3      	ldr	r2, [pc, #652]	@ (8001120 <main+0x47c>)
 8000e94:	fb82 1203 	smull	r1, r2, r2, r3
 8000e98:	1591      	asrs	r1, r2, #22
 8000e9a:	17da      	asrs	r2, r3, #31
 8000e9c:	1a8a      	subs	r2, r1, r2
 8000e9e:	49a1      	ldr	r1, [pc, #644]	@ (8001124 <main+0x480>)
 8000ea0:	fb01 f202 	mul.w	r2, r1, r2
 8000ea4:	1a9a      	subs	r2, r3, r2
 8000ea6:	ee07 2a90 	vmov	s15, r2
 8000eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eae:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8001128 <main+0x484>
 8000eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
				float fLongitude = fLon_deg + fLon_min / 60.0f;
 8000eba:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8000ebe:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 800112c <main+0x488>
 8000ec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ec6:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8000eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ece:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

				float fLat_deg = (float)(iLat / 10000000); // Extract degrees (dd)
 8000ed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ed6:	4a92      	ldr	r2, [pc, #584]	@ (8001120 <main+0x47c>)
 8000ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8000edc:	1592      	asrs	r2, r2, #22
 8000ede:	17db      	asrs	r3, r3, #31
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eea:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
				float fLat_min = (float)((iLat % 10000000) / 100000.0f); // Extract minutes (mm.mmmmm)
 8000eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ef2:	4a8b      	ldr	r2, [pc, #556]	@ (8001120 <main+0x47c>)
 8000ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef8:	1591      	asrs	r1, r2, #22
 8000efa:	17da      	asrs	r2, r3, #31
 8000efc:	1a8a      	subs	r2, r1, r2
 8000efe:	4989      	ldr	r1, [pc, #548]	@ (8001124 <main+0x480>)
 8000f00:	fb01 f202 	mul.w	r2, r1, r2
 8000f04:	1a9a      	subs	r2, r3, r2
 8000f06:	ee07 2a90 	vmov	s15, r2
 8000f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0e:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8001128 <main+0x484>
 8000f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f16:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
				float fLatitude = fLat_deg + fLat_min / 60.0f;
 8000f1a:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000f1e:	eddf 6a83 	vldr	s13, [pc, #524]	@ 800112c <main+0x488>
 8000f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f26:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8000f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

				// GPS Altitude (m)
				float fGpsAltitude = (float)(short)sReg[GPSHeight] / 10.0f;
 8000f32:	4b77      	ldr	r3, [pc, #476]	@ (8001110 <main+0x46c>)
 8000f34:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f40:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f48:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

				// GPS Heading/Course (°). Note: This is course over ground, not magnetic heading.
				float fGpsCourse = (float)(short)sReg[GPSYAW] / 100.0f;
 8000f4c:	4b70      	ldr	r3, [pc, #448]	@ (8001110 <main+0x46c>)
 8000f4e:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5a:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001130 <main+0x48c>
 8000f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f62:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

				// GPS Ground Speed (km/h)
				int32_t iGpsSpeed = ((int32_t)(short)sReg[GPSVH] << 16) | (uint16_t)sReg[GPSVL];
 8000f66:	4b6a      	ldr	r3, [pc, #424]	@ (8001110 <main+0x46c>)
 8000f68:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	4a68      	ldr	r2, [pc, #416]	@ (8001110 <main+0x46c>)
 8000f70:	f9b2 209e 	ldrsh.w	r2, [r2, #158]	@ 0x9e
 8000f74:	b292      	uxth	r2, r2
 8000f76:	4313      	orrs	r3, r2
 8000f78:	667b      	str	r3, [r7, #100]	@ 0x64
				float fGpsSpeed_kmh = (float)iGpsSpeed / 1000.0f;
 8000f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f84:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001134 <main+0x490>
 8000f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

				// Satellite Info & Accuracy Metrics
				int iSatellites = (uint16_t)sReg[SVNUM]; // Number of satellites is likely unsigned
 8000f90:	4b5f      	ldr	r3, [pc, #380]	@ (8001110 <main+0x46c>)
 8000f92:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
				float fPDOP = (float)(short)sReg[PDOP] / 100.0f;
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001110 <main+0x46c>)
 8000f9c:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa8:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8001130 <main+0x48c>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
				float fHDOP = (float)(short)sReg[HDOP] / 100.0f;
 8000fb4:	4b56      	ldr	r3, [pc, #344]	@ (8001110 <main+0x46c>)
 8000fb6:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc2:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001130 <main+0x48c>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
				float fVDOP = (float)(short)sReg[VDOP] / 100.0f;
 8000fce:	4b50      	ldr	r3, [pc, #320]	@ (8001110 <main+0x46c>)
 8000fd0:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fdc:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8001130 <main+0x48c>
 8000fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50


    			if(s_cDataUpdate & ACC_UPDATE)
 8000fe8:	4b53      	ldr	r3, [pc, #332]	@ (8001138 <main+0x494>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d01b      	beq.n	800102c <main+0x388>
    			{
    				printf("acc:%.3f %.3f %.3f\r\n", fAcc[0], fAcc[1], fAcc[2]);
 8000ff4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000ff8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ffc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001000:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001004:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001008:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800100c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001010:	ed8d 7b00 	vstr	d7, [sp]
 8001014:	ec53 2b15 	vmov	r2, r3, d5
 8001018:	4848      	ldr	r0, [pc, #288]	@ (800113c <main+0x498>)
 800101a:	f00a fcc5 	bl	800b9a8 <iprintf>
    				s_cDataUpdate &= ~ACC_UPDATE;
 800101e:	4b46      	ldr	r3, [pc, #280]	@ (8001138 <main+0x494>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b43      	ldr	r3, [pc, #268]	@ (8001138 <main+0x494>)
 800102a:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & GYRO_UPDATE)
 800102c:	4b42      	ldr	r3, [pc, #264]	@ (8001138 <main+0x494>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d01b      	beq.n	8001070 <main+0x3cc>
    			{
    				printf("gyro:%.3f %.3f %.3f\r\n", fGyro[0], fGyro[1], fGyro[2]);
 8001038:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800103c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001040:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001044:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001048:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800104c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001050:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001054:	ed8d 7b00 	vstr	d7, [sp]
 8001058:	ec53 2b15 	vmov	r2, r3, d5
 800105c:	4838      	ldr	r0, [pc, #224]	@ (8001140 <main+0x49c>)
 800105e:	f00a fca3 	bl	800b9a8 <iprintf>
    				s_cDataUpdate &= ~GYRO_UPDATE;
 8001062:	4b35      	ldr	r3, [pc, #212]	@ (8001138 <main+0x494>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b32      	ldr	r3, [pc, #200]	@ (8001138 <main+0x494>)
 800106e:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & ANGLE_UPDATE)
 8001070:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <main+0x494>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	d033      	beq.n	80010e4 <main+0x440>
    			{
                    fYaw = (float)((unsigned short)sReg[Yaw]) / 32768 * 180.0;
 800107c:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <main+0x46c>)
 800107e:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	@ 0x7e
 8001082:	b29b      	uxth	r3, r3
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800108c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001114 <main+0x470>
 8001090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001094:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800111c <main+0x478>
 8001098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    				printf("angle:%.3f %.3f %.3f(%.3f)\r\n", fAngle[0], fAngle[1], fAngle[2], fYaw);
 80010a0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010a4:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80010a8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80010ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80010b4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80010b8:	edd7 5a13 	vldr	s11, [r7, #76]	@ 0x4c
 80010bc:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80010c0:	ed8d 5b04 	vstr	d5, [sp, #16]
 80010c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80010c8:	ed8d 7b00 	vstr	d7, [sp]
 80010cc:	ec53 2b14 	vmov	r2, r3, d4
 80010d0:	481c      	ldr	r0, [pc, #112]	@ (8001144 <main+0x4a0>)
 80010d2:	f00a fc69 	bl	800b9a8 <iprintf>
    				s_cDataUpdate &= ~ANGLE_UPDATE;
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <main+0x494>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	f023 0304 	bic.w	r3, r3, #4
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <main+0x494>)
 80010e2:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & MAG_UPDATE)
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <main+0x494>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d034      	beq.n	800115a <main+0x4b6>
    			{
    				printf("mag:%d %d %d\r\n", sReg[HX], sReg[HY], sReg[HZ]);
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <main+0x46c>)
 80010f2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 80010f6:	4619      	mov	r1, r3
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <main+0x46c>)
 80010fa:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 80010fe:	461a      	mov	r2, r3
 8001100:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <main+0x46c>)
 8001102:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 8001106:	4810      	ldr	r0, [pc, #64]	@ (8001148 <main+0x4a4>)
 8001108:	f00a fc4e 	bl	800b9a8 <iprintf>
 800110c:	e01e      	b.n	800114c <main+0x4a8>
 800110e:	bf00      	nop
 8001110:	24000828 	.word	0x24000828
 8001114:	47000000 	.word	0x47000000
 8001118:	44fa0000 	.word	0x44fa0000
 800111c:	43340000 	.word	0x43340000
 8001120:	6b5fca6b 	.word	0x6b5fca6b
 8001124:	00989680 	.word	0x00989680
 8001128:	47c35000 	.word	0x47c35000
 800112c:	42700000 	.word	0x42700000
 8001130:	42c80000 	.word	0x42c80000
 8001134:	447a0000 	.word	0x447a0000
 8001138:	24000470 	.word	0x24000470
 800113c:	0800e0c0 	.word	0x0800e0c0
 8001140:	0800e0d8 	.word	0x0800e0d8
 8001144:	0800e0f0 	.word	0x0800e0f0
 8001148:	0800e110 	.word	0x0800e110
    				s_cDataUpdate &= ~MAG_UPDATE;
 800114c:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <main+0x540>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	f023 0308 	bic.w	r3, r3, #8
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <main+0x540>)
 8001158:	701a      	strb	r2, [r3, #0]
    			}
				if(s_cDataUpdate & GPS_UPDATE)
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <main+0x540>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	d039      	beq.n	80011da <main+0x536>
				  {
								// Print the GPS data
					printf("GPS Lat: %.6f, Lon: %.6f, Alt: %.1fm\r\n", fLatitude, fLongitude, fGpsAltitude);
 8001166:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800116a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800116e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001172:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001176:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800117a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800117e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001182:	ed8d 7b00 	vstr	d7, [sp]
 8001186:	ec53 2b15 	vmov	r2, r3, d5
 800118a:	4817      	ldr	r0, [pc, #92]	@ (80011e8 <main+0x544>)
 800118c:	f00a fc0c 	bl	800b9a8 <iprintf>
					printf("GPS Spd: %.3fkm/h, Course: %.2fdeg\r\n", fGpsSpeed_kmh, fGpsCourse);
 8001190:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001194:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001198:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800119c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a0:	ed8d 7b00 	vstr	d7, [sp]
 80011a4:	ec53 2b16 	vmov	r2, r3, d6
 80011a8:	4810      	ldr	r0, [pc, #64]	@ (80011ec <main+0x548>)
 80011aa:	f00a fbfd 	bl	800b9a8 <iprintf>
					printf("GPS Sats: %d, PDOP: %.2f, HDOP: %.2f, VDOP: %.2f\r\n", iSatellites, fPDOP, fHDOP, fVDOP);
 80011ae:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80011b2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011b6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80011ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011be:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80011c2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80011c6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80011ca:	ed8d 7b00 	vstr	d7, [sp]
 80011ce:	ec53 2b15 	vmov	r2, r3, d5
 80011d2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80011d4:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <main+0x54c>)
 80011d6:	f00a fbe7 	bl	800b9a8 <iprintf>

					// Clear the GPS update flag
					//s_cDataUpdate &= ~GPS_UPDATE;
				}

                s_cDataUpdate = 0;
 80011da:	4b02      	ldr	r3, [pc, #8]	@ (80011e4 <main+0x540>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
  {
 80011e0:	e5a3      	b.n	8000d2a <main+0x86>
 80011e2:	bf00      	nop
 80011e4:	24000470 	.word	0x24000470
 80011e8:	0800e120 	.word	0x0800e120
 80011ec:	0800e148 	.word	0x0800e148
 80011f0:	0800e170 	.word	0x0800e170

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b09c      	sub	sp, #112	@ 0x70
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fe:	224c      	movs	r2, #76	@ 0x4c
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00a fd42 	bl	800bc8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2220      	movs	r2, #32
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f00a fd3c 	bl	800bc8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001214:	2002      	movs	r0, #2
 8001216:	f003 fcc9 	bl	8004bac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <SystemClock_Config+0xb8>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001226:	4a21      	ldr	r2, [pc, #132]	@ (80012ac <SystemClock_Config+0xb8>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122c:	6193      	str	r3, [r2, #24]
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <SystemClock_Config+0xb8>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800123a:	bf00      	nop
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <SystemClock_Config+0xb8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001248:	d1f8      	bne.n	800123c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124a:	2302      	movs	r3, #2
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800124e:	2301      	movs	r3, #1
 8001250:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001252:	2340      	movs	r3, #64	@ 0x40
 8001254:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fcde 	bl	8004c20 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800126a:	f000 fbcb 	bl	8001a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	233f      	movs	r3, #63	@ 0x3f
 8001270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001282:	2340      	movs	r3, #64	@ 0x40
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f004 f89d 	bl	80053d4 <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012a0:	f000 fbb0 	bl	8001a04 <Error_Handler>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3770      	adds	r7, #112	@ 0x70
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58024800 	.word	0x58024800

080012b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <MX_I2C1_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012bc:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <MX_I2C1_Init+0x7c>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ea:	480e      	ldr	r0, [pc, #56]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012ec:	f002 fe3a 	bl	8003f64 <HAL_I2C_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012f6:	f000 fb85 	bl	8001a04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <MX_I2C1_Init+0x74>)
 80012fe:	f003 fbbd 	bl	8004a7c <HAL_I2CEx_ConfigAnalogFilter>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001308:	f000 fb7c 	bl	8001a04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_I2C1_Init+0x74>)
 8001310:	f003 fbff 	bl	8004b12 <HAL_I2CEx_ConfigDigitalFilter>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 fb73 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	24000214 	.word	0x24000214
 8001328:	40005400 	.word	0x40005400
 800132c:	00707cbb 	.word	0x00707cbb

08001330 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b098      	sub	sp, #96	@ 0x60
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001336:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2234      	movs	r2, #52	@ 0x34
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f00a fc95 	bl	800bc8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001362:	4b41      	ldr	r3, [pc, #260]	@ (8001468 <MX_TIM1_Init+0x138>)
 8001364:	4a41      	ldr	r2, [pc, #260]	@ (800146c <MX_TIM1_Init+0x13c>)
 8001366:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8001368:	4b3f      	ldr	r3, [pc, #252]	@ (8001468 <MX_TIM1_Init+0x138>)
 800136a:	223f      	movs	r2, #63	@ 0x3f
 800136c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b3e      	ldr	r3, [pc, #248]	@ (8001468 <MX_TIM1_Init+0x138>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001374:	4b3c      	ldr	r3, [pc, #240]	@ (8001468 <MX_TIM1_Init+0x138>)
 8001376:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800137a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b3a      	ldr	r3, [pc, #232]	@ (8001468 <MX_TIM1_Init+0x138>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001382:	4b39      	ldr	r3, [pc, #228]	@ (8001468 <MX_TIM1_Init+0x138>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b37      	ldr	r3, [pc, #220]	@ (8001468 <MX_TIM1_Init+0x138>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800138e:	4836      	ldr	r0, [pc, #216]	@ (8001468 <MX_TIM1_Init+0x138>)
 8001390:	f006 f96e 	bl	8007670 <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800139a:	f000 fb33 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ae:	4619      	mov	r1, r3
 80013b0:	482d      	ldr	r0, [pc, #180]	@ (8001468 <MX_TIM1_Init+0x138>)
 80013b2:	f006 ff8d 	bl	80082d0 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013bc:	f000 fb22 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c0:	2360      	movs	r3, #96	@ 0x60
 80013c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 80013c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ca:	2300      	movs	r3, #0
 80013cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ce:	2300      	movs	r3, #0
 80013d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4820      	ldr	r0, [pc, #128]	@ (8001468 <MX_TIM1_Init+0x138>)
 80013e8:	f006 fab6 	bl	8007958 <HAL_TIM_PWM_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80013f2:	f000 fb07 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 80013f6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001400:	2204      	movs	r2, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4818      	ldr	r0, [pc, #96]	@ (8001468 <MX_TIM1_Init+0x138>)
 8001406:	f006 faa7 	bl	8007958 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001410:	f000 faf8 	bl	8001a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <MX_TIM1_Init+0x138>)
 800144a:	f006 ffdd 	bl	8008408 <HAL_TIMEx_ConfigBreakDeadTime>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001454:	f000 fad6 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <MX_TIM1_Init+0x138>)
 800145a:	f000 fd53 	bl	8001f04 <HAL_TIM_MspPostInit>

}
 800145e:	bf00      	nop
 8001460:	3760      	adds	r7, #96	@ 0x60
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	24000268 	.word	0x24000268
 800146c:	40010000 	.word	0x40010000

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 8001476:	4a23      	ldr	r2, [pc, #140]	@ (8001504 <MX_USART1_UART_Init+0x94>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b8:	4811      	ldr	r0, [pc, #68]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 80014ba:	f007 f831 	bl	8008520 <HAL_UART_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014c4:	f000 fa9e 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c8:	2100      	movs	r1, #0
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 80014cc:	f009 fcab 	bl	800ae26 <HAL_UARTEx_SetTxFifoThreshold>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014d6:	f000 fa95 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014da:	2100      	movs	r1, #0
 80014dc:	4808      	ldr	r0, [pc, #32]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 80014de:	f009 fce0 	bl	800aea2 <HAL_UARTEx_SetRxFifoThreshold>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014e8:	f000 fa8c 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_USART1_UART_Init+0x90>)
 80014ee:	f009 fc61 	bl	800adb4 <HAL_UARTEx_DisableFifoMode>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014f8:	f000 fa84 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	240002b4 	.word	0x240002b4
 8001504:	40011000 	.word	0x40011000

08001508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800150c:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 800150e:	4a23      	ldr	r2, [pc, #140]	@ (800159c <MX_USART2_UART_Init+0x94>)
 8001510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001550:	4811      	ldr	r0, [pc, #68]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001552:	f006 ffe5 	bl	8008520 <HAL_UART_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800155c:	f000 fa52 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001560:	2100      	movs	r1, #0
 8001562:	480d      	ldr	r0, [pc, #52]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001564:	f009 fc5f 	bl	800ae26 <HAL_UARTEx_SetTxFifoThreshold>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800156e:	f000 fa49 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001572:	2100      	movs	r1, #0
 8001574:	4808      	ldr	r0, [pc, #32]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001576:	f009 fc94 	bl	800aea2 <HAL_UARTEx_SetRxFifoThreshold>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001580:	f000 fa40 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	@ (8001598 <MX_USART2_UART_Init+0x90>)
 8001586:	f009 fc15 	bl	800adb4 <HAL_UARTEx_DisableFifoMode>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001590:	f000 fa38 	bl	8001a04 <Error_Handler>
  	  //UART_Start_Receive_IT(&huart2, &ucRxData, 1);
      //HAL_UART_Receive_IT(&huart1, &ucRxData, 1);

  /* USER CODE END USART2_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	24000348 	.word	0x24000348
 800159c:	40004400 	.word	0x40004400

080015a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a4:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015a6:	4a23      	ldr	r2, [pc, #140]	@ (8001634 <MX_USART3_UART_Init+0x94>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015be:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d6:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015e8:	4811      	ldr	r0, [pc, #68]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015ea:	f006 ff99 	bl	8008520 <HAL_UART_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015f4:	f000 fa06 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	480d      	ldr	r0, [pc, #52]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 80015fc:	f009 fc13 	bl	800ae26 <HAL_UARTEx_SetTxFifoThreshold>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001606:	f000 f9fd 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160a:	2100      	movs	r1, #0
 800160c:	4808      	ldr	r0, [pc, #32]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 800160e:	f009 fc48 	bl	800aea2 <HAL_UARTEx_SetRxFifoThreshold>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001618:	f000 f9f4 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_USART3_UART_Init+0x90>)
 800161e:	f009 fbc9 	bl	800adb4 <HAL_UARTEx_DisableFifoMode>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001628:	f000 f9ec 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	240003dc 	.word	0x240003dc
 8001634:	40004800 	.word	0x40004800

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	@ 0x30
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164e:	4b51      	ldr	r3, [pc, #324]	@ (8001794 <MX_GPIO_Init+0x15c>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001654:	4a4f      	ldr	r2, [pc, #316]	@ (8001794 <MX_GPIO_Init+0x15c>)
 8001656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800165a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800165e:	4b4d      	ldr	r3, [pc, #308]	@ (8001794 <MX_GPIO_Init+0x15c>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800166c:	4b49      	ldr	r3, [pc, #292]	@ (8001794 <MX_GPIO_Init+0x15c>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	4a48      	ldr	r2, [pc, #288]	@ (8001794 <MX_GPIO_Init+0x15c>)
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167c:	4b45      	ldr	r3, [pc, #276]	@ (8001794 <MX_GPIO_Init+0x15c>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168a:	4b42      	ldr	r3, [pc, #264]	@ (8001794 <MX_GPIO_Init+0x15c>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001690:	4a40      	ldr	r2, [pc, #256]	@ (8001794 <MX_GPIO_Init+0x15c>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169a:	4b3e      	ldr	r3, [pc, #248]	@ (8001794 <MX_GPIO_Init+0x15c>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ae:	4a39      	ldr	r2, [pc, #228]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b8:	4b36      	ldr	r3, [pc, #216]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016cc:	4a31      	ldr	r2, [pc, #196]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	4824      	ldr	r0, [pc, #144]	@ (8001798 <MX_GPIO_Init+0x160>)
 8001708:	f002 fc12 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	481d      	ldr	r0, [pc, #116]	@ (8001798 <MX_GPIO_Init+0x160>)
 8001724:	f002 fa5c 	bl	8003be0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
   /* Configure USART3 TX (PD8) and RX (PD9) */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001728:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001736:	2302      	movs	r3, #2
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3; // AF7 for USART3
 800173a:	2307      	movs	r3, #7
 800173c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	4815      	ldr	r0, [pc, #84]	@ (800179c <MX_GPIO_Init+0x164>)
 8001746:	f002 fa4b 	bl	8003be0 <HAL_GPIO_Init>

  /* Configure USART2 TX (PD5) and RX (PD6) */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800174a:	2360      	movs	r3, #96	@ 0x60
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2302      	movs	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // AF7 for USART2
 800175a:	2307      	movs	r3, #7
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_GPIO_Init+0x164>)
 8001766:	f002 fa3b 	bl	8003be0 <HAL_GPIO_Init>


  /* Configure USART1 TX (PA9) and RX (PA10) */
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 800176a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Or GPIO_PULLUP for RX if needed
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001778:	2302      	movs	r3, #2
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // AF7 for USART1
 800177c:	2307      	movs	r3, #7
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	@ (80017a0 <MX_GPIO_Init+0x168>)
 8001788:	f002 fa2a 	bl	8003be0 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_USART1 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 800178c:	bf00      	nop
 800178e:	3730      	adds	r7, #48	@ 0x30
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	58024400 	.word	0x58024400
 8001798:	58021800 	.word	0x58021800
 800179c:	58020c00 	.word	0x58020c00
 80017a0:	58020000 	.word	0x58020000

080017a4 <SensorUartSend>:

/* USER CODE BEGIN 4 */

static void SensorUartSend(uint8_t *p_data, uint32_t uiSize)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart3, p_data, uiSize, uiSize*4);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <SensorUartSend+0x24>)
 80017ba:	f006 ff01 	bl	80085c0 <HAL_UART_Transmit>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	240003dc 	.word	0x240003dc

080017cc <CopeSensorData>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	int i;
    for(i = 0; i < uiRegNum; i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e083      	b.n	80018e4 <CopeSensorData+0x118>
    {
        switch(uiReg)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b36      	subs	r3, #54	@ 0x36
 80017e0:	2b22      	cmp	r3, #34	@ 0x22
 80017e2:	d871      	bhi.n	80018c8 <CopeSensorData+0xfc>
 80017e4:	a201      	add	r2, pc, #4	@ (adr r2, 80017ec <CopeSensorData+0x20>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	08001879 	.word	0x08001879
 80017f0:	080018c9 	.word	0x080018c9
 80017f4:	080018c9 	.word	0x080018c9
 80017f8:	08001889 	.word	0x08001889
 80017fc:	080018c9 	.word	0x080018c9
 8001800:	080018c9 	.word	0x080018c9
 8001804:	08001899 	.word	0x08001899
 8001808:	080018c9 	.word	0x080018c9
 800180c:	080018c9 	.word	0x080018c9
 8001810:	080018a9 	.word	0x080018a9
 8001814:	080018c9 	.word	0x080018c9
 8001818:	080018c9 	.word	0x080018c9
 800181c:	080018c9 	.word	0x080018c9
 8001820:	080018c9 	.word	0x080018c9
 8001824:	080018c9 	.word	0x080018c9
 8001828:	080018c9 	.word	0x080018c9
 800182c:	080018c9 	.word	0x080018c9
 8001830:	080018c9 	.word	0x080018c9
 8001834:	080018c9 	.word	0x080018c9
 8001838:	080018b9 	.word	0x080018b9
 800183c:	080018b9 	.word	0x080018b9
 8001840:	080018b9 	.word	0x080018b9
 8001844:	080018b9 	.word	0x080018b9
 8001848:	080018b9 	.word	0x080018b9
 800184c:	080018b9 	.word	0x080018b9
 8001850:	080018b9 	.word	0x080018b9
 8001854:	080018b9 	.word	0x080018b9
 8001858:	080018c9 	.word	0x080018c9
 800185c:	080018c9 	.word	0x080018c9
 8001860:	080018c9 	.word	0x080018c9
 8001864:	080018c9 	.word	0x080018c9
 8001868:	080018b9 	.word	0x080018b9
 800186c:	080018b9 	.word	0x080018b9
 8001870:	080018b9 	.word	0x080018b9
 8001874:	080018b9 	.word	0x080018b9
        {
            case AZ:
				s_cDataUpdate |= ACC_UPDATE;
 8001878:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <CopeSensorData+0x130>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <CopeSensorData+0x130>)
 8001884:	701a      	strb	r2, [r3, #0]
            break;
 8001886:	e027      	b.n	80018d8 <CopeSensorData+0x10c>
            case GZ:
				s_cDataUpdate |= GYRO_UPDATE;
 8001888:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <CopeSensorData+0x130>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <CopeSensorData+0x130>)
 8001894:	701a      	strb	r2, [r3, #0]
            break;
 8001896:	e01f      	b.n	80018d8 <CopeSensorData+0x10c>
            case HZ:
				s_cDataUpdate |= MAG_UPDATE;
 8001898:	4b18      	ldr	r3, [pc, #96]	@ (80018fc <CopeSensorData+0x130>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <CopeSensorData+0x130>)
 80018a4:	701a      	strb	r2, [r3, #0]
            break;
 80018a6:	e017      	b.n	80018d8 <CopeSensorData+0x10c>
            case Yaw:
				s_cDataUpdate |= ANGLE_UPDATE;
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <CopeSensorData+0x130>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <CopeSensorData+0x130>)
 80018b4:	701a      	strb	r2, [r3, #0]
            break;
 80018b6:	e00f      	b.n	80018d8 <CopeSensorData+0x10c>
            case GPSVH:
            case SVNUM:
            case PDOP:
            case HDOP:
            case VDOP:
        s_cDataUpdate |= GPS_UPDATE;
 80018b8:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <CopeSensorData+0x130>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f043 0310 	orr.w	r3, r3, #16
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <CopeSensorData+0x130>)
 80018c4:	701a      	strb	r2, [r3, #0]
            break;
 80018c6:	e007      	b.n	80018d8 <CopeSensorData+0x10c>

            default:
				s_cDataUpdate |= READ_UPDATE;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <CopeSensorData+0x130>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <CopeSensorData+0x130>)
 80018d4:	701a      	strb	r2, [r3, #0]
			break;
 80018d6:	bf00      	nop
        }
		uiReg++;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	607b      	str	r3, [r7, #4]
    for(i = 0; i < uiRegNum; i++)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f63f af77 	bhi.w	80017dc <CopeSensorData+0x10>
    }
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	24000470 	.word	0x24000470

08001900 <AutoScanSensor>:

static void AutoScanSensor(void)
{
 8001900:	b5b0      	push	{r4, r5, r7, lr}
 8001902:	b08c      	sub	sp, #48	@ 0x30
 8001904:	af00      	add	r7, sp, #0
	const uint32_t c_uiBaud[9] = {4800, 9600, 19200, 38400, 57600, 115200, 230400, 460800, 921600};
 8001906:	4b23      	ldr	r3, [pc, #140]	@ (8001994 <AutoScanSensor+0x94>)
 8001908:	1d3c      	adds	r4, r7, #4
 800190a:	461d      	mov	r5, r3
 800190c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	6023      	str	r3, [r4, #0]
	int i, iRetry;
	
	for(i = 0; i < 9; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800191c:	e02e      	b.n	800197c <AutoScanSensor+0x7c>
	{
        uiBuad = c_uiBaud[i]; // literal waste of time for loop only kept it around cause it looks like a nice blocking loading sequence in serial
 800191e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3330      	adds	r3, #48	@ 0x30
 8001924:	443b      	add	r3, r7
 8001926:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800192a:	4a1b      	ldr	r2, [pc, #108]	@ (8001998 <AutoScanSensor+0x98>)
 800192c:	6013      	str	r3, [r2, #0]
        HAL_Delay(250); // Settling time
 800192e:	20fa      	movs	r0, #250	@ 0xfa
 8001930:	f001 fa46 	bl	8002dc0 <HAL_Delay>
		iRetry = 2;
 8001934:	2302      	movs	r3, #2
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
		do
		{
			s_cDataUpdate = 0;
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <AutoScanSensor+0x9c>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
			WitReadReg(AX, 3);
 800193e:	2103      	movs	r1, #3
 8001940:	2034      	movs	r0, #52	@ 0x34
 8001942:	f001 f853 	bl	80029ec <WitReadReg>
			HAL_Delay(200);
 8001946:	20c8      	movs	r0, #200	@ 0xc8
 8001948:	f001 fa3a 	bl	8002dc0 <HAL_Delay>
			if(s_cDataUpdate != 0)
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <AutoScanSensor+0x9c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <AutoScanSensor+0x6a>
			{
				printf("%lu baud find sensor\r\n\r\n", c_uiBaud[i]);
 8001954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	3330      	adds	r3, #48	@ 0x30
 800195a:	443b      	add	r3, r7
 800195c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001960:	4619      	mov	r1, r3
 8001962:	480f      	ldr	r0, [pc, #60]	@ (80019a0 <AutoScanSensor+0xa0>)
 8001964:	f00a f820 	bl	800b9a8 <iprintf>
 8001968:	e011      	b.n	800198e <AutoScanSensor+0x8e>
				return ;
			}
			iRetry--;
 800196a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
		}while(iRetry);		
 8001970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1e0      	bne.n	8001938 <AutoScanSensor+0x38>
	for(i = 0; i < 9; i++)
 8001976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001978:	3301      	adds	r3, #1
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800197c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197e:	2b08      	cmp	r3, #8
 8001980:	ddcd      	ble.n	800191e <AutoScanSensor+0x1e>
	}
	printf("can not find sensor\r\n");
 8001982:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <AutoScanSensor+0xa4>)
 8001984:	f00a f880 	bl	800ba88 <puts>
	printf("please check your connection\r\n");
 8001988:	4807      	ldr	r0, [pc, #28]	@ (80019a8 <AutoScanSensor+0xa8>)
 800198a:	f00a f87d 	bl	800ba88 <puts>
}
 800198e:	3730      	adds	r7, #48	@ 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bdb0      	pop	{r4, r5, r7, pc}
 8001994:	0800e208 	.word	0x0800e208
 8001998:	24000010 	.word	0x24000010
 800199c:	24000470 	.word	0x24000470
 80019a0:	0800e1b4 	.word	0x0800e1b4
 80019a4:	0800e1d0 	.word	0x0800e1d0
 80019a8:	0800e1e8 	.word	0x0800e1e8

080019ac <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80019b2:	463b      	mov	r3, r7
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80019be:	f001 fb33 	bl	8003028 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80019ce:	231f      	movs	r3, #31
 80019d0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80019d2:	2387      	movs	r3, #135	@ 0x87
 80019d4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80019da:	2300      	movs	r3, #0
 80019dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80019de:	2301      	movs	r3, #1
 80019e0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80019e2:	2301      	movs	r3, #1
 80019e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019ee:	463b      	mov	r3, r7
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 fb51 	bl	8003098 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80019f6:	2004      	movs	r0, #4
 80019f8:	f001 fb2e 	bl	8003058 <HAL_MPU_Enable>

}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <Error_Handler+0x8>

08001a10 <ring_buffer_init>:
//ring_buffer.c
#include "ring_buffer.h"

void ring_buffer_init(ring_buffer *p_ring_buf){
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    p_ring_buf->head = 0;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    p_ring_buf->tail = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <ring_buffer_put>:

//add data to the ring buffer 
uint8_t ring_buffer_put(ring_buffer *p_ring_buf, uint8_t data){
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (p_ring_buf->head + 1 ) % RING_BUFFER_SIZE; // increments by one and becomes 0 when reached buffer size (should wraparound at max int val) 
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	425a      	negs	r2, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	bf58      	it	pl
 8001a52:	4253      	negpl	r3, r2
 8001a54:	81fb      	strh	r3, [r7, #14]
    if (next == p_ring_buf->tail){
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	89fa      	ldrh	r2, [r7, #14]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d101      	bne.n	8001a68 <ring_buffer_put+0x34>
        return 0; // when its full 
 8001a64:	2300      	movs	r3, #0
 8001a66:	e00c      	b.n	8001a82 <ring_buffer_put+0x4e>
    }
    p_ring_buf->buffer[p_ring_buf->head]= data;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	545a      	strb	r2, [r3, r1]
    p_ring_buf->head = next;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	89fa      	ldrh	r2, [r7, #14]
 8001a7c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    return 1; // succcess
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <ring_buffer_get>:

//get data from the ring buffer
uint8_t ring_buffer_get(ring_buffer *p_ring_buf, uint8_t *data){
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
    if (p_ring_buf->head == p_ring_buf->tail) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d101      	bne.n	8001ab0 <ring_buffer_get+0x22>
        return 0; // Buffer empty
 8001aac:	2300      	movs	r3, #0
 8001aae:	e017      	b.n	8001ae0 <ring_buffer_get+0x52>
    }
    *data = p_ring_buf->buffer[p_ring_buf->tail];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	5c9a      	ldrb	r2, [r3, r2]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	701a      	strb	r2, [r3, #0]
    p_ring_buf->tail = (p_ring_buf->tail+1)%RING_BUFFER_SIZE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	425a      	negs	r2, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	bf58      	it	pl
 8001ad4:	4253      	negpl	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    return 1; // read
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <rudder_init>:

#include "rudder_control.h"

void rudder_init(TIM_HandleTypeDef *htim, uint32_t channel) {
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
    rudder_htim = htim;
 8001af6:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <rudder_init+0x24>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6013      	str	r3, [r2, #0]
    rudder_channel = channel;
 8001afc:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <rudder_init+0x28>)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	24000700 	.word	0x24000700
 8001b14:	24000704 	.word	0x24000704

08001b18 <rudder_move_to>:
    } else {
        rudder_target_angle = rudder_straight;
    }
}

void rudder_move_to(void) {
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
    if (fabsf(rudder_target_angle - rudder_current_angle) > 1) {
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c1c <rudder_move_to+0x104>)
 8001b20:	ed93 7a00 	vldr	s14, [r3]
 8001b24:	4b3e      	ldr	r3, [pc, #248]	@ (8001c20 <rudder_move_to+0x108>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	dc00      	bgt.n	8001b42 <rudder_move_to+0x2a>
        }

        uint32_t pulse_width = 500 + (rudder_current_angle * (2000.0f / 180.0f));
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
    }
}
 8001b40:	e066      	b.n	8001c10 <rudder_move_to+0xf8>
        if (rudder_current_angle < rudder_target_angle) {
 8001b42:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <rudder_move_to+0x108>)
 8001b44:	ed93 7a00 	vldr	s14, [r3]
 8001b48:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <rudder_move_to+0x104>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	d50a      	bpl.n	8001b6e <rudder_move_to+0x56>
            rudder_current_angle += 1;
 8001b58:	4b31      	ldr	r3, [pc, #196]	@ (8001c20 <rudder_move_to+0x108>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b66:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <rudder_move_to+0x108>)
 8001b68:	edc3 7a00 	vstr	s15, [r3]
 8001b6c:	e009      	b.n	8001b82 <rudder_move_to+0x6a>
            rudder_current_angle -= 1;
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <rudder_move_to+0x108>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b7c:	4b28      	ldr	r3, [pc, #160]	@ (8001c20 <rudder_move_to+0x108>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
        uint32_t pulse_width = 500 + (rudder_current_angle * (2000.0f / 180.0f));
 8001b82:	4b27      	ldr	r3, [pc, #156]	@ (8001c20 <rudder_move_to+0x108>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001c24 <rudder_move_to+0x10c>
 8001b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b90:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001c28 <rudder_move_to+0x110>
 8001b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9c:	ee17 3a90 	vmov	r3, s15
 8001ba0:	607b      	str	r3, [r7, #4]
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8001ba2:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <rudder_move_to+0x114>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <rudder_move_to+0x9e>
 8001baa:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <rudder_move_to+0x118>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001bb4:	e02c      	b.n	8001c10 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <rudder_move_to+0x114>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d105      	bne.n	8001bca <rudder_move_to+0xb2>
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <rudder_move_to+0x118>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001bc8:	e022      	b.n	8001c10 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <rudder_move_to+0x114>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d105      	bne.n	8001bde <rudder_move_to+0xc6>
 8001bd2:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <rudder_move_to+0x118>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001bdc:	e018      	b.n	8001c10 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8001bde:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <rudder_move_to+0x114>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d105      	bne.n	8001bf2 <rudder_move_to+0xda>
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <rudder_move_to+0x118>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001bf0:	e00e      	b.n	8001c10 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <rudder_move_to+0x114>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d105      	bne.n	8001c06 <rudder_move_to+0xee>
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <rudder_move_to+0x118>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001c04:	e004      	b.n	8001c10 <rudder_move_to+0xf8>
        __HAL_TIM_SET_COMPARE(rudder_htim, rudder_channel, pulse_width);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <rudder_move_to+0x118>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	24000018 	.word	0x24000018
 8001c20:	24000014 	.word	0x24000014
 8001c24:	4131c71c 	.word	0x4131c71c
 8001c28:	43fa0000 	.word	0x43fa0000
 8001c2c:	24000704 	.word	0x24000704
 8001c30:	24000700 	.word	0x24000700

08001c34 <set_servo_angle>:
#include "servo_controls.h"
#include "stdint.h"



 void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim 
     the maths maybe works like 1.5 ms pulse width is neutral with .5 and 2.5 being either end
     so we have a 1us count so 500us/1ms -> 500 counts and 2500us -> 2500 counts*/
    if (angle < 0.0f) angle = 0.0f;
 8001c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d502      	bpl.n	8001c56 <set_servo_angle+0x22>
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
    if (angle > 180.0f) angle = 180.0f; //limits
 8001c56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001d24 <set_servo_angle+0xf0>
 8001c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c66:	dd01      	ble.n	8001c6c <set_servo_angle+0x38>
 8001c68:	4b2f      	ldr	r3, [pc, #188]	@ (8001d28 <set_servo_angle+0xf4>)
 8001c6a:	607b      	str	r3, [r7, #4]
    
    float min_pulse = 500.0f;
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <set_servo_angle+0xf8>)
 8001c6e:	61fb      	str	r3, [r7, #28]
    float max_pulse = 2500.0f;
 8001c70:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <set_servo_angle+0xfc>)
 8001c72:	61bb      	str	r3, [r7, #24]
     
    uint32_t pulse_width = min_pulse +(angle*((max_pulse - min_pulse)/180.0f));
 8001c74:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001d24 <set_servo_angle+0xf0>
 8001c84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c9c:	ee17 3a90 	vmov	r3, s15
 8001ca0:	617b      	str	r3, [r7, #20]
    uint32_t rounded_pulse_width = (uint32_t)(pulse_width + 0.5f); 
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb8:	ee17 3a90 	vmov	r3, s15
 8001cbc:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d104      	bne.n	8001cce <set_servo_angle+0x9a>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	635a      	str	r2, [r3, #52]	@ 0x34
  
  }
 8001ccc:	e023      	b.n	8001d16 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d104      	bne.n	8001cde <set_servo_angle+0xaa>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6393      	str	r3, [r2, #56]	@ 0x38
  }
 8001cdc:	e01b      	b.n	8001d16 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d104      	bne.n	8001cee <set_servo_angle+0xba>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	63d3      	str	r3, [r2, #60]	@ 0x3c
  }
 8001cec:	e013      	b.n	8001d16 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b0c      	cmp	r3, #12
 8001cf2:	d104      	bne.n	8001cfe <set_servo_angle+0xca>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 8001cfc:	e00b      	b.n	8001d16 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d104      	bne.n	8001d0e <set_servo_angle+0xda>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
 8001d0c:	e003      	b.n	8001d16 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	65d3      	str	r3, [r2, #92]	@ 0x5c
  }
 8001d16:	bf00      	nop
 8001d18:	3724      	adds	r7, #36	@ 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	43340000 	.word	0x43340000
 8001d28:	43340000 	.word	0x43340000
 8001d2c:	43fa0000 	.word	0x43fa0000
 8001d30:	451c4000 	.word	0x451c4000
 8001d34:	00000000 	.word	0x00000000

08001d38 <copy_wind_pos>:
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); 
        }
      
    }
  }
  void copy_wind_pos(ServoController *ctrl, float wind_angle){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	ed87 0a00 	vstr	s0, [r7]
    float adj_angle=  fmod(wind_angle, 180.0f);  //all opposite angles are the same so 200 degrees = 20 degrees 
 8001d44:	edd7 7a00 	vldr	s15, [r7]
 8001d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d4c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001da8 <copy_wind_pos+0x70>
 8001d50:	eeb0 0b47 	vmov.f64	d0, d7
 8001d54:	f00b ff98 	bl	800dc88 <fmod>
 8001d58:	eeb0 7b40 	vmov.f64	d7, d0
 8001d5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d60:	edc7 7a03 	vstr	s15, [r7, #12]
    
    // explicit case for 180 degrees
    if(wind_angle >= 180.0f && adj_angle == 0.0f) {
 8001d64:	edd7 7a00 	vldr	s15, [r7]
 8001d68:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001db0 <copy_wind_pos+0x78>
 8001d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	db08      	blt.n	8001d88 <copy_wind_pos+0x50>
 8001d76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	d101      	bne.n	8001d88 <copy_wind_pos+0x50>
      adj_angle = 180.0f;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <copy_wind_pos+0x7c>)
 8001d86:	60fb      	str	r3, [r7, #12]
    }
    
    set_servo_angle(ctrl->htim, ctrl->channel, adj_angle);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f7ff ff4c 	bl	8001c34 <set_servo_angle>
  

    //set_servo_angle();
  }
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	f3af 8000 	nop.w
 8001da8:	00000000 	.word	0x00000000
 8001dac:	40668000 	.word	0x40668000
 8001db0:	43340000 	.word	0x43340000
 8001db4:	43340000 	.word	0x43340000

08001db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_MspInit+0x30>)
 8001dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dc4:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <HAL_MspInit+0x30>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_MspInit+0x30>)
 8001dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	58024400 	.word	0x58024400

08001dec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0b8      	sub	sp, #224	@ 0xe0
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	22b8      	movs	r2, #184	@ 0xb8
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f009 ff3d 	bl	800bc8c <memset>
  if(hi2c->Instance==I2C1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a27      	ldr	r2, [pc, #156]	@ (8001eb4 <HAL_I2C_MspInit+0xc8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d146      	bne.n	8001eaa <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e1c:	f04f 0208 	mov.w	r2, #8
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fe5a 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001e3e:	f7ff fde1 	bl	8001a04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <HAL_I2C_MspInit+0xcc>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e48:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <HAL_I2C_MspInit+0xcc>)
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e52:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_I2C_MspInit+0xcc>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e68:	2312      	movs	r3, #18
 8001e6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001e84:	4619      	mov	r1, r3
 8001e86:	480d      	ldr	r0, [pc, #52]	@ (8001ebc <HAL_I2C_MspInit+0xd0>)
 8001e88:	f001 feaa 	bl	8003be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_I2C_MspInit+0xcc>)
 8001e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e92:	4a09      	ldr	r2, [pc, #36]	@ (8001eb8 <HAL_I2C_MspInit+0xcc>)
 8001e94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_I2C_MspInit+0xcc>)
 8001e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001eaa:	bf00      	nop
 8001eac:	37e0      	adds	r7, #224	@ 0xe0
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	58020400 	.word	0x58020400

08001ec0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8001efc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_TIM_PWM_MspInit+0x40>)
 8001ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ed8:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <HAL_TIM_PWM_MspInit+0x40>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <HAL_TIM_PWM_MspInit+0x40>)
 8001ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40010000 	.word	0x40010000
 8001f00:	58024400 	.word	0x58024400

08001f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <HAL_TIM_MspPostInit+0x6c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d11f      	bne.n	8001f66 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_TIM_MspPostInit+0x70>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2c:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <HAL_TIM_MspPostInit+0x70>)
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f36:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <HAL_TIM_MspPostInit+0x70>)
 8001f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001f44:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001f48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <HAL_TIM_MspPostInit+0x74>)
 8001f62:	f001 fe3d 	bl	8003be0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40010000 	.word	0x40010000
 8001f74:	58024400 	.word	0x58024400
 8001f78:	58021000 	.word	0x58021000

08001f7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0bc      	sub	sp, #240	@ 0xf0
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	22b8      	movs	r2, #184	@ 0xb8
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f009 fe75 	bl	800bc8c <memset>
  if(huart->Instance==USART1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a7f      	ldr	r2, [pc, #508]	@ (80021a4 <HAL_UART_MspInit+0x228>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d14f      	bne.n	800204c <HAL_UART_MspInit+0xd0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fac:	f04f 0201 	mov.w	r2, #1
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fbe:	f107 0320 	add.w	r3, r7, #32
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 fd92 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001fce:	f7ff fd19 	bl	8001a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd2:	4b75      	ldr	r3, [pc, #468]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8001fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd8:	4a73      	ldr	r2, [pc, #460]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fe2:	4b71      	ldr	r3, [pc, #452]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8001fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	4b6d      	ldr	r3, [pc, #436]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff6:	4a6c      	ldr	r2, [pc, #432]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002000:	4b69      	ldr	r3, [pc, #420]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800200e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002028:	2307      	movs	r3, #7
 800202a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002032:	4619      	mov	r1, r3
 8002034:	485d      	ldr	r0, [pc, #372]	@ (80021ac <HAL_UART_MspInit+0x230>)
 8002036:	f001 fdd3 	bl	8003be0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2025      	movs	r0, #37	@ 0x25
 8002040:	f000 ffbd 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002044:	2025      	movs	r0, #37	@ 0x25
 8002046:	f000 ffd4 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800204a:	e0a7      	b.n	800219c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a57      	ldr	r2, [pc, #348]	@ (80021b0 <HAL_UART_MspInit+0x234>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d14e      	bne.n	80020f4 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002056:	f04f 0202 	mov.w	r2, #2
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002068:	f107 0320 	add.w	r3, r7, #32
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fd3d 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_UART_MspInit+0x100>
      Error_Handler();
 8002078:	f7ff fcc4 	bl	8001a04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800207c:	4b4a      	ldr	r3, [pc, #296]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 800207e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002082:	4a49      	ldr	r2, [pc, #292]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8002084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002088:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800208c:	4b46      	ldr	r3, [pc, #280]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 800208e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800209a:	4b43      	ldr	r3, [pc, #268]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a0:	4a41      	ldr	r2, [pc, #260]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020aa:	4b3f      	ldr	r3, [pc, #252]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 80020ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80020b8:	2360      	movs	r3, #96	@ 0x60
 80020ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d0:	2307      	movs	r3, #7
 80020d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020da:	4619      	mov	r1, r3
 80020dc:	4835      	ldr	r0, [pc, #212]	@ (80021b4 <HAL_UART_MspInit+0x238>)
 80020de:	f001 fd7f 	bl	8003be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2026      	movs	r0, #38	@ 0x26
 80020e8:	f000 ff69 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ec:	2026      	movs	r0, #38	@ 0x26
 80020ee:	f000 ff80 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 80020f2:	e053      	b.n	800219c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2f      	ldr	r2, [pc, #188]	@ (80021b8 <HAL_UART_MspInit+0x23c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d14e      	bne.n	800219c <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020fe:	f04f 0202 	mov.w	r2, #2
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002110:	f107 0320 	add.w	r3, r7, #32
 8002114:	4618      	mov	r0, r3
 8002116:	f003 fce9 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002120:	f7ff fc70 	bl	8001a04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002124:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8002126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800212a:	4a1f      	ldr	r2, [pc, #124]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 800212c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002130:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8002136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800213a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002148:	4a17      	ldr	r2, [pc, #92]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_UART_MspInit+0x22c>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002160:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002164:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800217a:	2307      	movs	r3, #7
 800217c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002180:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002184:	4619      	mov	r1, r3
 8002186:	480b      	ldr	r0, [pc, #44]	@ (80021b4 <HAL_UART_MspInit+0x238>)
 8002188:	f001 fd2a 	bl	8003be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	2027      	movs	r0, #39	@ 0x27
 8002192:	f000 ff14 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002196:	2027      	movs	r0, #39	@ 0x27
 8002198:	f000 ff2b 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 800219c:	bf00      	nop
 800219e:	37f0      	adds	r7, #240	@ 0xf0
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40011000 	.word	0x40011000
 80021a8:	58024400 	.word	0x58024400
 80021ac:	58020000 	.word	0x58020000
 80021b0:	40004400 	.word	0x40004400
 80021b4:	58020c00 	.word	0x58020c00
 80021b8:	40004800 	.word	0x40004800

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <NMI_Handler+0x4>

080021c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <MemManage_Handler+0x4>

080021d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <BusFault_Handler+0x4>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <UsageFault_Handler+0x4>

080021e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002212:	f000 fdb5 	bl	8002d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <USART1_IRQHandler+0x10>)
 8002222:	f006 faa7 	bl	8008774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	240002b4 	.word	0x240002b4

08002230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <USART2_IRQHandler+0x10>)
 8002236:	f006 fa9d 	bl	8008774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	24000348 	.word	0x24000348

08002244 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <USART3_IRQHandler+0x10>)
 800224a:	f006 fa93 	bl	8008774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	240003dc 	.word	0x240003dc

08002258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_kill>:

int _kill(int pid, int sig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002272:	f009 fd5d 	bl	800bd30 <__errno>
 8002276:	4603      	mov	r3, r0
 8002278:	2216      	movs	r2, #22
 800227a:	601a      	str	r2, [r3, #0]
  return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_exit>:

void _exit (int status)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ffe7 	bl	8002268 <_kill>
  while (1) {}    /* Make sure we hang here */
 800229a:	bf00      	nop
 800229c:	e7fd      	b.n	800229a <_exit+0x12>

0800229e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e00a      	b.n	80022c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022b0:	f3af 8000 	nop.w
 80022b4:	4601      	mov	r1, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	60ba      	str	r2, [r7, #8]
 80022bc:	b2ca      	uxtb	r2, r1
 80022be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	dbf0      	blt.n	80022b0 <_read+0x12>
  }

  return len;
 80022ce:	687b      	ldr	r3, [r7, #4]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e009      	b.n	80022fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	60ba      	str	r2, [r7, #8]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fab8 	bl	8000868 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3301      	adds	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	dbf1      	blt.n	80022ea <_write+0x12>
  }
  return len;
 8002306:	687b      	ldr	r3, [r7, #4]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_close>:

int _close(int file)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002338:	605a      	str	r2, [r3, #4]
  return 0;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_isatty>:

int _isatty(int file)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002350:	2301      	movs	r3, #1
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800235e:	b480      	push	{r7}
 8002360:	b085      	sub	sp, #20
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002380:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <_sbrk+0x5c>)
 8002382:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <_sbrk+0x60>)
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800238c:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <_sbrk+0x64>)
 8002396:	4a12      	ldr	r2, [pc, #72]	@ (80023e0 <_sbrk+0x68>)
 8002398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d207      	bcs.n	80023b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a8:	f009 fcc2 	bl	800bd30 <__errno>
 80023ac:	4603      	mov	r3, r0
 80023ae:	220c      	movs	r2, #12
 80023b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e009      	b.n	80023cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023be:	4b07      	ldr	r3, [pc, #28]	@ (80023dc <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a05      	ldr	r2, [pc, #20]	@ (80023dc <_sbrk+0x64>)
 80023c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	24050000 	.word	0x24050000
 80023d8:	00000400 	.word	0x00000400
 80023dc:	24000708 	.word	0x24000708
 80023e0:	24000a98 	.word	0x24000a98

080023e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023e8:	4b3e      	ldr	r3, [pc, #248]	@ (80024e4 <SystemInit+0x100>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ee:	4a3d      	ldr	r2, [pc, #244]	@ (80024e4 <SystemInit+0x100>)
 80023f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023f8:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <SystemInit+0x104>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	2b06      	cmp	r3, #6
 8002402:	d807      	bhi.n	8002414 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002404:	4b38      	ldr	r3, [pc, #224]	@ (80024e8 <SystemInit+0x104>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 030f 	bic.w	r3, r3, #15
 800240c:	4a36      	ldr	r2, [pc, #216]	@ (80024e8 <SystemInit+0x104>)
 800240e:	f043 0307 	orr.w	r3, r3, #7
 8002412:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002414:	4b35      	ldr	r3, [pc, #212]	@ (80024ec <SystemInit+0x108>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a34      	ldr	r2, [pc, #208]	@ (80024ec <SystemInit+0x108>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002420:	4b32      	ldr	r3, [pc, #200]	@ (80024ec <SystemInit+0x108>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002426:	4b31      	ldr	r3, [pc, #196]	@ (80024ec <SystemInit+0x108>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4930      	ldr	r1, [pc, #192]	@ (80024ec <SystemInit+0x108>)
 800242c:	4b30      	ldr	r3, [pc, #192]	@ (80024f0 <SystemInit+0x10c>)
 800242e:	4013      	ands	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002432:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <SystemInit+0x104>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800243e:	4b2a      	ldr	r3, [pc, #168]	@ (80024e8 <SystemInit+0x104>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 030f 	bic.w	r3, r3, #15
 8002446:	4a28      	ldr	r2, [pc, #160]	@ (80024e8 <SystemInit+0x104>)
 8002448:	f043 0307 	orr.w	r3, r3, #7
 800244c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800244e:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <SystemInit+0x108>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002454:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <SystemInit+0x108>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <SystemInit+0x108>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002460:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <SystemInit+0x108>)
 8002462:	4a24      	ldr	r2, [pc, #144]	@ (80024f4 <SystemInit+0x110>)
 8002464:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002466:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <SystemInit+0x108>)
 8002468:	4a23      	ldr	r2, [pc, #140]	@ (80024f8 <SystemInit+0x114>)
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800246c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ec <SystemInit+0x108>)
 800246e:	4a23      	ldr	r2, [pc, #140]	@ (80024fc <SystemInit+0x118>)
 8002470:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002472:	4b1e      	ldr	r3, [pc, #120]	@ (80024ec <SystemInit+0x108>)
 8002474:	2200      	movs	r2, #0
 8002476:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <SystemInit+0x108>)
 800247a:	4a20      	ldr	r2, [pc, #128]	@ (80024fc <SystemInit+0x118>)
 800247c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800247e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <SystemInit+0x108>)
 8002480:	2200      	movs	r2, #0
 8002482:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <SystemInit+0x108>)
 8002486:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <SystemInit+0x118>)
 8002488:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800248a:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <SystemInit+0x108>)
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <SystemInit+0x108>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a15      	ldr	r2, [pc, #84]	@ (80024ec <SystemInit+0x108>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <SystemInit+0x108>)
 800249e:	2200      	movs	r2, #0
 80024a0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <SystemInit+0x108>)
 80024a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d113      	bne.n	80024d8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80024b0:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <SystemInit+0x108>)
 80024b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024b6:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <SystemInit+0x108>)
 80024b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024bc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <SystemInit+0x11c>)
 80024c2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024c6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <SystemInit+0x108>)
 80024ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024ce:	4a07      	ldr	r2, [pc, #28]	@ (80024ec <SystemInit+0x108>)
 80024d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00
 80024e8:	52002000 	.word	0x52002000
 80024ec:	58024400 	.word	0x58024400
 80024f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80024f4:	02020200 	.word	0x02020200
 80024f8:	01ff0000 	.word	0x01ff0000
 80024fc:	01010280 	.word	0x01010280
 8002500:	52004000 	.word	0x52004000

08002504 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002508:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <ExitRun0Mode+0x2c>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a08      	ldr	r2, [pc, #32]	@ (8002530 <ExitRun0Mode+0x2c>)
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002514:	bf00      	nop
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <ExitRun0Mode+0x2c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f9      	beq.n	8002516 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	58024800 	.word	0x58024800

08002534 <__CRC16>:
    0x40
};


static uint16_t __CRC16(uint8_t *puchMsg, uint16_t usDataLen)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
    uint8_t uchCRCHi = 0xFF;
 8002540:	23ff      	movs	r3, #255	@ 0xff
 8002542:	75fb      	strb	r3, [r7, #23]
    uint8_t uchCRCLo = 0xFF;
 8002544:	23ff      	movs	r3, #255	@ 0xff
 8002546:	75bb      	strb	r3, [r7, #22]
    uint8_t uIndex;
    int i = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
    uchCRCHi = 0xFF;
 800254c:	23ff      	movs	r3, #255	@ 0xff
 800254e:	75fb      	strb	r3, [r7, #23]
    uchCRCLo = 0xFF;
 8002550:	23ff      	movs	r3, #255	@ 0xff
 8002552:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 8002554:	e013      	b.n	800257e <__CRC16+0x4a>
    {
        uIndex = uchCRCHi ^ puchMsg[i];
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	4053      	eors	r3, r2
 8002562:	73fb      	strb	r3, [r7, #15]
        uchCRCHi = uchCRCLo ^ __auchCRCHi[uIndex];
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	4a0f      	ldr	r2, [pc, #60]	@ (80025a4 <__CRC16+0x70>)
 8002568:	5cd2      	ldrb	r2, [r2, r3]
 800256a:	7dbb      	ldrb	r3, [r7, #22]
 800256c:	4053      	eors	r3, r2
 800256e:	75fb      	strb	r3, [r7, #23]
        uchCRCLo = __auchCRCLo[uIndex] ;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <__CRC16+0x74>)
 8002574:	5cd3      	ldrb	r3, [r2, r3]
 8002576:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	3301      	adds	r3, #1
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	429a      	cmp	r2, r3
 8002584:	dbe7      	blt.n	8002556 <__CRC16+0x22>
    }
    return (uint16_t)(((uint16_t)uchCRCHi << 8) | (uint16_t)uchCRCLo) ;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	b21b      	sxth	r3, r3
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	b21a      	sxth	r2, r3
 800258e:	7dbb      	ldrb	r3, [r7, #22]
 8002590:	b21b      	sxth	r3, r3
 8002592:	4313      	orrs	r3, r2
 8002594:	b21b      	sxth	r3, r3
 8002596:	b29b      	uxth	r3, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	0800e23c 	.word	0x0800e23c
 80025a8:	0800e33c 	.word	0x0800e33c

080025ac <__CaliSum>:
static uint8_t __CaliSum(uint8_t *data, uint32_t len)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint8_t ucCheck = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	72fb      	strb	r3, [r7, #11]
    for(i=0; i<len; i++) ucCheck += *(data + i);
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e009      	b.n	80025d4 <__CaliSum+0x28>
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4413      	add	r3, r2
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	7afb      	ldrb	r3, [r7, #11]
 80025ca:	4413      	add	r3, r2
 80025cc:	72fb      	strb	r3, [r7, #11]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3301      	adds	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d3f1      	bcc.n	80025c0 <__CaliSum+0x14>
    return ucCheck;
 80025dc:	7afb      	ldrb	r3, [r7, #11]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <WitSerialWriteRegister>:
int32_t WitSerialWriteRegister(SerialWrite Write_func)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    if(!Write_func)return WIT_HAL_INVAL;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <WitSerialWriteRegister+0x14>
 80025fa:	f06f 0305 	mvn.w	r3, #5
 80025fe:	e003      	b.n	8002608 <WitSerialWriteRegister+0x1c>
    p_WitSerialWriteFunc = Write_func;
 8002600:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <WitSerialWriteRegister+0x28>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	2400070c 	.word	0x2400070c

08002618 <CopeWitData>:
static void CopeWitData(uint8_t ucIndex, uint16_t *p_data, uint32_t uiLen)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	73fb      	strb	r3, [r7, #15]
    uint32_t uiReg1 = 0, uiReg2 = 0, uiReg1Len = 0, uiReg2Len = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
    uint16_t *p_usReg1Val = p_data;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	617b      	str	r3, [r7, #20]
    uint16_t *p_usReg2Val = p_data+3;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3306      	adds	r3, #6
 800263e:	613b      	str	r3, [r7, #16]
    
    uiReg1Len = 4;
 8002640:	2304      	movs	r3, #4
 8002642:	61fb      	str	r3, [r7, #28]
    switch(ucIndex)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	3b50      	subs	r3, #80	@ 0x50
 8002648:	2b0f      	cmp	r3, #15
 800264a:	f200 8080 	bhi.w	800274e <CopeWitData+0x136>
 800264e:	a201      	add	r2, pc, #4	@ (adr r2, 8002654 <CopeWitData+0x3c>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	080026b9 	.word	0x080026b9
 8002658:	08002695 	.word	0x08002695
 800265c:	080026bf 	.word	0x080026bf
 8002660:	080026a7 	.word	0x080026a7
 8002664:	080026c5 	.word	0x080026c5
 8002668:	080026cb 	.word	0x080026cb
 800266c:	080026d1 	.word	0x080026d1
 8002670:	080026d7 	.word	0x080026d7
 8002674:	080026dd 	.word	0x080026dd
 8002678:	080026e3 	.word	0x080026e3
 800267c:	080026e9 	.word	0x080026e9
 8002680:	0800274f 	.word	0x0800274f
 8002684:	0800274f 	.word	0x0800274f
 8002688:	0800274f 	.word	0x0800274f
 800268c:	0800274f 	.word	0x0800274f
 8002690:	080026ef 	.word	0x080026ef
    {
        case WIT_ACC:   uiReg1 = AX;    uiReg1Len = 3;  uiReg2 = TEMP;  uiReg2Len = 1;  break;
 8002694:	2334      	movs	r3, #52	@ 0x34
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
 8002698:	2303      	movs	r3, #3
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	2340      	movs	r3, #64	@ 0x40
 800269e:	623b      	str	r3, [r7, #32]
 80026a0:	2301      	movs	r3, #1
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	e027      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_ANGLE: uiReg1 = Roll;  uiReg1Len = 3;  uiReg2 = VERSION;  uiReg2Len = 1;  break;
 80026a6:	233d      	movs	r3, #61	@ 0x3d
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026aa:	2303      	movs	r3, #3
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	232e      	movs	r3, #46	@ 0x2e
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	e01e      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_TIME:  uiReg1 = YYMM;	break;
 80026b8:	2330      	movs	r3, #48	@ 0x30
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80026bc:	e01b      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_GYRO:  uiReg1 = GX;  break;
 80026be:	2337      	movs	r3, #55	@ 0x37
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c2:	e018      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_MAGNETIC: uiReg1 = HX;  break;
 80026c4:	233a      	movs	r3, #58	@ 0x3a
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c8:	e015      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_DPORT: uiReg1 = D0Status;  break;
 80026ca:	2341      	movs	r3, #65	@ 0x41
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ce:	e012      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_PRESS: uiReg1 = PressureL;  break;
 80026d0:	2345      	movs	r3, #69	@ 0x45
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d4:	e00f      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_GPS:   uiReg1 = LonL;  break;
 80026d6:	2349      	movs	r3, #73	@ 0x49
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026da:	e00c      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_VELOCITY: uiReg1 = GPSHeight;  break;
 80026dc:	234d      	movs	r3, #77	@ 0x4d
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e0:	e009      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_QUATER:    uiReg1 = q0;  break;
 80026e2:	2351      	movs	r3, #81	@ 0x51
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e6:	e006      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_GSA:   uiReg1 = SVNUM;  break;
 80026e8:	2355      	movs	r3, #85	@ 0x55
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ec:	e003      	b.n	80026f6 <CopeWitData+0xde>
        case WIT_REGVALUE:  uiReg1 = s_uiReadRegIndex;  break;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <CopeWitData+0x140>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f4:	bf00      	nop
		default:
			return ;

    }
    if(uiLen == 3)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d103      	bne.n	8002704 <CopeWitData+0xec>
    {
        uiReg1Len = 3;
 80026fc:	2303      	movs	r3, #3
 80026fe:	61fb      	str	r3, [r7, #28]
        uiReg2Len = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
    }
    if(uiReg1Len)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00e      	beq.n	8002728 <CopeWitData+0x110>
	{
		memcpy(&sReg[uiReg1], p_usReg1Val, uiReg1Len<<1);
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4a13      	ldr	r2, [pc, #76]	@ (800275c <CopeWitData+0x144>)
 8002710:	1898      	adds	r0, r3, r2
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	461a      	mov	r2, r3
 8002718:	6979      	ldr	r1, [r7, #20]
 800271a:	f009 fb36 	bl	800bd8a <memcpy>
		p_WitRegUpdateCbFunc(uiReg1, uiReg1Len);
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <CopeWitData+0x148>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69f9      	ldr	r1, [r7, #28]
 8002724:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002726:	4798      	blx	r3
	}
    if(uiReg2Len)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <CopeWitData+0x138>
	{
		memcpy(&sReg[uiReg2], p_usReg2Val, uiReg2Len<<1);
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4a0a      	ldr	r2, [pc, #40]	@ (800275c <CopeWitData+0x144>)
 8002734:	1898      	adds	r0, r3, r2
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	461a      	mov	r2, r3
 800273c:	6939      	ldr	r1, [r7, #16]
 800273e:	f009 fb24 	bl	800bd8a <memcpy>
		p_WitRegUpdateCbFunc(uiReg2, uiReg2Len);
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <CopeWitData+0x148>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	6a38      	ldr	r0, [r7, #32]
 800274a:	4798      	blx	r3
 800274c:	e000      	b.n	8002750 <CopeWitData+0x138>
			return ;
 800274e:	bf00      	nop
	}
}
 8002750:	3728      	adds	r7, #40	@ 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	24000824 	.word	0x24000824
 800275c:	24000828 	.word	0x24000828
 8002760:	24000718 	.word	0x24000718

08002764 <WitSerialDataIn>:

void WitSerialDataIn(uint8_t ucData)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
    uint16_t usCRC16, usTemp, i, usData[4];
    uint8_t ucSum;

    if(p_WitRegUpdateCbFunc == NULL)return ;
 800276e:	4b8d      	ldr	r3, [pc, #564]	@ (80029a4 <WitSerialDataIn+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 810f 	beq.w	8002996 <WitSerialDataIn+0x232>
    s_ucWitDataBuff[s_uiWitDataCnt++] = ucData;
 8002778:	4b8b      	ldr	r3, [pc, #556]	@ (80029a8 <WitSerialDataIn+0x244>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	498a      	ldr	r1, [pc, #552]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002780:	600a      	str	r2, [r1, #0]
 8002782:	498a      	ldr	r1, [pc, #552]	@ (80029ac <WitSerialDataIn+0x248>)
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	54ca      	strb	r2, [r1, r3]
    switch(s_uiProtoclo)
 8002788:	4b89      	ldr	r3, [pc, #548]	@ (80029b0 <WitSerialDataIn+0x24c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b03      	cmp	r3, #3
 800278e:	f200 80f9 	bhi.w	8002984 <WitSerialDataIn+0x220>
 8002792:	2b02      	cmp	r3, #2
 8002794:	f080 80ef 	bcs.w	8002976 <WitSerialDataIn+0x212>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <WitSerialDataIn+0x3e>
 800279c:	2b01      	cmp	r3, #1
 800279e:	d06f      	beq.n	8002880 <WitSerialDataIn+0x11c>
 80027a0:	e0f0      	b.n	8002984 <WitSerialDataIn+0x220>
    {
        case WIT_PROTOCOL_NORMAL:
            if(s_ucWitDataBuff[0] != 0x55)
 80027a2:	4b82      	ldr	r3, [pc, #520]	@ (80029ac <WitSerialDataIn+0x248>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b55      	cmp	r3, #85	@ 0x55
 80027a8:	d00c      	beq.n	80027c4 <WitSerialDataIn+0x60>
            {
                s_uiWitDataCnt--;
 80027aa:	4b7f      	ldr	r3, [pc, #508]	@ (80029a8 <WitSerialDataIn+0x244>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	4a7d      	ldr	r2, [pc, #500]	@ (80029a8 <WitSerialDataIn+0x244>)
 80027b2:	6013      	str	r3, [r2, #0]
                memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 80027b4:	4b7c      	ldr	r3, [pc, #496]	@ (80029a8 <WitSerialDataIn+0x244>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	497e      	ldr	r1, [pc, #504]	@ (80029b4 <WitSerialDataIn+0x250>)
 80027bc:	487b      	ldr	r0, [pc, #492]	@ (80029ac <WitSerialDataIn+0x248>)
 80027be:	f009 fae4 	bl	800bd8a <memcpy>
                return ;
 80027c2:	e0eb      	b.n	800299c <WitSerialDataIn+0x238>
            }
            if(s_uiWitDataCnt >= 11)
 80027c4:	4b78      	ldr	r3, [pc, #480]	@ (80029a8 <WitSerialDataIn+0x244>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b0a      	cmp	r3, #10
 80027ca:	f240 80d8 	bls.w	800297e <WitSerialDataIn+0x21a>
            {
                ucSum = __CaliSum(s_ucWitDataBuff, 10);
 80027ce:	210a      	movs	r1, #10
 80027d0:	4876      	ldr	r0, [pc, #472]	@ (80029ac <WitSerialDataIn+0x248>)
 80027d2:	f7ff feeb 	bl	80025ac <__CaliSum>
 80027d6:	4603      	mov	r3, r0
 80027d8:	747b      	strb	r3, [r7, #17]
                if(ucSum != s_ucWitDataBuff[10])
 80027da:	4b74      	ldr	r3, [pc, #464]	@ (80029ac <WitSerialDataIn+0x248>)
 80027dc:	7a9b      	ldrb	r3, [r3, #10]
 80027de:	7c7a      	ldrb	r2, [r7, #17]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d00c      	beq.n	80027fe <WitSerialDataIn+0x9a>
                {
                    s_uiWitDataCnt--;
 80027e4:	4b70      	ldr	r3, [pc, #448]	@ (80029a8 <WitSerialDataIn+0x244>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	4a6f      	ldr	r2, [pc, #444]	@ (80029a8 <WitSerialDataIn+0x244>)
 80027ec:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 80027ee:	4b6e      	ldr	r3, [pc, #440]	@ (80029a8 <WitSerialDataIn+0x244>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	496f      	ldr	r1, [pc, #444]	@ (80029b4 <WitSerialDataIn+0x250>)
 80027f6:	486d      	ldr	r0, [pc, #436]	@ (80029ac <WitSerialDataIn+0x248>)
 80027f8:	f009 fac7 	bl	800bd8a <memcpy>
                    return ;
 80027fc:	e0ce      	b.n	800299c <WitSerialDataIn+0x238>
                }
                usData[0] = ((uint16_t)s_ucWitDataBuff[3] << 8) | s_ucWitDataBuff[2];
 80027fe:	4b6b      	ldr	r3, [pc, #428]	@ (80029ac <WitSerialDataIn+0x248>)
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	b21b      	sxth	r3, r3
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	b21a      	sxth	r2, r3
 8002808:	4b68      	ldr	r3, [pc, #416]	@ (80029ac <WitSerialDataIn+0x248>)
 800280a:	789b      	ldrb	r3, [r3, #2]
 800280c:	b21b      	sxth	r3, r3
 800280e:	4313      	orrs	r3, r2
 8002810:	b21b      	sxth	r3, r3
 8002812:	b29b      	uxth	r3, r3
 8002814:	813b      	strh	r3, [r7, #8]
                usData[1] = ((uint16_t)s_ucWitDataBuff[5] << 8) | s_ucWitDataBuff[4];
 8002816:	4b65      	ldr	r3, [pc, #404]	@ (80029ac <WitSerialDataIn+0x248>)
 8002818:	795b      	ldrb	r3, [r3, #5]
 800281a:	b21b      	sxth	r3, r3
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	b21a      	sxth	r2, r3
 8002820:	4b62      	ldr	r3, [pc, #392]	@ (80029ac <WitSerialDataIn+0x248>)
 8002822:	791b      	ldrb	r3, [r3, #4]
 8002824:	b21b      	sxth	r3, r3
 8002826:	4313      	orrs	r3, r2
 8002828:	b21b      	sxth	r3, r3
 800282a:	b29b      	uxth	r3, r3
 800282c:	817b      	strh	r3, [r7, #10]
                usData[2] = ((uint16_t)s_ucWitDataBuff[7] << 8) | s_ucWitDataBuff[6];
 800282e:	4b5f      	ldr	r3, [pc, #380]	@ (80029ac <WitSerialDataIn+0x248>)
 8002830:	79db      	ldrb	r3, [r3, #7]
 8002832:	b21b      	sxth	r3, r3
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	b21a      	sxth	r2, r3
 8002838:	4b5c      	ldr	r3, [pc, #368]	@ (80029ac <WitSerialDataIn+0x248>)
 800283a:	799b      	ldrb	r3, [r3, #6]
 800283c:	b21b      	sxth	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	b21b      	sxth	r3, r3
 8002842:	b29b      	uxth	r3, r3
 8002844:	81bb      	strh	r3, [r7, #12]
                usData[3] = ((uint16_t)s_ucWitDataBuff[9] << 8) | s_ucWitDataBuff[8];
 8002846:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <WitSerialDataIn+0x248>)
 8002848:	7a5b      	ldrb	r3, [r3, #9]
 800284a:	b21b      	sxth	r3, r3
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	b21a      	sxth	r2, r3
 8002850:	4b56      	ldr	r3, [pc, #344]	@ (80029ac <WitSerialDataIn+0x248>)
 8002852:	7a1b      	ldrb	r3, [r3, #8]
 8002854:	b21b      	sxth	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b21b      	sxth	r3, r3
 800285a:	b29b      	uxth	r3, r3
 800285c:	81fb      	strh	r3, [r7, #14]
                CopeWitData(s_ucWitDataBuff[1], usData, 4);
 800285e:	4b53      	ldr	r3, [pc, #332]	@ (80029ac <WitSerialDataIn+0x248>)
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	f107 0108 	add.w	r1, r7, #8
 8002866:	2204      	movs	r2, #4
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fed5 	bl	8002618 <CopeWitData>
                printf(usData);
 800286e:	f107 0308 	add.w	r3, r7, #8
 8002872:	4618      	mov	r0, r3
 8002874:	f009 f898 	bl	800b9a8 <iprintf>
                s_uiWitDataCnt = 0;
 8002878:	4b4b      	ldr	r3, [pc, #300]	@ (80029a8 <WitSerialDataIn+0x244>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
            }
        break;
 800287e:	e07e      	b.n	800297e <WitSerialDataIn+0x21a>
        case WIT_PROTOCOL_MODBUS:
            if(s_uiWitDataCnt > 2)
 8002880:	4b49      	ldr	r3, [pc, #292]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d97c      	bls.n	8002982 <WitSerialDataIn+0x21e>
            {
                if(s_ucWitDataBuff[1] != FuncR)
 8002888:	4b48      	ldr	r3, [pc, #288]	@ (80029ac <WitSerialDataIn+0x248>)
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d00c      	beq.n	80028aa <WitSerialDataIn+0x146>
                {
                    s_uiWitDataCnt--;
 8002890:	4b45      	ldr	r3, [pc, #276]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3b01      	subs	r3, #1
 8002896:	4a44      	ldr	r2, [pc, #272]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002898:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 800289a:	4b43      	ldr	r3, [pc, #268]	@ (80029a8 <WitSerialDataIn+0x244>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	4944      	ldr	r1, [pc, #272]	@ (80029b4 <WitSerialDataIn+0x250>)
 80028a2:	4842      	ldr	r0, [pc, #264]	@ (80029ac <WitSerialDataIn+0x248>)
 80028a4:	f009 fa71 	bl	800bd8a <memcpy>
                    return ;
 80028a8:	e078      	b.n	800299c <WitSerialDataIn+0x238>
                }
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 80028aa:	4b40      	ldr	r3, [pc, #256]	@ (80029ac <WitSerialDataIn+0x248>)
 80028ac:	789b      	ldrb	r3, [r3, #2]
 80028ae:	3305      	adds	r3, #5
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b3d      	ldr	r3, [pc, #244]	@ (80029a8 <WitSerialDataIn+0x244>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d86f      	bhi.n	800299a <WitSerialDataIn+0x236>
                usTemp = ((uint16_t)s_ucWitDataBuff[s_uiWitDataCnt-2] << 8) | s_ucWitDataBuff[s_uiWitDataCnt-1];
 80028ba:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <WitSerialDataIn+0x244>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3b02      	subs	r3, #2
 80028c0:	4a3a      	ldr	r2, [pc, #232]	@ (80029ac <WitSerialDataIn+0x248>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <WitSerialDataIn+0x244>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	4936      	ldr	r1, [pc, #216]	@ (80029ac <WitSerialDataIn+0x248>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	b21b      	sxth	r3, r3
 80028d6:	4313      	orrs	r3, r2
 80028d8:	b21b      	sxth	r3, r3
 80028da:	82bb      	strh	r3, [r7, #20]
                usCRC16 = __CRC16(s_ucWitDataBuff, s_uiWitDataCnt-2);
 80028dc:	4b32      	ldr	r3, [pc, #200]	@ (80029a8 <WitSerialDataIn+0x244>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b02      	subs	r3, #2
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	4830      	ldr	r0, [pc, #192]	@ (80029ac <WitSerialDataIn+0x248>)
 80028ea:	f7ff fe23 	bl	8002534 <__CRC16>
 80028ee:	4603      	mov	r3, r0
 80028f0:	827b      	strh	r3, [r7, #18]
                if(usTemp != usCRC16)
 80028f2:	8aba      	ldrh	r2, [r7, #20]
 80028f4:	8a7b      	ldrh	r3, [r7, #18]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d00c      	beq.n	8002914 <WitSerialDataIn+0x1b0>
                {
                    s_uiWitDataCnt--;
 80028fa:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <WitSerialDataIn+0x244>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3b01      	subs	r3, #1
 8002900:	4a29      	ldr	r2, [pc, #164]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002902:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002904:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	492a      	ldr	r1, [pc, #168]	@ (80029b4 <WitSerialDataIn+0x250>)
 800290c:	4827      	ldr	r0, [pc, #156]	@ (80029ac <WitSerialDataIn+0x248>)
 800290e:	f009 fa3c 	bl	800bd8a <memcpy>
                    return ;
 8002912:	e043      	b.n	800299c <WitSerialDataIn+0x238>
                }
                usTemp = s_ucWitDataBuff[2] >> 1;
 8002914:	4b25      	ldr	r3, [pc, #148]	@ (80029ac <WitSerialDataIn+0x248>)
 8002916:	789b      	ldrb	r3, [r3, #2]
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	82bb      	strh	r3, [r7, #20]
                for(i = 0; i < usTemp; i++)
 800291e:	2300      	movs	r3, #0
 8002920:	82fb      	strh	r3, [r7, #22]
 8002922:	e019      	b.n	8002958 <WitSerialDataIn+0x1f4>
                {
                    sReg[i+s_uiReadRegIndex] = ((uint16_t)s_ucWitDataBuff[(i<<1)+3] << 8) | s_ucWitDataBuff[(i<<1)+4];
 8002924:	8afb      	ldrh	r3, [r7, #22]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	3303      	adds	r3, #3
 800292a:	4a20      	ldr	r2, [pc, #128]	@ (80029ac <WitSerialDataIn+0x248>)
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	b21b      	sxth	r3, r3
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	b219      	sxth	r1, r3
 8002934:	8afb      	ldrh	r3, [r7, #22]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	3304      	adds	r3, #4
 800293a:	4a1c      	ldr	r2, [pc, #112]	@ (80029ac <WitSerialDataIn+0x248>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	b21a      	sxth	r2, r3
 8002940:	8af8      	ldrh	r0, [r7, #22]
 8002942:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <WitSerialDataIn+0x254>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4403      	add	r3, r0
 8002948:	430a      	orrs	r2, r1
 800294a:	b211      	sxth	r1, r2
 800294c:	4a1b      	ldr	r2, [pc, #108]	@ (80029bc <WitSerialDataIn+0x258>)
 800294e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < usTemp; i++)
 8002952:	8afb      	ldrh	r3, [r7, #22]
 8002954:	3301      	adds	r3, #1
 8002956:	82fb      	strh	r3, [r7, #22]
 8002958:	8afa      	ldrh	r2, [r7, #22]
 800295a:	8abb      	ldrh	r3, [r7, #20]
 800295c:	429a      	cmp	r2, r3
 800295e:	d3e1      	bcc.n	8002924 <WitSerialDataIn+0x1c0>
                }
                p_WitRegUpdateCbFunc(s_uiReadRegIndex, usTemp);
 8002960:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <WitSerialDataIn+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a14      	ldr	r2, [pc, #80]	@ (80029b8 <WitSerialDataIn+0x254>)
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	8ab9      	ldrh	r1, [r7, #20]
 800296a:	4610      	mov	r0, r2
 800296c:	4798      	blx	r3
                s_uiWitDataCnt = 0;
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
            }
        break;
 8002974:	e005      	b.n	8002982 <WitSerialDataIn+0x21e>
        case WIT_PROTOCOL_CAN:
        case WIT_PROTOCOL_I2C:
        s_uiWitDataCnt = 0;
 8002976:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
        break;
 800297c:	e002      	b.n	8002984 <WitSerialDataIn+0x220>
        break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <WitSerialDataIn+0x220>
        break;
 8002982:	bf00      	nop
    }
    if(s_uiWitDataCnt == WIT_DATA_BUFF_SIZE)s_uiWitDataCnt = 0;
 8002984:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800298c:	d106      	bne.n	800299c <WitSerialDataIn+0x238>
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <WitSerialDataIn+0x244>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e002      	b.n	800299c <WitSerialDataIn+0x238>
    if(p_WitRegUpdateCbFunc == NULL)return ;
 8002996:	bf00      	nop
 8002998:	e000      	b.n	800299c <WitSerialDataIn+0x238>
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 800299a:	bf00      	nop
}
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	24000718 	.word	0x24000718
 80029a8:	2400081c 	.word	0x2400081c
 80029ac:	2400071c 	.word	0x2400071c
 80029b0:	24000820 	.word	0x24000820
 80029b4:	2400071d 	.word	0x2400071d
 80029b8:	24000824 	.word	0x24000824
 80029bc:	24000828 	.word	0x24000828

080029c0 <WitRegisterCallBack>:
        case WIT_PROTOCOL_I2C:
            break;
    }
}
int32_t WitRegisterCallBack(RegUpdateCb update_func)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    if(!update_func)return WIT_HAL_INVAL;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <WitRegisterCallBack+0x14>
 80029ce:	f06f 0305 	mvn.w	r3, #5
 80029d2:	e003      	b.n	80029dc <WitRegisterCallBack+0x1c>
    p_WitRegUpdateCbFunc = update_func;
 80029d4:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <WitRegisterCallBack+0x28>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	24000718 	.word	0x24000718

080029ec <WitReadReg>:
            return WIT_HAL_INVAL;        
    }
    return WIT_HAL_OK;
}
int32_t WitReadReg(uint32_t uiReg, uint32_t uiReadNum)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
    uint16_t usTemp, i;
    uint8_t ucBuff[8];
    if((uiReg + uiReadNum) >= REGSIZE)return WIT_HAL_INVAL;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	2b8f      	cmp	r3, #143	@ 0x8f
 80029fe:	d902      	bls.n	8002a06 <WitReadReg+0x1a>
 8002a00:	f06f 0305 	mvn.w	r3, #5
 8002a04:	e0e5      	b.n	8002bd2 <WitReadReg+0x1e6>
    switch(s_uiProtoclo)
 8002a06:	4b75      	ldr	r3, [pc, #468]	@ (8002bdc <WitReadReg+0x1f0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	f200 80d9 	bhi.w	8002bc2 <WitReadReg+0x1d6>
 8002a10:	a201      	add	r2, pc, #4	@ (adr r2, 8002a18 <WitReadReg+0x2c>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a6d 	.word	0x08002a6d
 8002a20:	08002ae5 	.word	0x08002ae5
 8002a24:	08002b2b 	.word	0x08002b2b
    {
        case WIT_PROTOCOL_NORMAL:
            if(uiReadNum > 4)return WIT_HAL_INVAL;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d902      	bls.n	8002a34 <WitReadReg+0x48>
 8002a2e:	f06f 0305 	mvn.w	r3, #5
 8002a32:	e0ce      	b.n	8002bd2 <WitReadReg+0x1e6>
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8002a34:	4b6a      	ldr	r3, [pc, #424]	@ (8002be0 <WitReadReg+0x1f4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <WitReadReg+0x56>
 8002a3c:	f06f 0304 	mvn.w	r3, #4
 8002a40:	e0c7      	b.n	8002bd2 <WitReadReg+0x1e6>
            ucBuff[0] = 0xFF;
 8002a42:	23ff      	movs	r3, #255	@ 0xff
 8002a44:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8002a46:	23aa      	movs	r3, #170	@ 0xaa
 8002a48:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8002a4a:	2327      	movs	r3, #39	@ 0x27
 8002a4c:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	743b      	strb	r3, [r7, #16]
            p_WitSerialWriteFunc(ucBuff, 5);
 8002a5c:	4b60      	ldr	r3, [pc, #384]	@ (8002be0 <WitReadReg+0x1f4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	2105      	movs	r1, #5
 8002a66:	4610      	mov	r0, r2
 8002a68:	4798      	blx	r3
            break;
 8002a6a:	e0ae      	b.n	8002bca <WitReadReg+0x1de>
        case WIT_PROTOCOL_MODBUS:
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8002a6c:	4b5c      	ldr	r3, [pc, #368]	@ (8002be0 <WitReadReg+0x1f4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <WitReadReg+0x8e>
 8002a74:	f06f 0304 	mvn.w	r3, #4
 8002a78:	e0ab      	b.n	8002bd2 <WitReadReg+0x1e6>
            usTemp = uiReadNum << 1;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	82bb      	strh	r3, [r7, #20]
            if((usTemp + 5) > WIT_DATA_BUFF_SIZE)return WIT_HAL_NOMEM;
 8002a82:	8abb      	ldrh	r3, [r7, #20]
 8002a84:	2bfb      	cmp	r3, #251	@ 0xfb
 8002a86:	d902      	bls.n	8002a8e <WitReadReg+0xa2>
 8002a88:	f06f 0303 	mvn.w	r3, #3
 8002a8c:	e0a1      	b.n	8002bd2 <WitReadReg+0x1e6>
            ucBuff[0] = s_ucAddr;
 8002a8e:	4b55      	ldr	r3, [pc, #340]	@ (8002be4 <WitReadReg+0x1f8>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = FuncR;
 8002a94:	2303      	movs	r3, #3
 8002a96:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = uiReg >> 8;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xFF;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReadNum >> 8;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	743b      	strb	r3, [r7, #16]
            ucBuff[5] = uiReadNum & 0xff;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	747b      	strb	r3, [r7, #17]
            usTemp = __CRC16(ucBuff, 6);
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	2106      	movs	r1, #6
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fd3a 	bl	8002534 <__CRC16>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	82bb      	strh	r3, [r7, #20]
            ucBuff[6] = usTemp >> 8;
 8002ac4:	8abb      	ldrh	r3, [r7, #20]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	74bb      	strb	r3, [r7, #18]
            ucBuff[7] = usTemp & 0xff;
 8002ace:	8abb      	ldrh	r3, [r7, #20]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	74fb      	strb	r3, [r7, #19]
            p_WitSerialWriteFunc(ucBuff, 8);
 8002ad4:	4b42      	ldr	r3, [pc, #264]	@ (8002be0 <WitReadReg+0x1f4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f107 020c 	add.w	r2, r7, #12
 8002adc:	2108      	movs	r1, #8
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4798      	blx	r3
            break;
 8002ae2:	e072      	b.n	8002bca <WitReadReg+0x1de>
        case WIT_PROTOCOL_CAN:
            if(uiReadNum > 3)return WIT_HAL_INVAL;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d902      	bls.n	8002af0 <WitReadReg+0x104>
 8002aea:	f06f 0305 	mvn.w	r3, #5
 8002aee:	e070      	b.n	8002bd2 <WitReadReg+0x1e6>
            if(p_WitCanWriteFunc == NULL)return WIT_HAL_EMPTY;
 8002af0:	4b3d      	ldr	r3, [pc, #244]	@ (8002be8 <WitReadReg+0x1fc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <WitReadReg+0x112>
 8002af8:	f06f 0304 	mvn.w	r3, #4
 8002afc:	e069      	b.n	8002bd2 <WitReadReg+0x1e6>
            ucBuff[0] = 0xFF;
 8002afe:	23ff      	movs	r3, #255	@ 0xff
 8002b00:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8002b02:	23aa      	movs	r3, #170	@ 0xaa
 8002b04:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8002b06:	2327      	movs	r3, #39	@ 0x27
 8002b08:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	743b      	strb	r3, [r7, #16]
            p_WitCanWriteFunc(s_ucAddr, ucBuff, 5);
 8002b18:	4b33      	ldr	r3, [pc, #204]	@ (8002be8 <WitReadReg+0x1fc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a31      	ldr	r2, [pc, #196]	@ (8002be4 <WitReadReg+0x1f8>)
 8002b1e:	7810      	ldrb	r0, [r2, #0]
 8002b20:	f107 010c 	add.w	r1, r7, #12
 8002b24:	2205      	movs	r2, #5
 8002b26:	4798      	blx	r3
            break;
 8002b28:	e04f      	b.n	8002bca <WitReadReg+0x1de>
        case WIT_PROTOCOL_I2C:
            if(p_WitI2cReadFunc == NULL)return WIT_HAL_EMPTY;
 8002b2a:	4b30      	ldr	r3, [pc, #192]	@ (8002bec <WitReadReg+0x200>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <WitReadReg+0x14c>
 8002b32:	f06f 0304 	mvn.w	r3, #4
 8002b36:	e04c      	b.n	8002bd2 <WitReadReg+0x1e6>
            usTemp = uiReadNum << 1;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	82bb      	strh	r3, [r7, #20]
            if(WIT_DATA_BUFF_SIZE < usTemp)return WIT_HAL_NOMEM;
 8002b40:	8abb      	ldrh	r3, [r7, #20]
 8002b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b46:	d902      	bls.n	8002b4e <WitReadReg+0x162>
 8002b48:	f06f 0303 	mvn.w	r3, #3
 8002b4c:	e041      	b.n	8002bd2 <WitReadReg+0x1e6>
            if(p_WitI2cReadFunc(s_ucAddr << 1, uiReg, s_ucWitDataBuff, usTemp) == 1)
 8002b4e:	4b27      	ldr	r3, [pc, #156]	@ (8002bec <WitReadReg+0x200>)
 8002b50:	681c      	ldr	r4, [r3, #0]
 8002b52:	4b24      	ldr	r3, [pc, #144]	@ (8002be4 <WitReadReg+0x1f8>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	b2d8      	uxtb	r0, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	b2d9      	uxtb	r1, r3
 8002b5e:	8abb      	ldrh	r3, [r7, #20]
 8002b60:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <WitReadReg+0x204>)
 8002b62:	47a0      	blx	r4
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d12e      	bne.n	8002bc8 <WitReadReg+0x1dc>
            {
                if(p_WitRegUpdateCbFunc == NULL)return WIT_HAL_EMPTY;
 8002b6a:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <WitReadReg+0x208>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <WitReadReg+0x18c>
 8002b72:	f06f 0304 	mvn.w	r3, #4
 8002b76:	e02c      	b.n	8002bd2 <WitReadReg+0x1e6>
                for(i = 0; i < uiReadNum; i++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	82fb      	strh	r3, [r7, #22]
 8002b7c:	e017      	b.n	8002bae <WitReadReg+0x1c2>
                {
                    sReg[i+uiReg] = ((uint16_t)s_ucWitDataBuff[(i<<1)+1] << 8) | s_ucWitDataBuff[i<<1];
 8002b7e:	8afb      	ldrh	r3, [r7, #22]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf0 <WitReadReg+0x204>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	b219      	sxth	r1, r3
 8002b8e:	8afb      	ldrh	r3, [r7, #22]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <WitReadReg+0x204>)
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	8af8      	ldrh	r0, [r7, #22]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4403      	add	r3, r0
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	b211      	sxth	r1, r2
 8002ba2:	4a15      	ldr	r2, [pc, #84]	@ (8002bf8 <WitReadReg+0x20c>)
 8002ba4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < uiReadNum; i++)
 8002ba8:	8afb      	ldrh	r3, [r7, #22]
 8002baa:	3301      	adds	r3, #1
 8002bac:	82fb      	strh	r3, [r7, #22]
 8002bae:	8afb      	ldrh	r3, [r7, #22]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d8e3      	bhi.n	8002b7e <WitReadReg+0x192>
                }
                p_WitRegUpdateCbFunc(uiReg, uiReadNum);
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <WitReadReg+0x208>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6839      	ldr	r1, [r7, #0]
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
            }
			
            break;
 8002bc0:	e002      	b.n	8002bc8 <WitReadReg+0x1dc>
		default: 
            return WIT_HAL_INVAL;
 8002bc2:	f06f 0305 	mvn.w	r3, #5
 8002bc6:	e004      	b.n	8002bd2 <WitReadReg+0x1e6>
            break;
 8002bc8:	bf00      	nop
    }
    s_uiReadRegIndex = uiReg;
 8002bca:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <WitReadReg+0x210>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6013      	str	r3, [r2, #0]

    return WIT_HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd90      	pop	{r4, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	24000820 	.word	0x24000820
 8002be0:	2400070c 	.word	0x2400070c
 8002be4:	24000024 	.word	0x24000024
 8002be8:	24000714 	.word	0x24000714
 8002bec:	24000710 	.word	0x24000710
 8002bf0:	2400071c 	.word	0x2400071c
 8002bf4:	24000718 	.word	0x24000718
 8002bf8:	24000828 	.word	0x24000828
 8002bfc:	24000824 	.word	0x24000824

08002c00 <WitInit>:
int32_t WitInit(uint32_t uiProtocol, uint8_t ucAddr)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
	if(uiProtocol > WIT_PROTOCOL_I2C)return WIT_HAL_INVAL;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d902      	bls.n	8002c18 <WitInit+0x18>
 8002c12:	f06f 0305 	mvn.w	r3, #5
 8002c16:	e009      	b.n	8002c2c <WitInit+0x2c>
    s_uiProtoclo = uiProtocol;
 8002c18:	4a07      	ldr	r2, [pc, #28]	@ (8002c38 <WitInit+0x38>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6013      	str	r3, [r2, #0]
    s_ucAddr = ucAddr;
 8002c1e:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <WitInit+0x3c>)
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	7013      	strb	r3, [r2, #0]
    s_uiWitDataCnt = 0;
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <WitInit+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
    return WIT_HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	24000820 	.word	0x24000820
 8002c3c:	24000024 	.word	0x24000024
 8002c40:	2400081c 	.word	0x2400081c

08002c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c44:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002c80 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002c48:	f7ff fc5c 	bl	8002504 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c4c:	f7ff fbca 	bl	80023e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	@ (8002c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	@ (8002c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	@ (8002c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c76:	f009 f861 	bl	800bd3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7fe f813 	bl	8000ca4 <main>
  bx  lr
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c80:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002c84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c88:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8002c8c:	0800e800 	.word	0x0800e800
  ldr r2, =_sbss
 8002c90:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8002c94:	24000a98 	.word	0x24000a98

08002c98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC3_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	f000 f980 	bl	8002fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ca8:	f002 fd4a 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <HAL_Init+0x68>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	4913      	ldr	r1, [pc, #76]	@ (8002d08 <HAL_Init+0x6c>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <HAL_Init+0x68>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	4a0e      	ldr	r2, [pc, #56]	@ (8002d08 <HAL_Init+0x6c>)
 8002cd0:	5cd3      	ldrb	r3, [r2, r3]
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8002d0c <HAL_Init+0x70>)
 8002cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d10 <HAL_Init+0x74>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f000 f814 	bl	8002d14 <HAL_InitTick>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e002      	b.n	8002cfc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf6:	f7ff f85f 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	58024400 	.word	0x58024400
 8002d08:	0800e22c 	.word	0x0800e22c
 8002d0c:	24000020 	.word	0x24000020
 8002d10:	2400001c 	.word	0x2400001c

08002d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d1c:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_InitTick+0x60>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e021      	b.n	8002d6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <HAL_InitTick+0x64>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_InitTick+0x60>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f965 	bl	800300e <HAL_SYSTICK_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00e      	b.n	8002d6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d80a      	bhi.n	8002d6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d54:	2200      	movs	r2, #0
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f000 f92f 	bl	8002fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d60:	4a06      	ldr	r2, [pc, #24]	@ (8002d7c <HAL_InitTick+0x68>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	2400002c 	.word	0x2400002c
 8002d78:	2400001c 	.word	0x2400001c
 8002d7c:	24000028 	.word	0x24000028

08002d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_IncTick+0x20>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_IncTick+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_IncTick+0x24>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	2400002c 	.word	0x2400002c
 8002da4:	24000948 	.word	0x24000948

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b03      	ldr	r3, [pc, #12]	@ (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	24000948 	.word	0x24000948

08002dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff ffee 	bl	8002da8 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d005      	beq.n	8002de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dda:	4b0a      	ldr	r3, [pc, #40]	@ (8002e04 <HAL_Delay+0x44>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002de6:	bf00      	nop
 8002de8:	f7ff ffde 	bl	8002da8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d8f7      	bhi.n	8002de8 <HAL_Delay+0x28>
  {
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2400002c 	.word	0x2400002c

08002e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e18:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <__NVIC_SetPriorityGrouping+0x40>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e24:	4013      	ands	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e30:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e36:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <__NVIC_SetPriorityGrouping+0x40>)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	60d3      	str	r3, [r2, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00
 8002e4c:	05fa0000 	.word	0x05fa0000

08002e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e54:	4b04      	ldr	r3, [pc, #16]	@ (8002e68 <__NVIC_GetPriorityGrouping+0x18>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f003 0307 	and.w	r3, r3, #7
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	db0b      	blt.n	8002e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4907      	ldr	r1, [pc, #28]	@ (8002ea4 <__NVIC_EnableIRQ+0x38>)
 8002e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db0a      	blt.n	8002ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	490c      	ldr	r1, [pc, #48]	@ (8002ef4 <__NVIC_SetPriority+0x4c>)
 8002ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed0:	e00a      	b.n	8002ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4908      	ldr	r1, [pc, #32]	@ (8002ef8 <__NVIC_SetPriority+0x50>)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	3b04      	subs	r3, #4
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	761a      	strb	r2, [r3, #24]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000e100 	.word	0xe000e100
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f1c3 0307 	rsb	r3, r3, #7
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	bf28      	it	cs
 8002f1a:	2304      	movcs	r3, #4
 8002f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d902      	bls.n	8002f2c <NVIC_EncodePriority+0x30>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3b03      	subs	r3, #3
 8002f2a:	e000      	b.n	8002f2e <NVIC_EncodePriority+0x32>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	401a      	ands	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43d9      	mvns	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	4313      	orrs	r3, r2
         );
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	@ 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f74:	d301      	bcc.n	8002f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00f      	b.n	8002f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <SysTick_Config+0x40>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f82:	210f      	movs	r1, #15
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f7ff ff8e 	bl	8002ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <SysTick_Config+0x40>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f92:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <SysTick_Config+0x40>)
 8002f94:	2207      	movs	r2, #7
 8002f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	e000e010 	.word	0xe000e010

08002fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff29 	bl	8002e08 <__NVIC_SetPriorityGrouping>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff40 	bl	8002e50 <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff90 	bl	8002efc <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff5f 	bl	8002ea8 <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff33 	bl	8002e6c <__NVIC_EnableIRQ>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffa4 	bl	8002f64 <SysTick_Config>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800302c:	f3bf 8f5f 	dmb	sy
}
 8003030:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003032:	4b07      	ldr	r3, [pc, #28]	@ (8003050 <HAL_MPU_Disable+0x28>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	4a06      	ldr	r2, [pc, #24]	@ (8003050 <HAL_MPU_Disable+0x28>)
 8003038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800303c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800303e:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_MPU_Disable+0x2c>)
 8003040:	2200      	movs	r2, #0
 8003042:	605a      	str	r2, [r3, #4]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000ed00 	.word	0xe000ed00
 8003054:	e000ed90 	.word	0xe000ed90

08003058 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003060:	4a0b      	ldr	r2, [pc, #44]	@ (8003090 <HAL_MPU_Enable+0x38>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800306a:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <HAL_MPU_Enable+0x3c>)
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <HAL_MPU_Enable+0x3c>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003074:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003076:	f3bf 8f4f 	dsb	sy
}
 800307a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800307c:	f3bf 8f6f 	isb	sy
}
 8003080:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed90 	.word	0xe000ed90
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	785a      	ldrb	r2, [r3, #1]
 80030a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003114 <HAL_MPU_ConfigRegion+0x7c>)
 80030a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80030a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <HAL_MPU_ConfigRegion+0x7c>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	4a19      	ldr	r2, [pc, #100]	@ (8003114 <HAL_MPU_ConfigRegion+0x7c>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80030b4:	4a17      	ldr	r2, [pc, #92]	@ (8003114 <HAL_MPU_ConfigRegion+0x7c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7b1b      	ldrb	r3, [r3, #12]
 80030c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7adb      	ldrb	r3, [r3, #11]
 80030c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7a9b      	ldrb	r3, [r3, #10]
 80030ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7b5b      	ldrb	r3, [r3, #13]
 80030d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7b9b      	ldrb	r3, [r3, #14]
 80030de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7bdb      	ldrb	r3, [r3, #15]
 80030e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7a5b      	ldrb	r3, [r3, #9]
 80030ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	7a1b      	ldrb	r3, [r3, #8]
 80030f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	7812      	ldrb	r2, [r2, #0]
 80030fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003100:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003102:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003104:	6113      	str	r3, [r2, #16]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000ed90 	.word	0xe000ed90

08003118 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff fe42 	bl	8002da8 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e2dc      	b.n	80036ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d008      	beq.n	800314e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2280      	movs	r2, #128	@ 0x80
 8003140:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e2cd      	b.n	80036ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a76      	ldr	r2, [pc, #472]	@ (800332c <HAL_DMA_Abort+0x214>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a74      	ldr	r2, [pc, #464]	@ (8003330 <HAL_DMA_Abort+0x218>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a73      	ldr	r2, [pc, #460]	@ (8003334 <HAL_DMA_Abort+0x21c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a71      	ldr	r2, [pc, #452]	@ (8003338 <HAL_DMA_Abort+0x220>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a70      	ldr	r2, [pc, #448]	@ (800333c <HAL_DMA_Abort+0x224>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a6e      	ldr	r2, [pc, #440]	@ (8003340 <HAL_DMA_Abort+0x228>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a6d      	ldr	r2, [pc, #436]	@ (8003344 <HAL_DMA_Abort+0x22c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6b      	ldr	r2, [pc, #428]	@ (8003348 <HAL_DMA_Abort+0x230>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6a      	ldr	r2, [pc, #424]	@ (800334c <HAL_DMA_Abort+0x234>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a68      	ldr	r2, [pc, #416]	@ (8003350 <HAL_DMA_Abort+0x238>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a67      	ldr	r2, [pc, #412]	@ (8003354 <HAL_DMA_Abort+0x23c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a65      	ldr	r2, [pc, #404]	@ (8003358 <HAL_DMA_Abort+0x240>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a64      	ldr	r2, [pc, #400]	@ (800335c <HAL_DMA_Abort+0x244>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a62      	ldr	r2, [pc, #392]	@ (8003360 <HAL_DMA_Abort+0x248>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a61      	ldr	r2, [pc, #388]	@ (8003364 <HAL_DMA_Abort+0x24c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_Abort+0xd6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003368 <HAL_DMA_Abort+0x250>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_DMA_Abort+0xda>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_Abort+0xdc>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 021e 	bic.w	r2, r2, #30
 8003206:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003216:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e00a      	b.n	8003236 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 020e 	bic.w	r2, r2, #14
 800322e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a3c      	ldr	r2, [pc, #240]	@ (800332c <HAL_DMA_Abort+0x214>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d072      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a3a      	ldr	r2, [pc, #232]	@ (8003330 <HAL_DMA_Abort+0x218>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d06d      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a39      	ldr	r2, [pc, #228]	@ (8003334 <HAL_DMA_Abort+0x21c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d068      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a37      	ldr	r2, [pc, #220]	@ (8003338 <HAL_DMA_Abort+0x220>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d063      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a36      	ldr	r2, [pc, #216]	@ (800333c <HAL_DMA_Abort+0x224>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d05e      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a34      	ldr	r2, [pc, #208]	@ (8003340 <HAL_DMA_Abort+0x228>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d059      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a33      	ldr	r2, [pc, #204]	@ (8003344 <HAL_DMA_Abort+0x22c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d054      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a31      	ldr	r2, [pc, #196]	@ (8003348 <HAL_DMA_Abort+0x230>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d04f      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a30      	ldr	r2, [pc, #192]	@ (800334c <HAL_DMA_Abort+0x234>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d04a      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2e      	ldr	r2, [pc, #184]	@ (8003350 <HAL_DMA_Abort+0x238>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d045      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2d      	ldr	r2, [pc, #180]	@ (8003354 <HAL_DMA_Abort+0x23c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d040      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003358 <HAL_DMA_Abort+0x240>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d03b      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2a      	ldr	r2, [pc, #168]	@ (800335c <HAL_DMA_Abort+0x244>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d036      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a28      	ldr	r2, [pc, #160]	@ (8003360 <HAL_DMA_Abort+0x248>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d031      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <HAL_DMA_Abort+0x24c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d02c      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a25      	ldr	r2, [pc, #148]	@ (8003368 <HAL_DMA_Abort+0x250>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d027      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a24      	ldr	r2, [pc, #144]	@ (800336c <HAL_DMA_Abort+0x254>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d022      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a22      	ldr	r2, [pc, #136]	@ (8003370 <HAL_DMA_Abort+0x258>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01d      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <HAL_DMA_Abort+0x25c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d018      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003378 <HAL_DMA_Abort+0x260>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1e      	ldr	r2, [pc, #120]	@ (800337c <HAL_DMA_Abort+0x264>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00e      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1c      	ldr	r2, [pc, #112]	@ (8003380 <HAL_DMA_Abort+0x268>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <HAL_DMA_Abort+0x26c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_DMA_Abort+0x20e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <HAL_DMA_Abort+0x270>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d132      	bne.n	800338c <HAL_DMA_Abort+0x274>
 8003326:	2301      	movs	r3, #1
 8003328:	e031      	b.n	800338e <HAL_DMA_Abort+0x276>
 800332a:	bf00      	nop
 800332c:	40020010 	.word	0x40020010
 8003330:	40020028 	.word	0x40020028
 8003334:	40020040 	.word	0x40020040
 8003338:	40020058 	.word	0x40020058
 800333c:	40020070 	.word	0x40020070
 8003340:	40020088 	.word	0x40020088
 8003344:	400200a0 	.word	0x400200a0
 8003348:	400200b8 	.word	0x400200b8
 800334c:	40020410 	.word	0x40020410
 8003350:	40020428 	.word	0x40020428
 8003354:	40020440 	.word	0x40020440
 8003358:	40020458 	.word	0x40020458
 800335c:	40020470 	.word	0x40020470
 8003360:	40020488 	.word	0x40020488
 8003364:	400204a0 	.word	0x400204a0
 8003368:	400204b8 	.word	0x400204b8
 800336c:	58025408 	.word	0x58025408
 8003370:	5802541c 	.word	0x5802541c
 8003374:	58025430 	.word	0x58025430
 8003378:	58025444 	.word	0x58025444
 800337c:	58025458 	.word	0x58025458
 8003380:	5802546c 	.word	0x5802546c
 8003384:	58025480 	.word	0x58025480
 8003388:	58025494 	.word	0x58025494
 800338c:	2300      	movs	r3, #0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6d      	ldr	r2, [pc, #436]	@ (800355c <HAL_DMA_Abort+0x444>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d04a      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003560 <HAL_DMA_Abort+0x448>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d045      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003564 <HAL_DMA_Abort+0x44c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d040      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a68      	ldr	r2, [pc, #416]	@ (8003568 <HAL_DMA_Abort+0x450>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d03b      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a67      	ldr	r2, [pc, #412]	@ (800356c <HAL_DMA_Abort+0x454>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d036      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a65      	ldr	r2, [pc, #404]	@ (8003570 <HAL_DMA_Abort+0x458>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d031      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a64      	ldr	r2, [pc, #400]	@ (8003574 <HAL_DMA_Abort+0x45c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d02c      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a62      	ldr	r2, [pc, #392]	@ (8003578 <HAL_DMA_Abort+0x460>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d027      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a61      	ldr	r2, [pc, #388]	@ (800357c <HAL_DMA_Abort+0x464>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d022      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a5f      	ldr	r2, [pc, #380]	@ (8003580 <HAL_DMA_Abort+0x468>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01d      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a5e      	ldr	r2, [pc, #376]	@ (8003584 <HAL_DMA_Abort+0x46c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d018      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5c      	ldr	r2, [pc, #368]	@ (8003588 <HAL_DMA_Abort+0x470>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a5b      	ldr	r2, [pc, #364]	@ (800358c <HAL_DMA_Abort+0x474>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a59      	ldr	r2, [pc, #356]	@ (8003590 <HAL_DMA_Abort+0x478>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a58      	ldr	r2, [pc, #352]	@ (8003594 <HAL_DMA_Abort+0x47c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_Abort+0x32a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a56      	ldr	r2, [pc, #344]	@ (8003598 <HAL_DMA_Abort+0x480>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d108      	bne.n	8003454 <HAL_DMA_Abort+0x33c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e007      	b.n	8003464 <HAL_DMA_Abort+0x34c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003464:	e013      	b.n	800348e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003466:	f7ff fc9f 	bl	8002da8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b05      	cmp	r3, #5
 8003472:	d90c      	bls.n	800348e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e12d      	b.n	80036ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e5      	bne.n	8003466 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2f      	ldr	r2, [pc, #188]	@ (800355c <HAL_DMA_Abort+0x444>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d04a      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003560 <HAL_DMA_Abort+0x448>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d045      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003564 <HAL_DMA_Abort+0x44c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d040      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003568 <HAL_DMA_Abort+0x450>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d03b      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a29      	ldr	r2, [pc, #164]	@ (800356c <HAL_DMA_Abort+0x454>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d036      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a27      	ldr	r2, [pc, #156]	@ (8003570 <HAL_DMA_Abort+0x458>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d031      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a26      	ldr	r2, [pc, #152]	@ (8003574 <HAL_DMA_Abort+0x45c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d02c      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a24      	ldr	r2, [pc, #144]	@ (8003578 <HAL_DMA_Abort+0x460>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d027      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a23      	ldr	r2, [pc, #140]	@ (800357c <HAL_DMA_Abort+0x464>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d022      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a21      	ldr	r2, [pc, #132]	@ (8003580 <HAL_DMA_Abort+0x468>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01d      	beq.n	800353a <HAL_DMA_Abort+0x422>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a20      	ldr	r2, [pc, #128]	@ (8003584 <HAL_DMA_Abort+0x46c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d018      	beq.n	800353a <HAL_DMA_Abort+0x422>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1e      	ldr	r2, [pc, #120]	@ (8003588 <HAL_DMA_Abort+0x470>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_DMA_Abort+0x422>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1d      	ldr	r2, [pc, #116]	@ (800358c <HAL_DMA_Abort+0x474>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00e      	beq.n	800353a <HAL_DMA_Abort+0x422>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <HAL_DMA_Abort+0x478>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d009      	beq.n	800353a <HAL_DMA_Abort+0x422>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <HAL_DMA_Abort+0x47c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_DMA_Abort+0x422>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a18      	ldr	r2, [pc, #96]	@ (8003598 <HAL_DMA_Abort+0x480>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_DMA_Abort+0x426>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_DMA_Abort+0x428>
 800353e:	2300      	movs	r3, #0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02b      	beq.n	800359c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	223f      	movs	r2, #63	@ 0x3f
 8003554:	409a      	lsls	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	e02a      	b.n	80035b2 <HAL_DMA_Abort+0x49a>
 800355c:	40020010 	.word	0x40020010
 8003560:	40020028 	.word	0x40020028
 8003564:	40020040 	.word	0x40020040
 8003568:	40020058 	.word	0x40020058
 800356c:	40020070 	.word	0x40020070
 8003570:	40020088 	.word	0x40020088
 8003574:	400200a0 	.word	0x400200a0
 8003578:	400200b8 	.word	0x400200b8
 800357c:	40020410 	.word	0x40020410
 8003580:	40020428 	.word	0x40020428
 8003584:	40020440 	.word	0x40020440
 8003588:	40020458 	.word	0x40020458
 800358c:	40020470 	.word	0x40020470
 8003590:	40020488 	.word	0x40020488
 8003594:	400204a0 	.word	0x400204a0
 8003598:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2201      	movs	r2, #1
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a4f      	ldr	r2, [pc, #316]	@ (80036f4 <HAL_DMA_Abort+0x5dc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d072      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a4d      	ldr	r2, [pc, #308]	@ (80036f8 <HAL_DMA_Abort+0x5e0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d06d      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4c      	ldr	r2, [pc, #304]	@ (80036fc <HAL_DMA_Abort+0x5e4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d068      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003700 <HAL_DMA_Abort+0x5e8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d063      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a49      	ldr	r2, [pc, #292]	@ (8003704 <HAL_DMA_Abort+0x5ec>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d05e      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a47      	ldr	r2, [pc, #284]	@ (8003708 <HAL_DMA_Abort+0x5f0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d059      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a46      	ldr	r2, [pc, #280]	@ (800370c <HAL_DMA_Abort+0x5f4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d054      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a44      	ldr	r2, [pc, #272]	@ (8003710 <HAL_DMA_Abort+0x5f8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d04f      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a43      	ldr	r2, [pc, #268]	@ (8003714 <HAL_DMA_Abort+0x5fc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04a      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a41      	ldr	r2, [pc, #260]	@ (8003718 <HAL_DMA_Abort+0x600>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d045      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a40      	ldr	r2, [pc, #256]	@ (800371c <HAL_DMA_Abort+0x604>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d040      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3e      	ldr	r2, [pc, #248]	@ (8003720 <HAL_DMA_Abort+0x608>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d03b      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a3d      	ldr	r2, [pc, #244]	@ (8003724 <HAL_DMA_Abort+0x60c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d036      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3b      	ldr	r2, [pc, #236]	@ (8003728 <HAL_DMA_Abort+0x610>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d031      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a3a      	ldr	r2, [pc, #232]	@ (800372c <HAL_DMA_Abort+0x614>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d02c      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a38      	ldr	r2, [pc, #224]	@ (8003730 <HAL_DMA_Abort+0x618>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d027      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a37      	ldr	r2, [pc, #220]	@ (8003734 <HAL_DMA_Abort+0x61c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a35      	ldr	r2, [pc, #212]	@ (8003738 <HAL_DMA_Abort+0x620>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a34      	ldr	r2, [pc, #208]	@ (800373c <HAL_DMA_Abort+0x624>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a32      	ldr	r2, [pc, #200]	@ (8003740 <HAL_DMA_Abort+0x628>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a31      	ldr	r2, [pc, #196]	@ (8003744 <HAL_DMA_Abort+0x62c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2f      	ldr	r2, [pc, #188]	@ (8003748 <HAL_DMA_Abort+0x630>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2e      	ldr	r2, [pc, #184]	@ (800374c <HAL_DMA_Abort+0x634>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_DMA_Abort+0x58a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2c      	ldr	r2, [pc, #176]	@ (8003750 <HAL_DMA_Abort+0x638>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_DMA_Abort+0x58e>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_DMA_Abort+0x590>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d015      	beq.n	80036d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40020010 	.word	0x40020010
 80036f8:	40020028 	.word	0x40020028
 80036fc:	40020040 	.word	0x40020040
 8003700:	40020058 	.word	0x40020058
 8003704:	40020070 	.word	0x40020070
 8003708:	40020088 	.word	0x40020088
 800370c:	400200a0 	.word	0x400200a0
 8003710:	400200b8 	.word	0x400200b8
 8003714:	40020410 	.word	0x40020410
 8003718:	40020428 	.word	0x40020428
 800371c:	40020440 	.word	0x40020440
 8003720:	40020458 	.word	0x40020458
 8003724:	40020470 	.word	0x40020470
 8003728:	40020488 	.word	0x40020488
 800372c:	400204a0 	.word	0x400204a0
 8003730:	400204b8 	.word	0x400204b8
 8003734:	58025408 	.word	0x58025408
 8003738:	5802541c 	.word	0x5802541c
 800373c:	58025430 	.word	0x58025430
 8003740:	58025444 	.word	0x58025444
 8003744:	58025458 	.word	0x58025458
 8003748:	5802546c 	.word	0x5802546c
 800374c:	58025480 	.word	0x58025480
 8003750:	58025494 	.word	0x58025494

08003754 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e237      	b.n	8003bd6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d004      	beq.n	800377c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2280      	movs	r2, #128	@ 0x80
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e22c      	b.n	8003bd6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a5c      	ldr	r2, [pc, #368]	@ (80038f4 <HAL_DMA_Abort_IT+0x1a0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d04a      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a5b      	ldr	r2, [pc, #364]	@ (80038f8 <HAL_DMA_Abort_IT+0x1a4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d045      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a59      	ldr	r2, [pc, #356]	@ (80038fc <HAL_DMA_Abort_IT+0x1a8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d040      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a58      	ldr	r2, [pc, #352]	@ (8003900 <HAL_DMA_Abort_IT+0x1ac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d03b      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a56      	ldr	r2, [pc, #344]	@ (8003904 <HAL_DMA_Abort_IT+0x1b0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d036      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a55      	ldr	r2, [pc, #340]	@ (8003908 <HAL_DMA_Abort_IT+0x1b4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d031      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a53      	ldr	r2, [pc, #332]	@ (800390c <HAL_DMA_Abort_IT+0x1b8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02c      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a52      	ldr	r2, [pc, #328]	@ (8003910 <HAL_DMA_Abort_IT+0x1bc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d027      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a50      	ldr	r2, [pc, #320]	@ (8003914 <HAL_DMA_Abort_IT+0x1c0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4f      	ldr	r2, [pc, #316]	@ (8003918 <HAL_DMA_Abort_IT+0x1c4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01d      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a4d      	ldr	r2, [pc, #308]	@ (800391c <HAL_DMA_Abort_IT+0x1c8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003920 <HAL_DMA_Abort_IT+0x1cc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003924 <HAL_DMA_Abort_IT+0x1d0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a49      	ldr	r2, [pc, #292]	@ (8003928 <HAL_DMA_Abort_IT+0x1d4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a47      	ldr	r2, [pc, #284]	@ (800392c <HAL_DMA_Abort_IT+0x1d8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_DMA_Abort_IT+0xc8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a46      	ldr	r2, [pc, #280]	@ (8003930 <HAL_DMA_Abort_IT+0x1dc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_DMA_Abort_IT+0xcc>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_DMA_Abort_IT+0xce>
 8003820:	2300      	movs	r3, #0
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8086 	beq.w	8003934 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2204      	movs	r2, #4
 800382c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2f      	ldr	r2, [pc, #188]	@ (80038f4 <HAL_DMA_Abort_IT+0x1a0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d04a      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2e      	ldr	r2, [pc, #184]	@ (80038f8 <HAL_DMA_Abort_IT+0x1a4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d045      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2c      	ldr	r2, [pc, #176]	@ (80038fc <HAL_DMA_Abort_IT+0x1a8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d040      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2b      	ldr	r2, [pc, #172]	@ (8003900 <HAL_DMA_Abort_IT+0x1ac>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d03b      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a29      	ldr	r2, [pc, #164]	@ (8003904 <HAL_DMA_Abort_IT+0x1b0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d036      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a28      	ldr	r2, [pc, #160]	@ (8003908 <HAL_DMA_Abort_IT+0x1b4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d031      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a26      	ldr	r2, [pc, #152]	@ (800390c <HAL_DMA_Abort_IT+0x1b8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d02c      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a25      	ldr	r2, [pc, #148]	@ (8003910 <HAL_DMA_Abort_IT+0x1bc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d027      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a23      	ldr	r2, [pc, #140]	@ (8003914 <HAL_DMA_Abort_IT+0x1c0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a22      	ldr	r2, [pc, #136]	@ (8003918 <HAL_DMA_Abort_IT+0x1c4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d01d      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a20      	ldr	r2, [pc, #128]	@ (800391c <HAL_DMA_Abort_IT+0x1c8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d018      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003920 <HAL_DMA_Abort_IT+0x1cc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003924 <HAL_DMA_Abort_IT+0x1d0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003928 <HAL_DMA_Abort_IT+0x1d4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	@ (800392c <HAL_DMA_Abort_IT+0x1d8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a19      	ldr	r2, [pc, #100]	@ (8003930 <HAL_DMA_Abort_IT+0x1dc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <HAL_DMA_Abort_IT+0x18e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e178      	b.n	8003bd4 <HAL_DMA_Abort_IT+0x480>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e16f      	b.n	8003bd4 <HAL_DMA_Abort_IT+0x480>
 80038f4:	40020010 	.word	0x40020010
 80038f8:	40020028 	.word	0x40020028
 80038fc:	40020040 	.word	0x40020040
 8003900:	40020058 	.word	0x40020058
 8003904:	40020070 	.word	0x40020070
 8003908:	40020088 	.word	0x40020088
 800390c:	400200a0 	.word	0x400200a0
 8003910:	400200b8 	.word	0x400200b8
 8003914:	40020410 	.word	0x40020410
 8003918:	40020428 	.word	0x40020428
 800391c:	40020440 	.word	0x40020440
 8003920:	40020458 	.word	0x40020458
 8003924:	40020470 	.word	0x40020470
 8003928:	40020488 	.word	0x40020488
 800392c:	400204a0 	.word	0x400204a0
 8003930:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 020e 	bic.w	r2, r2, #14
 8003942:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a6c      	ldr	r2, [pc, #432]	@ (8003afc <HAL_DMA_Abort_IT+0x3a8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d04a      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6b      	ldr	r2, [pc, #428]	@ (8003b00 <HAL_DMA_Abort_IT+0x3ac>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d045      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a69      	ldr	r2, [pc, #420]	@ (8003b04 <HAL_DMA_Abort_IT+0x3b0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d040      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a68      	ldr	r2, [pc, #416]	@ (8003b08 <HAL_DMA_Abort_IT+0x3b4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d03b      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a66      	ldr	r2, [pc, #408]	@ (8003b0c <HAL_DMA_Abort_IT+0x3b8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d036      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a65      	ldr	r2, [pc, #404]	@ (8003b10 <HAL_DMA_Abort_IT+0x3bc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d031      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a63      	ldr	r2, [pc, #396]	@ (8003b14 <HAL_DMA_Abort_IT+0x3c0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02c      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a62      	ldr	r2, [pc, #392]	@ (8003b18 <HAL_DMA_Abort_IT+0x3c4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d027      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a60      	ldr	r2, [pc, #384]	@ (8003b1c <HAL_DMA_Abort_IT+0x3c8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d022      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003b20 <HAL_DMA_Abort_IT+0x3cc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d01d      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003b24 <HAL_DMA_Abort_IT+0x3d0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b28 <HAL_DMA_Abort_IT+0x3d4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b2c <HAL_DMA_Abort_IT+0x3d8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a59      	ldr	r2, [pc, #356]	@ (8003b30 <HAL_DMA_Abort_IT+0x3dc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a57      	ldr	r2, [pc, #348]	@ (8003b34 <HAL_DMA_Abort_IT+0x3e0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x290>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a56      	ldr	r2, [pc, #344]	@ (8003b38 <HAL_DMA_Abort_IT+0x3e4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d108      	bne.n	80039f6 <HAL_DMA_Abort_IT+0x2a2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e007      	b.n	8003a06 <HAL_DMA_Abort_IT+0x2b2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3c      	ldr	r2, [pc, #240]	@ (8003afc <HAL_DMA_Abort_IT+0x3a8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d072      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a3a      	ldr	r2, [pc, #232]	@ (8003b00 <HAL_DMA_Abort_IT+0x3ac>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d06d      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a39      	ldr	r2, [pc, #228]	@ (8003b04 <HAL_DMA_Abort_IT+0x3b0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d068      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a37      	ldr	r2, [pc, #220]	@ (8003b08 <HAL_DMA_Abort_IT+0x3b4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d063      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a36      	ldr	r2, [pc, #216]	@ (8003b0c <HAL_DMA_Abort_IT+0x3b8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d05e      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a34      	ldr	r2, [pc, #208]	@ (8003b10 <HAL_DMA_Abort_IT+0x3bc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d059      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a33      	ldr	r2, [pc, #204]	@ (8003b14 <HAL_DMA_Abort_IT+0x3c0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d054      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a31      	ldr	r2, [pc, #196]	@ (8003b18 <HAL_DMA_Abort_IT+0x3c4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d04f      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a30      	ldr	r2, [pc, #192]	@ (8003b1c <HAL_DMA_Abort_IT+0x3c8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d04a      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2e      	ldr	r2, [pc, #184]	@ (8003b20 <HAL_DMA_Abort_IT+0x3cc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d045      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b24 <HAL_DMA_Abort_IT+0x3d0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d040      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <HAL_DMA_Abort_IT+0x3d4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d03b      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2a      	ldr	r2, [pc, #168]	@ (8003b2c <HAL_DMA_Abort_IT+0x3d8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d036      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	@ (8003b30 <HAL_DMA_Abort_IT+0x3dc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d031      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a27      	ldr	r2, [pc, #156]	@ (8003b34 <HAL_DMA_Abort_IT+0x3e0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d02c      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a25      	ldr	r2, [pc, #148]	@ (8003b38 <HAL_DMA_Abort_IT+0x3e4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d027      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a24      	ldr	r2, [pc, #144]	@ (8003b3c <HAL_DMA_Abort_IT+0x3e8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a22      	ldr	r2, [pc, #136]	@ (8003b40 <HAL_DMA_Abort_IT+0x3ec>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01d      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a21      	ldr	r2, [pc, #132]	@ (8003b44 <HAL_DMA_Abort_IT+0x3f0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_DMA_Abort_IT+0x3f4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b4c <HAL_DMA_Abort_IT+0x3f8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <HAL_DMA_Abort_IT+0x3fc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <HAL_DMA_Abort_IT+0x400>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x3a2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	@ (8003b58 <HAL_DMA_Abort_IT+0x404>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d132      	bne.n	8003b5c <HAL_DMA_Abort_IT+0x408>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e031      	b.n	8003b5e <HAL_DMA_Abort_IT+0x40a>
 8003afa:	bf00      	nop
 8003afc:	40020010 	.word	0x40020010
 8003b00:	40020028 	.word	0x40020028
 8003b04:	40020040 	.word	0x40020040
 8003b08:	40020058 	.word	0x40020058
 8003b0c:	40020070 	.word	0x40020070
 8003b10:	40020088 	.word	0x40020088
 8003b14:	400200a0 	.word	0x400200a0
 8003b18:	400200b8 	.word	0x400200b8
 8003b1c:	40020410 	.word	0x40020410
 8003b20:	40020428 	.word	0x40020428
 8003b24:	40020440 	.word	0x40020440
 8003b28:	40020458 	.word	0x40020458
 8003b2c:	40020470 	.word	0x40020470
 8003b30:	40020488 	.word	0x40020488
 8003b34:	400204a0 	.word	0x400204a0
 8003b38:	400204b8 	.word	0x400204b8
 8003b3c:	58025408 	.word	0x58025408
 8003b40:	5802541c 	.word	0x5802541c
 8003b44:	58025430 	.word	0x58025430
 8003b48:	58025444 	.word	0x58025444
 8003b4c:	58025458 	.word	0x58025458
 8003b50:	5802546c 	.word	0x5802546c
 8003b54:	58025480 	.word	0x58025480
 8003b58:	58025494 	.word	0x58025494
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d028      	beq.n	8003bb4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2201      	movs	r2, #1
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00c      	beq.n	8003bb4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ba8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop

08003be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	@ 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003bee:	4b86      	ldr	r3, [pc, #536]	@ (8003e08 <HAL_GPIO_Init+0x228>)
 8003bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bf2:	e18c      	b.n	8003f0e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 817e 	beq.w	8003f08 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d005      	beq.n	8003c24 <HAL_GPIO_Init+0x44>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d130      	bne.n	8003c86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 0201 	and.w	r2, r3, #1
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d017      	beq.n	8003cc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d123      	bne.n	8003d16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	08da      	lsrs	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3208      	adds	r2, #8
 8003d10:	69b9      	ldr	r1, [r7, #24]
 8003d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	2203      	movs	r2, #3
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0203 	and.w	r2, r3, #3
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80d8 	beq.w	8003f08 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d58:	4b2c      	ldr	r3, [pc, #176]	@ (8003e0c <HAL_GPIO_Init+0x22c>)
 8003d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e0c <HAL_GPIO_Init+0x22c>)
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003d68:	4b28      	ldr	r3, [pc, #160]	@ (8003e0c <HAL_GPIO_Init+0x22c>)
 8003d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d76:	4a26      	ldr	r2, [pc, #152]	@ (8003e10 <HAL_GPIO_Init+0x230>)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	220f      	movs	r2, #15
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <HAL_GPIO_Init+0x234>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d04a      	beq.n	8003e38 <HAL_GPIO_Init+0x258>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e18 <HAL_GPIO_Init+0x238>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02b      	beq.n	8003e02 <HAL_GPIO_Init+0x222>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <HAL_GPIO_Init+0x23c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d025      	beq.n	8003dfe <HAL_GPIO_Init+0x21e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e20 <HAL_GPIO_Init+0x240>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01f      	beq.n	8003dfa <HAL_GPIO_Init+0x21a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <HAL_GPIO_Init+0x244>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d019      	beq.n	8003df6 <HAL_GPIO_Init+0x216>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <HAL_GPIO_Init+0x248>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_GPIO_Init+0x212>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <HAL_GPIO_Init+0x24c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00d      	beq.n	8003dee <HAL_GPIO_Init+0x20e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a16      	ldr	r2, [pc, #88]	@ (8003e30 <HAL_GPIO_Init+0x250>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <HAL_GPIO_Init+0x20a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	@ (8003e34 <HAL_GPIO_Init+0x254>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_GPIO_Init+0x206>
 8003de2:	2309      	movs	r3, #9
 8003de4:	e029      	b.n	8003e3a <HAL_GPIO_Init+0x25a>
 8003de6:	230a      	movs	r3, #10
 8003de8:	e027      	b.n	8003e3a <HAL_GPIO_Init+0x25a>
 8003dea:	2307      	movs	r3, #7
 8003dec:	e025      	b.n	8003e3a <HAL_GPIO_Init+0x25a>
 8003dee:	2306      	movs	r3, #6
 8003df0:	e023      	b.n	8003e3a <HAL_GPIO_Init+0x25a>
 8003df2:	2305      	movs	r3, #5
 8003df4:	e021      	b.n	8003e3a <HAL_GPIO_Init+0x25a>
 8003df6:	2304      	movs	r3, #4
 8003df8:	e01f      	b.n	8003e3a <HAL_GPIO_Init+0x25a>
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e01d      	b.n	8003e3a <HAL_GPIO_Init+0x25a>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e01b      	b.n	8003e3a <HAL_GPIO_Init+0x25a>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e019      	b.n	8003e3a <HAL_GPIO_Init+0x25a>
 8003e06:	bf00      	nop
 8003e08:	58000080 	.word	0x58000080
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	58000400 	.word	0x58000400
 8003e14:	58020000 	.word	0x58020000
 8003e18:	58020400 	.word	0x58020400
 8003e1c:	58020800 	.word	0x58020800
 8003e20:	58020c00 	.word	0x58020c00
 8003e24:	58021000 	.word	0x58021000
 8003e28:	58021400 	.word	0x58021400
 8003e2c:	58021800 	.word	0x58021800
 8003e30:	58021c00 	.word	0x58021c00
 8003e34:	58022400 	.word	0x58022400
 8003e38:	2300      	movs	r3, #0
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	f002 0203 	and.w	r2, r2, #3
 8003e40:	0092      	lsls	r2, r2, #2
 8003e42:	4093      	lsls	r3, r2
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e4a:	4938      	ldr	r1, [pc, #224]	@ (8003f2c <HAL_GPIO_Init+0x34c>)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	3302      	adds	r3, #2
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003eac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f ae6b 	bne.w	8003bf4 <HAL_GPIO_Init+0x14>
  }
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	3724      	adds	r7, #36	@ 0x24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	58000400 	.word	0x58000400

08003f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f40:	787b      	ldrb	r3, [r7, #1]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f4c:	e003      	b.n	8003f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	619a      	str	r2, [r3, #24]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e08b      	b.n	800408e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd ff2e 	bl	8001dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	@ 0x24
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d107      	bne.n	8003fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	e006      	b.n	8003fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d108      	bne.n	8004006 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	e007      	b.n	8004016 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <HAL_I2C_Init+0x134>)
 8004022:	430b      	orrs	r3, r1
 8004024:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004034:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69d9      	ldr	r1, [r3, #28]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	02008000 	.word	0x02008000

0800409c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	817b      	strh	r3, [r7, #10]
 80040ae:	460b      	mov	r3, r1
 80040b0:	813b      	strh	r3, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b20      	cmp	r3, #32
 80040c0:	f040 80f9 	bne.w	80042b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_I2C_Mem_Write+0x34>
 80040ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0ed      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_I2C_Mem_Write+0x4e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e0e6      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040f2:	f7fe fe59 	bl	8002da8 <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2319      	movs	r3, #25
 80040fe:	2201      	movs	r2, #1
 8004100:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fac3 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0d1      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2221      	movs	r2, #33	@ 0x21
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2240      	movs	r2, #64	@ 0x40
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004134:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800413c:	88f8      	ldrh	r0, [r7, #6]
 800413e:	893a      	ldrh	r2, [r7, #8]
 8004140:	8979      	ldrh	r1, [r7, #10]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	4603      	mov	r3, r0
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f9d3 	bl	80044f8 <I2C_RequestMemoryWrite>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0a9      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2bff      	cmp	r3, #255	@ 0xff
 800416c:	d90e      	bls.n	800418c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	22ff      	movs	r2, #255	@ 0xff
 8004172:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004178:	b2da      	uxtb	r2, r3
 800417a:	8979      	ldrh	r1, [r7, #10]
 800417c:	2300      	movs	r3, #0
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fc47 	bl	8004a18 <I2C_TransferConfig>
 800418a:	e00f      	b.n	80041ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419a:	b2da      	uxtb	r2, r3
 800419c:	8979      	ldrh	r1, [r7, #10]
 800419e:	2300      	movs	r3, #0
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fc36 	bl	8004a18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fac6 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e07b      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d034      	beq.n	8004264 <HAL_I2C_Mem_Write+0x1c8>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d130      	bne.n	8004264 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004208:	2200      	movs	r2, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fa3f 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e04d      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2bff      	cmp	r3, #255	@ 0xff
 8004224:	d90e      	bls.n	8004244 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	22ff      	movs	r2, #255	@ 0xff
 800422a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	2300      	movs	r3, #0
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fbeb 	bl	8004a18 <I2C_TransferConfig>
 8004242:	e00f      	b.n	8004264 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004252:	b2da      	uxtb	r2, r3
 8004254:	8979      	ldrh	r1, [r7, #10]
 8004256:	2300      	movs	r3, #0
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fbda 	bl	8004a18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d19e      	bne.n	80041ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 faac 	bl	80047d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e01a      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2220      	movs	r2, #32
 8004288:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6859      	ldr	r1, [r3, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <HAL_I2C_Mem_Write+0x224>)
 8004296:	400b      	ands	r3, r1
 8004298:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	fe00e800 	.word	0xfe00e800

080042c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	4608      	mov	r0, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	817b      	strh	r3, [r7, #10]
 80042d6:	460b      	mov	r3, r1
 80042d8:	813b      	strh	r3, [r7, #8]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	f040 80fd 	bne.w	80044e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_I2C_Mem_Read+0x34>
 80042f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0f1      	b.n	80044e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_I2C_Mem_Read+0x4e>
 800430e:	2302      	movs	r3, #2
 8004310:	e0ea      	b.n	80044e8 <HAL_I2C_Mem_Read+0x224>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800431a:	f7fe fd45 	bl	8002da8 <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2319      	movs	r3, #25
 8004326:	2201      	movs	r2, #1
 8004328:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f9af 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0d5      	b.n	80044e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2222      	movs	r2, #34	@ 0x22
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	@ 0x40
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800435c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004364:	88f8      	ldrh	r0, [r7, #6]
 8004366:	893a      	ldrh	r2, [r7, #8]
 8004368:	8979      	ldrh	r1, [r7, #10]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	4603      	mov	r3, r0
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f913 	bl	80045a0 <I2C_RequestMemoryRead>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0ad      	b.n	80044e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2bff      	cmp	r3, #255	@ 0xff
 8004394:	d90e      	bls.n	80043b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	22ff      	movs	r2, #255	@ 0xff
 800439a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	8979      	ldrh	r1, [r7, #10]
 80043a4:	4b52      	ldr	r3, [pc, #328]	@ (80044f0 <HAL_I2C_Mem_Read+0x22c>)
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fb33 	bl	8004a18 <I2C_TransferConfig>
 80043b2:	e00f      	b.n	80043d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	8979      	ldrh	r1, [r7, #10]
 80043c6:	4b4a      	ldr	r3, [pc, #296]	@ (80044f0 <HAL_I2C_Mem_Read+0x22c>)
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fb22 	bl	8004a18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	2200      	movs	r2, #0
 80043dc:	2104      	movs	r1, #4
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f956 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07c      	b.n	80044e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d034      	beq.n	8004494 <HAL_I2C_Mem_Read+0x1d0>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d130      	bne.n	8004494 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004438:	2200      	movs	r2, #0
 800443a:	2180      	movs	r1, #128	@ 0x80
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f927 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e04d      	b.n	80044e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2bff      	cmp	r3, #255	@ 0xff
 8004454:	d90e      	bls.n	8004474 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	22ff      	movs	r2, #255	@ 0xff
 800445a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004460:	b2da      	uxtb	r2, r3
 8004462:	8979      	ldrh	r1, [r7, #10]
 8004464:	2300      	movs	r3, #0
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fad3 	bl	8004a18 <I2C_TransferConfig>
 8004472:	e00f      	b.n	8004494 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004482:	b2da      	uxtb	r2, r3
 8004484:	8979      	ldrh	r1, [r7, #10]
 8004486:	2300      	movs	r3, #0
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fac2 	bl	8004a18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d19a      	bne.n	80043d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f994 	bl	80047d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e01a      	b.n	80044e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2220      	movs	r2, #32
 80044b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6859      	ldr	r1, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <HAL_I2C_Mem_Read+0x230>)
 80044c6:	400b      	ands	r3, r1
 80044c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
  }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	80002400 	.word	0x80002400
 80044f4:	fe00e800 	.word	0xfe00e800

080044f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	4608      	mov	r0, r1
 8004502:	4611      	mov	r1, r2
 8004504:	461a      	mov	r2, r3
 8004506:	4603      	mov	r3, r0
 8004508:	817b      	strh	r3, [r7, #10]
 800450a:	460b      	mov	r3, r1
 800450c:	813b      	strh	r3, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	8979      	ldrh	r1, [r7, #10]
 8004518:	4b20      	ldr	r3, [pc, #128]	@ (800459c <I2C_RequestMemoryWrite+0xa4>)
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fa79 	bl	8004a18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f909 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e02c      	b.n	8004594 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	629a      	str	r2, [r3, #40]	@ 0x28
 800454a:	e015      	b.n	8004578 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800454c:	893b      	ldrh	r3, [r7, #8]
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	b29b      	uxth	r3, r3
 8004552:	b2da      	uxtb	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	69b9      	ldr	r1, [r7, #24]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f8ef 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e012      	b.n	8004594 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800456e:	893b      	ldrh	r3, [r7, #8]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2200      	movs	r2, #0
 8004580:	2180      	movs	r1, #128	@ 0x80
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f884 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	80002000 	.word	0x80002000

080045a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	4608      	mov	r0, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	461a      	mov	r2, r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	817b      	strh	r3, [r7, #10]
 80045b2:	460b      	mov	r3, r1
 80045b4:	813b      	strh	r3, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	8979      	ldrh	r1, [r7, #10]
 80045c0:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <I2C_RequestMemoryRead+0xa4>)
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	2300      	movs	r3, #0
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fa26 	bl	8004a18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	69b9      	ldr	r1, [r7, #24]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f8b6 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e02c      	b.n	800463a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045e6:	893b      	ldrh	r3, [r7, #8]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80045f0:	e015      	b.n	800461e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045f2:	893b      	ldrh	r3, [r7, #8]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	69b9      	ldr	r1, [r7, #24]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f89c 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e012      	b.n	800463a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004614:	893b      	ldrh	r3, [r7, #8]
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2200      	movs	r2, #0
 8004626:	2140      	movs	r1, #64	@ 0x40
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f831 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	80002000 	.word	0x80002000

08004648 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d103      	bne.n	8004666 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d007      	beq.n	8004684 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	619a      	str	r2, [r3, #24]
  }
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a0:	e03b      	b.n	800471a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f8d6 	bl	8004858 <I2C_IsErrorOccurred>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e041      	b.n	800473a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d02d      	beq.n	800471a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fe fb73 	bl	8002da8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d122      	bne.n	800471a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	bf0c      	ite	eq
 80046e4:	2301      	moveq	r3, #1
 80046e6:	2300      	movne	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d113      	bne.n	800471a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e00f      	b.n	800473a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	429a      	cmp	r2, r3
 8004736:	d0b4      	beq.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800474e:	e033      	b.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f87f 	bl	8004858 <I2C_IsErrorOccurred>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e031      	b.n	80047c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d025      	beq.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fe fb1c 	bl	8002da8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11a      	bne.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b02      	cmp	r3, #2
 800478e:	d013      	beq.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e007      	b.n	80047c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d1c4      	bne.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047dc:	e02f      	b.n	800483e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f838 	bl	8004858 <I2C_IsErrorOccurred>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e02d      	b.n	800484e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fe fad9 	bl	8002da8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d11a      	bne.n	800483e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b20      	cmp	r3, #32
 8004814:	d013      	beq.n	800483e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e007      	b.n	800484e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d1c8      	bne.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	@ 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d068      	beq.n	8004956 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2210      	movs	r2, #16
 800488a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800488c:	e049      	b.n	8004922 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d045      	beq.n	8004922 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fe fa87 	bl	8002da8 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <I2C_IsErrorOccurred+0x54>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13a      	bne.n	8004922 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ce:	d121      	bne.n	8004914 <I2C_IsErrorOccurred+0xbc>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048d6:	d01d      	beq.n	8004914 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d01a      	beq.n	8004914 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048ee:	f7fe fa5b 	bl	8002da8 <HAL_GetTick>
 80048f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f4:	e00e      	b.n	8004914 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048f6:	f7fe fa57 	bl	8002da8 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b19      	cmp	r3, #25
 8004902:	d907      	bls.n	8004914 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	f043 0320 	orr.w	r3, r3, #32
 800490a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004912:	e006      	b.n	8004922 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d1e9      	bne.n	80048f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b20      	cmp	r3, #32
 800492e:	d003      	beq.n	8004938 <I2C_IsErrorOccurred+0xe0>
 8004930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0aa      	beq.n	800488e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2220      	movs	r2, #32
 8004946:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004978:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	f043 0308 	orr.w	r3, r3, #8
 8004990:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800499a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80049c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01c      	beq.n	8004a06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff fe3b 	bl	8004648 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <I2C_IsErrorOccurred+0x1bc>)
 80049de:	400b      	ands	r3, r1
 80049e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3728      	adds	r7, #40	@ 0x28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	fe00e800 	.word	0xfe00e800

08004a18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	817b      	strh	r3, [r7, #10]
 8004a26:	4613      	mov	r3, r2
 8004a28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a30:	7a7b      	ldrb	r3, [r7, #9]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a38:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a46:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	0d5b      	lsrs	r3, r3, #21
 8004a52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a56:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <I2C_TransferConfig+0x60>)
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	ea02 0103 	and.w	r1, r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	03ff63ff 	.word	0x03ff63ff

08004a7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d138      	bne.n	8004b04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e032      	b.n	8004b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	@ 0x24
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ace:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d139      	bne.n	8004b9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e033      	b.n	8004b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2224      	movs	r2, #36	@ 0x24
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bb4:	4b19      	ldr	r3, [pc, #100]	@ (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bc0:	4b16      	ldr	r3, [pc, #88]	@ (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d001      	beq.n	8004bd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e01f      	b.n	8004c12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e01d      	b.n	8004c12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bd6:	4b11      	ldr	r3, [pc, #68]	@ (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 0207 	bic.w	r2, r3, #7
 8004bde:	490f      	ldr	r1, [pc, #60]	@ (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004be6:	f7fe f8df 	bl	8002da8 <HAL_GetTick>
 8004bea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bec:	e009      	b.n	8004c02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bee:	f7fe f8db 	bl	8002da8 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bfc:	d901      	bls.n	8004c02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e007      	b.n	8004c12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c02:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c0e:	d1ee      	bne.n	8004bee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	58024800 	.word	0x58024800

08004c20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	@ 0x30
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e3c8      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8087 	beq.w	8004d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c40:	4b88      	ldr	r3, [pc, #544]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c4a:	4b86      	ldr	r3, [pc, #536]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d007      	beq.n	8004c66 <HAL_RCC_OscConfig+0x46>
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c58:	2b18      	cmp	r3, #24
 8004c5a:	d110      	bne.n	8004c7e <HAL_RCC_OscConfig+0x5e>
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d10b      	bne.n	8004c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c66:	4b7f      	ldr	r3, [pc, #508]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d06c      	beq.n	8004d4c <HAL_RCC_OscConfig+0x12c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d168      	bne.n	8004d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e3a2      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x76>
 8004c88:	4b76      	ldr	r3, [pc, #472]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a75      	ldr	r2, [pc, #468]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e02e      	b.n	8004cf4 <HAL_RCC_OscConfig+0xd4>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x98>
 8004c9e:	4b71      	ldr	r3, [pc, #452]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a70      	ldr	r2, [pc, #448]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4b6e      	ldr	r3, [pc, #440]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6d      	ldr	r2, [pc, #436]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e01d      	b.n	8004cf4 <HAL_RCC_OscConfig+0xd4>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0xbc>
 8004cc2:	4b68      	ldr	r3, [pc, #416]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a67      	ldr	r2, [pc, #412]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b65      	ldr	r3, [pc, #404]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a64      	ldr	r2, [pc, #400]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0xd4>
 8004cdc:	4b61      	ldr	r3, [pc, #388]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a60      	ldr	r2, [pc, #384]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a5d      	ldr	r2, [pc, #372]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fe f854 	bl	8002da8 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fe f850 	bl	8002da8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	@ 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e356      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d16:	4b53      	ldr	r3, [pc, #332]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0xe4>
 8004d22:	e014      	b.n	8004d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fe f840 	bl	8002da8 <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fe f83c 	bl	8002da8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	@ 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e342      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d3e:	4b49      	ldr	r3, [pc, #292]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x10c>
 8004d4a:	e000      	b.n	8004d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 808c 	beq.w	8004e74 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5c:	4b41      	ldr	r3, [pc, #260]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d66:	4b3f      	ldr	r3, [pc, #252]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_RCC_OscConfig+0x162>
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	2b18      	cmp	r3, #24
 8004d76:	d137      	bne.n	8004de8 <HAL_RCC_OscConfig+0x1c8>
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d132      	bne.n	8004de8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d82:	4b38      	ldr	r3, [pc, #224]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_RCC_OscConfig+0x17a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e314      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d9a:	4b32      	ldr	r3, [pc, #200]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 0219 	bic.w	r2, r3, #25
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	492f      	ldr	r1, [pc, #188]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fd fffc 	bl	8002da8 <HAL_GetTick>
 8004db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db4:	f7fd fff8 	bl	8002da8 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e2fe      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc6:	4b27      	ldr	r3, [pc, #156]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd2:	4b24      	ldr	r3, [pc, #144]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	061b      	lsls	r3, r3, #24
 8004de0:	4920      	ldr	r1, [pc, #128]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004de6:	e045      	b.n	8004e74 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d026      	beq.n	8004e3e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004df0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 0219 	bic.w	r2, r3, #25
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4919      	ldr	r1, [pc, #100]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fd ffd1 	bl	8002da8 <HAL_GetTick>
 8004e06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fd ffcd 	bl	8002da8 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e2d3      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e1c:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b0e      	ldr	r3, [pc, #56]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	490b      	ldr	r1, [pc, #44]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
 8004e3c:	e01a      	b.n	8004e74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a08      	ldr	r2, [pc, #32]	@ (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4a:	f7fd ffad 	bl	8002da8 <HAL_GetTick>
 8004e4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e52:	f7fd ffa9 	bl	8002da8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d903      	bls.n	8004e68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e2af      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
 8004e64:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e68:	4b96      	ldr	r3, [pc, #600]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ee      	bne.n	8004e52 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d06a      	beq.n	8004f56 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e80:	4b90      	ldr	r3, [pc, #576]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e8a:	4b8e      	ldr	r3, [pc, #568]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d007      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x286>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b18      	cmp	r3, #24
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x2b4>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d116      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ea6:	4b87      	ldr	r3, [pc, #540]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_RCC_OscConfig+0x29e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	2b80      	cmp	r3, #128	@ 0x80
 8004eb8:	d001      	beq.n	8004ebe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e282      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ebe:	4b81      	ldr	r3, [pc, #516]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	497d      	ldr	r1, [pc, #500]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ed2:	e040      	b.n	8004f56 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d023      	beq.n	8004f24 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004edc:	4b79      	ldr	r3, [pc, #484]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a78      	ldr	r2, [pc, #480]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fd ff5e 	bl	8002da8 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ef0:	f7fd ff5a 	bl	8002da8 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e260      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f02:	4b70      	ldr	r3, [pc, #448]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	4969      	ldr	r1, [pc, #420]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60cb      	str	r3, [r1, #12]
 8004f22:	e018      	b.n	8004f56 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f24:	4b67      	ldr	r3, [pc, #412]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a66      	ldr	r2, [pc, #408]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fd ff3a 	bl	8002da8 <HAL_GetTick>
 8004f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f38:	f7fd ff36 	bl	8002da8 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e23c      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d036      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d019      	beq.n	8004f9e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f6a:	4b56      	ldr	r3, [pc, #344]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6e:	4a55      	ldr	r2, [pc, #340]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fd ff17 	bl	8002da8 <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7e:	f7fd ff13 	bl	8002da8 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e219      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f90:	4b4c      	ldr	r3, [pc, #304]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x35e>
 8004f9c:	e018      	b.n	8004fd0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f9e:	4b49      	ldr	r3, [pc, #292]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa2:	4a48      	ldr	r2, [pc, #288]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fd fefd 	bl	8002da8 <HAL_GetTick>
 8004fae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb2:	f7fd fef9 	bl	8002da8 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e1ff      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d036      	beq.n	800504a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d019      	beq.n	8005018 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fe4:	4b37      	ldr	r3, [pc, #220]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a36      	ldr	r2, [pc, #216]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ff0:	f7fd feda 	bl	8002da8 <HAL_GetTick>
 8004ff4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff8:	f7fd fed6 	bl	8002da8 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e1dc      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800500a:	4b2e      	ldr	r3, [pc, #184]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x3d8>
 8005016:	e018      	b.n	800504a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005018:	4b2a      	ldr	r3, [pc, #168]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a29      	ldr	r2, [pc, #164]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 800501e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005022:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005024:	f7fd fec0 	bl	8002da8 <HAL_GetTick>
 8005028:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800502c:	f7fd febc 	bl	8002da8 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e1c2      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800503e:	4b21      	ldr	r3, [pc, #132]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8086 	beq.w	8005164 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005058:	4b1b      	ldr	r3, [pc, #108]	@ (80050c8 <HAL_RCC_OscConfig+0x4a8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1a      	ldr	r2, [pc, #104]	@ (80050c8 <HAL_RCC_OscConfig+0x4a8>)
 800505e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005064:	f7fd fea0 	bl	8002da8 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506c:	f7fd fe9c 	bl	8002da8 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	@ 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e1a2      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800507e:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <HAL_RCC_OscConfig+0x4a8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d106      	bne.n	80050a0 <HAL_RCC_OscConfig+0x480>
 8005092:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005096:	4a0b      	ldr	r2, [pc, #44]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6713      	str	r3, [r2, #112]	@ 0x70
 800509e:	e032      	b.n	8005106 <HAL_RCC_OscConfig+0x4e6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d111      	bne.n	80050cc <HAL_RCC_OscConfig+0x4ac>
 80050a8:	4b06      	ldr	r3, [pc, #24]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ac:	4a05      	ldr	r2, [pc, #20]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b4:	4b03      	ldr	r3, [pc, #12]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b8:	4a02      	ldr	r2, [pc, #8]	@ (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 80050ba:	f023 0304 	bic.w	r3, r3, #4
 80050be:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c0:	e021      	b.n	8005106 <HAL_RCC_OscConfig+0x4e6>
 80050c2:	bf00      	nop
 80050c4:	58024400 	.word	0x58024400
 80050c8:	58024800 	.word	0x58024800
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d10c      	bne.n	80050ee <HAL_RCC_OscConfig+0x4ce>
 80050d4:	4b83      	ldr	r3, [pc, #524]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d8:	4a82      	ldr	r2, [pc, #520]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050da:	f043 0304 	orr.w	r3, r3, #4
 80050de:	6713      	str	r3, [r2, #112]	@ 0x70
 80050e0:	4b80      	ldr	r3, [pc, #512]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e4:	4a7f      	ldr	r2, [pc, #508]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ec:	e00b      	b.n	8005106 <HAL_RCC_OscConfig+0x4e6>
 80050ee:	4b7d      	ldr	r3, [pc, #500]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f2:	4a7c      	ldr	r2, [pc, #496]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050fa:	4b7a      	ldr	r3, [pc, #488]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fe:	4a79      	ldr	r2, [pc, #484]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005100:	f023 0304 	bic.w	r3, r3, #4
 8005104:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d015      	beq.n	800513a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510e:	f7fd fe4b 	bl	8002da8 <HAL_GetTick>
 8005112:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005114:	e00a      	b.n	800512c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005116:	f7fd fe47 	bl	8002da8 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e14b      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800512c:	4b6d      	ldr	r3, [pc, #436]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ee      	beq.n	8005116 <HAL_RCC_OscConfig+0x4f6>
 8005138:	e014      	b.n	8005164 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513a:	f7fd fe35 	bl	8002da8 <HAL_GetTick>
 800513e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005140:	e00a      	b.n	8005158 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005142:	f7fd fe31 	bl	8002da8 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e135      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005158:	4b62      	ldr	r3, [pc, #392]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ee      	bne.n	8005142 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 812a 	beq.w	80053c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800516e:	4b5d      	ldr	r3, [pc, #372]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005176:	2b18      	cmp	r3, #24
 8005178:	f000 80ba 	beq.w	80052f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	2b02      	cmp	r3, #2
 8005182:	f040 8095 	bne.w	80052b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005186:	4b57      	ldr	r3, [pc, #348]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a56      	ldr	r2, [pc, #344]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800518c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fd fe09 	bl	8002da8 <HAL_GetTick>
 8005196:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519a:	f7fd fe05 	bl	8002da8 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e10b      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051ac:	4b4d      	ldr	r3, [pc, #308]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b8:	4b4a      	ldr	r3, [pc, #296]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80051ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051bc:	4b4a      	ldr	r3, [pc, #296]	@ (80052e8 <HAL_RCC_OscConfig+0x6c8>)
 80051be:	4013      	ands	r3, r2
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051c8:	0112      	lsls	r2, r2, #4
 80051ca:	430a      	orrs	r2, r1
 80051cc:	4945      	ldr	r1, [pc, #276]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	628b      	str	r3, [r1, #40]	@ 0x28
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	3b01      	subs	r3, #1
 80051d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e0:	3b01      	subs	r3, #1
 80051e2:	025b      	lsls	r3, r3, #9
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	3b01      	subs	r3, #1
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	3b01      	subs	r3, #1
 80051fc:	061b      	lsls	r3, r3, #24
 80051fe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005202:	4938      	ldr	r1, [pc, #224]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005208:	4b36      	ldr	r3, [pc, #216]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	4a35      	ldr	r2, [pc, #212]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005214:	4b33      	ldr	r3, [pc, #204]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005218:	4b34      	ldr	r3, [pc, #208]	@ (80052ec <HAL_RCC_OscConfig+0x6cc>)
 800521a:	4013      	ands	r3, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005220:	00d2      	lsls	r2, r2, #3
 8005222:	4930      	ldr	r1, [pc, #192]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005224:	4313      	orrs	r3, r2
 8005226:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005228:	4b2e      	ldr	r3, [pc, #184]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	f023 020c 	bic.w	r2, r3, #12
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005234:	492b      	ldr	r1, [pc, #172]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005236:	4313      	orrs	r3, r2
 8005238:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800523a:	4b2a      	ldr	r3, [pc, #168]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	f023 0202 	bic.w	r2, r3, #2
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	4927      	ldr	r1, [pc, #156]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800524c:	4b25      	ldr	r3, [pc, #148]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	4a24      	ldr	r2, [pc, #144]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005258:	4b22      	ldr	r3, [pc, #136]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	4a21      	ldr	r2, [pc, #132]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005264:	4b1f      	ldr	r3, [pc, #124]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	4a1e      	ldr	r2, [pc, #120]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800526a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800526e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005270:	4b1c      	ldr	r3, [pc, #112]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	4a1b      	ldr	r2, [pc, #108]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800527c:	4b19      	ldr	r3, [pc, #100]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a18      	ldr	r2, [pc, #96]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd fd8e 	bl	8002da8 <HAL_GetTick>
 800528c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7fd fd8a 	bl	8002da8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e090      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052a2:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x670>
 80052ae:	e088      	b.n	80053c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b0:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0b      	ldr	r2, [pc, #44]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80052b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fd fd74 	bl	8002da8 <HAL_GetTick>
 80052c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fd fd70 	bl	8002da8 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e076      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052d6:	4b03      	ldr	r3, [pc, #12]	@ (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x6a4>
 80052e2:	e06e      	b.n	80053c2 <HAL_RCC_OscConfig+0x7a2>
 80052e4:	58024400 	.word	0x58024400
 80052e8:	fffffc0c 	.word	0xfffffc0c
 80052ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052f0:	4b36      	ldr	r3, [pc, #216]	@ (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052f6:	4b35      	ldr	r3, [pc, #212]	@ (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	2b01      	cmp	r3, #1
 8005302:	d031      	beq.n	8005368 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f003 0203 	and.w	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d12a      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d122      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d11a      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	0a5b      	lsrs	r3, r3, #9
 8005336:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d111      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d108      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	0e1b      	lsrs	r3, r3, #24
 800535a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005362:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e02b      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800536c:	4b17      	ldr	r3, [pc, #92]	@ (80053cc <HAL_RCC_OscConfig+0x7ac>)
 800536e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005370:	08db      	lsrs	r3, r3, #3
 8005372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005376:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	429a      	cmp	r2, r3
 8005380:	d01f      	beq.n	80053c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005382:	4b12      	ldr	r3, [pc, #72]	@ (80053cc <HAL_RCC_OscConfig+0x7ac>)
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	4a11      	ldr	r2, [pc, #68]	@ (80053cc <HAL_RCC_OscConfig+0x7ac>)
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800538e:	f7fd fd0b 	bl	8002da8 <HAL_GetTick>
 8005392:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005394:	bf00      	nop
 8005396:	f7fd fd07 	bl	8002da8 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	4293      	cmp	r3, r2
 80053a0:	d0f9      	beq.n	8005396 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80053a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053a6:	4b0a      	ldr	r3, [pc, #40]	@ (80053d0 <HAL_RCC_OscConfig+0x7b0>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053ae:	00d2      	lsls	r2, r2, #3
 80053b0:	4906      	ldr	r1, [pc, #24]	@ (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053b6:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	4a04      	ldr	r2, [pc, #16]	@ (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3730      	adds	r7, #48	@ 0x30
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	58024400 	.word	0x58024400
 80053d0:	ffff0007 	.word	0xffff0007

080053d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e19c      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005614 <HAL_RCC_ClockConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d910      	bls.n	8005418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b87      	ldr	r3, [pc, #540]	@ (8005614 <HAL_RCC_ClockConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 020f 	bic.w	r2, r3, #15
 80053fe:	4985      	ldr	r1, [pc, #532]	@ (8005614 <HAL_RCC_ClockConfig+0x240>)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005406:	4b83      	ldr	r3, [pc, #524]	@ (8005614 <HAL_RCC_ClockConfig+0x240>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e184      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	4b7b      	ldr	r3, [pc, #492]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005430:	429a      	cmp	r2, r3
 8005432:	d908      	bls.n	8005446 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005434:	4b78      	ldr	r3, [pc, #480]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	4975      	ldr	r1, [pc, #468]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005442:	4313      	orrs	r3, r2
 8005444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d010      	beq.n	8005474 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	4b70      	ldr	r3, [pc, #448]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800545e:	429a      	cmp	r2, r3
 8005460:	d908      	bls.n	8005474 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005462:	4b6d      	ldr	r3, [pc, #436]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	496a      	ldr	r1, [pc, #424]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005470:	4313      	orrs	r3, r2
 8005472:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d010      	beq.n	80054a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699a      	ldr	r2, [r3, #24]
 8005484:	4b64      	ldr	r3, [pc, #400]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800548c:	429a      	cmp	r2, r3
 800548e:	d908      	bls.n	80054a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005490:	4b61      	ldr	r3, [pc, #388]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	495e      	ldr	r1, [pc, #376]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	4b59      	ldr	r3, [pc, #356]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d908      	bls.n	80054d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054be:	4b56      	ldr	r3, [pc, #344]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4953      	ldr	r1, [pc, #332]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d908      	bls.n	80054fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ec:	4b4a      	ldr	r3, [pc, #296]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f023 020f 	bic.w	r2, r3, #15
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4947      	ldr	r1, [pc, #284]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d055      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800550a:	4b43      	ldr	r3, [pc, #268]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	4940      	ldr	r1, [pc, #256]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005518:	4313      	orrs	r3, r2
 800551a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d107      	bne.n	8005534 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005524:	4b3c      	ldr	r3, [pc, #240]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d121      	bne.n	8005574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0f6      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d107      	bne.n	800554c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800553c:	4b36      	ldr	r3, [pc, #216]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d115      	bne.n	8005574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e0ea      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d107      	bne.n	8005564 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005554:	4b30      	ldr	r3, [pc, #192]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0de      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005564:	4b2c      	ldr	r3, [pc, #176]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0d6      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005574:	4b28      	ldr	r3, [pc, #160]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f023 0207 	bic.w	r2, r3, #7
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4925      	ldr	r1, [pc, #148]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005582:	4313      	orrs	r3, r2
 8005584:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005586:	f7fd fc0f 	bl	8002da8 <HAL_GetTick>
 800558a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558e:	f7fd fc0b 	bl	8002da8 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e0be      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d1eb      	bne.n	800558e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d010      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d208      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d2:	4b11      	ldr	r3, [pc, #68]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f023 020f 	bic.w	r2, r3, #15
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	490e      	ldr	r1, [pc, #56]	@ (8005618 <HAL_RCC_ClockConfig+0x244>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <HAL_RCC_ClockConfig+0x240>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d214      	bcs.n	800561c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b08      	ldr	r3, [pc, #32]	@ (8005614 <HAL_RCC_ClockConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 020f 	bic.w	r2, r3, #15
 80055fa:	4906      	ldr	r1, [pc, #24]	@ (8005614 <HAL_RCC_ClockConfig+0x240>)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005602:	4b04      	ldr	r3, [pc, #16]	@ (8005614 <HAL_RCC_ClockConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d005      	beq.n	800561c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e086      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
 8005614:	52002000 	.word	0x52002000
 8005618:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d010      	beq.n	800564a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	4b3f      	ldr	r3, [pc, #252]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005634:	429a      	cmp	r2, r3
 8005636:	d208      	bcs.n	800564a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005638:	4b3c      	ldr	r3, [pc, #240]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	4939      	ldr	r1, [pc, #228]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 8005646:	4313      	orrs	r3, r2
 8005648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d010      	beq.n	8005678 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	4b34      	ldr	r3, [pc, #208]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005662:	429a      	cmp	r2, r3
 8005664:	d208      	bcs.n	8005678 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005666:	4b31      	ldr	r3, [pc, #196]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	492e      	ldr	r1, [pc, #184]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 8005674:	4313      	orrs	r3, r2
 8005676:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d010      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	4b28      	ldr	r3, [pc, #160]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005690:	429a      	cmp	r2, r3
 8005692:	d208      	bcs.n	80056a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005694:	4b25      	ldr	r3, [pc, #148]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	4922      	ldr	r1, [pc, #136]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	4b1d      	ldr	r3, [pc, #116]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056be:	429a      	cmp	r2, r3
 80056c0:	d208      	bcs.n	80056d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056c2:	4b1a      	ldr	r3, [pc, #104]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	4917      	ldr	r1, [pc, #92]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056d4:	f000 f834 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b14      	ldr	r3, [pc, #80]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	4912      	ldr	r1, [pc, #72]	@ (8005730 <HAL_RCC_ClockConfig+0x35c>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
 80056f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056f2:	4b0e      	ldr	r3, [pc, #56]	@ (800572c <HAL_RCC_ClockConfig+0x358>)
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005730 <HAL_RCC_ClockConfig+0x35c>)
 80056fc:	5cd3      	ldrb	r3, [r2, r3]
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
 8005708:	4a0a      	ldr	r2, [pc, #40]	@ (8005734 <HAL_RCC_ClockConfig+0x360>)
 800570a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800570c:	4a0a      	ldr	r2, [pc, #40]	@ (8005738 <HAL_RCC_ClockConfig+0x364>)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005712:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <HAL_RCC_ClockConfig+0x368>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f7fd fafc 	bl	8002d14 <HAL_InitTick>
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	58024400 	.word	0x58024400
 8005730:	0800e22c 	.word	0x0800e22c
 8005734:	24000020 	.word	0x24000020
 8005738:	2400001c 	.word	0x2400001c
 800573c:	24000028 	.word	0x24000028

08005740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	@ 0x24
 8005744:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005746:	4bb3      	ldr	r3, [pc, #716]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800574e:	2b18      	cmp	r3, #24
 8005750:	f200 8155 	bhi.w	80059fe <HAL_RCC_GetSysClockFreq+0x2be>
 8005754:	a201      	add	r2, pc, #4	@ (adr r2, 800575c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	080057c1 	.word	0x080057c1
 8005760:	080059ff 	.word	0x080059ff
 8005764:	080059ff 	.word	0x080059ff
 8005768:	080059ff 	.word	0x080059ff
 800576c:	080059ff 	.word	0x080059ff
 8005770:	080059ff 	.word	0x080059ff
 8005774:	080059ff 	.word	0x080059ff
 8005778:	080059ff 	.word	0x080059ff
 800577c:	080057e7 	.word	0x080057e7
 8005780:	080059ff 	.word	0x080059ff
 8005784:	080059ff 	.word	0x080059ff
 8005788:	080059ff 	.word	0x080059ff
 800578c:	080059ff 	.word	0x080059ff
 8005790:	080059ff 	.word	0x080059ff
 8005794:	080059ff 	.word	0x080059ff
 8005798:	080059ff 	.word	0x080059ff
 800579c:	080057ed 	.word	0x080057ed
 80057a0:	080059ff 	.word	0x080059ff
 80057a4:	080059ff 	.word	0x080059ff
 80057a8:	080059ff 	.word	0x080059ff
 80057ac:	080059ff 	.word	0x080059ff
 80057b0:	080059ff 	.word	0x080059ff
 80057b4:	080059ff 	.word	0x080059ff
 80057b8:	080059ff 	.word	0x080059ff
 80057bc:	080057f3 	.word	0x080057f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057c0:	4b94      	ldr	r3, [pc, #592]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057cc:	4b91      	ldr	r3, [pc, #580]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	08db      	lsrs	r3, r3, #3
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	4a90      	ldr	r2, [pc, #576]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
 80057dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80057de:	e111      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057e0:	4b8d      	ldr	r3, [pc, #564]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057e2:	61bb      	str	r3, [r7, #24]
      break;
 80057e4:	e10e      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057e6:	4b8d      	ldr	r3, [pc, #564]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057e8:	61bb      	str	r3, [r7, #24]
      break;
 80057ea:	e10b      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057ee:	61bb      	str	r3, [r7, #24]
      break;
 80057f0:	e108      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057f2:	4b88      	ldr	r3, [pc, #544]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057fc:	4b85      	ldr	r3, [pc, #532]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005806:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005808:	4b82      	ldr	r3, [pc, #520]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005812:	4b80      	ldr	r3, [pc, #512]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005816:	08db      	lsrs	r3, r3, #3
 8005818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80e1 	beq.w	80059f8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b02      	cmp	r3, #2
 800583a:	f000 8083 	beq.w	8005944 <HAL_RCC_GetSysClockFreq+0x204>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b02      	cmp	r3, #2
 8005842:	f200 80a1 	bhi.w	8005988 <HAL_RCC_GetSysClockFreq+0x248>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x114>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d056      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005852:	e099      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005854:	4b6f      	ldr	r3, [pc, #444]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02d      	beq.n	80058bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005860:	4b6c      	ldr	r3, [pc, #432]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	08db      	lsrs	r3, r3, #3
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	4a6b      	ldr	r2, [pc, #428]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
 8005870:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b62      	ldr	r3, [pc, #392]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a02 	vldr	s12, [r7, #8]
 800589e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80058ba:	e087      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a28 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b51      	ldr	r3, [pc, #324]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058fe:	e065      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b40      	ldr	r3, [pc, #256]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a02 	vldr	s12, [r7, #8]
 8005926:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005942:	e043      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b2f      	ldr	r3, [pc, #188]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a02 	vldr	s12, [r7, #8]
 800596a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005986:	e021      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059cc:	4b11      	ldr	r3, [pc, #68]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d0:	0a5b      	lsrs	r3, r3, #9
 80059d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059d6:	3301      	adds	r3, #1
 80059d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f0:	ee17 3a90 	vmov	r3, s15
 80059f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059f6:	e005      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
      break;
 80059fc:	e002      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059fe:	4b07      	ldr	r3, [pc, #28]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a00:	61bb      	str	r3, [r7, #24]
      break;
 8005a02:	bf00      	nop
  }

  return sysclockfreq;
 8005a04:	69bb      	ldr	r3, [r7, #24]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3724      	adds	r7, #36	@ 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	58024400 	.word	0x58024400
 8005a18:	03d09000 	.word	0x03d09000
 8005a1c:	003d0900 	.word	0x003d0900
 8005a20:	017d7840 	.word	0x017d7840
 8005a24:	46000000 	.word	0x46000000
 8005a28:	4c742400 	.word	0x4c742400
 8005a2c:	4a742400 	.word	0x4a742400
 8005a30:	4bbebc20 	.word	0x4bbebc20

08005a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a3a:	f7ff fe81 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4b10      	ldr	r3, [pc, #64]	@ (8005a84 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	490f      	ldr	r1, [pc, #60]	@ (8005a88 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a4c:	5ccb      	ldrb	r3, [r1, r3]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a58:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a62:	5cd3      	ldrb	r3, [r2, r3]
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6e:	4a07      	ldr	r2, [pc, #28]	@ (8005a8c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a72:	4a07      	ldr	r2, [pc, #28]	@ (8005a90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a78:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	58024400 	.word	0x58024400
 8005a88:	0800e22c 	.word	0x0800e22c
 8005a8c:	24000020 	.word	0x24000020
 8005a90:	2400001c 	.word	0x2400001c

08005a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a98:	f7ff ffcc 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	4904      	ldr	r1, [pc, #16]	@ (8005abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	0800e22c 	.word	0x0800e22c

08005ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ac4:	f7ff ffb6 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	4904      	ldr	r1, [pc, #16]	@ (8005ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ad6:	5ccb      	ldrb	r3, [r1, r3]
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	0800e22c 	.word	0x0800e22c

08005aec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b0c6      	sub	sp, #280	@ 0x118
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b10:	2500      	movs	r5, #0
 8005b12:	ea54 0305 	orrs.w	r3, r4, r5
 8005b16:	d049      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b22:	d02f      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b28:	d828      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b2e:	d01a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b34:	d822      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b3e:	d007      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b40:	e01c      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b42:	4bab      	ldr	r3, [pc, #684]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b46:	4aaa      	ldr	r2, [pc, #680]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b4e:	e01a      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b54:	3308      	adds	r3, #8
 8005b56:	2102      	movs	r1, #2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 fc25 	bl	80073a8 <RCCEx_PLL2_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b64:	e00f      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6a:	3328      	adds	r3, #40	@ 0x28
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 fccc 	bl	800750c <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b7a:	e004      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b8e:	4b98      	ldr	r3, [pc, #608]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b9c:	4a94      	ldr	r2, [pc, #592]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ba2:	e003      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005bb8:	f04f 0900 	mov.w	r9, #0
 8005bbc:	ea58 0309 	orrs.w	r3, r8, r9
 8005bc0:	d047      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d82a      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005be9 	.word	0x08005be9
 8005bd8:	08005bf7 	.word	0x08005bf7
 8005bdc:	08005c0d 	.word	0x08005c0d
 8005be0:	08005c2b 	.word	0x08005c2b
 8005be4:	08005c2b 	.word	0x08005c2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be8:	4b81      	ldr	r3, [pc, #516]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	4a80      	ldr	r2, [pc, #512]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e01a      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fbd2 	bl	80073a8 <RCCEx_PLL2_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c0a:	e00f      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c10:	3328      	adds	r3, #40	@ 0x28
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fc79 	bl	800750c <RCCEx_PLL3_Config>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c20:	e004      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c34:	4b6e      	ldr	r3, [pc, #440]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c38:	f023 0107 	bic.w	r1, r3, #7
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	4a6b      	ldr	r2, [pc, #428]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c48:	e003      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005c5e:	f04f 0b00 	mov.w	fp, #0
 8005c62:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c66:	d05b      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c70:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c74:	d03b      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c76:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c7a:	d834      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c80:	d037      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c86:	d82e      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c8c:	d033      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c92:	d828      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c98:	d01a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c9e:	d822      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005ca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ca8:	d007      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005caa:	e01c      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cac:	4b50      	ldr	r3, [pc, #320]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cb8:	e01e      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 fb70 	bl	80073a8 <RCCEx_PLL2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cce:	e013      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd4:	3328      	adds	r3, #40	@ 0x28
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 fc17 	bl	800750c <RCCEx_PLL3_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cec:	e004      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d00:	4b3b      	ldr	r3, [pc, #236]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d04:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d10:	4a37      	ldr	r2, [pc, #220]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d16:	e003      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d30:	2300      	movs	r3, #0
 8005d32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	d05d      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d48:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d4c:	d03b      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d4e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d52:	d834      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d58:	d037      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d5e:	d82e      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d64:	d033      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d6a:	d828      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d70:	d01a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d76:	d822      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d80:	d007      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d82:	e01c      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d84:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	4a19      	ldr	r2, [pc, #100]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d90:	e01e      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	3308      	adds	r3, #8
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fb04 	bl	80073a8 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005da6:	e013      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dac:	3328      	adds	r3, #40	@ 0x28
 8005dae:	2100      	movs	r1, #0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fbab 	bl	800750c <RCCEx_PLL3_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dc4:	e004      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10d      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005dd8:	4b05      	ldr	r3, [pc, #20]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ddc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005de8:	4a01      	ldr	r2, [pc, #4]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dea:	430b      	orrs	r3, r1
 8005dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dee:	e005      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005df0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e12:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d03a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e22:	2b30      	cmp	r3, #48	@ 0x30
 8005e24:	d01f      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e26:	2b30      	cmp	r3, #48	@ 0x30
 8005e28:	d819      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d00c      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d815      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d019      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e36:	2b10      	cmp	r3, #16
 8005e38:	d111      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3a:	4baa      	ldr	r3, [pc, #680]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3e:	4aa9      	ldr	r2, [pc, #676]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e46:	e011      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2102      	movs	r1, #2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 faa9 	bl	80073a8 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e5c:	e006      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e64:	e002      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e66:	bf00      	nop
 8005e68:	e000      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e74:	4b9b      	ldr	r3, [pc, #620]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e78:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e82:	4a98      	ldr	r2, [pc, #608]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e84:	430b      	orrs	r3, r1
 8005e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e88:	e003      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ea8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005eac:	460b      	mov	r3, r1
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	d051      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ebc:	d035      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005ebe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ec2:	d82e      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ec4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ec8:	d031      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005eca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ece:	d828      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed4:	d01a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eda:	d822      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee4:	d007      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005ee6:	e01c      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	4a7d      	ldr	r2, [pc, #500]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ef4:	e01c      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efa:	3308      	adds	r3, #8
 8005efc:	2100      	movs	r1, #0
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 fa52 	bl	80073a8 <RCCEx_PLL2_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f0a:	e011      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f10:	3328      	adds	r3, #40	@ 0x28
 8005f12:	2100      	movs	r1, #0
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 faf9 	bl	800750c <RCCEx_PLL3_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f20:	e006      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f28:	e002      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f2a:	bf00      	nop
 8005f2c:	e000      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f38:	4b6a      	ldr	r3, [pc, #424]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f46:	4a67      	ldr	r2, [pc, #412]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f4c:	e003      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f66:	2300      	movs	r3, #0
 8005f68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f6c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4313      	orrs	r3, r2
 8005f74:	d053      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f80:	d033      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f86:	d82c      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f8c:	d02f      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f92:	d826      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f98:	d02b      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f9e:	d820      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fa4:	d012      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005faa:	d81a      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d022      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fb4:	d115      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fba:	3308      	adds	r3, #8
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 f9f2 	bl	80073a8 <RCCEx_PLL2_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fca:	e015      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd0:	3328      	adds	r3, #40	@ 0x28
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 fa99 	bl	800750c <RCCEx_PLL3_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fea:	bf00      	nop
 8005fec:	e004      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006000:	4b38      	ldr	r3, [pc, #224]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006004:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800600e:	4a35      	ldr	r2, [pc, #212]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006010:	430b      	orrs	r3, r1
 8006012:	6513      	str	r3, [r2, #80]	@ 0x50
 8006014:	e003      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800601a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800602a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800602e:	2300      	movs	r3, #0
 8006030:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006034:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006038:	460b      	mov	r3, r1
 800603a:	4313      	orrs	r3, r2
 800603c:	d058      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800603e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006042:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800604a:	d033      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800604c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006050:	d82c      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006056:	d02f      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605c:	d826      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800605e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006062:	d02b      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006064:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006068:	d820      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800606a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800606e:	d012      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006074:	d81a      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d022      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800607a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800607e:	d115      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006084:	3308      	adds	r3, #8
 8006086:	2101      	movs	r1, #1
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f98d 	bl	80073a8 <RCCEx_PLL2_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006094:	e015      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609a:	3328      	adds	r3, #40	@ 0x28
 800609c:	2101      	movs	r1, #1
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fa34 	bl	800750c <RCCEx_PLL3_Config>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060aa:	e00a      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060b2:	e006      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060b4:	bf00      	nop
 80060b6:	e004      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060b8:	bf00      	nop
 80060ba:	e002      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10e      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060ca:	4b06      	ldr	r3, [pc, #24]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060da:	4a02      	ldr	r2, [pc, #8]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060dc:	430b      	orrs	r3, r1
 80060de:	6593      	str	r3, [r2, #88]	@ 0x58
 80060e0:	e006      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80060e2:	bf00      	nop
 80060e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006106:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d037      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800611a:	d00e      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800611c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006120:	d816      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800612a:	d111      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612c:	4bc4      	ldr	r3, [pc, #784]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800612e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006130:	4ac3      	ldr	r2, [pc, #780]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006138:	e00f      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613e:	3308      	adds	r3, #8
 8006140:	2101      	movs	r1, #1
 8006142:	4618      	mov	r0, r3
 8006144:	f001 f930 	bl	80073a8 <RCCEx_PLL2_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800614e:	e004      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006156:	e000      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800615a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006162:	4bb7      	ldr	r3, [pc, #732]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006166:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006170:	4ab3      	ldr	r2, [pc, #716]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006172:	430b      	orrs	r3, r1
 8006174:	6513      	str	r3, [r2, #80]	@ 0x50
 8006176:	e003      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800617c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800618c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006190:	2300      	movs	r3, #0
 8006192:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006196:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800619a:	460b      	mov	r3, r1
 800619c:	4313      	orrs	r3, r2
 800619e:	d039      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d81c      	bhi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80061aa:	a201      	add	r2, pc, #4	@ (adr r2, 80061b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061ed 	.word	0x080061ed
 80061b4:	080061c1 	.word	0x080061c1
 80061b8:	080061cf 	.word	0x080061cf
 80061bc:	080061ed 	.word	0x080061ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c0:	4b9f      	ldr	r3, [pc, #636]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	4a9e      	ldr	r2, [pc, #632]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061cc:	e00f      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d2:	3308      	adds	r3, #8
 80061d4:	2102      	movs	r1, #2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f8e6 	bl	80073a8 <RCCEx_PLL2_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061e2:	e004      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061ea:	e000      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80061ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061f6:	4b92      	ldr	r3, [pc, #584]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fa:	f023 0103 	bic.w	r1, r3, #3
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006204:	4a8e      	ldr	r2, [pc, #568]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006206:	430b      	orrs	r3, r1
 8006208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800620a:	e003      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006220:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800622a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	f000 8099 	beq.w	8006368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006236:	4b83      	ldr	r3, [pc, #524]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a82      	ldr	r2, [pc, #520]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006242:	f7fc fdb1 	bl	8002da8 <HAL_GetTick>
 8006246:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800624a:	e00b      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624c:	f7fc fdac 	bl	8002da8 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b64      	cmp	r3, #100	@ 0x64
 800625a:	d903      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006262:	e005      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006264:	4b77      	ldr	r3, [pc, #476]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0ed      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006274:	2b00      	cmp	r3, #0
 8006276:	d173      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006278:	4b71      	ldr	r3, [pc, #452]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800627a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800627c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006280:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006284:	4053      	eors	r3, r2
 8006286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628a:	2b00      	cmp	r3, #0
 800628c:	d015      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800628e:	4b6c      	ldr	r3, [pc, #432]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006296:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800629a:	4b69      	ldr	r3, [pc, #420]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629e:	4a68      	ldr	r2, [pc, #416]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062a6:	4b66      	ldr	r3, [pc, #408]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062aa:	4a65      	ldr	r2, [pc, #404]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062b2:	4a63      	ldr	r2, [pc, #396]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c6:	d118      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7fc fd6e 	bl	8002da8 <HAL_GetTick>
 80062cc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062d0:	e00d      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d2:	f7fc fd69 	bl	8002da8 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062dc:	1ad2      	subs	r2, r2, r3
 80062de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d903      	bls.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80062ec:	e005      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ee:	4b54      	ldr	r3, [pc, #336]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0eb      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d129      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800630a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800630e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006312:	d10e      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006314:	4b4a      	ldr	r3, [pc, #296]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006324:	091a      	lsrs	r2, r3, #4
 8006326:	4b48      	ldr	r3, [pc, #288]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006328:	4013      	ands	r3, r2
 800632a:	4a45      	ldr	r2, [pc, #276]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800632c:	430b      	orrs	r3, r1
 800632e:	6113      	str	r3, [r2, #16]
 8006330:	e005      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006332:	4b43      	ldr	r3, [pc, #268]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	4a42      	ldr	r2, [pc, #264]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006338:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800633c:	6113      	str	r3, [r2, #16]
 800633e:	4b40      	ldr	r3, [pc, #256]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006340:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800634a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800634e:	4a3c      	ldr	r2, [pc, #240]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006350:	430b      	orrs	r3, r1
 8006352:	6713      	str	r3, [r2, #112]	@ 0x70
 8006354:	e008      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800635a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800635e:	e003      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f002 0301 	and.w	r3, r2, #1
 8006374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006378:	2300      	movs	r3, #0
 800637a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800637e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	f000 808f 	beq.w	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006390:	2b28      	cmp	r3, #40	@ 0x28
 8006392:	d871      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006394:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	08006481 	.word	0x08006481
 80063a0:	08006479 	.word	0x08006479
 80063a4:	08006479 	.word	0x08006479
 80063a8:	08006479 	.word	0x08006479
 80063ac:	08006479 	.word	0x08006479
 80063b0:	08006479 	.word	0x08006479
 80063b4:	08006479 	.word	0x08006479
 80063b8:	08006479 	.word	0x08006479
 80063bc:	0800644d 	.word	0x0800644d
 80063c0:	08006479 	.word	0x08006479
 80063c4:	08006479 	.word	0x08006479
 80063c8:	08006479 	.word	0x08006479
 80063cc:	08006479 	.word	0x08006479
 80063d0:	08006479 	.word	0x08006479
 80063d4:	08006479 	.word	0x08006479
 80063d8:	08006479 	.word	0x08006479
 80063dc:	08006463 	.word	0x08006463
 80063e0:	08006479 	.word	0x08006479
 80063e4:	08006479 	.word	0x08006479
 80063e8:	08006479 	.word	0x08006479
 80063ec:	08006479 	.word	0x08006479
 80063f0:	08006479 	.word	0x08006479
 80063f4:	08006479 	.word	0x08006479
 80063f8:	08006479 	.word	0x08006479
 80063fc:	08006481 	.word	0x08006481
 8006400:	08006479 	.word	0x08006479
 8006404:	08006479 	.word	0x08006479
 8006408:	08006479 	.word	0x08006479
 800640c:	08006479 	.word	0x08006479
 8006410:	08006479 	.word	0x08006479
 8006414:	08006479 	.word	0x08006479
 8006418:	08006479 	.word	0x08006479
 800641c:	08006481 	.word	0x08006481
 8006420:	08006479 	.word	0x08006479
 8006424:	08006479 	.word	0x08006479
 8006428:	08006479 	.word	0x08006479
 800642c:	08006479 	.word	0x08006479
 8006430:	08006479 	.word	0x08006479
 8006434:	08006479 	.word	0x08006479
 8006438:	08006479 	.word	0x08006479
 800643c:	08006481 	.word	0x08006481
 8006440:	58024400 	.word	0x58024400
 8006444:	58024800 	.word	0x58024800
 8006448:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006450:	3308      	adds	r3, #8
 8006452:	2101      	movs	r1, #1
 8006454:	4618      	mov	r0, r3
 8006456:	f000 ffa7 	bl	80073a8 <RCCEx_PLL2_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006460:	e00f      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006466:	3328      	adds	r3, #40	@ 0x28
 8006468:	2101      	movs	r1, #1
 800646a:	4618      	mov	r0, r3
 800646c:	f001 f84e 	bl	800750c <RCCEx_PLL3_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006476:	e004      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800647e:	e000      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006482:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800648a:	4bbf      	ldr	r3, [pc, #764]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800648c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006496:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006498:	4abb      	ldr	r2, [pc, #748]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800649a:	430b      	orrs	r3, r1
 800649c:	6553      	str	r3, [r2, #84]	@ 0x54
 800649e:	e003      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	f002 0302 	and.w	r3, r2, #2
 80064b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064b8:	2300      	movs	r3, #0
 80064ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4313      	orrs	r3, r2
 80064c6:	d041      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	d824      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80064d2:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	08006525 	.word	0x08006525
 80064dc:	080064f1 	.word	0x080064f1
 80064e0:	08006507 	.word	0x08006507
 80064e4:	08006525 	.word	0x08006525
 80064e8:	08006525 	.word	0x08006525
 80064ec:	08006525 	.word	0x08006525
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	3308      	adds	r3, #8
 80064f6:	2101      	movs	r1, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 ff55 	bl	80073a8 <RCCEx_PLL2_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006504:	e00f      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650a:	3328      	adds	r3, #40	@ 0x28
 800650c:	2101      	movs	r1, #1
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fffc 	bl	800750c <RCCEx_PLL3_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800651a:	e004      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006522:	e000      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006526:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800652e:	4b96      	ldr	r3, [pc, #600]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006532:	f023 0107 	bic.w	r1, r3, #7
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800653c:	4a92      	ldr	r2, [pc, #584]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800653e:	430b      	orrs	r3, r1
 8006540:	6553      	str	r3, [r2, #84]	@ 0x54
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006548:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f002 0304 	and.w	r3, r2, #4
 8006558:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800655c:	2300      	movs	r3, #0
 800655e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006562:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d044      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006574:	2b05      	cmp	r3, #5
 8006576:	d825      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006578:	a201      	add	r2, pc, #4	@ (adr r2, 8006580 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	080065cd 	.word	0x080065cd
 8006584:	08006599 	.word	0x08006599
 8006588:	080065af 	.word	0x080065af
 800658c:	080065cd 	.word	0x080065cd
 8006590:	080065cd 	.word	0x080065cd
 8006594:	080065cd 	.word	0x080065cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659c:	3308      	adds	r3, #8
 800659e:	2101      	movs	r1, #1
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 ff01 	bl	80073a8 <RCCEx_PLL2_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065ac:	e00f      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b2:	3328      	adds	r3, #40	@ 0x28
 80065b4:	2101      	movs	r1, #1
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 ffa8 	bl	800750c <RCCEx_PLL3_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065c2:	e004      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065ca:	e000      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80065cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065da:	f023 0107 	bic.w	r1, r3, #7
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e6:	4a68      	ldr	r2, [pc, #416]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ec:	e003      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f002 0320 	and.w	r3, r2, #32
 8006602:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006606:	2300      	movs	r3, #0
 8006608:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800660c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006610:	460b      	mov	r3, r1
 8006612:	4313      	orrs	r3, r2
 8006614:	d055      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800661e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006622:	d033      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006628:	d82c      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662e:	d02f      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006634:	d826      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006636:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800663a:	d02b      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800663c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006640:	d820      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006646:	d012      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664c:	d81a      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d022      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006656:	d115      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665c:	3308      	adds	r3, #8
 800665e:	2100      	movs	r1, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fea1 	bl	80073a8 <RCCEx_PLL2_Config>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800666c:	e015      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006672:	3328      	adds	r3, #40	@ 0x28
 8006674:	2102      	movs	r1, #2
 8006676:	4618      	mov	r0, r3
 8006678:	f000 ff48 	bl	800750c <RCCEx_PLL3_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006682:	e00a      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800668a:	e006      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800668c:	bf00      	nop
 800668e:	e004      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006690:	bf00      	nop
 8006692:	e002      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006694:	bf00      	nop
 8006696:	e000      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800669a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10b      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066a2:	4b39      	ldr	r3, [pc, #228]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066b2:	4a35      	ldr	r2, [pc, #212]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066b4:	430b      	orrs	r3, r1
 80066b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80066b8:	e003      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066d2:	2300      	movs	r3, #0
 80066d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066d8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066dc:	460b      	mov	r3, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	d058      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066ee:	d033      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80066f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066f4:	d82c      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066fa:	d02f      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006700:	d826      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006702:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006706:	d02b      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006708:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800670c:	d820      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800670e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006712:	d012      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006718:	d81a      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d022      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800671e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006722:	d115      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006728:	3308      	adds	r3, #8
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fe3b 	bl	80073a8 <RCCEx_PLL2_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006738:	e015      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673e:	3328      	adds	r3, #40	@ 0x28
 8006740:	2102      	movs	r1, #2
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fee2 	bl	800750c <RCCEx_PLL3_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800674e:	e00a      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006756:	e006      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006758:	bf00      	nop
 800675a:	e004      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800675c:	bf00      	nop
 800675e:	e002      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006760:	bf00      	nop
 8006762:	e000      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006766:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10e      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800676e:	4b06      	ldr	r3, [pc, #24]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006772:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800677e:	4a02      	ldr	r2, [pc, #8]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006780:	430b      	orrs	r3, r1
 8006782:	6593      	str	r3, [r2, #88]	@ 0x58
 8006784:	e006      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006790:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80067a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067a4:	2300      	movs	r3, #0
 80067a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067ae:	460b      	mov	r3, r1
 80067b0:	4313      	orrs	r3, r2
 80067b2:	d055      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067c0:	d033      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80067c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067c6:	d82c      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067cc:	d02f      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80067ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067d2:	d826      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067d8:	d02b      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80067da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067de:	d820      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067e4:	d012      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80067e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ea:	d81a      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d022      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80067f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067f4:	d115      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fa:	3308      	adds	r3, #8
 80067fc:	2100      	movs	r1, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fdd2 	bl	80073a8 <RCCEx_PLL2_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800680a:	e015      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	3328      	adds	r3, #40	@ 0x28
 8006812:	2102      	movs	r1, #2
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fe79 	bl	800750c <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006820:	e00a      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006828:	e006      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800682a:	bf00      	nop
 800682c:	e004      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800682e:	bf00      	nop
 8006830:	e002      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006840:	4ba0      	ldr	r3, [pc, #640]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006844:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006850:	4a9c      	ldr	r2, [pc, #624]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006852:	430b      	orrs	r3, r1
 8006854:	6593      	str	r3, [r2, #88]	@ 0x58
 8006856:	e003      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006858:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800685c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f002 0308 	and.w	r3, r2, #8
 800686c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006870:	2300      	movs	r3, #0
 8006872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006876:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800687a:	460b      	mov	r3, r1
 800687c:	4313      	orrs	r3, r2
 800687e:	d01e      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800688c:	d10c      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	3328      	adds	r3, #40	@ 0x28
 8006894:	2102      	movs	r1, #2
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fe38 	bl	800750c <RCCEx_PLL3_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80068a8:	4b86      	ldr	r3, [pc, #536]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b8:	4a82      	ldr	r2, [pc, #520]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068ba:	430b      	orrs	r3, r1
 80068bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	f002 0310 	and.w	r3, r2, #16
 80068ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068ce:	2300      	movs	r3, #0
 80068d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068d8:	460b      	mov	r3, r1
 80068da:	4313      	orrs	r3, r2
 80068dc:	d01e      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ea:	d10c      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f0:	3328      	adds	r3, #40	@ 0x28
 80068f2:	2102      	movs	r1, #2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fe09 	bl	800750c <RCCEx_PLL3_Config>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006906:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006916:	4a6b      	ldr	r2, [pc, #428]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006918:	430b      	orrs	r3, r1
 800691a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800692a:	2300      	movs	r3, #0
 800692c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800692e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006932:	460b      	mov	r3, r1
 8006934:	4313      	orrs	r3, r2
 8006936:	d03e      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006944:	d022      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006946:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800694a:	d81b      	bhi.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006954:	d00b      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006956:	e015      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695c:	3308      	adds	r3, #8
 800695e:	2100      	movs	r1, #0
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fd21 	bl	80073a8 <RCCEx_PLL2_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800696c:	e00f      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800696e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006972:	3328      	adds	r3, #40	@ 0x28
 8006974:	2102      	movs	r1, #2
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fdc8 	bl	800750c <RCCEx_PLL3_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006982:	e004      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800698a:	e000      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800698c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006996:	4b4b      	ldr	r3, [pc, #300]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800699a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069a6:	4a47      	ldr	r2, [pc, #284]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80069c4:	2300      	movs	r3, #0
 80069c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069cc:	460b      	mov	r3, r1
 80069ce:	4313      	orrs	r3, r2
 80069d0:	d03b      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069de:	d01f      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80069e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069e4:	d818      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80069e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ea:	d003      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80069ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069f0:	d007      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80069f2:	e011      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f4:	4b33      	ldr	r3, [pc, #204]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	4a32      	ldr	r2, [pc, #200]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a00:	e00f      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a06:	3328      	adds	r3, #40	@ 0x28
 8006a08:	2101      	movs	r1, #1
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fd7e 	bl	800750c <RCCEx_PLL3_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a16:	e004      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a1e:	e000      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a2a:	4b26      	ldr	r3, [pc, #152]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a3a:	4a22      	ldr	r2, [pc, #136]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a58:	2300      	movs	r3, #0
 8006a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a5c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a60:	460b      	mov	r3, r1
 8006a62:	4313      	orrs	r3, r2
 8006a64:	d034      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a74:	d007      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a76:	e011      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a78:	4b12      	ldr	r3, [pc, #72]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7c:	4a11      	ldr	r2, [pc, #68]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a84:	e00e      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	2102      	movs	r1, #2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fc8a 	bl	80073a8 <RCCEx_PLL2_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a9a:	e003      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10d      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006aac:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aba:	4a02      	ldr	r2, [pc, #8]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006abc:	430b      	orrs	r3, r1
 8006abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ac0:	e006      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006ac2:	bf00      	nop
 8006ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006adc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ade:	2300      	movs	r3, #0
 8006ae0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ae2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	d00c      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af0:	3328      	adds	r3, #40	@ 0x28
 8006af2:	2102      	movs	r1, #2
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fd09 	bl	800750c <RCCEx_PLL3_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b14:	2300      	movs	r3, #0
 8006b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b18:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	d036      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2c:	d018      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b32:	d811      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b38:	d014      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b3e:	d80b      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d011      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b48:	d106      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4a:	4bb7      	ldr	r3, [pc, #732]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4e:	4ab6      	ldr	r2, [pc, #728]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b56:	e008      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b5e:	e004      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b60:	bf00      	nop
 8006b62:	e002      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b64:	bf00      	nop
 8006b66:	e000      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b72:	4bad      	ldr	r3, [pc, #692]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b80:	4aa9      	ldr	r2, [pc, #676]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b82:	430b      	orrs	r3, r1
 8006b84:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b86:	e003      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ba2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	d009      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bac:	4b9e      	ldr	r3, [pc, #632]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bba:	4a9b      	ldr	r2, [pc, #620]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bce:	2300      	movs	r3, #0
 8006bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bd2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	d009      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bdc:	4b92      	ldr	r3, [pc, #584]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bea:	4a8f      	ldr	r2, [pc, #572]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bfe:	2300      	movs	r3, #0
 8006c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c06:	460b      	mov	r3, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	d00e      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c0c:	4b86      	ldr	r3, [pc, #536]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	4a85      	ldr	r2, [pc, #532]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c16:	6113      	str	r3, [r2, #16]
 8006c18:	4b83      	ldr	r3, [pc, #524]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c1a:	6919      	ldr	r1, [r3, #16]
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c24:	4a80      	ldr	r2, [pc, #512]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c40:	460b      	mov	r3, r1
 8006c42:	4313      	orrs	r3, r2
 8006c44:	d009      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c46:	4b78      	ldr	r3, [pc, #480]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c54:	4a74      	ldr	r2, [pc, #464]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c68:	2300      	movs	r3, #0
 8006c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d00a      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c76:	4b6c      	ldr	r3, [pc, #432]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c86:	4a68      	ldr	r2, [pc, #416]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c88:	430b      	orrs	r3, r1
 8006c8a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	2100      	movs	r1, #0
 8006c96:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d011      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	3308      	adds	r3, #8
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fb79 	bl	80073a8 <RCCEx_PLL2_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6239      	str	r1, [r7, #32]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cde:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d011      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	3308      	adds	r3, #8
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fb59 	bl	80073a8 <RCCEx_PLL2_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	2100      	movs	r1, #0
 8006d16:	61b9      	str	r1, [r7, #24]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d22:	460b      	mov	r3, r1
 8006d24:	4313      	orrs	r3, r2
 8006d26:	d011      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	2102      	movs	r1, #2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb39 	bl	80073a8 <RCCEx_PLL2_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	2100      	movs	r1, #0
 8006d56:	6139      	str	r1, [r7, #16]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d62:	460b      	mov	r3, r1
 8006d64:	4313      	orrs	r3, r2
 8006d66:	d011      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6c:	3328      	adds	r3, #40	@ 0x28
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fbcb 	bl	800750c <RCCEx_PLL3_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	2100      	movs	r1, #0
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006da2:	460b      	mov	r3, r1
 8006da4:	4313      	orrs	r3, r2
 8006da6:	d011      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dac:	3328      	adds	r3, #40	@ 0x28
 8006dae:	2101      	movs	r1, #1
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fbab 	bl	800750c <RCCEx_PLL3_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6039      	str	r1, [r7, #0]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006de2:	460b      	mov	r3, r1
 8006de4:	4313      	orrs	r3, r2
 8006de6:	d011      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dec:	3328      	adds	r3, #40	@ 0x28
 8006dee:	2102      	movs	r1, #2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fb8b 	bl	800750c <RCCEx_PLL3_Config>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006e0c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e000      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006e20:	46bd      	mov	sp, r7
 8006e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e26:	bf00      	nop
 8006e28:	58024400 	.word	0x58024400

08006e2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e30:	f7fe fe00 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8006e34:	4602      	mov	r2, r0
 8006e36:	4b06      	ldr	r3, [pc, #24]	@ (8006e50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	091b      	lsrs	r3, r3, #4
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	4904      	ldr	r1, [pc, #16]	@ (8006e54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e42:	5ccb      	ldrb	r3, [r1, r3]
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	58024400 	.word	0x58024400
 8006e54:	0800e22c 	.word	0x0800e22c

08006e58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	@ 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e60:	4ba1      	ldr	r3, [pc, #644]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e6a:	4b9f      	ldr	r3, [pc, #636]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	0b1b      	lsrs	r3, r3, #12
 8006e70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e76:	4b9c      	ldr	r3, [pc, #624]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7a:	091b      	lsrs	r3, r3, #4
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e82:	4b99      	ldr	r3, [pc, #612]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e86:	08db      	lsrs	r3, r3, #3
 8006e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8111 	beq.w	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	f000 8083 	beq.w	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	f200 80a1 	bhi.w	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d056      	beq.n	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ec2:	e099      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec4:	4b88      	ldr	r3, [pc, #544]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d02d      	beq.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ed0:	4b85      	ldr	r3, [pc, #532]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	4a84      	ldr	r2, [pc, #528]	@ (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b7b      	ldr	r3, [pc, #492]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f2a:	e087      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f6e:	e065      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b59      	ldr	r3, [pc, #356]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb2:	e043      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b48      	ldr	r3, [pc, #288]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff6:	e021      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b37      	ldr	r3, [pc, #220]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800703a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800703c:	4b2a      	ldr	r3, [pc, #168]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007040:	0a5b      	lsrs	r3, r3, #9
 8007042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007056:	edd7 6a07 	vldr	s13, [r7, #28]
 800705a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007062:	ee17 2a90 	vmov	r2, s15
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800706a:	4b1f      	ldr	r3, [pc, #124]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706e:	0c1b      	lsrs	r3, r3, #16
 8007070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007080:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007084:	edd7 6a07 	vldr	s13, [r7, #28]
 8007088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007090:	ee17 2a90 	vmov	r2, s15
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007098:	4b13      	ldr	r3, [pc, #76]	@ (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709c:	0e1b      	lsrs	r3, r3, #24
 800709e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070be:	ee17 2a90 	vmov	r2, s15
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070c6:	e008      	b.n	80070da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
}
 80070da:	bf00      	nop
 80070dc:	3724      	adds	r7, #36	@ 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	58024400 	.word	0x58024400
 80070ec:	03d09000 	.word	0x03d09000
 80070f0:	46000000 	.word	0x46000000
 80070f4:	4c742400 	.word	0x4c742400
 80070f8:	4a742400 	.word	0x4a742400
 80070fc:	4bbebc20 	.word	0x4bbebc20

08007100 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	@ 0x24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007108:	4ba1      	ldr	r3, [pc, #644]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007112:	4b9f      	ldr	r3, [pc, #636]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007116:	0d1b      	lsrs	r3, r3, #20
 8007118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800711c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800711e:	4b9c      	ldr	r3, [pc, #624]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800712a:	4b99      	ldr	r3, [pc, #612]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 8111 	beq.w	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b02      	cmp	r3, #2
 8007152:	f000 8083 	beq.w	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b02      	cmp	r3, #2
 800715a:	f200 80a1 	bhi.w	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d056      	beq.n	8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800716a:	e099      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800716c:	4b88      	ldr	r3, [pc, #544]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d02d      	beq.n	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007178:	4b85      	ldr	r3, [pc, #532]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	4a84      	ldr	r2, [pc, #528]	@ (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
 8007188:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a2:	4b7b      	ldr	r3, [pc, #492]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071d2:	e087      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007216:	e065      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b59      	ldr	r3, [pc, #356]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725a:	e043      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b48      	ldr	r3, [pc, #288]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729e:	e021      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b37      	ldr	r3, [pc, #220]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	0a5b      	lsrs	r3, r3, #9
 80072ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730a:	ee17 2a90 	vmov	r2, s15
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007312:	4b1f      	ldr	r3, [pc, #124]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007316:	0c1b      	lsrs	r3, r3, #16
 8007318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800731c:	ee07 3a90 	vmov	s15, r3
 8007320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007338:	ee17 2a90 	vmov	r2, s15
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007340:	4b13      	ldr	r3, [pc, #76]	@ (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007344:	0e1b      	lsrs	r3, r3, #24
 8007346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735a:	edd7 6a07 	vldr	s13, [r7, #28]
 800735e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007366:	ee17 2a90 	vmov	r2, s15
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800736e:	e008      	b.n	8007382 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
}
 8007382:	bf00      	nop
 8007384:	3724      	adds	r7, #36	@ 0x24
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	58024400 	.word	0x58024400
 8007394:	03d09000 	.word	0x03d09000
 8007398:	46000000 	.word	0x46000000
 800739c:	4c742400 	.word	0x4c742400
 80073a0:	4a742400 	.word	0x4a742400
 80073a4:	4bbebc20 	.word	0x4bbebc20

080073a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073b6:	4b53      	ldr	r3, [pc, #332]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d101      	bne.n	80073c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e099      	b.n	80074fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073d2:	f7fb fce9 	bl	8002da8 <HAL_GetTick>
 80073d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073d8:	e008      	b.n	80073ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073da:	f7fb fce5 	bl	8002da8 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e086      	b.n	80074fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073ec:	4b45      	ldr	r3, [pc, #276]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f0      	bne.n	80073da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073f8:	4b42      	ldr	r3, [pc, #264]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	031b      	lsls	r3, r3, #12
 8007406:	493f      	ldr	r1, [pc, #252]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007408:	4313      	orrs	r3, r2
 800740a:	628b      	str	r3, [r1, #40]	@ 0x28
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	3b01      	subs	r3, #1
 8007412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	3b01      	subs	r3, #1
 800741c:	025b      	lsls	r3, r3, #9
 800741e:	b29b      	uxth	r3, r3
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	3b01      	subs	r3, #1
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	3b01      	subs	r3, #1
 8007436:	061b      	lsls	r3, r3, #24
 8007438:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800743c:	4931      	ldr	r1, [pc, #196]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007442:	4b30      	ldr	r3, [pc, #192]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	492d      	ldr	r1, [pc, #180]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007450:	4313      	orrs	r3, r2
 8007452:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007454:	4b2b      	ldr	r3, [pc, #172]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	f023 0220 	bic.w	r2, r3, #32
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	4928      	ldr	r1, [pc, #160]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007462:	4313      	orrs	r3, r2
 8007464:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007466:	4b27      	ldr	r3, [pc, #156]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	4a26      	ldr	r2, [pc, #152]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 800746c:	f023 0310 	bic.w	r3, r3, #16
 8007470:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007472:	4b24      	ldr	r3, [pc, #144]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007474:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007476:	4b24      	ldr	r3, [pc, #144]	@ (8007508 <RCCEx_PLL2_Config+0x160>)
 8007478:	4013      	ands	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	69d2      	ldr	r2, [r2, #28]
 800747e:	00d2      	lsls	r2, r2, #3
 8007480:	4920      	ldr	r1, [pc, #128]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007486:	4b1f      	ldr	r3, [pc, #124]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	4a1e      	ldr	r2, [pc, #120]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 800748c:	f043 0310 	orr.w	r3, r3, #16
 8007490:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d106      	bne.n	80074a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007498:	4b1a      	ldr	r3, [pc, #104]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 800749a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749c:	4a19      	ldr	r2, [pc, #100]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 800749e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074a4:	e00f      	b.n	80074c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d106      	bne.n	80074ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074ac:	4b15      	ldr	r3, [pc, #84]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	4a14      	ldr	r2, [pc, #80]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074b8:	e005      	b.n	80074c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074ba:	4b12      	ldr	r3, [pc, #72]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074be:	4a11      	ldr	r2, [pc, #68]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d2:	f7fb fc69 	bl	8002da8 <HAL_GetTick>
 80074d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074d8:	e008      	b.n	80074ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074da:	f7fb fc65 	bl	8002da8 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e006      	b.n	80074fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074ec:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	58024400 	.word	0x58024400
 8007508:	ffff0007 	.word	0xffff0007

0800750c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800751a:	4b53      	ldr	r3, [pc, #332]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 800751c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	2b03      	cmp	r3, #3
 8007524:	d101      	bne.n	800752a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e099      	b.n	800765e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800752a:	4b4f      	ldr	r3, [pc, #316]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a4e      	ldr	r2, [pc, #312]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007536:	f7fb fc37 	bl	8002da8 <HAL_GetTick>
 800753a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800753c:	e008      	b.n	8007550 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800753e:	f7fb fc33 	bl	8002da8 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e086      	b.n	800765e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007550:	4b45      	ldr	r3, [pc, #276]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f0      	bne.n	800753e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800755c:	4b42      	ldr	r3, [pc, #264]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 800755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007560:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	051b      	lsls	r3, r3, #20
 800756a:	493f      	ldr	r1, [pc, #252]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 800756c:	4313      	orrs	r3, r2
 800756e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	3b01      	subs	r3, #1
 8007576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	3b01      	subs	r3, #1
 8007580:	025b      	lsls	r3, r3, #9
 8007582:	b29b      	uxth	r3, r3
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	3b01      	subs	r3, #1
 800758c:	041b      	lsls	r3, r3, #16
 800758e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	3b01      	subs	r3, #1
 800759a:	061b      	lsls	r3, r3, #24
 800759c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075a0:	4931      	ldr	r1, [pc, #196]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075a6:	4b30      	ldr	r3, [pc, #192]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	492d      	ldr	r1, [pc, #180]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	4928      	ldr	r1, [pc, #160]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075ca:	4b27      	ldr	r3, [pc, #156]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ce:	4a26      	ldr	r2, [pc, #152]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075d6:	4b24      	ldr	r3, [pc, #144]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075da:	4b24      	ldr	r3, [pc, #144]	@ (800766c <RCCEx_PLL3_Config+0x160>)
 80075dc:	4013      	ands	r3, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	69d2      	ldr	r2, [r2, #28]
 80075e2:	00d2      	lsls	r2, r2, #3
 80075e4:	4920      	ldr	r1, [pc, #128]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	4a19      	ldr	r2, [pc, #100]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007602:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007608:	e00f      	b.n	800762a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d106      	bne.n	800761e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007610:	4b15      	ldr	r3, [pc, #84]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	4a14      	ldr	r2, [pc, #80]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007616:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800761a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800761c:	e005      	b.n	800762a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800761e:	4b12      	ldr	r3, [pc, #72]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	4a11      	ldr	r2, [pc, #68]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007624:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007628:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800762a:	4b0f      	ldr	r3, [pc, #60]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a0e      	ldr	r2, [pc, #56]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007636:	f7fb fbb7 	bl	8002da8 <HAL_GetTick>
 800763a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800763c:	e008      	b.n	8007650 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800763e:	f7fb fbb3 	bl	8002da8 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e006      	b.n	800765e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007650:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0f0      	beq.n	800763e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	58024400 	.word	0x58024400
 800766c:	ffff0007 	.word	0xffff0007

08007670 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e049      	b.n	8007716 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7fa fc12 	bl	8001ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f000 fa66 	bl	8007b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_TIM_PWM_Start+0x24>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	bf14      	ite	ne
 800773c:	2301      	movne	r3, #1
 800773e:	2300      	moveq	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	e03c      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b04      	cmp	r3, #4
 8007748:	d109      	bne.n	800775e <HAL_TIM_PWM_Start+0x3e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	bf14      	ite	ne
 8007756:	2301      	movne	r3, #1
 8007758:	2300      	moveq	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	e02f      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b08      	cmp	r3, #8
 8007762:	d109      	bne.n	8007778 <HAL_TIM_PWM_Start+0x58>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	bf14      	ite	ne
 8007770:	2301      	movne	r3, #1
 8007772:	2300      	moveq	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	e022      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b0c      	cmp	r3, #12
 800777c:	d109      	bne.n	8007792 <HAL_TIM_PWM_Start+0x72>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	bf14      	ite	ne
 800778a:	2301      	movne	r3, #1
 800778c:	2300      	moveq	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	e015      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b10      	cmp	r3, #16
 8007796:	d109      	bne.n	80077ac <HAL_TIM_PWM_Start+0x8c>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	bf14      	ite	ne
 80077a4:	2301      	movne	r3, #1
 80077a6:	2300      	moveq	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e008      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	bf14      	ite	ne
 80077b8:	2301      	movne	r3, #1
 80077ba:	2300      	moveq	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e0ab      	b.n	800791e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <HAL_TIM_PWM_Start+0xb6>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077d4:	e023      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_PWM_Start+0xc6>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077e4:	e01b      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_PWM_Start+0xd6>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077f4:	e013      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b0c      	cmp	r3, #12
 80077fa:	d104      	bne.n	8007806 <HAL_TIM_PWM_Start+0xe6>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007804:	e00b      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b10      	cmp	r3, #16
 800780a:	d104      	bne.n	8007816 <HAL_TIM_PWM_Start+0xf6>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007814:	e003      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2201      	movs	r2, #1
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fd2c 	bl	8008284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a3d      	ldr	r2, [pc, #244]	@ (8007928 <HAL_TIM_PWM_Start+0x208>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <HAL_TIM_PWM_Start+0x13e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a3c      	ldr	r2, [pc, #240]	@ (800792c <HAL_TIM_PWM_Start+0x20c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00e      	beq.n	800785e <HAL_TIM_PWM_Start+0x13e>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a3a      	ldr	r2, [pc, #232]	@ (8007930 <HAL_TIM_PWM_Start+0x210>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d009      	beq.n	800785e <HAL_TIM_PWM_Start+0x13e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a39      	ldr	r2, [pc, #228]	@ (8007934 <HAL_TIM_PWM_Start+0x214>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d004      	beq.n	800785e <HAL_TIM_PWM_Start+0x13e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a37      	ldr	r2, [pc, #220]	@ (8007938 <HAL_TIM_PWM_Start+0x218>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d101      	bne.n	8007862 <HAL_TIM_PWM_Start+0x142>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <HAL_TIM_PWM_Start+0x144>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007876:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2a      	ldr	r2, [pc, #168]	@ (8007928 <HAL_TIM_PWM_Start+0x208>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d02c      	beq.n	80078dc <HAL_TIM_PWM_Start+0x1bc>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788a:	d027      	beq.n	80078dc <HAL_TIM_PWM_Start+0x1bc>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2a      	ldr	r2, [pc, #168]	@ (800793c <HAL_TIM_PWM_Start+0x21c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d022      	beq.n	80078dc <HAL_TIM_PWM_Start+0x1bc>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a29      	ldr	r2, [pc, #164]	@ (8007940 <HAL_TIM_PWM_Start+0x220>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d01d      	beq.n	80078dc <HAL_TIM_PWM_Start+0x1bc>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a27      	ldr	r2, [pc, #156]	@ (8007944 <HAL_TIM_PWM_Start+0x224>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d018      	beq.n	80078dc <HAL_TIM_PWM_Start+0x1bc>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1f      	ldr	r2, [pc, #124]	@ (800792c <HAL_TIM_PWM_Start+0x20c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d013      	beq.n	80078dc <HAL_TIM_PWM_Start+0x1bc>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a23      	ldr	r2, [pc, #140]	@ (8007948 <HAL_TIM_PWM_Start+0x228>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00e      	beq.n	80078dc <HAL_TIM_PWM_Start+0x1bc>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <HAL_TIM_PWM_Start+0x210>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d009      	beq.n	80078dc <HAL_TIM_PWM_Start+0x1bc>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a1f      	ldr	r2, [pc, #124]	@ (800794c <HAL_TIM_PWM_Start+0x22c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <HAL_TIM_PWM_Start+0x1bc>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007950 <HAL_TIM_PWM_Start+0x230>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d115      	bne.n	8007908 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	4b1c      	ldr	r3, [pc, #112]	@ (8007954 <HAL_TIM_PWM_Start+0x234>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d015      	beq.n	800791a <HAL_TIM_PWM_Start+0x1fa>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078f4:	d011      	beq.n	800791a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007906:	e008      	b.n	800791a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0201 	orr.w	r2, r2, #1
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e000      	b.n	800791c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40010000 	.word	0x40010000
 800792c:	40010400 	.word	0x40010400
 8007930:	40014000 	.word	0x40014000
 8007934:	40014400 	.word	0x40014400
 8007938:	40014800 	.word	0x40014800
 800793c:	40000400 	.word	0x40000400
 8007940:	40000800 	.word	0x40000800
 8007944:	40000c00 	.word	0x40000c00
 8007948:	40001800 	.word	0x40001800
 800794c:	4000e000 	.word	0x4000e000
 8007950:	4000e400 	.word	0x4000e400
 8007954:	00010007 	.word	0x00010007

08007958 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007972:	2302      	movs	r3, #2
 8007974:	e0ff      	b.n	8007b76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b14      	cmp	r3, #20
 8007982:	f200 80f0 	bhi.w	8007b66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007986:	a201      	add	r2, pc, #4	@ (adr r2, 800798c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798c:	080079e1 	.word	0x080079e1
 8007990:	08007b67 	.word	0x08007b67
 8007994:	08007b67 	.word	0x08007b67
 8007998:	08007b67 	.word	0x08007b67
 800799c:	08007a21 	.word	0x08007a21
 80079a0:	08007b67 	.word	0x08007b67
 80079a4:	08007b67 	.word	0x08007b67
 80079a8:	08007b67 	.word	0x08007b67
 80079ac:	08007a63 	.word	0x08007a63
 80079b0:	08007b67 	.word	0x08007b67
 80079b4:	08007b67 	.word	0x08007b67
 80079b8:	08007b67 	.word	0x08007b67
 80079bc:	08007aa3 	.word	0x08007aa3
 80079c0:	08007b67 	.word	0x08007b67
 80079c4:	08007b67 	.word	0x08007b67
 80079c8:	08007b67 	.word	0x08007b67
 80079cc:	08007ae5 	.word	0x08007ae5
 80079d0:	08007b67 	.word	0x08007b67
 80079d4:	08007b67 	.word	0x08007b67
 80079d8:	08007b67 	.word	0x08007b67
 80079dc:	08007b25 	.word	0x08007b25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68b9      	ldr	r1, [r7, #8]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f976 	bl	8007cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0208 	orr.w	r2, r2, #8
 80079fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0204 	bic.w	r2, r2, #4
 8007a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6999      	ldr	r1, [r3, #24]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	619a      	str	r2, [r3, #24]
      break;
 8007a1e:	e0a5      	b.n	8007b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 f9e6 	bl	8007df8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699a      	ldr	r2, [r3, #24]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6999      	ldr	r1, [r3, #24]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	021a      	lsls	r2, r3, #8
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	619a      	str	r2, [r3, #24]
      break;
 8007a60:	e084      	b.n	8007b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fa4f 	bl	8007f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0208 	orr.w	r2, r2, #8
 8007a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0204 	bic.w	r2, r2, #4
 8007a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69d9      	ldr	r1, [r3, #28]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	61da      	str	r2, [r3, #28]
      break;
 8007aa0:	e064      	b.n	8007b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fab7 	bl	800801c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69da      	ldr	r2, [r3, #28]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69da      	ldr	r2, [r3, #28]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69d9      	ldr	r1, [r3, #28]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	021a      	lsls	r2, r3, #8
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	61da      	str	r2, [r3, #28]
      break;
 8007ae2:	e043      	b.n	8007b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fb00 	bl	80080f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0208 	orr.w	r2, r2, #8
 8007afe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0204 	bic.w	r2, r2, #4
 8007b0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	691a      	ldr	r2, [r3, #16]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b22:	e023      	b.n	8007b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fb44 	bl	80081b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	021a      	lsls	r2, r3, #8
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b64:	e002      	b.n	8007b6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop

08007b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a47      	ldr	r2, [pc, #284]	@ (8007cb0 <TIM_Base_SetConfig+0x130>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d013      	beq.n	8007bc0 <TIM_Base_SetConfig+0x40>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9e:	d00f      	beq.n	8007bc0 <TIM_Base_SetConfig+0x40>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a44      	ldr	r2, [pc, #272]	@ (8007cb4 <TIM_Base_SetConfig+0x134>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00b      	beq.n	8007bc0 <TIM_Base_SetConfig+0x40>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a43      	ldr	r2, [pc, #268]	@ (8007cb8 <TIM_Base_SetConfig+0x138>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d007      	beq.n	8007bc0 <TIM_Base_SetConfig+0x40>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a42      	ldr	r2, [pc, #264]	@ (8007cbc <TIM_Base_SetConfig+0x13c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d003      	beq.n	8007bc0 <TIM_Base_SetConfig+0x40>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a41      	ldr	r2, [pc, #260]	@ (8007cc0 <TIM_Base_SetConfig+0x140>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d108      	bne.n	8007bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a36      	ldr	r2, [pc, #216]	@ (8007cb0 <TIM_Base_SetConfig+0x130>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d027      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007be0:	d023      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a33      	ldr	r2, [pc, #204]	@ (8007cb4 <TIM_Base_SetConfig+0x134>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d01f      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a32      	ldr	r2, [pc, #200]	@ (8007cb8 <TIM_Base_SetConfig+0x138>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01b      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a31      	ldr	r2, [pc, #196]	@ (8007cbc <TIM_Base_SetConfig+0x13c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d017      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a30      	ldr	r2, [pc, #192]	@ (8007cc0 <TIM_Base_SetConfig+0x140>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d013      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a2f      	ldr	r2, [pc, #188]	@ (8007cc4 <TIM_Base_SetConfig+0x144>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00f      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8007cc8 <TIM_Base_SetConfig+0x148>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d00b      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a2d      	ldr	r2, [pc, #180]	@ (8007ccc <TIM_Base_SetConfig+0x14c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d007      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd0 <TIM_Base_SetConfig+0x150>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d003      	beq.n	8007c2a <TIM_Base_SetConfig+0xaa>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a2b      	ldr	r2, [pc, #172]	@ (8007cd4 <TIM_Base_SetConfig+0x154>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d108      	bne.n	8007c3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a14      	ldr	r2, [pc, #80]	@ (8007cb0 <TIM_Base_SetConfig+0x130>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00f      	beq.n	8007c82 <TIM_Base_SetConfig+0x102>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a16      	ldr	r2, [pc, #88]	@ (8007cc0 <TIM_Base_SetConfig+0x140>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00b      	beq.n	8007c82 <TIM_Base_SetConfig+0x102>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a15      	ldr	r2, [pc, #84]	@ (8007cc4 <TIM_Base_SetConfig+0x144>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <TIM_Base_SetConfig+0x102>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a14      	ldr	r2, [pc, #80]	@ (8007cc8 <TIM_Base_SetConfig+0x148>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_Base_SetConfig+0x102>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a13      	ldr	r2, [pc, #76]	@ (8007ccc <TIM_Base_SetConfig+0x14c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d103      	bne.n	8007c8a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f043 0204 	orr.w	r2, r3, #4
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	601a      	str	r2, [r3, #0]
}
 8007ca2:	bf00      	nop
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	40010000 	.word	0x40010000
 8007cb4:	40000400 	.word	0x40000400
 8007cb8:	40000800 	.word	0x40000800
 8007cbc:	40000c00 	.word	0x40000c00
 8007cc0:	40010400 	.word	0x40010400
 8007cc4:	40014000 	.word	0x40014000
 8007cc8:	40014400 	.word	0x40014400
 8007ccc:	40014800 	.word	0x40014800
 8007cd0:	4000e000 	.word	0x4000e000
 8007cd4:	4000e400 	.word	0x4000e400

08007cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f023 0201 	bic.w	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4b37      	ldr	r3, [pc, #220]	@ (8007de0 <TIM_OC1_SetConfig+0x108>)
 8007d04:	4013      	ands	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0303 	bic.w	r3, r3, #3
 8007d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f023 0302 	bic.w	r3, r3, #2
 8007d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8007de4 <TIM_OC1_SetConfig+0x10c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00f      	beq.n	8007d54 <TIM_OC1_SetConfig+0x7c>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a2c      	ldr	r2, [pc, #176]	@ (8007de8 <TIM_OC1_SetConfig+0x110>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00b      	beq.n	8007d54 <TIM_OC1_SetConfig+0x7c>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8007dec <TIM_OC1_SetConfig+0x114>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d007      	beq.n	8007d54 <TIM_OC1_SetConfig+0x7c>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a2a      	ldr	r2, [pc, #168]	@ (8007df0 <TIM_OC1_SetConfig+0x118>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d003      	beq.n	8007d54 <TIM_OC1_SetConfig+0x7c>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a29      	ldr	r2, [pc, #164]	@ (8007df4 <TIM_OC1_SetConfig+0x11c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d10c      	bne.n	8007d6e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 0308 	bic.w	r3, r3, #8
 8007d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 0304 	bic.w	r3, r3, #4
 8007d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a1c      	ldr	r2, [pc, #112]	@ (8007de4 <TIM_OC1_SetConfig+0x10c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00f      	beq.n	8007d96 <TIM_OC1_SetConfig+0xbe>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a1b      	ldr	r2, [pc, #108]	@ (8007de8 <TIM_OC1_SetConfig+0x110>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00b      	beq.n	8007d96 <TIM_OC1_SetConfig+0xbe>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a1a      	ldr	r2, [pc, #104]	@ (8007dec <TIM_OC1_SetConfig+0x114>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d007      	beq.n	8007d96 <TIM_OC1_SetConfig+0xbe>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a19      	ldr	r2, [pc, #100]	@ (8007df0 <TIM_OC1_SetConfig+0x118>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_OC1_SetConfig+0xbe>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a18      	ldr	r2, [pc, #96]	@ (8007df4 <TIM_OC1_SetConfig+0x11c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d111      	bne.n	8007dba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	621a      	str	r2, [r3, #32]
}
 8007dd4:	bf00      	nop
 8007dd6:	371c      	adds	r7, #28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	fffeff8f 	.word	0xfffeff8f
 8007de4:	40010000 	.word	0x40010000
 8007de8:	40010400 	.word	0x40010400
 8007dec:	40014000 	.word	0x40014000
 8007df0:	40014400 	.word	0x40014400
 8007df4:	40014800 	.word	0x40014800

08007df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	f023 0210 	bic.w	r2, r3, #16
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4b34      	ldr	r3, [pc, #208]	@ (8007ef4 <TIM_OC2_SetConfig+0xfc>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f023 0320 	bic.w	r3, r3, #32
 8007e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a29      	ldr	r2, [pc, #164]	@ (8007ef8 <TIM_OC2_SetConfig+0x100>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d003      	beq.n	8007e60 <TIM_OC2_SetConfig+0x68>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a28      	ldr	r2, [pc, #160]	@ (8007efc <TIM_OC2_SetConfig+0x104>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d10d      	bne.n	8007e7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ef8 <TIM_OC2_SetConfig+0x100>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00f      	beq.n	8007ea4 <TIM_OC2_SetConfig+0xac>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a1d      	ldr	r2, [pc, #116]	@ (8007efc <TIM_OC2_SetConfig+0x104>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00b      	beq.n	8007ea4 <TIM_OC2_SetConfig+0xac>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007f00 <TIM_OC2_SetConfig+0x108>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d007      	beq.n	8007ea4 <TIM_OC2_SetConfig+0xac>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a1b      	ldr	r2, [pc, #108]	@ (8007f04 <TIM_OC2_SetConfig+0x10c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d003      	beq.n	8007ea4 <TIM_OC2_SetConfig+0xac>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007f08 <TIM_OC2_SetConfig+0x110>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d113      	bne.n	8007ecc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	621a      	str	r2, [r3, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	feff8fff 	.word	0xfeff8fff
 8007ef8:	40010000 	.word	0x40010000
 8007efc:	40010400 	.word	0x40010400
 8007f00:	40014000 	.word	0x40014000
 8007f04:	40014400 	.word	0x40014400
 8007f08:	40014800 	.word	0x40014800

08007f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4b33      	ldr	r3, [pc, #204]	@ (8008004 <TIM_OC3_SetConfig+0xf8>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0303 	bic.w	r3, r3, #3
 8007f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a28      	ldr	r2, [pc, #160]	@ (8008008 <TIM_OC3_SetConfig+0xfc>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_OC3_SetConfig+0x66>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a27      	ldr	r2, [pc, #156]	@ (800800c <TIM_OC3_SetConfig+0x100>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d10d      	bne.n	8007f8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	021b      	lsls	r3, r3, #8
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a1d      	ldr	r2, [pc, #116]	@ (8008008 <TIM_OC3_SetConfig+0xfc>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00f      	beq.n	8007fb6 <TIM_OC3_SetConfig+0xaa>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a1c      	ldr	r2, [pc, #112]	@ (800800c <TIM_OC3_SetConfig+0x100>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00b      	beq.n	8007fb6 <TIM_OC3_SetConfig+0xaa>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8008010 <TIM_OC3_SetConfig+0x104>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d007      	beq.n	8007fb6 <TIM_OC3_SetConfig+0xaa>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8008014 <TIM_OC3_SetConfig+0x108>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d003      	beq.n	8007fb6 <TIM_OC3_SetConfig+0xaa>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a19      	ldr	r2, [pc, #100]	@ (8008018 <TIM_OC3_SetConfig+0x10c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d113      	bne.n	8007fde <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	621a      	str	r2, [r3, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	fffeff8f 	.word	0xfffeff8f
 8008008:	40010000 	.word	0x40010000
 800800c:	40010400 	.word	0x40010400
 8008010:	40014000 	.word	0x40014000
 8008014:	40014400 	.word	0x40014400
 8008018:	40014800 	.word	0x40014800

0800801c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	4b24      	ldr	r3, [pc, #144]	@ (80080d8 <TIM_OC4_SetConfig+0xbc>)
 8008048:	4013      	ands	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	021b      	lsls	r3, r3, #8
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	4313      	orrs	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	031b      	lsls	r3, r3, #12
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a19      	ldr	r2, [pc, #100]	@ (80080dc <TIM_OC4_SetConfig+0xc0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00f      	beq.n	800809c <TIM_OC4_SetConfig+0x80>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a18      	ldr	r2, [pc, #96]	@ (80080e0 <TIM_OC4_SetConfig+0xc4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00b      	beq.n	800809c <TIM_OC4_SetConfig+0x80>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a17      	ldr	r2, [pc, #92]	@ (80080e4 <TIM_OC4_SetConfig+0xc8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d007      	beq.n	800809c <TIM_OC4_SetConfig+0x80>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a16      	ldr	r2, [pc, #88]	@ (80080e8 <TIM_OC4_SetConfig+0xcc>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d003      	beq.n	800809c <TIM_OC4_SetConfig+0x80>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a15      	ldr	r2, [pc, #84]	@ (80080ec <TIM_OC4_SetConfig+0xd0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d109      	bne.n	80080b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	019b      	lsls	r3, r3, #6
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	feff8fff 	.word	0xfeff8fff
 80080dc:	40010000 	.word	0x40010000
 80080e0:	40010400 	.word	0x40010400
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40014400 	.word	0x40014400
 80080ec:	40014800 	.word	0x40014800

080080f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4b21      	ldr	r3, [pc, #132]	@ (80081a0 <TIM_OC5_SetConfig+0xb0>)
 800811c:	4013      	ands	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a18      	ldr	r2, [pc, #96]	@ (80081a4 <TIM_OC5_SetConfig+0xb4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00f      	beq.n	8008166 <TIM_OC5_SetConfig+0x76>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a17      	ldr	r2, [pc, #92]	@ (80081a8 <TIM_OC5_SetConfig+0xb8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00b      	beq.n	8008166 <TIM_OC5_SetConfig+0x76>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a16      	ldr	r2, [pc, #88]	@ (80081ac <TIM_OC5_SetConfig+0xbc>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d007      	beq.n	8008166 <TIM_OC5_SetConfig+0x76>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a15      	ldr	r2, [pc, #84]	@ (80081b0 <TIM_OC5_SetConfig+0xc0>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_OC5_SetConfig+0x76>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a14      	ldr	r2, [pc, #80]	@ (80081b4 <TIM_OC5_SetConfig+0xc4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d109      	bne.n	800817a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800816c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	621a      	str	r2, [r3, #32]
}
 8008194:	bf00      	nop
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	fffeff8f 	.word	0xfffeff8f
 80081a4:	40010000 	.word	0x40010000
 80081a8:	40010400 	.word	0x40010400
 80081ac:	40014000 	.word	0x40014000
 80081b0:	40014400 	.word	0x40014400
 80081b4:	40014800 	.word	0x40014800

080081b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4b22      	ldr	r3, [pc, #136]	@ (800826c <TIM_OC6_SetConfig+0xb4>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	051b      	lsls	r3, r3, #20
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4313      	orrs	r3, r2
 8008206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a19      	ldr	r2, [pc, #100]	@ (8008270 <TIM_OC6_SetConfig+0xb8>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00f      	beq.n	8008230 <TIM_OC6_SetConfig+0x78>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a18      	ldr	r2, [pc, #96]	@ (8008274 <TIM_OC6_SetConfig+0xbc>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00b      	beq.n	8008230 <TIM_OC6_SetConfig+0x78>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a17      	ldr	r2, [pc, #92]	@ (8008278 <TIM_OC6_SetConfig+0xc0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d007      	beq.n	8008230 <TIM_OC6_SetConfig+0x78>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a16      	ldr	r2, [pc, #88]	@ (800827c <TIM_OC6_SetConfig+0xc4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_OC6_SetConfig+0x78>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a15      	ldr	r2, [pc, #84]	@ (8008280 <TIM_OC6_SetConfig+0xc8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d109      	bne.n	8008244 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	029b      	lsls	r3, r3, #10
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	621a      	str	r2, [r3, #32]
}
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	feff8fff 	.word	0xfeff8fff
 8008270:	40010000 	.word	0x40010000
 8008274:	40010400 	.word	0x40010400
 8008278:	40014000 	.word	0x40014000
 800827c:	40014400 	.word	0x40014400
 8008280:	40014800 	.word	0x40014800

08008284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 031f 	and.w	r3, r3, #31
 8008296:	2201      	movs	r2, #1
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a1a      	ldr	r2, [r3, #32]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	43db      	mvns	r3, r3
 80082a6:	401a      	ands	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a1a      	ldr	r2, [r3, #32]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	fa01 f303 	lsl.w	r3, r1, r3
 80082bc:	431a      	orrs	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	621a      	str	r2, [r3, #32]
}
 80082c2:	bf00      	nop
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e077      	b.n	80083d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a35      	ldr	r2, [pc, #212]	@ (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d004      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a34      	ldr	r2, [pc, #208]	@ (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d108      	bne.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008322:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008334:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a25      	ldr	r2, [pc, #148]	@ (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d02c      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800835a:	d027      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a22      	ldr	r2, [pc, #136]	@ (80083ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d022      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a21      	ldr	r2, [pc, #132]	@ (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d01d      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a1f      	ldr	r2, [pc, #124]	@ (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d018      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a1a      	ldr	r2, [pc, #104]	@ (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d013      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a1b      	ldr	r2, [pc, #108]	@ (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00e      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a1a      	ldr	r2, [pc, #104]	@ (80083fc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d009      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a18      	ldr	r2, [pc, #96]	@ (8008400 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d004      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a17      	ldr	r2, [pc, #92]	@ (8008404 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d10c      	bne.n	80083c6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	40010000 	.word	0x40010000
 80083e8:	40010400 	.word	0x40010400
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40001800 	.word	0x40001800
 80083fc:	40014000 	.word	0x40014000
 8008400:	4000e000 	.word	0x4000e000
 8008404:	4000e400 	.word	0x4000e400

08008408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800841c:	2b01      	cmp	r3, #1
 800841e:	d101      	bne.n	8008424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008420:	2302      	movs	r3, #2
 8008422:	e073      	b.n	800850c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	041b      	lsls	r3, r3, #16
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a19      	ldr	r2, [pc, #100]	@ (8008518 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d004      	beq.n	80084c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a18      	ldr	r2, [pc, #96]	@ (800851c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d11c      	bne.n	80084fa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ca:	051b      	lsls	r3, r3, #20
 80084cc:	4313      	orrs	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	40010000 	.word	0x40010000
 800851c:	40010400 	.word	0x40010400

08008520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e042      	b.n	80085b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008538:	2b00      	cmp	r3, #0
 800853a:	d106      	bne.n	800854a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7f9 fd19 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2224      	movs	r2, #36	@ 0x24
 800854e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0201 	bic.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 fb64 	bl	8009c38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fcf5 	bl	8008f60 <UART_SetConfig>
 8008576:	4603      	mov	r3, r0
 8008578:	2b01      	cmp	r3, #1
 800857a:	d101      	bne.n	8008580 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e01b      	b.n	80085b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800858e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689a      	ldr	r2, [r3, #8]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800859e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0201 	orr.w	r2, r2, #1
 80085ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 fbe3 	bl	8009d7c <UART_CheckIdleState>
 80085b6:	4603      	mov	r3, r0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08a      	sub	sp, #40	@ 0x28
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	4613      	mov	r3, r2
 80085ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085d6:	2b20      	cmp	r3, #32
 80085d8:	d17b      	bne.n	80086d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <HAL_UART_Transmit+0x26>
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e074      	b.n	80086d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2221      	movs	r2, #33	@ 0x21
 80085f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085fa:	f7fa fbd5 	bl	8002da8 <HAL_GetTick>
 80085fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	88fa      	ldrh	r2, [r7, #6]
 8008604:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	88fa      	ldrh	r2, [r7, #6]
 800860c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008618:	d108      	bne.n	800862c <HAL_UART_Transmit+0x6c>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008622:	2300      	movs	r3, #0
 8008624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	e003      	b.n	8008634 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008630:	2300      	movs	r3, #0
 8008632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008634:	e030      	b.n	8008698 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2200      	movs	r2, #0
 800863e:	2180      	movs	r1, #128	@ 0x80
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f001 fc45 	bl	8009ed0 <UART_WaitOnFlagUntilTimeout>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2220      	movs	r2, #32
 8008650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e03d      	b.n	80086d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10b      	bne.n	8008676 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800866c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	3302      	adds	r3, #2
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	e007      	b.n	8008686 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	3301      	adds	r3, #1
 8008684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800868c:	b29b      	uxth	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	b29a      	uxth	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800869e:	b29b      	uxth	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1c8      	bne.n	8008636 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2200      	movs	r2, #0
 80086ac:	2140      	movs	r1, #64	@ 0x40
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f001 fc0e 	bl	8009ed0 <UART_WaitOnFlagUntilTimeout>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e006      	b.n	80086d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	e000      	b.n	80086d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80086d2:	2302      	movs	r3, #2
  }
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3720      	adds	r7, #32
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08a      	sub	sp, #40	@ 0x28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d137      	bne.n	8008764 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <HAL_UART_Receive_IT+0x24>
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e030      	b.n	8008766 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a18      	ldr	r2, [pc, #96]	@ (8008770 <HAL_UART_Receive_IT+0x94>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d01f      	beq.n	8008754 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d018      	beq.n	8008754 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	613b      	str	r3, [r7, #16]
   return(result);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008736:	627b      	str	r3, [r7, #36]	@ 0x24
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008740:	623b      	str	r3, [r7, #32]
 8008742:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	69f9      	ldr	r1, [r7, #28]
 8008746:	6a3a      	ldr	r2, [r7, #32]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	61bb      	str	r3, [r7, #24]
   return(result);
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e6      	bne.n	8008722 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008754:	88fb      	ldrh	r3, [r7, #6]
 8008756:	461a      	mov	r2, r3
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f001 fc26 	bl	8009fac <UART_Start_Receive_IT>
 8008760:	4603      	mov	r3, r0
 8008762:	e000      	b.n	8008766 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008764:	2302      	movs	r3, #2
  }
}
 8008766:	4618      	mov	r0, r3
 8008768:	3728      	adds	r7, #40	@ 0x28
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	58000c00 	.word	0x58000c00

08008774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b0ba      	sub	sp, #232	@ 0xe8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800879a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800879e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80087a2:	4013      	ands	r3, r2
 80087a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80087a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11b      	bne.n	80087e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d015      	beq.n	80087e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c0:	f003 0320 	and.w	r3, r3, #32
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d105      	bne.n	80087d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d009      	beq.n	80087e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 8393 	beq.w	8008f04 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
      }
      return;
 80087e6:	e38d      	b.n	8008f04 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 8123 	beq.w	8008a38 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80087f6:	4b8d      	ldr	r3, [pc, #564]	@ (8008a2c <HAL_UART_IRQHandler+0x2b8>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008802:	4b8b      	ldr	r3, [pc, #556]	@ (8008a30 <HAL_UART_IRQHandler+0x2bc>)
 8008804:	4013      	ands	r3, r2
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 8116 	beq.w	8008a38 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800880c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d011      	beq.n	800883c <HAL_UART_IRQHandler+0xc8>
 8008818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800881c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2201      	movs	r2, #1
 800882a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008832:	f043 0201 	orr.w	r2, r3, #1
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800883c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d011      	beq.n	800886c <HAL_UART_IRQHandler+0xf8>
 8008848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00b      	beq.n	800886c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2202      	movs	r2, #2
 800885a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008862:	f043 0204 	orr.w	r2, r3, #4
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800886c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d011      	beq.n	800889c <HAL_UART_IRQHandler+0x128>
 8008878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2204      	movs	r2, #4
 800888a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008892:	f043 0202 	orr.w	r2, r3, #2
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800889c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088a0:	f003 0308 	and.w	r3, r3, #8
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d017      	beq.n	80088d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d105      	bne.n	80088c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80088b8:	4b5c      	ldr	r3, [pc, #368]	@ (8008a2c <HAL_UART_IRQHandler+0x2b8>)
 80088ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2208      	movs	r2, #8
 80088c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ce:	f043 0208 	orr.w	r2, r3, #8
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d012      	beq.n	800890a <HAL_UART_IRQHandler+0x196>
 80088e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00c      	beq.n	800890a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008900:	f043 0220 	orr.w	r2, r3, #32
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 82f9 	beq.w	8008f08 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800891a:	f003 0320 	and.w	r3, r3, #32
 800891e:	2b00      	cmp	r3, #0
 8008920:	d013      	beq.n	800894a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d105      	bne.n	800893a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800892e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d007      	beq.n	800894a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008950:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800895e:	2b40      	cmp	r3, #64	@ 0x40
 8008960:	d005      	beq.n	800896e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008966:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800896a:	2b00      	cmp	r3, #0
 800896c:	d054      	beq.n	8008a18 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fc3e 	bl	800a1f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897e:	2b40      	cmp	r3, #64	@ 0x40
 8008980:	d146      	bne.n	8008a10 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3308      	adds	r3, #8
 8008988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800899c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80089ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80089b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1d9      	bne.n	8008982 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d017      	beq.n	8008a08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089de:	4a15      	ldr	r2, [pc, #84]	@ (8008a34 <HAL_UART_IRQHandler+0x2c0>)
 80089e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fa feb3 	bl	8003754 <HAL_DMA_Abort_IT>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d019      	beq.n	8008a28 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008a02:	4610      	mov	r0, r2
 8008a04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a06:	e00f      	b.n	8008a28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa93 	bl	8008f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0e:	e00b      	b.n	8008a28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fa8f 	bl	8008f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a16:	e007      	b.n	8008a28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fa8b 	bl	8008f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008a26:	e26f      	b.n	8008f08 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a28:	bf00      	nop
    return;
 8008a2a:	e26d      	b.n	8008f08 <HAL_UART_IRQHandler+0x794>
 8008a2c:	10000001 	.word	0x10000001
 8008a30:	04000120 	.word	0x04000120
 8008a34:	0800a2bd 	.word	0x0800a2bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	f040 8203 	bne.w	8008e48 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a46:	f003 0310 	and.w	r3, r3, #16
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 81fc 	beq.w	8008e48 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 81f5 	beq.w	8008e48 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2210      	movs	r2, #16
 8008a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a70:	2b40      	cmp	r3, #64	@ 0x40
 8008a72:	f040 816d 	bne.w	8008d50 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4aa4      	ldr	r2, [pc, #656]	@ (8008d10 <HAL_UART_IRQHandler+0x59c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d068      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4aa1      	ldr	r2, [pc, #644]	@ (8008d14 <HAL_UART_IRQHandler+0x5a0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d061      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a9f      	ldr	r2, [pc, #636]	@ (8008d18 <HAL_UART_IRQHandler+0x5a4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d05a      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8008d1c <HAL_UART_IRQHandler+0x5a8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d053      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a9a      	ldr	r2, [pc, #616]	@ (8008d20 <HAL_UART_IRQHandler+0x5ac>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d04c      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a97      	ldr	r2, [pc, #604]	@ (8008d24 <HAL_UART_IRQHandler+0x5b0>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d045      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a95      	ldr	r2, [pc, #596]	@ (8008d28 <HAL_UART_IRQHandler+0x5b4>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d03e      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a92      	ldr	r2, [pc, #584]	@ (8008d2c <HAL_UART_IRQHandler+0x5b8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d037      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a90      	ldr	r2, [pc, #576]	@ (8008d30 <HAL_UART_IRQHandler+0x5bc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d030      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a8d      	ldr	r2, [pc, #564]	@ (8008d34 <HAL_UART_IRQHandler+0x5c0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d029      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a8b      	ldr	r2, [pc, #556]	@ (8008d38 <HAL_UART_IRQHandler+0x5c4>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d022      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a88      	ldr	r2, [pc, #544]	@ (8008d3c <HAL_UART_IRQHandler+0x5c8>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d01b      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a86      	ldr	r2, [pc, #536]	@ (8008d40 <HAL_UART_IRQHandler+0x5cc>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d014      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a83      	ldr	r2, [pc, #524]	@ (8008d44 <HAL_UART_IRQHandler+0x5d0>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00d      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a81      	ldr	r2, [pc, #516]	@ (8008d48 <HAL_UART_IRQHandler+0x5d4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d006      	beq.n	8008b56 <HAL_UART_IRQHandler+0x3e2>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a7e      	ldr	r2, [pc, #504]	@ (8008d4c <HAL_UART_IRQHandler+0x5d8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d106      	bne.n	8008b64 <HAL_UART_IRQHandler+0x3f0>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	e005      	b.n	8008b70 <HAL_UART_IRQHandler+0x3fc>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 80ad 	beq.w	8008cd8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	f080 80a5 	bcs.w	8008cd8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba4:	f000 8087 	beq.w	8008cb6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008bb4:	e853 3f00 	ldrex	r3, [r3]
 8008bb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bd6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1da      	bne.n	8008ba8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008c02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c04:	f023 0301 	bic.w	r3, r3, #1
 8008c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3308      	adds	r3, #8
 8008c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008c16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e1      	bne.n	8008bf2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008c3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008c52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008c54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008c58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e3      	bne.n	8008c2e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c84:	f023 0310 	bic.w	r3, r3, #16
 8008c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e4      	bne.n	8008c74 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fa fa31 	bl	8003118 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f939 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008cd6:	e119      	b.n	8008f0c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	f040 8112 	bne.w	8008f0c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cf4:	f040 810a 	bne.w	8008f0c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f91e 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
      return;
 8008d0c:	e0fe      	b.n	8008f0c <HAL_UART_IRQHandler+0x798>
 8008d0e:	bf00      	nop
 8008d10:	40020010 	.word	0x40020010
 8008d14:	40020028 	.word	0x40020028
 8008d18:	40020040 	.word	0x40020040
 8008d1c:	40020058 	.word	0x40020058
 8008d20:	40020070 	.word	0x40020070
 8008d24:	40020088 	.word	0x40020088
 8008d28:	400200a0 	.word	0x400200a0
 8008d2c:	400200b8 	.word	0x400200b8
 8008d30:	40020410 	.word	0x40020410
 8008d34:	40020428 	.word	0x40020428
 8008d38:	40020440 	.word	0x40020440
 8008d3c:	40020458 	.word	0x40020458
 8008d40:	40020470 	.word	0x40020470
 8008d44:	40020488 	.word	0x40020488
 8008d48:	400204a0 	.word	0x400204a0
 8008d4c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 80cf 	beq.w	8008f10 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008d72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 80ca 	beq.w	8008f10 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008da4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e4      	bne.n	8008d7c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3308      	adds	r3, #8
 8008db8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8008dc2:	6a3a      	ldr	r2, [r7, #32]
 8008dc4:	4b55      	ldr	r3, [pc, #340]	@ (8008f1c <HAL_UART_IRQHandler+0x7a8>)
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008dd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e3      	bne.n	8008db2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	e853 3f00 	ldrex	r3, [r3]
 8008e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f023 0310 	bic.w	r3, r3, #16
 8008e12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008e20:	61fb      	str	r3, [r7, #28]
 8008e22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	69b9      	ldr	r1, [r7, #24]
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e4      	bne.n	8008dfe <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f881 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e46:	e063      	b.n	8008f10 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00e      	beq.n	8008e72 <HAL_UART_IRQHandler+0x6fe>
 8008e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d008      	beq.n	8008e72 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008e68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 ff84 	bl	800ad78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e70:	e051      	b.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d014      	beq.n	8008ea8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d105      	bne.n	8008e96 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d008      	beq.n	8008ea8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d03a      	beq.n	8008f14 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	4798      	blx	r3
    }
    return;
 8008ea6:	e035      	b.n	8008f14 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d009      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x754>
 8008eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 fa0d 	bl	800a2e0 <UART_EndTransmit_IT>
    return;
 8008ec6:	e026      	b.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d009      	beq.n	8008ee8 <HAL_UART_IRQHandler+0x774>
 8008ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ed8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 ff5d 	bl	800ada0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ee6:	e016      	b.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d010      	beq.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
 8008ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	da0c      	bge.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 ff45 	bl	800ad8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f02:	e008      	b.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008f04:	bf00      	nop
 8008f06:	e006      	b.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008f08:	bf00      	nop
 8008f0a:	e004      	b.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008f0c:	bf00      	nop
 8008f0e:	e002      	b.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008f10:	bf00      	nop
 8008f12:	e000      	b.n	8008f16 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008f14:	bf00      	nop
  }
}
 8008f16:	37e8      	adds	r7, #232	@ 0xe8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	effffffe 	.word	0xeffffffe

08008f20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f64:	b092      	sub	sp, #72	@ 0x48
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	4bbe      	ldr	r3, [pc, #760]	@ (8009288 <UART_SetConfig+0x328>)
 8008f90:	4013      	ands	r3, r2
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	6812      	ldr	r2, [r2, #0]
 8008f96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4ab3      	ldr	r2, [pc, #716]	@ (800928c <UART_SetConfig+0x32c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d004      	beq.n	8008fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	4baf      	ldr	r3, [pc, #700]	@ (8009290 <UART_SetConfig+0x330>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	6812      	ldr	r2, [r2, #0]
 8008fda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008fdc:	430b      	orrs	r3, r1
 8008fde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe6:	f023 010f 	bic.w	r1, r3, #15
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4aa6      	ldr	r2, [pc, #664]	@ (8009294 <UART_SetConfig+0x334>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d177      	bne.n	80090f0 <UART_SetConfig+0x190>
 8009000:	4ba5      	ldr	r3, [pc, #660]	@ (8009298 <UART_SetConfig+0x338>)
 8009002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009008:	2b28      	cmp	r3, #40	@ 0x28
 800900a:	d86d      	bhi.n	80090e8 <UART_SetConfig+0x188>
 800900c:	a201      	add	r2, pc, #4	@ (adr r2, 8009014 <UART_SetConfig+0xb4>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	080090b9 	.word	0x080090b9
 8009018:	080090e9 	.word	0x080090e9
 800901c:	080090e9 	.word	0x080090e9
 8009020:	080090e9 	.word	0x080090e9
 8009024:	080090e9 	.word	0x080090e9
 8009028:	080090e9 	.word	0x080090e9
 800902c:	080090e9 	.word	0x080090e9
 8009030:	080090e9 	.word	0x080090e9
 8009034:	080090c1 	.word	0x080090c1
 8009038:	080090e9 	.word	0x080090e9
 800903c:	080090e9 	.word	0x080090e9
 8009040:	080090e9 	.word	0x080090e9
 8009044:	080090e9 	.word	0x080090e9
 8009048:	080090e9 	.word	0x080090e9
 800904c:	080090e9 	.word	0x080090e9
 8009050:	080090e9 	.word	0x080090e9
 8009054:	080090c9 	.word	0x080090c9
 8009058:	080090e9 	.word	0x080090e9
 800905c:	080090e9 	.word	0x080090e9
 8009060:	080090e9 	.word	0x080090e9
 8009064:	080090e9 	.word	0x080090e9
 8009068:	080090e9 	.word	0x080090e9
 800906c:	080090e9 	.word	0x080090e9
 8009070:	080090e9 	.word	0x080090e9
 8009074:	080090d1 	.word	0x080090d1
 8009078:	080090e9 	.word	0x080090e9
 800907c:	080090e9 	.word	0x080090e9
 8009080:	080090e9 	.word	0x080090e9
 8009084:	080090e9 	.word	0x080090e9
 8009088:	080090e9 	.word	0x080090e9
 800908c:	080090e9 	.word	0x080090e9
 8009090:	080090e9 	.word	0x080090e9
 8009094:	080090d9 	.word	0x080090d9
 8009098:	080090e9 	.word	0x080090e9
 800909c:	080090e9 	.word	0x080090e9
 80090a0:	080090e9 	.word	0x080090e9
 80090a4:	080090e9 	.word	0x080090e9
 80090a8:	080090e9 	.word	0x080090e9
 80090ac:	080090e9 	.word	0x080090e9
 80090b0:	080090e9 	.word	0x080090e9
 80090b4:	080090e1 	.word	0x080090e1
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090be:	e326      	b.n	800970e <UART_SetConfig+0x7ae>
 80090c0:	2304      	movs	r3, #4
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e322      	b.n	800970e <UART_SetConfig+0x7ae>
 80090c8:	2308      	movs	r3, #8
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e31e      	b.n	800970e <UART_SetConfig+0x7ae>
 80090d0:	2310      	movs	r3, #16
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e31a      	b.n	800970e <UART_SetConfig+0x7ae>
 80090d8:	2320      	movs	r3, #32
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e316      	b.n	800970e <UART_SetConfig+0x7ae>
 80090e0:	2340      	movs	r3, #64	@ 0x40
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e312      	b.n	800970e <UART_SetConfig+0x7ae>
 80090e8:	2380      	movs	r3, #128	@ 0x80
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e30e      	b.n	800970e <UART_SetConfig+0x7ae>
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a69      	ldr	r2, [pc, #420]	@ (800929c <UART_SetConfig+0x33c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d130      	bne.n	800915c <UART_SetConfig+0x1fc>
 80090fa:	4b67      	ldr	r3, [pc, #412]	@ (8009298 <UART_SetConfig+0x338>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	2b05      	cmp	r3, #5
 8009104:	d826      	bhi.n	8009154 <UART_SetConfig+0x1f4>
 8009106:	a201      	add	r2, pc, #4	@ (adr r2, 800910c <UART_SetConfig+0x1ac>)
 8009108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910c:	08009125 	.word	0x08009125
 8009110:	0800912d 	.word	0x0800912d
 8009114:	08009135 	.word	0x08009135
 8009118:	0800913d 	.word	0x0800913d
 800911c:	08009145 	.word	0x08009145
 8009120:	0800914d 	.word	0x0800914d
 8009124:	2300      	movs	r3, #0
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912a:	e2f0      	b.n	800970e <UART_SetConfig+0x7ae>
 800912c:	2304      	movs	r3, #4
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e2ec      	b.n	800970e <UART_SetConfig+0x7ae>
 8009134:	2308      	movs	r3, #8
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e2e8      	b.n	800970e <UART_SetConfig+0x7ae>
 800913c:	2310      	movs	r3, #16
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e2e4      	b.n	800970e <UART_SetConfig+0x7ae>
 8009144:	2320      	movs	r3, #32
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e2e0      	b.n	800970e <UART_SetConfig+0x7ae>
 800914c:	2340      	movs	r3, #64	@ 0x40
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e2dc      	b.n	800970e <UART_SetConfig+0x7ae>
 8009154:	2380      	movs	r3, #128	@ 0x80
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e2d8      	b.n	800970e <UART_SetConfig+0x7ae>
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a4f      	ldr	r2, [pc, #316]	@ (80092a0 <UART_SetConfig+0x340>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d130      	bne.n	80091c8 <UART_SetConfig+0x268>
 8009166:	4b4c      	ldr	r3, [pc, #304]	@ (8009298 <UART_SetConfig+0x338>)
 8009168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800916a:	f003 0307 	and.w	r3, r3, #7
 800916e:	2b05      	cmp	r3, #5
 8009170:	d826      	bhi.n	80091c0 <UART_SetConfig+0x260>
 8009172:	a201      	add	r2, pc, #4	@ (adr r2, 8009178 <UART_SetConfig+0x218>)
 8009174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009178:	08009191 	.word	0x08009191
 800917c:	08009199 	.word	0x08009199
 8009180:	080091a1 	.word	0x080091a1
 8009184:	080091a9 	.word	0x080091a9
 8009188:	080091b1 	.word	0x080091b1
 800918c:	080091b9 	.word	0x080091b9
 8009190:	2300      	movs	r3, #0
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009196:	e2ba      	b.n	800970e <UART_SetConfig+0x7ae>
 8009198:	2304      	movs	r3, #4
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e2b6      	b.n	800970e <UART_SetConfig+0x7ae>
 80091a0:	2308      	movs	r3, #8
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e2b2      	b.n	800970e <UART_SetConfig+0x7ae>
 80091a8:	2310      	movs	r3, #16
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e2ae      	b.n	800970e <UART_SetConfig+0x7ae>
 80091b0:	2320      	movs	r3, #32
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e2aa      	b.n	800970e <UART_SetConfig+0x7ae>
 80091b8:	2340      	movs	r3, #64	@ 0x40
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e2a6      	b.n	800970e <UART_SetConfig+0x7ae>
 80091c0:	2380      	movs	r3, #128	@ 0x80
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e2a2      	b.n	800970e <UART_SetConfig+0x7ae>
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a35      	ldr	r2, [pc, #212]	@ (80092a4 <UART_SetConfig+0x344>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d130      	bne.n	8009234 <UART_SetConfig+0x2d4>
 80091d2:	4b31      	ldr	r3, [pc, #196]	@ (8009298 <UART_SetConfig+0x338>)
 80091d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	2b05      	cmp	r3, #5
 80091dc:	d826      	bhi.n	800922c <UART_SetConfig+0x2cc>
 80091de:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <UART_SetConfig+0x284>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	080091fd 	.word	0x080091fd
 80091e8:	08009205 	.word	0x08009205
 80091ec:	0800920d 	.word	0x0800920d
 80091f0:	08009215 	.word	0x08009215
 80091f4:	0800921d 	.word	0x0800921d
 80091f8:	08009225 	.word	0x08009225
 80091fc:	2300      	movs	r3, #0
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e284      	b.n	800970e <UART_SetConfig+0x7ae>
 8009204:	2304      	movs	r3, #4
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e280      	b.n	800970e <UART_SetConfig+0x7ae>
 800920c:	2308      	movs	r3, #8
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e27c      	b.n	800970e <UART_SetConfig+0x7ae>
 8009214:	2310      	movs	r3, #16
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e278      	b.n	800970e <UART_SetConfig+0x7ae>
 800921c:	2320      	movs	r3, #32
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e274      	b.n	800970e <UART_SetConfig+0x7ae>
 8009224:	2340      	movs	r3, #64	@ 0x40
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e270      	b.n	800970e <UART_SetConfig+0x7ae>
 800922c:	2380      	movs	r3, #128	@ 0x80
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e26c      	b.n	800970e <UART_SetConfig+0x7ae>
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a1b      	ldr	r2, [pc, #108]	@ (80092a8 <UART_SetConfig+0x348>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d142      	bne.n	80092c4 <UART_SetConfig+0x364>
 800923e:	4b16      	ldr	r3, [pc, #88]	@ (8009298 <UART_SetConfig+0x338>)
 8009240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009242:	f003 0307 	and.w	r3, r3, #7
 8009246:	2b05      	cmp	r3, #5
 8009248:	d838      	bhi.n	80092bc <UART_SetConfig+0x35c>
 800924a:	a201      	add	r2, pc, #4	@ (adr r2, 8009250 <UART_SetConfig+0x2f0>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	08009269 	.word	0x08009269
 8009254:	08009271 	.word	0x08009271
 8009258:	08009279 	.word	0x08009279
 800925c:	08009281 	.word	0x08009281
 8009260:	080092ad 	.word	0x080092ad
 8009264:	080092b5 	.word	0x080092b5
 8009268:	2300      	movs	r3, #0
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926e:	e24e      	b.n	800970e <UART_SetConfig+0x7ae>
 8009270:	2304      	movs	r3, #4
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e24a      	b.n	800970e <UART_SetConfig+0x7ae>
 8009278:	2308      	movs	r3, #8
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e246      	b.n	800970e <UART_SetConfig+0x7ae>
 8009280:	2310      	movs	r3, #16
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e242      	b.n	800970e <UART_SetConfig+0x7ae>
 8009288:	cfff69f3 	.word	0xcfff69f3
 800928c:	58000c00 	.word	0x58000c00
 8009290:	11fff4ff 	.word	0x11fff4ff
 8009294:	40011000 	.word	0x40011000
 8009298:	58024400 	.word	0x58024400
 800929c:	40004400 	.word	0x40004400
 80092a0:	40004800 	.word	0x40004800
 80092a4:	40004c00 	.word	0x40004c00
 80092a8:	40005000 	.word	0x40005000
 80092ac:	2320      	movs	r3, #32
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b2:	e22c      	b.n	800970e <UART_SetConfig+0x7ae>
 80092b4:	2340      	movs	r3, #64	@ 0x40
 80092b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ba:	e228      	b.n	800970e <UART_SetConfig+0x7ae>
 80092bc:	2380      	movs	r3, #128	@ 0x80
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c2:	e224      	b.n	800970e <UART_SetConfig+0x7ae>
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4ab1      	ldr	r2, [pc, #708]	@ (8009590 <UART_SetConfig+0x630>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d176      	bne.n	80093bc <UART_SetConfig+0x45c>
 80092ce:	4bb1      	ldr	r3, [pc, #708]	@ (8009594 <UART_SetConfig+0x634>)
 80092d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092d6:	2b28      	cmp	r3, #40	@ 0x28
 80092d8:	d86c      	bhi.n	80093b4 <UART_SetConfig+0x454>
 80092da:	a201      	add	r2, pc, #4	@ (adr r2, 80092e0 <UART_SetConfig+0x380>)
 80092dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e0:	08009385 	.word	0x08009385
 80092e4:	080093b5 	.word	0x080093b5
 80092e8:	080093b5 	.word	0x080093b5
 80092ec:	080093b5 	.word	0x080093b5
 80092f0:	080093b5 	.word	0x080093b5
 80092f4:	080093b5 	.word	0x080093b5
 80092f8:	080093b5 	.word	0x080093b5
 80092fc:	080093b5 	.word	0x080093b5
 8009300:	0800938d 	.word	0x0800938d
 8009304:	080093b5 	.word	0x080093b5
 8009308:	080093b5 	.word	0x080093b5
 800930c:	080093b5 	.word	0x080093b5
 8009310:	080093b5 	.word	0x080093b5
 8009314:	080093b5 	.word	0x080093b5
 8009318:	080093b5 	.word	0x080093b5
 800931c:	080093b5 	.word	0x080093b5
 8009320:	08009395 	.word	0x08009395
 8009324:	080093b5 	.word	0x080093b5
 8009328:	080093b5 	.word	0x080093b5
 800932c:	080093b5 	.word	0x080093b5
 8009330:	080093b5 	.word	0x080093b5
 8009334:	080093b5 	.word	0x080093b5
 8009338:	080093b5 	.word	0x080093b5
 800933c:	080093b5 	.word	0x080093b5
 8009340:	0800939d 	.word	0x0800939d
 8009344:	080093b5 	.word	0x080093b5
 8009348:	080093b5 	.word	0x080093b5
 800934c:	080093b5 	.word	0x080093b5
 8009350:	080093b5 	.word	0x080093b5
 8009354:	080093b5 	.word	0x080093b5
 8009358:	080093b5 	.word	0x080093b5
 800935c:	080093b5 	.word	0x080093b5
 8009360:	080093a5 	.word	0x080093a5
 8009364:	080093b5 	.word	0x080093b5
 8009368:	080093b5 	.word	0x080093b5
 800936c:	080093b5 	.word	0x080093b5
 8009370:	080093b5 	.word	0x080093b5
 8009374:	080093b5 	.word	0x080093b5
 8009378:	080093b5 	.word	0x080093b5
 800937c:	080093b5 	.word	0x080093b5
 8009380:	080093ad 	.word	0x080093ad
 8009384:	2301      	movs	r3, #1
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938a:	e1c0      	b.n	800970e <UART_SetConfig+0x7ae>
 800938c:	2304      	movs	r3, #4
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009392:	e1bc      	b.n	800970e <UART_SetConfig+0x7ae>
 8009394:	2308      	movs	r3, #8
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e1b8      	b.n	800970e <UART_SetConfig+0x7ae>
 800939c:	2310      	movs	r3, #16
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e1b4      	b.n	800970e <UART_SetConfig+0x7ae>
 80093a4:	2320      	movs	r3, #32
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e1b0      	b.n	800970e <UART_SetConfig+0x7ae>
 80093ac:	2340      	movs	r3, #64	@ 0x40
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e1ac      	b.n	800970e <UART_SetConfig+0x7ae>
 80093b4:	2380      	movs	r3, #128	@ 0x80
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e1a8      	b.n	800970e <UART_SetConfig+0x7ae>
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a75      	ldr	r2, [pc, #468]	@ (8009598 <UART_SetConfig+0x638>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d130      	bne.n	8009428 <UART_SetConfig+0x4c8>
 80093c6:	4b73      	ldr	r3, [pc, #460]	@ (8009594 <UART_SetConfig+0x634>)
 80093c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ca:	f003 0307 	and.w	r3, r3, #7
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	d826      	bhi.n	8009420 <UART_SetConfig+0x4c0>
 80093d2:	a201      	add	r2, pc, #4	@ (adr r2, 80093d8 <UART_SetConfig+0x478>)
 80093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d8:	080093f1 	.word	0x080093f1
 80093dc:	080093f9 	.word	0x080093f9
 80093e0:	08009401 	.word	0x08009401
 80093e4:	08009409 	.word	0x08009409
 80093e8:	08009411 	.word	0x08009411
 80093ec:	08009419 	.word	0x08009419
 80093f0:	2300      	movs	r3, #0
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e18a      	b.n	800970e <UART_SetConfig+0x7ae>
 80093f8:	2304      	movs	r3, #4
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e186      	b.n	800970e <UART_SetConfig+0x7ae>
 8009400:	2308      	movs	r3, #8
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e182      	b.n	800970e <UART_SetConfig+0x7ae>
 8009408:	2310      	movs	r3, #16
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e17e      	b.n	800970e <UART_SetConfig+0x7ae>
 8009410:	2320      	movs	r3, #32
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e17a      	b.n	800970e <UART_SetConfig+0x7ae>
 8009418:	2340      	movs	r3, #64	@ 0x40
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e176      	b.n	800970e <UART_SetConfig+0x7ae>
 8009420:	2380      	movs	r3, #128	@ 0x80
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e172      	b.n	800970e <UART_SetConfig+0x7ae>
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a5b      	ldr	r2, [pc, #364]	@ (800959c <UART_SetConfig+0x63c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d130      	bne.n	8009494 <UART_SetConfig+0x534>
 8009432:	4b58      	ldr	r3, [pc, #352]	@ (8009594 <UART_SetConfig+0x634>)
 8009434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	2b05      	cmp	r3, #5
 800943c:	d826      	bhi.n	800948c <UART_SetConfig+0x52c>
 800943e:	a201      	add	r2, pc, #4	@ (adr r2, 8009444 <UART_SetConfig+0x4e4>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	0800945d 	.word	0x0800945d
 8009448:	08009465 	.word	0x08009465
 800944c:	0800946d 	.word	0x0800946d
 8009450:	08009475 	.word	0x08009475
 8009454:	0800947d 	.word	0x0800947d
 8009458:	08009485 	.word	0x08009485
 800945c:	2300      	movs	r3, #0
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e154      	b.n	800970e <UART_SetConfig+0x7ae>
 8009464:	2304      	movs	r3, #4
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e150      	b.n	800970e <UART_SetConfig+0x7ae>
 800946c:	2308      	movs	r3, #8
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e14c      	b.n	800970e <UART_SetConfig+0x7ae>
 8009474:	2310      	movs	r3, #16
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e148      	b.n	800970e <UART_SetConfig+0x7ae>
 800947c:	2320      	movs	r3, #32
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e144      	b.n	800970e <UART_SetConfig+0x7ae>
 8009484:	2340      	movs	r3, #64	@ 0x40
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e140      	b.n	800970e <UART_SetConfig+0x7ae>
 800948c:	2380      	movs	r3, #128	@ 0x80
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e13c      	b.n	800970e <UART_SetConfig+0x7ae>
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a41      	ldr	r2, [pc, #260]	@ (80095a0 <UART_SetConfig+0x640>)
 800949a:	4293      	cmp	r3, r2
 800949c:	f040 8082 	bne.w	80095a4 <UART_SetConfig+0x644>
 80094a0:	4b3c      	ldr	r3, [pc, #240]	@ (8009594 <UART_SetConfig+0x634>)
 80094a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094a8:	2b28      	cmp	r3, #40	@ 0x28
 80094aa:	d86d      	bhi.n	8009588 <UART_SetConfig+0x628>
 80094ac:	a201      	add	r2, pc, #4	@ (adr r2, 80094b4 <UART_SetConfig+0x554>)
 80094ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b2:	bf00      	nop
 80094b4:	08009559 	.word	0x08009559
 80094b8:	08009589 	.word	0x08009589
 80094bc:	08009589 	.word	0x08009589
 80094c0:	08009589 	.word	0x08009589
 80094c4:	08009589 	.word	0x08009589
 80094c8:	08009589 	.word	0x08009589
 80094cc:	08009589 	.word	0x08009589
 80094d0:	08009589 	.word	0x08009589
 80094d4:	08009561 	.word	0x08009561
 80094d8:	08009589 	.word	0x08009589
 80094dc:	08009589 	.word	0x08009589
 80094e0:	08009589 	.word	0x08009589
 80094e4:	08009589 	.word	0x08009589
 80094e8:	08009589 	.word	0x08009589
 80094ec:	08009589 	.word	0x08009589
 80094f0:	08009589 	.word	0x08009589
 80094f4:	08009569 	.word	0x08009569
 80094f8:	08009589 	.word	0x08009589
 80094fc:	08009589 	.word	0x08009589
 8009500:	08009589 	.word	0x08009589
 8009504:	08009589 	.word	0x08009589
 8009508:	08009589 	.word	0x08009589
 800950c:	08009589 	.word	0x08009589
 8009510:	08009589 	.word	0x08009589
 8009514:	08009571 	.word	0x08009571
 8009518:	08009589 	.word	0x08009589
 800951c:	08009589 	.word	0x08009589
 8009520:	08009589 	.word	0x08009589
 8009524:	08009589 	.word	0x08009589
 8009528:	08009589 	.word	0x08009589
 800952c:	08009589 	.word	0x08009589
 8009530:	08009589 	.word	0x08009589
 8009534:	08009579 	.word	0x08009579
 8009538:	08009589 	.word	0x08009589
 800953c:	08009589 	.word	0x08009589
 8009540:	08009589 	.word	0x08009589
 8009544:	08009589 	.word	0x08009589
 8009548:	08009589 	.word	0x08009589
 800954c:	08009589 	.word	0x08009589
 8009550:	08009589 	.word	0x08009589
 8009554:	08009581 	.word	0x08009581
 8009558:	2301      	movs	r3, #1
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e0d6      	b.n	800970e <UART_SetConfig+0x7ae>
 8009560:	2304      	movs	r3, #4
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e0d2      	b.n	800970e <UART_SetConfig+0x7ae>
 8009568:	2308      	movs	r3, #8
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e0ce      	b.n	800970e <UART_SetConfig+0x7ae>
 8009570:	2310      	movs	r3, #16
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e0ca      	b.n	800970e <UART_SetConfig+0x7ae>
 8009578:	2320      	movs	r3, #32
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e0c6      	b.n	800970e <UART_SetConfig+0x7ae>
 8009580:	2340      	movs	r3, #64	@ 0x40
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e0c2      	b.n	800970e <UART_SetConfig+0x7ae>
 8009588:	2380      	movs	r3, #128	@ 0x80
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e0be      	b.n	800970e <UART_SetConfig+0x7ae>
 8009590:	40011400 	.word	0x40011400
 8009594:	58024400 	.word	0x58024400
 8009598:	40007800 	.word	0x40007800
 800959c:	40007c00 	.word	0x40007c00
 80095a0:	40011800 	.word	0x40011800
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4aad      	ldr	r2, [pc, #692]	@ (8009860 <UART_SetConfig+0x900>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d176      	bne.n	800969c <UART_SetConfig+0x73c>
 80095ae:	4bad      	ldr	r3, [pc, #692]	@ (8009864 <UART_SetConfig+0x904>)
 80095b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095b6:	2b28      	cmp	r3, #40	@ 0x28
 80095b8:	d86c      	bhi.n	8009694 <UART_SetConfig+0x734>
 80095ba:	a201      	add	r2, pc, #4	@ (adr r2, 80095c0 <UART_SetConfig+0x660>)
 80095bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c0:	08009665 	.word	0x08009665
 80095c4:	08009695 	.word	0x08009695
 80095c8:	08009695 	.word	0x08009695
 80095cc:	08009695 	.word	0x08009695
 80095d0:	08009695 	.word	0x08009695
 80095d4:	08009695 	.word	0x08009695
 80095d8:	08009695 	.word	0x08009695
 80095dc:	08009695 	.word	0x08009695
 80095e0:	0800966d 	.word	0x0800966d
 80095e4:	08009695 	.word	0x08009695
 80095e8:	08009695 	.word	0x08009695
 80095ec:	08009695 	.word	0x08009695
 80095f0:	08009695 	.word	0x08009695
 80095f4:	08009695 	.word	0x08009695
 80095f8:	08009695 	.word	0x08009695
 80095fc:	08009695 	.word	0x08009695
 8009600:	08009675 	.word	0x08009675
 8009604:	08009695 	.word	0x08009695
 8009608:	08009695 	.word	0x08009695
 800960c:	08009695 	.word	0x08009695
 8009610:	08009695 	.word	0x08009695
 8009614:	08009695 	.word	0x08009695
 8009618:	08009695 	.word	0x08009695
 800961c:	08009695 	.word	0x08009695
 8009620:	0800967d 	.word	0x0800967d
 8009624:	08009695 	.word	0x08009695
 8009628:	08009695 	.word	0x08009695
 800962c:	08009695 	.word	0x08009695
 8009630:	08009695 	.word	0x08009695
 8009634:	08009695 	.word	0x08009695
 8009638:	08009695 	.word	0x08009695
 800963c:	08009695 	.word	0x08009695
 8009640:	08009685 	.word	0x08009685
 8009644:	08009695 	.word	0x08009695
 8009648:	08009695 	.word	0x08009695
 800964c:	08009695 	.word	0x08009695
 8009650:	08009695 	.word	0x08009695
 8009654:	08009695 	.word	0x08009695
 8009658:	08009695 	.word	0x08009695
 800965c:	08009695 	.word	0x08009695
 8009660:	0800968d 	.word	0x0800968d
 8009664:	2301      	movs	r3, #1
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966a:	e050      	b.n	800970e <UART_SetConfig+0x7ae>
 800966c:	2304      	movs	r3, #4
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009672:	e04c      	b.n	800970e <UART_SetConfig+0x7ae>
 8009674:	2308      	movs	r3, #8
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967a:	e048      	b.n	800970e <UART_SetConfig+0x7ae>
 800967c:	2310      	movs	r3, #16
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009682:	e044      	b.n	800970e <UART_SetConfig+0x7ae>
 8009684:	2320      	movs	r3, #32
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968a:	e040      	b.n	800970e <UART_SetConfig+0x7ae>
 800968c:	2340      	movs	r3, #64	@ 0x40
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009692:	e03c      	b.n	800970e <UART_SetConfig+0x7ae>
 8009694:	2380      	movs	r3, #128	@ 0x80
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e038      	b.n	800970e <UART_SetConfig+0x7ae>
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a71      	ldr	r2, [pc, #452]	@ (8009868 <UART_SetConfig+0x908>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d130      	bne.n	8009708 <UART_SetConfig+0x7a8>
 80096a6:	4b6f      	ldr	r3, [pc, #444]	@ (8009864 <UART_SetConfig+0x904>)
 80096a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096aa:	f003 0307 	and.w	r3, r3, #7
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	d826      	bhi.n	8009700 <UART_SetConfig+0x7a0>
 80096b2:	a201      	add	r2, pc, #4	@ (adr r2, 80096b8 <UART_SetConfig+0x758>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	080096d1 	.word	0x080096d1
 80096bc:	080096d9 	.word	0x080096d9
 80096c0:	080096e1 	.word	0x080096e1
 80096c4:	080096e9 	.word	0x080096e9
 80096c8:	080096f1 	.word	0x080096f1
 80096cc:	080096f9 	.word	0x080096f9
 80096d0:	2302      	movs	r3, #2
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d6:	e01a      	b.n	800970e <UART_SetConfig+0x7ae>
 80096d8:	2304      	movs	r3, #4
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096de:	e016      	b.n	800970e <UART_SetConfig+0x7ae>
 80096e0:	2308      	movs	r3, #8
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e6:	e012      	b.n	800970e <UART_SetConfig+0x7ae>
 80096e8:	2310      	movs	r3, #16
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ee:	e00e      	b.n	800970e <UART_SetConfig+0x7ae>
 80096f0:	2320      	movs	r3, #32
 80096f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f6:	e00a      	b.n	800970e <UART_SetConfig+0x7ae>
 80096f8:	2340      	movs	r3, #64	@ 0x40
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fe:	e006      	b.n	800970e <UART_SetConfig+0x7ae>
 8009700:	2380      	movs	r3, #128	@ 0x80
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e002      	b.n	800970e <UART_SetConfig+0x7ae>
 8009708:	2380      	movs	r3, #128	@ 0x80
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a55      	ldr	r2, [pc, #340]	@ (8009868 <UART_SetConfig+0x908>)
 8009714:	4293      	cmp	r3, r2
 8009716:	f040 80f8 	bne.w	800990a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800971a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800971e:	2b20      	cmp	r3, #32
 8009720:	dc46      	bgt.n	80097b0 <UART_SetConfig+0x850>
 8009722:	2b02      	cmp	r3, #2
 8009724:	db75      	blt.n	8009812 <UART_SetConfig+0x8b2>
 8009726:	3b02      	subs	r3, #2
 8009728:	2b1e      	cmp	r3, #30
 800972a:	d872      	bhi.n	8009812 <UART_SetConfig+0x8b2>
 800972c:	a201      	add	r2, pc, #4	@ (adr r2, 8009734 <UART_SetConfig+0x7d4>)
 800972e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009732:	bf00      	nop
 8009734:	080097b7 	.word	0x080097b7
 8009738:	08009813 	.word	0x08009813
 800973c:	080097bf 	.word	0x080097bf
 8009740:	08009813 	.word	0x08009813
 8009744:	08009813 	.word	0x08009813
 8009748:	08009813 	.word	0x08009813
 800974c:	080097cf 	.word	0x080097cf
 8009750:	08009813 	.word	0x08009813
 8009754:	08009813 	.word	0x08009813
 8009758:	08009813 	.word	0x08009813
 800975c:	08009813 	.word	0x08009813
 8009760:	08009813 	.word	0x08009813
 8009764:	08009813 	.word	0x08009813
 8009768:	08009813 	.word	0x08009813
 800976c:	080097df 	.word	0x080097df
 8009770:	08009813 	.word	0x08009813
 8009774:	08009813 	.word	0x08009813
 8009778:	08009813 	.word	0x08009813
 800977c:	08009813 	.word	0x08009813
 8009780:	08009813 	.word	0x08009813
 8009784:	08009813 	.word	0x08009813
 8009788:	08009813 	.word	0x08009813
 800978c:	08009813 	.word	0x08009813
 8009790:	08009813 	.word	0x08009813
 8009794:	08009813 	.word	0x08009813
 8009798:	08009813 	.word	0x08009813
 800979c:	08009813 	.word	0x08009813
 80097a0:	08009813 	.word	0x08009813
 80097a4:	08009813 	.word	0x08009813
 80097a8:	08009813 	.word	0x08009813
 80097ac:	08009805 	.word	0x08009805
 80097b0:	2b40      	cmp	r3, #64	@ 0x40
 80097b2:	d02a      	beq.n	800980a <UART_SetConfig+0x8aa>
 80097b4:	e02d      	b.n	8009812 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80097b6:	f7fd fb39 	bl	8006e2c <HAL_RCCEx_GetD3PCLK1Freq>
 80097ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097bc:	e02f      	b.n	800981e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fd fb48 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097cc:	e027      	b.n	800981e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ce:	f107 0318 	add.w	r3, r7, #24
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fd fc94 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097dc:	e01f      	b.n	800981e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097de:	4b21      	ldr	r3, [pc, #132]	@ (8009864 <UART_SetConfig+0x904>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d009      	beq.n	80097fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097ea:	4b1e      	ldr	r3, [pc, #120]	@ (8009864 <UART_SetConfig+0x904>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	08db      	lsrs	r3, r3, #3
 80097f0:	f003 0303 	and.w	r3, r3, #3
 80097f4:	4a1d      	ldr	r2, [pc, #116]	@ (800986c <UART_SetConfig+0x90c>)
 80097f6:	fa22 f303 	lsr.w	r3, r2, r3
 80097fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097fc:	e00f      	b.n	800981e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80097fe:	4b1b      	ldr	r3, [pc, #108]	@ (800986c <UART_SetConfig+0x90c>)
 8009800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009802:	e00c      	b.n	800981e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009804:	4b1a      	ldr	r3, [pc, #104]	@ (8009870 <UART_SetConfig+0x910>)
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009808:	e009      	b.n	800981e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800980a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800980e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009810:	e005      	b.n	800981e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800981c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800981e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 81ee 	beq.w	8009c02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982a:	4a12      	ldr	r2, [pc, #72]	@ (8009874 <UART_SetConfig+0x914>)
 800982c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009830:	461a      	mov	r2, r3
 8009832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009834:	fbb3 f3f2 	udiv	r3, r3, r2
 8009838:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	4613      	mov	r3, r2
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	4413      	add	r3, r2
 8009844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009846:	429a      	cmp	r2, r3
 8009848:	d305      	bcc.n	8009856 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009852:	429a      	cmp	r2, r3
 8009854:	d910      	bls.n	8009878 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800985c:	e1d1      	b.n	8009c02 <UART_SetConfig+0xca2>
 800985e:	bf00      	nop
 8009860:	40011c00 	.word	0x40011c00
 8009864:	58024400 	.word	0x58024400
 8009868:	58000c00 	.word	0x58000c00
 800986c:	03d09000 	.word	0x03d09000
 8009870:	003d0900 	.word	0x003d0900
 8009874:	0800e43c 	.word	0x0800e43c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800987a:	2200      	movs	r2, #0
 800987c:	60bb      	str	r3, [r7, #8]
 800987e:	60fa      	str	r2, [r7, #12]
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009884:	4ac0      	ldr	r2, [pc, #768]	@ (8009b88 <UART_SetConfig+0xc28>)
 8009886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800988a:	b29b      	uxth	r3, r3
 800988c:	2200      	movs	r2, #0
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800989a:	f7f6 fda1 	bl	80003e0 <__aeabi_uldivmod>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4610      	mov	r0, r2
 80098a4:	4619      	mov	r1, r3
 80098a6:	f04f 0200 	mov.w	r2, #0
 80098aa:	f04f 0300 	mov.w	r3, #0
 80098ae:	020b      	lsls	r3, r1, #8
 80098b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098b4:	0202      	lsls	r2, r0, #8
 80098b6:	6979      	ldr	r1, [r7, #20]
 80098b8:	6849      	ldr	r1, [r1, #4]
 80098ba:	0849      	lsrs	r1, r1, #1
 80098bc:	2000      	movs	r0, #0
 80098be:	460c      	mov	r4, r1
 80098c0:	4605      	mov	r5, r0
 80098c2:	eb12 0804 	adds.w	r8, r2, r4
 80098c6:	eb43 0905 	adc.w	r9, r3, r5
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	469a      	mov	sl, r3
 80098d2:	4693      	mov	fp, r2
 80098d4:	4652      	mov	r2, sl
 80098d6:	465b      	mov	r3, fp
 80098d8:	4640      	mov	r0, r8
 80098da:	4649      	mov	r1, r9
 80098dc:	f7f6 fd80 	bl	80003e0 <__aeabi_uldivmod>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4613      	mov	r3, r2
 80098e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098ee:	d308      	bcc.n	8009902 <UART_SetConfig+0x9a2>
 80098f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098f6:	d204      	bcs.n	8009902 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098fe:	60da      	str	r2, [r3, #12]
 8009900:	e17f      	b.n	8009c02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009908:	e17b      	b.n	8009c02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009912:	f040 80bd 	bne.w	8009a90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009916:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800991a:	2b20      	cmp	r3, #32
 800991c:	dc48      	bgt.n	80099b0 <UART_SetConfig+0xa50>
 800991e:	2b00      	cmp	r3, #0
 8009920:	db7b      	blt.n	8009a1a <UART_SetConfig+0xaba>
 8009922:	2b20      	cmp	r3, #32
 8009924:	d879      	bhi.n	8009a1a <UART_SetConfig+0xaba>
 8009926:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <UART_SetConfig+0x9cc>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	080099b7 	.word	0x080099b7
 8009930:	080099bf 	.word	0x080099bf
 8009934:	08009a1b 	.word	0x08009a1b
 8009938:	08009a1b 	.word	0x08009a1b
 800993c:	080099c7 	.word	0x080099c7
 8009940:	08009a1b 	.word	0x08009a1b
 8009944:	08009a1b 	.word	0x08009a1b
 8009948:	08009a1b 	.word	0x08009a1b
 800994c:	080099d7 	.word	0x080099d7
 8009950:	08009a1b 	.word	0x08009a1b
 8009954:	08009a1b 	.word	0x08009a1b
 8009958:	08009a1b 	.word	0x08009a1b
 800995c:	08009a1b 	.word	0x08009a1b
 8009960:	08009a1b 	.word	0x08009a1b
 8009964:	08009a1b 	.word	0x08009a1b
 8009968:	08009a1b 	.word	0x08009a1b
 800996c:	080099e7 	.word	0x080099e7
 8009970:	08009a1b 	.word	0x08009a1b
 8009974:	08009a1b 	.word	0x08009a1b
 8009978:	08009a1b 	.word	0x08009a1b
 800997c:	08009a1b 	.word	0x08009a1b
 8009980:	08009a1b 	.word	0x08009a1b
 8009984:	08009a1b 	.word	0x08009a1b
 8009988:	08009a1b 	.word	0x08009a1b
 800998c:	08009a1b 	.word	0x08009a1b
 8009990:	08009a1b 	.word	0x08009a1b
 8009994:	08009a1b 	.word	0x08009a1b
 8009998:	08009a1b 	.word	0x08009a1b
 800999c:	08009a1b 	.word	0x08009a1b
 80099a0:	08009a1b 	.word	0x08009a1b
 80099a4:	08009a1b 	.word	0x08009a1b
 80099a8:	08009a1b 	.word	0x08009a1b
 80099ac:	08009a0d 	.word	0x08009a0d
 80099b0:	2b40      	cmp	r3, #64	@ 0x40
 80099b2:	d02e      	beq.n	8009a12 <UART_SetConfig+0xab2>
 80099b4:	e031      	b.n	8009a1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099b6:	f7fc f86d 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 80099ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099bc:	e033      	b.n	8009a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099be:	f7fc f87f 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 80099c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099c4:	e02f      	b.n	8009a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fd fa44 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80099d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d4:	e027      	b.n	8009a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099d6:	f107 0318 	add.w	r3, r7, #24
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fd fb90 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e4:	e01f      	b.n	8009a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099e6:	4b69      	ldr	r3, [pc, #420]	@ (8009b8c <UART_SetConfig+0xc2c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099f2:	4b66      	ldr	r3, [pc, #408]	@ (8009b8c <UART_SetConfig+0xc2c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	08db      	lsrs	r3, r3, #3
 80099f8:	f003 0303 	and.w	r3, r3, #3
 80099fc:	4a64      	ldr	r2, [pc, #400]	@ (8009b90 <UART_SetConfig+0xc30>)
 80099fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a04:	e00f      	b.n	8009a26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009a06:	4b62      	ldr	r3, [pc, #392]	@ (8009b90 <UART_SetConfig+0xc30>)
 8009a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a0a:	e00c      	b.n	8009a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a0c:	4b61      	ldr	r3, [pc, #388]	@ (8009b94 <UART_SetConfig+0xc34>)
 8009a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a10:	e009      	b.n	8009a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a18:	e005      	b.n	8009a26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80ea 	beq.w	8009c02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a32:	4a55      	ldr	r2, [pc, #340]	@ (8009b88 <UART_SetConfig+0xc28>)
 8009a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a40:	005a      	lsls	r2, r3, #1
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	085b      	lsrs	r3, r3, #1
 8009a48:	441a      	add	r2, r3
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a56:	2b0f      	cmp	r3, #15
 8009a58:	d916      	bls.n	8009a88 <UART_SetConfig+0xb28>
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a60:	d212      	bcs.n	8009a88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	f023 030f 	bic.w	r3, r3, #15
 8009a6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6e:	085b      	lsrs	r3, r3, #1
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009a84:	60da      	str	r2, [r3, #12]
 8009a86:	e0bc      	b.n	8009c02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a8e:	e0b8      	b.n	8009c02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a94:	2b20      	cmp	r3, #32
 8009a96:	dc4b      	bgt.n	8009b30 <UART_SetConfig+0xbd0>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f2c0 8087 	blt.w	8009bac <UART_SetConfig+0xc4c>
 8009a9e:	2b20      	cmp	r3, #32
 8009aa0:	f200 8084 	bhi.w	8009bac <UART_SetConfig+0xc4c>
 8009aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <UART_SetConfig+0xb4c>)
 8009aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aaa:	bf00      	nop
 8009aac:	08009b37 	.word	0x08009b37
 8009ab0:	08009b3f 	.word	0x08009b3f
 8009ab4:	08009bad 	.word	0x08009bad
 8009ab8:	08009bad 	.word	0x08009bad
 8009abc:	08009b47 	.word	0x08009b47
 8009ac0:	08009bad 	.word	0x08009bad
 8009ac4:	08009bad 	.word	0x08009bad
 8009ac8:	08009bad 	.word	0x08009bad
 8009acc:	08009b57 	.word	0x08009b57
 8009ad0:	08009bad 	.word	0x08009bad
 8009ad4:	08009bad 	.word	0x08009bad
 8009ad8:	08009bad 	.word	0x08009bad
 8009adc:	08009bad 	.word	0x08009bad
 8009ae0:	08009bad 	.word	0x08009bad
 8009ae4:	08009bad 	.word	0x08009bad
 8009ae8:	08009bad 	.word	0x08009bad
 8009aec:	08009b67 	.word	0x08009b67
 8009af0:	08009bad 	.word	0x08009bad
 8009af4:	08009bad 	.word	0x08009bad
 8009af8:	08009bad 	.word	0x08009bad
 8009afc:	08009bad 	.word	0x08009bad
 8009b00:	08009bad 	.word	0x08009bad
 8009b04:	08009bad 	.word	0x08009bad
 8009b08:	08009bad 	.word	0x08009bad
 8009b0c:	08009bad 	.word	0x08009bad
 8009b10:	08009bad 	.word	0x08009bad
 8009b14:	08009bad 	.word	0x08009bad
 8009b18:	08009bad 	.word	0x08009bad
 8009b1c:	08009bad 	.word	0x08009bad
 8009b20:	08009bad 	.word	0x08009bad
 8009b24:	08009bad 	.word	0x08009bad
 8009b28:	08009bad 	.word	0x08009bad
 8009b2c:	08009b9f 	.word	0x08009b9f
 8009b30:	2b40      	cmp	r3, #64	@ 0x40
 8009b32:	d037      	beq.n	8009ba4 <UART_SetConfig+0xc44>
 8009b34:	e03a      	b.n	8009bac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b36:	f7fb ffad 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8009b3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b3c:	e03c      	b.n	8009bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b3e:	f7fb ffbf 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 8009b42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b44:	e038      	b.n	8009bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fd f984 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b54:	e030      	b.n	8009bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b56:	f107 0318 	add.w	r3, r7, #24
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fd fad0 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b64:	e028      	b.n	8009bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b66:	4b09      	ldr	r3, [pc, #36]	@ (8009b8c <UART_SetConfig+0xc2c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d012      	beq.n	8009b98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b72:	4b06      	ldr	r3, [pc, #24]	@ (8009b8c <UART_SetConfig+0xc2c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	08db      	lsrs	r3, r3, #3
 8009b78:	f003 0303 	and.w	r3, r3, #3
 8009b7c:	4a04      	ldr	r2, [pc, #16]	@ (8009b90 <UART_SetConfig+0xc30>)
 8009b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b84:	e018      	b.n	8009bb8 <UART_SetConfig+0xc58>
 8009b86:	bf00      	nop
 8009b88:	0800e43c 	.word	0x0800e43c
 8009b8c:	58024400 	.word	0x58024400
 8009b90:	03d09000 	.word	0x03d09000
 8009b94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009b98:	4b24      	ldr	r3, [pc, #144]	@ (8009c2c <UART_SetConfig+0xccc>)
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b9c:	e00c      	b.n	8009bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b9e:	4b24      	ldr	r3, [pc, #144]	@ (8009c30 <UART_SetConfig+0xcd0>)
 8009ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba2:	e009      	b.n	8009bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ba4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009baa:	e005      	b.n	8009bb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009bac:	2300      	movs	r3, #0
 8009bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009bb6:	bf00      	nop
    }

    if (pclk != 0U)
 8009bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d021      	beq.n	8009c02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8009c34 <UART_SetConfig+0xcd4>)
 8009bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	085b      	lsrs	r3, r3, #1
 8009bd6:	441a      	add	r2, r3
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be4:	2b0f      	cmp	r3, #15
 8009be6:	d909      	bls.n	8009bfc <UART_SetConfig+0xc9c>
 8009be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bee:	d205      	bcs.n	8009bfc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	60da      	str	r2, [r3, #12]
 8009bfa:	e002      	b.n	8009c02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2200      	movs	r2, #0
 8009c16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009c1e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3748      	adds	r7, #72	@ 0x48
 8009c26:	46bd      	mov	sp, r7
 8009c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c2c:	03d09000 	.word	0x03d09000
 8009c30:	003d0900 	.word	0x003d0900
 8009c34:	0800e43c 	.word	0x0800e43c

08009c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c44:	f003 0308 	and.w	r3, r3, #8
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00a      	beq.n	8009c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c88:	f003 0302 	and.w	r3, r3, #2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00a      	beq.n	8009ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009caa:	f003 0304 	and.w	r3, r3, #4
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00a      	beq.n	8009cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	430a      	orrs	r2, r1
 8009cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ccc:	f003 0310 	and.w	r3, r3, #16
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00a      	beq.n	8009cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00a      	beq.n	8009d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d01a      	beq.n	8009d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d36:	d10a      	bne.n	8009d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00a      	beq.n	8009d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	605a      	str	r2, [r3, #4]
  }
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b098      	sub	sp, #96	@ 0x60
 8009d80:	af02      	add	r7, sp, #8
 8009d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d8c:	f7f9 f80c 	bl	8002da8 <HAL_GetTick>
 8009d90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 0308 	and.w	r3, r3, #8
 8009d9c:	2b08      	cmp	r3, #8
 8009d9e:	d12f      	bne.n	8009e00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009da0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009da8:	2200      	movs	r2, #0
 8009daa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f88e 	bl	8009ed0 <UART_WaitOnFlagUntilTimeout>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d022      	beq.n	8009e00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc2:	e853 3f00 	ldrex	r3, [r3]
 8009dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ddc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009de0:	e841 2300 	strex	r3, r2, [r1]
 8009de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e6      	bne.n	8009dba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2220      	movs	r2, #32
 8009df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e063      	b.n	8009ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0304 	and.w	r3, r3, #4
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	d149      	bne.n	8009ea2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e16:	2200      	movs	r2, #0
 8009e18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f857 	bl	8009ed0 <UART_WaitOnFlagUntilTimeout>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d03c      	beq.n	8009ea2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	623b      	str	r3, [r7, #32]
   return(result);
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e46:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e6      	bne.n	8009e28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3308      	adds	r3, #8
 8009e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	e853 3f00 	ldrex	r3, [r3]
 8009e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f023 0301 	bic.w	r3, r3, #1
 8009e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3308      	adds	r3, #8
 8009e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e7a:	61fa      	str	r2, [r7, #28]
 8009e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	69b9      	ldr	r1, [r7, #24]
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	e841 2300 	strex	r3, r2, [r1]
 8009e86:	617b      	str	r3, [r7, #20]
   return(result);
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1e5      	bne.n	8009e5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e012      	b.n	8009ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3758      	adds	r7, #88	@ 0x58
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	4613      	mov	r3, r2
 8009ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ee0:	e04f      	b.n	8009f82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee8:	d04b      	beq.n	8009f82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eea:	f7f8 ff5d 	bl	8002da8 <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d302      	bcc.n	8009f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	e04e      	b.n	8009fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d037      	beq.n	8009f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b80      	cmp	r3, #128	@ 0x80
 8009f16:	d034      	beq.n	8009f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2b40      	cmp	r3, #64	@ 0x40
 8009f1c:	d031      	beq.n	8009f82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d110      	bne.n	8009f4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2208      	movs	r2, #8
 8009f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f95b 	bl	800a1f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2208      	movs	r2, #8
 8009f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e029      	b.n	8009fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	69db      	ldr	r3, [r3, #28]
 8009f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f5c:	d111      	bne.n	8009f82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 f941 	bl	800a1f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2220      	movs	r2, #32
 8009f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e00f      	b.n	8009fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69da      	ldr	r2, [r3, #28]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	bf0c      	ite	eq
 8009f92:	2301      	moveq	r3, #1
 8009f94:	2300      	movne	r3, #0
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	461a      	mov	r2, r3
 8009f9a:	79fb      	ldrb	r3, [r7, #7]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d0a0      	beq.n	8009ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b0a3      	sub	sp, #140	@ 0x8c
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	88fa      	ldrh	r2, [r7, #6]
 8009fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	88fa      	ldrh	r2, [r7, #6]
 8009fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fde:	d10e      	bne.n	8009ffe <UART_Start_Receive_IT+0x52>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d105      	bne.n	8009ff4 <UART_Start_Receive_IT+0x48>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009fee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ff2:	e02d      	b.n	800a050 <UART_Start_Receive_IT+0xa4>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	22ff      	movs	r2, #255	@ 0xff
 8009ff8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ffc:	e028      	b.n	800a050 <UART_Start_Receive_IT+0xa4>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10d      	bne.n	800a022 <UART_Start_Receive_IT+0x76>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d104      	bne.n	800a018 <UART_Start_Receive_IT+0x6c>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	22ff      	movs	r2, #255	@ 0xff
 800a012:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a016:	e01b      	b.n	800a050 <UART_Start_Receive_IT+0xa4>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	227f      	movs	r2, #127	@ 0x7f
 800a01c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a020:	e016      	b.n	800a050 <UART_Start_Receive_IT+0xa4>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a02a:	d10d      	bne.n	800a048 <UART_Start_Receive_IT+0x9c>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <UART_Start_Receive_IT+0x92>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	227f      	movs	r2, #127	@ 0x7f
 800a038:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a03c:	e008      	b.n	800a050 <UART_Start_Receive_IT+0xa4>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	223f      	movs	r2, #63	@ 0x3f
 800a042:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a046:	e003      	b.n	800a050 <UART_Start_Receive_IT+0xa4>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2222      	movs	r2, #34	@ 0x22
 800a05c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3308      	adds	r3, #8
 800a066:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a068:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a06a:	e853 3f00 	ldrex	r3, [r3]
 800a06e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a070:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a072:	f043 0301 	orr.w	r3, r3, #1
 800a076:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3308      	adds	r3, #8
 800a080:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a084:	673a      	str	r2, [r7, #112]	@ 0x70
 800a086:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a08a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a092:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e3      	bne.n	800a060 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a09c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0a0:	d14f      	bne.n	800a142 <UART_Start_Receive_IT+0x196>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a0a8:	88fa      	ldrh	r2, [r7, #6]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d349      	bcc.n	800a142 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0b6:	d107      	bne.n	800a0c8 <UART_Start_Receive_IT+0x11c>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d103      	bne.n	800a0c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4a47      	ldr	r2, [pc, #284]	@ (800a1e0 <UART_Start_Receive_IT+0x234>)
 800a0c4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a0c6:	e002      	b.n	800a0ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	4a46      	ldr	r2, [pc, #280]	@ (800a1e4 <UART_Start_Receive_IT+0x238>)
 800a0cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d01a      	beq.n	800a10c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a0e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0fa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a0fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e4      	bne.n	800a0d6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3308      	adds	r3, #8
 800a112:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a116:	e853 3f00 	ldrex	r3, [r3]
 800a11a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a122:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3308      	adds	r3, #8
 800a12a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a12c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a12e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a130:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a132:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a134:	e841 2300 	strex	r3, r2, [r1]
 800a138:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a13a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e5      	bne.n	800a10c <UART_Start_Receive_IT+0x160>
 800a140:	e046      	b.n	800a1d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a14a:	d107      	bne.n	800a15c <UART_Start_Receive_IT+0x1b0>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d103      	bne.n	800a15c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	4a24      	ldr	r2, [pc, #144]	@ (800a1e8 <UART_Start_Receive_IT+0x23c>)
 800a158:	675a      	str	r2, [r3, #116]	@ 0x74
 800a15a:	e002      	b.n	800a162 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4a23      	ldr	r2, [pc, #140]	@ (800a1ec <UART_Start_Receive_IT+0x240>)
 800a160:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d019      	beq.n	800a19e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a17e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a188:	637b      	str	r3, [r7, #52]	@ 0x34
 800a18a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a18e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a190:	e841 2300 	strex	r3, r2, [r1]
 800a194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e6      	bne.n	800a16a <UART_Start_Receive_IT+0x1be>
 800a19c:	e018      	b.n	800a1d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	e853 3f00 	ldrex	r3, [r3]
 800a1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f043 0320 	orr.w	r3, r3, #32
 800a1b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1bc:	623b      	str	r3, [r7, #32]
 800a1be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	69f9      	ldr	r1, [r7, #28]
 800a1c2:	6a3a      	ldr	r2, [r7, #32]
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e6      	bne.n	800a19e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	378c      	adds	r7, #140	@ 0x8c
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	0800aa0d 	.word	0x0800aa0d
 800a1e4:	0800a6a9 	.word	0x0800a6a9
 800a1e8:	0800a4f1 	.word	0x0800a4f1
 800a1ec:	0800a339 	.word	0x0800a339

0800a1f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b095      	sub	sp, #84	@ 0x54
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a200:	e853 3f00 	ldrex	r3, [r3]
 800a204:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a20c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a216:	643b      	str	r3, [r7, #64]	@ 0x40
 800a218:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a21c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a21e:	e841 2300 	strex	r3, r2, [r1]
 800a222:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1e6      	bne.n	800a1f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3308      	adds	r3, #8
 800a230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	61fb      	str	r3, [r7, #28]
   return(result);
 800a23a:	69fa      	ldr	r2, [r7, #28]
 800a23c:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b8 <UART_EndRxTransfer+0xc8>)
 800a23e:	4013      	ands	r3, r2
 800a240:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3308      	adds	r3, #8
 800a248:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a24a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a24c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e5      	bne.n	800a22a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a262:	2b01      	cmp	r3, #1
 800a264:	d118      	bne.n	800a298 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	60bb      	str	r3, [r7, #8]
   return(result);
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	f023 0310 	bic.w	r3, r3, #16
 800a27a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a284:	61bb      	str	r3, [r7, #24]
 800a286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	6979      	ldr	r1, [r7, #20]
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	613b      	str	r3, [r7, #16]
   return(result);
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e6      	bne.n	800a266 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2220      	movs	r2, #32
 800a29c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a2ac:	bf00      	nop
 800a2ae:	3754      	adds	r7, #84	@ 0x54
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	effffffe 	.word	0xeffffffe

0800a2bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7fe fe2e 	bl	8008f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	e853 3f00 	ldrex	r3, [r3]
 800a2f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2fc:	61fb      	str	r3, [r7, #28]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	61bb      	str	r3, [r7, #24]
 800a308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30a:	6979      	ldr	r1, [r7, #20]
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	613b      	str	r3, [r7, #16]
   return(result);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1e6      	bne.n	800a2e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7fe fdf9 	bl	8008f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a32e:	bf00      	nop
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b09c      	sub	sp, #112	@ 0x70
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a346:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a350:	2b22      	cmp	r3, #34	@ 0x22
 800a352:	f040 80be 	bne.w	800a4d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a360:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a364:	b2d9      	uxtb	r1, r3
 800a366:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a370:	400a      	ands	r2, r1
 800a372:	b2d2      	uxtb	r2, r2
 800a374:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a386:	b29b      	uxth	r3, r3
 800a388:	3b01      	subs	r3, #1
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a398:	b29b      	uxth	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f040 80a1 	bne.w	800a4e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e6      	bne.n	800a3a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	3308      	adds	r3, #8
 800a3d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3dc:	e853 3f00 	ldrex	r3, [r3]
 800a3e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e4:	f023 0301 	bic.w	r3, r3, #1
 800a3e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a3f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800a3f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a3f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3fa:	e841 2300 	strex	r3, r2, [r1]
 800a3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1e5      	bne.n	800a3d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2220      	movs	r2, #32
 800a40a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a33      	ldr	r2, [pc, #204]	@ (800a4ec <UART_RxISR_8BIT+0x1b4>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d01f      	beq.n	800a464 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d018      	beq.n	800a464 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	623b      	str	r3, [r7, #32]
   return(result);
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a446:	663b      	str	r3, [r7, #96]	@ 0x60
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a450:	633b      	str	r3, [r7, #48]	@ 0x30
 800a452:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a458:	e841 2300 	strex	r3, r2, [r1]
 800a45c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e6      	bne.n	800a432 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d12e      	bne.n	800a4ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	e853 3f00 	ldrex	r3, [r3]
 800a47e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f023 0310 	bic.w	r3, r3, #16
 800a486:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	461a      	mov	r2, r3
 800a48e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a490:	61fb      	str	r3, [r7, #28]
 800a492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a494:	69b9      	ldr	r1, [r7, #24]
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	e841 2300 	strex	r3, r2, [r1]
 800a49c:	617b      	str	r3, [r7, #20]
   return(result);
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1e6      	bne.n	800a472 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	f003 0310 	and.w	r3, r3, #16
 800a4ae:	2b10      	cmp	r3, #16
 800a4b0:	d103      	bne.n	800a4ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2210      	movs	r2, #16
 800a4b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7fe fd40 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4c8:	e00b      	b.n	800a4e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7f6 fa3a 	bl	8000944 <HAL_UART_RxCpltCallback>
}
 800a4d0:	e007      	b.n	800a4e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	699a      	ldr	r2, [r3, #24]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f042 0208 	orr.w	r2, r2, #8
 800a4e0:	619a      	str	r2, [r3, #24]
}
 800a4e2:	bf00      	nop
 800a4e4:	3770      	adds	r7, #112	@ 0x70
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	58000c00 	.word	0x58000c00

0800a4f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b09c      	sub	sp, #112	@ 0x70
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a4fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a508:	2b22      	cmp	r3, #34	@ 0x22
 800a50a:	f040 80be 	bne.w	800a68a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a514:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a51c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a51e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a522:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a526:	4013      	ands	r3, r2
 800a528:	b29a      	uxth	r2, r3
 800a52a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a52c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a532:	1c9a      	adds	r2, r3, #2
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a53e:	b29b      	uxth	r3, r3
 800a540:	3b01      	subs	r3, #1
 800a542:	b29a      	uxth	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a550:	b29b      	uxth	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	f040 80a1 	bne.w	800a69a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a56c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a576:	657b      	str	r3, [r7, #84]	@ 0x54
 800a578:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a57c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a57e:	e841 2300 	strex	r3, r2, [r1]
 800a582:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1e6      	bne.n	800a558 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3308      	adds	r3, #8
 800a590:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a594:	e853 3f00 	ldrex	r3, [r3]
 800a598:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59c:	f023 0301 	bic.w	r3, r3, #1
 800a5a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5aa:	643a      	str	r2, [r7, #64]	@ 0x40
 800a5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5b2:	e841 2300 	strex	r3, r2, [r1]
 800a5b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1e5      	bne.n	800a58a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2220      	movs	r2, #32
 800a5c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a33      	ldr	r2, [pc, #204]	@ (800a6a4 <UART_RxISR_16BIT+0x1b4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d01f      	beq.n	800a61c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d018      	beq.n	800a61c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	461a      	mov	r2, r3
 800a606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a60a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a60e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e6      	bne.n	800a5ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a620:	2b01      	cmp	r3, #1
 800a622:	d12e      	bne.n	800a682 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	e853 3f00 	ldrex	r3, [r3]
 800a636:	60bb      	str	r3, [r7, #8]
   return(result);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f023 0310 	bic.w	r3, r3, #16
 800a63e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	461a      	mov	r2, r3
 800a646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a648:	61bb      	str	r3, [r7, #24]
 800a64a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64c:	6979      	ldr	r1, [r7, #20]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	e841 2300 	strex	r3, r2, [r1]
 800a654:	613b      	str	r3, [r7, #16]
   return(result);
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1e6      	bne.n	800a62a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	f003 0310 	and.w	r3, r3, #16
 800a666:	2b10      	cmp	r3, #16
 800a668:	d103      	bne.n	800a672 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2210      	movs	r2, #16
 800a670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7fe fc64 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a680:	e00b      	b.n	800a69a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7f6 f95e 	bl	8000944 <HAL_UART_RxCpltCallback>
}
 800a688:	e007      	b.n	800a69a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	699a      	ldr	r2, [r3, #24]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f042 0208 	orr.w	r2, r2, #8
 800a698:	619a      	str	r2, [r3, #24]
}
 800a69a:	bf00      	nop
 800a69c:	3770      	adds	r7, #112	@ 0x70
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	58000c00 	.word	0x58000c00

0800a6a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b0ac      	sub	sp, #176	@ 0xb0
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a6b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6de:	2b22      	cmp	r3, #34	@ 0x22
 800a6e0:	f040 8181 	bne.w	800a9e6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a6ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6ee:	e124      	b.n	800a93a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a6fe:	b2d9      	uxtb	r1, r3
 800a700:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a704:	b2da      	uxtb	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a70a:	400a      	ands	r2, r1
 800a70c:	b2d2      	uxtb	r2, r2
 800a70e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a720:	b29b      	uxth	r3, r3
 800a722:	3b01      	subs	r3, #1
 800a724:	b29a      	uxth	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d053      	beq.n	800a7ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d011      	beq.n	800a772 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a74e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00b      	beq.n	800a772 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2201      	movs	r2, #1
 800a760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a768:	f043 0201 	orr.w	r2, r3, #1
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d011      	beq.n	800a7a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a77e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2202      	movs	r2, #2
 800a790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a798:	f043 0204 	orr.w	r2, r3, #4
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7a6:	f003 0304 	and.w	r3, r3, #4
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d011      	beq.n	800a7d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a7ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00b      	beq.n	800a7d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2204      	movs	r2, #4
 800a7c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7c8:	f043 0202 	orr.w	r2, r3, #2
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d006      	beq.n	800a7ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7fe fba9 	bl	8008f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f040 80a1 	bne.w	800a93a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a80c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a81a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a81c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a820:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a822:	e841 2300 	strex	r3, r2, [r1]
 800a826:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e4      	bne.n	800a7f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3308      	adds	r3, #8
 800a834:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a83e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a840:	4b6f      	ldr	r3, [pc, #444]	@ (800aa00 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a842:	4013      	ands	r3, r2
 800a844:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3308      	adds	r3, #8
 800a84e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a852:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a854:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a856:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a858:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a85a:	e841 2300 	strex	r3, r2, [r1]
 800a85e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a860:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1e3      	bne.n	800a82e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2220      	movs	r2, #32
 800a86a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a61      	ldr	r2, [pc, #388]	@ (800aa04 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d021      	beq.n	800a8c8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d01a      	beq.n	800a8c8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a89a:	e853 3f00 	ldrex	r3, [r3]
 800a89e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a8a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a8ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8bc:	e841 2300 	strex	r3, r2, [r1]
 800a8c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a8c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1e4      	bne.n	800a892 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d130      	bne.n	800a932 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8de:	e853 3f00 	ldrex	r3, [r3]
 800a8e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e6:	f023 0310 	bic.w	r3, r3, #16
 800a8ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a900:	e841 2300 	strex	r3, r2, [r1]
 800a904:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e4      	bne.n	800a8d6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	f003 0310 	and.w	r3, r3, #16
 800a916:	2b10      	cmp	r3, #16
 800a918:	d103      	bne.n	800a922 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2210      	movs	r2, #16
 800a920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7fe fb0c 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a930:	e00e      	b.n	800a950 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7f6 f806 	bl	8000944 <HAL_UART_RxCpltCallback>
        break;
 800a938:	e00a      	b.n	800a950 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a93a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d006      	beq.n	800a950 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800a942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f47f aed0 	bne.w	800a6f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a956:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a95a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d049      	beq.n	800a9f6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a968:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d242      	bcs.n	800a9f6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3308      	adds	r3, #8
 800a976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a986:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3308      	adds	r3, #8
 800a990:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a994:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a99a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a99c:	e841 2300 	strex	r3, r2, [r1]
 800a9a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e3      	bne.n	800a970 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a17      	ldr	r2, [pc, #92]	@ (800aa08 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a9ac:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	e853 3f00 	ldrex	r3, [r3]
 800a9ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f043 0320 	orr.w	r3, r3, #32
 800a9c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a9d0:	61bb      	str	r3, [r7, #24]
 800a9d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	6979      	ldr	r1, [r7, #20]
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	e841 2300 	strex	r3, r2, [r1]
 800a9dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e4      	bne.n	800a9ae <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9e4:	e007      	b.n	800a9f6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	699a      	ldr	r2, [r3, #24]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f042 0208 	orr.w	r2, r2, #8
 800a9f4:	619a      	str	r2, [r3, #24]
}
 800a9f6:	bf00      	nop
 800a9f8:	37b0      	adds	r7, #176	@ 0xb0
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	effffffe 	.word	0xeffffffe
 800aa04:	58000c00 	.word	0x58000c00
 800aa08:	0800a339 	.word	0x0800a339

0800aa0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b0ae      	sub	sp, #184	@ 0xb8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aa1a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa42:	2b22      	cmp	r3, #34	@ 0x22
 800aa44:	f040 8185 	bne.w	800ad52 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa52:	e128      	b.n	800aca6 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800aa66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800aa6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800aa6e:	4013      	ands	r3, r2
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa7c:	1c9a      	adds	r2, r3, #2
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aa9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d053      	beq.n	800ab52 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aaaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d011      	beq.n	800aada <UART_RxISR_16BIT_FIFOEN+0xce>
 800aab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aaba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00b      	beq.n	800aada <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2201      	movs	r2, #1
 800aac8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aad0:	f043 0201 	orr.w	r2, r3, #1
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aade:	f003 0302 	and.w	r3, r3, #2
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d011      	beq.n	800ab0a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00b      	beq.n	800ab0a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab00:	f043 0204 	orr.w	r2, r3, #4
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d011      	beq.n	800ab3a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ab16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00b      	beq.n	800ab3a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2204      	movs	r2, #4
 800ab28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab30:	f043 0202 	orr.w	r2, r3, #2
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d006      	beq.n	800ab52 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7fe f9f5 	bl	8008f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f040 80a3 	bne.w	800aca6 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ab6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab86:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ab94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e2      	bne.n	800ab60 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800abaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800abac:	4b6f      	ldr	r3, [pc, #444]	@ (800ad6c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800abae:	4013      	ands	r3, r2
 800abb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3308      	adds	r3, #8
 800abba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800abbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800abc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800abc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800abc6:	e841 2300 	strex	r3, r2, [r1]
 800abca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800abcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1e3      	bne.n	800ab9a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2220      	movs	r2, #32
 800abd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a61      	ldr	r2, [pc, #388]	@ (800ad70 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d021      	beq.n	800ac34 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d01a      	beq.n	800ac34 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ac20:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac22:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e4      	bne.n	800abfe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d130      	bne.n	800ac9e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4a:	e853 3f00 	ldrex	r3, [r3]
 800ac4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac52:	f023 0310 	bic.w	r3, r3, #16
 800ac56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac6c:	e841 2300 	strex	r3, r2, [r1]
 800ac70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e4      	bne.n	800ac42 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	f003 0310 	and.w	r3, r3, #16
 800ac82:	2b10      	cmp	r3, #16
 800ac84:	d103      	bne.n	800ac8e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2210      	movs	r2, #16
 800ac8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7fe f956 	bl	8008f48 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ac9c:	e00e      	b.n	800acbc <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7f5 fe50 	bl	8000944 <HAL_UART_RxCpltCallback>
        break;
 800aca4:	e00a      	b.n	800acbc <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aca6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d006      	beq.n	800acbc <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800acae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800acb2:	f003 0320 	and.w	r3, r3, #32
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f47f aecc 	bne.w	800aa54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acc2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800acc6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800acca:	2b00      	cmp	r3, #0
 800accc:	d049      	beq.n	800ad62 <UART_RxISR_16BIT_FIFOEN+0x356>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800acd4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800acd8:	429a      	cmp	r2, r3
 800acda:	d242      	bcs.n	800ad62 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3308      	adds	r3, #8
 800ace2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	e853 3f00 	ldrex	r3, [r3]
 800acea:	623b      	str	r3, [r7, #32]
   return(result);
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800acf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	3308      	adds	r3, #8
 800acfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ad00:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e3      	bne.n	800acdc <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a17      	ldr	r2, [pc, #92]	@ (800ad74 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800ad18:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	e853 3f00 	ldrex	r3, [r3]
 800ad26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f043 0320 	orr.w	r3, r3, #32
 800ad2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad3c:	61fb      	str	r3, [r7, #28]
 800ad3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	69b9      	ldr	r1, [r7, #24]
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	617b      	str	r3, [r7, #20]
   return(result);
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e4      	bne.n	800ad1a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad50:	e007      	b.n	800ad62 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	699a      	ldr	r2, [r3, #24]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f042 0208 	orr.w	r2, r2, #8
 800ad60:	619a      	str	r2, [r3, #24]
}
 800ad62:	bf00      	nop
 800ad64:	37b8      	adds	r7, #184	@ 0xb8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	effffffe 	.word	0xeffffffe
 800ad70:	58000c00 	.word	0x58000c00
 800ad74:	0800a4f1 	.word	0x0800a4f1

0800ad78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d101      	bne.n	800adca <HAL_UARTEx_DisableFifoMode+0x16>
 800adc6:	2302      	movs	r3, #2
 800adc8:	e027      	b.n	800ae1a <HAL_UARTEx_DisableFifoMode+0x66>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2224      	movs	r2, #36	@ 0x24
 800add6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f022 0201 	bic.w	r2, r2, #1
 800adf0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800adf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2220      	movs	r2, #32
 800ae0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b084      	sub	sp, #16
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d101      	bne.n	800ae3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e02d      	b.n	800ae9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2224      	movs	r2, #36	@ 0x24
 800ae4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f022 0201 	bic.w	r2, r2, #1
 800ae64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f850 	bl	800af20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2220      	movs	r2, #32
 800ae8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d101      	bne.n	800aeba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e02d      	b.n	800af16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2224      	movs	r2, #36	@ 0x24
 800aec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 0201 	bic.w	r2, r2, #1
 800aee0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	683a      	ldr	r2, [r7, #0]
 800aef2:	430a      	orrs	r2, r1
 800aef4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f812 	bl	800af20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2220      	movs	r2, #32
 800af08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d108      	bne.n	800af42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af40:	e031      	b.n	800afa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af42:	2310      	movs	r3, #16
 800af44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af46:	2310      	movs	r3, #16
 800af48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	0e5b      	lsrs	r3, r3, #25
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 0307 	and.w	r3, r3, #7
 800af58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	0f5b      	lsrs	r3, r3, #29
 800af62:	b2db      	uxtb	r3, r3
 800af64:	f003 0307 	and.w	r3, r3, #7
 800af68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
 800af6c:	7b3a      	ldrb	r2, [r7, #12]
 800af6e:	4911      	ldr	r1, [pc, #68]	@ (800afb4 <UARTEx_SetNbDataToProcess+0x94>)
 800af70:	5c8a      	ldrb	r2, [r1, r2]
 800af72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af76:	7b3a      	ldrb	r2, [r7, #12]
 800af78:	490f      	ldr	r1, [pc, #60]	@ (800afb8 <UARTEx_SetNbDataToProcess+0x98>)
 800af7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af80:	b29a      	uxth	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	7b7a      	ldrb	r2, [r7, #13]
 800af8c:	4909      	ldr	r1, [pc, #36]	@ (800afb4 <UARTEx_SetNbDataToProcess+0x94>)
 800af8e:	5c8a      	ldrb	r2, [r1, r2]
 800af90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af94:	7b7a      	ldrb	r2, [r7, #13]
 800af96:	4908      	ldr	r1, [pc, #32]	@ (800afb8 <UARTEx_SetNbDataToProcess+0x98>)
 800af98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800afa6:	bf00      	nop
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	0800e454 	.word	0x0800e454
 800afb8:	0800e45c 	.word	0x0800e45c

0800afbc <__cvt>:
 800afbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afbe:	ed2d 8b02 	vpush	{d8}
 800afc2:	eeb0 8b40 	vmov.f64	d8, d0
 800afc6:	b085      	sub	sp, #20
 800afc8:	4617      	mov	r7, r2
 800afca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800afcc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800afce:	ee18 2a90 	vmov	r2, s17
 800afd2:	f025 0520 	bic.w	r5, r5, #32
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	bfb6      	itet	lt
 800afda:	222d      	movlt	r2, #45	@ 0x2d
 800afdc:	2200      	movge	r2, #0
 800afde:	eeb1 8b40 	vneglt.f64	d8, d0
 800afe2:	2d46      	cmp	r5, #70	@ 0x46
 800afe4:	460c      	mov	r4, r1
 800afe6:	701a      	strb	r2, [r3, #0]
 800afe8:	d004      	beq.n	800aff4 <__cvt+0x38>
 800afea:	2d45      	cmp	r5, #69	@ 0x45
 800afec:	d100      	bne.n	800aff0 <__cvt+0x34>
 800afee:	3401      	adds	r4, #1
 800aff0:	2102      	movs	r1, #2
 800aff2:	e000      	b.n	800aff6 <__cvt+0x3a>
 800aff4:	2103      	movs	r1, #3
 800aff6:	ab03      	add	r3, sp, #12
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	ab02      	add	r3, sp, #8
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	4622      	mov	r2, r4
 800b000:	4633      	mov	r3, r6
 800b002:	eeb0 0b48 	vmov.f64	d0, d8
 800b006:	f000 ff57 	bl	800beb8 <_dtoa_r>
 800b00a:	2d47      	cmp	r5, #71	@ 0x47
 800b00c:	d114      	bne.n	800b038 <__cvt+0x7c>
 800b00e:	07fb      	lsls	r3, r7, #31
 800b010:	d50a      	bpl.n	800b028 <__cvt+0x6c>
 800b012:	1902      	adds	r2, r0, r4
 800b014:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b01c:	bf08      	it	eq
 800b01e:	9203      	streq	r2, [sp, #12]
 800b020:	2130      	movs	r1, #48	@ 0x30
 800b022:	9b03      	ldr	r3, [sp, #12]
 800b024:	4293      	cmp	r3, r2
 800b026:	d319      	bcc.n	800b05c <__cvt+0xa0>
 800b028:	9b03      	ldr	r3, [sp, #12]
 800b02a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b02c:	1a1b      	subs	r3, r3, r0
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	b005      	add	sp, #20
 800b032:	ecbd 8b02 	vpop	{d8}
 800b036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b038:	2d46      	cmp	r5, #70	@ 0x46
 800b03a:	eb00 0204 	add.w	r2, r0, r4
 800b03e:	d1e9      	bne.n	800b014 <__cvt+0x58>
 800b040:	7803      	ldrb	r3, [r0, #0]
 800b042:	2b30      	cmp	r3, #48	@ 0x30
 800b044:	d107      	bne.n	800b056 <__cvt+0x9a>
 800b046:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b04e:	bf1c      	itt	ne
 800b050:	f1c4 0401 	rsbne	r4, r4, #1
 800b054:	6034      	strne	r4, [r6, #0]
 800b056:	6833      	ldr	r3, [r6, #0]
 800b058:	441a      	add	r2, r3
 800b05a:	e7db      	b.n	800b014 <__cvt+0x58>
 800b05c:	1c5c      	adds	r4, r3, #1
 800b05e:	9403      	str	r4, [sp, #12]
 800b060:	7019      	strb	r1, [r3, #0]
 800b062:	e7de      	b.n	800b022 <__cvt+0x66>

0800b064 <__exponent>:
 800b064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b066:	2900      	cmp	r1, #0
 800b068:	bfba      	itte	lt
 800b06a:	4249      	neglt	r1, r1
 800b06c:	232d      	movlt	r3, #45	@ 0x2d
 800b06e:	232b      	movge	r3, #43	@ 0x2b
 800b070:	2909      	cmp	r1, #9
 800b072:	7002      	strb	r2, [r0, #0]
 800b074:	7043      	strb	r3, [r0, #1]
 800b076:	dd29      	ble.n	800b0cc <__exponent+0x68>
 800b078:	f10d 0307 	add.w	r3, sp, #7
 800b07c:	461d      	mov	r5, r3
 800b07e:	270a      	movs	r7, #10
 800b080:	461a      	mov	r2, r3
 800b082:	fbb1 f6f7 	udiv	r6, r1, r7
 800b086:	fb07 1416 	mls	r4, r7, r6, r1
 800b08a:	3430      	adds	r4, #48	@ 0x30
 800b08c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b090:	460c      	mov	r4, r1
 800b092:	2c63      	cmp	r4, #99	@ 0x63
 800b094:	f103 33ff 	add.w	r3, r3, #4294967295
 800b098:	4631      	mov	r1, r6
 800b09a:	dcf1      	bgt.n	800b080 <__exponent+0x1c>
 800b09c:	3130      	adds	r1, #48	@ 0x30
 800b09e:	1e94      	subs	r4, r2, #2
 800b0a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b0a4:	1c41      	adds	r1, r0, #1
 800b0a6:	4623      	mov	r3, r4
 800b0a8:	42ab      	cmp	r3, r5
 800b0aa:	d30a      	bcc.n	800b0c2 <__exponent+0x5e>
 800b0ac:	f10d 0309 	add.w	r3, sp, #9
 800b0b0:	1a9b      	subs	r3, r3, r2
 800b0b2:	42ac      	cmp	r4, r5
 800b0b4:	bf88      	it	hi
 800b0b6:	2300      	movhi	r3, #0
 800b0b8:	3302      	adds	r3, #2
 800b0ba:	4403      	add	r3, r0
 800b0bc:	1a18      	subs	r0, r3, r0
 800b0be:	b003      	add	sp, #12
 800b0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b0c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b0ca:	e7ed      	b.n	800b0a8 <__exponent+0x44>
 800b0cc:	2330      	movs	r3, #48	@ 0x30
 800b0ce:	3130      	adds	r1, #48	@ 0x30
 800b0d0:	7083      	strb	r3, [r0, #2]
 800b0d2:	70c1      	strb	r1, [r0, #3]
 800b0d4:	1d03      	adds	r3, r0, #4
 800b0d6:	e7f1      	b.n	800b0bc <__exponent+0x58>

0800b0d8 <_printf_float>:
 800b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0dc:	b08d      	sub	sp, #52	@ 0x34
 800b0de:	460c      	mov	r4, r1
 800b0e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b0e4:	4616      	mov	r6, r2
 800b0e6:	461f      	mov	r7, r3
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	f000 fdd7 	bl	800bc9c <_localeconv_r>
 800b0ee:	f8d0 b000 	ldr.w	fp, [r0]
 800b0f2:	4658      	mov	r0, fp
 800b0f4:	f7f5 f96c 	bl	80003d0 <strlen>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0fc:	f8d8 3000 	ldr.w	r3, [r8]
 800b100:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b104:	6822      	ldr	r2, [r4, #0]
 800b106:	9005      	str	r0, [sp, #20]
 800b108:	3307      	adds	r3, #7
 800b10a:	f023 0307 	bic.w	r3, r3, #7
 800b10e:	f103 0108 	add.w	r1, r3, #8
 800b112:	f8c8 1000 	str.w	r1, [r8]
 800b116:	ed93 0b00 	vldr	d0, [r3]
 800b11a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b378 <_printf_float+0x2a0>
 800b11e:	eeb0 7bc0 	vabs.f64	d7, d0
 800b122:	eeb4 7b46 	vcmp.f64	d7, d6
 800b126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b12e:	dd24      	ble.n	800b17a <_printf_float+0xa2>
 800b130:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b138:	d502      	bpl.n	800b140 <_printf_float+0x68>
 800b13a:	232d      	movs	r3, #45	@ 0x2d
 800b13c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b140:	498f      	ldr	r1, [pc, #572]	@ (800b380 <_printf_float+0x2a8>)
 800b142:	4b90      	ldr	r3, [pc, #576]	@ (800b384 <_printf_float+0x2ac>)
 800b144:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b148:	bf8c      	ite	hi
 800b14a:	4688      	movhi	r8, r1
 800b14c:	4698      	movls	r8, r3
 800b14e:	f022 0204 	bic.w	r2, r2, #4
 800b152:	2303      	movs	r3, #3
 800b154:	6123      	str	r3, [r4, #16]
 800b156:	6022      	str	r2, [r4, #0]
 800b158:	f04f 0a00 	mov.w	sl, #0
 800b15c:	9700      	str	r7, [sp, #0]
 800b15e:	4633      	mov	r3, r6
 800b160:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b162:	4621      	mov	r1, r4
 800b164:	4628      	mov	r0, r5
 800b166:	f000 f9d1 	bl	800b50c <_printf_common>
 800b16a:	3001      	adds	r0, #1
 800b16c:	f040 8089 	bne.w	800b282 <_printf_float+0x1aa>
 800b170:	f04f 30ff 	mov.w	r0, #4294967295
 800b174:	b00d      	add	sp, #52	@ 0x34
 800b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17a:	eeb4 0b40 	vcmp.f64	d0, d0
 800b17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b182:	d709      	bvc.n	800b198 <_printf_float+0xc0>
 800b184:	ee10 3a90 	vmov	r3, s1
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bfbc      	itt	lt
 800b18c:	232d      	movlt	r3, #45	@ 0x2d
 800b18e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b192:	497d      	ldr	r1, [pc, #500]	@ (800b388 <_printf_float+0x2b0>)
 800b194:	4b7d      	ldr	r3, [pc, #500]	@ (800b38c <_printf_float+0x2b4>)
 800b196:	e7d5      	b.n	800b144 <_printf_float+0x6c>
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	1c59      	adds	r1, r3, #1
 800b19c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b1a0:	d139      	bne.n	800b216 <_printf_float+0x13e>
 800b1a2:	2306      	movs	r3, #6
 800b1a4:	6063      	str	r3, [r4, #4]
 800b1a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	6022      	str	r2, [r4, #0]
 800b1ae:	9303      	str	r3, [sp, #12]
 800b1b0:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b1b6:	ab09      	add	r3, sp, #36	@ 0x24
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	6861      	ldr	r1, [r4, #4]
 800b1bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	f7ff fefb 	bl	800afbc <__cvt>
 800b1c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b1ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1cc:	4680      	mov	r8, r0
 800b1ce:	d129      	bne.n	800b224 <_printf_float+0x14c>
 800b1d0:	1cc8      	adds	r0, r1, #3
 800b1d2:	db02      	blt.n	800b1da <_printf_float+0x102>
 800b1d4:	6863      	ldr	r3, [r4, #4]
 800b1d6:	4299      	cmp	r1, r3
 800b1d8:	dd41      	ble.n	800b25e <_printf_float+0x186>
 800b1da:	f1a9 0902 	sub.w	r9, r9, #2
 800b1de:	fa5f f989 	uxtb.w	r9, r9
 800b1e2:	3901      	subs	r1, #1
 800b1e4:	464a      	mov	r2, r9
 800b1e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b1ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1ec:	f7ff ff3a 	bl	800b064 <__exponent>
 800b1f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1f2:	1813      	adds	r3, r2, r0
 800b1f4:	2a01      	cmp	r2, #1
 800b1f6:	4682      	mov	sl, r0
 800b1f8:	6123      	str	r3, [r4, #16]
 800b1fa:	dc02      	bgt.n	800b202 <_printf_float+0x12a>
 800b1fc:	6822      	ldr	r2, [r4, #0]
 800b1fe:	07d2      	lsls	r2, r2, #31
 800b200:	d501      	bpl.n	800b206 <_printf_float+0x12e>
 800b202:	3301      	adds	r3, #1
 800b204:	6123      	str	r3, [r4, #16]
 800b206:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0a6      	beq.n	800b15c <_printf_float+0x84>
 800b20e:	232d      	movs	r3, #45	@ 0x2d
 800b210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b214:	e7a2      	b.n	800b15c <_printf_float+0x84>
 800b216:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b21a:	d1c4      	bne.n	800b1a6 <_printf_float+0xce>
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1c2      	bne.n	800b1a6 <_printf_float+0xce>
 800b220:	2301      	movs	r3, #1
 800b222:	e7bf      	b.n	800b1a4 <_printf_float+0xcc>
 800b224:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b228:	d9db      	bls.n	800b1e2 <_printf_float+0x10a>
 800b22a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b22e:	d118      	bne.n	800b262 <_printf_float+0x18a>
 800b230:	2900      	cmp	r1, #0
 800b232:	6863      	ldr	r3, [r4, #4]
 800b234:	dd0b      	ble.n	800b24e <_printf_float+0x176>
 800b236:	6121      	str	r1, [r4, #16]
 800b238:	b913      	cbnz	r3, 800b240 <_printf_float+0x168>
 800b23a:	6822      	ldr	r2, [r4, #0]
 800b23c:	07d0      	lsls	r0, r2, #31
 800b23e:	d502      	bpl.n	800b246 <_printf_float+0x16e>
 800b240:	3301      	adds	r3, #1
 800b242:	440b      	add	r3, r1
 800b244:	6123      	str	r3, [r4, #16]
 800b246:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b248:	f04f 0a00 	mov.w	sl, #0
 800b24c:	e7db      	b.n	800b206 <_printf_float+0x12e>
 800b24e:	b913      	cbnz	r3, 800b256 <_printf_float+0x17e>
 800b250:	6822      	ldr	r2, [r4, #0]
 800b252:	07d2      	lsls	r2, r2, #31
 800b254:	d501      	bpl.n	800b25a <_printf_float+0x182>
 800b256:	3302      	adds	r3, #2
 800b258:	e7f4      	b.n	800b244 <_printf_float+0x16c>
 800b25a:	2301      	movs	r3, #1
 800b25c:	e7f2      	b.n	800b244 <_printf_float+0x16c>
 800b25e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b264:	4299      	cmp	r1, r3
 800b266:	db05      	blt.n	800b274 <_printf_float+0x19c>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	6121      	str	r1, [r4, #16]
 800b26c:	07d8      	lsls	r0, r3, #31
 800b26e:	d5ea      	bpl.n	800b246 <_printf_float+0x16e>
 800b270:	1c4b      	adds	r3, r1, #1
 800b272:	e7e7      	b.n	800b244 <_printf_float+0x16c>
 800b274:	2900      	cmp	r1, #0
 800b276:	bfd4      	ite	le
 800b278:	f1c1 0202 	rsble	r2, r1, #2
 800b27c:	2201      	movgt	r2, #1
 800b27e:	4413      	add	r3, r2
 800b280:	e7e0      	b.n	800b244 <_printf_float+0x16c>
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	055a      	lsls	r2, r3, #21
 800b286:	d407      	bmi.n	800b298 <_printf_float+0x1c0>
 800b288:	6923      	ldr	r3, [r4, #16]
 800b28a:	4642      	mov	r2, r8
 800b28c:	4631      	mov	r1, r6
 800b28e:	4628      	mov	r0, r5
 800b290:	47b8      	blx	r7
 800b292:	3001      	adds	r0, #1
 800b294:	d12a      	bne.n	800b2ec <_printf_float+0x214>
 800b296:	e76b      	b.n	800b170 <_printf_float+0x98>
 800b298:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b29c:	f240 80e0 	bls.w	800b460 <_printf_float+0x388>
 800b2a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b2a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ac:	d133      	bne.n	800b316 <_printf_float+0x23e>
 800b2ae:	4a38      	ldr	r2, [pc, #224]	@ (800b390 <_printf_float+0x2b8>)
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b8      	blx	r7
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	f43f af59 	beq.w	800b170 <_printf_float+0x98>
 800b2be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b2c2:	4543      	cmp	r3, r8
 800b2c4:	db02      	blt.n	800b2cc <_printf_float+0x1f4>
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	07d8      	lsls	r0, r3, #31
 800b2ca:	d50f      	bpl.n	800b2ec <_printf_float+0x214>
 800b2cc:	9b05      	ldr	r3, [sp, #20]
 800b2ce:	465a      	mov	r2, fp
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b8      	blx	r7
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	f43f af4a 	beq.w	800b170 <_printf_float+0x98>
 800b2dc:	f04f 0900 	mov.w	r9, #0
 800b2e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2e4:	f104 0a1a 	add.w	sl, r4, #26
 800b2e8:	45c8      	cmp	r8, r9
 800b2ea:	dc09      	bgt.n	800b300 <_printf_float+0x228>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	079b      	lsls	r3, r3, #30
 800b2f0:	f100 8107 	bmi.w	800b502 <_printf_float+0x42a>
 800b2f4:	68e0      	ldr	r0, [r4, #12]
 800b2f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2f8:	4298      	cmp	r0, r3
 800b2fa:	bfb8      	it	lt
 800b2fc:	4618      	movlt	r0, r3
 800b2fe:	e739      	b.n	800b174 <_printf_float+0x9c>
 800b300:	2301      	movs	r3, #1
 800b302:	4652      	mov	r2, sl
 800b304:	4631      	mov	r1, r6
 800b306:	4628      	mov	r0, r5
 800b308:	47b8      	blx	r7
 800b30a:	3001      	adds	r0, #1
 800b30c:	f43f af30 	beq.w	800b170 <_printf_float+0x98>
 800b310:	f109 0901 	add.w	r9, r9, #1
 800b314:	e7e8      	b.n	800b2e8 <_printf_float+0x210>
 800b316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b318:	2b00      	cmp	r3, #0
 800b31a:	dc3b      	bgt.n	800b394 <_printf_float+0x2bc>
 800b31c:	4a1c      	ldr	r2, [pc, #112]	@ (800b390 <_printf_float+0x2b8>)
 800b31e:	2301      	movs	r3, #1
 800b320:	4631      	mov	r1, r6
 800b322:	4628      	mov	r0, r5
 800b324:	47b8      	blx	r7
 800b326:	3001      	adds	r0, #1
 800b328:	f43f af22 	beq.w	800b170 <_printf_float+0x98>
 800b32c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b330:	ea59 0303 	orrs.w	r3, r9, r3
 800b334:	d102      	bne.n	800b33c <_printf_float+0x264>
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	07d9      	lsls	r1, r3, #31
 800b33a:	d5d7      	bpl.n	800b2ec <_printf_float+0x214>
 800b33c:	9b05      	ldr	r3, [sp, #20]
 800b33e:	465a      	mov	r2, fp
 800b340:	4631      	mov	r1, r6
 800b342:	4628      	mov	r0, r5
 800b344:	47b8      	blx	r7
 800b346:	3001      	adds	r0, #1
 800b348:	f43f af12 	beq.w	800b170 <_printf_float+0x98>
 800b34c:	f04f 0a00 	mov.w	sl, #0
 800b350:	f104 0b1a 	add.w	fp, r4, #26
 800b354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b356:	425b      	negs	r3, r3
 800b358:	4553      	cmp	r3, sl
 800b35a:	dc01      	bgt.n	800b360 <_printf_float+0x288>
 800b35c:	464b      	mov	r3, r9
 800b35e:	e794      	b.n	800b28a <_printf_float+0x1b2>
 800b360:	2301      	movs	r3, #1
 800b362:	465a      	mov	r2, fp
 800b364:	4631      	mov	r1, r6
 800b366:	4628      	mov	r0, r5
 800b368:	47b8      	blx	r7
 800b36a:	3001      	adds	r0, #1
 800b36c:	f43f af00 	beq.w	800b170 <_printf_float+0x98>
 800b370:	f10a 0a01 	add.w	sl, sl, #1
 800b374:	e7ee      	b.n	800b354 <_printf_float+0x27c>
 800b376:	bf00      	nop
 800b378:	ffffffff 	.word	0xffffffff
 800b37c:	7fefffff 	.word	0x7fefffff
 800b380:	0800e468 	.word	0x0800e468
 800b384:	0800e464 	.word	0x0800e464
 800b388:	0800e470 	.word	0x0800e470
 800b38c:	0800e46c 	.word	0x0800e46c
 800b390:	0800e474 	.word	0x0800e474
 800b394:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b396:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b39a:	4553      	cmp	r3, sl
 800b39c:	bfa8      	it	ge
 800b39e:	4653      	movge	r3, sl
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	4699      	mov	r9, r3
 800b3a4:	dc37      	bgt.n	800b416 <_printf_float+0x33e>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	9307      	str	r3, [sp, #28]
 800b3aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ae:	f104 021a 	add.w	r2, r4, #26
 800b3b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3b4:	9907      	ldr	r1, [sp, #28]
 800b3b6:	9306      	str	r3, [sp, #24]
 800b3b8:	eba3 0309 	sub.w	r3, r3, r9
 800b3bc:	428b      	cmp	r3, r1
 800b3be:	dc31      	bgt.n	800b424 <_printf_float+0x34c>
 800b3c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c2:	459a      	cmp	sl, r3
 800b3c4:	dc3b      	bgt.n	800b43e <_printf_float+0x366>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	07da      	lsls	r2, r3, #31
 800b3ca:	d438      	bmi.n	800b43e <_printf_float+0x366>
 800b3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ce:	ebaa 0903 	sub.w	r9, sl, r3
 800b3d2:	9b06      	ldr	r3, [sp, #24]
 800b3d4:	ebaa 0303 	sub.w	r3, sl, r3
 800b3d8:	4599      	cmp	r9, r3
 800b3da:	bfa8      	it	ge
 800b3dc:	4699      	movge	r9, r3
 800b3de:	f1b9 0f00 	cmp.w	r9, #0
 800b3e2:	dc34      	bgt.n	800b44e <_printf_float+0x376>
 800b3e4:	f04f 0800 	mov.w	r8, #0
 800b3e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ec:	f104 0b1a 	add.w	fp, r4, #26
 800b3f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3f2:	ebaa 0303 	sub.w	r3, sl, r3
 800b3f6:	eba3 0309 	sub.w	r3, r3, r9
 800b3fa:	4543      	cmp	r3, r8
 800b3fc:	f77f af76 	ble.w	800b2ec <_printf_float+0x214>
 800b400:	2301      	movs	r3, #1
 800b402:	465a      	mov	r2, fp
 800b404:	4631      	mov	r1, r6
 800b406:	4628      	mov	r0, r5
 800b408:	47b8      	blx	r7
 800b40a:	3001      	adds	r0, #1
 800b40c:	f43f aeb0 	beq.w	800b170 <_printf_float+0x98>
 800b410:	f108 0801 	add.w	r8, r8, #1
 800b414:	e7ec      	b.n	800b3f0 <_printf_float+0x318>
 800b416:	4642      	mov	r2, r8
 800b418:	4631      	mov	r1, r6
 800b41a:	4628      	mov	r0, r5
 800b41c:	47b8      	blx	r7
 800b41e:	3001      	adds	r0, #1
 800b420:	d1c1      	bne.n	800b3a6 <_printf_float+0x2ce>
 800b422:	e6a5      	b.n	800b170 <_printf_float+0x98>
 800b424:	2301      	movs	r3, #1
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	9206      	str	r2, [sp, #24]
 800b42c:	47b8      	blx	r7
 800b42e:	3001      	adds	r0, #1
 800b430:	f43f ae9e 	beq.w	800b170 <_printf_float+0x98>
 800b434:	9b07      	ldr	r3, [sp, #28]
 800b436:	9a06      	ldr	r2, [sp, #24]
 800b438:	3301      	adds	r3, #1
 800b43a:	9307      	str	r3, [sp, #28]
 800b43c:	e7b9      	b.n	800b3b2 <_printf_float+0x2da>
 800b43e:	9b05      	ldr	r3, [sp, #20]
 800b440:	465a      	mov	r2, fp
 800b442:	4631      	mov	r1, r6
 800b444:	4628      	mov	r0, r5
 800b446:	47b8      	blx	r7
 800b448:	3001      	adds	r0, #1
 800b44a:	d1bf      	bne.n	800b3cc <_printf_float+0x2f4>
 800b44c:	e690      	b.n	800b170 <_printf_float+0x98>
 800b44e:	9a06      	ldr	r2, [sp, #24]
 800b450:	464b      	mov	r3, r9
 800b452:	4442      	add	r2, r8
 800b454:	4631      	mov	r1, r6
 800b456:	4628      	mov	r0, r5
 800b458:	47b8      	blx	r7
 800b45a:	3001      	adds	r0, #1
 800b45c:	d1c2      	bne.n	800b3e4 <_printf_float+0x30c>
 800b45e:	e687      	b.n	800b170 <_printf_float+0x98>
 800b460:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b464:	f1b9 0f01 	cmp.w	r9, #1
 800b468:	dc01      	bgt.n	800b46e <_printf_float+0x396>
 800b46a:	07db      	lsls	r3, r3, #31
 800b46c:	d536      	bpl.n	800b4dc <_printf_float+0x404>
 800b46e:	2301      	movs	r3, #1
 800b470:	4642      	mov	r2, r8
 800b472:	4631      	mov	r1, r6
 800b474:	4628      	mov	r0, r5
 800b476:	47b8      	blx	r7
 800b478:	3001      	adds	r0, #1
 800b47a:	f43f ae79 	beq.w	800b170 <_printf_float+0x98>
 800b47e:	9b05      	ldr	r3, [sp, #20]
 800b480:	465a      	mov	r2, fp
 800b482:	4631      	mov	r1, r6
 800b484:	4628      	mov	r0, r5
 800b486:	47b8      	blx	r7
 800b488:	3001      	adds	r0, #1
 800b48a:	f43f ae71 	beq.w	800b170 <_printf_float+0x98>
 800b48e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b492:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b49e:	d018      	beq.n	800b4d2 <_printf_float+0x3fa>
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	f108 0201 	add.w	r2, r8, #1
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	47b8      	blx	r7
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d10c      	bne.n	800b4ca <_printf_float+0x3f2>
 800b4b0:	e65e      	b.n	800b170 <_printf_float+0x98>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	465a      	mov	r2, fp
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b8      	blx	r7
 800b4bc:	3001      	adds	r0, #1
 800b4be:	f43f ae57 	beq.w	800b170 <_printf_float+0x98>
 800b4c2:	f108 0801 	add.w	r8, r8, #1
 800b4c6:	45c8      	cmp	r8, r9
 800b4c8:	dbf3      	blt.n	800b4b2 <_printf_float+0x3da>
 800b4ca:	4653      	mov	r3, sl
 800b4cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b4d0:	e6dc      	b.n	800b28c <_printf_float+0x1b4>
 800b4d2:	f04f 0800 	mov.w	r8, #0
 800b4d6:	f104 0b1a 	add.w	fp, r4, #26
 800b4da:	e7f4      	b.n	800b4c6 <_printf_float+0x3ee>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	4642      	mov	r2, r8
 800b4e0:	e7e1      	b.n	800b4a6 <_printf_float+0x3ce>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	464a      	mov	r2, r9
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f43f ae3f 	beq.w	800b170 <_printf_float+0x98>
 800b4f2:	f108 0801 	add.w	r8, r8, #1
 800b4f6:	68e3      	ldr	r3, [r4, #12]
 800b4f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4fa:	1a5b      	subs	r3, r3, r1
 800b4fc:	4543      	cmp	r3, r8
 800b4fe:	dcf0      	bgt.n	800b4e2 <_printf_float+0x40a>
 800b500:	e6f8      	b.n	800b2f4 <_printf_float+0x21c>
 800b502:	f04f 0800 	mov.w	r8, #0
 800b506:	f104 0919 	add.w	r9, r4, #25
 800b50a:	e7f4      	b.n	800b4f6 <_printf_float+0x41e>

0800b50c <_printf_common>:
 800b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b510:	4616      	mov	r6, r2
 800b512:	4698      	mov	r8, r3
 800b514:	688a      	ldr	r2, [r1, #8]
 800b516:	690b      	ldr	r3, [r1, #16]
 800b518:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b51c:	4293      	cmp	r3, r2
 800b51e:	bfb8      	it	lt
 800b520:	4613      	movlt	r3, r2
 800b522:	6033      	str	r3, [r6, #0]
 800b524:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b528:	4607      	mov	r7, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	b10a      	cbz	r2, 800b532 <_printf_common+0x26>
 800b52e:	3301      	adds	r3, #1
 800b530:	6033      	str	r3, [r6, #0]
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	0699      	lsls	r1, r3, #26
 800b536:	bf42      	ittt	mi
 800b538:	6833      	ldrmi	r3, [r6, #0]
 800b53a:	3302      	addmi	r3, #2
 800b53c:	6033      	strmi	r3, [r6, #0]
 800b53e:	6825      	ldr	r5, [r4, #0]
 800b540:	f015 0506 	ands.w	r5, r5, #6
 800b544:	d106      	bne.n	800b554 <_printf_common+0x48>
 800b546:	f104 0a19 	add.w	sl, r4, #25
 800b54a:	68e3      	ldr	r3, [r4, #12]
 800b54c:	6832      	ldr	r2, [r6, #0]
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	42ab      	cmp	r3, r5
 800b552:	dc26      	bgt.n	800b5a2 <_printf_common+0x96>
 800b554:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b558:	6822      	ldr	r2, [r4, #0]
 800b55a:	3b00      	subs	r3, #0
 800b55c:	bf18      	it	ne
 800b55e:	2301      	movne	r3, #1
 800b560:	0692      	lsls	r2, r2, #26
 800b562:	d42b      	bmi.n	800b5bc <_printf_common+0xb0>
 800b564:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b568:	4641      	mov	r1, r8
 800b56a:	4638      	mov	r0, r7
 800b56c:	47c8      	blx	r9
 800b56e:	3001      	adds	r0, #1
 800b570:	d01e      	beq.n	800b5b0 <_printf_common+0xa4>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	6922      	ldr	r2, [r4, #16]
 800b576:	f003 0306 	and.w	r3, r3, #6
 800b57a:	2b04      	cmp	r3, #4
 800b57c:	bf02      	ittt	eq
 800b57e:	68e5      	ldreq	r5, [r4, #12]
 800b580:	6833      	ldreq	r3, [r6, #0]
 800b582:	1aed      	subeq	r5, r5, r3
 800b584:	68a3      	ldr	r3, [r4, #8]
 800b586:	bf0c      	ite	eq
 800b588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b58c:	2500      	movne	r5, #0
 800b58e:	4293      	cmp	r3, r2
 800b590:	bfc4      	itt	gt
 800b592:	1a9b      	subgt	r3, r3, r2
 800b594:	18ed      	addgt	r5, r5, r3
 800b596:	2600      	movs	r6, #0
 800b598:	341a      	adds	r4, #26
 800b59a:	42b5      	cmp	r5, r6
 800b59c:	d11a      	bne.n	800b5d4 <_printf_common+0xc8>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	e008      	b.n	800b5b4 <_printf_common+0xa8>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	4641      	mov	r1, r8
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	47c8      	blx	r9
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d103      	bne.n	800b5b8 <_printf_common+0xac>
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	e7c6      	b.n	800b54a <_printf_common+0x3e>
 800b5bc:	18e1      	adds	r1, r4, r3
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	2030      	movs	r0, #48	@ 0x30
 800b5c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5c6:	4422      	add	r2, r4
 800b5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5d0:	3302      	adds	r3, #2
 800b5d2:	e7c7      	b.n	800b564 <_printf_common+0x58>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	4641      	mov	r1, r8
 800b5da:	4638      	mov	r0, r7
 800b5dc:	47c8      	blx	r9
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d0e6      	beq.n	800b5b0 <_printf_common+0xa4>
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	e7d9      	b.n	800b59a <_printf_common+0x8e>
	...

0800b5e8 <_printf_i>:
 800b5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ec:	7e0f      	ldrb	r7, [r1, #24]
 800b5ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5f0:	2f78      	cmp	r7, #120	@ 0x78
 800b5f2:	4691      	mov	r9, r2
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	469a      	mov	sl, r3
 800b5fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5fe:	d807      	bhi.n	800b610 <_printf_i+0x28>
 800b600:	2f62      	cmp	r7, #98	@ 0x62
 800b602:	d80a      	bhi.n	800b61a <_printf_i+0x32>
 800b604:	2f00      	cmp	r7, #0
 800b606:	f000 80d1 	beq.w	800b7ac <_printf_i+0x1c4>
 800b60a:	2f58      	cmp	r7, #88	@ 0x58
 800b60c:	f000 80b8 	beq.w	800b780 <_printf_i+0x198>
 800b610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b614:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b618:	e03a      	b.n	800b690 <_printf_i+0xa8>
 800b61a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b61e:	2b15      	cmp	r3, #21
 800b620:	d8f6      	bhi.n	800b610 <_printf_i+0x28>
 800b622:	a101      	add	r1, pc, #4	@ (adr r1, 800b628 <_printf_i+0x40>)
 800b624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b628:	0800b681 	.word	0x0800b681
 800b62c:	0800b695 	.word	0x0800b695
 800b630:	0800b611 	.word	0x0800b611
 800b634:	0800b611 	.word	0x0800b611
 800b638:	0800b611 	.word	0x0800b611
 800b63c:	0800b611 	.word	0x0800b611
 800b640:	0800b695 	.word	0x0800b695
 800b644:	0800b611 	.word	0x0800b611
 800b648:	0800b611 	.word	0x0800b611
 800b64c:	0800b611 	.word	0x0800b611
 800b650:	0800b611 	.word	0x0800b611
 800b654:	0800b793 	.word	0x0800b793
 800b658:	0800b6bf 	.word	0x0800b6bf
 800b65c:	0800b74d 	.word	0x0800b74d
 800b660:	0800b611 	.word	0x0800b611
 800b664:	0800b611 	.word	0x0800b611
 800b668:	0800b7b5 	.word	0x0800b7b5
 800b66c:	0800b611 	.word	0x0800b611
 800b670:	0800b6bf 	.word	0x0800b6bf
 800b674:	0800b611 	.word	0x0800b611
 800b678:	0800b611 	.word	0x0800b611
 800b67c:	0800b755 	.word	0x0800b755
 800b680:	6833      	ldr	r3, [r6, #0]
 800b682:	1d1a      	adds	r2, r3, #4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	6032      	str	r2, [r6, #0]
 800b688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b68c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b690:	2301      	movs	r3, #1
 800b692:	e09c      	b.n	800b7ce <_printf_i+0x1e6>
 800b694:	6833      	ldr	r3, [r6, #0]
 800b696:	6820      	ldr	r0, [r4, #0]
 800b698:	1d19      	adds	r1, r3, #4
 800b69a:	6031      	str	r1, [r6, #0]
 800b69c:	0606      	lsls	r6, r0, #24
 800b69e:	d501      	bpl.n	800b6a4 <_printf_i+0xbc>
 800b6a0:	681d      	ldr	r5, [r3, #0]
 800b6a2:	e003      	b.n	800b6ac <_printf_i+0xc4>
 800b6a4:	0645      	lsls	r5, r0, #25
 800b6a6:	d5fb      	bpl.n	800b6a0 <_printf_i+0xb8>
 800b6a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	da03      	bge.n	800b6b8 <_printf_i+0xd0>
 800b6b0:	232d      	movs	r3, #45	@ 0x2d
 800b6b2:	426d      	negs	r5, r5
 800b6b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6b8:	4858      	ldr	r0, [pc, #352]	@ (800b81c <_printf_i+0x234>)
 800b6ba:	230a      	movs	r3, #10
 800b6bc:	e011      	b.n	800b6e2 <_printf_i+0xfa>
 800b6be:	6821      	ldr	r1, [r4, #0]
 800b6c0:	6833      	ldr	r3, [r6, #0]
 800b6c2:	0608      	lsls	r0, r1, #24
 800b6c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6c8:	d402      	bmi.n	800b6d0 <_printf_i+0xe8>
 800b6ca:	0649      	lsls	r1, r1, #25
 800b6cc:	bf48      	it	mi
 800b6ce:	b2ad      	uxthmi	r5, r5
 800b6d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6d2:	4852      	ldr	r0, [pc, #328]	@ (800b81c <_printf_i+0x234>)
 800b6d4:	6033      	str	r3, [r6, #0]
 800b6d6:	bf14      	ite	ne
 800b6d8:	230a      	movne	r3, #10
 800b6da:	2308      	moveq	r3, #8
 800b6dc:	2100      	movs	r1, #0
 800b6de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6e2:	6866      	ldr	r6, [r4, #4]
 800b6e4:	60a6      	str	r6, [r4, #8]
 800b6e6:	2e00      	cmp	r6, #0
 800b6e8:	db05      	blt.n	800b6f6 <_printf_i+0x10e>
 800b6ea:	6821      	ldr	r1, [r4, #0]
 800b6ec:	432e      	orrs	r6, r5
 800b6ee:	f021 0104 	bic.w	r1, r1, #4
 800b6f2:	6021      	str	r1, [r4, #0]
 800b6f4:	d04b      	beq.n	800b78e <_printf_i+0x1a6>
 800b6f6:	4616      	mov	r6, r2
 800b6f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6fc:	fb03 5711 	mls	r7, r3, r1, r5
 800b700:	5dc7      	ldrb	r7, [r0, r7]
 800b702:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b706:	462f      	mov	r7, r5
 800b708:	42bb      	cmp	r3, r7
 800b70a:	460d      	mov	r5, r1
 800b70c:	d9f4      	bls.n	800b6f8 <_printf_i+0x110>
 800b70e:	2b08      	cmp	r3, #8
 800b710:	d10b      	bne.n	800b72a <_printf_i+0x142>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	07df      	lsls	r7, r3, #31
 800b716:	d508      	bpl.n	800b72a <_printf_i+0x142>
 800b718:	6923      	ldr	r3, [r4, #16]
 800b71a:	6861      	ldr	r1, [r4, #4]
 800b71c:	4299      	cmp	r1, r3
 800b71e:	bfde      	ittt	le
 800b720:	2330      	movle	r3, #48	@ 0x30
 800b722:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b726:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b72a:	1b92      	subs	r2, r2, r6
 800b72c:	6122      	str	r2, [r4, #16]
 800b72e:	f8cd a000 	str.w	sl, [sp]
 800b732:	464b      	mov	r3, r9
 800b734:	aa03      	add	r2, sp, #12
 800b736:	4621      	mov	r1, r4
 800b738:	4640      	mov	r0, r8
 800b73a:	f7ff fee7 	bl	800b50c <_printf_common>
 800b73e:	3001      	adds	r0, #1
 800b740:	d14a      	bne.n	800b7d8 <_printf_i+0x1f0>
 800b742:	f04f 30ff 	mov.w	r0, #4294967295
 800b746:	b004      	add	sp, #16
 800b748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	f043 0320 	orr.w	r3, r3, #32
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	4832      	ldr	r0, [pc, #200]	@ (800b820 <_printf_i+0x238>)
 800b756:	2778      	movs	r7, #120	@ 0x78
 800b758:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	6831      	ldr	r1, [r6, #0]
 800b760:	061f      	lsls	r7, r3, #24
 800b762:	f851 5b04 	ldr.w	r5, [r1], #4
 800b766:	d402      	bmi.n	800b76e <_printf_i+0x186>
 800b768:	065f      	lsls	r7, r3, #25
 800b76a:	bf48      	it	mi
 800b76c:	b2ad      	uxthmi	r5, r5
 800b76e:	6031      	str	r1, [r6, #0]
 800b770:	07d9      	lsls	r1, r3, #31
 800b772:	bf44      	itt	mi
 800b774:	f043 0320 	orrmi.w	r3, r3, #32
 800b778:	6023      	strmi	r3, [r4, #0]
 800b77a:	b11d      	cbz	r5, 800b784 <_printf_i+0x19c>
 800b77c:	2310      	movs	r3, #16
 800b77e:	e7ad      	b.n	800b6dc <_printf_i+0xf4>
 800b780:	4826      	ldr	r0, [pc, #152]	@ (800b81c <_printf_i+0x234>)
 800b782:	e7e9      	b.n	800b758 <_printf_i+0x170>
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	f023 0320 	bic.w	r3, r3, #32
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	e7f6      	b.n	800b77c <_printf_i+0x194>
 800b78e:	4616      	mov	r6, r2
 800b790:	e7bd      	b.n	800b70e <_printf_i+0x126>
 800b792:	6833      	ldr	r3, [r6, #0]
 800b794:	6825      	ldr	r5, [r4, #0]
 800b796:	6961      	ldr	r1, [r4, #20]
 800b798:	1d18      	adds	r0, r3, #4
 800b79a:	6030      	str	r0, [r6, #0]
 800b79c:	062e      	lsls	r6, r5, #24
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	d501      	bpl.n	800b7a6 <_printf_i+0x1be>
 800b7a2:	6019      	str	r1, [r3, #0]
 800b7a4:	e002      	b.n	800b7ac <_printf_i+0x1c4>
 800b7a6:	0668      	lsls	r0, r5, #25
 800b7a8:	d5fb      	bpl.n	800b7a2 <_printf_i+0x1ba>
 800b7aa:	8019      	strh	r1, [r3, #0]
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	6123      	str	r3, [r4, #16]
 800b7b0:	4616      	mov	r6, r2
 800b7b2:	e7bc      	b.n	800b72e <_printf_i+0x146>
 800b7b4:	6833      	ldr	r3, [r6, #0]
 800b7b6:	1d1a      	adds	r2, r3, #4
 800b7b8:	6032      	str	r2, [r6, #0]
 800b7ba:	681e      	ldr	r6, [r3, #0]
 800b7bc:	6862      	ldr	r2, [r4, #4]
 800b7be:	2100      	movs	r1, #0
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7f4 fdb5 	bl	8000330 <memchr>
 800b7c6:	b108      	cbz	r0, 800b7cc <_printf_i+0x1e4>
 800b7c8:	1b80      	subs	r0, r0, r6
 800b7ca:	6060      	str	r0, [r4, #4]
 800b7cc:	6863      	ldr	r3, [r4, #4]
 800b7ce:	6123      	str	r3, [r4, #16]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7d6:	e7aa      	b.n	800b72e <_printf_i+0x146>
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	4632      	mov	r2, r6
 800b7dc:	4649      	mov	r1, r9
 800b7de:	4640      	mov	r0, r8
 800b7e0:	47d0      	blx	sl
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	d0ad      	beq.n	800b742 <_printf_i+0x15a>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	079b      	lsls	r3, r3, #30
 800b7ea:	d413      	bmi.n	800b814 <_printf_i+0x22c>
 800b7ec:	68e0      	ldr	r0, [r4, #12]
 800b7ee:	9b03      	ldr	r3, [sp, #12]
 800b7f0:	4298      	cmp	r0, r3
 800b7f2:	bfb8      	it	lt
 800b7f4:	4618      	movlt	r0, r3
 800b7f6:	e7a6      	b.n	800b746 <_printf_i+0x15e>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	4632      	mov	r2, r6
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4640      	mov	r0, r8
 800b800:	47d0      	blx	sl
 800b802:	3001      	adds	r0, #1
 800b804:	d09d      	beq.n	800b742 <_printf_i+0x15a>
 800b806:	3501      	adds	r5, #1
 800b808:	68e3      	ldr	r3, [r4, #12]
 800b80a:	9903      	ldr	r1, [sp, #12]
 800b80c:	1a5b      	subs	r3, r3, r1
 800b80e:	42ab      	cmp	r3, r5
 800b810:	dcf2      	bgt.n	800b7f8 <_printf_i+0x210>
 800b812:	e7eb      	b.n	800b7ec <_printf_i+0x204>
 800b814:	2500      	movs	r5, #0
 800b816:	f104 0619 	add.w	r6, r4, #25
 800b81a:	e7f5      	b.n	800b808 <_printf_i+0x220>
 800b81c:	0800e476 	.word	0x0800e476
 800b820:	0800e487 	.word	0x0800e487

0800b824 <std>:
 800b824:	2300      	movs	r3, #0
 800b826:	b510      	push	{r4, lr}
 800b828:	4604      	mov	r4, r0
 800b82a:	e9c0 3300 	strd	r3, r3, [r0]
 800b82e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b832:	6083      	str	r3, [r0, #8]
 800b834:	8181      	strh	r1, [r0, #12]
 800b836:	6643      	str	r3, [r0, #100]	@ 0x64
 800b838:	81c2      	strh	r2, [r0, #14]
 800b83a:	6183      	str	r3, [r0, #24]
 800b83c:	4619      	mov	r1, r3
 800b83e:	2208      	movs	r2, #8
 800b840:	305c      	adds	r0, #92	@ 0x5c
 800b842:	f000 fa23 	bl	800bc8c <memset>
 800b846:	4b0d      	ldr	r3, [pc, #52]	@ (800b87c <std+0x58>)
 800b848:	6263      	str	r3, [r4, #36]	@ 0x24
 800b84a:	4b0d      	ldr	r3, [pc, #52]	@ (800b880 <std+0x5c>)
 800b84c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b84e:	4b0d      	ldr	r3, [pc, #52]	@ (800b884 <std+0x60>)
 800b850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b852:	4b0d      	ldr	r3, [pc, #52]	@ (800b888 <std+0x64>)
 800b854:	6323      	str	r3, [r4, #48]	@ 0x30
 800b856:	4b0d      	ldr	r3, [pc, #52]	@ (800b88c <std+0x68>)
 800b858:	6224      	str	r4, [r4, #32]
 800b85a:	429c      	cmp	r4, r3
 800b85c:	d006      	beq.n	800b86c <std+0x48>
 800b85e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b862:	4294      	cmp	r4, r2
 800b864:	d002      	beq.n	800b86c <std+0x48>
 800b866:	33d0      	adds	r3, #208	@ 0xd0
 800b868:	429c      	cmp	r4, r3
 800b86a:	d105      	bne.n	800b878 <std+0x54>
 800b86c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b874:	f000 ba86 	b.w	800bd84 <__retarget_lock_init_recursive>
 800b878:	bd10      	pop	{r4, pc}
 800b87a:	bf00      	nop
 800b87c:	0800badd 	.word	0x0800badd
 800b880:	0800baff 	.word	0x0800baff
 800b884:	0800bb37 	.word	0x0800bb37
 800b888:	0800bb5b 	.word	0x0800bb5b
 800b88c:	2400094c 	.word	0x2400094c

0800b890 <stdio_exit_handler>:
 800b890:	4a02      	ldr	r2, [pc, #8]	@ (800b89c <stdio_exit_handler+0xc>)
 800b892:	4903      	ldr	r1, [pc, #12]	@ (800b8a0 <stdio_exit_handler+0x10>)
 800b894:	4803      	ldr	r0, [pc, #12]	@ (800b8a4 <stdio_exit_handler+0x14>)
 800b896:	f000 b869 	b.w	800b96c <_fwalk_sglue>
 800b89a:	bf00      	nop
 800b89c:	24000030 	.word	0x24000030
 800b8a0:	0800d8a5 	.word	0x0800d8a5
 800b8a4:	24000040 	.word	0x24000040

0800b8a8 <cleanup_stdio>:
 800b8a8:	6841      	ldr	r1, [r0, #4]
 800b8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b8dc <cleanup_stdio+0x34>)
 800b8ac:	4299      	cmp	r1, r3
 800b8ae:	b510      	push	{r4, lr}
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	d001      	beq.n	800b8b8 <cleanup_stdio+0x10>
 800b8b4:	f001 fff6 	bl	800d8a4 <_fflush_r>
 800b8b8:	68a1      	ldr	r1, [r4, #8]
 800b8ba:	4b09      	ldr	r3, [pc, #36]	@ (800b8e0 <cleanup_stdio+0x38>)
 800b8bc:	4299      	cmp	r1, r3
 800b8be:	d002      	beq.n	800b8c6 <cleanup_stdio+0x1e>
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f001 ffef 	bl	800d8a4 <_fflush_r>
 800b8c6:	68e1      	ldr	r1, [r4, #12]
 800b8c8:	4b06      	ldr	r3, [pc, #24]	@ (800b8e4 <cleanup_stdio+0x3c>)
 800b8ca:	4299      	cmp	r1, r3
 800b8cc:	d004      	beq.n	800b8d8 <cleanup_stdio+0x30>
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d4:	f001 bfe6 	b.w	800d8a4 <_fflush_r>
 800b8d8:	bd10      	pop	{r4, pc}
 800b8da:	bf00      	nop
 800b8dc:	2400094c 	.word	0x2400094c
 800b8e0:	240009b4 	.word	0x240009b4
 800b8e4:	24000a1c 	.word	0x24000a1c

0800b8e8 <global_stdio_init.part.0>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b918 <global_stdio_init.part.0+0x30>)
 800b8ec:	4c0b      	ldr	r4, [pc, #44]	@ (800b91c <global_stdio_init.part.0+0x34>)
 800b8ee:	4a0c      	ldr	r2, [pc, #48]	@ (800b920 <global_stdio_init.part.0+0x38>)
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2104      	movs	r1, #4
 800b8f8:	f7ff ff94 	bl	800b824 <std>
 800b8fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b900:	2201      	movs	r2, #1
 800b902:	2109      	movs	r1, #9
 800b904:	f7ff ff8e 	bl	800b824 <std>
 800b908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b90c:	2202      	movs	r2, #2
 800b90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b912:	2112      	movs	r1, #18
 800b914:	f7ff bf86 	b.w	800b824 <std>
 800b918:	24000a84 	.word	0x24000a84
 800b91c:	2400094c 	.word	0x2400094c
 800b920:	0800b891 	.word	0x0800b891

0800b924 <__sfp_lock_acquire>:
 800b924:	4801      	ldr	r0, [pc, #4]	@ (800b92c <__sfp_lock_acquire+0x8>)
 800b926:	f000 ba2e 	b.w	800bd86 <__retarget_lock_acquire_recursive>
 800b92a:	bf00      	nop
 800b92c:	24000a8d 	.word	0x24000a8d

0800b930 <__sfp_lock_release>:
 800b930:	4801      	ldr	r0, [pc, #4]	@ (800b938 <__sfp_lock_release+0x8>)
 800b932:	f000 ba29 	b.w	800bd88 <__retarget_lock_release_recursive>
 800b936:	bf00      	nop
 800b938:	24000a8d 	.word	0x24000a8d

0800b93c <__sinit>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	4604      	mov	r4, r0
 800b940:	f7ff fff0 	bl	800b924 <__sfp_lock_acquire>
 800b944:	6a23      	ldr	r3, [r4, #32]
 800b946:	b11b      	cbz	r3, 800b950 <__sinit+0x14>
 800b948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b94c:	f7ff bff0 	b.w	800b930 <__sfp_lock_release>
 800b950:	4b04      	ldr	r3, [pc, #16]	@ (800b964 <__sinit+0x28>)
 800b952:	6223      	str	r3, [r4, #32]
 800b954:	4b04      	ldr	r3, [pc, #16]	@ (800b968 <__sinit+0x2c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1f5      	bne.n	800b948 <__sinit+0xc>
 800b95c:	f7ff ffc4 	bl	800b8e8 <global_stdio_init.part.0>
 800b960:	e7f2      	b.n	800b948 <__sinit+0xc>
 800b962:	bf00      	nop
 800b964:	0800b8a9 	.word	0x0800b8a9
 800b968:	24000a84 	.word	0x24000a84

0800b96c <_fwalk_sglue>:
 800b96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b970:	4607      	mov	r7, r0
 800b972:	4688      	mov	r8, r1
 800b974:	4614      	mov	r4, r2
 800b976:	2600      	movs	r6, #0
 800b978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b97c:	f1b9 0901 	subs.w	r9, r9, #1
 800b980:	d505      	bpl.n	800b98e <_fwalk_sglue+0x22>
 800b982:	6824      	ldr	r4, [r4, #0]
 800b984:	2c00      	cmp	r4, #0
 800b986:	d1f7      	bne.n	800b978 <_fwalk_sglue+0xc>
 800b988:	4630      	mov	r0, r6
 800b98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d907      	bls.n	800b9a4 <_fwalk_sglue+0x38>
 800b994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b998:	3301      	adds	r3, #1
 800b99a:	d003      	beq.n	800b9a4 <_fwalk_sglue+0x38>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4638      	mov	r0, r7
 800b9a0:	47c0      	blx	r8
 800b9a2:	4306      	orrs	r6, r0
 800b9a4:	3568      	adds	r5, #104	@ 0x68
 800b9a6:	e7e9      	b.n	800b97c <_fwalk_sglue+0x10>

0800b9a8 <iprintf>:
 800b9a8:	b40f      	push	{r0, r1, r2, r3}
 800b9aa:	b507      	push	{r0, r1, r2, lr}
 800b9ac:	4906      	ldr	r1, [pc, #24]	@ (800b9c8 <iprintf+0x20>)
 800b9ae:	ab04      	add	r3, sp, #16
 800b9b0:	6808      	ldr	r0, [r1, #0]
 800b9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b6:	6881      	ldr	r1, [r0, #8]
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	f001 fdd7 	bl	800d56c <_vfiprintf_r>
 800b9be:	b003      	add	sp, #12
 800b9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9c4:	b004      	add	sp, #16
 800b9c6:	4770      	bx	lr
 800b9c8:	2400003c 	.word	0x2400003c

0800b9cc <putchar>:
 800b9cc:	4b02      	ldr	r3, [pc, #8]	@ (800b9d8 <putchar+0xc>)
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	6882      	ldr	r2, [r0, #8]
 800b9d4:	f001 bff0 	b.w	800d9b8 <_putc_r>
 800b9d8:	2400003c 	.word	0x2400003c

0800b9dc <_puts_r>:
 800b9dc:	6a03      	ldr	r3, [r0, #32]
 800b9de:	b570      	push	{r4, r5, r6, lr}
 800b9e0:	6884      	ldr	r4, [r0, #8]
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	460e      	mov	r6, r1
 800b9e6:	b90b      	cbnz	r3, 800b9ec <_puts_r+0x10>
 800b9e8:	f7ff ffa8 	bl	800b93c <__sinit>
 800b9ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9ee:	07db      	lsls	r3, r3, #31
 800b9f0:	d405      	bmi.n	800b9fe <_puts_r+0x22>
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	0598      	lsls	r0, r3, #22
 800b9f6:	d402      	bmi.n	800b9fe <_puts_r+0x22>
 800b9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9fa:	f000 f9c4 	bl	800bd86 <__retarget_lock_acquire_recursive>
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	0719      	lsls	r1, r3, #28
 800ba02:	d502      	bpl.n	800ba0a <_puts_r+0x2e>
 800ba04:	6923      	ldr	r3, [r4, #16]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d135      	bne.n	800ba76 <_puts_r+0x9a>
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	f000 f8e7 	bl	800bbe0 <__swsetup_r>
 800ba12:	b380      	cbz	r0, 800ba76 <_puts_r+0x9a>
 800ba14:	f04f 35ff 	mov.w	r5, #4294967295
 800ba18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba1a:	07da      	lsls	r2, r3, #31
 800ba1c:	d405      	bmi.n	800ba2a <_puts_r+0x4e>
 800ba1e:	89a3      	ldrh	r3, [r4, #12]
 800ba20:	059b      	lsls	r3, r3, #22
 800ba22:	d402      	bmi.n	800ba2a <_puts_r+0x4e>
 800ba24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba26:	f000 f9af 	bl	800bd88 <__retarget_lock_release_recursive>
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	da04      	bge.n	800ba3c <_puts_r+0x60>
 800ba32:	69a2      	ldr	r2, [r4, #24]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	dc17      	bgt.n	800ba68 <_puts_r+0x8c>
 800ba38:	290a      	cmp	r1, #10
 800ba3a:	d015      	beq.n	800ba68 <_puts_r+0x8c>
 800ba3c:	6823      	ldr	r3, [r4, #0]
 800ba3e:	1c5a      	adds	r2, r3, #1
 800ba40:	6022      	str	r2, [r4, #0]
 800ba42:	7019      	strb	r1, [r3, #0]
 800ba44:	68a3      	ldr	r3, [r4, #8]
 800ba46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	60a3      	str	r3, [r4, #8]
 800ba4e:	2900      	cmp	r1, #0
 800ba50:	d1ed      	bne.n	800ba2e <_puts_r+0x52>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	da11      	bge.n	800ba7a <_puts_r+0x9e>
 800ba56:	4622      	mov	r2, r4
 800ba58:	210a      	movs	r1, #10
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f000 f881 	bl	800bb62 <__swbuf_r>
 800ba60:	3001      	adds	r0, #1
 800ba62:	d0d7      	beq.n	800ba14 <_puts_r+0x38>
 800ba64:	250a      	movs	r5, #10
 800ba66:	e7d7      	b.n	800ba18 <_puts_r+0x3c>
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f000 f879 	bl	800bb62 <__swbuf_r>
 800ba70:	3001      	adds	r0, #1
 800ba72:	d1e7      	bne.n	800ba44 <_puts_r+0x68>
 800ba74:	e7ce      	b.n	800ba14 <_puts_r+0x38>
 800ba76:	3e01      	subs	r6, #1
 800ba78:	e7e4      	b.n	800ba44 <_puts_r+0x68>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	1c5a      	adds	r2, r3, #1
 800ba7e:	6022      	str	r2, [r4, #0]
 800ba80:	220a      	movs	r2, #10
 800ba82:	701a      	strb	r2, [r3, #0]
 800ba84:	e7ee      	b.n	800ba64 <_puts_r+0x88>
	...

0800ba88 <puts>:
 800ba88:	4b02      	ldr	r3, [pc, #8]	@ (800ba94 <puts+0xc>)
 800ba8a:	4601      	mov	r1, r0
 800ba8c:	6818      	ldr	r0, [r3, #0]
 800ba8e:	f7ff bfa5 	b.w	800b9dc <_puts_r>
 800ba92:	bf00      	nop
 800ba94:	2400003c 	.word	0x2400003c

0800ba98 <siprintf>:
 800ba98:	b40e      	push	{r1, r2, r3}
 800ba9a:	b510      	push	{r4, lr}
 800ba9c:	b09d      	sub	sp, #116	@ 0x74
 800ba9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800baa0:	9002      	str	r0, [sp, #8]
 800baa2:	9006      	str	r0, [sp, #24]
 800baa4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800baa8:	480a      	ldr	r0, [pc, #40]	@ (800bad4 <siprintf+0x3c>)
 800baaa:	9107      	str	r1, [sp, #28]
 800baac:	9104      	str	r1, [sp, #16]
 800baae:	490a      	ldr	r1, [pc, #40]	@ (800bad8 <siprintf+0x40>)
 800bab0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab4:	9105      	str	r1, [sp, #20]
 800bab6:	2400      	movs	r4, #0
 800bab8:	a902      	add	r1, sp, #8
 800baba:	6800      	ldr	r0, [r0, #0]
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bac0:	f001 fc2e 	bl	800d320 <_svfiprintf_r>
 800bac4:	9b02      	ldr	r3, [sp, #8]
 800bac6:	701c      	strb	r4, [r3, #0]
 800bac8:	b01d      	add	sp, #116	@ 0x74
 800baca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bace:	b003      	add	sp, #12
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	2400003c 	.word	0x2400003c
 800bad8:	ffff0208 	.word	0xffff0208

0800badc <__sread>:
 800badc:	b510      	push	{r4, lr}
 800bade:	460c      	mov	r4, r1
 800bae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae4:	f000 f900 	bl	800bce8 <_read_r>
 800bae8:	2800      	cmp	r0, #0
 800baea:	bfab      	itete	ge
 800baec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800baee:	89a3      	ldrhlt	r3, [r4, #12]
 800baf0:	181b      	addge	r3, r3, r0
 800baf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800baf6:	bfac      	ite	ge
 800baf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bafa:	81a3      	strhlt	r3, [r4, #12]
 800bafc:	bd10      	pop	{r4, pc}

0800bafe <__swrite>:
 800bafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb02:	461f      	mov	r7, r3
 800bb04:	898b      	ldrh	r3, [r1, #12]
 800bb06:	05db      	lsls	r3, r3, #23
 800bb08:	4605      	mov	r5, r0
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	4616      	mov	r6, r2
 800bb0e:	d505      	bpl.n	800bb1c <__swrite+0x1e>
 800bb10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb14:	2302      	movs	r3, #2
 800bb16:	2200      	movs	r2, #0
 800bb18:	f000 f8d4 	bl	800bcc4 <_lseek_r>
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb26:	81a3      	strh	r3, [r4, #12]
 800bb28:	4632      	mov	r2, r6
 800bb2a:	463b      	mov	r3, r7
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb32:	f000 b8eb 	b.w	800bd0c <_write_r>

0800bb36 <__sseek>:
 800bb36:	b510      	push	{r4, lr}
 800bb38:	460c      	mov	r4, r1
 800bb3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb3e:	f000 f8c1 	bl	800bcc4 <_lseek_r>
 800bb42:	1c43      	adds	r3, r0, #1
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	bf15      	itete	ne
 800bb48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb52:	81a3      	strheq	r3, [r4, #12]
 800bb54:	bf18      	it	ne
 800bb56:	81a3      	strhne	r3, [r4, #12]
 800bb58:	bd10      	pop	{r4, pc}

0800bb5a <__sclose>:
 800bb5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb5e:	f000 b8a1 	b.w	800bca4 <_close_r>

0800bb62 <__swbuf_r>:
 800bb62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb64:	460e      	mov	r6, r1
 800bb66:	4614      	mov	r4, r2
 800bb68:	4605      	mov	r5, r0
 800bb6a:	b118      	cbz	r0, 800bb74 <__swbuf_r+0x12>
 800bb6c:	6a03      	ldr	r3, [r0, #32]
 800bb6e:	b90b      	cbnz	r3, 800bb74 <__swbuf_r+0x12>
 800bb70:	f7ff fee4 	bl	800b93c <__sinit>
 800bb74:	69a3      	ldr	r3, [r4, #24]
 800bb76:	60a3      	str	r3, [r4, #8]
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	071a      	lsls	r2, r3, #28
 800bb7c:	d501      	bpl.n	800bb82 <__swbuf_r+0x20>
 800bb7e:	6923      	ldr	r3, [r4, #16]
 800bb80:	b943      	cbnz	r3, 800bb94 <__swbuf_r+0x32>
 800bb82:	4621      	mov	r1, r4
 800bb84:	4628      	mov	r0, r5
 800bb86:	f000 f82b 	bl	800bbe0 <__swsetup_r>
 800bb8a:	b118      	cbz	r0, 800bb94 <__swbuf_r+0x32>
 800bb8c:	f04f 37ff 	mov.w	r7, #4294967295
 800bb90:	4638      	mov	r0, r7
 800bb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	6922      	ldr	r2, [r4, #16]
 800bb98:	1a98      	subs	r0, r3, r2
 800bb9a:	6963      	ldr	r3, [r4, #20]
 800bb9c:	b2f6      	uxtb	r6, r6
 800bb9e:	4283      	cmp	r3, r0
 800bba0:	4637      	mov	r7, r6
 800bba2:	dc05      	bgt.n	800bbb0 <__swbuf_r+0x4e>
 800bba4:	4621      	mov	r1, r4
 800bba6:	4628      	mov	r0, r5
 800bba8:	f001 fe7c 	bl	800d8a4 <_fflush_r>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d1ed      	bne.n	800bb8c <__swbuf_r+0x2a>
 800bbb0:	68a3      	ldr	r3, [r4, #8]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	60a3      	str	r3, [r4, #8]
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	6022      	str	r2, [r4, #0]
 800bbbc:	701e      	strb	r6, [r3, #0]
 800bbbe:	6962      	ldr	r2, [r4, #20]
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d004      	beq.n	800bbd0 <__swbuf_r+0x6e>
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	07db      	lsls	r3, r3, #31
 800bbca:	d5e1      	bpl.n	800bb90 <__swbuf_r+0x2e>
 800bbcc:	2e0a      	cmp	r6, #10
 800bbce:	d1df      	bne.n	800bb90 <__swbuf_r+0x2e>
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f001 fe66 	bl	800d8a4 <_fflush_r>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d0d9      	beq.n	800bb90 <__swbuf_r+0x2e>
 800bbdc:	e7d6      	b.n	800bb8c <__swbuf_r+0x2a>
	...

0800bbe0 <__swsetup_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4b29      	ldr	r3, [pc, #164]	@ (800bc88 <__swsetup_r+0xa8>)
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	6818      	ldr	r0, [r3, #0]
 800bbe8:	460c      	mov	r4, r1
 800bbea:	b118      	cbz	r0, 800bbf4 <__swsetup_r+0x14>
 800bbec:	6a03      	ldr	r3, [r0, #32]
 800bbee:	b90b      	cbnz	r3, 800bbf4 <__swsetup_r+0x14>
 800bbf0:	f7ff fea4 	bl	800b93c <__sinit>
 800bbf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbf8:	0719      	lsls	r1, r3, #28
 800bbfa:	d422      	bmi.n	800bc42 <__swsetup_r+0x62>
 800bbfc:	06da      	lsls	r2, r3, #27
 800bbfe:	d407      	bmi.n	800bc10 <__swsetup_r+0x30>
 800bc00:	2209      	movs	r2, #9
 800bc02:	602a      	str	r2, [r5, #0]
 800bc04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc08:	81a3      	strh	r3, [r4, #12]
 800bc0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0e:	e033      	b.n	800bc78 <__swsetup_r+0x98>
 800bc10:	0758      	lsls	r0, r3, #29
 800bc12:	d512      	bpl.n	800bc3a <__swsetup_r+0x5a>
 800bc14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc16:	b141      	cbz	r1, 800bc2a <__swsetup_r+0x4a>
 800bc18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc1c:	4299      	cmp	r1, r3
 800bc1e:	d002      	beq.n	800bc26 <__swsetup_r+0x46>
 800bc20:	4628      	mov	r0, r5
 800bc22:	f000 fea7 	bl	800c974 <_free_r>
 800bc26:	2300      	movs	r3, #0
 800bc28:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc30:	81a3      	strh	r3, [r4, #12]
 800bc32:	2300      	movs	r3, #0
 800bc34:	6063      	str	r3, [r4, #4]
 800bc36:	6923      	ldr	r3, [r4, #16]
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	f043 0308 	orr.w	r3, r3, #8
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	6923      	ldr	r3, [r4, #16]
 800bc44:	b94b      	cbnz	r3, 800bc5a <__swsetup_r+0x7a>
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc50:	d003      	beq.n	800bc5a <__swsetup_r+0x7a>
 800bc52:	4621      	mov	r1, r4
 800bc54:	4628      	mov	r0, r5
 800bc56:	f001 fe73 	bl	800d940 <__smakebuf_r>
 800bc5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc5e:	f013 0201 	ands.w	r2, r3, #1
 800bc62:	d00a      	beq.n	800bc7a <__swsetup_r+0x9a>
 800bc64:	2200      	movs	r2, #0
 800bc66:	60a2      	str	r2, [r4, #8]
 800bc68:	6962      	ldr	r2, [r4, #20]
 800bc6a:	4252      	negs	r2, r2
 800bc6c:	61a2      	str	r2, [r4, #24]
 800bc6e:	6922      	ldr	r2, [r4, #16]
 800bc70:	b942      	cbnz	r2, 800bc84 <__swsetup_r+0xa4>
 800bc72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc76:	d1c5      	bne.n	800bc04 <__swsetup_r+0x24>
 800bc78:	bd38      	pop	{r3, r4, r5, pc}
 800bc7a:	0799      	lsls	r1, r3, #30
 800bc7c:	bf58      	it	pl
 800bc7e:	6962      	ldrpl	r2, [r4, #20]
 800bc80:	60a2      	str	r2, [r4, #8]
 800bc82:	e7f4      	b.n	800bc6e <__swsetup_r+0x8e>
 800bc84:	2000      	movs	r0, #0
 800bc86:	e7f7      	b.n	800bc78 <__swsetup_r+0x98>
 800bc88:	2400003c 	.word	0x2400003c

0800bc8c <memset>:
 800bc8c:	4402      	add	r2, r0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d100      	bne.n	800bc96 <memset+0xa>
 800bc94:	4770      	bx	lr
 800bc96:	f803 1b01 	strb.w	r1, [r3], #1
 800bc9a:	e7f9      	b.n	800bc90 <memset+0x4>

0800bc9c <_localeconv_r>:
 800bc9c:	4800      	ldr	r0, [pc, #0]	@ (800bca0 <_localeconv_r+0x4>)
 800bc9e:	4770      	bx	lr
 800bca0:	2400017c 	.word	0x2400017c

0800bca4 <_close_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d06      	ldr	r5, [pc, #24]	@ (800bcc0 <_close_r+0x1c>)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4604      	mov	r4, r0
 800bcac:	4608      	mov	r0, r1
 800bcae:	602b      	str	r3, [r5, #0]
 800bcb0:	f7f6 fb2e 	bl	8002310 <_close>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_close_r+0x1a>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_close_r+0x1a>
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	24000a88 	.word	0x24000a88

0800bcc4 <_lseek_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d07      	ldr	r5, [pc, #28]	@ (800bce4 <_lseek_r+0x20>)
 800bcc8:	4604      	mov	r4, r0
 800bcca:	4608      	mov	r0, r1
 800bccc:	4611      	mov	r1, r2
 800bcce:	2200      	movs	r2, #0
 800bcd0:	602a      	str	r2, [r5, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f7f6 fb43 	bl	800235e <_lseek>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_lseek_r+0x1e>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_lseek_r+0x1e>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	24000a88 	.word	0x24000a88

0800bce8 <_read_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d07      	ldr	r5, [pc, #28]	@ (800bd08 <_read_r+0x20>)
 800bcec:	4604      	mov	r4, r0
 800bcee:	4608      	mov	r0, r1
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	602a      	str	r2, [r5, #0]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	f7f6 fad1 	bl	800229e <_read>
 800bcfc:	1c43      	adds	r3, r0, #1
 800bcfe:	d102      	bne.n	800bd06 <_read_r+0x1e>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	b103      	cbz	r3, 800bd06 <_read_r+0x1e>
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	bd38      	pop	{r3, r4, r5, pc}
 800bd08:	24000a88 	.word	0x24000a88

0800bd0c <_write_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4d07      	ldr	r5, [pc, #28]	@ (800bd2c <_write_r+0x20>)
 800bd10:	4604      	mov	r4, r0
 800bd12:	4608      	mov	r0, r1
 800bd14:	4611      	mov	r1, r2
 800bd16:	2200      	movs	r2, #0
 800bd18:	602a      	str	r2, [r5, #0]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f7f6 fadc 	bl	80022d8 <_write>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_write_r+0x1e>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_write_r+0x1e>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	24000a88 	.word	0x24000a88

0800bd30 <__errno>:
 800bd30:	4b01      	ldr	r3, [pc, #4]	@ (800bd38 <__errno+0x8>)
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	2400003c 	.word	0x2400003c

0800bd3c <__libc_init_array>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	4d0d      	ldr	r5, [pc, #52]	@ (800bd74 <__libc_init_array+0x38>)
 800bd40:	4c0d      	ldr	r4, [pc, #52]	@ (800bd78 <__libc_init_array+0x3c>)
 800bd42:	1b64      	subs	r4, r4, r5
 800bd44:	10a4      	asrs	r4, r4, #2
 800bd46:	2600      	movs	r6, #0
 800bd48:	42a6      	cmp	r6, r4
 800bd4a:	d109      	bne.n	800bd60 <__libc_init_array+0x24>
 800bd4c:	4d0b      	ldr	r5, [pc, #44]	@ (800bd7c <__libc_init_array+0x40>)
 800bd4e:	4c0c      	ldr	r4, [pc, #48]	@ (800bd80 <__libc_init_array+0x44>)
 800bd50:	f002 f8c8 	bl	800dee4 <_init>
 800bd54:	1b64      	subs	r4, r4, r5
 800bd56:	10a4      	asrs	r4, r4, #2
 800bd58:	2600      	movs	r6, #0
 800bd5a:	42a6      	cmp	r6, r4
 800bd5c:	d105      	bne.n	800bd6a <__libc_init_array+0x2e>
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd64:	4798      	blx	r3
 800bd66:	3601      	adds	r6, #1
 800bd68:	e7ee      	b.n	800bd48 <__libc_init_array+0xc>
 800bd6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd6e:	4798      	blx	r3
 800bd70:	3601      	adds	r6, #1
 800bd72:	e7f2      	b.n	800bd5a <__libc_init_array+0x1e>
 800bd74:	0800e7f8 	.word	0x0800e7f8
 800bd78:	0800e7f8 	.word	0x0800e7f8
 800bd7c:	0800e7f8 	.word	0x0800e7f8
 800bd80:	0800e7fc 	.word	0x0800e7fc

0800bd84 <__retarget_lock_init_recursive>:
 800bd84:	4770      	bx	lr

0800bd86 <__retarget_lock_acquire_recursive>:
 800bd86:	4770      	bx	lr

0800bd88 <__retarget_lock_release_recursive>:
 800bd88:	4770      	bx	lr

0800bd8a <memcpy>:
 800bd8a:	440a      	add	r2, r1
 800bd8c:	4291      	cmp	r1, r2
 800bd8e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd92:	d100      	bne.n	800bd96 <memcpy+0xc>
 800bd94:	4770      	bx	lr
 800bd96:	b510      	push	{r4, lr}
 800bd98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bda0:	4291      	cmp	r1, r2
 800bda2:	d1f9      	bne.n	800bd98 <memcpy+0xe>
 800bda4:	bd10      	pop	{r4, pc}

0800bda6 <quorem>:
 800bda6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdaa:	6903      	ldr	r3, [r0, #16]
 800bdac:	690c      	ldr	r4, [r1, #16]
 800bdae:	42a3      	cmp	r3, r4
 800bdb0:	4607      	mov	r7, r0
 800bdb2:	db7e      	blt.n	800beb2 <quorem+0x10c>
 800bdb4:	3c01      	subs	r4, #1
 800bdb6:	f101 0814 	add.w	r8, r1, #20
 800bdba:	00a3      	lsls	r3, r4, #2
 800bdbc:	f100 0514 	add.w	r5, r0, #20
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdd8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bddc:	d32e      	bcc.n	800be3c <quorem+0x96>
 800bdde:	f04f 0a00 	mov.w	sl, #0
 800bde2:	46c4      	mov	ip, r8
 800bde4:	46ae      	mov	lr, r5
 800bde6:	46d3      	mov	fp, sl
 800bde8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdec:	b298      	uxth	r0, r3
 800bdee:	fb06 a000 	mla	r0, r6, r0, sl
 800bdf2:	0c02      	lsrs	r2, r0, #16
 800bdf4:	0c1b      	lsrs	r3, r3, #16
 800bdf6:	fb06 2303 	mla	r3, r6, r3, r2
 800bdfa:	f8de 2000 	ldr.w	r2, [lr]
 800bdfe:	b280      	uxth	r0, r0
 800be00:	b292      	uxth	r2, r2
 800be02:	1a12      	subs	r2, r2, r0
 800be04:	445a      	add	r2, fp
 800be06:	f8de 0000 	ldr.w	r0, [lr]
 800be0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be0e:	b29b      	uxth	r3, r3
 800be10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800be14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800be18:	b292      	uxth	r2, r2
 800be1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be1e:	45e1      	cmp	r9, ip
 800be20:	f84e 2b04 	str.w	r2, [lr], #4
 800be24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be28:	d2de      	bcs.n	800bde8 <quorem+0x42>
 800be2a:	9b00      	ldr	r3, [sp, #0]
 800be2c:	58eb      	ldr	r3, [r5, r3]
 800be2e:	b92b      	cbnz	r3, 800be3c <quorem+0x96>
 800be30:	9b01      	ldr	r3, [sp, #4]
 800be32:	3b04      	subs	r3, #4
 800be34:	429d      	cmp	r5, r3
 800be36:	461a      	mov	r2, r3
 800be38:	d32f      	bcc.n	800be9a <quorem+0xf4>
 800be3a:	613c      	str	r4, [r7, #16]
 800be3c:	4638      	mov	r0, r7
 800be3e:	f001 f90b 	bl	800d058 <__mcmp>
 800be42:	2800      	cmp	r0, #0
 800be44:	db25      	blt.n	800be92 <quorem+0xec>
 800be46:	4629      	mov	r1, r5
 800be48:	2000      	movs	r0, #0
 800be4a:	f858 2b04 	ldr.w	r2, [r8], #4
 800be4e:	f8d1 c000 	ldr.w	ip, [r1]
 800be52:	fa1f fe82 	uxth.w	lr, r2
 800be56:	fa1f f38c 	uxth.w	r3, ip
 800be5a:	eba3 030e 	sub.w	r3, r3, lr
 800be5e:	4403      	add	r3, r0
 800be60:	0c12      	lsrs	r2, r2, #16
 800be62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be70:	45c1      	cmp	r9, r8
 800be72:	f841 3b04 	str.w	r3, [r1], #4
 800be76:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be7a:	d2e6      	bcs.n	800be4a <quorem+0xa4>
 800be7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be84:	b922      	cbnz	r2, 800be90 <quorem+0xea>
 800be86:	3b04      	subs	r3, #4
 800be88:	429d      	cmp	r5, r3
 800be8a:	461a      	mov	r2, r3
 800be8c:	d30b      	bcc.n	800bea6 <quorem+0x100>
 800be8e:	613c      	str	r4, [r7, #16]
 800be90:	3601      	adds	r6, #1
 800be92:	4630      	mov	r0, r6
 800be94:	b003      	add	sp, #12
 800be96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	3b04      	subs	r3, #4
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	d1cb      	bne.n	800be3a <quorem+0x94>
 800bea2:	3c01      	subs	r4, #1
 800bea4:	e7c6      	b.n	800be34 <quorem+0x8e>
 800bea6:	6812      	ldr	r2, [r2, #0]
 800bea8:	3b04      	subs	r3, #4
 800beaa:	2a00      	cmp	r2, #0
 800beac:	d1ef      	bne.n	800be8e <quorem+0xe8>
 800beae:	3c01      	subs	r4, #1
 800beb0:	e7ea      	b.n	800be88 <quorem+0xe2>
 800beb2:	2000      	movs	r0, #0
 800beb4:	e7ee      	b.n	800be94 <quorem+0xee>
	...

0800beb8 <_dtoa_r>:
 800beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bebc:	ed2d 8b02 	vpush	{d8}
 800bec0:	69c7      	ldr	r7, [r0, #28]
 800bec2:	b091      	sub	sp, #68	@ 0x44
 800bec4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bec8:	ec55 4b10 	vmov	r4, r5, d0
 800becc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800bece:	9107      	str	r1, [sp, #28]
 800bed0:	4681      	mov	r9, r0
 800bed2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bed4:	930d      	str	r3, [sp, #52]	@ 0x34
 800bed6:	b97f      	cbnz	r7, 800bef8 <_dtoa_r+0x40>
 800bed8:	2010      	movs	r0, #16
 800beda:	f000 fd95 	bl	800ca08 <malloc>
 800bede:	4602      	mov	r2, r0
 800bee0:	f8c9 001c 	str.w	r0, [r9, #28]
 800bee4:	b920      	cbnz	r0, 800bef0 <_dtoa_r+0x38>
 800bee6:	4ba0      	ldr	r3, [pc, #640]	@ (800c168 <_dtoa_r+0x2b0>)
 800bee8:	21ef      	movs	r1, #239	@ 0xef
 800beea:	48a0      	ldr	r0, [pc, #640]	@ (800c16c <_dtoa_r+0x2b4>)
 800beec:	f001 fde4 	bl	800dab8 <__assert_func>
 800bef0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bef4:	6007      	str	r7, [r0, #0]
 800bef6:	60c7      	str	r7, [r0, #12]
 800bef8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800befc:	6819      	ldr	r1, [r3, #0]
 800befe:	b159      	cbz	r1, 800bf18 <_dtoa_r+0x60>
 800bf00:	685a      	ldr	r2, [r3, #4]
 800bf02:	604a      	str	r2, [r1, #4]
 800bf04:	2301      	movs	r3, #1
 800bf06:	4093      	lsls	r3, r2
 800bf08:	608b      	str	r3, [r1, #8]
 800bf0a:	4648      	mov	r0, r9
 800bf0c:	f000 fe72 	bl	800cbf4 <_Bfree>
 800bf10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf14:	2200      	movs	r2, #0
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	1e2b      	subs	r3, r5, #0
 800bf1a:	bfbb      	ittet	lt
 800bf1c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bf20:	9303      	strlt	r3, [sp, #12]
 800bf22:	2300      	movge	r3, #0
 800bf24:	2201      	movlt	r2, #1
 800bf26:	bfac      	ite	ge
 800bf28:	6033      	strge	r3, [r6, #0]
 800bf2a:	6032      	strlt	r2, [r6, #0]
 800bf2c:	4b90      	ldr	r3, [pc, #576]	@ (800c170 <_dtoa_r+0x2b8>)
 800bf2e:	9e03      	ldr	r6, [sp, #12]
 800bf30:	43b3      	bics	r3, r6
 800bf32:	d110      	bne.n	800bf56 <_dtoa_r+0x9e>
 800bf34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf36:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800bf40:	4323      	orrs	r3, r4
 800bf42:	f000 84e6 	beq.w	800c912 <_dtoa_r+0xa5a>
 800bf46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf48:	4f8a      	ldr	r7, [pc, #552]	@ (800c174 <_dtoa_r+0x2bc>)
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 84e8 	beq.w	800c920 <_dtoa_r+0xa68>
 800bf50:	1cfb      	adds	r3, r7, #3
 800bf52:	f000 bce3 	b.w	800c91c <_dtoa_r+0xa64>
 800bf56:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bf5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf62:	d10a      	bne.n	800bf7a <_dtoa_r+0xc2>
 800bf64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf66:	2301      	movs	r3, #1
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf6c:	b113      	cbz	r3, 800bf74 <_dtoa_r+0xbc>
 800bf6e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bf70:	4b81      	ldr	r3, [pc, #516]	@ (800c178 <_dtoa_r+0x2c0>)
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	4f81      	ldr	r7, [pc, #516]	@ (800c17c <_dtoa_r+0x2c4>)
 800bf76:	f000 bcd3 	b.w	800c920 <_dtoa_r+0xa68>
 800bf7a:	aa0e      	add	r2, sp, #56	@ 0x38
 800bf7c:	a90f      	add	r1, sp, #60	@ 0x3c
 800bf7e:	4648      	mov	r0, r9
 800bf80:	eeb0 0b48 	vmov.f64	d0, d8
 800bf84:	f001 f918 	bl	800d1b8 <__d2b>
 800bf88:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bf8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf8e:	9001      	str	r0, [sp, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d045      	beq.n	800c020 <_dtoa_r+0x168>
 800bf94:	eeb0 7b48 	vmov.f64	d7, d8
 800bf98:	ee18 1a90 	vmov	r1, s17
 800bf9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bfa0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bfa4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bfa8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bfac:	2500      	movs	r5, #0
 800bfae:	ee07 1a90 	vmov	s15, r1
 800bfb2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bfb6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c150 <_dtoa_r+0x298>
 800bfba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bfbe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c158 <_dtoa_r+0x2a0>
 800bfc2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bfc6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c160 <_dtoa_r+0x2a8>
 800bfca:	ee07 3a90 	vmov	s15, r3
 800bfce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bfd2:	eeb0 7b46 	vmov.f64	d7, d6
 800bfd6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bfda:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bfde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe6:	ee16 8a90 	vmov	r8, s13
 800bfea:	d508      	bpl.n	800bffe <_dtoa_r+0x146>
 800bfec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bff0:	eeb4 6b47 	vcmp.f64	d6, d7
 800bff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff8:	bf18      	it	ne
 800bffa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bffe:	f1b8 0f16 	cmp.w	r8, #22
 800c002:	d82b      	bhi.n	800c05c <_dtoa_r+0x1a4>
 800c004:	495e      	ldr	r1, [pc, #376]	@ (800c180 <_dtoa_r+0x2c8>)
 800c006:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c00a:	ed91 7b00 	vldr	d7, [r1]
 800c00e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c016:	d501      	bpl.n	800c01c <_dtoa_r+0x164>
 800c018:	f108 38ff 	add.w	r8, r8, #4294967295
 800c01c:	2100      	movs	r1, #0
 800c01e:	e01e      	b.n	800c05e <_dtoa_r+0x1a6>
 800c020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c022:	4413      	add	r3, r2
 800c024:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c028:	2920      	cmp	r1, #32
 800c02a:	bfc1      	itttt	gt
 800c02c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c030:	408e      	lslgt	r6, r1
 800c032:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c036:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c03a:	bfd6      	itet	le
 800c03c:	f1c1 0120 	rsble	r1, r1, #32
 800c040:	4331      	orrgt	r1, r6
 800c042:	fa04 f101 	lslle.w	r1, r4, r1
 800c046:	ee07 1a90 	vmov	s15, r1
 800c04a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c04e:	3b01      	subs	r3, #1
 800c050:	ee17 1a90 	vmov	r1, s15
 800c054:	2501      	movs	r5, #1
 800c056:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c05a:	e7a8      	b.n	800bfae <_dtoa_r+0xf6>
 800c05c:	2101      	movs	r1, #1
 800c05e:	1ad2      	subs	r2, r2, r3
 800c060:	1e53      	subs	r3, r2, #1
 800c062:	9306      	str	r3, [sp, #24]
 800c064:	bf45      	ittet	mi
 800c066:	f1c2 0301 	rsbmi	r3, r2, #1
 800c06a:	9304      	strmi	r3, [sp, #16]
 800c06c:	2300      	movpl	r3, #0
 800c06e:	2300      	movmi	r3, #0
 800c070:	bf4c      	ite	mi
 800c072:	9306      	strmi	r3, [sp, #24]
 800c074:	9304      	strpl	r3, [sp, #16]
 800c076:	f1b8 0f00 	cmp.w	r8, #0
 800c07a:	910c      	str	r1, [sp, #48]	@ 0x30
 800c07c:	db18      	blt.n	800c0b0 <_dtoa_r+0x1f8>
 800c07e:	9b06      	ldr	r3, [sp, #24]
 800c080:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c084:	4443      	add	r3, r8
 800c086:	9306      	str	r3, [sp, #24]
 800c088:	2300      	movs	r3, #0
 800c08a:	9a07      	ldr	r2, [sp, #28]
 800c08c:	2a09      	cmp	r2, #9
 800c08e:	d845      	bhi.n	800c11c <_dtoa_r+0x264>
 800c090:	2a05      	cmp	r2, #5
 800c092:	bfc4      	itt	gt
 800c094:	3a04      	subgt	r2, #4
 800c096:	9207      	strgt	r2, [sp, #28]
 800c098:	9a07      	ldr	r2, [sp, #28]
 800c09a:	f1a2 0202 	sub.w	r2, r2, #2
 800c09e:	bfcc      	ite	gt
 800c0a0:	2400      	movgt	r4, #0
 800c0a2:	2401      	movle	r4, #1
 800c0a4:	2a03      	cmp	r2, #3
 800c0a6:	d844      	bhi.n	800c132 <_dtoa_r+0x27a>
 800c0a8:	e8df f002 	tbb	[pc, r2]
 800c0ac:	0b173634 	.word	0x0b173634
 800c0b0:	9b04      	ldr	r3, [sp, #16]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	eba3 0308 	sub.w	r3, r3, r8
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	920a      	str	r2, [sp, #40]	@ 0x28
 800c0bc:	f1c8 0300 	rsb	r3, r8, #0
 800c0c0:	e7e3      	b.n	800c08a <_dtoa_r+0x1d2>
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	9208      	str	r2, [sp, #32]
 800c0c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0c8:	eb08 0b02 	add.w	fp, r8, r2
 800c0cc:	f10b 0a01 	add.w	sl, fp, #1
 800c0d0:	4652      	mov	r2, sl
 800c0d2:	2a01      	cmp	r2, #1
 800c0d4:	bfb8      	it	lt
 800c0d6:	2201      	movlt	r2, #1
 800c0d8:	e006      	b.n	800c0e8 <_dtoa_r+0x230>
 800c0da:	2201      	movs	r2, #1
 800c0dc:	9208      	str	r2, [sp, #32]
 800c0de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	dd29      	ble.n	800c138 <_dtoa_r+0x280>
 800c0e4:	4693      	mov	fp, r2
 800c0e6:	4692      	mov	sl, r2
 800c0e8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	2004      	movs	r0, #4
 800c0f0:	f100 0614 	add.w	r6, r0, #20
 800c0f4:	4296      	cmp	r6, r2
 800c0f6:	d926      	bls.n	800c146 <_dtoa_r+0x28e>
 800c0f8:	6079      	str	r1, [r7, #4]
 800c0fa:	4648      	mov	r0, r9
 800c0fc:	9305      	str	r3, [sp, #20]
 800c0fe:	f000 fd39 	bl	800cb74 <_Balloc>
 800c102:	9b05      	ldr	r3, [sp, #20]
 800c104:	4607      	mov	r7, r0
 800c106:	2800      	cmp	r0, #0
 800c108:	d13e      	bne.n	800c188 <_dtoa_r+0x2d0>
 800c10a:	4b1e      	ldr	r3, [pc, #120]	@ (800c184 <_dtoa_r+0x2cc>)
 800c10c:	4602      	mov	r2, r0
 800c10e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c112:	e6ea      	b.n	800beea <_dtoa_r+0x32>
 800c114:	2200      	movs	r2, #0
 800c116:	e7e1      	b.n	800c0dc <_dtoa_r+0x224>
 800c118:	2200      	movs	r2, #0
 800c11a:	e7d3      	b.n	800c0c4 <_dtoa_r+0x20c>
 800c11c:	2401      	movs	r4, #1
 800c11e:	2200      	movs	r2, #0
 800c120:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c124:	f04f 3bff 	mov.w	fp, #4294967295
 800c128:	2100      	movs	r1, #0
 800c12a:	46da      	mov	sl, fp
 800c12c:	2212      	movs	r2, #18
 800c12e:	9109      	str	r1, [sp, #36]	@ 0x24
 800c130:	e7da      	b.n	800c0e8 <_dtoa_r+0x230>
 800c132:	2201      	movs	r2, #1
 800c134:	9208      	str	r2, [sp, #32]
 800c136:	e7f5      	b.n	800c124 <_dtoa_r+0x26c>
 800c138:	f04f 0b01 	mov.w	fp, #1
 800c13c:	46da      	mov	sl, fp
 800c13e:	465a      	mov	r2, fp
 800c140:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c144:	e7d0      	b.n	800c0e8 <_dtoa_r+0x230>
 800c146:	3101      	adds	r1, #1
 800c148:	0040      	lsls	r0, r0, #1
 800c14a:	e7d1      	b.n	800c0f0 <_dtoa_r+0x238>
 800c14c:	f3af 8000 	nop.w
 800c150:	636f4361 	.word	0x636f4361
 800c154:	3fd287a7 	.word	0x3fd287a7
 800c158:	8b60c8b3 	.word	0x8b60c8b3
 800c15c:	3fc68a28 	.word	0x3fc68a28
 800c160:	509f79fb 	.word	0x509f79fb
 800c164:	3fd34413 	.word	0x3fd34413
 800c168:	0800e4a5 	.word	0x0800e4a5
 800c16c:	0800e4bc 	.word	0x0800e4bc
 800c170:	7ff00000 	.word	0x7ff00000
 800c174:	0800e4a1 	.word	0x0800e4a1
 800c178:	0800e475 	.word	0x0800e475
 800c17c:	0800e474 	.word	0x0800e474
 800c180:	0800e610 	.word	0x0800e610
 800c184:	0800e514 	.word	0x0800e514
 800c188:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c18c:	f1ba 0f0e 	cmp.w	sl, #14
 800c190:	6010      	str	r0, [r2, #0]
 800c192:	d86e      	bhi.n	800c272 <_dtoa_r+0x3ba>
 800c194:	2c00      	cmp	r4, #0
 800c196:	d06c      	beq.n	800c272 <_dtoa_r+0x3ba>
 800c198:	f1b8 0f00 	cmp.w	r8, #0
 800c19c:	f340 80b4 	ble.w	800c308 <_dtoa_r+0x450>
 800c1a0:	4ac8      	ldr	r2, [pc, #800]	@ (800c4c4 <_dtoa_r+0x60c>)
 800c1a2:	f008 010f 	and.w	r1, r8, #15
 800c1a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c1aa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c1ae:	ed92 7b00 	vldr	d7, [r2]
 800c1b2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c1b6:	f000 809b 	beq.w	800c2f0 <_dtoa_r+0x438>
 800c1ba:	4ac3      	ldr	r2, [pc, #780]	@ (800c4c8 <_dtoa_r+0x610>)
 800c1bc:	ed92 6b08 	vldr	d6, [r2, #32]
 800c1c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c1c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c1c8:	f001 010f 	and.w	r1, r1, #15
 800c1cc:	2203      	movs	r2, #3
 800c1ce:	48be      	ldr	r0, [pc, #760]	@ (800c4c8 <_dtoa_r+0x610>)
 800c1d0:	2900      	cmp	r1, #0
 800c1d2:	f040 808f 	bne.w	800c2f4 <_dtoa_r+0x43c>
 800c1d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c1da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c1de:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c1e2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c1e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1e8:	2900      	cmp	r1, #0
 800c1ea:	f000 80b3 	beq.w	800c354 <_dtoa_r+0x49c>
 800c1ee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c1f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fa:	f140 80ab 	bpl.w	800c354 <_dtoa_r+0x49c>
 800c1fe:	f1ba 0f00 	cmp.w	sl, #0
 800c202:	f000 80a7 	beq.w	800c354 <_dtoa_r+0x49c>
 800c206:	f1bb 0f00 	cmp.w	fp, #0
 800c20a:	dd30      	ble.n	800c26e <_dtoa_r+0x3b6>
 800c20c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c210:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c214:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c218:	f108 31ff 	add.w	r1, r8, #4294967295
 800c21c:	9105      	str	r1, [sp, #20]
 800c21e:	3201      	adds	r2, #1
 800c220:	465c      	mov	r4, fp
 800c222:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c226:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c22a:	ee07 2a90 	vmov	s15, r2
 800c22e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c232:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c236:	ee15 2a90 	vmov	r2, s11
 800c23a:	ec51 0b15 	vmov	r0, r1, d5
 800c23e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c242:	2c00      	cmp	r4, #0
 800c244:	f040 808a 	bne.w	800c35c <_dtoa_r+0x4a4>
 800c248:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c24c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c250:	ec41 0b17 	vmov	d7, r0, r1
 800c254:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25c:	f300 826a 	bgt.w	800c734 <_dtoa_r+0x87c>
 800c260:	eeb1 7b47 	vneg.f64	d7, d7
 800c264:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26c:	d423      	bmi.n	800c2b6 <_dtoa_r+0x3fe>
 800c26e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c272:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c274:	2a00      	cmp	r2, #0
 800c276:	f2c0 8129 	blt.w	800c4cc <_dtoa_r+0x614>
 800c27a:	f1b8 0f0e 	cmp.w	r8, #14
 800c27e:	f300 8125 	bgt.w	800c4cc <_dtoa_r+0x614>
 800c282:	4b90      	ldr	r3, [pc, #576]	@ (800c4c4 <_dtoa_r+0x60c>)
 800c284:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c288:	ed93 6b00 	vldr	d6, [r3]
 800c28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f280 80c8 	bge.w	800c424 <_dtoa_r+0x56c>
 800c294:	f1ba 0f00 	cmp.w	sl, #0
 800c298:	f300 80c4 	bgt.w	800c424 <_dtoa_r+0x56c>
 800c29c:	d10b      	bne.n	800c2b6 <_dtoa_r+0x3fe>
 800c29e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c2a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c2a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b2:	f2c0 823c 	blt.w	800c72e <_dtoa_r+0x876>
 800c2b6:	2400      	movs	r4, #0
 800c2b8:	4625      	mov	r5, r4
 800c2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2bc:	43db      	mvns	r3, r3
 800c2be:	9305      	str	r3, [sp, #20]
 800c2c0:	463e      	mov	r6, r7
 800c2c2:	f04f 0800 	mov.w	r8, #0
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4648      	mov	r0, r9
 800c2ca:	f000 fc93 	bl	800cbf4 <_Bfree>
 800c2ce:	2d00      	cmp	r5, #0
 800c2d0:	f000 80a2 	beq.w	800c418 <_dtoa_r+0x560>
 800c2d4:	f1b8 0f00 	cmp.w	r8, #0
 800c2d8:	d005      	beq.n	800c2e6 <_dtoa_r+0x42e>
 800c2da:	45a8      	cmp	r8, r5
 800c2dc:	d003      	beq.n	800c2e6 <_dtoa_r+0x42e>
 800c2de:	4641      	mov	r1, r8
 800c2e0:	4648      	mov	r0, r9
 800c2e2:	f000 fc87 	bl	800cbf4 <_Bfree>
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	4648      	mov	r0, r9
 800c2ea:	f000 fc83 	bl	800cbf4 <_Bfree>
 800c2ee:	e093      	b.n	800c418 <_dtoa_r+0x560>
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	e76c      	b.n	800c1ce <_dtoa_r+0x316>
 800c2f4:	07cc      	lsls	r4, r1, #31
 800c2f6:	d504      	bpl.n	800c302 <_dtoa_r+0x44a>
 800c2f8:	ed90 6b00 	vldr	d6, [r0]
 800c2fc:	3201      	adds	r2, #1
 800c2fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c302:	1049      	asrs	r1, r1, #1
 800c304:	3008      	adds	r0, #8
 800c306:	e763      	b.n	800c1d0 <_dtoa_r+0x318>
 800c308:	d022      	beq.n	800c350 <_dtoa_r+0x498>
 800c30a:	f1c8 0100 	rsb	r1, r8, #0
 800c30e:	4a6d      	ldr	r2, [pc, #436]	@ (800c4c4 <_dtoa_r+0x60c>)
 800c310:	f001 000f 	and.w	r0, r1, #15
 800c314:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c318:	ed92 7b00 	vldr	d7, [r2]
 800c31c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c320:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c324:	4868      	ldr	r0, [pc, #416]	@ (800c4c8 <_dtoa_r+0x610>)
 800c326:	1109      	asrs	r1, r1, #4
 800c328:	2400      	movs	r4, #0
 800c32a:	2202      	movs	r2, #2
 800c32c:	b929      	cbnz	r1, 800c33a <_dtoa_r+0x482>
 800c32e:	2c00      	cmp	r4, #0
 800c330:	f43f af57 	beq.w	800c1e2 <_dtoa_r+0x32a>
 800c334:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c338:	e753      	b.n	800c1e2 <_dtoa_r+0x32a>
 800c33a:	07ce      	lsls	r6, r1, #31
 800c33c:	d505      	bpl.n	800c34a <_dtoa_r+0x492>
 800c33e:	ed90 6b00 	vldr	d6, [r0]
 800c342:	3201      	adds	r2, #1
 800c344:	2401      	movs	r4, #1
 800c346:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c34a:	1049      	asrs	r1, r1, #1
 800c34c:	3008      	adds	r0, #8
 800c34e:	e7ed      	b.n	800c32c <_dtoa_r+0x474>
 800c350:	2202      	movs	r2, #2
 800c352:	e746      	b.n	800c1e2 <_dtoa_r+0x32a>
 800c354:	f8cd 8014 	str.w	r8, [sp, #20]
 800c358:	4654      	mov	r4, sl
 800c35a:	e762      	b.n	800c222 <_dtoa_r+0x36a>
 800c35c:	4a59      	ldr	r2, [pc, #356]	@ (800c4c4 <_dtoa_r+0x60c>)
 800c35e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c362:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c366:	9a08      	ldr	r2, [sp, #32]
 800c368:	ec41 0b17 	vmov	d7, r0, r1
 800c36c:	443c      	add	r4, r7
 800c36e:	b34a      	cbz	r2, 800c3c4 <_dtoa_r+0x50c>
 800c370:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c374:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c378:	463e      	mov	r6, r7
 800c37a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c37e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c382:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c386:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c38a:	ee14 2a90 	vmov	r2, s9
 800c38e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c392:	3230      	adds	r2, #48	@ 0x30
 800c394:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c398:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3a0:	f806 2b01 	strb.w	r2, [r6], #1
 800c3a4:	d438      	bmi.n	800c418 <_dtoa_r+0x560>
 800c3a6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c3aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b2:	d46e      	bmi.n	800c492 <_dtoa_r+0x5da>
 800c3b4:	42a6      	cmp	r6, r4
 800c3b6:	f43f af5a 	beq.w	800c26e <_dtoa_r+0x3b6>
 800c3ba:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c3be:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c3c2:	e7e0      	b.n	800c386 <_dtoa_r+0x4ce>
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	463e      	mov	r6, r7
 800c3c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c3cc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c3d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c3d4:	ee14 2a90 	vmov	r2, s9
 800c3d8:	3230      	adds	r2, #48	@ 0x30
 800c3da:	f806 2b01 	strb.w	r2, [r6], #1
 800c3de:	42a6      	cmp	r6, r4
 800c3e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c3e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c3e8:	d119      	bne.n	800c41e <_dtoa_r+0x566>
 800c3ea:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c3ee:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c3f2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3fa:	dc4a      	bgt.n	800c492 <_dtoa_r+0x5da>
 800c3fc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c400:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c408:	f57f af31 	bpl.w	800c26e <_dtoa_r+0x3b6>
 800c40c:	460e      	mov	r6, r1
 800c40e:	3901      	subs	r1, #1
 800c410:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c414:	2b30      	cmp	r3, #48	@ 0x30
 800c416:	d0f9      	beq.n	800c40c <_dtoa_r+0x554>
 800c418:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c41c:	e027      	b.n	800c46e <_dtoa_r+0x5b6>
 800c41e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c422:	e7d5      	b.n	800c3d0 <_dtoa_r+0x518>
 800c424:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c428:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c42c:	463e      	mov	r6, r7
 800c42e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c432:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c436:	ee15 3a10 	vmov	r3, s10
 800c43a:	3330      	adds	r3, #48	@ 0x30
 800c43c:	f806 3b01 	strb.w	r3, [r6], #1
 800c440:	1bf3      	subs	r3, r6, r7
 800c442:	459a      	cmp	sl, r3
 800c444:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c448:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c44c:	d132      	bne.n	800c4b4 <_dtoa_r+0x5fc>
 800c44e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c452:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45a:	dc18      	bgt.n	800c48e <_dtoa_r+0x5d6>
 800c45c:	eeb4 7b46 	vcmp.f64	d7, d6
 800c460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c464:	d103      	bne.n	800c46e <_dtoa_r+0x5b6>
 800c466:	ee15 3a10 	vmov	r3, s10
 800c46a:	07db      	lsls	r3, r3, #31
 800c46c:	d40f      	bmi.n	800c48e <_dtoa_r+0x5d6>
 800c46e:	9901      	ldr	r1, [sp, #4]
 800c470:	4648      	mov	r0, r9
 800c472:	f000 fbbf 	bl	800cbf4 <_Bfree>
 800c476:	2300      	movs	r3, #0
 800c478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c47a:	7033      	strb	r3, [r6, #0]
 800c47c:	f108 0301 	add.w	r3, r8, #1
 800c480:	6013      	str	r3, [r2, #0]
 800c482:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c484:	2b00      	cmp	r3, #0
 800c486:	f000 824b 	beq.w	800c920 <_dtoa_r+0xa68>
 800c48a:	601e      	str	r6, [r3, #0]
 800c48c:	e248      	b.n	800c920 <_dtoa_r+0xa68>
 800c48e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c492:	4633      	mov	r3, r6
 800c494:	461e      	mov	r6, r3
 800c496:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c49a:	2a39      	cmp	r2, #57	@ 0x39
 800c49c:	d106      	bne.n	800c4ac <_dtoa_r+0x5f4>
 800c49e:	429f      	cmp	r7, r3
 800c4a0:	d1f8      	bne.n	800c494 <_dtoa_r+0x5dc>
 800c4a2:	9a05      	ldr	r2, [sp, #20]
 800c4a4:	3201      	adds	r2, #1
 800c4a6:	9205      	str	r2, [sp, #20]
 800c4a8:	2230      	movs	r2, #48	@ 0x30
 800c4aa:	703a      	strb	r2, [r7, #0]
 800c4ac:	781a      	ldrb	r2, [r3, #0]
 800c4ae:	3201      	adds	r2, #1
 800c4b0:	701a      	strb	r2, [r3, #0]
 800c4b2:	e7b1      	b.n	800c418 <_dtoa_r+0x560>
 800c4b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c4b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c0:	d1b5      	bne.n	800c42e <_dtoa_r+0x576>
 800c4c2:	e7d4      	b.n	800c46e <_dtoa_r+0x5b6>
 800c4c4:	0800e610 	.word	0x0800e610
 800c4c8:	0800e5e8 	.word	0x0800e5e8
 800c4cc:	9908      	ldr	r1, [sp, #32]
 800c4ce:	2900      	cmp	r1, #0
 800c4d0:	f000 80e9 	beq.w	800c6a6 <_dtoa_r+0x7ee>
 800c4d4:	9907      	ldr	r1, [sp, #28]
 800c4d6:	2901      	cmp	r1, #1
 800c4d8:	f300 80cb 	bgt.w	800c672 <_dtoa_r+0x7ba>
 800c4dc:	2d00      	cmp	r5, #0
 800c4de:	f000 80c4 	beq.w	800c66a <_dtoa_r+0x7b2>
 800c4e2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c4e6:	9e04      	ldr	r6, [sp, #16]
 800c4e8:	461c      	mov	r4, r3
 800c4ea:	9305      	str	r3, [sp, #20]
 800c4ec:	9b04      	ldr	r3, [sp, #16]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	9b06      	ldr	r3, [sp, #24]
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	4413      	add	r3, r2
 800c4f8:	4648      	mov	r0, r9
 800c4fa:	9306      	str	r3, [sp, #24]
 800c4fc:	f000 fc2e 	bl	800cd5c <__i2b>
 800c500:	9b05      	ldr	r3, [sp, #20]
 800c502:	4605      	mov	r5, r0
 800c504:	b166      	cbz	r6, 800c520 <_dtoa_r+0x668>
 800c506:	9a06      	ldr	r2, [sp, #24]
 800c508:	2a00      	cmp	r2, #0
 800c50a:	dd09      	ble.n	800c520 <_dtoa_r+0x668>
 800c50c:	42b2      	cmp	r2, r6
 800c50e:	9904      	ldr	r1, [sp, #16]
 800c510:	bfa8      	it	ge
 800c512:	4632      	movge	r2, r6
 800c514:	1a89      	subs	r1, r1, r2
 800c516:	9104      	str	r1, [sp, #16]
 800c518:	9906      	ldr	r1, [sp, #24]
 800c51a:	1ab6      	subs	r6, r6, r2
 800c51c:	1a8a      	subs	r2, r1, r2
 800c51e:	9206      	str	r2, [sp, #24]
 800c520:	b30b      	cbz	r3, 800c566 <_dtoa_r+0x6ae>
 800c522:	9a08      	ldr	r2, [sp, #32]
 800c524:	2a00      	cmp	r2, #0
 800c526:	f000 80c5 	beq.w	800c6b4 <_dtoa_r+0x7fc>
 800c52a:	2c00      	cmp	r4, #0
 800c52c:	f000 80bf 	beq.w	800c6ae <_dtoa_r+0x7f6>
 800c530:	4629      	mov	r1, r5
 800c532:	4622      	mov	r2, r4
 800c534:	4648      	mov	r0, r9
 800c536:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c538:	f000 fcc8 	bl	800cecc <__pow5mult>
 800c53c:	9a01      	ldr	r2, [sp, #4]
 800c53e:	4601      	mov	r1, r0
 800c540:	4605      	mov	r5, r0
 800c542:	4648      	mov	r0, r9
 800c544:	f000 fc20 	bl	800cd88 <__multiply>
 800c548:	9901      	ldr	r1, [sp, #4]
 800c54a:	9005      	str	r0, [sp, #20]
 800c54c:	4648      	mov	r0, r9
 800c54e:	f000 fb51 	bl	800cbf4 <_Bfree>
 800c552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c554:	1b1b      	subs	r3, r3, r4
 800c556:	f000 80b0 	beq.w	800c6ba <_dtoa_r+0x802>
 800c55a:	9905      	ldr	r1, [sp, #20]
 800c55c:	461a      	mov	r2, r3
 800c55e:	4648      	mov	r0, r9
 800c560:	f000 fcb4 	bl	800cecc <__pow5mult>
 800c564:	9001      	str	r0, [sp, #4]
 800c566:	2101      	movs	r1, #1
 800c568:	4648      	mov	r0, r9
 800c56a:	f000 fbf7 	bl	800cd5c <__i2b>
 800c56e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c570:	4604      	mov	r4, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	f000 81da 	beq.w	800c92c <_dtoa_r+0xa74>
 800c578:	461a      	mov	r2, r3
 800c57a:	4601      	mov	r1, r0
 800c57c:	4648      	mov	r0, r9
 800c57e:	f000 fca5 	bl	800cecc <__pow5mult>
 800c582:	9b07      	ldr	r3, [sp, #28]
 800c584:	2b01      	cmp	r3, #1
 800c586:	4604      	mov	r4, r0
 800c588:	f300 80a0 	bgt.w	800c6cc <_dtoa_r+0x814>
 800c58c:	9b02      	ldr	r3, [sp, #8]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f040 8096 	bne.w	800c6c0 <_dtoa_r+0x808>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c59a:	2a00      	cmp	r2, #0
 800c59c:	f040 8092 	bne.w	800c6c4 <_dtoa_r+0x80c>
 800c5a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c5a4:	0d12      	lsrs	r2, r2, #20
 800c5a6:	0512      	lsls	r2, r2, #20
 800c5a8:	2a00      	cmp	r2, #0
 800c5aa:	f000 808d 	beq.w	800c6c8 <_dtoa_r+0x810>
 800c5ae:	9b04      	ldr	r3, [sp, #16]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	9304      	str	r3, [sp, #16]
 800c5b4:	9b06      	ldr	r3, [sp, #24]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	9306      	str	r3, [sp, #24]
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f000 81b9 	beq.w	800c938 <_dtoa_r+0xa80>
 800c5c6:	6922      	ldr	r2, [r4, #16]
 800c5c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c5cc:	6910      	ldr	r0, [r2, #16]
 800c5ce:	f000 fb79 	bl	800ccc4 <__hi0bits>
 800c5d2:	f1c0 0020 	rsb	r0, r0, #32
 800c5d6:	9b06      	ldr	r3, [sp, #24]
 800c5d8:	4418      	add	r0, r3
 800c5da:	f010 001f 	ands.w	r0, r0, #31
 800c5de:	f000 8081 	beq.w	800c6e4 <_dtoa_r+0x82c>
 800c5e2:	f1c0 0220 	rsb	r2, r0, #32
 800c5e6:	2a04      	cmp	r2, #4
 800c5e8:	dd73      	ble.n	800c6d2 <_dtoa_r+0x81a>
 800c5ea:	9b04      	ldr	r3, [sp, #16]
 800c5ec:	f1c0 001c 	rsb	r0, r0, #28
 800c5f0:	4403      	add	r3, r0
 800c5f2:	9304      	str	r3, [sp, #16]
 800c5f4:	9b06      	ldr	r3, [sp, #24]
 800c5f6:	4406      	add	r6, r0
 800c5f8:	4403      	add	r3, r0
 800c5fa:	9306      	str	r3, [sp, #24]
 800c5fc:	9b04      	ldr	r3, [sp, #16]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	dd05      	ble.n	800c60e <_dtoa_r+0x756>
 800c602:	9901      	ldr	r1, [sp, #4]
 800c604:	461a      	mov	r2, r3
 800c606:	4648      	mov	r0, r9
 800c608:	f000 fcba 	bl	800cf80 <__lshift>
 800c60c:	9001      	str	r0, [sp, #4]
 800c60e:	9b06      	ldr	r3, [sp, #24]
 800c610:	2b00      	cmp	r3, #0
 800c612:	dd05      	ble.n	800c620 <_dtoa_r+0x768>
 800c614:	4621      	mov	r1, r4
 800c616:	461a      	mov	r2, r3
 800c618:	4648      	mov	r0, r9
 800c61a:	f000 fcb1 	bl	800cf80 <__lshift>
 800c61e:	4604      	mov	r4, r0
 800c620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c622:	2b00      	cmp	r3, #0
 800c624:	d060      	beq.n	800c6e8 <_dtoa_r+0x830>
 800c626:	9801      	ldr	r0, [sp, #4]
 800c628:	4621      	mov	r1, r4
 800c62a:	f000 fd15 	bl	800d058 <__mcmp>
 800c62e:	2800      	cmp	r0, #0
 800c630:	da5a      	bge.n	800c6e8 <_dtoa_r+0x830>
 800c632:	f108 33ff 	add.w	r3, r8, #4294967295
 800c636:	9305      	str	r3, [sp, #20]
 800c638:	9901      	ldr	r1, [sp, #4]
 800c63a:	2300      	movs	r3, #0
 800c63c:	220a      	movs	r2, #10
 800c63e:	4648      	mov	r0, r9
 800c640:	f000 fafa 	bl	800cc38 <__multadd>
 800c644:	9b08      	ldr	r3, [sp, #32]
 800c646:	9001      	str	r0, [sp, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 8177 	beq.w	800c93c <_dtoa_r+0xa84>
 800c64e:	4629      	mov	r1, r5
 800c650:	2300      	movs	r3, #0
 800c652:	220a      	movs	r2, #10
 800c654:	4648      	mov	r0, r9
 800c656:	f000 faef 	bl	800cc38 <__multadd>
 800c65a:	f1bb 0f00 	cmp.w	fp, #0
 800c65e:	4605      	mov	r5, r0
 800c660:	dc6e      	bgt.n	800c740 <_dtoa_r+0x888>
 800c662:	9b07      	ldr	r3, [sp, #28]
 800c664:	2b02      	cmp	r3, #2
 800c666:	dc48      	bgt.n	800c6fa <_dtoa_r+0x842>
 800c668:	e06a      	b.n	800c740 <_dtoa_r+0x888>
 800c66a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c66c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c670:	e739      	b.n	800c4e6 <_dtoa_r+0x62e>
 800c672:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c676:	42a3      	cmp	r3, r4
 800c678:	db07      	blt.n	800c68a <_dtoa_r+0x7d2>
 800c67a:	f1ba 0f00 	cmp.w	sl, #0
 800c67e:	eba3 0404 	sub.w	r4, r3, r4
 800c682:	db0b      	blt.n	800c69c <_dtoa_r+0x7e4>
 800c684:	9e04      	ldr	r6, [sp, #16]
 800c686:	4652      	mov	r2, sl
 800c688:	e72f      	b.n	800c4ea <_dtoa_r+0x632>
 800c68a:	1ae2      	subs	r2, r4, r3
 800c68c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c68e:	9e04      	ldr	r6, [sp, #16]
 800c690:	4413      	add	r3, r2
 800c692:	930a      	str	r3, [sp, #40]	@ 0x28
 800c694:	4652      	mov	r2, sl
 800c696:	4623      	mov	r3, r4
 800c698:	2400      	movs	r4, #0
 800c69a:	e726      	b.n	800c4ea <_dtoa_r+0x632>
 800c69c:	9a04      	ldr	r2, [sp, #16]
 800c69e:	eba2 060a 	sub.w	r6, r2, sl
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	e721      	b.n	800c4ea <_dtoa_r+0x632>
 800c6a6:	9e04      	ldr	r6, [sp, #16]
 800c6a8:	9d08      	ldr	r5, [sp, #32]
 800c6aa:	461c      	mov	r4, r3
 800c6ac:	e72a      	b.n	800c504 <_dtoa_r+0x64c>
 800c6ae:	9a01      	ldr	r2, [sp, #4]
 800c6b0:	9205      	str	r2, [sp, #20]
 800c6b2:	e752      	b.n	800c55a <_dtoa_r+0x6a2>
 800c6b4:	9901      	ldr	r1, [sp, #4]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	e751      	b.n	800c55e <_dtoa_r+0x6a6>
 800c6ba:	9b05      	ldr	r3, [sp, #20]
 800c6bc:	9301      	str	r3, [sp, #4]
 800c6be:	e752      	b.n	800c566 <_dtoa_r+0x6ae>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e77b      	b.n	800c5bc <_dtoa_r+0x704>
 800c6c4:	9b02      	ldr	r3, [sp, #8]
 800c6c6:	e779      	b.n	800c5bc <_dtoa_r+0x704>
 800c6c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c6ca:	e778      	b.n	800c5be <_dtoa_r+0x706>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6d0:	e779      	b.n	800c5c6 <_dtoa_r+0x70e>
 800c6d2:	d093      	beq.n	800c5fc <_dtoa_r+0x744>
 800c6d4:	9b04      	ldr	r3, [sp, #16]
 800c6d6:	321c      	adds	r2, #28
 800c6d8:	4413      	add	r3, r2
 800c6da:	9304      	str	r3, [sp, #16]
 800c6dc:	9b06      	ldr	r3, [sp, #24]
 800c6de:	4416      	add	r6, r2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	e78a      	b.n	800c5fa <_dtoa_r+0x742>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	e7f5      	b.n	800c6d4 <_dtoa_r+0x81c>
 800c6e8:	f1ba 0f00 	cmp.w	sl, #0
 800c6ec:	f8cd 8014 	str.w	r8, [sp, #20]
 800c6f0:	46d3      	mov	fp, sl
 800c6f2:	dc21      	bgt.n	800c738 <_dtoa_r+0x880>
 800c6f4:	9b07      	ldr	r3, [sp, #28]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	dd1e      	ble.n	800c738 <_dtoa_r+0x880>
 800c6fa:	f1bb 0f00 	cmp.w	fp, #0
 800c6fe:	f47f addc 	bne.w	800c2ba <_dtoa_r+0x402>
 800c702:	4621      	mov	r1, r4
 800c704:	465b      	mov	r3, fp
 800c706:	2205      	movs	r2, #5
 800c708:	4648      	mov	r0, r9
 800c70a:	f000 fa95 	bl	800cc38 <__multadd>
 800c70e:	4601      	mov	r1, r0
 800c710:	4604      	mov	r4, r0
 800c712:	9801      	ldr	r0, [sp, #4]
 800c714:	f000 fca0 	bl	800d058 <__mcmp>
 800c718:	2800      	cmp	r0, #0
 800c71a:	f77f adce 	ble.w	800c2ba <_dtoa_r+0x402>
 800c71e:	463e      	mov	r6, r7
 800c720:	2331      	movs	r3, #49	@ 0x31
 800c722:	f806 3b01 	strb.w	r3, [r6], #1
 800c726:	9b05      	ldr	r3, [sp, #20]
 800c728:	3301      	adds	r3, #1
 800c72a:	9305      	str	r3, [sp, #20]
 800c72c:	e5c9      	b.n	800c2c2 <_dtoa_r+0x40a>
 800c72e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c732:	4654      	mov	r4, sl
 800c734:	4625      	mov	r5, r4
 800c736:	e7f2      	b.n	800c71e <_dtoa_r+0x866>
 800c738:	9b08      	ldr	r3, [sp, #32]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f000 8102 	beq.w	800c944 <_dtoa_r+0xa8c>
 800c740:	2e00      	cmp	r6, #0
 800c742:	dd05      	ble.n	800c750 <_dtoa_r+0x898>
 800c744:	4629      	mov	r1, r5
 800c746:	4632      	mov	r2, r6
 800c748:	4648      	mov	r0, r9
 800c74a:	f000 fc19 	bl	800cf80 <__lshift>
 800c74e:	4605      	mov	r5, r0
 800c750:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c752:	2b00      	cmp	r3, #0
 800c754:	d058      	beq.n	800c808 <_dtoa_r+0x950>
 800c756:	6869      	ldr	r1, [r5, #4]
 800c758:	4648      	mov	r0, r9
 800c75a:	f000 fa0b 	bl	800cb74 <_Balloc>
 800c75e:	4606      	mov	r6, r0
 800c760:	b928      	cbnz	r0, 800c76e <_dtoa_r+0x8b6>
 800c762:	4b82      	ldr	r3, [pc, #520]	@ (800c96c <_dtoa_r+0xab4>)
 800c764:	4602      	mov	r2, r0
 800c766:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c76a:	f7ff bbbe 	b.w	800beea <_dtoa_r+0x32>
 800c76e:	692a      	ldr	r2, [r5, #16]
 800c770:	3202      	adds	r2, #2
 800c772:	0092      	lsls	r2, r2, #2
 800c774:	f105 010c 	add.w	r1, r5, #12
 800c778:	300c      	adds	r0, #12
 800c77a:	f7ff fb06 	bl	800bd8a <memcpy>
 800c77e:	2201      	movs	r2, #1
 800c780:	4631      	mov	r1, r6
 800c782:	4648      	mov	r0, r9
 800c784:	f000 fbfc 	bl	800cf80 <__lshift>
 800c788:	1c7b      	adds	r3, r7, #1
 800c78a:	9304      	str	r3, [sp, #16]
 800c78c:	eb07 030b 	add.w	r3, r7, fp
 800c790:	9309      	str	r3, [sp, #36]	@ 0x24
 800c792:	9b02      	ldr	r3, [sp, #8]
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	46a8      	mov	r8, r5
 800c79a:	9308      	str	r3, [sp, #32]
 800c79c:	4605      	mov	r5, r0
 800c79e:	9b04      	ldr	r3, [sp, #16]
 800c7a0:	9801      	ldr	r0, [sp, #4]
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	f103 3bff 	add.w	fp, r3, #4294967295
 800c7a8:	f7ff fafd 	bl	800bda6 <quorem>
 800c7ac:	4641      	mov	r1, r8
 800c7ae:	9002      	str	r0, [sp, #8]
 800c7b0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c7b4:	9801      	ldr	r0, [sp, #4]
 800c7b6:	f000 fc4f 	bl	800d058 <__mcmp>
 800c7ba:	462a      	mov	r2, r5
 800c7bc:	9006      	str	r0, [sp, #24]
 800c7be:	4621      	mov	r1, r4
 800c7c0:	4648      	mov	r0, r9
 800c7c2:	f000 fc65 	bl	800d090 <__mdiff>
 800c7c6:	68c2      	ldr	r2, [r0, #12]
 800c7c8:	4606      	mov	r6, r0
 800c7ca:	b9fa      	cbnz	r2, 800c80c <_dtoa_r+0x954>
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	9801      	ldr	r0, [sp, #4]
 800c7d0:	f000 fc42 	bl	800d058 <__mcmp>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	4631      	mov	r1, r6
 800c7d8:	4648      	mov	r0, r9
 800c7da:	920a      	str	r2, [sp, #40]	@ 0x28
 800c7dc:	f000 fa0a 	bl	800cbf4 <_Bfree>
 800c7e0:	9b07      	ldr	r3, [sp, #28]
 800c7e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7e4:	9e04      	ldr	r6, [sp, #16]
 800c7e6:	ea42 0103 	orr.w	r1, r2, r3
 800c7ea:	9b08      	ldr	r3, [sp, #32]
 800c7ec:	4319      	orrs	r1, r3
 800c7ee:	d10f      	bne.n	800c810 <_dtoa_r+0x958>
 800c7f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c7f4:	d028      	beq.n	800c848 <_dtoa_r+0x990>
 800c7f6:	9b06      	ldr	r3, [sp, #24]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dd02      	ble.n	800c802 <_dtoa_r+0x94a>
 800c7fc:	9b02      	ldr	r3, [sp, #8]
 800c7fe:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c802:	f88b a000 	strb.w	sl, [fp]
 800c806:	e55e      	b.n	800c2c6 <_dtoa_r+0x40e>
 800c808:	4628      	mov	r0, r5
 800c80a:	e7bd      	b.n	800c788 <_dtoa_r+0x8d0>
 800c80c:	2201      	movs	r2, #1
 800c80e:	e7e2      	b.n	800c7d6 <_dtoa_r+0x91e>
 800c810:	9b06      	ldr	r3, [sp, #24]
 800c812:	2b00      	cmp	r3, #0
 800c814:	db04      	blt.n	800c820 <_dtoa_r+0x968>
 800c816:	9907      	ldr	r1, [sp, #28]
 800c818:	430b      	orrs	r3, r1
 800c81a:	9908      	ldr	r1, [sp, #32]
 800c81c:	430b      	orrs	r3, r1
 800c81e:	d120      	bne.n	800c862 <_dtoa_r+0x9aa>
 800c820:	2a00      	cmp	r2, #0
 800c822:	ddee      	ble.n	800c802 <_dtoa_r+0x94a>
 800c824:	9901      	ldr	r1, [sp, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	4648      	mov	r0, r9
 800c82a:	f000 fba9 	bl	800cf80 <__lshift>
 800c82e:	4621      	mov	r1, r4
 800c830:	9001      	str	r0, [sp, #4]
 800c832:	f000 fc11 	bl	800d058 <__mcmp>
 800c836:	2800      	cmp	r0, #0
 800c838:	dc03      	bgt.n	800c842 <_dtoa_r+0x98a>
 800c83a:	d1e2      	bne.n	800c802 <_dtoa_r+0x94a>
 800c83c:	f01a 0f01 	tst.w	sl, #1
 800c840:	d0df      	beq.n	800c802 <_dtoa_r+0x94a>
 800c842:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c846:	d1d9      	bne.n	800c7fc <_dtoa_r+0x944>
 800c848:	2339      	movs	r3, #57	@ 0x39
 800c84a:	f88b 3000 	strb.w	r3, [fp]
 800c84e:	4633      	mov	r3, r6
 800c850:	461e      	mov	r6, r3
 800c852:	3b01      	subs	r3, #1
 800c854:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c858:	2a39      	cmp	r2, #57	@ 0x39
 800c85a:	d052      	beq.n	800c902 <_dtoa_r+0xa4a>
 800c85c:	3201      	adds	r2, #1
 800c85e:	701a      	strb	r2, [r3, #0]
 800c860:	e531      	b.n	800c2c6 <_dtoa_r+0x40e>
 800c862:	2a00      	cmp	r2, #0
 800c864:	dd07      	ble.n	800c876 <_dtoa_r+0x9be>
 800c866:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c86a:	d0ed      	beq.n	800c848 <_dtoa_r+0x990>
 800c86c:	f10a 0301 	add.w	r3, sl, #1
 800c870:	f88b 3000 	strb.w	r3, [fp]
 800c874:	e527      	b.n	800c2c6 <_dtoa_r+0x40e>
 800c876:	9b04      	ldr	r3, [sp, #16]
 800c878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c87a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c87e:	4293      	cmp	r3, r2
 800c880:	d029      	beq.n	800c8d6 <_dtoa_r+0xa1e>
 800c882:	9901      	ldr	r1, [sp, #4]
 800c884:	2300      	movs	r3, #0
 800c886:	220a      	movs	r2, #10
 800c888:	4648      	mov	r0, r9
 800c88a:	f000 f9d5 	bl	800cc38 <__multadd>
 800c88e:	45a8      	cmp	r8, r5
 800c890:	9001      	str	r0, [sp, #4]
 800c892:	f04f 0300 	mov.w	r3, #0
 800c896:	f04f 020a 	mov.w	r2, #10
 800c89a:	4641      	mov	r1, r8
 800c89c:	4648      	mov	r0, r9
 800c89e:	d107      	bne.n	800c8b0 <_dtoa_r+0x9f8>
 800c8a0:	f000 f9ca 	bl	800cc38 <__multadd>
 800c8a4:	4680      	mov	r8, r0
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	e776      	b.n	800c79e <_dtoa_r+0x8e6>
 800c8b0:	f000 f9c2 	bl	800cc38 <__multadd>
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	4680      	mov	r8, r0
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	220a      	movs	r2, #10
 800c8bc:	4648      	mov	r0, r9
 800c8be:	f000 f9bb 	bl	800cc38 <__multadd>
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	e7f0      	b.n	800c8a8 <_dtoa_r+0x9f0>
 800c8c6:	f1bb 0f00 	cmp.w	fp, #0
 800c8ca:	bfcc      	ite	gt
 800c8cc:	465e      	movgt	r6, fp
 800c8ce:	2601      	movle	r6, #1
 800c8d0:	443e      	add	r6, r7
 800c8d2:	f04f 0800 	mov.w	r8, #0
 800c8d6:	9901      	ldr	r1, [sp, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	4648      	mov	r0, r9
 800c8dc:	f000 fb50 	bl	800cf80 <__lshift>
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	9001      	str	r0, [sp, #4]
 800c8e4:	f000 fbb8 	bl	800d058 <__mcmp>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	dcb0      	bgt.n	800c84e <_dtoa_r+0x996>
 800c8ec:	d102      	bne.n	800c8f4 <_dtoa_r+0xa3c>
 800c8ee:	f01a 0f01 	tst.w	sl, #1
 800c8f2:	d1ac      	bne.n	800c84e <_dtoa_r+0x996>
 800c8f4:	4633      	mov	r3, r6
 800c8f6:	461e      	mov	r6, r3
 800c8f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8fc:	2a30      	cmp	r2, #48	@ 0x30
 800c8fe:	d0fa      	beq.n	800c8f6 <_dtoa_r+0xa3e>
 800c900:	e4e1      	b.n	800c2c6 <_dtoa_r+0x40e>
 800c902:	429f      	cmp	r7, r3
 800c904:	d1a4      	bne.n	800c850 <_dtoa_r+0x998>
 800c906:	9b05      	ldr	r3, [sp, #20]
 800c908:	3301      	adds	r3, #1
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	2331      	movs	r3, #49	@ 0x31
 800c90e:	703b      	strb	r3, [r7, #0]
 800c910:	e4d9      	b.n	800c2c6 <_dtoa_r+0x40e>
 800c912:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c914:	4f16      	ldr	r7, [pc, #88]	@ (800c970 <_dtoa_r+0xab8>)
 800c916:	b11b      	cbz	r3, 800c920 <_dtoa_r+0xa68>
 800c918:	f107 0308 	add.w	r3, r7, #8
 800c91c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	4638      	mov	r0, r7
 800c922:	b011      	add	sp, #68	@ 0x44
 800c924:	ecbd 8b02 	vpop	{d8}
 800c928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92c:	9b07      	ldr	r3, [sp, #28]
 800c92e:	2b01      	cmp	r3, #1
 800c930:	f77f ae2c 	ble.w	800c58c <_dtoa_r+0x6d4>
 800c934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c936:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c938:	2001      	movs	r0, #1
 800c93a:	e64c      	b.n	800c5d6 <_dtoa_r+0x71e>
 800c93c:	f1bb 0f00 	cmp.w	fp, #0
 800c940:	f77f aed8 	ble.w	800c6f4 <_dtoa_r+0x83c>
 800c944:	463e      	mov	r6, r7
 800c946:	9801      	ldr	r0, [sp, #4]
 800c948:	4621      	mov	r1, r4
 800c94a:	f7ff fa2c 	bl	800bda6 <quorem>
 800c94e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c952:	f806 ab01 	strb.w	sl, [r6], #1
 800c956:	1bf2      	subs	r2, r6, r7
 800c958:	4593      	cmp	fp, r2
 800c95a:	ddb4      	ble.n	800c8c6 <_dtoa_r+0xa0e>
 800c95c:	9901      	ldr	r1, [sp, #4]
 800c95e:	2300      	movs	r3, #0
 800c960:	220a      	movs	r2, #10
 800c962:	4648      	mov	r0, r9
 800c964:	f000 f968 	bl	800cc38 <__multadd>
 800c968:	9001      	str	r0, [sp, #4]
 800c96a:	e7ec      	b.n	800c946 <_dtoa_r+0xa8e>
 800c96c:	0800e514 	.word	0x0800e514
 800c970:	0800e498 	.word	0x0800e498

0800c974 <_free_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	4605      	mov	r5, r0
 800c978:	2900      	cmp	r1, #0
 800c97a:	d041      	beq.n	800ca00 <_free_r+0x8c>
 800c97c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c980:	1f0c      	subs	r4, r1, #4
 800c982:	2b00      	cmp	r3, #0
 800c984:	bfb8      	it	lt
 800c986:	18e4      	addlt	r4, r4, r3
 800c988:	f000 f8e8 	bl	800cb5c <__malloc_lock>
 800c98c:	4a1d      	ldr	r2, [pc, #116]	@ (800ca04 <_free_r+0x90>)
 800c98e:	6813      	ldr	r3, [r2, #0]
 800c990:	b933      	cbnz	r3, 800c9a0 <_free_r+0x2c>
 800c992:	6063      	str	r3, [r4, #4]
 800c994:	6014      	str	r4, [r2, #0]
 800c996:	4628      	mov	r0, r5
 800c998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c99c:	f000 b8e4 	b.w	800cb68 <__malloc_unlock>
 800c9a0:	42a3      	cmp	r3, r4
 800c9a2:	d908      	bls.n	800c9b6 <_free_r+0x42>
 800c9a4:	6820      	ldr	r0, [r4, #0]
 800c9a6:	1821      	adds	r1, r4, r0
 800c9a8:	428b      	cmp	r3, r1
 800c9aa:	bf01      	itttt	eq
 800c9ac:	6819      	ldreq	r1, [r3, #0]
 800c9ae:	685b      	ldreq	r3, [r3, #4]
 800c9b0:	1809      	addeq	r1, r1, r0
 800c9b2:	6021      	streq	r1, [r4, #0]
 800c9b4:	e7ed      	b.n	800c992 <_free_r+0x1e>
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	b10b      	cbz	r3, 800c9c0 <_free_r+0x4c>
 800c9bc:	42a3      	cmp	r3, r4
 800c9be:	d9fa      	bls.n	800c9b6 <_free_r+0x42>
 800c9c0:	6811      	ldr	r1, [r2, #0]
 800c9c2:	1850      	adds	r0, r2, r1
 800c9c4:	42a0      	cmp	r0, r4
 800c9c6:	d10b      	bne.n	800c9e0 <_free_r+0x6c>
 800c9c8:	6820      	ldr	r0, [r4, #0]
 800c9ca:	4401      	add	r1, r0
 800c9cc:	1850      	adds	r0, r2, r1
 800c9ce:	4283      	cmp	r3, r0
 800c9d0:	6011      	str	r1, [r2, #0]
 800c9d2:	d1e0      	bne.n	800c996 <_free_r+0x22>
 800c9d4:	6818      	ldr	r0, [r3, #0]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	6053      	str	r3, [r2, #4]
 800c9da:	4408      	add	r0, r1
 800c9dc:	6010      	str	r0, [r2, #0]
 800c9de:	e7da      	b.n	800c996 <_free_r+0x22>
 800c9e0:	d902      	bls.n	800c9e8 <_free_r+0x74>
 800c9e2:	230c      	movs	r3, #12
 800c9e4:	602b      	str	r3, [r5, #0]
 800c9e6:	e7d6      	b.n	800c996 <_free_r+0x22>
 800c9e8:	6820      	ldr	r0, [r4, #0]
 800c9ea:	1821      	adds	r1, r4, r0
 800c9ec:	428b      	cmp	r3, r1
 800c9ee:	bf04      	itt	eq
 800c9f0:	6819      	ldreq	r1, [r3, #0]
 800c9f2:	685b      	ldreq	r3, [r3, #4]
 800c9f4:	6063      	str	r3, [r4, #4]
 800c9f6:	bf04      	itt	eq
 800c9f8:	1809      	addeq	r1, r1, r0
 800c9fa:	6021      	streq	r1, [r4, #0]
 800c9fc:	6054      	str	r4, [r2, #4]
 800c9fe:	e7ca      	b.n	800c996 <_free_r+0x22>
 800ca00:	bd38      	pop	{r3, r4, r5, pc}
 800ca02:	bf00      	nop
 800ca04:	24000a94 	.word	0x24000a94

0800ca08 <malloc>:
 800ca08:	4b02      	ldr	r3, [pc, #8]	@ (800ca14 <malloc+0xc>)
 800ca0a:	4601      	mov	r1, r0
 800ca0c:	6818      	ldr	r0, [r3, #0]
 800ca0e:	f000 b825 	b.w	800ca5c <_malloc_r>
 800ca12:	bf00      	nop
 800ca14:	2400003c 	.word	0x2400003c

0800ca18 <sbrk_aligned>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	4e0f      	ldr	r6, [pc, #60]	@ (800ca58 <sbrk_aligned+0x40>)
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	6831      	ldr	r1, [r6, #0]
 800ca20:	4605      	mov	r5, r0
 800ca22:	b911      	cbnz	r1, 800ca2a <sbrk_aligned+0x12>
 800ca24:	f001 f838 	bl	800da98 <_sbrk_r>
 800ca28:	6030      	str	r0, [r6, #0]
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f001 f833 	bl	800da98 <_sbrk_r>
 800ca32:	1c43      	adds	r3, r0, #1
 800ca34:	d103      	bne.n	800ca3e <sbrk_aligned+0x26>
 800ca36:	f04f 34ff 	mov.w	r4, #4294967295
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	bd70      	pop	{r4, r5, r6, pc}
 800ca3e:	1cc4      	adds	r4, r0, #3
 800ca40:	f024 0403 	bic.w	r4, r4, #3
 800ca44:	42a0      	cmp	r0, r4
 800ca46:	d0f8      	beq.n	800ca3a <sbrk_aligned+0x22>
 800ca48:	1a21      	subs	r1, r4, r0
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f001 f824 	bl	800da98 <_sbrk_r>
 800ca50:	3001      	adds	r0, #1
 800ca52:	d1f2      	bne.n	800ca3a <sbrk_aligned+0x22>
 800ca54:	e7ef      	b.n	800ca36 <sbrk_aligned+0x1e>
 800ca56:	bf00      	nop
 800ca58:	24000a90 	.word	0x24000a90

0800ca5c <_malloc_r>:
 800ca5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca60:	1ccd      	adds	r5, r1, #3
 800ca62:	f025 0503 	bic.w	r5, r5, #3
 800ca66:	3508      	adds	r5, #8
 800ca68:	2d0c      	cmp	r5, #12
 800ca6a:	bf38      	it	cc
 800ca6c:	250c      	movcc	r5, #12
 800ca6e:	2d00      	cmp	r5, #0
 800ca70:	4606      	mov	r6, r0
 800ca72:	db01      	blt.n	800ca78 <_malloc_r+0x1c>
 800ca74:	42a9      	cmp	r1, r5
 800ca76:	d904      	bls.n	800ca82 <_malloc_r+0x26>
 800ca78:	230c      	movs	r3, #12
 800ca7a:	6033      	str	r3, [r6, #0]
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb58 <_malloc_r+0xfc>
 800ca86:	f000 f869 	bl	800cb5c <__malloc_lock>
 800ca8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca8e:	461c      	mov	r4, r3
 800ca90:	bb44      	cbnz	r4, 800cae4 <_malloc_r+0x88>
 800ca92:	4629      	mov	r1, r5
 800ca94:	4630      	mov	r0, r6
 800ca96:	f7ff ffbf 	bl	800ca18 <sbrk_aligned>
 800ca9a:	1c43      	adds	r3, r0, #1
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	d158      	bne.n	800cb52 <_malloc_r+0xf6>
 800caa0:	f8d8 4000 	ldr.w	r4, [r8]
 800caa4:	4627      	mov	r7, r4
 800caa6:	2f00      	cmp	r7, #0
 800caa8:	d143      	bne.n	800cb32 <_malloc_r+0xd6>
 800caaa:	2c00      	cmp	r4, #0
 800caac:	d04b      	beq.n	800cb46 <_malloc_r+0xea>
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	4639      	mov	r1, r7
 800cab2:	4630      	mov	r0, r6
 800cab4:	eb04 0903 	add.w	r9, r4, r3
 800cab8:	f000 ffee 	bl	800da98 <_sbrk_r>
 800cabc:	4581      	cmp	r9, r0
 800cabe:	d142      	bne.n	800cb46 <_malloc_r+0xea>
 800cac0:	6821      	ldr	r1, [r4, #0]
 800cac2:	1a6d      	subs	r5, r5, r1
 800cac4:	4629      	mov	r1, r5
 800cac6:	4630      	mov	r0, r6
 800cac8:	f7ff ffa6 	bl	800ca18 <sbrk_aligned>
 800cacc:	3001      	adds	r0, #1
 800cace:	d03a      	beq.n	800cb46 <_malloc_r+0xea>
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	442b      	add	r3, r5
 800cad4:	6023      	str	r3, [r4, #0]
 800cad6:	f8d8 3000 	ldr.w	r3, [r8]
 800cada:	685a      	ldr	r2, [r3, #4]
 800cadc:	bb62      	cbnz	r2, 800cb38 <_malloc_r+0xdc>
 800cade:	f8c8 7000 	str.w	r7, [r8]
 800cae2:	e00f      	b.n	800cb04 <_malloc_r+0xa8>
 800cae4:	6822      	ldr	r2, [r4, #0]
 800cae6:	1b52      	subs	r2, r2, r5
 800cae8:	d420      	bmi.n	800cb2c <_malloc_r+0xd0>
 800caea:	2a0b      	cmp	r2, #11
 800caec:	d917      	bls.n	800cb1e <_malloc_r+0xc2>
 800caee:	1961      	adds	r1, r4, r5
 800caf0:	42a3      	cmp	r3, r4
 800caf2:	6025      	str	r5, [r4, #0]
 800caf4:	bf18      	it	ne
 800caf6:	6059      	strne	r1, [r3, #4]
 800caf8:	6863      	ldr	r3, [r4, #4]
 800cafa:	bf08      	it	eq
 800cafc:	f8c8 1000 	streq.w	r1, [r8]
 800cb00:	5162      	str	r2, [r4, r5]
 800cb02:	604b      	str	r3, [r1, #4]
 800cb04:	4630      	mov	r0, r6
 800cb06:	f000 f82f 	bl	800cb68 <__malloc_unlock>
 800cb0a:	f104 000b 	add.w	r0, r4, #11
 800cb0e:	1d23      	adds	r3, r4, #4
 800cb10:	f020 0007 	bic.w	r0, r0, #7
 800cb14:	1ac2      	subs	r2, r0, r3
 800cb16:	bf1c      	itt	ne
 800cb18:	1a1b      	subne	r3, r3, r0
 800cb1a:	50a3      	strne	r3, [r4, r2]
 800cb1c:	e7af      	b.n	800ca7e <_malloc_r+0x22>
 800cb1e:	6862      	ldr	r2, [r4, #4]
 800cb20:	42a3      	cmp	r3, r4
 800cb22:	bf0c      	ite	eq
 800cb24:	f8c8 2000 	streq.w	r2, [r8]
 800cb28:	605a      	strne	r2, [r3, #4]
 800cb2a:	e7eb      	b.n	800cb04 <_malloc_r+0xa8>
 800cb2c:	4623      	mov	r3, r4
 800cb2e:	6864      	ldr	r4, [r4, #4]
 800cb30:	e7ae      	b.n	800ca90 <_malloc_r+0x34>
 800cb32:	463c      	mov	r4, r7
 800cb34:	687f      	ldr	r7, [r7, #4]
 800cb36:	e7b6      	b.n	800caa6 <_malloc_r+0x4a>
 800cb38:	461a      	mov	r2, r3
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	42a3      	cmp	r3, r4
 800cb3e:	d1fb      	bne.n	800cb38 <_malloc_r+0xdc>
 800cb40:	2300      	movs	r3, #0
 800cb42:	6053      	str	r3, [r2, #4]
 800cb44:	e7de      	b.n	800cb04 <_malloc_r+0xa8>
 800cb46:	230c      	movs	r3, #12
 800cb48:	6033      	str	r3, [r6, #0]
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f000 f80c 	bl	800cb68 <__malloc_unlock>
 800cb50:	e794      	b.n	800ca7c <_malloc_r+0x20>
 800cb52:	6005      	str	r5, [r0, #0]
 800cb54:	e7d6      	b.n	800cb04 <_malloc_r+0xa8>
 800cb56:	bf00      	nop
 800cb58:	24000a94 	.word	0x24000a94

0800cb5c <__malloc_lock>:
 800cb5c:	4801      	ldr	r0, [pc, #4]	@ (800cb64 <__malloc_lock+0x8>)
 800cb5e:	f7ff b912 	b.w	800bd86 <__retarget_lock_acquire_recursive>
 800cb62:	bf00      	nop
 800cb64:	24000a8c 	.word	0x24000a8c

0800cb68 <__malloc_unlock>:
 800cb68:	4801      	ldr	r0, [pc, #4]	@ (800cb70 <__malloc_unlock+0x8>)
 800cb6a:	f7ff b90d 	b.w	800bd88 <__retarget_lock_release_recursive>
 800cb6e:	bf00      	nop
 800cb70:	24000a8c 	.word	0x24000a8c

0800cb74 <_Balloc>:
 800cb74:	b570      	push	{r4, r5, r6, lr}
 800cb76:	69c6      	ldr	r6, [r0, #28]
 800cb78:	4604      	mov	r4, r0
 800cb7a:	460d      	mov	r5, r1
 800cb7c:	b976      	cbnz	r6, 800cb9c <_Balloc+0x28>
 800cb7e:	2010      	movs	r0, #16
 800cb80:	f7ff ff42 	bl	800ca08 <malloc>
 800cb84:	4602      	mov	r2, r0
 800cb86:	61e0      	str	r0, [r4, #28]
 800cb88:	b920      	cbnz	r0, 800cb94 <_Balloc+0x20>
 800cb8a:	4b18      	ldr	r3, [pc, #96]	@ (800cbec <_Balloc+0x78>)
 800cb8c:	4818      	ldr	r0, [pc, #96]	@ (800cbf0 <_Balloc+0x7c>)
 800cb8e:	216b      	movs	r1, #107	@ 0x6b
 800cb90:	f000 ff92 	bl	800dab8 <__assert_func>
 800cb94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb98:	6006      	str	r6, [r0, #0]
 800cb9a:	60c6      	str	r6, [r0, #12]
 800cb9c:	69e6      	ldr	r6, [r4, #28]
 800cb9e:	68f3      	ldr	r3, [r6, #12]
 800cba0:	b183      	cbz	r3, 800cbc4 <_Balloc+0x50>
 800cba2:	69e3      	ldr	r3, [r4, #28]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbaa:	b9b8      	cbnz	r0, 800cbdc <_Balloc+0x68>
 800cbac:	2101      	movs	r1, #1
 800cbae:	fa01 f605 	lsl.w	r6, r1, r5
 800cbb2:	1d72      	adds	r2, r6, #5
 800cbb4:	0092      	lsls	r2, r2, #2
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f000 ff9c 	bl	800daf4 <_calloc_r>
 800cbbc:	b160      	cbz	r0, 800cbd8 <_Balloc+0x64>
 800cbbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbc2:	e00e      	b.n	800cbe2 <_Balloc+0x6e>
 800cbc4:	2221      	movs	r2, #33	@ 0x21
 800cbc6:	2104      	movs	r1, #4
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f000 ff93 	bl	800daf4 <_calloc_r>
 800cbce:	69e3      	ldr	r3, [r4, #28]
 800cbd0:	60f0      	str	r0, [r6, #12]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1e4      	bne.n	800cba2 <_Balloc+0x2e>
 800cbd8:	2000      	movs	r0, #0
 800cbda:	bd70      	pop	{r4, r5, r6, pc}
 800cbdc:	6802      	ldr	r2, [r0, #0]
 800cbde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbe8:	e7f7      	b.n	800cbda <_Balloc+0x66>
 800cbea:	bf00      	nop
 800cbec:	0800e4a5 	.word	0x0800e4a5
 800cbf0:	0800e525 	.word	0x0800e525

0800cbf4 <_Bfree>:
 800cbf4:	b570      	push	{r4, r5, r6, lr}
 800cbf6:	69c6      	ldr	r6, [r0, #28]
 800cbf8:	4605      	mov	r5, r0
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	b976      	cbnz	r6, 800cc1c <_Bfree+0x28>
 800cbfe:	2010      	movs	r0, #16
 800cc00:	f7ff ff02 	bl	800ca08 <malloc>
 800cc04:	4602      	mov	r2, r0
 800cc06:	61e8      	str	r0, [r5, #28]
 800cc08:	b920      	cbnz	r0, 800cc14 <_Bfree+0x20>
 800cc0a:	4b09      	ldr	r3, [pc, #36]	@ (800cc30 <_Bfree+0x3c>)
 800cc0c:	4809      	ldr	r0, [pc, #36]	@ (800cc34 <_Bfree+0x40>)
 800cc0e:	218f      	movs	r1, #143	@ 0x8f
 800cc10:	f000 ff52 	bl	800dab8 <__assert_func>
 800cc14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc18:	6006      	str	r6, [r0, #0]
 800cc1a:	60c6      	str	r6, [r0, #12]
 800cc1c:	b13c      	cbz	r4, 800cc2e <_Bfree+0x3a>
 800cc1e:	69eb      	ldr	r3, [r5, #28]
 800cc20:	6862      	ldr	r2, [r4, #4]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc28:	6021      	str	r1, [r4, #0]
 800cc2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	0800e4a5 	.word	0x0800e4a5
 800cc34:	0800e525 	.word	0x0800e525

0800cc38 <__multadd>:
 800cc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3c:	690d      	ldr	r5, [r1, #16]
 800cc3e:	4607      	mov	r7, r0
 800cc40:	460c      	mov	r4, r1
 800cc42:	461e      	mov	r6, r3
 800cc44:	f101 0c14 	add.w	ip, r1, #20
 800cc48:	2000      	movs	r0, #0
 800cc4a:	f8dc 3000 	ldr.w	r3, [ip]
 800cc4e:	b299      	uxth	r1, r3
 800cc50:	fb02 6101 	mla	r1, r2, r1, r6
 800cc54:	0c1e      	lsrs	r6, r3, #16
 800cc56:	0c0b      	lsrs	r3, r1, #16
 800cc58:	fb02 3306 	mla	r3, r2, r6, r3
 800cc5c:	b289      	uxth	r1, r1
 800cc5e:	3001      	adds	r0, #1
 800cc60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc64:	4285      	cmp	r5, r0
 800cc66:	f84c 1b04 	str.w	r1, [ip], #4
 800cc6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc6e:	dcec      	bgt.n	800cc4a <__multadd+0x12>
 800cc70:	b30e      	cbz	r6, 800ccb6 <__multadd+0x7e>
 800cc72:	68a3      	ldr	r3, [r4, #8]
 800cc74:	42ab      	cmp	r3, r5
 800cc76:	dc19      	bgt.n	800ccac <__multadd+0x74>
 800cc78:	6861      	ldr	r1, [r4, #4]
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	3101      	adds	r1, #1
 800cc7e:	f7ff ff79 	bl	800cb74 <_Balloc>
 800cc82:	4680      	mov	r8, r0
 800cc84:	b928      	cbnz	r0, 800cc92 <__multadd+0x5a>
 800cc86:	4602      	mov	r2, r0
 800cc88:	4b0c      	ldr	r3, [pc, #48]	@ (800ccbc <__multadd+0x84>)
 800cc8a:	480d      	ldr	r0, [pc, #52]	@ (800ccc0 <__multadd+0x88>)
 800cc8c:	21ba      	movs	r1, #186	@ 0xba
 800cc8e:	f000 ff13 	bl	800dab8 <__assert_func>
 800cc92:	6922      	ldr	r2, [r4, #16]
 800cc94:	3202      	adds	r2, #2
 800cc96:	f104 010c 	add.w	r1, r4, #12
 800cc9a:	0092      	lsls	r2, r2, #2
 800cc9c:	300c      	adds	r0, #12
 800cc9e:	f7ff f874 	bl	800bd8a <memcpy>
 800cca2:	4621      	mov	r1, r4
 800cca4:	4638      	mov	r0, r7
 800cca6:	f7ff ffa5 	bl	800cbf4 <_Bfree>
 800ccaa:	4644      	mov	r4, r8
 800ccac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ccb0:	3501      	adds	r5, #1
 800ccb2:	615e      	str	r6, [r3, #20]
 800ccb4:	6125      	str	r5, [r4, #16]
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbc:	0800e514 	.word	0x0800e514
 800ccc0:	0800e525 	.word	0x0800e525

0800ccc4 <__hi0bits>:
 800ccc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ccc8:	4603      	mov	r3, r0
 800ccca:	bf36      	itet	cc
 800cccc:	0403      	lslcc	r3, r0, #16
 800ccce:	2000      	movcs	r0, #0
 800ccd0:	2010      	movcc	r0, #16
 800ccd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccd6:	bf3c      	itt	cc
 800ccd8:	021b      	lslcc	r3, r3, #8
 800ccda:	3008      	addcc	r0, #8
 800ccdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cce0:	bf3c      	itt	cc
 800cce2:	011b      	lslcc	r3, r3, #4
 800cce4:	3004      	addcc	r0, #4
 800cce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccea:	bf3c      	itt	cc
 800ccec:	009b      	lslcc	r3, r3, #2
 800ccee:	3002      	addcc	r0, #2
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	db05      	blt.n	800cd00 <__hi0bits+0x3c>
 800ccf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ccf8:	f100 0001 	add.w	r0, r0, #1
 800ccfc:	bf08      	it	eq
 800ccfe:	2020      	moveq	r0, #32
 800cd00:	4770      	bx	lr

0800cd02 <__lo0bits>:
 800cd02:	6803      	ldr	r3, [r0, #0]
 800cd04:	4602      	mov	r2, r0
 800cd06:	f013 0007 	ands.w	r0, r3, #7
 800cd0a:	d00b      	beq.n	800cd24 <__lo0bits+0x22>
 800cd0c:	07d9      	lsls	r1, r3, #31
 800cd0e:	d421      	bmi.n	800cd54 <__lo0bits+0x52>
 800cd10:	0798      	lsls	r0, r3, #30
 800cd12:	bf49      	itett	mi
 800cd14:	085b      	lsrmi	r3, r3, #1
 800cd16:	089b      	lsrpl	r3, r3, #2
 800cd18:	2001      	movmi	r0, #1
 800cd1a:	6013      	strmi	r3, [r2, #0]
 800cd1c:	bf5c      	itt	pl
 800cd1e:	6013      	strpl	r3, [r2, #0]
 800cd20:	2002      	movpl	r0, #2
 800cd22:	4770      	bx	lr
 800cd24:	b299      	uxth	r1, r3
 800cd26:	b909      	cbnz	r1, 800cd2c <__lo0bits+0x2a>
 800cd28:	0c1b      	lsrs	r3, r3, #16
 800cd2a:	2010      	movs	r0, #16
 800cd2c:	b2d9      	uxtb	r1, r3
 800cd2e:	b909      	cbnz	r1, 800cd34 <__lo0bits+0x32>
 800cd30:	3008      	adds	r0, #8
 800cd32:	0a1b      	lsrs	r3, r3, #8
 800cd34:	0719      	lsls	r1, r3, #28
 800cd36:	bf04      	itt	eq
 800cd38:	091b      	lsreq	r3, r3, #4
 800cd3a:	3004      	addeq	r0, #4
 800cd3c:	0799      	lsls	r1, r3, #30
 800cd3e:	bf04      	itt	eq
 800cd40:	089b      	lsreq	r3, r3, #2
 800cd42:	3002      	addeq	r0, #2
 800cd44:	07d9      	lsls	r1, r3, #31
 800cd46:	d403      	bmi.n	800cd50 <__lo0bits+0x4e>
 800cd48:	085b      	lsrs	r3, r3, #1
 800cd4a:	f100 0001 	add.w	r0, r0, #1
 800cd4e:	d003      	beq.n	800cd58 <__lo0bits+0x56>
 800cd50:	6013      	str	r3, [r2, #0]
 800cd52:	4770      	bx	lr
 800cd54:	2000      	movs	r0, #0
 800cd56:	4770      	bx	lr
 800cd58:	2020      	movs	r0, #32
 800cd5a:	4770      	bx	lr

0800cd5c <__i2b>:
 800cd5c:	b510      	push	{r4, lr}
 800cd5e:	460c      	mov	r4, r1
 800cd60:	2101      	movs	r1, #1
 800cd62:	f7ff ff07 	bl	800cb74 <_Balloc>
 800cd66:	4602      	mov	r2, r0
 800cd68:	b928      	cbnz	r0, 800cd76 <__i2b+0x1a>
 800cd6a:	4b05      	ldr	r3, [pc, #20]	@ (800cd80 <__i2b+0x24>)
 800cd6c:	4805      	ldr	r0, [pc, #20]	@ (800cd84 <__i2b+0x28>)
 800cd6e:	f240 1145 	movw	r1, #325	@ 0x145
 800cd72:	f000 fea1 	bl	800dab8 <__assert_func>
 800cd76:	2301      	movs	r3, #1
 800cd78:	6144      	str	r4, [r0, #20]
 800cd7a:	6103      	str	r3, [r0, #16]
 800cd7c:	bd10      	pop	{r4, pc}
 800cd7e:	bf00      	nop
 800cd80:	0800e514 	.word	0x0800e514
 800cd84:	0800e525 	.word	0x0800e525

0800cd88 <__multiply>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	4617      	mov	r7, r2
 800cd8e:	690a      	ldr	r2, [r1, #16]
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	bfa8      	it	ge
 800cd96:	463b      	movge	r3, r7
 800cd98:	4689      	mov	r9, r1
 800cd9a:	bfa4      	itt	ge
 800cd9c:	460f      	movge	r7, r1
 800cd9e:	4699      	movge	r9, r3
 800cda0:	693d      	ldr	r5, [r7, #16]
 800cda2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	6879      	ldr	r1, [r7, #4]
 800cdaa:	eb05 060a 	add.w	r6, r5, sl
 800cdae:	42b3      	cmp	r3, r6
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	bfb8      	it	lt
 800cdb4:	3101      	addlt	r1, #1
 800cdb6:	f7ff fedd 	bl	800cb74 <_Balloc>
 800cdba:	b930      	cbnz	r0, 800cdca <__multiply+0x42>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	4b41      	ldr	r3, [pc, #260]	@ (800cec4 <__multiply+0x13c>)
 800cdc0:	4841      	ldr	r0, [pc, #260]	@ (800cec8 <__multiply+0x140>)
 800cdc2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdc6:	f000 fe77 	bl	800dab8 <__assert_func>
 800cdca:	f100 0414 	add.w	r4, r0, #20
 800cdce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cdd2:	4623      	mov	r3, r4
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4573      	cmp	r3, lr
 800cdd8:	d320      	bcc.n	800ce1c <__multiply+0x94>
 800cdda:	f107 0814 	add.w	r8, r7, #20
 800cdde:	f109 0114 	add.w	r1, r9, #20
 800cde2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cde6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cdea:	9302      	str	r3, [sp, #8]
 800cdec:	1beb      	subs	r3, r5, r7
 800cdee:	3b15      	subs	r3, #21
 800cdf0:	f023 0303 	bic.w	r3, r3, #3
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	3715      	adds	r7, #21
 800cdf8:	42bd      	cmp	r5, r7
 800cdfa:	bf38      	it	cc
 800cdfc:	2304      	movcc	r3, #4
 800cdfe:	9301      	str	r3, [sp, #4]
 800ce00:	9b02      	ldr	r3, [sp, #8]
 800ce02:	9103      	str	r1, [sp, #12]
 800ce04:	428b      	cmp	r3, r1
 800ce06:	d80c      	bhi.n	800ce22 <__multiply+0x9a>
 800ce08:	2e00      	cmp	r6, #0
 800ce0a:	dd03      	ble.n	800ce14 <__multiply+0x8c>
 800ce0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d055      	beq.n	800cec0 <__multiply+0x138>
 800ce14:	6106      	str	r6, [r0, #16]
 800ce16:	b005      	add	sp, #20
 800ce18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1c:	f843 2b04 	str.w	r2, [r3], #4
 800ce20:	e7d9      	b.n	800cdd6 <__multiply+0x4e>
 800ce22:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce26:	f1ba 0f00 	cmp.w	sl, #0
 800ce2a:	d01f      	beq.n	800ce6c <__multiply+0xe4>
 800ce2c:	46c4      	mov	ip, r8
 800ce2e:	46a1      	mov	r9, r4
 800ce30:	2700      	movs	r7, #0
 800ce32:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce36:	f8d9 3000 	ldr.w	r3, [r9]
 800ce3a:	fa1f fb82 	uxth.w	fp, r2
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce44:	443b      	add	r3, r7
 800ce46:	f8d9 7000 	ldr.w	r7, [r9]
 800ce4a:	0c12      	lsrs	r2, r2, #16
 800ce4c:	0c3f      	lsrs	r7, r7, #16
 800ce4e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ce52:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce5c:	4565      	cmp	r5, ip
 800ce5e:	f849 3b04 	str.w	r3, [r9], #4
 800ce62:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ce66:	d8e4      	bhi.n	800ce32 <__multiply+0xaa>
 800ce68:	9b01      	ldr	r3, [sp, #4]
 800ce6a:	50e7      	str	r7, [r4, r3]
 800ce6c:	9b03      	ldr	r3, [sp, #12]
 800ce6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce72:	3104      	adds	r1, #4
 800ce74:	f1b9 0f00 	cmp.w	r9, #0
 800ce78:	d020      	beq.n	800cebc <__multiply+0x134>
 800ce7a:	6823      	ldr	r3, [r4, #0]
 800ce7c:	4647      	mov	r7, r8
 800ce7e:	46a4      	mov	ip, r4
 800ce80:	f04f 0a00 	mov.w	sl, #0
 800ce84:	f8b7 b000 	ldrh.w	fp, [r7]
 800ce88:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ce8c:	fb09 220b 	mla	r2, r9, fp, r2
 800ce90:	4452      	add	r2, sl
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce98:	f84c 3b04 	str.w	r3, [ip], #4
 800ce9c:	f857 3b04 	ldr.w	r3, [r7], #4
 800cea0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cea4:	f8bc 3000 	ldrh.w	r3, [ip]
 800cea8:	fb09 330a 	mla	r3, r9, sl, r3
 800ceac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ceb0:	42bd      	cmp	r5, r7
 800ceb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ceb6:	d8e5      	bhi.n	800ce84 <__multiply+0xfc>
 800ceb8:	9a01      	ldr	r2, [sp, #4]
 800ceba:	50a3      	str	r3, [r4, r2]
 800cebc:	3404      	adds	r4, #4
 800cebe:	e79f      	b.n	800ce00 <__multiply+0x78>
 800cec0:	3e01      	subs	r6, #1
 800cec2:	e7a1      	b.n	800ce08 <__multiply+0x80>
 800cec4:	0800e514 	.word	0x0800e514
 800cec8:	0800e525 	.word	0x0800e525

0800cecc <__pow5mult>:
 800cecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ced0:	4615      	mov	r5, r2
 800ced2:	f012 0203 	ands.w	r2, r2, #3
 800ced6:	4607      	mov	r7, r0
 800ced8:	460e      	mov	r6, r1
 800ceda:	d007      	beq.n	800ceec <__pow5mult+0x20>
 800cedc:	4c25      	ldr	r4, [pc, #148]	@ (800cf74 <__pow5mult+0xa8>)
 800cede:	3a01      	subs	r2, #1
 800cee0:	2300      	movs	r3, #0
 800cee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cee6:	f7ff fea7 	bl	800cc38 <__multadd>
 800ceea:	4606      	mov	r6, r0
 800ceec:	10ad      	asrs	r5, r5, #2
 800ceee:	d03d      	beq.n	800cf6c <__pow5mult+0xa0>
 800cef0:	69fc      	ldr	r4, [r7, #28]
 800cef2:	b97c      	cbnz	r4, 800cf14 <__pow5mult+0x48>
 800cef4:	2010      	movs	r0, #16
 800cef6:	f7ff fd87 	bl	800ca08 <malloc>
 800cefa:	4602      	mov	r2, r0
 800cefc:	61f8      	str	r0, [r7, #28]
 800cefe:	b928      	cbnz	r0, 800cf0c <__pow5mult+0x40>
 800cf00:	4b1d      	ldr	r3, [pc, #116]	@ (800cf78 <__pow5mult+0xac>)
 800cf02:	481e      	ldr	r0, [pc, #120]	@ (800cf7c <__pow5mult+0xb0>)
 800cf04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf08:	f000 fdd6 	bl	800dab8 <__assert_func>
 800cf0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf10:	6004      	str	r4, [r0, #0]
 800cf12:	60c4      	str	r4, [r0, #12]
 800cf14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf1c:	b94c      	cbnz	r4, 800cf32 <__pow5mult+0x66>
 800cf1e:	f240 2171 	movw	r1, #625	@ 0x271
 800cf22:	4638      	mov	r0, r7
 800cf24:	f7ff ff1a 	bl	800cd5c <__i2b>
 800cf28:	2300      	movs	r3, #0
 800cf2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf2e:	4604      	mov	r4, r0
 800cf30:	6003      	str	r3, [r0, #0]
 800cf32:	f04f 0900 	mov.w	r9, #0
 800cf36:	07eb      	lsls	r3, r5, #31
 800cf38:	d50a      	bpl.n	800cf50 <__pow5mult+0x84>
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	4638      	mov	r0, r7
 800cf40:	f7ff ff22 	bl	800cd88 <__multiply>
 800cf44:	4631      	mov	r1, r6
 800cf46:	4680      	mov	r8, r0
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7ff fe53 	bl	800cbf4 <_Bfree>
 800cf4e:	4646      	mov	r6, r8
 800cf50:	106d      	asrs	r5, r5, #1
 800cf52:	d00b      	beq.n	800cf6c <__pow5mult+0xa0>
 800cf54:	6820      	ldr	r0, [r4, #0]
 800cf56:	b938      	cbnz	r0, 800cf68 <__pow5mult+0x9c>
 800cf58:	4622      	mov	r2, r4
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	4638      	mov	r0, r7
 800cf5e:	f7ff ff13 	bl	800cd88 <__multiply>
 800cf62:	6020      	str	r0, [r4, #0]
 800cf64:	f8c0 9000 	str.w	r9, [r0]
 800cf68:	4604      	mov	r4, r0
 800cf6a:	e7e4      	b.n	800cf36 <__pow5mult+0x6a>
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf72:	bf00      	nop
 800cf74:	0800e5d8 	.word	0x0800e5d8
 800cf78:	0800e4a5 	.word	0x0800e4a5
 800cf7c:	0800e525 	.word	0x0800e525

0800cf80 <__lshift>:
 800cf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf84:	460c      	mov	r4, r1
 800cf86:	6849      	ldr	r1, [r1, #4]
 800cf88:	6923      	ldr	r3, [r4, #16]
 800cf8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf8e:	68a3      	ldr	r3, [r4, #8]
 800cf90:	4607      	mov	r7, r0
 800cf92:	4691      	mov	r9, r2
 800cf94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf98:	f108 0601 	add.w	r6, r8, #1
 800cf9c:	42b3      	cmp	r3, r6
 800cf9e:	db0b      	blt.n	800cfb8 <__lshift+0x38>
 800cfa0:	4638      	mov	r0, r7
 800cfa2:	f7ff fde7 	bl	800cb74 <_Balloc>
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	b948      	cbnz	r0, 800cfbe <__lshift+0x3e>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	4b28      	ldr	r3, [pc, #160]	@ (800d050 <__lshift+0xd0>)
 800cfae:	4829      	ldr	r0, [pc, #164]	@ (800d054 <__lshift+0xd4>)
 800cfb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfb4:	f000 fd80 	bl	800dab8 <__assert_func>
 800cfb8:	3101      	adds	r1, #1
 800cfba:	005b      	lsls	r3, r3, #1
 800cfbc:	e7ee      	b.n	800cf9c <__lshift+0x1c>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	f100 0114 	add.w	r1, r0, #20
 800cfc4:	f100 0210 	add.w	r2, r0, #16
 800cfc8:	4618      	mov	r0, r3
 800cfca:	4553      	cmp	r3, sl
 800cfcc:	db33      	blt.n	800d036 <__lshift+0xb6>
 800cfce:	6920      	ldr	r0, [r4, #16]
 800cfd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfd4:	f104 0314 	add.w	r3, r4, #20
 800cfd8:	f019 091f 	ands.w	r9, r9, #31
 800cfdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfe4:	d02b      	beq.n	800d03e <__lshift+0xbe>
 800cfe6:	f1c9 0e20 	rsb	lr, r9, #32
 800cfea:	468a      	mov	sl, r1
 800cfec:	2200      	movs	r2, #0
 800cfee:	6818      	ldr	r0, [r3, #0]
 800cff0:	fa00 f009 	lsl.w	r0, r0, r9
 800cff4:	4310      	orrs	r0, r2
 800cff6:	f84a 0b04 	str.w	r0, [sl], #4
 800cffa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cffe:	459c      	cmp	ip, r3
 800d000:	fa22 f20e 	lsr.w	r2, r2, lr
 800d004:	d8f3      	bhi.n	800cfee <__lshift+0x6e>
 800d006:	ebac 0304 	sub.w	r3, ip, r4
 800d00a:	3b15      	subs	r3, #21
 800d00c:	f023 0303 	bic.w	r3, r3, #3
 800d010:	3304      	adds	r3, #4
 800d012:	f104 0015 	add.w	r0, r4, #21
 800d016:	4560      	cmp	r0, ip
 800d018:	bf88      	it	hi
 800d01a:	2304      	movhi	r3, #4
 800d01c:	50ca      	str	r2, [r1, r3]
 800d01e:	b10a      	cbz	r2, 800d024 <__lshift+0xa4>
 800d020:	f108 0602 	add.w	r6, r8, #2
 800d024:	3e01      	subs	r6, #1
 800d026:	4638      	mov	r0, r7
 800d028:	612e      	str	r6, [r5, #16]
 800d02a:	4621      	mov	r1, r4
 800d02c:	f7ff fde2 	bl	800cbf4 <_Bfree>
 800d030:	4628      	mov	r0, r5
 800d032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d036:	f842 0f04 	str.w	r0, [r2, #4]!
 800d03a:	3301      	adds	r3, #1
 800d03c:	e7c5      	b.n	800cfca <__lshift+0x4a>
 800d03e:	3904      	subs	r1, #4
 800d040:	f853 2b04 	ldr.w	r2, [r3], #4
 800d044:	f841 2f04 	str.w	r2, [r1, #4]!
 800d048:	459c      	cmp	ip, r3
 800d04a:	d8f9      	bhi.n	800d040 <__lshift+0xc0>
 800d04c:	e7ea      	b.n	800d024 <__lshift+0xa4>
 800d04e:	bf00      	nop
 800d050:	0800e514 	.word	0x0800e514
 800d054:	0800e525 	.word	0x0800e525

0800d058 <__mcmp>:
 800d058:	690a      	ldr	r2, [r1, #16]
 800d05a:	4603      	mov	r3, r0
 800d05c:	6900      	ldr	r0, [r0, #16]
 800d05e:	1a80      	subs	r0, r0, r2
 800d060:	b530      	push	{r4, r5, lr}
 800d062:	d10e      	bne.n	800d082 <__mcmp+0x2a>
 800d064:	3314      	adds	r3, #20
 800d066:	3114      	adds	r1, #20
 800d068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d06c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d078:	4295      	cmp	r5, r2
 800d07a:	d003      	beq.n	800d084 <__mcmp+0x2c>
 800d07c:	d205      	bcs.n	800d08a <__mcmp+0x32>
 800d07e:	f04f 30ff 	mov.w	r0, #4294967295
 800d082:	bd30      	pop	{r4, r5, pc}
 800d084:	42a3      	cmp	r3, r4
 800d086:	d3f3      	bcc.n	800d070 <__mcmp+0x18>
 800d088:	e7fb      	b.n	800d082 <__mcmp+0x2a>
 800d08a:	2001      	movs	r0, #1
 800d08c:	e7f9      	b.n	800d082 <__mcmp+0x2a>
	...

0800d090 <__mdiff>:
 800d090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d094:	4689      	mov	r9, r1
 800d096:	4606      	mov	r6, r0
 800d098:	4611      	mov	r1, r2
 800d09a:	4648      	mov	r0, r9
 800d09c:	4614      	mov	r4, r2
 800d09e:	f7ff ffdb 	bl	800d058 <__mcmp>
 800d0a2:	1e05      	subs	r5, r0, #0
 800d0a4:	d112      	bne.n	800d0cc <__mdiff+0x3c>
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f7ff fd63 	bl	800cb74 <_Balloc>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	b928      	cbnz	r0, 800d0be <__mdiff+0x2e>
 800d0b2:	4b3f      	ldr	r3, [pc, #252]	@ (800d1b0 <__mdiff+0x120>)
 800d0b4:	f240 2137 	movw	r1, #567	@ 0x237
 800d0b8:	483e      	ldr	r0, [pc, #248]	@ (800d1b4 <__mdiff+0x124>)
 800d0ba:	f000 fcfd 	bl	800dab8 <__assert_func>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	b003      	add	sp, #12
 800d0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0cc:	bfbc      	itt	lt
 800d0ce:	464b      	movlt	r3, r9
 800d0d0:	46a1      	movlt	r9, r4
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0d8:	bfba      	itte	lt
 800d0da:	461c      	movlt	r4, r3
 800d0dc:	2501      	movlt	r5, #1
 800d0de:	2500      	movge	r5, #0
 800d0e0:	f7ff fd48 	bl	800cb74 <_Balloc>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	b918      	cbnz	r0, 800d0f0 <__mdiff+0x60>
 800d0e8:	4b31      	ldr	r3, [pc, #196]	@ (800d1b0 <__mdiff+0x120>)
 800d0ea:	f240 2145 	movw	r1, #581	@ 0x245
 800d0ee:	e7e3      	b.n	800d0b8 <__mdiff+0x28>
 800d0f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0f4:	6926      	ldr	r6, [r4, #16]
 800d0f6:	60c5      	str	r5, [r0, #12]
 800d0f8:	f109 0310 	add.w	r3, r9, #16
 800d0fc:	f109 0514 	add.w	r5, r9, #20
 800d100:	f104 0e14 	add.w	lr, r4, #20
 800d104:	f100 0b14 	add.w	fp, r0, #20
 800d108:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d10c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	46d9      	mov	r9, fp
 800d114:	f04f 0c00 	mov.w	ip, #0
 800d118:	9b01      	ldr	r3, [sp, #4]
 800d11a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d11e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d122:	9301      	str	r3, [sp, #4]
 800d124:	fa1f f38a 	uxth.w	r3, sl
 800d128:	4619      	mov	r1, r3
 800d12a:	b283      	uxth	r3, r0
 800d12c:	1acb      	subs	r3, r1, r3
 800d12e:	0c00      	lsrs	r0, r0, #16
 800d130:	4463      	add	r3, ip
 800d132:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d136:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d140:	4576      	cmp	r6, lr
 800d142:	f849 3b04 	str.w	r3, [r9], #4
 800d146:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d14a:	d8e5      	bhi.n	800d118 <__mdiff+0x88>
 800d14c:	1b33      	subs	r3, r6, r4
 800d14e:	3b15      	subs	r3, #21
 800d150:	f023 0303 	bic.w	r3, r3, #3
 800d154:	3415      	adds	r4, #21
 800d156:	3304      	adds	r3, #4
 800d158:	42a6      	cmp	r6, r4
 800d15a:	bf38      	it	cc
 800d15c:	2304      	movcc	r3, #4
 800d15e:	441d      	add	r5, r3
 800d160:	445b      	add	r3, fp
 800d162:	461e      	mov	r6, r3
 800d164:	462c      	mov	r4, r5
 800d166:	4544      	cmp	r4, r8
 800d168:	d30e      	bcc.n	800d188 <__mdiff+0xf8>
 800d16a:	f108 0103 	add.w	r1, r8, #3
 800d16e:	1b49      	subs	r1, r1, r5
 800d170:	f021 0103 	bic.w	r1, r1, #3
 800d174:	3d03      	subs	r5, #3
 800d176:	45a8      	cmp	r8, r5
 800d178:	bf38      	it	cc
 800d17a:	2100      	movcc	r1, #0
 800d17c:	440b      	add	r3, r1
 800d17e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d182:	b191      	cbz	r1, 800d1aa <__mdiff+0x11a>
 800d184:	6117      	str	r7, [r2, #16]
 800d186:	e79d      	b.n	800d0c4 <__mdiff+0x34>
 800d188:	f854 1b04 	ldr.w	r1, [r4], #4
 800d18c:	46e6      	mov	lr, ip
 800d18e:	0c08      	lsrs	r0, r1, #16
 800d190:	fa1c fc81 	uxtah	ip, ip, r1
 800d194:	4471      	add	r1, lr
 800d196:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d19a:	b289      	uxth	r1, r1
 800d19c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1a0:	f846 1b04 	str.w	r1, [r6], #4
 800d1a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1a8:	e7dd      	b.n	800d166 <__mdiff+0xd6>
 800d1aa:	3f01      	subs	r7, #1
 800d1ac:	e7e7      	b.n	800d17e <__mdiff+0xee>
 800d1ae:	bf00      	nop
 800d1b0:	0800e514 	.word	0x0800e514
 800d1b4:	0800e525 	.word	0x0800e525

0800d1b8 <__d2b>:
 800d1b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1bc:	460f      	mov	r7, r1
 800d1be:	2101      	movs	r1, #1
 800d1c0:	ec59 8b10 	vmov	r8, r9, d0
 800d1c4:	4616      	mov	r6, r2
 800d1c6:	f7ff fcd5 	bl	800cb74 <_Balloc>
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	b930      	cbnz	r0, 800d1dc <__d2b+0x24>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	4b23      	ldr	r3, [pc, #140]	@ (800d260 <__d2b+0xa8>)
 800d1d2:	4824      	ldr	r0, [pc, #144]	@ (800d264 <__d2b+0xac>)
 800d1d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1d8:	f000 fc6e 	bl	800dab8 <__assert_func>
 800d1dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1e4:	b10d      	cbz	r5, 800d1ea <__d2b+0x32>
 800d1e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1ea:	9301      	str	r3, [sp, #4]
 800d1ec:	f1b8 0300 	subs.w	r3, r8, #0
 800d1f0:	d023      	beq.n	800d23a <__d2b+0x82>
 800d1f2:	4668      	mov	r0, sp
 800d1f4:	9300      	str	r3, [sp, #0]
 800d1f6:	f7ff fd84 	bl	800cd02 <__lo0bits>
 800d1fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1fe:	b1d0      	cbz	r0, 800d236 <__d2b+0x7e>
 800d200:	f1c0 0320 	rsb	r3, r0, #32
 800d204:	fa02 f303 	lsl.w	r3, r2, r3
 800d208:	430b      	orrs	r3, r1
 800d20a:	40c2      	lsrs	r2, r0
 800d20c:	6163      	str	r3, [r4, #20]
 800d20e:	9201      	str	r2, [sp, #4]
 800d210:	9b01      	ldr	r3, [sp, #4]
 800d212:	61a3      	str	r3, [r4, #24]
 800d214:	2b00      	cmp	r3, #0
 800d216:	bf0c      	ite	eq
 800d218:	2201      	moveq	r2, #1
 800d21a:	2202      	movne	r2, #2
 800d21c:	6122      	str	r2, [r4, #16]
 800d21e:	b1a5      	cbz	r5, 800d24a <__d2b+0x92>
 800d220:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d224:	4405      	add	r5, r0
 800d226:	603d      	str	r5, [r7, #0]
 800d228:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d22c:	6030      	str	r0, [r6, #0]
 800d22e:	4620      	mov	r0, r4
 800d230:	b003      	add	sp, #12
 800d232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d236:	6161      	str	r1, [r4, #20]
 800d238:	e7ea      	b.n	800d210 <__d2b+0x58>
 800d23a:	a801      	add	r0, sp, #4
 800d23c:	f7ff fd61 	bl	800cd02 <__lo0bits>
 800d240:	9b01      	ldr	r3, [sp, #4]
 800d242:	6163      	str	r3, [r4, #20]
 800d244:	3020      	adds	r0, #32
 800d246:	2201      	movs	r2, #1
 800d248:	e7e8      	b.n	800d21c <__d2b+0x64>
 800d24a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d24e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d252:	6038      	str	r0, [r7, #0]
 800d254:	6918      	ldr	r0, [r3, #16]
 800d256:	f7ff fd35 	bl	800ccc4 <__hi0bits>
 800d25a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d25e:	e7e5      	b.n	800d22c <__d2b+0x74>
 800d260:	0800e514 	.word	0x0800e514
 800d264:	0800e525 	.word	0x0800e525

0800d268 <__ssputs_r>:
 800d268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d26c:	688e      	ldr	r6, [r1, #8]
 800d26e:	461f      	mov	r7, r3
 800d270:	42be      	cmp	r6, r7
 800d272:	680b      	ldr	r3, [r1, #0]
 800d274:	4682      	mov	sl, r0
 800d276:	460c      	mov	r4, r1
 800d278:	4690      	mov	r8, r2
 800d27a:	d82d      	bhi.n	800d2d8 <__ssputs_r+0x70>
 800d27c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d280:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d284:	d026      	beq.n	800d2d4 <__ssputs_r+0x6c>
 800d286:	6965      	ldr	r5, [r4, #20]
 800d288:	6909      	ldr	r1, [r1, #16]
 800d28a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d28e:	eba3 0901 	sub.w	r9, r3, r1
 800d292:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d296:	1c7b      	adds	r3, r7, #1
 800d298:	444b      	add	r3, r9
 800d29a:	106d      	asrs	r5, r5, #1
 800d29c:	429d      	cmp	r5, r3
 800d29e:	bf38      	it	cc
 800d2a0:	461d      	movcc	r5, r3
 800d2a2:	0553      	lsls	r3, r2, #21
 800d2a4:	d527      	bpl.n	800d2f6 <__ssputs_r+0x8e>
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	f7ff fbd8 	bl	800ca5c <_malloc_r>
 800d2ac:	4606      	mov	r6, r0
 800d2ae:	b360      	cbz	r0, 800d30a <__ssputs_r+0xa2>
 800d2b0:	6921      	ldr	r1, [r4, #16]
 800d2b2:	464a      	mov	r2, r9
 800d2b4:	f7fe fd69 	bl	800bd8a <memcpy>
 800d2b8:	89a3      	ldrh	r3, [r4, #12]
 800d2ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d2be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2c2:	81a3      	strh	r3, [r4, #12]
 800d2c4:	6126      	str	r6, [r4, #16]
 800d2c6:	6165      	str	r5, [r4, #20]
 800d2c8:	444e      	add	r6, r9
 800d2ca:	eba5 0509 	sub.w	r5, r5, r9
 800d2ce:	6026      	str	r6, [r4, #0]
 800d2d0:	60a5      	str	r5, [r4, #8]
 800d2d2:	463e      	mov	r6, r7
 800d2d4:	42be      	cmp	r6, r7
 800d2d6:	d900      	bls.n	800d2da <__ssputs_r+0x72>
 800d2d8:	463e      	mov	r6, r7
 800d2da:	6820      	ldr	r0, [r4, #0]
 800d2dc:	4632      	mov	r2, r6
 800d2de:	4641      	mov	r1, r8
 800d2e0:	f000 fb9e 	bl	800da20 <memmove>
 800d2e4:	68a3      	ldr	r3, [r4, #8]
 800d2e6:	1b9b      	subs	r3, r3, r6
 800d2e8:	60a3      	str	r3, [r4, #8]
 800d2ea:	6823      	ldr	r3, [r4, #0]
 800d2ec:	4433      	add	r3, r6
 800d2ee:	6023      	str	r3, [r4, #0]
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2f6:	462a      	mov	r2, r5
 800d2f8:	f000 fc22 	bl	800db40 <_realloc_r>
 800d2fc:	4606      	mov	r6, r0
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d1e0      	bne.n	800d2c4 <__ssputs_r+0x5c>
 800d302:	6921      	ldr	r1, [r4, #16]
 800d304:	4650      	mov	r0, sl
 800d306:	f7ff fb35 	bl	800c974 <_free_r>
 800d30a:	230c      	movs	r3, #12
 800d30c:	f8ca 3000 	str.w	r3, [sl]
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d316:	81a3      	strh	r3, [r4, #12]
 800d318:	f04f 30ff 	mov.w	r0, #4294967295
 800d31c:	e7e9      	b.n	800d2f2 <__ssputs_r+0x8a>
	...

0800d320 <_svfiprintf_r>:
 800d320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	4698      	mov	r8, r3
 800d326:	898b      	ldrh	r3, [r1, #12]
 800d328:	061b      	lsls	r3, r3, #24
 800d32a:	b09d      	sub	sp, #116	@ 0x74
 800d32c:	4607      	mov	r7, r0
 800d32e:	460d      	mov	r5, r1
 800d330:	4614      	mov	r4, r2
 800d332:	d510      	bpl.n	800d356 <_svfiprintf_r+0x36>
 800d334:	690b      	ldr	r3, [r1, #16]
 800d336:	b973      	cbnz	r3, 800d356 <_svfiprintf_r+0x36>
 800d338:	2140      	movs	r1, #64	@ 0x40
 800d33a:	f7ff fb8f 	bl	800ca5c <_malloc_r>
 800d33e:	6028      	str	r0, [r5, #0]
 800d340:	6128      	str	r0, [r5, #16]
 800d342:	b930      	cbnz	r0, 800d352 <_svfiprintf_r+0x32>
 800d344:	230c      	movs	r3, #12
 800d346:	603b      	str	r3, [r7, #0]
 800d348:	f04f 30ff 	mov.w	r0, #4294967295
 800d34c:	b01d      	add	sp, #116	@ 0x74
 800d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d352:	2340      	movs	r3, #64	@ 0x40
 800d354:	616b      	str	r3, [r5, #20]
 800d356:	2300      	movs	r3, #0
 800d358:	9309      	str	r3, [sp, #36]	@ 0x24
 800d35a:	2320      	movs	r3, #32
 800d35c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d360:	f8cd 800c 	str.w	r8, [sp, #12]
 800d364:	2330      	movs	r3, #48	@ 0x30
 800d366:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d504 <_svfiprintf_r+0x1e4>
 800d36a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d36e:	f04f 0901 	mov.w	r9, #1
 800d372:	4623      	mov	r3, r4
 800d374:	469a      	mov	sl, r3
 800d376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d37a:	b10a      	cbz	r2, 800d380 <_svfiprintf_r+0x60>
 800d37c:	2a25      	cmp	r2, #37	@ 0x25
 800d37e:	d1f9      	bne.n	800d374 <_svfiprintf_r+0x54>
 800d380:	ebba 0b04 	subs.w	fp, sl, r4
 800d384:	d00b      	beq.n	800d39e <_svfiprintf_r+0x7e>
 800d386:	465b      	mov	r3, fp
 800d388:	4622      	mov	r2, r4
 800d38a:	4629      	mov	r1, r5
 800d38c:	4638      	mov	r0, r7
 800d38e:	f7ff ff6b 	bl	800d268 <__ssputs_r>
 800d392:	3001      	adds	r0, #1
 800d394:	f000 80a7 	beq.w	800d4e6 <_svfiprintf_r+0x1c6>
 800d398:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d39a:	445a      	add	r2, fp
 800d39c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d39e:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	f000 809f 	beq.w	800d4e6 <_svfiprintf_r+0x1c6>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3b2:	f10a 0a01 	add.w	sl, sl, #1
 800d3b6:	9304      	str	r3, [sp, #16]
 800d3b8:	9307      	str	r3, [sp, #28]
 800d3ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3be:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3c0:	4654      	mov	r4, sl
 800d3c2:	2205      	movs	r2, #5
 800d3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c8:	484e      	ldr	r0, [pc, #312]	@ (800d504 <_svfiprintf_r+0x1e4>)
 800d3ca:	f7f2 ffb1 	bl	8000330 <memchr>
 800d3ce:	9a04      	ldr	r2, [sp, #16]
 800d3d0:	b9d8      	cbnz	r0, 800d40a <_svfiprintf_r+0xea>
 800d3d2:	06d0      	lsls	r0, r2, #27
 800d3d4:	bf44      	itt	mi
 800d3d6:	2320      	movmi	r3, #32
 800d3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3dc:	0711      	lsls	r1, r2, #28
 800d3de:	bf44      	itt	mi
 800d3e0:	232b      	movmi	r3, #43	@ 0x2b
 800d3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3ec:	d015      	beq.n	800d41a <_svfiprintf_r+0xfa>
 800d3ee:	9a07      	ldr	r2, [sp, #28]
 800d3f0:	4654      	mov	r4, sl
 800d3f2:	2000      	movs	r0, #0
 800d3f4:	f04f 0c0a 	mov.w	ip, #10
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3fe:	3b30      	subs	r3, #48	@ 0x30
 800d400:	2b09      	cmp	r3, #9
 800d402:	d94b      	bls.n	800d49c <_svfiprintf_r+0x17c>
 800d404:	b1b0      	cbz	r0, 800d434 <_svfiprintf_r+0x114>
 800d406:	9207      	str	r2, [sp, #28]
 800d408:	e014      	b.n	800d434 <_svfiprintf_r+0x114>
 800d40a:	eba0 0308 	sub.w	r3, r0, r8
 800d40e:	fa09 f303 	lsl.w	r3, r9, r3
 800d412:	4313      	orrs	r3, r2
 800d414:	9304      	str	r3, [sp, #16]
 800d416:	46a2      	mov	sl, r4
 800d418:	e7d2      	b.n	800d3c0 <_svfiprintf_r+0xa0>
 800d41a:	9b03      	ldr	r3, [sp, #12]
 800d41c:	1d19      	adds	r1, r3, #4
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	9103      	str	r1, [sp, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	bfbb      	ittet	lt
 800d426:	425b      	neglt	r3, r3
 800d428:	f042 0202 	orrlt.w	r2, r2, #2
 800d42c:	9307      	strge	r3, [sp, #28]
 800d42e:	9307      	strlt	r3, [sp, #28]
 800d430:	bfb8      	it	lt
 800d432:	9204      	strlt	r2, [sp, #16]
 800d434:	7823      	ldrb	r3, [r4, #0]
 800d436:	2b2e      	cmp	r3, #46	@ 0x2e
 800d438:	d10a      	bne.n	800d450 <_svfiprintf_r+0x130>
 800d43a:	7863      	ldrb	r3, [r4, #1]
 800d43c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d43e:	d132      	bne.n	800d4a6 <_svfiprintf_r+0x186>
 800d440:	9b03      	ldr	r3, [sp, #12]
 800d442:	1d1a      	adds	r2, r3, #4
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	9203      	str	r2, [sp, #12]
 800d448:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d44c:	3402      	adds	r4, #2
 800d44e:	9305      	str	r3, [sp, #20]
 800d450:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d514 <_svfiprintf_r+0x1f4>
 800d454:	7821      	ldrb	r1, [r4, #0]
 800d456:	2203      	movs	r2, #3
 800d458:	4650      	mov	r0, sl
 800d45a:	f7f2 ff69 	bl	8000330 <memchr>
 800d45e:	b138      	cbz	r0, 800d470 <_svfiprintf_r+0x150>
 800d460:	9b04      	ldr	r3, [sp, #16]
 800d462:	eba0 000a 	sub.w	r0, r0, sl
 800d466:	2240      	movs	r2, #64	@ 0x40
 800d468:	4082      	lsls	r2, r0
 800d46a:	4313      	orrs	r3, r2
 800d46c:	3401      	adds	r4, #1
 800d46e:	9304      	str	r3, [sp, #16]
 800d470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d474:	4824      	ldr	r0, [pc, #144]	@ (800d508 <_svfiprintf_r+0x1e8>)
 800d476:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d47a:	2206      	movs	r2, #6
 800d47c:	f7f2 ff58 	bl	8000330 <memchr>
 800d480:	2800      	cmp	r0, #0
 800d482:	d036      	beq.n	800d4f2 <_svfiprintf_r+0x1d2>
 800d484:	4b21      	ldr	r3, [pc, #132]	@ (800d50c <_svfiprintf_r+0x1ec>)
 800d486:	bb1b      	cbnz	r3, 800d4d0 <_svfiprintf_r+0x1b0>
 800d488:	9b03      	ldr	r3, [sp, #12]
 800d48a:	3307      	adds	r3, #7
 800d48c:	f023 0307 	bic.w	r3, r3, #7
 800d490:	3308      	adds	r3, #8
 800d492:	9303      	str	r3, [sp, #12]
 800d494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d496:	4433      	add	r3, r6
 800d498:	9309      	str	r3, [sp, #36]	@ 0x24
 800d49a:	e76a      	b.n	800d372 <_svfiprintf_r+0x52>
 800d49c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4a0:	460c      	mov	r4, r1
 800d4a2:	2001      	movs	r0, #1
 800d4a4:	e7a8      	b.n	800d3f8 <_svfiprintf_r+0xd8>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	3401      	adds	r4, #1
 800d4aa:	9305      	str	r3, [sp, #20]
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	f04f 0c0a 	mov.w	ip, #10
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4b8:	3a30      	subs	r2, #48	@ 0x30
 800d4ba:	2a09      	cmp	r2, #9
 800d4bc:	d903      	bls.n	800d4c6 <_svfiprintf_r+0x1a6>
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d0c6      	beq.n	800d450 <_svfiprintf_r+0x130>
 800d4c2:	9105      	str	r1, [sp, #20]
 800d4c4:	e7c4      	b.n	800d450 <_svfiprintf_r+0x130>
 800d4c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e7f0      	b.n	800d4b2 <_svfiprintf_r+0x192>
 800d4d0:	ab03      	add	r3, sp, #12
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	462a      	mov	r2, r5
 800d4d6:	4b0e      	ldr	r3, [pc, #56]	@ (800d510 <_svfiprintf_r+0x1f0>)
 800d4d8:	a904      	add	r1, sp, #16
 800d4da:	4638      	mov	r0, r7
 800d4dc:	f7fd fdfc 	bl	800b0d8 <_printf_float>
 800d4e0:	1c42      	adds	r2, r0, #1
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	d1d6      	bne.n	800d494 <_svfiprintf_r+0x174>
 800d4e6:	89ab      	ldrh	r3, [r5, #12]
 800d4e8:	065b      	lsls	r3, r3, #25
 800d4ea:	f53f af2d 	bmi.w	800d348 <_svfiprintf_r+0x28>
 800d4ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4f0:	e72c      	b.n	800d34c <_svfiprintf_r+0x2c>
 800d4f2:	ab03      	add	r3, sp, #12
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	462a      	mov	r2, r5
 800d4f8:	4b05      	ldr	r3, [pc, #20]	@ (800d510 <_svfiprintf_r+0x1f0>)
 800d4fa:	a904      	add	r1, sp, #16
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	f7fe f873 	bl	800b5e8 <_printf_i>
 800d502:	e7ed      	b.n	800d4e0 <_svfiprintf_r+0x1c0>
 800d504:	0800e57e 	.word	0x0800e57e
 800d508:	0800e588 	.word	0x0800e588
 800d50c:	0800b0d9 	.word	0x0800b0d9
 800d510:	0800d269 	.word	0x0800d269
 800d514:	0800e584 	.word	0x0800e584

0800d518 <__sfputc_r>:
 800d518:	6893      	ldr	r3, [r2, #8]
 800d51a:	3b01      	subs	r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	b410      	push	{r4}
 800d520:	6093      	str	r3, [r2, #8]
 800d522:	da08      	bge.n	800d536 <__sfputc_r+0x1e>
 800d524:	6994      	ldr	r4, [r2, #24]
 800d526:	42a3      	cmp	r3, r4
 800d528:	db01      	blt.n	800d52e <__sfputc_r+0x16>
 800d52a:	290a      	cmp	r1, #10
 800d52c:	d103      	bne.n	800d536 <__sfputc_r+0x1e>
 800d52e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d532:	f7fe bb16 	b.w	800bb62 <__swbuf_r>
 800d536:	6813      	ldr	r3, [r2, #0]
 800d538:	1c58      	adds	r0, r3, #1
 800d53a:	6010      	str	r0, [r2, #0]
 800d53c:	7019      	strb	r1, [r3, #0]
 800d53e:	4608      	mov	r0, r1
 800d540:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d544:	4770      	bx	lr

0800d546 <__sfputs_r>:
 800d546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d548:	4606      	mov	r6, r0
 800d54a:	460f      	mov	r7, r1
 800d54c:	4614      	mov	r4, r2
 800d54e:	18d5      	adds	r5, r2, r3
 800d550:	42ac      	cmp	r4, r5
 800d552:	d101      	bne.n	800d558 <__sfputs_r+0x12>
 800d554:	2000      	movs	r0, #0
 800d556:	e007      	b.n	800d568 <__sfputs_r+0x22>
 800d558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55c:	463a      	mov	r2, r7
 800d55e:	4630      	mov	r0, r6
 800d560:	f7ff ffda 	bl	800d518 <__sfputc_r>
 800d564:	1c43      	adds	r3, r0, #1
 800d566:	d1f3      	bne.n	800d550 <__sfputs_r+0xa>
 800d568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d56c <_vfiprintf_r>:
 800d56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d570:	460d      	mov	r5, r1
 800d572:	b09d      	sub	sp, #116	@ 0x74
 800d574:	4614      	mov	r4, r2
 800d576:	4698      	mov	r8, r3
 800d578:	4606      	mov	r6, r0
 800d57a:	b118      	cbz	r0, 800d584 <_vfiprintf_r+0x18>
 800d57c:	6a03      	ldr	r3, [r0, #32]
 800d57e:	b90b      	cbnz	r3, 800d584 <_vfiprintf_r+0x18>
 800d580:	f7fe f9dc 	bl	800b93c <__sinit>
 800d584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d586:	07d9      	lsls	r1, r3, #31
 800d588:	d405      	bmi.n	800d596 <_vfiprintf_r+0x2a>
 800d58a:	89ab      	ldrh	r3, [r5, #12]
 800d58c:	059a      	lsls	r2, r3, #22
 800d58e:	d402      	bmi.n	800d596 <_vfiprintf_r+0x2a>
 800d590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d592:	f7fe fbf8 	bl	800bd86 <__retarget_lock_acquire_recursive>
 800d596:	89ab      	ldrh	r3, [r5, #12]
 800d598:	071b      	lsls	r3, r3, #28
 800d59a:	d501      	bpl.n	800d5a0 <_vfiprintf_r+0x34>
 800d59c:	692b      	ldr	r3, [r5, #16]
 800d59e:	b99b      	cbnz	r3, 800d5c8 <_vfiprintf_r+0x5c>
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	f7fe fb1c 	bl	800bbe0 <__swsetup_r>
 800d5a8:	b170      	cbz	r0, 800d5c8 <_vfiprintf_r+0x5c>
 800d5aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5ac:	07dc      	lsls	r4, r3, #31
 800d5ae:	d504      	bpl.n	800d5ba <_vfiprintf_r+0x4e>
 800d5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b4:	b01d      	add	sp, #116	@ 0x74
 800d5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ba:	89ab      	ldrh	r3, [r5, #12]
 800d5bc:	0598      	lsls	r0, r3, #22
 800d5be:	d4f7      	bmi.n	800d5b0 <_vfiprintf_r+0x44>
 800d5c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5c2:	f7fe fbe1 	bl	800bd88 <__retarget_lock_release_recursive>
 800d5c6:	e7f3      	b.n	800d5b0 <_vfiprintf_r+0x44>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5cc:	2320      	movs	r3, #32
 800d5ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5d6:	2330      	movs	r3, #48	@ 0x30
 800d5d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d788 <_vfiprintf_r+0x21c>
 800d5dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5e0:	f04f 0901 	mov.w	r9, #1
 800d5e4:	4623      	mov	r3, r4
 800d5e6:	469a      	mov	sl, r3
 800d5e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5ec:	b10a      	cbz	r2, 800d5f2 <_vfiprintf_r+0x86>
 800d5ee:	2a25      	cmp	r2, #37	@ 0x25
 800d5f0:	d1f9      	bne.n	800d5e6 <_vfiprintf_r+0x7a>
 800d5f2:	ebba 0b04 	subs.w	fp, sl, r4
 800d5f6:	d00b      	beq.n	800d610 <_vfiprintf_r+0xa4>
 800d5f8:	465b      	mov	r3, fp
 800d5fa:	4622      	mov	r2, r4
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	4630      	mov	r0, r6
 800d600:	f7ff ffa1 	bl	800d546 <__sfputs_r>
 800d604:	3001      	adds	r0, #1
 800d606:	f000 80a7 	beq.w	800d758 <_vfiprintf_r+0x1ec>
 800d60a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d60c:	445a      	add	r2, fp
 800d60e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d610:	f89a 3000 	ldrb.w	r3, [sl]
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 809f 	beq.w	800d758 <_vfiprintf_r+0x1ec>
 800d61a:	2300      	movs	r3, #0
 800d61c:	f04f 32ff 	mov.w	r2, #4294967295
 800d620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d624:	f10a 0a01 	add.w	sl, sl, #1
 800d628:	9304      	str	r3, [sp, #16]
 800d62a:	9307      	str	r3, [sp, #28]
 800d62c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d630:	931a      	str	r3, [sp, #104]	@ 0x68
 800d632:	4654      	mov	r4, sl
 800d634:	2205      	movs	r2, #5
 800d636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d63a:	4853      	ldr	r0, [pc, #332]	@ (800d788 <_vfiprintf_r+0x21c>)
 800d63c:	f7f2 fe78 	bl	8000330 <memchr>
 800d640:	9a04      	ldr	r2, [sp, #16]
 800d642:	b9d8      	cbnz	r0, 800d67c <_vfiprintf_r+0x110>
 800d644:	06d1      	lsls	r1, r2, #27
 800d646:	bf44      	itt	mi
 800d648:	2320      	movmi	r3, #32
 800d64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d64e:	0713      	lsls	r3, r2, #28
 800d650:	bf44      	itt	mi
 800d652:	232b      	movmi	r3, #43	@ 0x2b
 800d654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d658:	f89a 3000 	ldrb.w	r3, [sl]
 800d65c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d65e:	d015      	beq.n	800d68c <_vfiprintf_r+0x120>
 800d660:	9a07      	ldr	r2, [sp, #28]
 800d662:	4654      	mov	r4, sl
 800d664:	2000      	movs	r0, #0
 800d666:	f04f 0c0a 	mov.w	ip, #10
 800d66a:	4621      	mov	r1, r4
 800d66c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d670:	3b30      	subs	r3, #48	@ 0x30
 800d672:	2b09      	cmp	r3, #9
 800d674:	d94b      	bls.n	800d70e <_vfiprintf_r+0x1a2>
 800d676:	b1b0      	cbz	r0, 800d6a6 <_vfiprintf_r+0x13a>
 800d678:	9207      	str	r2, [sp, #28]
 800d67a:	e014      	b.n	800d6a6 <_vfiprintf_r+0x13a>
 800d67c:	eba0 0308 	sub.w	r3, r0, r8
 800d680:	fa09 f303 	lsl.w	r3, r9, r3
 800d684:	4313      	orrs	r3, r2
 800d686:	9304      	str	r3, [sp, #16]
 800d688:	46a2      	mov	sl, r4
 800d68a:	e7d2      	b.n	800d632 <_vfiprintf_r+0xc6>
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	1d19      	adds	r1, r3, #4
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	9103      	str	r1, [sp, #12]
 800d694:	2b00      	cmp	r3, #0
 800d696:	bfbb      	ittet	lt
 800d698:	425b      	neglt	r3, r3
 800d69a:	f042 0202 	orrlt.w	r2, r2, #2
 800d69e:	9307      	strge	r3, [sp, #28]
 800d6a0:	9307      	strlt	r3, [sp, #28]
 800d6a2:	bfb8      	it	lt
 800d6a4:	9204      	strlt	r2, [sp, #16]
 800d6a6:	7823      	ldrb	r3, [r4, #0]
 800d6a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6aa:	d10a      	bne.n	800d6c2 <_vfiprintf_r+0x156>
 800d6ac:	7863      	ldrb	r3, [r4, #1]
 800d6ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6b0:	d132      	bne.n	800d718 <_vfiprintf_r+0x1ac>
 800d6b2:	9b03      	ldr	r3, [sp, #12]
 800d6b4:	1d1a      	adds	r2, r3, #4
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	9203      	str	r2, [sp, #12]
 800d6ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6be:	3402      	adds	r4, #2
 800d6c0:	9305      	str	r3, [sp, #20]
 800d6c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d798 <_vfiprintf_r+0x22c>
 800d6c6:	7821      	ldrb	r1, [r4, #0]
 800d6c8:	2203      	movs	r2, #3
 800d6ca:	4650      	mov	r0, sl
 800d6cc:	f7f2 fe30 	bl	8000330 <memchr>
 800d6d0:	b138      	cbz	r0, 800d6e2 <_vfiprintf_r+0x176>
 800d6d2:	9b04      	ldr	r3, [sp, #16]
 800d6d4:	eba0 000a 	sub.w	r0, r0, sl
 800d6d8:	2240      	movs	r2, #64	@ 0x40
 800d6da:	4082      	lsls	r2, r0
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	3401      	adds	r4, #1
 800d6e0:	9304      	str	r3, [sp, #16]
 800d6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6e6:	4829      	ldr	r0, [pc, #164]	@ (800d78c <_vfiprintf_r+0x220>)
 800d6e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6ec:	2206      	movs	r2, #6
 800d6ee:	f7f2 fe1f 	bl	8000330 <memchr>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d03f      	beq.n	800d776 <_vfiprintf_r+0x20a>
 800d6f6:	4b26      	ldr	r3, [pc, #152]	@ (800d790 <_vfiprintf_r+0x224>)
 800d6f8:	bb1b      	cbnz	r3, 800d742 <_vfiprintf_r+0x1d6>
 800d6fa:	9b03      	ldr	r3, [sp, #12]
 800d6fc:	3307      	adds	r3, #7
 800d6fe:	f023 0307 	bic.w	r3, r3, #7
 800d702:	3308      	adds	r3, #8
 800d704:	9303      	str	r3, [sp, #12]
 800d706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d708:	443b      	add	r3, r7
 800d70a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d70c:	e76a      	b.n	800d5e4 <_vfiprintf_r+0x78>
 800d70e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d712:	460c      	mov	r4, r1
 800d714:	2001      	movs	r0, #1
 800d716:	e7a8      	b.n	800d66a <_vfiprintf_r+0xfe>
 800d718:	2300      	movs	r3, #0
 800d71a:	3401      	adds	r4, #1
 800d71c:	9305      	str	r3, [sp, #20]
 800d71e:	4619      	mov	r1, r3
 800d720:	f04f 0c0a 	mov.w	ip, #10
 800d724:	4620      	mov	r0, r4
 800d726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d72a:	3a30      	subs	r2, #48	@ 0x30
 800d72c:	2a09      	cmp	r2, #9
 800d72e:	d903      	bls.n	800d738 <_vfiprintf_r+0x1cc>
 800d730:	2b00      	cmp	r3, #0
 800d732:	d0c6      	beq.n	800d6c2 <_vfiprintf_r+0x156>
 800d734:	9105      	str	r1, [sp, #20]
 800d736:	e7c4      	b.n	800d6c2 <_vfiprintf_r+0x156>
 800d738:	fb0c 2101 	mla	r1, ip, r1, r2
 800d73c:	4604      	mov	r4, r0
 800d73e:	2301      	movs	r3, #1
 800d740:	e7f0      	b.n	800d724 <_vfiprintf_r+0x1b8>
 800d742:	ab03      	add	r3, sp, #12
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	462a      	mov	r2, r5
 800d748:	4b12      	ldr	r3, [pc, #72]	@ (800d794 <_vfiprintf_r+0x228>)
 800d74a:	a904      	add	r1, sp, #16
 800d74c:	4630      	mov	r0, r6
 800d74e:	f7fd fcc3 	bl	800b0d8 <_printf_float>
 800d752:	4607      	mov	r7, r0
 800d754:	1c78      	adds	r0, r7, #1
 800d756:	d1d6      	bne.n	800d706 <_vfiprintf_r+0x19a>
 800d758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d75a:	07d9      	lsls	r1, r3, #31
 800d75c:	d405      	bmi.n	800d76a <_vfiprintf_r+0x1fe>
 800d75e:	89ab      	ldrh	r3, [r5, #12]
 800d760:	059a      	lsls	r2, r3, #22
 800d762:	d402      	bmi.n	800d76a <_vfiprintf_r+0x1fe>
 800d764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d766:	f7fe fb0f 	bl	800bd88 <__retarget_lock_release_recursive>
 800d76a:	89ab      	ldrh	r3, [r5, #12]
 800d76c:	065b      	lsls	r3, r3, #25
 800d76e:	f53f af1f 	bmi.w	800d5b0 <_vfiprintf_r+0x44>
 800d772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d774:	e71e      	b.n	800d5b4 <_vfiprintf_r+0x48>
 800d776:	ab03      	add	r3, sp, #12
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	462a      	mov	r2, r5
 800d77c:	4b05      	ldr	r3, [pc, #20]	@ (800d794 <_vfiprintf_r+0x228>)
 800d77e:	a904      	add	r1, sp, #16
 800d780:	4630      	mov	r0, r6
 800d782:	f7fd ff31 	bl	800b5e8 <_printf_i>
 800d786:	e7e4      	b.n	800d752 <_vfiprintf_r+0x1e6>
 800d788:	0800e57e 	.word	0x0800e57e
 800d78c:	0800e588 	.word	0x0800e588
 800d790:	0800b0d9 	.word	0x0800b0d9
 800d794:	0800d547 	.word	0x0800d547
 800d798:	0800e584 	.word	0x0800e584

0800d79c <__sflush_r>:
 800d79c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a4:	0716      	lsls	r6, r2, #28
 800d7a6:	4605      	mov	r5, r0
 800d7a8:	460c      	mov	r4, r1
 800d7aa:	d454      	bmi.n	800d856 <__sflush_r+0xba>
 800d7ac:	684b      	ldr	r3, [r1, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	dc02      	bgt.n	800d7b8 <__sflush_r+0x1c>
 800d7b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	dd48      	ble.n	800d84a <__sflush_r+0xae>
 800d7b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7ba:	2e00      	cmp	r6, #0
 800d7bc:	d045      	beq.n	800d84a <__sflush_r+0xae>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7c4:	682f      	ldr	r7, [r5, #0]
 800d7c6:	6a21      	ldr	r1, [r4, #32]
 800d7c8:	602b      	str	r3, [r5, #0]
 800d7ca:	d030      	beq.n	800d82e <__sflush_r+0x92>
 800d7cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7ce:	89a3      	ldrh	r3, [r4, #12]
 800d7d0:	0759      	lsls	r1, r3, #29
 800d7d2:	d505      	bpl.n	800d7e0 <__sflush_r+0x44>
 800d7d4:	6863      	ldr	r3, [r4, #4]
 800d7d6:	1ad2      	subs	r2, r2, r3
 800d7d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7da:	b10b      	cbz	r3, 800d7e0 <__sflush_r+0x44>
 800d7dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7de:	1ad2      	subs	r2, r2, r3
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7e4:	6a21      	ldr	r1, [r4, #32]
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	47b0      	blx	r6
 800d7ea:	1c43      	adds	r3, r0, #1
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	d106      	bne.n	800d7fe <__sflush_r+0x62>
 800d7f0:	6829      	ldr	r1, [r5, #0]
 800d7f2:	291d      	cmp	r1, #29
 800d7f4:	d82b      	bhi.n	800d84e <__sflush_r+0xb2>
 800d7f6:	4a2a      	ldr	r2, [pc, #168]	@ (800d8a0 <__sflush_r+0x104>)
 800d7f8:	40ca      	lsrs	r2, r1
 800d7fa:	07d6      	lsls	r6, r2, #31
 800d7fc:	d527      	bpl.n	800d84e <__sflush_r+0xb2>
 800d7fe:	2200      	movs	r2, #0
 800d800:	6062      	str	r2, [r4, #4]
 800d802:	04d9      	lsls	r1, r3, #19
 800d804:	6922      	ldr	r2, [r4, #16]
 800d806:	6022      	str	r2, [r4, #0]
 800d808:	d504      	bpl.n	800d814 <__sflush_r+0x78>
 800d80a:	1c42      	adds	r2, r0, #1
 800d80c:	d101      	bne.n	800d812 <__sflush_r+0x76>
 800d80e:	682b      	ldr	r3, [r5, #0]
 800d810:	b903      	cbnz	r3, 800d814 <__sflush_r+0x78>
 800d812:	6560      	str	r0, [r4, #84]	@ 0x54
 800d814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d816:	602f      	str	r7, [r5, #0]
 800d818:	b1b9      	cbz	r1, 800d84a <__sflush_r+0xae>
 800d81a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d81e:	4299      	cmp	r1, r3
 800d820:	d002      	beq.n	800d828 <__sflush_r+0x8c>
 800d822:	4628      	mov	r0, r5
 800d824:	f7ff f8a6 	bl	800c974 <_free_r>
 800d828:	2300      	movs	r3, #0
 800d82a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d82c:	e00d      	b.n	800d84a <__sflush_r+0xae>
 800d82e:	2301      	movs	r3, #1
 800d830:	4628      	mov	r0, r5
 800d832:	47b0      	blx	r6
 800d834:	4602      	mov	r2, r0
 800d836:	1c50      	adds	r0, r2, #1
 800d838:	d1c9      	bne.n	800d7ce <__sflush_r+0x32>
 800d83a:	682b      	ldr	r3, [r5, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d0c6      	beq.n	800d7ce <__sflush_r+0x32>
 800d840:	2b1d      	cmp	r3, #29
 800d842:	d001      	beq.n	800d848 <__sflush_r+0xac>
 800d844:	2b16      	cmp	r3, #22
 800d846:	d11e      	bne.n	800d886 <__sflush_r+0xea>
 800d848:	602f      	str	r7, [r5, #0]
 800d84a:	2000      	movs	r0, #0
 800d84c:	e022      	b.n	800d894 <__sflush_r+0xf8>
 800d84e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d852:	b21b      	sxth	r3, r3
 800d854:	e01b      	b.n	800d88e <__sflush_r+0xf2>
 800d856:	690f      	ldr	r7, [r1, #16]
 800d858:	2f00      	cmp	r7, #0
 800d85a:	d0f6      	beq.n	800d84a <__sflush_r+0xae>
 800d85c:	0793      	lsls	r3, r2, #30
 800d85e:	680e      	ldr	r6, [r1, #0]
 800d860:	bf08      	it	eq
 800d862:	694b      	ldreq	r3, [r1, #20]
 800d864:	600f      	str	r7, [r1, #0]
 800d866:	bf18      	it	ne
 800d868:	2300      	movne	r3, #0
 800d86a:	eba6 0807 	sub.w	r8, r6, r7
 800d86e:	608b      	str	r3, [r1, #8]
 800d870:	f1b8 0f00 	cmp.w	r8, #0
 800d874:	dde9      	ble.n	800d84a <__sflush_r+0xae>
 800d876:	6a21      	ldr	r1, [r4, #32]
 800d878:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d87a:	4643      	mov	r3, r8
 800d87c:	463a      	mov	r2, r7
 800d87e:	4628      	mov	r0, r5
 800d880:	47b0      	blx	r6
 800d882:	2800      	cmp	r0, #0
 800d884:	dc08      	bgt.n	800d898 <__sflush_r+0xfc>
 800d886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d88a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d88e:	81a3      	strh	r3, [r4, #12]
 800d890:	f04f 30ff 	mov.w	r0, #4294967295
 800d894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d898:	4407      	add	r7, r0
 800d89a:	eba8 0800 	sub.w	r8, r8, r0
 800d89e:	e7e7      	b.n	800d870 <__sflush_r+0xd4>
 800d8a0:	20400001 	.word	0x20400001

0800d8a4 <_fflush_r>:
 800d8a4:	b538      	push	{r3, r4, r5, lr}
 800d8a6:	690b      	ldr	r3, [r1, #16]
 800d8a8:	4605      	mov	r5, r0
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	b913      	cbnz	r3, 800d8b4 <_fflush_r+0x10>
 800d8ae:	2500      	movs	r5, #0
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	b118      	cbz	r0, 800d8be <_fflush_r+0x1a>
 800d8b6:	6a03      	ldr	r3, [r0, #32]
 800d8b8:	b90b      	cbnz	r3, 800d8be <_fflush_r+0x1a>
 800d8ba:	f7fe f83f 	bl	800b93c <__sinit>
 800d8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d0f3      	beq.n	800d8ae <_fflush_r+0xa>
 800d8c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8c8:	07d0      	lsls	r0, r2, #31
 800d8ca:	d404      	bmi.n	800d8d6 <_fflush_r+0x32>
 800d8cc:	0599      	lsls	r1, r3, #22
 800d8ce:	d402      	bmi.n	800d8d6 <_fflush_r+0x32>
 800d8d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8d2:	f7fe fa58 	bl	800bd86 <__retarget_lock_acquire_recursive>
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	4621      	mov	r1, r4
 800d8da:	f7ff ff5f 	bl	800d79c <__sflush_r>
 800d8de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8e0:	07da      	lsls	r2, r3, #31
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	d4e4      	bmi.n	800d8b0 <_fflush_r+0xc>
 800d8e6:	89a3      	ldrh	r3, [r4, #12]
 800d8e8:	059b      	lsls	r3, r3, #22
 800d8ea:	d4e1      	bmi.n	800d8b0 <_fflush_r+0xc>
 800d8ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8ee:	f7fe fa4b 	bl	800bd88 <__retarget_lock_release_recursive>
 800d8f2:	e7dd      	b.n	800d8b0 <_fflush_r+0xc>

0800d8f4 <__swhatbuf_r>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8fc:	2900      	cmp	r1, #0
 800d8fe:	b096      	sub	sp, #88	@ 0x58
 800d900:	4615      	mov	r5, r2
 800d902:	461e      	mov	r6, r3
 800d904:	da0d      	bge.n	800d922 <__swhatbuf_r+0x2e>
 800d906:	89a3      	ldrh	r3, [r4, #12]
 800d908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d90c:	f04f 0100 	mov.w	r1, #0
 800d910:	bf14      	ite	ne
 800d912:	2340      	movne	r3, #64	@ 0x40
 800d914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d918:	2000      	movs	r0, #0
 800d91a:	6031      	str	r1, [r6, #0]
 800d91c:	602b      	str	r3, [r5, #0]
 800d91e:	b016      	add	sp, #88	@ 0x58
 800d920:	bd70      	pop	{r4, r5, r6, pc}
 800d922:	466a      	mov	r2, sp
 800d924:	f000 f896 	bl	800da54 <_fstat_r>
 800d928:	2800      	cmp	r0, #0
 800d92a:	dbec      	blt.n	800d906 <__swhatbuf_r+0x12>
 800d92c:	9901      	ldr	r1, [sp, #4]
 800d92e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d936:	4259      	negs	r1, r3
 800d938:	4159      	adcs	r1, r3
 800d93a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d93e:	e7eb      	b.n	800d918 <__swhatbuf_r+0x24>

0800d940 <__smakebuf_r>:
 800d940:	898b      	ldrh	r3, [r1, #12]
 800d942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d944:	079d      	lsls	r5, r3, #30
 800d946:	4606      	mov	r6, r0
 800d948:	460c      	mov	r4, r1
 800d94a:	d507      	bpl.n	800d95c <__smakebuf_r+0x1c>
 800d94c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	6123      	str	r3, [r4, #16]
 800d954:	2301      	movs	r3, #1
 800d956:	6163      	str	r3, [r4, #20]
 800d958:	b003      	add	sp, #12
 800d95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d95c:	ab01      	add	r3, sp, #4
 800d95e:	466a      	mov	r2, sp
 800d960:	f7ff ffc8 	bl	800d8f4 <__swhatbuf_r>
 800d964:	9f00      	ldr	r7, [sp, #0]
 800d966:	4605      	mov	r5, r0
 800d968:	4639      	mov	r1, r7
 800d96a:	4630      	mov	r0, r6
 800d96c:	f7ff f876 	bl	800ca5c <_malloc_r>
 800d970:	b948      	cbnz	r0, 800d986 <__smakebuf_r+0x46>
 800d972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d976:	059a      	lsls	r2, r3, #22
 800d978:	d4ee      	bmi.n	800d958 <__smakebuf_r+0x18>
 800d97a:	f023 0303 	bic.w	r3, r3, #3
 800d97e:	f043 0302 	orr.w	r3, r3, #2
 800d982:	81a3      	strh	r3, [r4, #12]
 800d984:	e7e2      	b.n	800d94c <__smakebuf_r+0xc>
 800d986:	89a3      	ldrh	r3, [r4, #12]
 800d988:	6020      	str	r0, [r4, #0]
 800d98a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d98e:	81a3      	strh	r3, [r4, #12]
 800d990:	9b01      	ldr	r3, [sp, #4]
 800d992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d996:	b15b      	cbz	r3, 800d9b0 <__smakebuf_r+0x70>
 800d998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d99c:	4630      	mov	r0, r6
 800d99e:	f000 f86b 	bl	800da78 <_isatty_r>
 800d9a2:	b128      	cbz	r0, 800d9b0 <__smakebuf_r+0x70>
 800d9a4:	89a3      	ldrh	r3, [r4, #12]
 800d9a6:	f023 0303 	bic.w	r3, r3, #3
 800d9aa:	f043 0301 	orr.w	r3, r3, #1
 800d9ae:	81a3      	strh	r3, [r4, #12]
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	431d      	orrs	r5, r3
 800d9b4:	81a5      	strh	r5, [r4, #12]
 800d9b6:	e7cf      	b.n	800d958 <__smakebuf_r+0x18>

0800d9b8 <_putc_r>:
 800d9b8:	b570      	push	{r4, r5, r6, lr}
 800d9ba:	460d      	mov	r5, r1
 800d9bc:	4614      	mov	r4, r2
 800d9be:	4606      	mov	r6, r0
 800d9c0:	b118      	cbz	r0, 800d9ca <_putc_r+0x12>
 800d9c2:	6a03      	ldr	r3, [r0, #32]
 800d9c4:	b90b      	cbnz	r3, 800d9ca <_putc_r+0x12>
 800d9c6:	f7fd ffb9 	bl	800b93c <__sinit>
 800d9ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9cc:	07d8      	lsls	r0, r3, #31
 800d9ce:	d405      	bmi.n	800d9dc <_putc_r+0x24>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	0599      	lsls	r1, r3, #22
 800d9d4:	d402      	bmi.n	800d9dc <_putc_r+0x24>
 800d9d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9d8:	f7fe f9d5 	bl	800bd86 <__retarget_lock_acquire_recursive>
 800d9dc:	68a3      	ldr	r3, [r4, #8]
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	60a3      	str	r3, [r4, #8]
 800d9e4:	da05      	bge.n	800d9f2 <_putc_r+0x3a>
 800d9e6:	69a2      	ldr	r2, [r4, #24]
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	db12      	blt.n	800da12 <_putc_r+0x5a>
 800d9ec:	b2eb      	uxtb	r3, r5
 800d9ee:	2b0a      	cmp	r3, #10
 800d9f0:	d00f      	beq.n	800da12 <_putc_r+0x5a>
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	6022      	str	r2, [r4, #0]
 800d9f8:	701d      	strb	r5, [r3, #0]
 800d9fa:	b2ed      	uxtb	r5, r5
 800d9fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9fe:	07da      	lsls	r2, r3, #31
 800da00:	d405      	bmi.n	800da0e <_putc_r+0x56>
 800da02:	89a3      	ldrh	r3, [r4, #12]
 800da04:	059b      	lsls	r3, r3, #22
 800da06:	d402      	bmi.n	800da0e <_putc_r+0x56>
 800da08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da0a:	f7fe f9bd 	bl	800bd88 <__retarget_lock_release_recursive>
 800da0e:	4628      	mov	r0, r5
 800da10:	bd70      	pop	{r4, r5, r6, pc}
 800da12:	4629      	mov	r1, r5
 800da14:	4622      	mov	r2, r4
 800da16:	4630      	mov	r0, r6
 800da18:	f7fe f8a3 	bl	800bb62 <__swbuf_r>
 800da1c:	4605      	mov	r5, r0
 800da1e:	e7ed      	b.n	800d9fc <_putc_r+0x44>

0800da20 <memmove>:
 800da20:	4288      	cmp	r0, r1
 800da22:	b510      	push	{r4, lr}
 800da24:	eb01 0402 	add.w	r4, r1, r2
 800da28:	d902      	bls.n	800da30 <memmove+0x10>
 800da2a:	4284      	cmp	r4, r0
 800da2c:	4623      	mov	r3, r4
 800da2e:	d807      	bhi.n	800da40 <memmove+0x20>
 800da30:	1e43      	subs	r3, r0, #1
 800da32:	42a1      	cmp	r1, r4
 800da34:	d008      	beq.n	800da48 <memmove+0x28>
 800da36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da3e:	e7f8      	b.n	800da32 <memmove+0x12>
 800da40:	4402      	add	r2, r0
 800da42:	4601      	mov	r1, r0
 800da44:	428a      	cmp	r2, r1
 800da46:	d100      	bne.n	800da4a <memmove+0x2a>
 800da48:	bd10      	pop	{r4, pc}
 800da4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da52:	e7f7      	b.n	800da44 <memmove+0x24>

0800da54 <_fstat_r>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4d07      	ldr	r5, [pc, #28]	@ (800da74 <_fstat_r+0x20>)
 800da58:	2300      	movs	r3, #0
 800da5a:	4604      	mov	r4, r0
 800da5c:	4608      	mov	r0, r1
 800da5e:	4611      	mov	r1, r2
 800da60:	602b      	str	r3, [r5, #0]
 800da62:	f7f4 fc61 	bl	8002328 <_fstat>
 800da66:	1c43      	adds	r3, r0, #1
 800da68:	d102      	bne.n	800da70 <_fstat_r+0x1c>
 800da6a:	682b      	ldr	r3, [r5, #0]
 800da6c:	b103      	cbz	r3, 800da70 <_fstat_r+0x1c>
 800da6e:	6023      	str	r3, [r4, #0]
 800da70:	bd38      	pop	{r3, r4, r5, pc}
 800da72:	bf00      	nop
 800da74:	24000a88 	.word	0x24000a88

0800da78 <_isatty_r>:
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	4d06      	ldr	r5, [pc, #24]	@ (800da94 <_isatty_r+0x1c>)
 800da7c:	2300      	movs	r3, #0
 800da7e:	4604      	mov	r4, r0
 800da80:	4608      	mov	r0, r1
 800da82:	602b      	str	r3, [r5, #0]
 800da84:	f7f4 fc60 	bl	8002348 <_isatty>
 800da88:	1c43      	adds	r3, r0, #1
 800da8a:	d102      	bne.n	800da92 <_isatty_r+0x1a>
 800da8c:	682b      	ldr	r3, [r5, #0]
 800da8e:	b103      	cbz	r3, 800da92 <_isatty_r+0x1a>
 800da90:	6023      	str	r3, [r4, #0]
 800da92:	bd38      	pop	{r3, r4, r5, pc}
 800da94:	24000a88 	.word	0x24000a88

0800da98 <_sbrk_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4d06      	ldr	r5, [pc, #24]	@ (800dab4 <_sbrk_r+0x1c>)
 800da9c:	2300      	movs	r3, #0
 800da9e:	4604      	mov	r4, r0
 800daa0:	4608      	mov	r0, r1
 800daa2:	602b      	str	r3, [r5, #0]
 800daa4:	f7f4 fc68 	bl	8002378 <_sbrk>
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	d102      	bne.n	800dab2 <_sbrk_r+0x1a>
 800daac:	682b      	ldr	r3, [r5, #0]
 800daae:	b103      	cbz	r3, 800dab2 <_sbrk_r+0x1a>
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	bd38      	pop	{r3, r4, r5, pc}
 800dab4:	24000a88 	.word	0x24000a88

0800dab8 <__assert_func>:
 800dab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daba:	4614      	mov	r4, r2
 800dabc:	461a      	mov	r2, r3
 800dabe:	4b09      	ldr	r3, [pc, #36]	@ (800dae4 <__assert_func+0x2c>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4605      	mov	r5, r0
 800dac4:	68d8      	ldr	r0, [r3, #12]
 800dac6:	b14c      	cbz	r4, 800dadc <__assert_func+0x24>
 800dac8:	4b07      	ldr	r3, [pc, #28]	@ (800dae8 <__assert_func+0x30>)
 800daca:	9100      	str	r1, [sp, #0]
 800dacc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dad0:	4906      	ldr	r1, [pc, #24]	@ (800daec <__assert_func+0x34>)
 800dad2:	462b      	mov	r3, r5
 800dad4:	f000 f870 	bl	800dbb8 <fiprintf>
 800dad8:	f000 f880 	bl	800dbdc <abort>
 800dadc:	4b04      	ldr	r3, [pc, #16]	@ (800daf0 <__assert_func+0x38>)
 800dade:	461c      	mov	r4, r3
 800dae0:	e7f3      	b.n	800daca <__assert_func+0x12>
 800dae2:	bf00      	nop
 800dae4:	2400003c 	.word	0x2400003c
 800dae8:	0800e599 	.word	0x0800e599
 800daec:	0800e5a6 	.word	0x0800e5a6
 800daf0:	0800e5d4 	.word	0x0800e5d4

0800daf4 <_calloc_r>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	fba1 5402 	umull	r5, r4, r1, r2
 800dafa:	b934      	cbnz	r4, 800db0a <_calloc_r+0x16>
 800dafc:	4629      	mov	r1, r5
 800dafe:	f7fe ffad 	bl	800ca5c <_malloc_r>
 800db02:	4606      	mov	r6, r0
 800db04:	b928      	cbnz	r0, 800db12 <_calloc_r+0x1e>
 800db06:	4630      	mov	r0, r6
 800db08:	bd70      	pop	{r4, r5, r6, pc}
 800db0a:	220c      	movs	r2, #12
 800db0c:	6002      	str	r2, [r0, #0]
 800db0e:	2600      	movs	r6, #0
 800db10:	e7f9      	b.n	800db06 <_calloc_r+0x12>
 800db12:	462a      	mov	r2, r5
 800db14:	4621      	mov	r1, r4
 800db16:	f7fe f8b9 	bl	800bc8c <memset>
 800db1a:	e7f4      	b.n	800db06 <_calloc_r+0x12>

0800db1c <__ascii_mbtowc>:
 800db1c:	b082      	sub	sp, #8
 800db1e:	b901      	cbnz	r1, 800db22 <__ascii_mbtowc+0x6>
 800db20:	a901      	add	r1, sp, #4
 800db22:	b142      	cbz	r2, 800db36 <__ascii_mbtowc+0x1a>
 800db24:	b14b      	cbz	r3, 800db3a <__ascii_mbtowc+0x1e>
 800db26:	7813      	ldrb	r3, [r2, #0]
 800db28:	600b      	str	r3, [r1, #0]
 800db2a:	7812      	ldrb	r2, [r2, #0]
 800db2c:	1e10      	subs	r0, r2, #0
 800db2e:	bf18      	it	ne
 800db30:	2001      	movne	r0, #1
 800db32:	b002      	add	sp, #8
 800db34:	4770      	bx	lr
 800db36:	4610      	mov	r0, r2
 800db38:	e7fb      	b.n	800db32 <__ascii_mbtowc+0x16>
 800db3a:	f06f 0001 	mvn.w	r0, #1
 800db3e:	e7f8      	b.n	800db32 <__ascii_mbtowc+0x16>

0800db40 <_realloc_r>:
 800db40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db44:	4607      	mov	r7, r0
 800db46:	4614      	mov	r4, r2
 800db48:	460d      	mov	r5, r1
 800db4a:	b921      	cbnz	r1, 800db56 <_realloc_r+0x16>
 800db4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db50:	4611      	mov	r1, r2
 800db52:	f7fe bf83 	b.w	800ca5c <_malloc_r>
 800db56:	b92a      	cbnz	r2, 800db64 <_realloc_r+0x24>
 800db58:	f7fe ff0c 	bl	800c974 <_free_r>
 800db5c:	4625      	mov	r5, r4
 800db5e:	4628      	mov	r0, r5
 800db60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db64:	f000 f841 	bl	800dbea <_malloc_usable_size_r>
 800db68:	4284      	cmp	r4, r0
 800db6a:	4606      	mov	r6, r0
 800db6c:	d802      	bhi.n	800db74 <_realloc_r+0x34>
 800db6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db72:	d8f4      	bhi.n	800db5e <_realloc_r+0x1e>
 800db74:	4621      	mov	r1, r4
 800db76:	4638      	mov	r0, r7
 800db78:	f7fe ff70 	bl	800ca5c <_malloc_r>
 800db7c:	4680      	mov	r8, r0
 800db7e:	b908      	cbnz	r0, 800db84 <_realloc_r+0x44>
 800db80:	4645      	mov	r5, r8
 800db82:	e7ec      	b.n	800db5e <_realloc_r+0x1e>
 800db84:	42b4      	cmp	r4, r6
 800db86:	4622      	mov	r2, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	bf28      	it	cs
 800db8c:	4632      	movcs	r2, r6
 800db8e:	f7fe f8fc 	bl	800bd8a <memcpy>
 800db92:	4629      	mov	r1, r5
 800db94:	4638      	mov	r0, r7
 800db96:	f7fe feed 	bl	800c974 <_free_r>
 800db9a:	e7f1      	b.n	800db80 <_realloc_r+0x40>

0800db9c <__ascii_wctomb>:
 800db9c:	4603      	mov	r3, r0
 800db9e:	4608      	mov	r0, r1
 800dba0:	b141      	cbz	r1, 800dbb4 <__ascii_wctomb+0x18>
 800dba2:	2aff      	cmp	r2, #255	@ 0xff
 800dba4:	d904      	bls.n	800dbb0 <__ascii_wctomb+0x14>
 800dba6:	228a      	movs	r2, #138	@ 0x8a
 800dba8:	601a      	str	r2, [r3, #0]
 800dbaa:	f04f 30ff 	mov.w	r0, #4294967295
 800dbae:	4770      	bx	lr
 800dbb0:	700a      	strb	r2, [r1, #0]
 800dbb2:	2001      	movs	r0, #1
 800dbb4:	4770      	bx	lr
	...

0800dbb8 <fiprintf>:
 800dbb8:	b40e      	push	{r1, r2, r3}
 800dbba:	b503      	push	{r0, r1, lr}
 800dbbc:	4601      	mov	r1, r0
 800dbbe:	ab03      	add	r3, sp, #12
 800dbc0:	4805      	ldr	r0, [pc, #20]	@ (800dbd8 <fiprintf+0x20>)
 800dbc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbc6:	6800      	ldr	r0, [r0, #0]
 800dbc8:	9301      	str	r3, [sp, #4]
 800dbca:	f7ff fccf 	bl	800d56c <_vfiprintf_r>
 800dbce:	b002      	add	sp, #8
 800dbd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbd4:	b003      	add	sp, #12
 800dbd6:	4770      	bx	lr
 800dbd8:	2400003c 	.word	0x2400003c

0800dbdc <abort>:
 800dbdc:	b508      	push	{r3, lr}
 800dbde:	2006      	movs	r0, #6
 800dbe0:	f000 f834 	bl	800dc4c <raise>
 800dbe4:	2001      	movs	r0, #1
 800dbe6:	f7f4 fb4f 	bl	8002288 <_exit>

0800dbea <_malloc_usable_size_r>:
 800dbea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbee:	1f18      	subs	r0, r3, #4
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	bfbc      	itt	lt
 800dbf4:	580b      	ldrlt	r3, [r1, r0]
 800dbf6:	18c0      	addlt	r0, r0, r3
 800dbf8:	4770      	bx	lr

0800dbfa <_raise_r>:
 800dbfa:	291f      	cmp	r1, #31
 800dbfc:	b538      	push	{r3, r4, r5, lr}
 800dbfe:	4605      	mov	r5, r0
 800dc00:	460c      	mov	r4, r1
 800dc02:	d904      	bls.n	800dc0e <_raise_r+0x14>
 800dc04:	2316      	movs	r3, #22
 800dc06:	6003      	str	r3, [r0, #0]
 800dc08:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0c:	bd38      	pop	{r3, r4, r5, pc}
 800dc0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc10:	b112      	cbz	r2, 800dc18 <_raise_r+0x1e>
 800dc12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc16:	b94b      	cbnz	r3, 800dc2c <_raise_r+0x32>
 800dc18:	4628      	mov	r0, r5
 800dc1a:	f000 f831 	bl	800dc80 <_getpid_r>
 800dc1e:	4622      	mov	r2, r4
 800dc20:	4601      	mov	r1, r0
 800dc22:	4628      	mov	r0, r5
 800dc24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc28:	f000 b818 	b.w	800dc5c <_kill_r>
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d00a      	beq.n	800dc46 <_raise_r+0x4c>
 800dc30:	1c59      	adds	r1, r3, #1
 800dc32:	d103      	bne.n	800dc3c <_raise_r+0x42>
 800dc34:	2316      	movs	r3, #22
 800dc36:	6003      	str	r3, [r0, #0]
 800dc38:	2001      	movs	r0, #1
 800dc3a:	e7e7      	b.n	800dc0c <_raise_r+0x12>
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc42:	4620      	mov	r0, r4
 800dc44:	4798      	blx	r3
 800dc46:	2000      	movs	r0, #0
 800dc48:	e7e0      	b.n	800dc0c <_raise_r+0x12>
	...

0800dc4c <raise>:
 800dc4c:	4b02      	ldr	r3, [pc, #8]	@ (800dc58 <raise+0xc>)
 800dc4e:	4601      	mov	r1, r0
 800dc50:	6818      	ldr	r0, [r3, #0]
 800dc52:	f7ff bfd2 	b.w	800dbfa <_raise_r>
 800dc56:	bf00      	nop
 800dc58:	2400003c 	.word	0x2400003c

0800dc5c <_kill_r>:
 800dc5c:	b538      	push	{r3, r4, r5, lr}
 800dc5e:	4d07      	ldr	r5, [pc, #28]	@ (800dc7c <_kill_r+0x20>)
 800dc60:	2300      	movs	r3, #0
 800dc62:	4604      	mov	r4, r0
 800dc64:	4608      	mov	r0, r1
 800dc66:	4611      	mov	r1, r2
 800dc68:	602b      	str	r3, [r5, #0]
 800dc6a:	f7f4 fafd 	bl	8002268 <_kill>
 800dc6e:	1c43      	adds	r3, r0, #1
 800dc70:	d102      	bne.n	800dc78 <_kill_r+0x1c>
 800dc72:	682b      	ldr	r3, [r5, #0]
 800dc74:	b103      	cbz	r3, 800dc78 <_kill_r+0x1c>
 800dc76:	6023      	str	r3, [r4, #0]
 800dc78:	bd38      	pop	{r3, r4, r5, pc}
 800dc7a:	bf00      	nop
 800dc7c:	24000a88 	.word	0x24000a88

0800dc80 <_getpid_r>:
 800dc80:	f7f4 baea 	b.w	8002258 <_getpid>
 800dc84:	0000      	movs	r0, r0
	...

0800dc88 <fmod>:
 800dc88:	b508      	push	{r3, lr}
 800dc8a:	ed2d 8b04 	vpush	{d8-d9}
 800dc8e:	eeb0 9b40 	vmov.f64	d9, d0
 800dc92:	eeb0 8b41 	vmov.f64	d8, d1
 800dc96:	f000 f81b 	bl	800dcd0 <__ieee754_fmod>
 800dc9a:	eeb4 9b48 	vcmp.f64	d9, d8
 800dc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca2:	d60c      	bvs.n	800dcbe <fmod+0x36>
 800dca4:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800dcc8 <fmod+0x40>
 800dca8:	eeb4 8b49 	vcmp.f64	d8, d9
 800dcac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcb0:	d105      	bne.n	800dcbe <fmod+0x36>
 800dcb2:	f7fe f83d 	bl	800bd30 <__errno>
 800dcb6:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800dcba:	2321      	movs	r3, #33	@ 0x21
 800dcbc:	6003      	str	r3, [r0, #0]
 800dcbe:	ecbd 8b04 	vpop	{d8-d9}
 800dcc2:	bd08      	pop	{r3, pc}
 800dcc4:	f3af 8000 	nop.w
	...

0800dcd0 <__ieee754_fmod>:
 800dcd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dcd4:	ed8d 1b00 	vstr	d1, [sp]
 800dcd8:	e9dd 0600 	ldrd	r0, r6, [sp]
 800dcdc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800dce0:	ea50 0305 	orrs.w	r3, r0, r5
 800dce4:	4686      	mov	lr, r0
 800dce6:	d00d      	beq.n	800dd04 <__ieee754_fmod+0x34>
 800dce8:	ee10 ca90 	vmov	ip, s1
 800dcec:	4b77      	ldr	r3, [pc, #476]	@ (800decc <__ieee754_fmod+0x1fc>)
 800dcee:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800dcf2:	4598      	cmp	r8, r3
 800dcf4:	d806      	bhi.n	800dd04 <__ieee754_fmod+0x34>
 800dcf6:	4243      	negs	r3, r0
 800dcf8:	4a75      	ldr	r2, [pc, #468]	@ (800ded0 <__ieee754_fmod+0x200>)
 800dcfa:	4303      	orrs	r3, r0
 800dcfc:	ea45 73d3 	orr.w	r3, r5, r3, lsr #31
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d908      	bls.n	800dd16 <__ieee754_fmod+0x46>
 800dd04:	ed9d 7b00 	vldr	d7, [sp]
 800dd08:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dd0c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800dd10:	b003      	add	sp, #12
 800dd12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd16:	ee10 9a10 	vmov	r9, s0
 800dd1a:	45a8      	cmp	r8, r5
 800dd1c:	464f      	mov	r7, r9
 800dd1e:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800dd22:	dc09      	bgt.n	800dd38 <__ieee754_fmod+0x68>
 800dd24:	dbf4      	blt.n	800dd10 <__ieee754_fmod+0x40>
 800dd26:	4548      	cmp	r0, r9
 800dd28:	d8f2      	bhi.n	800dd10 <__ieee754_fmod+0x40>
 800dd2a:	d105      	bne.n	800dd38 <__ieee754_fmod+0x68>
 800dd2c:	4b69      	ldr	r3, [pc, #420]	@ (800ded4 <__ieee754_fmod+0x204>)
 800dd2e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800dd32:	ed93 0b00 	vldr	d0, [r3]
 800dd36:	e7eb      	b.n	800dd10 <__ieee754_fmod+0x40>
 800dd38:	4965      	ldr	r1, [pc, #404]	@ (800ded0 <__ieee754_fmod+0x200>)
 800dd3a:	ea1c 0f01 	tst.w	ip, r1
 800dd3e:	d14a      	bne.n	800ddd6 <__ieee754_fmod+0x106>
 800dd40:	f1b8 0f00 	cmp.w	r8, #0
 800dd44:	d13f      	bne.n	800ddc6 <__ieee754_fmod+0xf6>
 800dd46:	4a64      	ldr	r2, [pc, #400]	@ (800ded8 <__ieee754_fmod+0x208>)
 800dd48:	464b      	mov	r3, r9
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	dc38      	bgt.n	800ddc0 <__ieee754_fmod+0xf0>
 800dd4e:	420e      	tst	r6, r1
 800dd50:	d150      	bne.n	800ddf4 <__ieee754_fmod+0x124>
 800dd52:	2d00      	cmp	r5, #0
 800dd54:	d147      	bne.n	800dde6 <__ieee754_fmod+0x116>
 800dd56:	4b60      	ldr	r3, [pc, #384]	@ (800ded8 <__ieee754_fmod+0x208>)
 800dd58:	4601      	mov	r1, r0
 800dd5a:	2900      	cmp	r1, #0
 800dd5c:	dc40      	bgt.n	800dde0 <__ieee754_fmod+0x110>
 800dd5e:	495f      	ldr	r1, [pc, #380]	@ (800dedc <__ieee754_fmod+0x20c>)
 800dd60:	428a      	cmp	r2, r1
 800dd62:	db4b      	blt.n	800ddfc <__ieee754_fmod+0x12c>
 800dd64:	f3cc 0113 	ubfx	r1, ip, #0, #20
 800dd68:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800dd6c:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 800dedc <__ieee754_fmod+0x20c>
 800dd70:	4563      	cmp	r3, ip
 800dd72:	db58      	blt.n	800de26 <__ieee754_fmod+0x156>
 800dd74:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800dd78:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800dd7c:	1ad0      	subs	r0, r2, r3
 800dd7e:	1b8a      	subs	r2, r1, r6
 800dd80:	eba7 050e 	sub.w	r5, r7, lr
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d164      	bne.n	800de52 <__ieee754_fmod+0x182>
 800dd88:	4577      	cmp	r7, lr
 800dd8a:	bf38      	it	cc
 800dd8c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800dd90:	2a00      	cmp	r2, #0
 800dd92:	bfbc      	itt	lt
 800dd94:	463d      	movlt	r5, r7
 800dd96:	460a      	movlt	r2, r1
 800dd98:	ea52 0105 	orrs.w	r1, r2, r5
 800dd9c:	d0c6      	beq.n	800dd2c <__ieee754_fmod+0x5c>
 800dd9e:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800dda2:	db6b      	blt.n	800de7c <__ieee754_fmod+0x1ac>
 800dda4:	494d      	ldr	r1, [pc, #308]	@ (800dedc <__ieee754_fmod+0x20c>)
 800dda6:	428b      	cmp	r3, r1
 800dda8:	db6e      	blt.n	800de88 <__ieee754_fmod+0x1b8>
 800ddaa:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800ddae:	4322      	orrs	r2, r4
 800ddb0:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800ddb4:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800ddb8:	4628      	mov	r0, r5
 800ddba:	ec41 0b10 	vmov	d0, r0, r1
 800ddbe:	e7a7      	b.n	800dd10 <__ieee754_fmod+0x40>
 800ddc0:	3a01      	subs	r2, #1
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	e7c1      	b.n	800dd4a <__ieee754_fmod+0x7a>
 800ddc6:	4a45      	ldr	r2, [pc, #276]	@ (800dedc <__ieee754_fmod+0x20c>)
 800ddc8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	ddbe      	ble.n	800dd4e <__ieee754_fmod+0x7e>
 800ddd0:	3a01      	subs	r2, #1
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	e7fa      	b.n	800ddcc <__ieee754_fmod+0xfc>
 800ddd6:	ea4f 5228 	mov.w	r2, r8, asr #20
 800ddda:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ddde:	e7b6      	b.n	800dd4e <__ieee754_fmod+0x7e>
 800dde0:	3b01      	subs	r3, #1
 800dde2:	0049      	lsls	r1, r1, #1
 800dde4:	e7b9      	b.n	800dd5a <__ieee754_fmod+0x8a>
 800dde6:	4b3d      	ldr	r3, [pc, #244]	@ (800dedc <__ieee754_fmod+0x20c>)
 800dde8:	02e9      	lsls	r1, r5, #11
 800ddea:	2900      	cmp	r1, #0
 800ddec:	ddb7      	ble.n	800dd5e <__ieee754_fmod+0x8e>
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	0049      	lsls	r1, r1, #1
 800ddf2:	e7fa      	b.n	800ddea <__ieee754_fmod+0x11a>
 800ddf4:	152b      	asrs	r3, r5, #20
 800ddf6:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ddfa:	e7b0      	b.n	800dd5e <__ieee754_fmod+0x8e>
 800ddfc:	eba1 0c02 	sub.w	ip, r1, r2
 800de00:	f1bc 0f1f 	cmp.w	ip, #31
 800de04:	dc09      	bgt.n	800de1a <__ieee754_fmod+0x14a>
 800de06:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800de0a:	fa08 f70c 	lsl.w	r7, r8, ip
 800de0e:	fa29 f101 	lsr.w	r1, r9, r1
 800de12:	4339      	orrs	r1, r7
 800de14:	fa09 f70c 	lsl.w	r7, r9, ip
 800de18:	e7a8      	b.n	800dd6c <__ieee754_fmod+0x9c>
 800de1a:	4931      	ldr	r1, [pc, #196]	@ (800dee0 <__ieee754_fmod+0x210>)
 800de1c:	1a89      	subs	r1, r1, r2
 800de1e:	fa09 f101 	lsl.w	r1, r9, r1
 800de22:	2700      	movs	r7, #0
 800de24:	e7a2      	b.n	800dd6c <__ieee754_fmod+0x9c>
 800de26:	ebac 0c03 	sub.w	ip, ip, r3
 800de2a:	f1bc 0f1f 	cmp.w	ip, #31
 800de2e:	dc09      	bgt.n	800de44 <__ieee754_fmod+0x174>
 800de30:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800de34:	fa05 f50c 	lsl.w	r5, r5, ip
 800de38:	fa20 f606 	lsr.w	r6, r0, r6
 800de3c:	432e      	orrs	r6, r5
 800de3e:	fa00 fe0c 	lsl.w	lr, r0, ip
 800de42:	e79b      	b.n	800dd7c <__ieee754_fmod+0xac>
 800de44:	4e26      	ldr	r6, [pc, #152]	@ (800dee0 <__ieee754_fmod+0x210>)
 800de46:	1af6      	subs	r6, r6, r3
 800de48:	fa00 f606 	lsl.w	r6, r0, r6
 800de4c:	f04f 0e00 	mov.w	lr, #0
 800de50:	e794      	b.n	800dd7c <__ieee754_fmod+0xac>
 800de52:	4577      	cmp	r7, lr
 800de54:	bf38      	it	cc
 800de56:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800de5a:	2a00      	cmp	r2, #0
 800de5c:	da05      	bge.n	800de6a <__ieee754_fmod+0x19a>
 800de5e:	0ffa      	lsrs	r2, r7, #31
 800de60:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800de64:	007f      	lsls	r7, r7, #1
 800de66:	3801      	subs	r0, #1
 800de68:	e789      	b.n	800dd7e <__ieee754_fmod+0xae>
 800de6a:	ea52 0105 	orrs.w	r1, r2, r5
 800de6e:	f43f af5d 	beq.w	800dd2c <__ieee754_fmod+0x5c>
 800de72:	0fe9      	lsrs	r1, r5, #31
 800de74:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800de78:	006f      	lsls	r7, r5, #1
 800de7a:	e7f4      	b.n	800de66 <__ieee754_fmod+0x196>
 800de7c:	0fe9      	lsrs	r1, r5, #31
 800de7e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800de82:	006d      	lsls	r5, r5, #1
 800de84:	3b01      	subs	r3, #1
 800de86:	e78a      	b.n	800dd9e <__ieee754_fmod+0xce>
 800de88:	1ac9      	subs	r1, r1, r3
 800de8a:	2914      	cmp	r1, #20
 800de8c:	dc0a      	bgt.n	800dea4 <__ieee754_fmod+0x1d4>
 800de8e:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800de92:	fa02 f303 	lsl.w	r3, r2, r3
 800de96:	40cd      	lsrs	r5, r1
 800de98:	432b      	orrs	r3, r5
 800de9a:	410a      	asrs	r2, r1
 800de9c:	ea42 0104 	orr.w	r1, r2, r4
 800dea0:	4618      	mov	r0, r3
 800dea2:	e78a      	b.n	800ddba <__ieee754_fmod+0xea>
 800dea4:	291f      	cmp	r1, #31
 800dea6:	dc07      	bgt.n	800deb8 <__ieee754_fmod+0x1e8>
 800dea8:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800deac:	40cd      	lsrs	r5, r1
 800deae:	fa02 f303 	lsl.w	r3, r2, r3
 800deb2:	432b      	orrs	r3, r5
 800deb4:	4622      	mov	r2, r4
 800deb6:	e7f1      	b.n	800de9c <__ieee754_fmod+0x1cc>
 800deb8:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800debc:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800dec0:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800dec4:	33e2      	adds	r3, #226	@ 0xe2
 800dec6:	fa42 f303 	asr.w	r3, r2, r3
 800deca:	e7f3      	b.n	800deb4 <__ieee754_fmod+0x1e4>
 800decc:	7fefffff 	.word	0x7fefffff
 800ded0:	7ff00000 	.word	0x7ff00000
 800ded4:	0800e7e0 	.word	0x0800e7e0
 800ded8:	fffffbed 	.word	0xfffffbed
 800dedc:	fffffc02 	.word	0xfffffc02
 800dee0:	fffffbe2 	.word	0xfffffbe2

0800dee4 <_init>:
 800dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee6:	bf00      	nop
 800dee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deea:	bc08      	pop	{r3}
 800deec:	469e      	mov	lr, r3
 800deee:	4770      	bx	lr

0800def0 <_fini>:
 800def0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def2:	bf00      	nop
 800def4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800def6:	bc08      	pop	{r3}
 800def8:	469e      	mov	lr, r3
 800defa:	4770      	bx	lr
