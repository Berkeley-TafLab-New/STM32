
STM32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbf4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800cec8  0800cec8  0000dec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d680  0800d680  0000e680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d688  0800d688  0000e688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d68c  0800d68c  0000e68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  0800d690  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000074c  240001e0  0800d870  0000f1e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400092c  0800d870  0000f92c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b3fa  00000000  00000000  0000f20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003402  00000000  00000000  0002a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001610  00000000  00000000  0002da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001149  00000000  00000000  0002f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000355b5  00000000  00000000  00030169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e980  00000000  00000000  0006571e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151ed1  00000000  00000000  0008409e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d5f6f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006d58  00000000  00000000  001d5fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001dcd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ceac 	.word	0x0800ceac

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0800ceac 	.word	0x0800ceac

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <AS5600_read_angle>:
 */

#include "AS5600.h"
#include "stdint.h"

HAL_StatusTypeDef AS5600_read_angle(I2C_HandleTypeDef *hi2c, float *angle){
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af04      	add	r7, sp, #16
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    
    HAL_StatusTypeDef ret ;
    uint8_t angle_buff[2]; // hold the 2 bits from the Raw Angle 
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG, I2C_MEMADD_SIZE_8BIT,angle_buff,2,HAL_MAX_DELAY);//HAL_MAX_DELAY is blockling 
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	2302      	movs	r3, #2
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2301      	movs	r3, #1
 8000728:	220c      	movs	r2, #12
 800072a:	216c      	movs	r1, #108	@ 0x6c
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f002 ffc7 	bl	80036c0 <HAL_I2C_Mem_Read>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK){
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <AS5600_read_angle+0x38>
    	handle_error(ret);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f826 	bl	8000790 <handle_error>
    }
    uint16_t raw_angle = (((angle_buff[0]<<8)|angle_buff[1])&0x0FFF);
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	b21b      	sxth	r3, r3
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	7a7b      	ldrb	r3, [r7, #9]
 800074e:	b21b      	sxth	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b21b      	sxth	r3, r3
 8000754:	b29b      	uxth	r3, r3
 8000756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800075a:	81bb      	strh	r3, [r7, #12]

    *angle = 360.0f*((float)raw_angle/4096.0f);
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000766:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000788 <AS5600_read_angle+0x7c>
 800076a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800078c <AS5600_read_angle+0x80>
 8000772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	45800000 	.word	0x45800000
 800078c:	43b40000 	.word	0x43b40000

08000790 <handle_error>:





void handle_error(HAL_StatusTypeDef status) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <handle_error+0x1a>
        // Implement error handling logic (e.g., log error or reset I²C bus)
        printf("I2C Error: %d\n", status);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4803      	ldr	r0, [pc, #12]	@ (80007b4 <handle_error+0x24>)
 80007a6:	f00a faab 	bl	800ad00 <iprintf>
    }
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	0800cf0c 	.word	0x0800cf0c

080007b8 <__io_putchar>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007c0:	1d39      	adds	r1, r7, #4
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	2201      	movs	r2, #1
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <__io_putchar+0x20>)
 80007ca:	f007 f8a3 	bl	8007914 <HAL_UART_Transmit>
     //HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY); enable to get debug over STLINK

    return ch;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	24000330 	.word	0x24000330

080007dc <System_Init>:
//uart interrupt ring buffer init
void System_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  // Initialize ring buffer
  ring_buffer_init(&uart_ring_buffer);
 80007e0:	4809      	ldr	r0, [pc, #36]	@ (8000808 <System_Init+0x2c>)
 80007e2:	f000 fdf9 	bl	80013d8 <ring_buffer_init>
  // Start UART reception in interrupt mode
  HAL_UART_Receive_IT(&huart3, &rx_data_s, 1); // initialising Stlink interrupts
 80007e6:	2201      	movs	r2, #1
 80007e8:	4908      	ldr	r1, [pc, #32]	@ (800080c <System_Init+0x30>)
 80007ea:	4809      	ldr	r0, [pc, #36]	@ (8000810 <System_Init+0x34>)
 80007ec:	f007 f920 	bl	8007a30 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data_xbee, 1); // initialising XBee interrupts
 80007f0:	2201      	movs	r2, #1
 80007f2:	4908      	ldr	r1, [pc, #32]	@ (8000814 <System_Init+0x38>)
 80007f4:	4808      	ldr	r0, [pc, #32]	@ (8000818 <System_Init+0x3c>)
 80007f6:	f007 f91b 	bl	8007a30 <HAL_UART_Receive_IT>
  UART_Start_Receive_IT(&huart1, &ucRxData, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	4907      	ldr	r1, [pc, #28]	@ (800081c <System_Init+0x40>)
 80007fe:	4808      	ldr	r0, [pc, #32]	@ (8000820 <System_Init+0x44>)
 8000800:	f008 fd7e 	bl	8009300 <UART_Start_Receive_IT>

 }
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2400045c 	.word	0x2400045c
 800080c:	24000560 	.word	0x24000560
 8000810:	240003c4 	.word	0x240003c4
 8000814:	24000561 	.word	0x24000561
 8000818:	24000330 	.word	0x24000330
 800081c:	24000562 	.word	0x24000562
 8000820:	2400029c 	.word	0x2400029c

08000824 <HAL_UART_RxCpltCallback>:
 

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]


  if(huart->Instance==USART1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a58      	ldr	r2, [pc, #352]	@ (8000994 <HAL_UART_RxCpltCallback+0x170>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d109      	bne.n	800084a <HAL_UART_RxCpltCallback+0x26>
	   {
	       WitSerialDataIn(ucRxData);
 8000836:	4b58      	ldr	r3, [pc, #352]	@ (8000998 <HAL_UART_RxCpltCallback+0x174>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fbd2 	bl	8001fe4 <WitSerialDataIn>
	       UART_Start_Receive_IT(huart, &ucRxData, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	4955      	ldr	r1, [pc, #340]	@ (8000998 <HAL_UART_RxCpltCallback+0x174>)
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f008 fd5b 	bl	8009300 <UART_Start_Receive_IT>
	   }


  if (huart->Instance == USART3) { // Ensure this is for the correct UART instance
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a53      	ldr	r2, [pc, #332]	@ (800099c <HAL_UART_RxCpltCallback+0x178>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d14a      	bne.n	80008ea <HAL_UART_RxCpltCallback+0xc6>
      // Add received byte to the ring buffer
     printf("Received");
 8000854:	4852      	ldr	r0, [pc, #328]	@ (80009a0 <HAL_UART_RxCpltCallback+0x17c>)
 8000856:	f00a fa53 	bl	800ad00 <iprintf>
      ring_buffer_put(&uart_ring_buffer, rx_data_s);
 800085a:	4b52      	ldr	r3, [pc, #328]	@ (80009a4 <HAL_UART_RxCpltCallback+0x180>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	4851      	ldr	r0, [pc, #324]	@ (80009a8 <HAL_UART_RxCpltCallback+0x184>)
 8000862:	f000 fdcb 	bl	80013fc <ring_buffer_put>
      // Check if we received a carriage return '\r' (end of command)
      if (rx_data_s == '\r') {
 8000866:	4b4f      	ldr	r3, [pc, #316]	@ (80009a4 <HAL_UART_RxCpltCallback+0x180>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b0d      	cmp	r3, #13
 800086c:	d138      	bne.n	80008e0 <HAL_UART_RxCpltCallback+0xbc>
          uint8_t data;
          uint16_t index = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	83fb      	strh	r3, [r7, #30]
          // Extract the command from the ring buffer
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000872:	e006      	b.n	8000882 <HAL_UART_RxCpltCallback+0x5e>
              command_buffer[index++] = (char)data;
 8000874:	8bfb      	ldrh	r3, [r7, #30]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	83fa      	strh	r2, [r7, #30]
 800087a:	461a      	mov	r2, r3
 800087c:	7bf9      	ldrb	r1, [r7, #15]
 800087e:	4b4b      	ldr	r3, [pc, #300]	@ (80009ac <HAL_UART_RxCpltCallback+0x188>)
 8000880:	5499      	strb	r1, [r3, r2]
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000882:	f107 030f 	add.w	r3, r7, #15
 8000886:	4619      	mov	r1, r3
 8000888:	4847      	ldr	r0, [pc, #284]	@ (80009a8 <HAL_UART_RxCpltCallback+0x184>)
 800088a:	f000 fde4 	bl	8001456 <ring_buffer_get>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <HAL_UART_RxCpltCallback+0x7c>
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	2b0d      	cmp	r3, #13
 8000898:	d002      	beq.n	80008a0 <HAL_UART_RxCpltCallback+0x7c>
 800089a:	8bfb      	ldrh	r3, [r7, #30]
 800089c:	2b3e      	cmp	r3, #62	@ 0x3e
 800089e:	d9e9      	bls.n	8000874 <HAL_UART_RxCpltCallback+0x50>
          }
          command_buffer[index] = '\0'; // Null-terminate the string
 80008a0:	8bfb      	ldrh	r3, [r7, #30]
 80008a2:	4a42      	ldr	r2, [pc, #264]	@ (80009ac <HAL_UART_RxCpltCallback+0x188>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	54d1      	strb	r1, [r2, r3]
          // Process the command
          const char *response;
          if (strcmp(command_buffer, "hello") == 0) {
 80008a8:	4941      	ldr	r1, [pc, #260]	@ (80009b0 <HAL_UART_RxCpltCallback+0x18c>)
 80008aa:	4840      	ldr	r0, [pc, #256]	@ (80009ac <HAL_UART_RxCpltCallback+0x188>)
 80008ac:	f7ff fd30 	bl	8000310 <strcmp>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d102      	bne.n	80008bc <HAL_UART_RxCpltCallback+0x98>
              response = "Hello to you too!\n";
 80008b6:	4b3f      	ldr	r3, [pc, #252]	@ (80009b4 <HAL_UART_RxCpltCallback+0x190>)
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	e001      	b.n	80008c0 <HAL_UART_RxCpltCallback+0x9c>
          } else {
              response = "Uh oh, something didn't work...\n";
 80008bc:	4b3e      	ldr	r3, [pc, #248]	@ (80009b8 <HAL_UART_RxCpltCallback+0x194>)
 80008be:	61bb      	str	r3, [r7, #24]
          }
          // Transmit the response
          HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 80008c0:	69b8      	ldr	r0, [r7, #24]
 80008c2:	f7ff fd85 	bl	80003d0 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	69b9      	ldr	r1, [r7, #24]
 80008d0:	483a      	ldr	r0, [pc, #232]	@ (80009bc <HAL_UART_RxCpltCallback+0x198>)
 80008d2:	f007 f81f 	bl	8007914 <HAL_UART_Transmit>
          // Clear the command buffer for reuse
          memset(command_buffer, 0, COMMAND_MAX_LENGTH);
 80008d6:	2240      	movs	r2, #64	@ 0x40
 80008d8:	2100      	movs	r1, #0
 80008da:	4834      	ldr	r0, [pc, #208]	@ (80009ac <HAL_UART_RxCpltCallback+0x188>)
 80008dc:	f00a fb60 	bl	800afa0 <memset>
      }
      // Re-enable UART interrupt for next byte reception
      HAL_UART_Receive_IT(&huart3, &rx_data_s, 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	4930      	ldr	r1, [pc, #192]	@ (80009a4 <HAL_UART_RxCpltCallback+0x180>)
 80008e4:	4835      	ldr	r0, [pc, #212]	@ (80009bc <HAL_UART_RxCpltCallback+0x198>)
 80008e6:	f007 f8a3 	bl	8007a30 <HAL_UART_Receive_IT>
  }
    
  if (huart->Instance == USART2) { // Ensure this is for the correct UART instance
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a34      	ldr	r2, [pc, #208]	@ (80009c0 <HAL_UART_RxCpltCallback+0x19c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d14a      	bne.n	800098a <HAL_UART_RxCpltCallback+0x166>
    // Add received byte to the ring buffer
	  printf("Received");
 80008f4:	482a      	ldr	r0, [pc, #168]	@ (80009a0 <HAL_UART_RxCpltCallback+0x17c>)
 80008f6:	f00a fa03 	bl	800ad00 <iprintf>
		ring_buffer_put(&uart_ring_buffer, rx_data_xbee);
 80008fa:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <HAL_UART_RxCpltCallback+0x1a0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	4829      	ldr	r0, [pc, #164]	@ (80009a8 <HAL_UART_RxCpltCallback+0x184>)
 8000902:	f000 fd7b 	bl	80013fc <ring_buffer_put>
		// Check if we received a carriage return '\r' (end of command)
		if (rx_data_xbee == '\r') {
 8000906:	4b2f      	ldr	r3, [pc, #188]	@ (80009c4 <HAL_UART_RxCpltCallback+0x1a0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b0d      	cmp	r3, #13
 800090c:	d138      	bne.n	8000980 <HAL_UART_RxCpltCallback+0x15c>
			uint8_t data;
			uint16_t index = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	82fb      	strh	r3, [r7, #22]
			// Extract the command from the ring buffer
			while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000912:	e006      	b.n	8000922 <HAL_UART_RxCpltCallback+0xfe>
				command_buffer[index++] = (char)data;
 8000914:	8afb      	ldrh	r3, [r7, #22]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	82fa      	strh	r2, [r7, #22]
 800091a:	461a      	mov	r2, r3
 800091c:	7bb9      	ldrb	r1, [r7, #14]
 800091e:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <HAL_UART_RxCpltCallback+0x188>)
 8000920:	5499      	strb	r1, [r3, r2]
			while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000922:	f107 030e 	add.w	r3, r7, #14
 8000926:	4619      	mov	r1, r3
 8000928:	481f      	ldr	r0, [pc, #124]	@ (80009a8 <HAL_UART_RxCpltCallback+0x184>)
 800092a:	f000 fd94 	bl	8001456 <ring_buffer_get>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <HAL_UART_RxCpltCallback+0x11c>
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	2b0d      	cmp	r3, #13
 8000938:	d002      	beq.n	8000940 <HAL_UART_RxCpltCallback+0x11c>
 800093a:	8afb      	ldrh	r3, [r7, #22]
 800093c:	2b3e      	cmp	r3, #62	@ 0x3e
 800093e:	d9e9      	bls.n	8000914 <HAL_UART_RxCpltCallback+0xf0>
			}
			command_buffer[index] = '\0'; // Null-terminate the string
 8000940:	8afb      	ldrh	r3, [r7, #22]
 8000942:	4a1a      	ldr	r2, [pc, #104]	@ (80009ac <HAL_UART_RxCpltCallback+0x188>)
 8000944:	2100      	movs	r1, #0
 8000946:	54d1      	strb	r1, [r2, r3]
			// Process the command
			const char *response;
			if (strcmp(command_buffer, "hello") == 0) {
 8000948:	4919      	ldr	r1, [pc, #100]	@ (80009b0 <HAL_UART_RxCpltCallback+0x18c>)
 800094a:	4818      	ldr	r0, [pc, #96]	@ (80009ac <HAL_UART_RxCpltCallback+0x188>)
 800094c:	f7ff fce0 	bl	8000310 <strcmp>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <HAL_UART_RxCpltCallback+0x138>
				response = "Hello to you Xboo!\n";
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <HAL_UART_RxCpltCallback+0x1a4>)
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	e001      	b.n	8000960 <HAL_UART_RxCpltCallback+0x13c>
			} else {
				response = "Uh oh, something XBEEEEEEE didn't work...\n";
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <HAL_UART_RxCpltCallback+0x1a8>)
 800095e:	613b      	str	r3, [r7, #16]
			}
			// Transmit the response
			HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000960:	6938      	ldr	r0, [r7, #16]
 8000962:	f7ff fd35 	bl	80003d0 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	6939      	ldr	r1, [r7, #16]
 8000970:	4817      	ldr	r0, [pc, #92]	@ (80009d0 <HAL_UART_RxCpltCallback+0x1ac>)
 8000972:	f006 ffcf 	bl	8007914 <HAL_UART_Transmit>
			// Clear the command buffer for reuse
			memset(command_buffer, 0, COMMAND_MAX_LENGTH);
 8000976:	2240      	movs	r2, #64	@ 0x40
 8000978:	2100      	movs	r1, #0
 800097a:	480c      	ldr	r0, [pc, #48]	@ (80009ac <HAL_UART_RxCpltCallback+0x188>)
 800097c:	f00a fb10 	bl	800afa0 <memset>
		}
		// Re-enable UART interrupt for next byte reception
		HAL_UART_Receive_IT(&huart2, &rx_data_xbee, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	4910      	ldr	r1, [pc, #64]	@ (80009c4 <HAL_UART_RxCpltCallback+0x1a0>)
 8000984:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <HAL_UART_RxCpltCallback+0x1ac>)
 8000986:	f007 f853 	bl	8007a30 <HAL_UART_Receive_IT>
  	  }

 }
 800098a:	bf00      	nop
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40011000 	.word	0x40011000
 8000998:	24000562 	.word	0x24000562
 800099c:	40004800 	.word	0x40004800
 80009a0:	0800cf1c 	.word	0x0800cf1c
 80009a4:	24000560 	.word	0x24000560
 80009a8:	2400045c 	.word	0x2400045c
 80009ac:	24000564 	.word	0x24000564
 80009b0:	0800cf28 	.word	0x0800cf28
 80009b4:	0800cf30 	.word	0x0800cf30
 80009b8:	0800cf44 	.word	0x0800cf44
 80009bc:	240003c4 	.word	0x240003c4
 80009c0:	40004400 	.word	0x40004400
 80009c4:	24000561 	.word	0x24000561
 80009c8:	0800cf68 	.word	0x0800cf68
 80009cc:	0800cf7c 	.word	0x0800cf7c
 80009d0:	24000330 	.word	0x24000330

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09a      	sub	sp, #104	@ 0x68
 80009d8:	af06      	add	r7, sp, #24
  float fAcc[3], fGyro[3], fAngle[3], fYaw;
  int i;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009da:	f000 fccb 	bl	8001374 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f001 fc93 	bl	8002308 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f979 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 fb9b 	bl	8001120 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009ea:	f000 fa13 	bl	8000e14 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80009ee:	f000 fab1 	bl	8000f54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009f2:	f000 fafd 	bl	8000ff0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80009f6:	f000 fb47 	bl	8001088 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80009fa:	f000 f9cb 	bl	8000d94 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  WitInit(WIT_PROTOCOL_NORMAL, 0x50);
 80009fe:	2150      	movs	r1, #80	@ 0x50
 8000a00:	2000      	movs	r0, #0
 8000a02:	f001 fc33 	bl	800226c <WitInit>
  WitSerialWriteRegister(SensorUartSend);
 8000a06:	48a2      	ldr	r0, [pc, #648]	@ (8000c90 <main+0x2bc>)
 8000a08:	f001 fa30 	bl	8001e6c <WitSerialWriteRegister>
  WitRegisterCallBack(CopeSensorData);
 8000a0c:	48a1      	ldr	r0, [pc, #644]	@ (8000c94 <main+0x2c0>)
 8000a0e:	f001 fc17 	bl	8002240 <WitRegisterCallBack>

  System_Init();
 8000a12:	f7ff fee3 	bl	80007dc <System_Init>
  //AutoScanSensor();

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a16:	2100      	movs	r1, #0
 8000a18:	489f      	ldr	r0, [pc, #636]	@ (8000c98 <main+0x2c4>)
 8000a1a:	f006 f82b 	bl	8006a74 <HAL_TIM_PWM_Start>

  float angle;
  char str[] = "Hello";
 8000a1e:	4a9f      	ldr	r2, [pc, #636]	@ (8000c9c <main+0x2c8>)
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a28:	6018      	str	r0, [r3, #0]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	8019      	strh	r1, [r3, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 1000);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fccc 	bl	80003d0 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	f107 0114 	add.w	r1, r7, #20
 8000a40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a44:	4896      	ldr	r0, [pc, #600]	@ (8000ca0 <main+0x2cc>)
 8000a46:	f006 ff65 	bl	8007914 <HAL_UART_Transmit>
 
  ServoController sail_servo;
  sail_servo.htim= &htim1;
 8000a4a:	4b93      	ldr	r3, [pc, #588]	@ (8000c98 <main+0x2c4>)
 8000a4c:	60fb      	str	r3, [r7, #12]
  sail_servo.channel = TIM_CHANNEL_1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef i2c_status = AS5600_read_angle(&hi2c1, &angle);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4892      	ldr	r0, [pc, #584]	@ (8000ca4 <main+0x2d0>)
 8000a5a:	f7ff fe57 	bl	800070c <AS5600_read_angle>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	  if (i2c_status== HAL_OK){
 8000a64:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d108      	bne.n	8000a7e <main+0xaa>
		  printf("the angle is %f", angle);
 8000a6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a74:	ec53 2b17 	vmov	r2, r3, d7
 8000a78:	488b      	ldr	r0, [pc, #556]	@ (8000ca8 <main+0x2d4>)
 8000a7a:	f00a f941 	bl	800ad00 <iprintf>
	  }
	  
	  if (i2c_status != HAL_OK) {
 8000a7e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <main+0xba>
	      printf("Error reading angle from AS5600\n");
 8000a86:	4889      	ldr	r0, [pc, #548]	@ (8000cac <main+0x2d8>)
 8000a88:	f00a f9aa 	bl	800ade0 <puts>
	      continue; // Skip to the next iteration
 8000a8c:	e0fe      	b.n	8000c8c <main+0x2b8>
	  }
    
	  copy_wind_pos(&sail_servo, angle);
 8000a8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	eeb0 0a67 	vmov.f32	s0, s15
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fd8d 	bl	80015b8 <copy_wind_pos>

    printf("hold");
 8000a9e:	4884      	ldr	r0, [pc, #528]	@ (8000cb0 <main+0x2dc>)
 8000aa0:	f00a f92e 	bl	800ad00 <iprintf>



    if(s_cDataUpdate)
 8000aa4:	4b83      	ldr	r3, [pc, #524]	@ (8000cb4 <main+0x2e0>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0d2      	beq.n	8000a52 <main+0x7e>
    		{
    			printf("3");
 8000aac:	2033      	movs	r0, #51	@ 0x33
 8000aae:	f00a f939 	bl	800ad24 <putchar>
    			for(i = 0; i < 3; i++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ab6:	e04a      	b.n	8000b4e <main+0x17a>
    			{
    				fAcc[i] = sReg[AX+i] / 32768.0f * 16.0f;
 8000ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aba:	3334      	adds	r3, #52	@ 0x34
 8000abc:	4a7e      	ldr	r2, [pc, #504]	@ (8000cb8 <main+0x2e4>)
 8000abe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aca:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8000cbc <main+0x2e8>
 8000ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ad2:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	3350      	adds	r3, #80	@ 0x50
 8000ae0:	443b      	add	r3, r7
 8000ae2:	3b18      	subs	r3, #24
 8000ae4:	edc3 7a00 	vstr	s15, [r3]
    				fGyro[i] = sReg[GX+i] / 32768.0f * 2000.0f;
 8000ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aea:	3337      	adds	r3, #55	@ 0x37
 8000aec:	4a72      	ldr	r2, [pc, #456]	@ (8000cb8 <main+0x2e4>)
 8000aee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000af2:	ee07 3a90 	vmov	s15, r3
 8000af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000afa:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8000cbc <main+0x2e8>
 8000afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b02:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8000cc0 <main+0x2ec>
 8000b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	3350      	adds	r3, #80	@ 0x50
 8000b10:	443b      	add	r3, r7
 8000b12:	3b24      	subs	r3, #36	@ 0x24
 8000b14:	edc3 7a00 	vstr	s15, [r3]
    				fAngle[i] = sReg[Roll+i] / 32768.0f * 180.0f;
 8000b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b1a:	333d      	adds	r3, #61	@ 0x3d
 8000b1c:	4a66      	ldr	r2, [pc, #408]	@ (8000cb8 <main+0x2e4>)
 8000b1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2a:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8000cbc <main+0x2e8>
 8000b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b32:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8000cc4 <main+0x2f0>
 8000b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	3350      	adds	r3, #80	@ 0x50
 8000b40:	443b      	add	r3, r7
 8000b42:	3b30      	subs	r3, #48	@ 0x30
 8000b44:	edc3 7a00 	vstr	s15, [r3]
    			for(i = 0; i < 3; i++)
 8000b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	ddb1      	ble.n	8000ab8 <main+0xe4>
    			}
    			if(s_cDataUpdate & ACC_UPDATE)
 8000b54:	4b57      	ldr	r3, [pc, #348]	@ (8000cb4 <main+0x2e0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d01b      	beq.n	8000b98 <main+0x1c4>
    			{
    				printf("acc:%.3f %.3f %.3f\r\n", fAcc[0], fAcc[1], fAcc[2]);
 8000b60:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000b64:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b68:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000b6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b70:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8000b74:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b78:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b7c:	ed8d 7b00 	vstr	d7, [sp]
 8000b80:	ec53 2b15 	vmov	r2, r3, d5
 8000b84:	4850      	ldr	r0, [pc, #320]	@ (8000cc8 <main+0x2f4>)
 8000b86:	f00a f8bb 	bl	800ad00 <iprintf>
    				s_cDataUpdate &= ~ACC_UPDATE;
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb4 <main+0x2e0>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f023 0301 	bic.w	r3, r3, #1
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b47      	ldr	r3, [pc, #284]	@ (8000cb4 <main+0x2e0>)
 8000b96:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & GYRO_UPDATE)
 8000b98:	4b46      	ldr	r3, [pc, #280]	@ (8000cb4 <main+0x2e0>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d01b      	beq.n	8000bdc <main+0x208>
    			{
    				printf("gyro:%.3f %.3f %.3f\r\n", fGyro[0], fGyro[1], fGyro[2]);
 8000ba4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ba8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000bac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000bb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bb4:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8000bb8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000bbc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000bc0:	ed8d 7b00 	vstr	d7, [sp]
 8000bc4:	ec53 2b15 	vmov	r2, r3, d5
 8000bc8:	4840      	ldr	r0, [pc, #256]	@ (8000ccc <main+0x2f8>)
 8000bca:	f00a f899 	bl	800ad00 <iprintf>
    				s_cDataUpdate &= ~GYRO_UPDATE;
 8000bce:	4b39      	ldr	r3, [pc, #228]	@ (8000cb4 <main+0x2e0>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	f023 0302 	bic.w	r3, r3, #2
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b36      	ldr	r3, [pc, #216]	@ (8000cb4 <main+0x2e0>)
 8000bda:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & ANGLE_UPDATE)
 8000bdc:	4b35      	ldr	r3, [pc, #212]	@ (8000cb4 <main+0x2e0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d033      	beq.n	8000c50 <main+0x27c>
    			{
                    fYaw = (float)((unsigned short)sReg[Yaw]) / 32768 * 180.0;
 8000be8:	4b33      	ldr	r3, [pc, #204]	@ (8000cb8 <main+0x2e4>)
 8000bea:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	@ 0x7e
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bf8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8000cbc <main+0x2e8>
 8000bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c00:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000cc4 <main+0x2f0>
 8000c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c08:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    				printf("angle:%.3f %.3f %.3f(%.3f)\r\n", fAngle[0], fAngle[1], fAngle[2], fYaw);
 8000c0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c10:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000c14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000c20:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c24:	edd7 5a11 	vldr	s11, [r7, #68]	@ 0x44
 8000c28:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000c2c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000c30:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c34:	ed8d 7b00 	vstr	d7, [sp]
 8000c38:	ec53 2b14 	vmov	r2, r3, d4
 8000c3c:	4824      	ldr	r0, [pc, #144]	@ (8000cd0 <main+0x2fc>)
 8000c3e:	f00a f85f 	bl	800ad00 <iprintf>
    				s_cDataUpdate &= ~ANGLE_UPDATE;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <main+0x2e0>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	f023 0304 	bic.w	r3, r3, #4
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <main+0x2e0>)
 8000c4e:	701a      	strb	r2, [r3, #0]
    			}
    			if(s_cDataUpdate & MAG_UPDATE)
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <main+0x2e0>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d014      	beq.n	8000c86 <main+0x2b2>
    			{
    				printf("mag:%d %d %d\r\n", sReg[HX], sReg[HY], sReg[HZ]);
 8000c5c:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <main+0x2e4>)
 8000c5e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8000c62:	4619      	mov	r1, r3
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <main+0x2e4>)
 8000c66:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x2e4>)
 8000c6e:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 8000c72:	4818      	ldr	r0, [pc, #96]	@ (8000cd4 <main+0x300>)
 8000c74:	f00a f844 	bl	800ad00 <iprintf>
    				s_cDataUpdate &= ~MAG_UPDATE;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <main+0x2e0>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	f023 0308 	bic.w	r3, r3, #8
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <main+0x2e0>)
 8000c84:	701a      	strb	r2, [r3, #0]
    			}
                s_cDataUpdate = 0;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <main+0x2e0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
  {
 8000c8c:	e6e1      	b.n	8000a52 <main+0x7e>
 8000c8e:	bf00      	nop
 8000c90:	0800128d 	.word	0x0800128d
 8000c94:	080012b5 	.word	0x080012b5
 8000c98:	24000250 	.word	0x24000250
 8000c9c:	0800d040 	.word	0x0800d040
 8000ca0:	240003c4 	.word	0x240003c4
 8000ca4:	240001fc 	.word	0x240001fc
 8000ca8:	0800cfa8 	.word	0x0800cfa8
 8000cac:	0800cfb8 	.word	0x0800cfb8
 8000cb0:	0800cfd8 	.word	0x0800cfd8
 8000cb4:	24000458 	.word	0x24000458
 8000cb8:	240006bc 	.word	0x240006bc
 8000cbc:	47000000 	.word	0x47000000
 8000cc0:	44fa0000 	.word	0x44fa0000
 8000cc4:	43340000 	.word	0x43340000
 8000cc8:	0800cfe0 	.word	0x0800cfe0
 8000ccc:	0800cff8 	.word	0x0800cff8
 8000cd0:	0800d010 	.word	0x0800d010
 8000cd4:	0800d030 	.word	0x0800d030

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b09c      	sub	sp, #112	@ 0x70
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	224c      	movs	r2, #76	@ 0x4c
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00a f95a 	bl	800afa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2220      	movs	r2, #32
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f00a f954 	bl	800afa0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f003 f901 	bl	8003f00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <SystemClock_Config+0xb8>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d0a:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <SystemClock_Config+0xb8>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <SystemClock_Config+0xb8>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d1e:	bf00      	nop
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <SystemClock_Config+0xb8>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d2c:	d1f8      	bne.n	8000d20 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000d36:	2340      	movs	r3, #64	@ 0x40
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 f916 	bl	8003f74 <HAL_RCC_OscConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d4e:	f000 fb3d 	bl	80013cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	233f      	movs	r3, #63	@ 0x3f
 8000d54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d66:	2340      	movs	r3, #64	@ 0x40
 8000d68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2101      	movs	r1, #1
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fcd5 	bl	8004728 <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d84:	f000 fb22 	bl	80013cc <Error_Handler>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3770      	adds	r7, #112	@ 0x70
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58024800 	.word	0x58024800

08000d94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e0c <MX_I2C1_Init+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000da0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e10 <MX_I2C1_Init+0x7c>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000da4:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dce:	480e      	ldr	r0, [pc, #56]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000dd0:	f002 fbda 	bl	8003588 <HAL_I2C_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dda:	f000 faf7 	bl	80013cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000de2:	f002 fff5 	bl	8003dd0 <HAL_I2CEx_ConfigAnalogFilter>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dec:	f000 faee 	bl	80013cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_I2C1_Init+0x74>)
 8000df4:	f003 f837 	bl	8003e66 <HAL_I2CEx_ConfigDigitalFilter>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dfe:	f000 fae5 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	240001fc 	.word	0x240001fc
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	00707cbb 	.word	0x00707cbb

08000e14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b098      	sub	sp, #96	@ 0x60
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	615a      	str	r2, [r3, #20]
 8000e38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2234      	movs	r2, #52	@ 0x34
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00a f8ad 	bl	800afa0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e46:	4b41      	ldr	r3, [pc, #260]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000e48:	4a41      	ldr	r2, [pc, #260]	@ (8000f50 <MX_TIM1_Init+0x13c>)
 8000e4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000e4e:	223f      	movs	r2, #63	@ 0x3f
 8000e50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b3e      	ldr	r3, [pc, #248]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000e58:	4b3c      	ldr	r3, [pc, #240]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000e5a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e60:	4b3a      	ldr	r3, [pc, #232]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e66:	4b39      	ldr	r3, [pc, #228]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6c:	4b37      	ldr	r3, [pc, #220]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e72:	4836      	ldr	r0, [pc, #216]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000e74:	f005 fda6 	bl	80069c4 <HAL_TIM_PWM_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e7e:	f000 faa5 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e92:	4619      	mov	r1, r3
 8000e94:	482d      	ldr	r0, [pc, #180]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000e96:	f006 fbc5 	bl	8007624 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ea0:	f000 fa94 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea4:	2360      	movs	r3, #96	@ 0x60
 8000ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000ea8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4820      	ldr	r0, [pc, #128]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000ecc:	f005 feee 	bl	8006cac <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000ed6:	f000 fa79 	bl	80013cc <Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 8000eda:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4818      	ldr	r0, [pc, #96]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000eea:	f005 fedf 	bl	8006cac <HAL_TIM_PWM_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000ef4:	f000 fa6a 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000f2e:	f006 fc15 	bl	800775c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000f38:	f000 fa48 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <MX_TIM1_Init+0x138>)
 8000f3e:	f000 fc21 	bl	8001784 <HAL_TIM_MspPostInit>

}
 8000f42:	bf00      	nop
 8000f44:	3760      	adds	r7, #96	@ 0x60
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	24000250 	.word	0x24000250
 8000f50:	40010000 	.word	0x40010000

08000f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f5a:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <MX_USART1_UART_Init+0x94>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = uiBuad;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <MX_USART1_UART_Init+0x98>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a20      	ldr	r2, [pc, #128]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f64:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f96:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f9c:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f9e:	f006 fc69 	bl	8007874 <HAL_UART_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fa8:	f000 fa10 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000fb0:	f009 f8e3 	bl	800a17a <HAL_UARTEx_SetTxFifoThreshold>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fba:	f000 fa07 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000fc2:	f009 f918 	bl	800a1f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fcc:	f000 f9fe 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000fd2:	f009 f899 	bl	800a108 <HAL_UARTEx_DisableFifoMode>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f000 f9f6 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2400029c 	.word	0x2400029c
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	24000000 	.word	0x24000000

08000ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 8000ff6:	4a23      	ldr	r2, [pc, #140]	@ (8001084 <MX_USART2_UART_Init+0x94>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 8000ffc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001038:	4811      	ldr	r0, [pc, #68]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 800103a:	f006 fc1b 	bl	8007874 <HAL_UART_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001044:	f000 f9c2 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001048:	2100      	movs	r1, #0
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 800104c:	f009 f895 	bl	800a17a <HAL_UARTEx_SetTxFifoThreshold>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001056:	f000 f9b9 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4808      	ldr	r0, [pc, #32]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 800105e:	f009 f8ca 	bl	800a1f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001068:	f000 f9b0 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_USART2_UART_Init+0x90>)
 800106e:	f009 f84b 	bl	800a108 <HAL_UARTEx_DisableFifoMode>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001078:	f000 f9a8 	bl	80013cc <Error_Handler>
  	  //UART_Start_Receive_IT(&huart2, &ucRxData, 1);
      //HAL_UART_Receive_IT(&huart2, &ucRxData, 1);

  /* USER CODE END USART2_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	24000330 	.word	0x24000330
 8001084:	40004400 	.word	0x40004400

08001088 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 800108e:	4a23      	ldr	r2, [pc, #140]	@ (800111c <MX_USART3_UART_Init+0x94>)
 8001090:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010d0:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010d2:	f006 fbcf 	bl	8007874 <HAL_UART_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010dc:	f000 f976 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010e4:	f009 f849 	bl	800a17a <HAL_UARTEx_SetTxFifoThreshold>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f000 f96d 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4808      	ldr	r0, [pc, #32]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 80010f6:	f009 f87e 	bl	800a1f6 <HAL_UARTEx_SetRxFifoThreshold>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001100:	f000 f964 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <MX_USART3_UART_Init+0x90>)
 8001106:	f008 ffff 	bl	800a108 <HAL_UARTEx_DisableFifoMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001110:	f000 f95c 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	240003c4 	.word	0x240003c4
 800111c:	40004800 	.word	0x40004800

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	4b51      	ldr	r3, [pc, #324]	@ (800127c <MX_GPIO_Init+0x15c>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113c:	4a4f      	ldr	r2, [pc, #316]	@ (800127c <MX_GPIO_Init+0x15c>)
 800113e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001142:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001146:	4b4d      	ldr	r3, [pc, #308]	@ (800127c <MX_GPIO_Init+0x15c>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001154:	4b49      	ldr	r3, [pc, #292]	@ (800127c <MX_GPIO_Init+0x15c>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115a:	4a48      	ldr	r2, [pc, #288]	@ (800127c <MX_GPIO_Init+0x15c>)
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001164:	4b45      	ldr	r3, [pc, #276]	@ (800127c <MX_GPIO_Init+0x15c>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	4b42      	ldr	r3, [pc, #264]	@ (800127c <MX_GPIO_Init+0x15c>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001178:	4a40      	ldr	r2, [pc, #256]	@ (800127c <MX_GPIO_Init+0x15c>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001182:	4b3e      	ldr	r3, [pc, #248]	@ (800127c <MX_GPIO_Init+0x15c>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001190:	4b3a      	ldr	r3, [pc, #232]	@ (800127c <MX_GPIO_Init+0x15c>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	4a39      	ldr	r2, [pc, #228]	@ (800127c <MX_GPIO_Init+0x15c>)
 8001198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a0:	4b36      	ldr	r3, [pc, #216]	@ (800127c <MX_GPIO_Init+0x15c>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b33      	ldr	r3, [pc, #204]	@ (800127c <MX_GPIO_Init+0x15c>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b4:	4a31      	ldr	r2, [pc, #196]	@ (800127c <MX_GPIO_Init+0x15c>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <MX_GPIO_Init+0x15c>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <MX_GPIO_Init+0x15c>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d2:	4a2a      	ldr	r2, [pc, #168]	@ (800127c <MX_GPIO_Init+0x15c>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011dc:	4b27      	ldr	r3, [pc, #156]	@ (800127c <MX_GPIO_Init+0x15c>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2180      	movs	r1, #128	@ 0x80
 80011ee:	4824      	ldr	r0, [pc, #144]	@ (8001280 <MX_GPIO_Init+0x160>)
 80011f0:	f002 f9b0 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	481d      	ldr	r0, [pc, #116]	@ (8001280 <MX_GPIO_Init+0x160>)
 800120c:	f001 fffa 	bl	8003204 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
   /* Configure USART3 TX (PD8) and RX (PD9) */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001210:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	2302      	movs	r3, #2
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3; // AF7 for USART3
 8001222:	2307      	movs	r3, #7
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4815      	ldr	r0, [pc, #84]	@ (8001284 <MX_GPIO_Init+0x164>)
 800122e:	f001 ffe9 	bl	8003204 <HAL_GPIO_Init>

  /* Configure USART2 TX (PD5) and RX (PD6) */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001232:	2360      	movs	r3, #96	@ 0x60
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	2302      	movs	r3, #2
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // AF7 for USART2
 8001242:	2307      	movs	r3, #7
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	480d      	ldr	r0, [pc, #52]	@ (8001284 <MX_GPIO_Init+0x164>)
 800124e:	f001 ffd9 	bl	8003204 <HAL_GPIO_Init>


  /* Configure USART1 TX (PA9) and RX (PA10) */
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001252:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Or GPIO_PULLUP for RX if needed
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001260:	2302      	movs	r3, #2
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // AF7 for USART1
 8001264:	2307      	movs	r3, #7
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	@ (8001288 <MX_GPIO_Init+0x168>)
 8001270:	f001 ffc8 	bl	8003204 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_USART1 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 8001274:	bf00      	nop
 8001276:	3730      	adds	r7, #48	@ 0x30
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	58024400 	.word	0x58024400
 8001280:	58021800 	.word	0x58021800
 8001284:	58020c00 	.word	0x58020c00
 8001288:	58020000 	.word	0x58020000

0800128c <SensorUartSend>:

/* USER CODE BEGIN 4 */

static void SensorUartSend(uint8_t *p_data, uint32_t uiSize)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart2, p_data, uiSize, uiSize*4);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b29a      	uxth	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <SensorUartSend+0x24>)
 80012a2:	f006 fb37 	bl	8007914 <HAL_UART_Transmit>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24000330 	.word	0x24000330

080012b4 <CopeSensorData>:
static void CopeSensorData(uint32_t uiReg, uint32_t uiRegNum)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	int i;
    for(i = 0; i < uiRegNum; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	e049      	b.n	8001358 <CopeSensorData+0xa4>
    {
        switch(uiReg)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b36      	subs	r3, #54	@ 0x36
 80012c8:	2b09      	cmp	r3, #9
 80012ca:	d837      	bhi.n	800133c <CopeSensorData+0x88>
 80012cc:	a201      	add	r2, pc, #4	@ (adr r2, 80012d4 <CopeSensorData+0x20>)
 80012ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d2:	bf00      	nop
 80012d4:	080012fd 	.word	0x080012fd
 80012d8:	0800133d 	.word	0x0800133d
 80012dc:	0800133d 	.word	0x0800133d
 80012e0:	0800130d 	.word	0x0800130d
 80012e4:	0800133d 	.word	0x0800133d
 80012e8:	0800133d 	.word	0x0800133d
 80012ec:	0800131d 	.word	0x0800131d
 80012f0:	0800133d 	.word	0x0800133d
 80012f4:	0800133d 	.word	0x0800133d
 80012f8:	0800132d 	.word	0x0800132d
        {
            case AZ:
				s_cDataUpdate |= ACC_UPDATE;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <CopeSensorData+0xbc>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <CopeSensorData+0xbc>)
 8001308:	701a      	strb	r2, [r3, #0]
            break;
 800130a:	e01f      	b.n	800134c <CopeSensorData+0x98>
            case GZ:
				s_cDataUpdate |= GYRO_UPDATE;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <CopeSensorData+0xbc>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <CopeSensorData+0xbc>)
 8001318:	701a      	strb	r2, [r3, #0]
            break;
 800131a:	e017      	b.n	800134c <CopeSensorData+0x98>
            case HZ:
				s_cDataUpdate |= MAG_UPDATE;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <CopeSensorData+0xbc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <CopeSensorData+0xbc>)
 8001328:	701a      	strb	r2, [r3, #0]
            break;
 800132a:	e00f      	b.n	800134c <CopeSensorData+0x98>
            case Yaw:
				s_cDataUpdate |= ANGLE_UPDATE;
 800132c:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <CopeSensorData+0xbc>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <CopeSensorData+0xbc>)
 8001338:	701a      	strb	r2, [r3, #0]
            break;
 800133a:	e007      	b.n	800134c <CopeSensorData+0x98>
            default:
				s_cDataUpdate |= READ_UPDATE;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <CopeSensorData+0xbc>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <CopeSensorData+0xbc>)
 8001348:	701a      	strb	r2, [r3, #0]
			break;
 800134a:	bf00      	nop
        }
		uiReg++;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	607b      	str	r3, [r7, #4]
    for(i = 0; i < uiRegNum; i++)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3301      	adds	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8b1      	bhi.n	80012c4 <CopeSensorData+0x10>
    }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	24000458 	.word	0x24000458

08001374 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001386:	f001 f961 	bl	800264c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800138a:	2301      	movs	r3, #1
 800138c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800138e:	2300      	movs	r3, #0
 8001390:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001396:	231f      	movs	r3, #31
 8001398:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800139a:	2387      	movs	r3, #135	@ 0x87
 800139c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800139e:	2300      	movs	r3, #0
 80013a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80013a2:	2300      	movs	r3, #0
 80013a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80013a6:	2301      	movs	r3, #1
 80013a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80013aa:	2301      	movs	r3, #1
 80013ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013b6:	463b      	mov	r3, r7
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 f97f 	bl	80026bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013be:	2004      	movs	r0, #4
 80013c0:	f001 f95c 	bl	800267c <HAL_MPU_Enable>

}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <Error_Handler+0x8>

080013d8 <ring_buffer_init>:
//ring_buffer.c
#include "ring_buffer.h"

void ring_buffer_init(ring_buffer *p_ring_buf){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    p_ring_buf->head = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    p_ring_buf->tail = 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <ring_buffer_put>:

//add data to the ring buffer 
uint8_t ring_buffer_put(ring_buffer *p_ring_buf, uint8_t data){
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (p_ring_buf->head + 1 ) % RING_BUFFER_SIZE; // increments by one and becomes 0 when reached buffer size (should wraparound at max int val) 
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800140e:	b29b      	uxth	r3, r3
 8001410:	3301      	adds	r3, #1
 8001412:	425a      	negs	r2, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	bf58      	it	pl
 800141a:	4253      	negpl	r3, r2
 800141c:	81fb      	strh	r3, [r7, #14]
    if (next == p_ring_buf->tail){
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001424:	b29b      	uxth	r3, r3
 8001426:	89fa      	ldrh	r2, [r7, #14]
 8001428:	429a      	cmp	r2, r3
 800142a:	d101      	bne.n	8001430 <ring_buffer_put+0x34>
        return 0; // when its full 
 800142c:	2300      	movs	r3, #0
 800142e:	e00c      	b.n	800144a <ring_buffer_put+0x4e>
    }
    p_ring_buf->buffer[p_ring_buf->head]= data;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001436:	b29b      	uxth	r3, r3
 8001438:	4619      	mov	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	545a      	strb	r2, [r3, r1]
    p_ring_buf->head = next;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	89fa      	ldrh	r2, [r7, #14]
 8001444:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    return 1; // succcess
 8001448:	2301      	movs	r3, #1
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <ring_buffer_get>:

//get data from the ring buffer
uint8_t ring_buffer_get(ring_buffer *p_ring_buf, uint8_t *data){
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
    if (p_ring_buf->head == p_ring_buf->tail) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001466:	b29a      	uxth	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800146e:	b29b      	uxth	r3, r3
 8001470:	429a      	cmp	r2, r3
 8001472:	d101      	bne.n	8001478 <ring_buffer_get+0x22>
        return 0; // Buffer empty
 8001474:	2300      	movs	r3, #0
 8001476:	e017      	b.n	80014a8 <ring_buffer_get+0x52>
    }
    *data = p_ring_buf->buffer[p_ring_buf->tail];
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800147e:	b29b      	uxth	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	5c9a      	ldrb	r2, [r3, r2]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	701a      	strb	r2, [r3, #0]
    p_ring_buf->tail = (p_ring_buf->tail+1)%RING_BUFFER_SIZE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001490:	b29b      	uxth	r3, r3
 8001492:	3301      	adds	r3, #1
 8001494:	425a      	negs	r2, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	bf58      	it	pl
 800149c:	4253      	negpl	r3, r2
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    return 1; // read
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <set_servo_angle>:
#include "servo_controls.h"
#include "stdint.h"



 void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim 
     the maths maybe works like 1.5 ms pulse width is neutral with .5 and 2.5 being either end
     so we have a 1us count so 500us/1ms -> 500 counts and 2500us -> 2500 counts*/
    if (angle < 0.0f) angle = 0.0f;
 80014c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	d502      	bpl.n	80014d6 <set_servo_angle+0x22>
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
    if (angle > 180.0f) angle = 180.0f; //limits
 80014d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014da:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80015a4 <set_servo_angle+0xf0>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	dd01      	ble.n	80014ec <set_servo_angle+0x38>
 80014e8:	4b2f      	ldr	r3, [pc, #188]	@ (80015a8 <set_servo_angle+0xf4>)
 80014ea:	607b      	str	r3, [r7, #4]
    
    float min_pulse = 500.0f;
 80014ec:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <set_servo_angle+0xf8>)
 80014ee:	61fb      	str	r3, [r7, #28]
    float max_pulse = 2500.0f;
 80014f0:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <set_servo_angle+0xfc>)
 80014f2:	61bb      	str	r3, [r7, #24]
     
    uint32_t pulse_width = min_pulse +(angle*((max_pulse - min_pulse)/180.0f));
 80014f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80014f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001500:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80015a4 <set_servo_angle+0xf0>
 8001504:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001510:	edd7 7a07 	vldr	s15, [r7, #28]
 8001514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800151c:	ee17 3a90 	vmov	r3, s15
 8001520:	617b      	str	r3, [r7, #20]
    uint32_t rounded_pulse_width = (uint32_t)(pulse_width + 0.5f); 
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001538:	ee17 3a90 	vmov	r3, s15
 800153c:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d104      	bne.n	800154e <set_servo_angle+0x9a>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	635a      	str	r2, [r3, #52]	@ 0x34
  
  }
 800154c:	e023      	b.n	8001596 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d104      	bne.n	800155e <set_servo_angle+0xaa>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	6393      	str	r3, [r2, #56]	@ 0x38
  }
 800155c:	e01b      	b.n	8001596 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b08      	cmp	r3, #8
 8001562:	d104      	bne.n	800156e <set_servo_angle+0xba>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  }
 800156c:	e013      	b.n	8001596 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d104      	bne.n	800157e <set_servo_angle+0xca>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 800157c:	e00b      	b.n	8001596 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b10      	cmp	r3, #16
 8001582:	d104      	bne.n	800158e <set_servo_angle+0xda>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
 800158c:	e003      	b.n	8001596 <set_servo_angle+0xe2>
    __HAL_TIM_SET_COMPARE(htim, channel, rounded_pulse_width);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	65d3      	str	r3, [r2, #92]	@ 0x5c
  }
 8001596:	bf00      	nop
 8001598:	3724      	adds	r7, #36	@ 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	43340000 	.word	0x43340000
 80015a8:	43340000 	.word	0x43340000
 80015ac:	43fa0000 	.word	0x43fa0000
 80015b0:	451c4000 	.word	0x451c4000
 80015b4:	00000000 	.word	0x00000000

080015b8 <copy_wind_pos>:
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); 
        }
      
    }
  }
  void copy_wind_pos(ServoController *ctrl, float wind_angle){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	ed87 0a00 	vstr	s0, [r7]
    float adj_angle=  fmod(wind_angle, 180.0f);  //all opposite angles are the same so 200 degrees = 20 degrees 
 80015c4:	edd7 7a00 	vldr	s15, [r7]
 80015c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015cc:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001628 <copy_wind_pos+0x70>
 80015d0:	eeb0 0b47 	vmov.f64	d0, d7
 80015d4:	f00b fb3c 	bl	800cc50 <fmod>
 80015d8:	eeb0 7b40 	vmov.f64	d7, d0
 80015dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015e0:	edc7 7a03 	vstr	s15, [r7, #12]
    
    // explicit case for 180 degrees
    if(wind_angle >= 180.0f && adj_angle == 0.0f) {
 80015e4:	edd7 7a00 	vldr	s15, [r7]
 80015e8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001630 <copy_wind_pos+0x78>
 80015ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	db08      	blt.n	8001608 <copy_wind_pos+0x50>
 80015f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	d101      	bne.n	8001608 <copy_wind_pos+0x50>
      adj_angle = 180.0f;
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <copy_wind_pos+0x7c>)
 8001606:	60fb      	str	r3, [r7, #12]
    }
    
    set_servo_angle(ctrl->htim, ctrl->channel, adj_angle);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	ed97 0a03 	vldr	s0, [r7, #12]
 8001614:	4619      	mov	r1, r3
 8001616:	4610      	mov	r0, r2
 8001618:	f7ff ff4c 	bl	80014b4 <set_servo_angle>
  

    //set_servo_angle();
  }
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	f3af 8000 	nop.w
 8001628:	00000000 	.word	0x00000000
 800162c:	40668000 	.word	0x40668000
 8001630:	43340000 	.word	0x43340000
 8001634:	43340000 	.word	0x43340000

08001638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_MspInit+0x30>)
 8001640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001644:	4a08      	ldr	r2, [pc, #32]	@ (8001668 <HAL_MspInit+0x30>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_MspInit+0x30>)
 8001650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	58024400 	.word	0x58024400

0800166c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0b8      	sub	sp, #224	@ 0xe0
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	22b8      	movs	r2, #184	@ 0xb8
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f009 fc87 	bl	800afa0 <memset>
  if(hi2c->Instance==I2C1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a27      	ldr	r2, [pc, #156]	@ (8001734 <HAL_I2C_MspInit+0xc8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d146      	bne.n	800172a <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800169c:	f04f 0208 	mov.w	r2, #8
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 fbc4 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80016be:	f7ff fe85 	bl	80013cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <HAL_I2C_MspInit+0xcc>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <HAL_I2C_MspInit+0xcc>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_I2C_MspInit+0xcc>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e8:	2312      	movs	r3, #18
 80016ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fa:	2304      	movs	r3, #4
 80016fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <HAL_I2C_MspInit+0xd0>)
 8001708:	f001 fd7c 	bl	8003204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_I2C_MspInit+0xcc>)
 800170e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <HAL_I2C_MspInit+0xcc>)
 8001714:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001718:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_I2C_MspInit+0xcc>)
 800171e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800172a:	bf00      	nop
 800172c:	37e0      	adds	r7, #224	@ 0xe0
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40005400 	.word	0x40005400
 8001738:	58024400 	.word	0x58024400
 800173c:	58020400 	.word	0x58020400

08001740 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <HAL_TIM_PWM_MspInit+0x3c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d10e      	bne.n	8001770 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_TIM_PWM_MspInit+0x40>)
 8001754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001758:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <HAL_TIM_PWM_MspInit+0x40>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <HAL_TIM_PWM_MspInit+0x40>)
 8001764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40010000 	.word	0x40010000
 8001780:	58024400 	.word	0x58024400

08001784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <HAL_TIM_MspPostInit+0x6c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d11f      	bne.n	80017e6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <HAL_TIM_MspPostInit+0x70>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <HAL_TIM_MspPostInit+0x70>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b6:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <HAL_TIM_MspPostInit+0x70>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80017c4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80017c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <HAL_TIM_MspPostInit+0x74>)
 80017e2:	f001 fd0f 	bl	8003204 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40010000 	.word	0x40010000
 80017f4:	58024400 	.word	0x58024400
 80017f8:	58021000 	.word	0x58021000

080017fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0bc      	sub	sp, #240	@ 0xf0
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 0320 	add.w	r3, r7, #32
 8001818:	22b8      	movs	r2, #184	@ 0xb8
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f009 fbbf 	bl	800afa0 <memset>
  if(huart->Instance==USART1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7f      	ldr	r2, [pc, #508]	@ (8001a24 <HAL_UART_MspInit+0x228>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d14f      	bne.n	80018cc <HAL_UART_MspInit+0xd0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800182c:	f04f 0201 	mov.w	r2, #1
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183e:	f107 0320 	add.w	r3, r7, #32
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fafc 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800184e:	f7ff fdbd 	bl	80013cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001852:	4b75      	ldr	r3, [pc, #468]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 8001854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001858:	4a73      	ldr	r2, [pc, #460]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001862:	4b71      	ldr	r3, [pc, #452]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 8001864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b6d      	ldr	r3, [pc, #436]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001876:	4a6c      	ldr	r2, [pc, #432]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001880:	4b69      	ldr	r3, [pc, #420]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800188e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001892:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a8:	2307      	movs	r3, #7
 80018aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018b2:	4619      	mov	r1, r3
 80018b4:	485d      	ldr	r0, [pc, #372]	@ (8001a2c <HAL_UART_MspInit+0x230>)
 80018b6:	f001 fca5 	bl	8003204 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2025      	movs	r0, #37	@ 0x25
 80018c0:	f000 fe8f 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018c4:	2025      	movs	r0, #37	@ 0x25
 80018c6:	f000 fea6 	bl	8002616 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80018ca:	e0a7      	b.n	8001a1c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a57      	ldr	r2, [pc, #348]	@ (8001a30 <HAL_UART_MspInit+0x234>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d14e      	bne.n	8001974 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018d6:	f04f 0202 	mov.w	r2, #2
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 faa7 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_UART_MspInit+0x100>
      Error_Handler();
 80018f8:	f7ff fd68 	bl	80013cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 80018fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001902:	4a49      	ldr	r2, [pc, #292]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 8001904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001908:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800190c:	4b46      	ldr	r3, [pc, #280]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 800190e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800191a:	4b43      	ldr	r3, [pc, #268]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001920:	4a41      	ldr	r2, [pc, #260]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800192a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001938:	2360      	movs	r3, #96	@ 0x60
 800193a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001950:	2307      	movs	r3, #7
 8001952:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001956:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800195a:	4619      	mov	r1, r3
 800195c:	4835      	ldr	r0, [pc, #212]	@ (8001a34 <HAL_UART_MspInit+0x238>)
 800195e:	f001 fc51 	bl	8003204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2026      	movs	r0, #38	@ 0x26
 8001968:	f000 fe3b 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800196c:	2026      	movs	r0, #38	@ 0x26
 800196e:	f000 fe52 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 8001972:	e053      	b.n	8001a1c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2f      	ldr	r2, [pc, #188]	@ (8001a38 <HAL_UART_MspInit+0x23c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d14e      	bne.n	8001a1c <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800197e:	f04f 0202 	mov.w	r2, #2
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fa53 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80019a0:	f7ff fd14 	bl	80013cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019a4:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 80019a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 80019b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c8:	4a17      	ldr	r2, [pc, #92]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_UART_MspInit+0x22c>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019fa:	2307      	movs	r3, #7
 80019fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a00:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a04:	4619      	mov	r1, r3
 8001a06:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <HAL_UART_MspInit+0x238>)
 8001a08:	f001 fbfc 	bl	8003204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2027      	movs	r0, #39	@ 0x27
 8001a12:	f000 fde6 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a16:	2027      	movs	r0, #39	@ 0x27
 8001a18:	f000 fdfd 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 8001a1c:	bf00      	nop
 8001a1e:	37f0      	adds	r7, #240	@ 0xf0
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40011000 	.word	0x40011000
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	58020000 	.word	0x58020000
 8001a30:	40004400 	.word	0x40004400
 8001a34:	58020c00 	.word	0x58020c00
 8001a38:	40004800 	.word	0x40004800

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <NMI_Handler+0x4>

08001a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <MemManage_Handler+0x4>

08001a54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a92:	f000 fcab 	bl	80023ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <USART1_IRQHandler+0x10>)
 8001aa2:	f006 f811 	bl	8007ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2400029c 	.word	0x2400029c

08001ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <USART2_IRQHandler+0x10>)
 8001ab6:	f006 f807 	bl	8007ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	24000330 	.word	0x24000330

08001ac4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <USART3_IRQHandler+0x10>)
 8001aca:	f005 fffd 	bl	8007ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	240003c4 	.word	0x240003c4

08001ad8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return 1;
 8001adc:	2301      	movs	r3, #1
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_kill>:

int _kill(int pid, int sig)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001af2:	f009 faa7 	bl	800b044 <__errno>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2216      	movs	r2, #22
 8001afa:	601a      	str	r2, [r3, #0]
  return -1;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_exit>:

void _exit (int status)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ffe7 	bl	8001ae8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b1a:	bf00      	nop
 8001b1c:	e7fd      	b.n	8001b1a <_exit+0x12>

08001b1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e00a      	b.n	8001b46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b30:	f3af 8000 	nop.w
 8001b34:	4601      	mov	r1, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	60ba      	str	r2, [r7, #8]
 8001b3c:	b2ca      	uxtb	r2, r1
 8001b3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dbf0      	blt.n	8001b30 <_read+0x12>
  }

  return len;
 8001b4e:	687b      	ldr	r3, [r7, #4]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e009      	b.n	8001b7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	60ba      	str	r2, [r7, #8]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fe20 	bl	80007b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	dbf1      	blt.n	8001b6a <_write+0x12>
  }
  return len;
 8001b86:	687b      	ldr	r3, [r7, #4]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_close>:

int _close(int file)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_isatty>:

int _isatty(int file)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bd0:	2301      	movs	r3, #1
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c00:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c28:	f009 fa0c 	bl	800b044 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	@ (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	24050000 	.word	0x24050000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	240005a4 	.word	0x240005a4
 8001c60:	24000930 	.word	0x24000930

08001c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c68:	4b3e      	ldr	r3, [pc, #248]	@ (8001d64 <SystemInit+0x100>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d64 <SystemInit+0x100>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c78:	4b3b      	ldr	r3, [pc, #236]	@ (8001d68 <SystemInit+0x104>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d807      	bhi.n	8001c94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c84:	4b38      	ldr	r3, [pc, #224]	@ (8001d68 <SystemInit+0x104>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 030f 	bic.w	r3, r3, #15
 8001c8c:	4a36      	ldr	r2, [pc, #216]	@ (8001d68 <SystemInit+0x104>)
 8001c8e:	f043 0307 	orr.w	r3, r3, #7
 8001c92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c94:	4b35      	ldr	r3, [pc, #212]	@ (8001d6c <SystemInit+0x108>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a34      	ldr	r2, [pc, #208]	@ (8001d6c <SystemInit+0x108>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ca0:	4b32      	ldr	r3, [pc, #200]	@ (8001d6c <SystemInit+0x108>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ca6:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <SystemInit+0x108>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4930      	ldr	r1, [pc, #192]	@ (8001d6c <SystemInit+0x108>)
 8001cac:	4b30      	ldr	r3, [pc, #192]	@ (8001d70 <SystemInit+0x10c>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <SystemInit+0x104>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <SystemInit+0x104>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 030f 	bic.w	r3, r3, #15
 8001cc6:	4a28      	ldr	r2, [pc, #160]	@ (8001d68 <SystemInit+0x104>)
 8001cc8:	f043 0307 	orr.w	r3, r3, #7
 8001ccc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cce:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <SystemInit+0x108>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <SystemInit+0x108>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001cda:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <SystemInit+0x108>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <SystemInit+0x108>)
 8001ce2:	4a24      	ldr	r2, [pc, #144]	@ (8001d74 <SystemInit+0x110>)
 8001ce4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <SystemInit+0x108>)
 8001ce8:	4a23      	ldr	r2, [pc, #140]	@ (8001d78 <SystemInit+0x114>)
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <SystemInit+0x108>)
 8001cee:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <SystemInit+0x118>)
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <SystemInit+0x108>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <SystemInit+0x108>)
 8001cfa:	4a20      	ldr	r2, [pc, #128]	@ (8001d7c <SystemInit+0x118>)
 8001cfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <SystemInit+0x108>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <SystemInit+0x108>)
 8001d06:	4a1d      	ldr	r2, [pc, #116]	@ (8001d7c <SystemInit+0x118>)
 8001d08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <SystemInit+0x108>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <SystemInit+0x108>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a15      	ldr	r2, [pc, #84]	@ (8001d6c <SystemInit+0x108>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <SystemInit+0x108>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <SystemInit+0x108>)
 8001d24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d113      	bne.n	8001d58 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d30:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <SystemInit+0x108>)
 8001d32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d36:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <SystemInit+0x108>)
 8001d38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d3c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <SystemInit+0x11c>)
 8001d42:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d46:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <SystemInit+0x108>)
 8001d4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d4e:	4a07      	ldr	r2, [pc, #28]	@ (8001d6c <SystemInit+0x108>)
 8001d50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d54:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	52002000 	.word	0x52002000
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d74:	02020200 	.word	0x02020200
 8001d78:	01ff0000 	.word	0x01ff0000
 8001d7c:	01010280 	.word	0x01010280
 8001d80:	52004000 	.word	0x52004000

08001d84 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <ExitRun0Mode+0x2c>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a08      	ldr	r2, [pc, #32]	@ (8001db0 <ExitRun0Mode+0x2c>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001d94:	bf00      	nop
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <ExitRun0Mode+0x2c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f9      	beq.n	8001d96 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	58024800 	.word	0x58024800

08001db4 <__CRC16>:
    0x40
};


static uint16_t __CRC16(uint8_t *puchMsg, uint16_t usDataLen)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
    uint8_t uchCRCHi = 0xFF;
 8001dc0:	23ff      	movs	r3, #255	@ 0xff
 8001dc2:	75fb      	strb	r3, [r7, #23]
    uint8_t uchCRCLo = 0xFF;
 8001dc4:	23ff      	movs	r3, #255	@ 0xff
 8001dc6:	75bb      	strb	r3, [r7, #22]
    uint8_t uIndex;
    int i = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
    uchCRCHi = 0xFF;
 8001dcc:	23ff      	movs	r3, #255	@ 0xff
 8001dce:	75fb      	strb	r3, [r7, #23]
    uchCRCLo = 0xFF;
 8001dd0:	23ff      	movs	r3, #255	@ 0xff
 8001dd2:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 8001dd4:	e013      	b.n	8001dfe <__CRC16+0x4a>
    {
        uIndex = uchCRCHi ^ puchMsg[i];
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	4053      	eors	r3, r2
 8001de2:	73fb      	strb	r3, [r7, #15]
        uchCRCHi = uchCRCLo ^ __auchCRCHi[uIndex];
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e24 <__CRC16+0x70>)
 8001de8:	5cd2      	ldrb	r2, [r2, r3]
 8001dea:	7dbb      	ldrb	r3, [r7, #22]
 8001dec:	4053      	eors	r3, r2
 8001dee:	75fb      	strb	r3, [r7, #23]
        uchCRCLo = __auchCRCLo[uIndex] ;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	4a0d      	ldr	r2, [pc, #52]	@ (8001e28 <__CRC16+0x74>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dbe7      	blt.n	8001dd6 <__CRC16+0x22>
    }
    return (uint16_t)(((uint16_t)uchCRCHi << 8) | (uint16_t)uchCRCLo) ;
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	7dbb      	ldrb	r3, [r7, #22]
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	b29b      	uxth	r3, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	0800d0d0 	.word	0x0800d0d0
 8001e28:	0800d1d0 	.word	0x0800d1d0

08001e2c <__CaliSum>:
static uint8_t __CaliSum(uint8_t *data, uint32_t len)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint8_t ucCheck = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	72fb      	strb	r3, [r7, #11]
    for(i=0; i<len; i++) ucCheck += *(data + i);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e009      	b.n	8001e54 <__CaliSum+0x28>
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	7afb      	ldrb	r3, [r7, #11]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	72fb      	strb	r3, [r7, #11]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3f1      	bcc.n	8001e40 <__CaliSum+0x14>
    return ucCheck;
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <WitSerialWriteRegister>:
int32_t WitSerialWriteRegister(SerialWrite Write_func)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    if(!Write_func)return WIT_HAL_INVAL;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <WitSerialWriteRegister+0x14>
 8001e7a:	f06f 0305 	mvn.w	r3, #5
 8001e7e:	e003      	b.n	8001e88 <WitSerialWriteRegister+0x1c>
    p_WitSerialWriteFunc = Write_func;
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <WitSerialWriteRegister+0x28>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	240005a8 	.word	0x240005a8

08001e98 <CopeWitData>:
static void CopeWitData(uint8_t ucIndex, uint16_t *p_data, uint32_t uiLen)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	73fb      	strb	r3, [r7, #15]
    uint32_t uiReg1 = 0, uiReg2 = 0, uiReg1Len = 0, uiReg2Len = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
    uint16_t *p_usReg1Val = p_data;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	617b      	str	r3, [r7, #20]
    uint16_t *p_usReg2Val = p_data+3;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3306      	adds	r3, #6
 8001ebe:	613b      	str	r3, [r7, #16]
    
    uiReg1Len = 4;
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	61fb      	str	r3, [r7, #28]
    switch(ucIndex)
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	3b50      	subs	r3, #80	@ 0x50
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	f200 8080 	bhi.w	8001fce <CopeWitData+0x136>
 8001ece:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed4 <CopeWitData+0x3c>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001f39 	.word	0x08001f39
 8001ed8:	08001f15 	.word	0x08001f15
 8001edc:	08001f3f 	.word	0x08001f3f
 8001ee0:	08001f27 	.word	0x08001f27
 8001ee4:	08001f45 	.word	0x08001f45
 8001ee8:	08001f4b 	.word	0x08001f4b
 8001eec:	08001f51 	.word	0x08001f51
 8001ef0:	08001f57 	.word	0x08001f57
 8001ef4:	08001f5d 	.word	0x08001f5d
 8001ef8:	08001f63 	.word	0x08001f63
 8001efc:	08001f69 	.word	0x08001f69
 8001f00:	08001fcf 	.word	0x08001fcf
 8001f04:	08001fcf 	.word	0x08001fcf
 8001f08:	08001fcf 	.word	0x08001fcf
 8001f0c:	08001fcf 	.word	0x08001fcf
 8001f10:	08001f6f 	.word	0x08001f6f
    {
        case WIT_ACC:   uiReg1 = AX;    uiReg1Len = 3;  uiReg2 = TEMP;  uiReg2Len = 1;  break;
 8001f14:	2334      	movs	r3, #52	@ 0x34
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f18:	2303      	movs	r3, #3
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	2340      	movs	r3, #64	@ 0x40
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	2301      	movs	r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	e027      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_ANGLE: uiReg1 = Roll;  uiReg1Len = 3;  uiReg2 = VERSION;  uiReg2Len = 1;  break;
 8001f26:	233d      	movs	r3, #61	@ 0x3d
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	232e      	movs	r3, #46	@ 0x2e
 8001f30:	623b      	str	r3, [r7, #32]
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	e01e      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_TIME:  uiReg1 = YYMM;	break;
 8001f38:	2330      	movs	r3, #48	@ 0x30
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	e01b      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_GYRO:  uiReg1 = GX;  break;
 8001f3e:	2337      	movs	r3, #55	@ 0x37
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f42:	e018      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_MAGNETIC: uiReg1 = HX;  break;
 8001f44:	233a      	movs	r3, #58	@ 0x3a
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f48:	e015      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_DPORT: uiReg1 = D0Status;  break;
 8001f4a:	2341      	movs	r3, #65	@ 0x41
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4e:	e012      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_PRESS: uiReg1 = PressureL;  break;
 8001f50:	2345      	movs	r3, #69	@ 0x45
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f54:	e00f      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_GPS:   uiReg1 = LonL;  break;
 8001f56:	2349      	movs	r3, #73	@ 0x49
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f5a:	e00c      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_VELOCITY: uiReg1 = GPSHeight;  break;
 8001f5c:	234d      	movs	r3, #77	@ 0x4d
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f60:	e009      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_QUATER:    uiReg1 = q0;  break;
 8001f62:	2351      	movs	r3, #81	@ 0x51
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f66:	e006      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_GSA:   uiReg1 = SVNUM;  break;
 8001f68:	2355      	movs	r3, #85	@ 0x55
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6c:	e003      	b.n	8001f76 <CopeWitData+0xde>
        case WIT_REGVALUE:  uiReg1 = s_uiReadRegIndex;  break;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <CopeWitData+0x140>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f74:	bf00      	nop
		default:
			return ;

    }
    if(uiLen == 3)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d103      	bne.n	8001f84 <CopeWitData+0xec>
    {
        uiReg1Len = 3;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	61fb      	str	r3, [r7, #28]
        uiReg2Len = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
    }
    if(uiReg1Len)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00e      	beq.n	8001fa8 <CopeWitData+0x110>
	{
		memcpy(&sReg[uiReg1], p_usReg1Val, uiReg1Len<<1);
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4a13      	ldr	r2, [pc, #76]	@ (8001fdc <CopeWitData+0x144>)
 8001f90:	1898      	adds	r0, r3, r2
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	461a      	mov	r2, r3
 8001f98:	6979      	ldr	r1, [r7, #20]
 8001f9a:	f009 f880 	bl	800b09e <memcpy>
		p_WitRegUpdateCbFunc(uiReg1, uiReg1Len);
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <CopeWitData+0x148>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69f9      	ldr	r1, [r7, #28]
 8001fa4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fa6:	4798      	blx	r3
	}
    if(uiReg2Len)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d010      	beq.n	8001fd0 <CopeWitData+0x138>
	{
		memcpy(&sReg[uiReg2], p_usReg2Val, uiReg2Len<<1);
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <CopeWitData+0x144>)
 8001fb4:	1898      	adds	r0, r3, r2
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6939      	ldr	r1, [r7, #16]
 8001fbe:	f009 f86e 	bl	800b09e <memcpy>
		p_WitRegUpdateCbFunc(uiReg2, uiReg2Len);
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <CopeWitData+0x148>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69b9      	ldr	r1, [r7, #24]
 8001fc8:	6a38      	ldr	r0, [r7, #32]
 8001fca:	4798      	blx	r3
 8001fcc:	e000      	b.n	8001fd0 <CopeWitData+0x138>
			return ;
 8001fce:	bf00      	nop
	}
}
 8001fd0:	3728      	adds	r7, #40	@ 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	240006b8 	.word	0x240006b8
 8001fdc:	240006bc 	.word	0x240006bc
 8001fe0:	240005ac 	.word	0x240005ac

08001fe4 <WitSerialDataIn>:

void WitSerialDataIn(uint8_t ucData)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
    uint16_t usCRC16, usTemp, i, usData[4];
    uint8_t ucSum;

    if(p_WitRegUpdateCbFunc == NULL)return ;
 8001fee:	4b8d      	ldr	r3, [pc, #564]	@ (8002224 <WitSerialDataIn+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 810f 	beq.w	8002216 <WitSerialDataIn+0x232>
    s_ucWitDataBuff[s_uiWitDataCnt++] = ucData;
 8001ff8:	4b8b      	ldr	r3, [pc, #556]	@ (8002228 <WitSerialDataIn+0x244>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	498a      	ldr	r1, [pc, #552]	@ (8002228 <WitSerialDataIn+0x244>)
 8002000:	600a      	str	r2, [r1, #0]
 8002002:	498a      	ldr	r1, [pc, #552]	@ (800222c <WitSerialDataIn+0x248>)
 8002004:	79fa      	ldrb	r2, [r7, #7]
 8002006:	54ca      	strb	r2, [r1, r3]
    switch(s_uiProtoclo)
 8002008:	4b89      	ldr	r3, [pc, #548]	@ (8002230 <WitSerialDataIn+0x24c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b03      	cmp	r3, #3
 800200e:	f200 80f9 	bhi.w	8002204 <WitSerialDataIn+0x220>
 8002012:	2b02      	cmp	r3, #2
 8002014:	f080 80ef 	bcs.w	80021f6 <WitSerialDataIn+0x212>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <WitSerialDataIn+0x3e>
 800201c:	2b01      	cmp	r3, #1
 800201e:	d06f      	beq.n	8002100 <WitSerialDataIn+0x11c>
 8002020:	e0f0      	b.n	8002204 <WitSerialDataIn+0x220>
    {
        case WIT_PROTOCOL_NORMAL:
            if(s_ucWitDataBuff[0] != 0x55)
 8002022:	4b82      	ldr	r3, [pc, #520]	@ (800222c <WitSerialDataIn+0x248>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b55      	cmp	r3, #85	@ 0x55
 8002028:	d00c      	beq.n	8002044 <WitSerialDataIn+0x60>
            {
                s_uiWitDataCnt--;
 800202a:	4b7f      	ldr	r3, [pc, #508]	@ (8002228 <WitSerialDataIn+0x244>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3b01      	subs	r3, #1
 8002030:	4a7d      	ldr	r2, [pc, #500]	@ (8002228 <WitSerialDataIn+0x244>)
 8002032:	6013      	str	r3, [r2, #0]
                memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002034:	4b7c      	ldr	r3, [pc, #496]	@ (8002228 <WitSerialDataIn+0x244>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	497e      	ldr	r1, [pc, #504]	@ (8002234 <WitSerialDataIn+0x250>)
 800203c:	487b      	ldr	r0, [pc, #492]	@ (800222c <WitSerialDataIn+0x248>)
 800203e:	f009 f82e 	bl	800b09e <memcpy>
                return ;
 8002042:	e0eb      	b.n	800221c <WitSerialDataIn+0x238>
            }
            if(s_uiWitDataCnt >= 11)
 8002044:	4b78      	ldr	r3, [pc, #480]	@ (8002228 <WitSerialDataIn+0x244>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b0a      	cmp	r3, #10
 800204a:	f240 80d8 	bls.w	80021fe <WitSerialDataIn+0x21a>
            {
                ucSum = __CaliSum(s_ucWitDataBuff, 10);
 800204e:	210a      	movs	r1, #10
 8002050:	4876      	ldr	r0, [pc, #472]	@ (800222c <WitSerialDataIn+0x248>)
 8002052:	f7ff feeb 	bl	8001e2c <__CaliSum>
 8002056:	4603      	mov	r3, r0
 8002058:	747b      	strb	r3, [r7, #17]
                if(ucSum != s_ucWitDataBuff[10])
 800205a:	4b74      	ldr	r3, [pc, #464]	@ (800222c <WitSerialDataIn+0x248>)
 800205c:	7a9b      	ldrb	r3, [r3, #10]
 800205e:	7c7a      	ldrb	r2, [r7, #17]
 8002060:	429a      	cmp	r2, r3
 8002062:	d00c      	beq.n	800207e <WitSerialDataIn+0x9a>
                {
                    s_uiWitDataCnt--;
 8002064:	4b70      	ldr	r3, [pc, #448]	@ (8002228 <WitSerialDataIn+0x244>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	4a6f      	ldr	r2, [pc, #444]	@ (8002228 <WitSerialDataIn+0x244>)
 800206c:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 800206e:	4b6e      	ldr	r3, [pc, #440]	@ (8002228 <WitSerialDataIn+0x244>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	496f      	ldr	r1, [pc, #444]	@ (8002234 <WitSerialDataIn+0x250>)
 8002076:	486d      	ldr	r0, [pc, #436]	@ (800222c <WitSerialDataIn+0x248>)
 8002078:	f009 f811 	bl	800b09e <memcpy>
                    return ;
 800207c:	e0ce      	b.n	800221c <WitSerialDataIn+0x238>
                }
                usData[0] = ((uint16_t)s_ucWitDataBuff[3] << 8) | s_ucWitDataBuff[2];
 800207e:	4b6b      	ldr	r3, [pc, #428]	@ (800222c <WitSerialDataIn+0x248>)
 8002080:	78db      	ldrb	r3, [r3, #3]
 8002082:	b21b      	sxth	r3, r3
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	b21a      	sxth	r2, r3
 8002088:	4b68      	ldr	r3, [pc, #416]	@ (800222c <WitSerialDataIn+0x248>)
 800208a:	789b      	ldrb	r3, [r3, #2]
 800208c:	b21b      	sxth	r3, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	b21b      	sxth	r3, r3
 8002092:	b29b      	uxth	r3, r3
 8002094:	813b      	strh	r3, [r7, #8]
                usData[1] = ((uint16_t)s_ucWitDataBuff[5] << 8) | s_ucWitDataBuff[4];
 8002096:	4b65      	ldr	r3, [pc, #404]	@ (800222c <WitSerialDataIn+0x248>)
 8002098:	795b      	ldrb	r3, [r3, #5]
 800209a:	b21b      	sxth	r3, r3
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b62      	ldr	r3, [pc, #392]	@ (800222c <WitSerialDataIn+0x248>)
 80020a2:	791b      	ldrb	r3, [r3, #4]
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	817b      	strh	r3, [r7, #10]
                usData[2] = ((uint16_t)s_ucWitDataBuff[7] << 8) | s_ucWitDataBuff[6];
 80020ae:	4b5f      	ldr	r3, [pc, #380]	@ (800222c <WitSerialDataIn+0x248>)
 80020b0:	79db      	ldrb	r3, [r3, #7]
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	4b5c      	ldr	r3, [pc, #368]	@ (800222c <WitSerialDataIn+0x248>)
 80020ba:	799b      	ldrb	r3, [r3, #6]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	81bb      	strh	r3, [r7, #12]
                usData[3] = ((uint16_t)s_ucWitDataBuff[9] << 8) | s_ucWitDataBuff[8];
 80020c6:	4b59      	ldr	r3, [pc, #356]	@ (800222c <WitSerialDataIn+0x248>)
 80020c8:	7a5b      	ldrb	r3, [r3, #9]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	4b56      	ldr	r3, [pc, #344]	@ (800222c <WitSerialDataIn+0x248>)
 80020d2:	7a1b      	ldrb	r3, [r3, #8]
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b21b      	sxth	r3, r3
 80020da:	b29b      	uxth	r3, r3
 80020dc:	81fb      	strh	r3, [r7, #14]
                CopeWitData(s_ucWitDataBuff[1], usData, 4);
 80020de:	4b53      	ldr	r3, [pc, #332]	@ (800222c <WitSerialDataIn+0x248>)
 80020e0:	785b      	ldrb	r3, [r3, #1]
 80020e2:	f107 0108 	add.w	r1, r7, #8
 80020e6:	2204      	movs	r2, #4
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fed5 	bl	8001e98 <CopeWitData>
                printf(usData);
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	4618      	mov	r0, r3
 80020f4:	f008 fe04 	bl	800ad00 <iprintf>
                s_uiWitDataCnt = 0;
 80020f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002228 <WitSerialDataIn+0x244>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
            }
        break;
 80020fe:	e07e      	b.n	80021fe <WitSerialDataIn+0x21a>
        case WIT_PROTOCOL_MODBUS:
            if(s_uiWitDataCnt > 2)
 8002100:	4b49      	ldr	r3, [pc, #292]	@ (8002228 <WitSerialDataIn+0x244>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d97c      	bls.n	8002202 <WitSerialDataIn+0x21e>
            {
                if(s_ucWitDataBuff[1] != FuncR)
 8002108:	4b48      	ldr	r3, [pc, #288]	@ (800222c <WitSerialDataIn+0x248>)
 800210a:	785b      	ldrb	r3, [r3, #1]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d00c      	beq.n	800212a <WitSerialDataIn+0x146>
                {
                    s_uiWitDataCnt--;
 8002110:	4b45      	ldr	r3, [pc, #276]	@ (8002228 <WitSerialDataIn+0x244>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3b01      	subs	r3, #1
 8002116:	4a44      	ldr	r2, [pc, #272]	@ (8002228 <WitSerialDataIn+0x244>)
 8002118:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 800211a:	4b43      	ldr	r3, [pc, #268]	@ (8002228 <WitSerialDataIn+0x244>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4944      	ldr	r1, [pc, #272]	@ (8002234 <WitSerialDataIn+0x250>)
 8002122:	4842      	ldr	r0, [pc, #264]	@ (800222c <WitSerialDataIn+0x248>)
 8002124:	f008 ffbb 	bl	800b09e <memcpy>
                    return ;
 8002128:	e078      	b.n	800221c <WitSerialDataIn+0x238>
                }
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 800212a:	4b40      	ldr	r3, [pc, #256]	@ (800222c <WitSerialDataIn+0x248>)
 800212c:	789b      	ldrb	r3, [r3, #2]
 800212e:	3305      	adds	r3, #5
 8002130:	461a      	mov	r2, r3
 8002132:	4b3d      	ldr	r3, [pc, #244]	@ (8002228 <WitSerialDataIn+0x244>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d86f      	bhi.n	800221a <WitSerialDataIn+0x236>
                usTemp = ((uint16_t)s_ucWitDataBuff[s_uiWitDataCnt-2] << 8) | s_ucWitDataBuff[s_uiWitDataCnt-1];
 800213a:	4b3b      	ldr	r3, [pc, #236]	@ (8002228 <WitSerialDataIn+0x244>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3b02      	subs	r3, #2
 8002140:	4a3a      	ldr	r2, [pc, #232]	@ (800222c <WitSerialDataIn+0x248>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	b21b      	sxth	r3, r3
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	b21a      	sxth	r2, r3
 800214a:	4b37      	ldr	r3, [pc, #220]	@ (8002228 <WitSerialDataIn+0x244>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3b01      	subs	r3, #1
 8002150:	4936      	ldr	r1, [pc, #216]	@ (800222c <WitSerialDataIn+0x248>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	b21b      	sxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b21b      	sxth	r3, r3
 800215a:	82bb      	strh	r3, [r7, #20]
                usCRC16 = __CRC16(s_ucWitDataBuff, s_uiWitDataCnt-2);
 800215c:	4b32      	ldr	r3, [pc, #200]	@ (8002228 <WitSerialDataIn+0x244>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b02      	subs	r3, #2
 8002164:	b29b      	uxth	r3, r3
 8002166:	4619      	mov	r1, r3
 8002168:	4830      	ldr	r0, [pc, #192]	@ (800222c <WitSerialDataIn+0x248>)
 800216a:	f7ff fe23 	bl	8001db4 <__CRC16>
 800216e:	4603      	mov	r3, r0
 8002170:	827b      	strh	r3, [r7, #18]
                if(usTemp != usCRC16)
 8002172:	8aba      	ldrh	r2, [r7, #20]
 8002174:	8a7b      	ldrh	r3, [r7, #18]
 8002176:	429a      	cmp	r2, r3
 8002178:	d00c      	beq.n	8002194 <WitSerialDataIn+0x1b0>
                {
                    s_uiWitDataCnt--;
 800217a:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <WitSerialDataIn+0x244>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3b01      	subs	r3, #1
 8002180:	4a29      	ldr	r2, [pc, #164]	@ (8002228 <WitSerialDataIn+0x244>)
 8002182:	6013      	str	r3, [r2, #0]
                    memcpy(s_ucWitDataBuff, &s_ucWitDataBuff[1], s_uiWitDataCnt);
 8002184:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <WitSerialDataIn+0x244>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	492a      	ldr	r1, [pc, #168]	@ (8002234 <WitSerialDataIn+0x250>)
 800218c:	4827      	ldr	r0, [pc, #156]	@ (800222c <WitSerialDataIn+0x248>)
 800218e:	f008 ff86 	bl	800b09e <memcpy>
                    return ;
 8002192:	e043      	b.n	800221c <WitSerialDataIn+0x238>
                }
                usTemp = s_ucWitDataBuff[2] >> 1;
 8002194:	4b25      	ldr	r3, [pc, #148]	@ (800222c <WitSerialDataIn+0x248>)
 8002196:	789b      	ldrb	r3, [r3, #2]
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	82bb      	strh	r3, [r7, #20]
                for(i = 0; i < usTemp; i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	82fb      	strh	r3, [r7, #22]
 80021a2:	e019      	b.n	80021d8 <WitSerialDataIn+0x1f4>
                {
                    sReg[i+s_uiReadRegIndex] = ((uint16_t)s_ucWitDataBuff[(i<<1)+3] << 8) | s_ucWitDataBuff[(i<<1)+4];
 80021a4:	8afb      	ldrh	r3, [r7, #22]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	3303      	adds	r3, #3
 80021aa:	4a20      	ldr	r2, [pc, #128]	@ (800222c <WitSerialDataIn+0x248>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	b219      	sxth	r1, r3
 80021b4:	8afb      	ldrh	r3, [r7, #22]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	3304      	adds	r3, #4
 80021ba:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <WitSerialDataIn+0x248>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	b21a      	sxth	r2, r3
 80021c0:	8af8      	ldrh	r0, [r7, #22]
 80021c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <WitSerialDataIn+0x254>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4403      	add	r3, r0
 80021c8:	430a      	orrs	r2, r1
 80021ca:	b211      	sxth	r1, r2
 80021cc:	4a1b      	ldr	r2, [pc, #108]	@ (800223c <WitSerialDataIn+0x258>)
 80021ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < usTemp; i++)
 80021d2:	8afb      	ldrh	r3, [r7, #22]
 80021d4:	3301      	adds	r3, #1
 80021d6:	82fb      	strh	r3, [r7, #22]
 80021d8:	8afa      	ldrh	r2, [r7, #22]
 80021da:	8abb      	ldrh	r3, [r7, #20]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3e1      	bcc.n	80021a4 <WitSerialDataIn+0x1c0>
                }
                p_WitRegUpdateCbFunc(s_uiReadRegIndex, usTemp);
 80021e0:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <WitSerialDataIn+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a14      	ldr	r2, [pc, #80]	@ (8002238 <WitSerialDataIn+0x254>)
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	8ab9      	ldrh	r1, [r7, #20]
 80021ea:	4610      	mov	r0, r2
 80021ec:	4798      	blx	r3
                s_uiWitDataCnt = 0;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <WitSerialDataIn+0x244>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
            }
        break;
 80021f4:	e005      	b.n	8002202 <WitSerialDataIn+0x21e>
        case WIT_PROTOCOL_CAN:
        case WIT_PROTOCOL_I2C:
        s_uiWitDataCnt = 0;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <WitSerialDataIn+0x244>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
        break;
 80021fc:	e002      	b.n	8002204 <WitSerialDataIn+0x220>
        break;
 80021fe:	bf00      	nop
 8002200:	e000      	b.n	8002204 <WitSerialDataIn+0x220>
        break;
 8002202:	bf00      	nop
    }
    if(s_uiWitDataCnt == WIT_DATA_BUFF_SIZE)s_uiWitDataCnt = 0;
 8002204:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <WitSerialDataIn+0x244>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800220c:	d106      	bne.n	800221c <WitSerialDataIn+0x238>
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <WitSerialDataIn+0x244>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e002      	b.n	800221c <WitSerialDataIn+0x238>
    if(p_WitRegUpdateCbFunc == NULL)return ;
 8002216:	bf00      	nop
 8002218:	e000      	b.n	800221c <WitSerialDataIn+0x238>
                if(s_uiWitDataCnt < (s_ucWitDataBuff[2] + 5))return ;
 800221a:	bf00      	nop
}
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	240005ac 	.word	0x240005ac
 8002228:	240006b0 	.word	0x240006b0
 800222c:	240005b0 	.word	0x240005b0
 8002230:	240006b4 	.word	0x240006b4
 8002234:	240005b1 	.word	0x240005b1
 8002238:	240006b8 	.word	0x240006b8
 800223c:	240006bc 	.word	0x240006bc

08002240 <WitRegisterCallBack>:
        case WIT_PROTOCOL_I2C:
            break;
    }
}
int32_t WitRegisterCallBack(RegUpdateCb update_func)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    if(!update_func)return WIT_HAL_INVAL;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <WitRegisterCallBack+0x14>
 800224e:	f06f 0305 	mvn.w	r3, #5
 8002252:	e003      	b.n	800225c <WitRegisterCallBack+0x1c>
    p_WitRegUpdateCbFunc = update_func;
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <WitRegisterCallBack+0x28>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
    return WIT_HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	240005ac 	.word	0x240005ac

0800226c <WitInit>:
    s_uiReadRegIndex = uiReg;

    return WIT_HAL_OK;
}
int32_t WitInit(uint32_t uiProtocol, uint8_t ucAddr)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
	if(uiProtocol > WIT_PROTOCOL_I2C)return WIT_HAL_INVAL;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d902      	bls.n	8002284 <WitInit+0x18>
 800227e:	f06f 0305 	mvn.w	r3, #5
 8002282:	e009      	b.n	8002298 <WitInit+0x2c>
    s_uiProtoclo = uiProtocol;
 8002284:	4a07      	ldr	r2, [pc, #28]	@ (80022a4 <WitInit+0x38>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
    s_ucAddr = ucAddr;
 800228a:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <WitInit+0x3c>)
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	7013      	strb	r3, [r2, #0]
    s_uiWitDataCnt = 0;
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <WitInit+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    return WIT_HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	240006b4 	.word	0x240006b4
 80022a8:	2400000c 	.word	0x2400000c
 80022ac:	240006b0 	.word	0x240006b0

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022b0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80022ec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80022b4:	f7ff fd66 	bl	8001d84 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022b8:	f7ff fcd4 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022bc:	480c      	ldr	r0, [pc, #48]	@ (80022f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022be:	490d      	ldr	r1, [pc, #52]	@ (80022f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022c0:	4a0d      	ldr	r2, [pc, #52]	@ (80022f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c4:	e002      	b.n	80022cc <LoopCopyDataInit>

080022c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ca:	3304      	adds	r3, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d0:	d3f9      	bcc.n	80022c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d2:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d8:	e001      	b.n	80022de <LoopFillZerobss>

080022da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022dc:	3204      	adds	r2, #4

080022de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e0:	d3fb      	bcc.n	80022da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022e2:	f008 feb5 	bl	800b050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e6:	f7fe fb75 	bl	80009d4 <main>
  bx  lr
 80022ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022ec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80022f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022f4:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80022f8:	0800d690 	.word	0x0800d690
  ldr r2, =_sbss
 80022fc:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002300:	2400092c 	.word	0x2400092c

08002304 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002304:	e7fe      	b.n	8002304 <ADC3_IRQHandler>
	...

08002308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230e:	2003      	movs	r0, #3
 8002310:	f000 f95c 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002314:	f002 fbbe 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <HAL_Init+0x68>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	4913      	ldr	r1, [pc, #76]	@ (8002374 <HAL_Init+0x6c>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002332:	4b0f      	ldr	r3, [pc, #60]	@ (8002370 <HAL_Init+0x68>)
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	4a0e      	ldr	r2, [pc, #56]	@ (8002374 <HAL_Init+0x6c>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	4a0b      	ldr	r2, [pc, #44]	@ (8002378 <HAL_Init+0x70>)
 800234a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800234c:	4a0b      	ldr	r2, [pc, #44]	@ (800237c <HAL_Init+0x74>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002352:	200f      	movs	r0, #15
 8002354:	f000 f814 	bl	8002380 <HAL_InitTick>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e002      	b.n	8002368 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002362:	f7ff f969 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	58024400 	.word	0x58024400
 8002374:	0800d0c0 	.word	0x0800d0c0
 8002378:	24000008 	.word	0x24000008
 800237c:	24000004 	.word	0x24000004

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002388:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <HAL_InitTick+0x60>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e021      	b.n	80023d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <HAL_InitTick+0x64>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_InitTick+0x60>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f941 	bl	8002632 <HAL_SYSTICK_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00e      	b.n	80023d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b0f      	cmp	r3, #15
 80023be:	d80a      	bhi.n	80023d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c0:	2200      	movs	r2, #0
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f000 f90b 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023cc:	4a06      	ldr	r2, [pc, #24]	@ (80023e8 <HAL_InitTick+0x68>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	24000014 	.word	0x24000014
 80023e4:	24000004 	.word	0x24000004
 80023e8:	24000010 	.word	0x24000010

080023ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_IncTick+0x20>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_IncTick+0x24>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <HAL_IncTick+0x24>)
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	24000014 	.word	0x24000014
 8002410:	240007dc 	.word	0x240007dc

08002414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return uwTick;
 8002418:	4b03      	ldr	r3, [pc, #12]	@ (8002428 <HAL_GetTick+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	240007dc 	.word	0x240007dc

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <__NVIC_SetPriorityGrouping+0x40>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002456:	4313      	orrs	r3, r2
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	@ (800246c <__NVIC_SetPriorityGrouping+0x40>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00
 8002470:	05fa0000 	.word	0x05fa0000

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	@ (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	@ (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	@ (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	@ 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	@ 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff29 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff40 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff90 	bl	8002520 <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5f 	bl	80024cc <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff33 	bl	8002490 <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa4 	bl	8002588 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002650:	f3bf 8f5f 	dmb	sy
}
 8002654:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002656:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <HAL_MPU_Disable+0x28>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	4a06      	ldr	r2, [pc, #24]	@ (8002674 <HAL_MPU_Disable+0x28>)
 800265c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002660:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_MPU_Disable+0x2c>)
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00
 8002678:	e000ed90 	.word	0xe000ed90

0800267c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002684:	4a0b      	ldr	r2, [pc, #44]	@ (80026b4 <HAL_MPU_Enable+0x38>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <HAL_MPU_Enable+0x3c>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	4a09      	ldr	r2, [pc, #36]	@ (80026b8 <HAL_MPU_Enable+0x3c>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002698:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800269a:	f3bf 8f4f 	dsb	sy
}
 800269e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026a0:	f3bf 8f6f 	isb	sy
}
 80026a4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed90 	.word	0xe000ed90
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	785a      	ldrb	r2, [r3, #1]
 80026c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_MPU_ConfigRegion+0x7c>)
 80026ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <HAL_MPU_ConfigRegion+0x7c>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4a19      	ldr	r2, [pc, #100]	@ (8002738 <HAL_MPU_ConfigRegion+0x7c>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80026d8:	4a17      	ldr	r2, [pc, #92]	@ (8002738 <HAL_MPU_ConfigRegion+0x7c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7b1b      	ldrb	r3, [r3, #12]
 80026e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7adb      	ldrb	r3, [r3, #11]
 80026ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7a9b      	ldrb	r3, [r3, #10]
 80026f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7b5b      	ldrb	r3, [r3, #13]
 80026fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	7b9b      	ldrb	r3, [r3, #14]
 8002702:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002704:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7bdb      	ldrb	r3, [r3, #15]
 800270a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800270c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7a5b      	ldrb	r3, [r3, #9]
 8002712:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002714:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7a1b      	ldrb	r3, [r3, #8]
 800271a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800271c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	7812      	ldrb	r2, [r2, #0]
 8002722:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002724:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002726:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002728:	6113      	str	r3, [r2, #16]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed90 	.word	0xe000ed90

0800273c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff fe66 	bl	8002414 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e2dc      	b.n	8002d0e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2280      	movs	r2, #128	@ 0x80
 8002764:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e2cd      	b.n	8002d0e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a76      	ldr	r2, [pc, #472]	@ (8002950 <HAL_DMA_Abort+0x214>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d04a      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a74      	ldr	r2, [pc, #464]	@ (8002954 <HAL_DMA_Abort+0x218>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d045      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a73      	ldr	r2, [pc, #460]	@ (8002958 <HAL_DMA_Abort+0x21c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d040      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a71      	ldr	r2, [pc, #452]	@ (800295c <HAL_DMA_Abort+0x220>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d03b      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a70      	ldr	r2, [pc, #448]	@ (8002960 <HAL_DMA_Abort+0x224>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d036      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002964 <HAL_DMA_Abort+0x228>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d031      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6d      	ldr	r2, [pc, #436]	@ (8002968 <HAL_DMA_Abort+0x22c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d02c      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6b      	ldr	r2, [pc, #428]	@ (800296c <HAL_DMA_Abort+0x230>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d027      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6a      	ldr	r2, [pc, #424]	@ (8002970 <HAL_DMA_Abort+0x234>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a68      	ldr	r2, [pc, #416]	@ (8002974 <HAL_DMA_Abort+0x238>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01d      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a67      	ldr	r2, [pc, #412]	@ (8002978 <HAL_DMA_Abort+0x23c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d018      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a65      	ldr	r2, [pc, #404]	@ (800297c <HAL_DMA_Abort+0x240>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a64      	ldr	r2, [pc, #400]	@ (8002980 <HAL_DMA_Abort+0x244>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00e      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a62      	ldr	r2, [pc, #392]	@ (8002984 <HAL_DMA_Abort+0x248>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d009      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a61      	ldr	r2, [pc, #388]	@ (8002988 <HAL_DMA_Abort+0x24c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_DMA_Abort+0xd6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5f      	ldr	r2, [pc, #380]	@ (800298c <HAL_DMA_Abort+0x250>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d101      	bne.n	8002816 <HAL_DMA_Abort+0xda>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_DMA_Abort+0xdc>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 021e 	bic.w	r2, r2, #30
 800282a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800283a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e00a      	b.n	800285a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 020e 	bic.w	r2, r2, #14
 8002852:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a3c      	ldr	r2, [pc, #240]	@ (8002950 <HAL_DMA_Abort+0x214>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d072      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a3a      	ldr	r2, [pc, #232]	@ (8002954 <HAL_DMA_Abort+0x218>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d06d      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a39      	ldr	r2, [pc, #228]	@ (8002958 <HAL_DMA_Abort+0x21c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d068      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a37      	ldr	r2, [pc, #220]	@ (800295c <HAL_DMA_Abort+0x220>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d063      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a36      	ldr	r2, [pc, #216]	@ (8002960 <HAL_DMA_Abort+0x224>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d05e      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a34      	ldr	r2, [pc, #208]	@ (8002964 <HAL_DMA_Abort+0x228>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d059      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a33      	ldr	r2, [pc, #204]	@ (8002968 <HAL_DMA_Abort+0x22c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d054      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a31      	ldr	r2, [pc, #196]	@ (800296c <HAL_DMA_Abort+0x230>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d04f      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a30      	ldr	r2, [pc, #192]	@ (8002970 <HAL_DMA_Abort+0x234>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d04a      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002974 <HAL_DMA_Abort+0x238>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d045      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002978 <HAL_DMA_Abort+0x23c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d040      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2b      	ldr	r2, [pc, #172]	@ (800297c <HAL_DMA_Abort+0x240>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d03b      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002980 <HAL_DMA_Abort+0x244>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d036      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a28      	ldr	r2, [pc, #160]	@ (8002984 <HAL_DMA_Abort+0x248>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d031      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <HAL_DMA_Abort+0x24c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d02c      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a25      	ldr	r2, [pc, #148]	@ (800298c <HAL_DMA_Abort+0x250>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d027      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a24      	ldr	r2, [pc, #144]	@ (8002990 <HAL_DMA_Abort+0x254>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a22      	ldr	r2, [pc, #136]	@ (8002994 <HAL_DMA_Abort+0x258>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01d      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a21      	ldr	r2, [pc, #132]	@ (8002998 <HAL_DMA_Abort+0x25c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d018      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1f      	ldr	r2, [pc, #124]	@ (800299c <HAL_DMA_Abort+0x260>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1e      	ldr	r2, [pc, #120]	@ (80029a0 <HAL_DMA_Abort+0x264>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00e      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <HAL_DMA_Abort+0x268>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <HAL_DMA_Abort+0x26c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d004      	beq.n	800294a <HAL_DMA_Abort+0x20e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a19      	ldr	r2, [pc, #100]	@ (80029ac <HAL_DMA_Abort+0x270>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d132      	bne.n	80029b0 <HAL_DMA_Abort+0x274>
 800294a:	2301      	movs	r3, #1
 800294c:	e031      	b.n	80029b2 <HAL_DMA_Abort+0x276>
 800294e:	bf00      	nop
 8002950:	40020010 	.word	0x40020010
 8002954:	40020028 	.word	0x40020028
 8002958:	40020040 	.word	0x40020040
 800295c:	40020058 	.word	0x40020058
 8002960:	40020070 	.word	0x40020070
 8002964:	40020088 	.word	0x40020088
 8002968:	400200a0 	.word	0x400200a0
 800296c:	400200b8 	.word	0x400200b8
 8002970:	40020410 	.word	0x40020410
 8002974:	40020428 	.word	0x40020428
 8002978:	40020440 	.word	0x40020440
 800297c:	40020458 	.word	0x40020458
 8002980:	40020470 	.word	0x40020470
 8002984:	40020488 	.word	0x40020488
 8002988:	400204a0 	.word	0x400204a0
 800298c:	400204b8 	.word	0x400204b8
 8002990:	58025408 	.word	0x58025408
 8002994:	5802541c 	.word	0x5802541c
 8002998:	58025430 	.word	0x58025430
 800299c:	58025444 	.word	0x58025444
 80029a0:	58025458 	.word	0x58025458
 80029a4:	5802546c 	.word	0x5802546c
 80029a8:	58025480 	.word	0x58025480
 80029ac:	58025494 	.word	0x58025494
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6d      	ldr	r2, [pc, #436]	@ (8002b80 <HAL_DMA_Abort+0x444>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d04a      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b84 <HAL_DMA_Abort+0x448>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d045      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6a      	ldr	r2, [pc, #424]	@ (8002b88 <HAL_DMA_Abort+0x44c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d040      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a68      	ldr	r2, [pc, #416]	@ (8002b8c <HAL_DMA_Abort+0x450>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d03b      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a67      	ldr	r2, [pc, #412]	@ (8002b90 <HAL_DMA_Abort+0x454>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d036      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a65      	ldr	r2, [pc, #404]	@ (8002b94 <HAL_DMA_Abort+0x458>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d031      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a64      	ldr	r2, [pc, #400]	@ (8002b98 <HAL_DMA_Abort+0x45c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d02c      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a62      	ldr	r2, [pc, #392]	@ (8002b9c <HAL_DMA_Abort+0x460>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d027      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a61      	ldr	r2, [pc, #388]	@ (8002ba0 <HAL_DMA_Abort+0x464>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5f      	ldr	r2, [pc, #380]	@ (8002ba4 <HAL_DMA_Abort+0x468>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01d      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba8 <HAL_DMA_Abort+0x46c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d018      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5c      	ldr	r2, [pc, #368]	@ (8002bac <HAL_DMA_Abort+0x470>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb0 <HAL_DMA_Abort+0x474>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a59      	ldr	r2, [pc, #356]	@ (8002bb4 <HAL_DMA_Abort+0x478>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d009      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a58      	ldr	r2, [pc, #352]	@ (8002bb8 <HAL_DMA_Abort+0x47c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_DMA_Abort+0x32a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a56      	ldr	r2, [pc, #344]	@ (8002bbc <HAL_DMA_Abort+0x480>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d108      	bne.n	8002a78 <HAL_DMA_Abort+0x33c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e007      	b.n	8002a88 <HAL_DMA_Abort+0x34c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a88:	e013      	b.n	8002ab2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8a:	f7ff fcc3 	bl	8002414 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d90c      	bls.n	8002ab2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e12d      	b.n	8002d0e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e5      	bne.n	8002a8a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b80 <HAL_DMA_Abort+0x444>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d04a      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b84 <HAL_DMA_Abort+0x448>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d045      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b88 <HAL_DMA_Abort+0x44c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d040      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b8c <HAL_DMA_Abort+0x450>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d03b      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a29      	ldr	r2, [pc, #164]	@ (8002b90 <HAL_DMA_Abort+0x454>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d036      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a27      	ldr	r2, [pc, #156]	@ (8002b94 <HAL_DMA_Abort+0x458>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d031      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a26      	ldr	r2, [pc, #152]	@ (8002b98 <HAL_DMA_Abort+0x45c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d02c      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a24      	ldr	r2, [pc, #144]	@ (8002b9c <HAL_DMA_Abort+0x460>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d027      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a23      	ldr	r2, [pc, #140]	@ (8002ba0 <HAL_DMA_Abort+0x464>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d022      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a21      	ldr	r2, [pc, #132]	@ (8002ba4 <HAL_DMA_Abort+0x468>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01d      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a20      	ldr	r2, [pc, #128]	@ (8002ba8 <HAL_DMA_Abort+0x46c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d018      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1e      	ldr	r2, [pc, #120]	@ (8002bac <HAL_DMA_Abort+0x470>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb0 <HAL_DMA_Abort+0x474>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00e      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <HAL_DMA_Abort+0x478>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb8 <HAL_DMA_Abort+0x47c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <HAL_DMA_Abort+0x422>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <HAL_DMA_Abort+0x480>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <HAL_DMA_Abort+0x426>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_DMA_Abort+0x428>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d02b      	beq.n	8002bc0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	223f      	movs	r2, #63	@ 0x3f
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	e02a      	b.n	8002bd6 <HAL_DMA_Abort+0x49a>
 8002b80:	40020010 	.word	0x40020010
 8002b84:	40020028 	.word	0x40020028
 8002b88:	40020040 	.word	0x40020040
 8002b8c:	40020058 	.word	0x40020058
 8002b90:	40020070 	.word	0x40020070
 8002b94:	40020088 	.word	0x40020088
 8002b98:	400200a0 	.word	0x400200a0
 8002b9c:	400200b8 	.word	0x400200b8
 8002ba0:	40020410 	.word	0x40020410
 8002ba4:	40020428 	.word	0x40020428
 8002ba8:	40020440 	.word	0x40020440
 8002bac:	40020458 	.word	0x40020458
 8002bb0:	40020470 	.word	0x40020470
 8002bb4:	40020488 	.word	0x40020488
 8002bb8:	400204a0 	.word	0x400204a0
 8002bbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2201      	movs	r2, #1
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a4f      	ldr	r2, [pc, #316]	@ (8002d18 <HAL_DMA_Abort+0x5dc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d072      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a4d      	ldr	r2, [pc, #308]	@ (8002d1c <HAL_DMA_Abort+0x5e0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d06d      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a4c      	ldr	r2, [pc, #304]	@ (8002d20 <HAL_DMA_Abort+0x5e4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d068      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8002d24 <HAL_DMA_Abort+0x5e8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d063      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a49      	ldr	r2, [pc, #292]	@ (8002d28 <HAL_DMA_Abort+0x5ec>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d05e      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a47      	ldr	r2, [pc, #284]	@ (8002d2c <HAL_DMA_Abort+0x5f0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d059      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a46      	ldr	r2, [pc, #280]	@ (8002d30 <HAL_DMA_Abort+0x5f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d054      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a44      	ldr	r2, [pc, #272]	@ (8002d34 <HAL_DMA_Abort+0x5f8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d04f      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a43      	ldr	r2, [pc, #268]	@ (8002d38 <HAL_DMA_Abort+0x5fc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d04a      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a41      	ldr	r2, [pc, #260]	@ (8002d3c <HAL_DMA_Abort+0x600>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d045      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a40      	ldr	r2, [pc, #256]	@ (8002d40 <HAL_DMA_Abort+0x604>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d040      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a3e      	ldr	r2, [pc, #248]	@ (8002d44 <HAL_DMA_Abort+0x608>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d03b      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a3d      	ldr	r2, [pc, #244]	@ (8002d48 <HAL_DMA_Abort+0x60c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d036      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d4c <HAL_DMA_Abort+0x610>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d031      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a3a      	ldr	r2, [pc, #232]	@ (8002d50 <HAL_DMA_Abort+0x614>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d02c      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a38      	ldr	r2, [pc, #224]	@ (8002d54 <HAL_DMA_Abort+0x618>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d027      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a37      	ldr	r2, [pc, #220]	@ (8002d58 <HAL_DMA_Abort+0x61c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d022      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a35      	ldr	r2, [pc, #212]	@ (8002d5c <HAL_DMA_Abort+0x620>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01d      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a34      	ldr	r2, [pc, #208]	@ (8002d60 <HAL_DMA_Abort+0x624>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d018      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a32      	ldr	r2, [pc, #200]	@ (8002d64 <HAL_DMA_Abort+0x628>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a31      	ldr	r2, [pc, #196]	@ (8002d68 <HAL_DMA_Abort+0x62c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00e      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2f      	ldr	r2, [pc, #188]	@ (8002d6c <HAL_DMA_Abort+0x630>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d009      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002d70 <HAL_DMA_Abort+0x634>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d004      	beq.n	8002cc6 <HAL_DMA_Abort+0x58a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d74 <HAL_DMA_Abort+0x638>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_DMA_Abort+0x58e>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_DMA_Abort+0x590>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cd8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00c      	beq.n	8002cfc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cfa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
 8002d58:	58025408 	.word	0x58025408
 8002d5c:	5802541c 	.word	0x5802541c
 8002d60:	58025430 	.word	0x58025430
 8002d64:	58025444 	.word	0x58025444
 8002d68:	58025458 	.word	0x58025458
 8002d6c:	5802546c 	.word	0x5802546c
 8002d70:	58025480 	.word	0x58025480
 8002d74:	58025494 	.word	0x58025494

08002d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e237      	b.n	80031fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2280      	movs	r2, #128	@ 0x80
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e22c      	b.n	80031fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5c      	ldr	r2, [pc, #368]	@ (8002f18 <HAL_DMA_Abort_IT+0x1a0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d04a      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5b      	ldr	r2, [pc, #364]	@ (8002f1c <HAL_DMA_Abort_IT+0x1a4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d045      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a59      	ldr	r2, [pc, #356]	@ (8002f20 <HAL_DMA_Abort_IT+0x1a8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d040      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a58      	ldr	r2, [pc, #352]	@ (8002f24 <HAL_DMA_Abort_IT+0x1ac>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d03b      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a56      	ldr	r2, [pc, #344]	@ (8002f28 <HAL_DMA_Abort_IT+0x1b0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d036      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a55      	ldr	r2, [pc, #340]	@ (8002f2c <HAL_DMA_Abort_IT+0x1b4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d031      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a53      	ldr	r2, [pc, #332]	@ (8002f30 <HAL_DMA_Abort_IT+0x1b8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02c      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a52      	ldr	r2, [pc, #328]	@ (8002f34 <HAL_DMA_Abort_IT+0x1bc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d027      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a50      	ldr	r2, [pc, #320]	@ (8002f38 <HAL_DMA_Abort_IT+0x1c0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d022      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a4f      	ldr	r2, [pc, #316]	@ (8002f3c <HAL_DMA_Abort_IT+0x1c4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d01d      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a4d      	ldr	r2, [pc, #308]	@ (8002f40 <HAL_DMA_Abort_IT+0x1c8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d018      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4c      	ldr	r2, [pc, #304]	@ (8002f44 <HAL_DMA_Abort_IT+0x1cc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f48 <HAL_DMA_Abort_IT+0x1d0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00e      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a49      	ldr	r2, [pc, #292]	@ (8002f4c <HAL_DMA_Abort_IT+0x1d4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d009      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a47      	ldr	r2, [pc, #284]	@ (8002f50 <HAL_DMA_Abort_IT+0x1d8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <HAL_DMA_Abort_IT+0xc8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a46      	ldr	r2, [pc, #280]	@ (8002f54 <HAL_DMA_Abort_IT+0x1dc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_DMA_Abort_IT+0xcc>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_DMA_Abort_IT+0xce>
 8002e44:	2300      	movs	r3, #0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8086 	beq.w	8002f58 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2f      	ldr	r2, [pc, #188]	@ (8002f18 <HAL_DMA_Abort_IT+0x1a0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d04a      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2e      	ldr	r2, [pc, #184]	@ (8002f1c <HAL_DMA_Abort_IT+0x1a4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d045      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f20 <HAL_DMA_Abort_IT+0x1a8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d040      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2b      	ldr	r2, [pc, #172]	@ (8002f24 <HAL_DMA_Abort_IT+0x1ac>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d03b      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a29      	ldr	r2, [pc, #164]	@ (8002f28 <HAL_DMA_Abort_IT+0x1b0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d036      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a28      	ldr	r2, [pc, #160]	@ (8002f2c <HAL_DMA_Abort_IT+0x1b4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d031      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a26      	ldr	r2, [pc, #152]	@ (8002f30 <HAL_DMA_Abort_IT+0x1b8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02c      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a25      	ldr	r2, [pc, #148]	@ (8002f34 <HAL_DMA_Abort_IT+0x1bc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d027      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a23      	ldr	r2, [pc, #140]	@ (8002f38 <HAL_DMA_Abort_IT+0x1c0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d022      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a22      	ldr	r2, [pc, #136]	@ (8002f3c <HAL_DMA_Abort_IT+0x1c4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01d      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a20      	ldr	r2, [pc, #128]	@ (8002f40 <HAL_DMA_Abort_IT+0x1c8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d018      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f44 <HAL_DMA_Abort_IT+0x1cc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <HAL_DMA_Abort_IT+0x1d0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1c      	ldr	r2, [pc, #112]	@ (8002f4c <HAL_DMA_Abort_IT+0x1d4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f50 <HAL_DMA_Abort_IT+0x1d8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x17c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a19      	ldr	r2, [pc, #100]	@ (8002f54 <HAL_DMA_Abort_IT+0x1dc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d108      	bne.n	8002f06 <HAL_DMA_Abort_IT+0x18e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e178      	b.n	80031f8 <HAL_DMA_Abort_IT+0x480>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e16f      	b.n	80031f8 <HAL_DMA_Abort_IT+0x480>
 8002f18:	40020010 	.word	0x40020010
 8002f1c:	40020028 	.word	0x40020028
 8002f20:	40020040 	.word	0x40020040
 8002f24:	40020058 	.word	0x40020058
 8002f28:	40020070 	.word	0x40020070
 8002f2c:	40020088 	.word	0x40020088
 8002f30:	400200a0 	.word	0x400200a0
 8002f34:	400200b8 	.word	0x400200b8
 8002f38:	40020410 	.word	0x40020410
 8002f3c:	40020428 	.word	0x40020428
 8002f40:	40020440 	.word	0x40020440
 8002f44:	40020458 	.word	0x40020458
 8002f48:	40020470 	.word	0x40020470
 8002f4c:	40020488 	.word	0x40020488
 8002f50:	400204a0 	.word	0x400204a0
 8002f54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 020e 	bic.w	r2, r2, #14
 8002f66:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6c      	ldr	r2, [pc, #432]	@ (8003120 <HAL_DMA_Abort_IT+0x3a8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d04a      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a6b      	ldr	r2, [pc, #428]	@ (8003124 <HAL_DMA_Abort_IT+0x3ac>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d045      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a69      	ldr	r2, [pc, #420]	@ (8003128 <HAL_DMA_Abort_IT+0x3b0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d040      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a68      	ldr	r2, [pc, #416]	@ (800312c <HAL_DMA_Abort_IT+0x3b4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d03b      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a66      	ldr	r2, [pc, #408]	@ (8003130 <HAL_DMA_Abort_IT+0x3b8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d036      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a65      	ldr	r2, [pc, #404]	@ (8003134 <HAL_DMA_Abort_IT+0x3bc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d031      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a63      	ldr	r2, [pc, #396]	@ (8003138 <HAL_DMA_Abort_IT+0x3c0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d02c      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a62      	ldr	r2, [pc, #392]	@ (800313c <HAL_DMA_Abort_IT+0x3c4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d027      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a60      	ldr	r2, [pc, #384]	@ (8003140 <HAL_DMA_Abort_IT+0x3c8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d022      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8003144 <HAL_DMA_Abort_IT+0x3cc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d01d      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8003148 <HAL_DMA_Abort_IT+0x3d0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d018      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a5c      	ldr	r2, [pc, #368]	@ (800314c <HAL_DMA_Abort_IT+0x3d4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8003150 <HAL_DMA_Abort_IT+0x3d8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00e      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a59      	ldr	r2, [pc, #356]	@ (8003154 <HAL_DMA_Abort_IT+0x3dc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d009      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a57      	ldr	r2, [pc, #348]	@ (8003158 <HAL_DMA_Abort_IT+0x3e0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d004      	beq.n	8003008 <HAL_DMA_Abort_IT+0x290>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a56      	ldr	r2, [pc, #344]	@ (800315c <HAL_DMA_Abort_IT+0x3e4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d108      	bne.n	800301a <HAL_DMA_Abort_IT+0x2a2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e007      	b.n	800302a <HAL_DMA_Abort_IT+0x2b2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3c      	ldr	r2, [pc, #240]	@ (8003120 <HAL_DMA_Abort_IT+0x3a8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d072      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3a      	ldr	r2, [pc, #232]	@ (8003124 <HAL_DMA_Abort_IT+0x3ac>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d06d      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a39      	ldr	r2, [pc, #228]	@ (8003128 <HAL_DMA_Abort_IT+0x3b0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d068      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a37      	ldr	r2, [pc, #220]	@ (800312c <HAL_DMA_Abort_IT+0x3b4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d063      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a36      	ldr	r2, [pc, #216]	@ (8003130 <HAL_DMA_Abort_IT+0x3b8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d05e      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a34      	ldr	r2, [pc, #208]	@ (8003134 <HAL_DMA_Abort_IT+0x3bc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d059      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a33      	ldr	r2, [pc, #204]	@ (8003138 <HAL_DMA_Abort_IT+0x3c0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d054      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a31      	ldr	r2, [pc, #196]	@ (800313c <HAL_DMA_Abort_IT+0x3c4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d04f      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a30      	ldr	r2, [pc, #192]	@ (8003140 <HAL_DMA_Abort_IT+0x3c8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d04a      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2e      	ldr	r2, [pc, #184]	@ (8003144 <HAL_DMA_Abort_IT+0x3cc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d045      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2d      	ldr	r2, [pc, #180]	@ (8003148 <HAL_DMA_Abort_IT+0x3d0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d040      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a2b      	ldr	r2, [pc, #172]	@ (800314c <HAL_DMA_Abort_IT+0x3d4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d03b      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003150 <HAL_DMA_Abort_IT+0x3d8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d036      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a28      	ldr	r2, [pc, #160]	@ (8003154 <HAL_DMA_Abort_IT+0x3dc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <HAL_DMA_Abort_IT+0x3e0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d02c      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a25      	ldr	r2, [pc, #148]	@ (800315c <HAL_DMA_Abort_IT+0x3e4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d027      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a24      	ldr	r2, [pc, #144]	@ (8003160 <HAL_DMA_Abort_IT+0x3e8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a22      	ldr	r2, [pc, #136]	@ (8003164 <HAL_DMA_Abort_IT+0x3ec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01d      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a21      	ldr	r2, [pc, #132]	@ (8003168 <HAL_DMA_Abort_IT+0x3f0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d018      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1f      	ldr	r2, [pc, #124]	@ (800316c <HAL_DMA_Abort_IT+0x3f4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003170 <HAL_DMA_Abort_IT+0x3f8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1c      	ldr	r2, [pc, #112]	@ (8003174 <HAL_DMA_Abort_IT+0x3fc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1b      	ldr	r2, [pc, #108]	@ (8003178 <HAL_DMA_Abort_IT+0x400>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_DMA_Abort_IT+0x3a2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a19      	ldr	r2, [pc, #100]	@ (800317c <HAL_DMA_Abort_IT+0x404>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d132      	bne.n	8003180 <HAL_DMA_Abort_IT+0x408>
 800311a:	2301      	movs	r3, #1
 800311c:	e031      	b.n	8003182 <HAL_DMA_Abort_IT+0x40a>
 800311e:	bf00      	nop
 8003120:	40020010 	.word	0x40020010
 8003124:	40020028 	.word	0x40020028
 8003128:	40020040 	.word	0x40020040
 800312c:	40020058 	.word	0x40020058
 8003130:	40020070 	.word	0x40020070
 8003134:	40020088 	.word	0x40020088
 8003138:	400200a0 	.word	0x400200a0
 800313c:	400200b8 	.word	0x400200b8
 8003140:	40020410 	.word	0x40020410
 8003144:	40020428 	.word	0x40020428
 8003148:	40020440 	.word	0x40020440
 800314c:	40020458 	.word	0x40020458
 8003150:	40020470 	.word	0x40020470
 8003154:	40020488 	.word	0x40020488
 8003158:	400204a0 	.word	0x400204a0
 800315c:	400204b8 	.word	0x400204b8
 8003160:	58025408 	.word	0x58025408
 8003164:	5802541c 	.word	0x5802541c
 8003168:	58025430 	.word	0x58025430
 800316c:	58025444 	.word	0x58025444
 8003170:	58025458 	.word	0x58025458
 8003174:	5802546c 	.word	0x5802546c
 8003178:	58025480 	.word	0x58025480
 800317c:	58025494 	.word	0x58025494
 8003180:	2300      	movs	r3, #0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d028      	beq.n	80031d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003194:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	2201      	movs	r2, #1
 80031a6:	409a      	lsls	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop

08003204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	@ 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003212:	4b86      	ldr	r3, [pc, #536]	@ (800342c <HAL_GPIO_Init+0x228>)
 8003214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003216:	e18c      	b.n	8003532 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 817e 	beq.w	800352c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d005      	beq.n	8003248 <HAL_GPIO_Init+0x44>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d130      	bne.n	80032aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800327e:	2201      	movs	r2, #1
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	f003 0201 	and.w	r2, r3, #1
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d017      	beq.n	80032e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d123      	bne.n	800333a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	220f      	movs	r2, #15
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	08da      	lsrs	r2, r3, #3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3208      	adds	r2, #8
 8003334:	69b9      	ldr	r1, [r7, #24]
 8003336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0203 	and.w	r2, r3, #3
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80d8 	beq.w	800352c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337c:	4b2c      	ldr	r3, [pc, #176]	@ (8003430 <HAL_GPIO_Init+0x22c>)
 800337e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003382:	4a2b      	ldr	r2, [pc, #172]	@ (8003430 <HAL_GPIO_Init+0x22c>)
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800338c:	4b28      	ldr	r3, [pc, #160]	@ (8003430 <HAL_GPIO_Init+0x22c>)
 800338e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339a:	4a26      	ldr	r2, [pc, #152]	@ (8003434 <HAL_GPIO_Init+0x230>)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_GPIO_Init+0x234>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d04a      	beq.n	800345c <HAL_GPIO_Init+0x258>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <HAL_GPIO_Init+0x238>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02b      	beq.n	8003426 <HAL_GPIO_Init+0x222>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <HAL_GPIO_Init+0x23c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d025      	beq.n	8003422 <HAL_GPIO_Init+0x21e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003444 <HAL_GPIO_Init+0x240>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01f      	beq.n	800341e <HAL_GPIO_Init+0x21a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <HAL_GPIO_Init+0x244>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d019      	beq.n	800341a <HAL_GPIO_Init+0x216>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a18      	ldr	r2, [pc, #96]	@ (800344c <HAL_GPIO_Init+0x248>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_GPIO_Init+0x212>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a17      	ldr	r2, [pc, #92]	@ (8003450 <HAL_GPIO_Init+0x24c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00d      	beq.n	8003412 <HAL_GPIO_Init+0x20e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a16      	ldr	r2, [pc, #88]	@ (8003454 <HAL_GPIO_Init+0x250>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <HAL_GPIO_Init+0x20a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a15      	ldr	r2, [pc, #84]	@ (8003458 <HAL_GPIO_Init+0x254>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_GPIO_Init+0x206>
 8003406:	2309      	movs	r3, #9
 8003408:	e029      	b.n	800345e <HAL_GPIO_Init+0x25a>
 800340a:	230a      	movs	r3, #10
 800340c:	e027      	b.n	800345e <HAL_GPIO_Init+0x25a>
 800340e:	2307      	movs	r3, #7
 8003410:	e025      	b.n	800345e <HAL_GPIO_Init+0x25a>
 8003412:	2306      	movs	r3, #6
 8003414:	e023      	b.n	800345e <HAL_GPIO_Init+0x25a>
 8003416:	2305      	movs	r3, #5
 8003418:	e021      	b.n	800345e <HAL_GPIO_Init+0x25a>
 800341a:	2304      	movs	r3, #4
 800341c:	e01f      	b.n	800345e <HAL_GPIO_Init+0x25a>
 800341e:	2303      	movs	r3, #3
 8003420:	e01d      	b.n	800345e <HAL_GPIO_Init+0x25a>
 8003422:	2302      	movs	r3, #2
 8003424:	e01b      	b.n	800345e <HAL_GPIO_Init+0x25a>
 8003426:	2301      	movs	r3, #1
 8003428:	e019      	b.n	800345e <HAL_GPIO_Init+0x25a>
 800342a:	bf00      	nop
 800342c:	58000080 	.word	0x58000080
 8003430:	58024400 	.word	0x58024400
 8003434:	58000400 	.word	0x58000400
 8003438:	58020000 	.word	0x58020000
 800343c:	58020400 	.word	0x58020400
 8003440:	58020800 	.word	0x58020800
 8003444:	58020c00 	.word	0x58020c00
 8003448:	58021000 	.word	0x58021000
 800344c:	58021400 	.word	0x58021400
 8003450:	58021800 	.word	0x58021800
 8003454:	58021c00 	.word	0x58021c00
 8003458:	58022400 	.word	0x58022400
 800345c:	2300      	movs	r3, #0
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	f002 0203 	and.w	r2, r2, #3
 8003464:	0092      	lsls	r2, r2, #2
 8003466:	4093      	lsls	r3, r2
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800346e:	4938      	ldr	r1, [pc, #224]	@ (8003550 <HAL_GPIO_Init+0x34c>)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	3301      	adds	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	f47f ae6b 	bne.w	8003218 <HAL_GPIO_Init+0x14>
  }
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	3724      	adds	r7, #36	@ 0x24
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	58000400 	.word	0x58000400

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003570:	e003      	b.n	800357a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	041a      	lsls	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e08b      	b.n	80036b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe f85c 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	@ 0x24
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d107      	bne.n	8003602 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	e006      	b.n	8003610 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800360e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d108      	bne.n	800362a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	e007      	b.n	800363a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003638:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <HAL_I2C_Init+0x134>)
 8003646:	430b      	orrs	r3, r1
 8003648:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003658:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69d9      	ldr	r1, [r3, #28]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1a      	ldr	r2, [r3, #32]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	02008000 	.word	0x02008000

080036c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	461a      	mov	r2, r3
 80036ce:	4603      	mov	r3, r0
 80036d0:	817b      	strh	r3, [r7, #10]
 80036d2:	460b      	mov	r3, r1
 80036d4:	813b      	strh	r3, [r7, #8]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	f040 80fd 	bne.w	80038e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_I2C_Mem_Read+0x34>
 80036ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d105      	bne.n	8003700 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0f1      	b.n	80038e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_I2C_Mem_Read+0x4e>
 800370a:	2302      	movs	r3, #2
 800370c:	e0ea      	b.n	80038e4 <HAL_I2C_Mem_Read+0x224>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003716:	f7fe fe7d 	bl	8002414 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2319      	movs	r3, #25
 8003722:	2201      	movs	r2, #1
 8003724:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f95b 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0d5      	b.n	80038e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2222      	movs	r2, #34	@ 0x22
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2240      	movs	r2, #64	@ 0x40
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003760:	88f8      	ldrh	r0, [r7, #6]
 8003762:	893a      	ldrh	r2, [r7, #8]
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	4603      	mov	r3, r0
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f8bf 	bl	80038f4 <I2C_RequestMemoryRead>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0ad      	b.n	80038e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2bff      	cmp	r3, #255	@ 0xff
 8003790:	d90e      	bls.n	80037b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	22ff      	movs	r2, #255	@ 0xff
 8003796:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379c:	b2da      	uxtb	r2, r3
 800379e:	8979      	ldrh	r1, [r7, #10]
 80037a0:	4b52      	ldr	r3, [pc, #328]	@ (80038ec <HAL_I2C_Mem_Read+0x22c>)
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fadf 	bl	8003d6c <I2C_TransferConfig>
 80037ae:	e00f      	b.n	80037d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	8979      	ldrh	r1, [r7, #10]
 80037c2:	4b4a      	ldr	r3, [pc, #296]	@ (80038ec <HAL_I2C_Mem_Read+0x22c>)
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 face 	bl	8003d6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	2200      	movs	r2, #0
 80037d8:	2104      	movs	r1, #4
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f902 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e07c      	b.n	80038e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d034      	beq.n	8003890 <HAL_I2C_Mem_Read+0x1d0>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	d130      	bne.n	8003890 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	2200      	movs	r2, #0
 8003836:	2180      	movs	r1, #128	@ 0x80
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f8d3 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e04d      	b.n	80038e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	2bff      	cmp	r3, #255	@ 0xff
 8003850:	d90e      	bls.n	8003870 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	22ff      	movs	r2, #255	@ 0xff
 8003856:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	b2da      	uxtb	r2, r3
 800385e:	8979      	ldrh	r1, [r7, #10]
 8003860:	2300      	movs	r3, #0
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fa7f 	bl	8003d6c <I2C_TransferConfig>
 800386e:	e00f      	b.n	8003890 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387e:	b2da      	uxtb	r2, r3
 8003880:	8979      	ldrh	r1, [r7, #10]
 8003882:	2300      	movs	r3, #0
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa6e 	bl	8003d6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d19a      	bne.n	80037d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f940 	bl	8003b24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e01a      	b.n	80038e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2220      	movs	r2, #32
 80038b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_I2C_Mem_Read+0x230>)
 80038c2:	400b      	ands	r3, r1
 80038c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e000      	b.n	80038e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038e2:	2302      	movs	r3, #2
  }
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	80002400 	.word	0x80002400
 80038f0:	fe00e800 	.word	0xfe00e800

080038f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	4608      	mov	r0, r1
 80038fe:	4611      	mov	r1, r2
 8003900:	461a      	mov	r2, r3
 8003902:	4603      	mov	r3, r0
 8003904:	817b      	strh	r3, [r7, #10]
 8003906:	460b      	mov	r3, r1
 8003908:	813b      	strh	r3, [r7, #8]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	8979      	ldrh	r1, [r7, #10]
 8003914:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <I2C_RequestMemoryRead+0xa4>)
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2300      	movs	r3, #0
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fa26 	bl	8003d6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	69b9      	ldr	r1, [r7, #24]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f8b6 	bl	8003a96 <I2C_WaitOnTXISFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e02c      	b.n	800398e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d105      	bne.n	8003946 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800393a:	893b      	ldrh	r3, [r7, #8]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28
 8003944:	e015      	b.n	8003972 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003946:	893b      	ldrh	r3, [r7, #8]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	b29b      	uxth	r3, r3
 800394c:	b2da      	uxtb	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	69b9      	ldr	r1, [r7, #24]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f89c 	bl	8003a96 <I2C_WaitOnTXISFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e012      	b.n	800398e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003968:	893b      	ldrh	r3, [r7, #8]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2200      	movs	r2, #0
 800397a:	2140      	movs	r1, #64	@ 0x40
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f831 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	80002000 	.word	0x80002000

0800399c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d103      	bne.n	80039ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2200      	movs	r2, #0
 80039b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d007      	beq.n	80039d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	619a      	str	r2, [r3, #24]
  }
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f4:	e03b      	b.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f8d6 	bl	8003bac <I2C_IsErrorOccurred>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e041      	b.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d02d      	beq.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a12:	f7fe fcff 	bl	8002414 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d122      	bne.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d113      	bne.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	f043 0220 	orr.w	r2, r3, #32
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00f      	b.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d0b4      	beq.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003aa2:	e033      	b.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f87f 	bl	8003bac <I2C_IsErrorOccurred>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e031      	b.n	8003b1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d025      	beq.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac0:	f7fe fca8 	bl	8002414 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d302      	bcc.n	8003ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11a      	bne.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d013      	beq.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d1c4      	bne.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b30:	e02f      	b.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f838 	bl	8003bac <I2C_IsErrorOccurred>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e02d      	b.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fe fc65 	bl	8002414 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d11a      	bne.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d013      	beq.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e007      	b.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d1c8      	bne.n	8003b32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	@ 0x28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d068      	beq.n	8003caa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2210      	movs	r2, #16
 8003bde:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003be0:	e049      	b.n	8003c76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d045      	beq.n	8003c76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fe fc13 	bl	8002414 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_IsErrorOccurred+0x54>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d13a      	bne.n	8003c76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c22:	d121      	bne.n	8003c68 <I2C_IsErrorOccurred+0xbc>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c2a:	d01d      	beq.n	8003c68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d01a      	beq.n	8003c68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c42:	f7fe fbe7 	bl	8002414 <HAL_GetTick>
 8003c46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c48:	e00e      	b.n	8003c68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c4a:	f7fe fbe3 	bl	8002414 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b19      	cmp	r3, #25
 8003c56:	d907      	bls.n	8003c68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	f043 0320 	orr.w	r3, r3, #32
 8003c5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c66:	e006      	b.n	8003c76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d1e9      	bne.n	8003c4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d003      	beq.n	8003c8c <I2C_IsErrorOccurred+0xe0>
 8003c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0aa      	beq.n	8003be2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ccc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f043 0308 	orr.w	r3, r3, #8
 8003ce4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f043 0302 	orr.w	r3, r3, #2
 8003d06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01c      	beq.n	8003d5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff fe3b 	bl	800399c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <I2C_IsErrorOccurred+0x1bc>)
 8003d32:	400b      	ands	r3, r1
 8003d34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3728      	adds	r7, #40	@ 0x28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	fe00e800 	.word	0xfe00e800

08003d6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d84:	7a7b      	ldrb	r3, [r7, #9]
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d8c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d9a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	0d5b      	lsrs	r3, r3, #21
 8003da6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003daa:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <I2C_TransferConfig+0x60>)
 8003dac:	430b      	orrs	r3, r1
 8003dae:	43db      	mvns	r3, r3
 8003db0:	ea02 0103 	and.w	r1, r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	03ff63ff 	.word	0x03ff63ff

08003dd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d138      	bne.n	8003e58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e032      	b.n	8003e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	@ 0x24
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d139      	bne.n	8003ef0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e033      	b.n	8003ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2224      	movs	r2, #36	@ 0x24
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f08:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d00a      	beq.n	8003f2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f14:	4b16      	ldr	r3, [pc, #88]	@ (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d001      	beq.n	8003f26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e01f      	b.n	8003f66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e01d      	b.n	8003f66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f2a:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f023 0207 	bic.w	r2, r3, #7
 8003f32:	490f      	ldr	r1, [pc, #60]	@ (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f3a:	f7fe fa6b 	bl	8002414 <HAL_GetTick>
 8003f3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f40:	e009      	b.n	8003f56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f42:	f7fe fa67 	bl	8002414 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f50:	d901      	bls.n	8003f56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e007      	b.n	8003f66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_PWREx_ConfigSupply+0x70>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f62:	d1ee      	bne.n	8003f42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	58024800 	.word	0x58024800

08003f74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08c      	sub	sp, #48	@ 0x30
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e3c8      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8087 	beq.w	80040a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f94:	4b88      	ldr	r3, [pc, #544]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f9e:	4b86      	ldr	r3, [pc, #536]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d007      	beq.n	8003fba <HAL_RCC_OscConfig+0x46>
 8003faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fac:	2b18      	cmp	r3, #24
 8003fae:	d110      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x5e>
 8003fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fba:	4b7f      	ldr	r3, [pc, #508]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d06c      	beq.n	80040a0 <HAL_RCC_OscConfig+0x12c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d168      	bne.n	80040a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e3a2      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x76>
 8003fdc:	4b76      	ldr	r3, [pc, #472]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a75      	ldr	r2, [pc, #468]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8003fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	e02e      	b.n	8004048 <HAL_RCC_OscConfig+0xd4>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x98>
 8003ff2:	4b71      	ldr	r3, [pc, #452]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a70      	ldr	r2, [pc, #448]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8003ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b6e      	ldr	r3, [pc, #440]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6d      	ldr	r2, [pc, #436]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004004:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e01d      	b.n	8004048 <HAL_RCC_OscConfig+0xd4>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0xbc>
 8004016:	4b68      	ldr	r3, [pc, #416]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a67      	ldr	r2, [pc, #412]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 800401c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4b65      	ldr	r3, [pc, #404]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a64      	ldr	r2, [pc, #400]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e00b      	b.n	8004048 <HAL_RCC_OscConfig+0xd4>
 8004030:	4b61      	ldr	r3, [pc, #388]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a60      	ldr	r2, [pc, #384]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b5e      	ldr	r3, [pc, #376]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a5d      	ldr	r2, [pc, #372]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d013      	beq.n	8004078 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe f9e0 	bl	8002414 <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fe f9dc 	bl	8002414 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	@ 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e356      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800406a:	4b53      	ldr	r3, [pc, #332]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0xe4>
 8004076:	e014      	b.n	80040a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fe f9cc 	bl	8002414 <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004080:	f7fe f9c8 	bl	8002414 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	@ 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e342      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004092:	4b49      	ldr	r3, [pc, #292]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x10c>
 800409e:	e000      	b.n	80040a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 808c 	beq.w	80041c8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b0:	4b41      	ldr	r3, [pc, #260]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040ba:	4b3f      	ldr	r3, [pc, #252]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 80040bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_RCC_OscConfig+0x162>
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	2b18      	cmp	r3, #24
 80040ca:	d137      	bne.n	800413c <HAL_RCC_OscConfig+0x1c8>
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d132      	bne.n	800413c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d6:	4b38      	ldr	r3, [pc, #224]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_RCC_OscConfig+0x17a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e314      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040ee:	4b32      	ldr	r3, [pc, #200]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 0219 	bic.w	r2, r3, #25
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	492f      	ldr	r1, [pc, #188]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe f988 	bl	8002414 <HAL_GetTick>
 8004104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004108:	f7fe f984 	bl	8002414 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e2fe      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800411a:	4b27      	ldr	r3, [pc, #156]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	061b      	lsls	r3, r3, #24
 8004134:	4920      	ldr	r1, [pc, #128]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800413a:	e045      	b.n	80041c8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d026      	beq.n	8004192 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004144:	4b1c      	ldr	r3, [pc, #112]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 0219 	bic.w	r2, r3, #25
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4919      	ldr	r1, [pc, #100]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004156:	f7fe f95d 	bl	8002414 <HAL_GetTick>
 800415a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415e:	f7fe f959 	bl	8002414 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e2d3      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004170:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417c:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	490b      	ldr	r1, [pc, #44]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
 8004190:	e01a      	b.n	80041c8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004192:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a08      	ldr	r2, [pc, #32]	@ (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419e:	f7fe f939 	bl	8002414 <HAL_GetTick>
 80041a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041a4:	e00a      	b.n	80041bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a6:	f7fe f935 	bl	8002414 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d903      	bls.n	80041bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e2af      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
 80041b8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041bc:	4b96      	ldr	r3, [pc, #600]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ee      	bne.n	80041a6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d06a      	beq.n	80042aa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d4:	4b90      	ldr	r3, [pc, #576]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041de:	4b8e      	ldr	r3, [pc, #568]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80041e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d007      	beq.n	80041fa <HAL_RCC_OscConfig+0x286>
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b18      	cmp	r3, #24
 80041ee:	d11b      	bne.n	8004228 <HAL_RCC_OscConfig+0x2b4>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d116      	bne.n	8004228 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041fa:	4b87      	ldr	r3, [pc, #540]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_RCC_OscConfig+0x29e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	2b80      	cmp	r3, #128	@ 0x80
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e282      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004212:	4b81      	ldr	r3, [pc, #516]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	497d      	ldr	r1, [pc, #500]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004226:	e040      	b.n	80042aa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d023      	beq.n	8004278 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004230:	4b79      	ldr	r3, [pc, #484]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a78      	ldr	r2, [pc, #480]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800423a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fe f8ea 	bl	8002414 <HAL_GetTick>
 8004240:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004244:	f7fe f8e6 	bl	8002414 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e260      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004256:	4b70      	ldr	r3, [pc, #448]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004262:	4b6d      	ldr	r3, [pc, #436]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	4969      	ldr	r1, [pc, #420]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004272:	4313      	orrs	r3, r2
 8004274:	60cb      	str	r3, [r1, #12]
 8004276:	e018      	b.n	80042aa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004278:	4b67      	ldr	r3, [pc, #412]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a66      	ldr	r2, [pc, #408]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 800427e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fe f8c6 	bl	8002414 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800428c:	f7fe f8c2 	bl	8002414 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e23c      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800429e:	4b5e      	ldr	r3, [pc, #376]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d036      	beq.n	8004324 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d019      	beq.n	80042f2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042be:	4b56      	ldr	r3, [pc, #344]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80042c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c2:	4a55      	ldr	r2, [pc, #340]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fe f8a3 	bl	8002414 <HAL_GetTick>
 80042ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fe f89f 	bl	8002414 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e219      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80042e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCC_OscConfig+0x35e>
 80042f0:	e018      	b.n	8004324 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f2:	4b49      	ldr	r3, [pc, #292]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80042f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f6:	4a48      	ldr	r2, [pc, #288]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fe f889 	bl	8002414 <HAL_GetTick>
 8004302:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004306:	f7fe f885 	bl	8002414 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e1ff      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004318:	4b3f      	ldr	r3, [pc, #252]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 800431a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d036      	beq.n	800439e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d019      	beq.n	800436c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004338:	4b37      	ldr	r3, [pc, #220]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a36      	ldr	r2, [pc, #216]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 800433e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004342:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004344:	f7fe f866 	bl	8002414 <HAL_GetTick>
 8004348:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800434c:	f7fe f862 	bl	8002414 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1dc      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800435e:	4b2e      	ldr	r3, [pc, #184]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x3d8>
 800436a:	e018      	b.n	800439e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800436c:	4b2a      	ldr	r3, [pc, #168]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a29      	ldr	r2, [pc, #164]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004372:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004376:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004378:	f7fe f84c 	bl	8002414 <HAL_GetTick>
 800437c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004380:	f7fe f848 	bl	8002414 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1c2      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004392:	4b21      	ldr	r3, [pc, #132]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8086 	beq.w	80044b8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043ac:	4b1b      	ldr	r3, [pc, #108]	@ (800441c <HAL_RCC_OscConfig+0x4a8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1a      	ldr	r2, [pc, #104]	@ (800441c <HAL_RCC_OscConfig+0x4a8>)
 80043b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043b8:	f7fe f82c 	bl	8002414 <HAL_GetTick>
 80043bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7fe f828 	bl	8002414 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	@ 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1a2      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <HAL_RCC_OscConfig+0x4a8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d106      	bne.n	80043f4 <HAL_RCC_OscConfig+0x480>
 80043e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f2:	e032      	b.n	800445a <HAL_RCC_OscConfig+0x4e6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d111      	bne.n	8004420 <HAL_RCC_OscConfig+0x4ac>
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004400:	4a05      	ldr	r2, [pc, #20]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	@ 0x70
 8004408:	4b03      	ldr	r3, [pc, #12]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440c:	4a02      	ldr	r2, [pc, #8]	@ (8004418 <HAL_RCC_OscConfig+0x4a4>)
 800440e:	f023 0304 	bic.w	r3, r3, #4
 8004412:	6713      	str	r3, [r2, #112]	@ 0x70
 8004414:	e021      	b.n	800445a <HAL_RCC_OscConfig+0x4e6>
 8004416:	bf00      	nop
 8004418:	58024400 	.word	0x58024400
 800441c:	58024800 	.word	0x58024800
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b05      	cmp	r3, #5
 8004426:	d10c      	bne.n	8004442 <HAL_RCC_OscConfig+0x4ce>
 8004428:	4b83      	ldr	r3, [pc, #524]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442c:	4a82      	ldr	r2, [pc, #520]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800442e:	f043 0304 	orr.w	r3, r3, #4
 8004432:	6713      	str	r3, [r2, #112]	@ 0x70
 8004434:	4b80      	ldr	r3, [pc, #512]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004438:	4a7f      	ldr	r2, [pc, #508]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004440:	e00b      	b.n	800445a <HAL_RCC_OscConfig+0x4e6>
 8004442:	4b7d      	ldr	r3, [pc, #500]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	4a7c      	ldr	r2, [pc, #496]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	6713      	str	r3, [r2, #112]	@ 0x70
 800444e:	4b7a      	ldr	r3, [pc, #488]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004452:	4a79      	ldr	r2, [pc, #484]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004454:	f023 0304 	bic.w	r3, r3, #4
 8004458:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d015      	beq.n	800448e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004462:	f7fd ffd7 	bl	8002414 <HAL_GetTick>
 8004466:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004468:	e00a      	b.n	8004480 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446a:	f7fd ffd3 	bl	8002414 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004478:	4293      	cmp	r3, r2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e14b      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004480:	4b6d      	ldr	r3, [pc, #436]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0ee      	beq.n	800446a <HAL_RCC_OscConfig+0x4f6>
 800448c:	e014      	b.n	80044b8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f7fd ffc1 	bl	8002414 <HAL_GetTick>
 8004492:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004494:	e00a      	b.n	80044ac <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fd ffbd 	bl	8002414 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e135      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044ac:	4b62      	ldr	r3, [pc, #392]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1ee      	bne.n	8004496 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 812a 	beq.w	8004716 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ca:	2b18      	cmp	r3, #24
 80044cc:	f000 80ba 	beq.w	8004644 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	f040 8095 	bne.w	8004604 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	4b57      	ldr	r3, [pc, #348]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a56      	ldr	r2, [pc, #344]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80044e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fd ff95 	bl	8002414 <HAL_GetTick>
 80044ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ee:	f7fd ff91 	bl	8002414 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e10b      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004500:	4b4d      	ldr	r3, [pc, #308]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f0      	bne.n	80044ee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800450c:	4b4a      	ldr	r3, [pc, #296]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800450e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004510:	4b4a      	ldr	r3, [pc, #296]	@ (800463c <HAL_RCC_OscConfig+0x6c8>)
 8004512:	4013      	ands	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800451c:	0112      	lsls	r2, r2, #4
 800451e:	430a      	orrs	r2, r1
 8004520:	4945      	ldr	r1, [pc, #276]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	628b      	str	r3, [r1, #40]	@ 0x28
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	3b01      	subs	r3, #1
 800452c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004534:	3b01      	subs	r3, #1
 8004536:	025b      	lsls	r3, r3, #9
 8004538:	b29b      	uxth	r3, r3
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	3b01      	subs	r3, #1
 8004542:	041b      	lsls	r3, r3, #16
 8004544:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	3b01      	subs	r3, #1
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004556:	4938      	ldr	r1, [pc, #224]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004558:	4313      	orrs	r3, r2
 800455a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800455c:	4b36      	ldr	r3, [pc, #216]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	4a35      	ldr	r2, [pc, #212]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004568:	4b33      	ldr	r3, [pc, #204]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800456a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800456c:	4b34      	ldr	r3, [pc, #208]	@ (8004640 <HAL_RCC_OscConfig+0x6cc>)
 800456e:	4013      	ands	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004574:	00d2      	lsls	r2, r2, #3
 8004576:	4930      	ldr	r1, [pc, #192]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004578:	4313      	orrs	r3, r2
 800457a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800457c:	4b2e      	ldr	r3, [pc, #184]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	f023 020c 	bic.w	r2, r3, #12
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	492b      	ldr	r1, [pc, #172]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800458a:	4313      	orrs	r3, r2
 800458c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800458e:	4b2a      	ldr	r3, [pc, #168]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004592:	f023 0202 	bic.w	r2, r3, #2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	4927      	ldr	r1, [pc, #156]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800459c:	4313      	orrs	r3, r2
 800459e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045a0:	4b25      	ldr	r3, [pc, #148]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	4a24      	ldr	r2, [pc, #144]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ac:	4b22      	ldr	r3, [pc, #136]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b0:	4a21      	ldr	r2, [pc, #132]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a18      	ldr	r2, [pc, #96]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fd ff1a 	bl	8002414 <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fd ff16 	bl	8002414 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e090      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045f6:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x670>
 8004602:	e088      	b.n	8004716 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004604:	4b0c      	ldr	r3, [pc, #48]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0b      	ldr	r2, [pc, #44]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800460a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800460e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fd ff00 	bl	8002414 <HAL_GetTick>
 8004614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fd fefc 	bl	8002414 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e076      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800462a:	4b03      	ldr	r3, [pc, #12]	@ (8004638 <HAL_RCC_OscConfig+0x6c4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x6a4>
 8004636:	e06e      	b.n	8004716 <HAL_RCC_OscConfig+0x7a2>
 8004638:	58024400 	.word	0x58024400
 800463c:	fffffc0c 	.word	0xfffffc0c
 8004640:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004644:	4b36      	ldr	r3, [pc, #216]	@ (8004720 <HAL_RCC_OscConfig+0x7ac>)
 8004646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004648:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800464a:	4b35      	ldr	r3, [pc, #212]	@ (8004720 <HAL_RCC_OscConfig+0x7ac>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	2b01      	cmp	r3, #1
 8004656:	d031      	beq.n	80046bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0203 	and.w	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d12a      	bne.n	80046bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d122      	bne.n	80046bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004680:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d11a      	bne.n	80046bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	0a5b      	lsrs	r3, r3, #9
 800468a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004692:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d111      	bne.n	80046bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	0c1b      	lsrs	r3, r3, #16
 800469c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d108      	bne.n	80046bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	0e1b      	lsrs	r3, r3, #24
 80046ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e02b      	b.n	8004718 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046c0:	4b17      	ldr	r3, [pc, #92]	@ (8004720 <HAL_RCC_OscConfig+0x7ac>)
 80046c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c4:	08db      	lsrs	r3, r3, #3
 80046c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d01f      	beq.n	8004716 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046d6:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <HAL_RCC_OscConfig+0x7ac>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046da:	4a11      	ldr	r2, [pc, #68]	@ (8004720 <HAL_RCC_OscConfig+0x7ac>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046e2:	f7fd fe97 	bl	8002414 <HAL_GetTick>
 80046e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80046e8:	bf00      	nop
 80046ea:	f7fd fe93 	bl	8002414 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d0f9      	beq.n	80046ea <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <HAL_RCC_OscConfig+0x7ac>)
 80046f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <HAL_RCC_OscConfig+0x7b0>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004702:	00d2      	lsls	r2, r2, #3
 8004704:	4906      	ldr	r1, [pc, #24]	@ (8004720 <HAL_RCC_OscConfig+0x7ac>)
 8004706:	4313      	orrs	r3, r2
 8004708:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800470a:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <HAL_RCC_OscConfig+0x7ac>)
 800470c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470e:	4a04      	ldr	r2, [pc, #16]	@ (8004720 <HAL_RCC_OscConfig+0x7ac>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3730      	adds	r7, #48	@ 0x30
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	58024400 	.word	0x58024400
 8004724:	ffff0007 	.word	0xffff0007

08004728 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e19c      	b.n	8004a76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800473c:	4b8a      	ldr	r3, [pc, #552]	@ (8004968 <HAL_RCC_ClockConfig+0x240>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d910      	bls.n	800476c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474a:	4b87      	ldr	r3, [pc, #540]	@ (8004968 <HAL_RCC_ClockConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 020f 	bic.w	r2, r3, #15
 8004752:	4985      	ldr	r1, [pc, #532]	@ (8004968 <HAL_RCC_ClockConfig+0x240>)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	4313      	orrs	r3, r2
 8004758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	4b83      	ldr	r3, [pc, #524]	@ (8004968 <HAL_RCC_ClockConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e184      	b.n	8004a76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	4b7b      	ldr	r3, [pc, #492]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004784:	429a      	cmp	r2, r3
 8004786:	d908      	bls.n	800479a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004788:	4b78      	ldr	r3, [pc, #480]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	4975      	ldr	r1, [pc, #468]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004796:	4313      	orrs	r3, r2
 8004798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d010      	beq.n	80047c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	4b70      	ldr	r3, [pc, #448]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d908      	bls.n	80047c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047b6:	4b6d      	ldr	r3, [pc, #436]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	496a      	ldr	r1, [pc, #424]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	4b64      	ldr	r3, [pc, #400]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d908      	bls.n	80047f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047e4:	4b61      	ldr	r3, [pc, #388]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	495e      	ldr	r1, [pc, #376]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d010      	beq.n	8004824 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	4b59      	ldr	r3, [pc, #356]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800480e:	429a      	cmp	r2, r3
 8004810:	d908      	bls.n	8004824 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004812:	4b56      	ldr	r3, [pc, #344]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	4953      	ldr	r1, [pc, #332]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004820:	4313      	orrs	r3, r2
 8004822:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d010      	beq.n	8004852 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	4b4d      	ldr	r3, [pc, #308]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	429a      	cmp	r2, r3
 800483e:	d908      	bls.n	8004852 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b4a      	ldr	r3, [pc, #296]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f023 020f 	bic.w	r2, r3, #15
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4947      	ldr	r1, [pc, #284]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 800484e:	4313      	orrs	r3, r2
 8004850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d055      	beq.n	800490a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800485e:	4b43      	ldr	r3, [pc, #268]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	4940      	ldr	r1, [pc, #256]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 800486c:	4313      	orrs	r3, r2
 800486e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d107      	bne.n	8004888 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004878:	4b3c      	ldr	r3, [pc, #240]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d121      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0f6      	b.n	8004a76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d107      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004890:	4b36      	ldr	r3, [pc, #216]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d115      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0ea      	b.n	8004a76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048a8:	4b30      	ldr	r3, [pc, #192]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0de      	b.n	8004a76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048b8:	4b2c      	ldr	r3, [pc, #176]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0d6      	b.n	8004a76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048c8:	4b28      	ldr	r3, [pc, #160]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f023 0207 	bic.w	r2, r3, #7
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4925      	ldr	r1, [pc, #148]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048da:	f7fd fd9b 	bl	8002414 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e0:	e00a      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e2:	f7fd fd97 	bl	8002414 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e0be      	b.n	8004a76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f8:	4b1c      	ldr	r3, [pc, #112]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	429a      	cmp	r2, r3
 8004908:	d1eb      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d010      	beq.n	8004938 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	4b14      	ldr	r3, [pc, #80]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	429a      	cmp	r2, r3
 8004924:	d208      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004926:	4b11      	ldr	r3, [pc, #68]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f023 020f 	bic.w	r2, r3, #15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	490e      	ldr	r1, [pc, #56]	@ (800496c <HAL_RCC_ClockConfig+0x244>)
 8004934:	4313      	orrs	r3, r2
 8004936:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004938:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_RCC_ClockConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d214      	bcs.n	8004970 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b08      	ldr	r3, [pc, #32]	@ (8004968 <HAL_RCC_ClockConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 020f 	bic.w	r2, r3, #15
 800494e:	4906      	ldr	r1, [pc, #24]	@ (8004968 <HAL_RCC_ClockConfig+0x240>)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b04      	ldr	r3, [pc, #16]	@ (8004968 <HAL_RCC_ClockConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e086      	b.n	8004a76 <HAL_RCC_ClockConfig+0x34e>
 8004968:	52002000 	.word	0x52002000
 800496c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d010      	beq.n	800499e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	4b3f      	ldr	r3, [pc, #252]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004988:	429a      	cmp	r2, r3
 800498a:	d208      	bcs.n	800499e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800498c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	4939      	ldr	r1, [pc, #228]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 800499a:	4313      	orrs	r3, r2
 800499c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d010      	beq.n	80049cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d208      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049ba:	4b31      	ldr	r3, [pc, #196]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	492e      	ldr	r1, [pc, #184]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699a      	ldr	r2, [r3, #24]
 80049dc:	4b28      	ldr	r3, [pc, #160]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d208      	bcs.n	80049fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049e8:	4b25      	ldr	r3, [pc, #148]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	4922      	ldr	r1, [pc, #136]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d010      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d208      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a16:	4b1a      	ldr	r3, [pc, #104]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	4917      	ldr	r1, [pc, #92]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a28:	f000 f834 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4b14      	ldr	r3, [pc, #80]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	4912      	ldr	r1, [pc, #72]	@ (8004a84 <HAL_RCC_ClockConfig+0x35c>)
 8004a3a:	5ccb      	ldrb	r3, [r1, r3]
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
 8004a44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a46:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <HAL_RCC_ClockConfig+0x358>)
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004a84 <HAL_RCC_ClockConfig+0x35c>)
 8004a50:	5cd3      	ldrb	r3, [r2, r3]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a88 <HAL_RCC_ClockConfig+0x360>)
 8004a5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a60:	4a0a      	ldr	r2, [pc, #40]	@ (8004a8c <HAL_RCC_ClockConfig+0x364>)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a66:	4b0a      	ldr	r3, [pc, #40]	@ (8004a90 <HAL_RCC_ClockConfig+0x368>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd fc88 	bl	8002380 <HAL_InitTick>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	58024400 	.word	0x58024400
 8004a84:	0800d0c0 	.word	0x0800d0c0
 8004a88:	24000008 	.word	0x24000008
 8004a8c:	24000004 	.word	0x24000004
 8004a90:	24000010 	.word	0x24000010

08004a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	@ 0x24
 8004a98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a9a:	4bb3      	ldr	r3, [pc, #716]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aa2:	2b18      	cmp	r3, #24
 8004aa4:	f200 8155 	bhi.w	8004d52 <HAL_RCC_GetSysClockFreq+0x2be>
 8004aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004b15 	.word	0x08004b15
 8004ab4:	08004d53 	.word	0x08004d53
 8004ab8:	08004d53 	.word	0x08004d53
 8004abc:	08004d53 	.word	0x08004d53
 8004ac0:	08004d53 	.word	0x08004d53
 8004ac4:	08004d53 	.word	0x08004d53
 8004ac8:	08004d53 	.word	0x08004d53
 8004acc:	08004d53 	.word	0x08004d53
 8004ad0:	08004b3b 	.word	0x08004b3b
 8004ad4:	08004d53 	.word	0x08004d53
 8004ad8:	08004d53 	.word	0x08004d53
 8004adc:	08004d53 	.word	0x08004d53
 8004ae0:	08004d53 	.word	0x08004d53
 8004ae4:	08004d53 	.word	0x08004d53
 8004ae8:	08004d53 	.word	0x08004d53
 8004aec:	08004d53 	.word	0x08004d53
 8004af0:	08004b41 	.word	0x08004b41
 8004af4:	08004d53 	.word	0x08004d53
 8004af8:	08004d53 	.word	0x08004d53
 8004afc:	08004d53 	.word	0x08004d53
 8004b00:	08004d53 	.word	0x08004d53
 8004b04:	08004d53 	.word	0x08004d53
 8004b08:	08004d53 	.word	0x08004d53
 8004b0c:	08004d53 	.word	0x08004d53
 8004b10:	08004b47 	.word	0x08004b47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b14:	4b94      	ldr	r3, [pc, #592]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b20:	4b91      	ldr	r3, [pc, #580]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	08db      	lsrs	r3, r3, #3
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	4a90      	ldr	r2, [pc, #576]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b32:	e111      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b34:	4b8d      	ldr	r3, [pc, #564]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b36:	61bb      	str	r3, [r7, #24]
      break;
 8004b38:	e10e      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b3c:	61bb      	str	r3, [r7, #24]
      break;
 8004b3e:	e10b      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b40:	4b8c      	ldr	r3, [pc, #560]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b42:	61bb      	str	r3, [r7, #24]
      break;
 8004b44:	e108      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b46:	4b88      	ldr	r3, [pc, #544]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b50:	4b85      	ldr	r3, [pc, #532]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b5c:	4b82      	ldr	r3, [pc, #520]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b66:	4b80      	ldr	r3, [pc, #512]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6a:	08db      	lsrs	r3, r3, #3
 8004b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80e1 	beq.w	8004d4c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	f000 8083 	beq.w	8004c98 <HAL_RCC_GetSysClockFreq+0x204>
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	f200 80a1 	bhi.w	8004cdc <HAL_RCC_GetSysClockFreq+0x248>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x114>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d056      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ba6:	e099      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d02d      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bb4:	4b6c      	ldr	r3, [pc, #432]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	4a6b      	ldr	r2, [pc, #428]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b62      	ldr	r3, [pc, #392]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bf2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c0e:	e087      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c22:	4b51      	ldr	r3, [pc, #324]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c52:	e065      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c66:	4b40      	ldr	r3, [pc, #256]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c96:	e043      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004d84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cbe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cda:	e021      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cee:	4b1e      	ldr	r3, [pc, #120]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d02:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d20:	4b11      	ldr	r3, [pc, #68]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d24:	0a5b      	lsrs	r3, r3, #9
 8004d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d44:	ee17 3a90 	vmov	r3, s15
 8004d48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d4a:	e005      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
      break;
 8004d50:	e002      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d52:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d54:	61bb      	str	r3, [r7, #24]
      break;
 8004d56:	bf00      	nop
  }

  return sysclockfreq;
 8004d58:	69bb      	ldr	r3, [r7, #24]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3724      	adds	r7, #36	@ 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	58024400 	.word	0x58024400
 8004d6c:	03d09000 	.word	0x03d09000
 8004d70:	003d0900 	.word	0x003d0900
 8004d74:	017d7840 	.word	0x017d7840
 8004d78:	46000000 	.word	0x46000000
 8004d7c:	4c742400 	.word	0x4c742400
 8004d80:	4a742400 	.word	0x4a742400
 8004d84:	4bbebc20 	.word	0x4bbebc20

08004d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d8e:	f7ff fe81 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b10      	ldr	r3, [pc, #64]	@ (8004dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	490f      	ldr	r1, [pc, #60]	@ (8004ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8004da0:	5ccb      	ldrb	r3, [r1, r3]
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dac:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	4a09      	ldr	r2, [pc, #36]	@ (8004ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8004db6:	5cd3      	ldrb	r3, [r2, r3]
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc2:	4a07      	ldr	r2, [pc, #28]	@ (8004de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004dc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dc6:	4a07      	ldr	r2, [pc, #28]	@ (8004de4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004dcc:	4b04      	ldr	r3, [pc, #16]	@ (8004de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004dce:	681b      	ldr	r3, [r3, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	0800d0c0 	.word	0x0800d0c0
 8004de0:	24000008 	.word	0x24000008
 8004de4:	24000004 	.word	0x24000004

08004de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004dec:	f7ff ffcc 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4904      	ldr	r1, [pc, #16]	@ (8004e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	0800d0c0 	.word	0x0800d0c0

08004e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e18:	f7ff ffb6 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4904      	ldr	r1, [pc, #16]	@ (8004e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	0800d0c0 	.word	0x0800d0c0

08004e40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e44:	b0c6      	sub	sp, #280	@ 0x118
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e52:	2300      	movs	r3, #0
 8004e54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004e64:	2500      	movs	r5, #0
 8004e66:	ea54 0305 	orrs.w	r3, r4, r5
 8004e6a:	d049      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e76:	d02f      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e7c:	d828      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e82:	d01a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e88:	d822      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e92:	d007      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e94:	e01c      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e96:	4bab      	ldr	r3, [pc, #684]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	4aaa      	ldr	r2, [pc, #680]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ea2:	e01a      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fc25 	bl	80066fc <RCCEx_PLL2_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004eb8:	e00f      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ebe:	3328      	adds	r3, #40	@ 0x28
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fccc 	bl	8006860 <RCCEx_PLL3_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ece:	e004      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ed6:	e000      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ee2:	4b98      	ldr	r3, [pc, #608]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef0:	4a94      	ldr	r2, [pc, #592]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ef6:	e003      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004f0c:	f04f 0900 	mov.w	r9, #0
 8004f10:	ea58 0309 	orrs.w	r3, r8, r9
 8004f14:	d047      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d82a      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f20:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f3d 	.word	0x08004f3d
 8004f2c:	08004f4b 	.word	0x08004f4b
 8004f30:	08004f61 	.word	0x08004f61
 8004f34:	08004f7f 	.word	0x08004f7f
 8004f38:	08004f7f 	.word	0x08004f7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f3c:	4b81      	ldr	r3, [pc, #516]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	4a80      	ldr	r2, [pc, #512]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f48:	e01a      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4e:	3308      	adds	r3, #8
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 fbd2 	bl	80066fc <RCCEx_PLL2_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f5e:	e00f      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f64:	3328      	adds	r3, #40	@ 0x28
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 fc79 	bl	8006860 <RCCEx_PLL3_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f74:	e004      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f7c:	e000      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f88:	4b6e      	ldr	r3, [pc, #440]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8c:	f023 0107 	bic.w	r1, r3, #7
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f96:	4a6b      	ldr	r2, [pc, #428]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f9c:	e003      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004fb2:	f04f 0b00 	mov.w	fp, #0
 8004fb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004fba:	d05b      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fc4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004fc8:	d03b      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004fca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004fce:	d834      	bhi.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fd4:	d037      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004fd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fda:	d82e      	bhi.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fdc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fe0:	d033      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004fe2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fe6:	d828      	bhi.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fec:	d01a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ff2:	d822      	bhi.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004ff8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ffc:	d007      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004ffe:	e01c      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005000:	4b50      	ldr	r3, [pc, #320]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	4a4f      	ldr	r2, [pc, #316]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800500a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800500c:	e01e      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800500e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005012:	3308      	adds	r3, #8
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f001 fb70 	bl	80066fc <RCCEx_PLL2_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005022:	e013      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	3328      	adds	r3, #40	@ 0x28
 800502a:	2100      	movs	r1, #0
 800502c:	4618      	mov	r0, r3
 800502e:	f001 fc17 	bl	8006860 <RCCEx_PLL3_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005038:	e008      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005040:	e004      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005042:	bf00      	nop
 8005044:	e002      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800504a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10b      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005054:	4b3b      	ldr	r3, [pc, #236]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005058:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800505c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005060:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005064:	4a37      	ldr	r2, [pc, #220]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005066:	430b      	orrs	r3, r1
 8005068:	6593      	str	r3, [r2, #88]	@ 0x58
 800506a:	e003      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005070:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005084:	2300      	movs	r3, #0
 8005086:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800508a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800508e:	460b      	mov	r3, r1
 8005090:	4313      	orrs	r3, r2
 8005092:	d05d      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005098:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800509c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050a0:	d03b      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80050a2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050a6:	d834      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050ac:	d037      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80050ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050b2:	d82e      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050b8:	d033      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80050ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050be:	d828      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050c4:	d01a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80050c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ca:	d822      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80050d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050d4:	d007      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80050d6:	e01c      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	4a19      	ldr	r2, [pc, #100]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050e4:	e01e      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ea:	3308      	adds	r3, #8
 80050ec:	2100      	movs	r1, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 fb04 	bl	80066fc <RCCEx_PLL2_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050fa:	e013      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005100:	3328      	adds	r3, #40	@ 0x28
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f001 fbab 	bl	8006860 <RCCEx_PLL3_Config>
 800510a:	4603      	mov	r3, r0
 800510c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005110:	e008      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005118:	e004      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800511a:	bf00      	nop
 800511c:	e002      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10d      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800512c:	4b05      	ldr	r3, [pc, #20]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800512e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005130:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005138:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800513c:	4a01      	ldr	r2, [pc, #4]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800513e:	430b      	orrs	r3, r1
 8005140:	6593      	str	r3, [r2, #88]	@ 0x58
 8005142:	e005      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005148:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800514c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800515c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005166:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800516a:	460b      	mov	r3, r1
 800516c:	4313      	orrs	r3, r2
 800516e:	d03a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005176:	2b30      	cmp	r3, #48	@ 0x30
 8005178:	d01f      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800517a:	2b30      	cmp	r3, #48	@ 0x30
 800517c:	d819      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800517e:	2b20      	cmp	r3, #32
 8005180:	d00c      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005182:	2b20      	cmp	r3, #32
 8005184:	d815      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d019      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800518a:	2b10      	cmp	r3, #16
 800518c:	d111      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800518e:	4baa      	ldr	r3, [pc, #680]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005192:	4aa9      	ldr	r2, [pc, #676]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005198:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800519a:	e011      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800519c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a0:	3308      	adds	r3, #8
 80051a2:	2102      	movs	r1, #2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 faa9 	bl	80066fc <RCCEx_PLL2_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80051b0:	e006      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051b8:	e002      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80051be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80051c8:	4b9b      	ldr	r3, [pc, #620]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d6:	4a98      	ldr	r2, [pc, #608]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051d8:	430b      	orrs	r3, r1
 80051da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051dc:	e003      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80051f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80051fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005200:	460b      	mov	r3, r1
 8005202:	4313      	orrs	r3, r2
 8005204:	d051      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005210:	d035      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005216:	d82e      	bhi.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005218:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800521c:	d031      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800521e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005222:	d828      	bhi.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005228:	d01a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800522a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800522e:	d822      	bhi.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005238:	d007      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800523a:	e01c      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800523c:	4b7e      	ldr	r3, [pc, #504]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	4a7d      	ldr	r2, [pc, #500]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005248:	e01c      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800524a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524e:	3308      	adds	r3, #8
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f001 fa52 	bl	80066fc <RCCEx_PLL2_Config>
 8005258:	4603      	mov	r3, r0
 800525a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800525e:	e011      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005264:	3328      	adds	r3, #40	@ 0x28
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f001 faf9 	bl	8006860 <RCCEx_PLL3_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005274:	e006      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800527c:	e002      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800527e:	bf00      	nop
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800528c:	4b6a      	ldr	r3, [pc, #424]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800528e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005290:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529a:	4a67      	ldr	r2, [pc, #412]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800529c:	430b      	orrs	r3, r1
 800529e:	6513      	str	r3, [r2, #80]	@ 0x50
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80052b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052ba:	2300      	movs	r3, #0
 80052bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052c0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4313      	orrs	r3, r2
 80052c8:	d053      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80052ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052d4:	d033      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80052d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052da:	d82c      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052e0:	d02f      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80052e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052e6:	d826      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052ec:	d02b      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80052ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052f2:	d820      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052f8:	d012      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80052fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052fe:	d81a      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d022      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005308:	d115      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530e:	3308      	adds	r3, #8
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f001 f9f2 	bl	80066fc <RCCEx_PLL2_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800531e:	e015      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005324:	3328      	adds	r3, #40	@ 0x28
 8005326:	2101      	movs	r1, #1
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fa99 	bl	8006860 <RCCEx_PLL3_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005334:	e00a      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800533c:	e006      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800533e:	bf00      	nop
 8005340:	e004      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005342:	bf00      	nop
 8005344:	e002      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800534a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005354:	4b38      	ldr	r3, [pc, #224]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005358:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800535c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005362:	4a35      	ldr	r2, [pc, #212]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005364:	430b      	orrs	r3, r1
 8005366:	6513      	str	r3, [r2, #80]	@ 0x50
 8005368:	e003      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800536e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800537e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005382:	2300      	movs	r3, #0
 8005384:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005388:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800538c:	460b      	mov	r3, r1
 800538e:	4313      	orrs	r3, r2
 8005390:	d058      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005396:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800539a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800539e:	d033      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80053a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053a4:	d82c      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053aa:	d02f      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80053ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b0:	d826      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053b6:	d02b      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80053b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053bc:	d820      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053c2:	d012      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80053c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053c8:	d81a      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d022      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80053ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053d2:	d115      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d8:	3308      	adds	r3, #8
 80053da:	2101      	movs	r1, #1
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 f98d 	bl	80066fc <RCCEx_PLL2_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053e8:	e015      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ee:	3328      	adds	r3, #40	@ 0x28
 80053f0:	2101      	movs	r1, #1
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 fa34 	bl	8006860 <RCCEx_PLL3_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053fe:	e00a      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005406:	e006      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005408:	bf00      	nop
 800540a:	e004      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800540c:	bf00      	nop
 800540e:	e002      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005410:	bf00      	nop
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005416:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10e      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800541e:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005422:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800542e:	4a02      	ldr	r2, [pc, #8]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005430:	430b      	orrs	r3, r1
 8005432:	6593      	str	r3, [r2, #88]	@ 0x58
 8005434:	e006      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005436:	bf00      	nop
 8005438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005440:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005450:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800545a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800545e:	460b      	mov	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	d037      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800546a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800546e:	d00e      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005474:	d816      	bhi.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d018      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800547a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800547e:	d111      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005480:	4bc4      	ldr	r3, [pc, #784]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	4ac3      	ldr	r2, [pc, #780]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800548c:	e00f      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800548e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005492:	3308      	adds	r3, #8
 8005494:	2101      	movs	r1, #1
 8005496:	4618      	mov	r0, r3
 8005498:	f001 f930 	bl	80066fc <RCCEx_PLL2_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054a2:	e004      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054aa:	e000      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80054ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054b6:	4bb7      	ldr	r3, [pc, #732]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c4:	4ab3      	ldr	r2, [pc, #716]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054c6:	430b      	orrs	r3, r1
 80054c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80054ca:	e003      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80054e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80054ee:	460b      	mov	r3, r1
 80054f0:	4313      	orrs	r3, r2
 80054f2:	d039      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80054f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d81c      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80054fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005541 	.word	0x08005541
 8005508:	08005515 	.word	0x08005515
 800550c:	08005523 	.word	0x08005523
 8005510:	08005541 	.word	0x08005541
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005514:	4b9f      	ldr	r3, [pc, #636]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	4a9e      	ldr	r2, [pc, #632]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800551a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800551e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005520:	e00f      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005526:	3308      	adds	r3, #8
 8005528:	2102      	movs	r1, #2
 800552a:	4618      	mov	r0, r3
 800552c:	f001 f8e6 	bl	80066fc <RCCEx_PLL2_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005536:	e004      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800553e:	e000      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005542:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800554a:	4b92      	ldr	r3, [pc, #584]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800554c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554e:	f023 0103 	bic.w	r1, r3, #3
 8005552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005558:	4a8e      	ldr	r2, [pc, #568]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800555a:	430b      	orrs	r3, r1
 800555c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800555e:	e003      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005564:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005574:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005578:	2300      	movs	r3, #0
 800557a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800557e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005582:	460b      	mov	r3, r1
 8005584:	4313      	orrs	r3, r2
 8005586:	f000 8099 	beq.w	80056bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800558a:	4b83      	ldr	r3, [pc, #524]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a82      	ldr	r2, [pc, #520]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005596:	f7fc ff3d 	bl	8002414 <HAL_GetTick>
 800559a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800559e:	e00b      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a0:	f7fc ff38 	bl	8002414 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b64      	cmp	r3, #100	@ 0x64
 80055ae:	d903      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80055b6:	e005      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055b8:	4b77      	ldr	r3, [pc, #476]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0ed      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80055c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d173      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055cc:	4b71      	ldr	r3, [pc, #452]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055d8:	4053      	eors	r3, r2
 80055da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d015      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ee:	4b69      	ldr	r3, [pc, #420]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f2:	4a68      	ldr	r2, [pc, #416]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055fa:	4b66      	ldr	r3, [pc, #408]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fe:	4a65      	ldr	r2, [pc, #404]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005604:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005606:	4a63      	ldr	r2, [pc, #396]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800560c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005612:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800561a:	d118      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fc fefa 	bl	8002414 <HAL_GetTick>
 8005620:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005624:	e00d      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fc fef5 	bl	8002414 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005630:	1ad2      	subs	r2, r2, r3
 8005632:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005636:	429a      	cmp	r2, r3
 8005638:	d903      	bls.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005640:	e005      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005642:	4b54      	ldr	r3, [pc, #336]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0eb      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800564e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005652:	2b00      	cmp	r3, #0
 8005654:	d129      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800565e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005666:	d10e      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005668:	4b4a      	ldr	r3, [pc, #296]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005674:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005678:	091a      	lsrs	r2, r3, #4
 800567a:	4b48      	ldr	r3, [pc, #288]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800567c:	4013      	ands	r3, r2
 800567e:	4a45      	ldr	r2, [pc, #276]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005680:	430b      	orrs	r3, r1
 8005682:	6113      	str	r3, [r2, #16]
 8005684:	e005      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005686:	4b43      	ldr	r3, [pc, #268]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	4a42      	ldr	r2, [pc, #264]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800568c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005690:	6113      	str	r3, [r2, #16]
 8005692:	4b40      	ldr	r3, [pc, #256]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005694:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800569e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a2:	4a3c      	ldr	r2, [pc, #240]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a8:	e008      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f002 0301 	and.w	r3, r2, #1
 80056c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056cc:	2300      	movs	r3, #0
 80056ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80056d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80056d6:	460b      	mov	r3, r1
 80056d8:	4313      	orrs	r3, r2
 80056da:	f000 808f 	beq.w	80057fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80056de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056e4:	2b28      	cmp	r3, #40	@ 0x28
 80056e6:	d871      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80056e8:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	080057d5 	.word	0x080057d5
 80056f4:	080057cd 	.word	0x080057cd
 80056f8:	080057cd 	.word	0x080057cd
 80056fc:	080057cd 	.word	0x080057cd
 8005700:	080057cd 	.word	0x080057cd
 8005704:	080057cd 	.word	0x080057cd
 8005708:	080057cd 	.word	0x080057cd
 800570c:	080057cd 	.word	0x080057cd
 8005710:	080057a1 	.word	0x080057a1
 8005714:	080057cd 	.word	0x080057cd
 8005718:	080057cd 	.word	0x080057cd
 800571c:	080057cd 	.word	0x080057cd
 8005720:	080057cd 	.word	0x080057cd
 8005724:	080057cd 	.word	0x080057cd
 8005728:	080057cd 	.word	0x080057cd
 800572c:	080057cd 	.word	0x080057cd
 8005730:	080057b7 	.word	0x080057b7
 8005734:	080057cd 	.word	0x080057cd
 8005738:	080057cd 	.word	0x080057cd
 800573c:	080057cd 	.word	0x080057cd
 8005740:	080057cd 	.word	0x080057cd
 8005744:	080057cd 	.word	0x080057cd
 8005748:	080057cd 	.word	0x080057cd
 800574c:	080057cd 	.word	0x080057cd
 8005750:	080057d5 	.word	0x080057d5
 8005754:	080057cd 	.word	0x080057cd
 8005758:	080057cd 	.word	0x080057cd
 800575c:	080057cd 	.word	0x080057cd
 8005760:	080057cd 	.word	0x080057cd
 8005764:	080057cd 	.word	0x080057cd
 8005768:	080057cd 	.word	0x080057cd
 800576c:	080057cd 	.word	0x080057cd
 8005770:	080057d5 	.word	0x080057d5
 8005774:	080057cd 	.word	0x080057cd
 8005778:	080057cd 	.word	0x080057cd
 800577c:	080057cd 	.word	0x080057cd
 8005780:	080057cd 	.word	0x080057cd
 8005784:	080057cd 	.word	0x080057cd
 8005788:	080057cd 	.word	0x080057cd
 800578c:	080057cd 	.word	0x080057cd
 8005790:	080057d5 	.word	0x080057d5
 8005794:	58024400 	.word	0x58024400
 8005798:	58024800 	.word	0x58024800
 800579c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a4:	3308      	adds	r3, #8
 80057a6:	2101      	movs	r1, #1
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 ffa7 	bl	80066fc <RCCEx_PLL2_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057b4:	e00f      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ba:	3328      	adds	r3, #40	@ 0x28
 80057bc:	2101      	movs	r1, #1
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 f84e 	bl	8006860 <RCCEx_PLL3_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057ca:	e004      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057d2:	e000      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80057d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80057de:	4bbf      	ldr	r3, [pc, #764]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80057e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057ec:	4abb      	ldr	r2, [pc, #748]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057ee:	430b      	orrs	r3, r1
 80057f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80057f2:	e003      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f002 0302 	and.w	r3, r2, #2
 8005808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800580c:	2300      	movs	r3, #0
 800580e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005812:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d041      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005822:	2b05      	cmp	r3, #5
 8005824:	d824      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005826:	a201      	add	r2, pc, #4	@ (adr r2, 800582c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	08005879 	.word	0x08005879
 8005830:	08005845 	.word	0x08005845
 8005834:	0800585b 	.word	0x0800585b
 8005838:	08005879 	.word	0x08005879
 800583c:	08005879 	.word	0x08005879
 8005840:	08005879 	.word	0x08005879
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005848:	3308      	adds	r3, #8
 800584a:	2101      	movs	r1, #1
 800584c:	4618      	mov	r0, r3
 800584e:	f000 ff55 	bl	80066fc <RCCEx_PLL2_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005858:	e00f      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800585a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585e:	3328      	adds	r3, #40	@ 0x28
 8005860:	2101      	movs	r1, #1
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fffc 	bl	8006860 <RCCEx_PLL3_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800586e:	e004      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005876:	e000      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800587a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005882:	4b96      	ldr	r3, [pc, #600]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005886:	f023 0107 	bic.w	r1, r3, #7
 800588a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005890:	4a92      	ldr	r2, [pc, #584]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005892:	430b      	orrs	r3, r1
 8005894:	6553      	str	r3, [r2, #84]	@ 0x54
 8005896:	e003      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800589c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f002 0304 	and.w	r3, r2, #4
 80058ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058b0:	2300      	movs	r3, #0
 80058b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058ba:	460b      	mov	r3, r1
 80058bc:	4313      	orrs	r3, r2
 80058be:	d044      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d825      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80058cc:	a201      	add	r2, pc, #4	@ (adr r2, 80058d4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	08005921 	.word	0x08005921
 80058d8:	080058ed 	.word	0x080058ed
 80058dc:	08005903 	.word	0x08005903
 80058e0:	08005921 	.word	0x08005921
 80058e4:	08005921 	.word	0x08005921
 80058e8:	08005921 	.word	0x08005921
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f0:	3308      	adds	r3, #8
 80058f2:	2101      	movs	r1, #1
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 ff01 	bl	80066fc <RCCEx_PLL2_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005900:	e00f      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005906:	3328      	adds	r3, #40	@ 0x28
 8005908:	2101      	movs	r1, #1
 800590a:	4618      	mov	r0, r3
 800590c:	f000 ffa8 	bl	8006860 <RCCEx_PLL3_Config>
 8005910:	4603      	mov	r3, r0
 8005912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005916:	e004      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800591e:	e000      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005922:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800592a:	4b6c      	ldr	r3, [pc, #432]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800592c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592e:	f023 0107 	bic.w	r1, r3, #7
 8005932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593a:	4a68      	ldr	r2, [pc, #416]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800593c:	430b      	orrs	r3, r1
 800593e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005940:	e003      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005946:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800594a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f002 0320 	and.w	r3, r2, #32
 8005956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005960:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005964:	460b      	mov	r3, r1
 8005966:	4313      	orrs	r3, r2
 8005968:	d055      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005976:	d033      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800597c:	d82c      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005982:	d02f      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005988:	d826      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800598a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800598e:	d02b      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005990:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005994:	d820      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800599a:	d012      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800599c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a0:	d81a      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d022      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80059a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059aa:	d115      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b0:	3308      	adds	r3, #8
 80059b2:	2100      	movs	r1, #0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fea1 	bl	80066fc <RCCEx_PLL2_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059c0:	e015      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c6:	3328      	adds	r3, #40	@ 0x28
 80059c8:	2102      	movs	r1, #2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 ff48 	bl	8006860 <RCCEx_PLL3_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059d6:	e00a      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059de:	e006      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059e0:	bf00      	nop
 80059e2:	e004      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059e4:	bf00      	nop
 80059e6:	e002      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059e8:	bf00      	nop
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059f6:	4b39      	ldr	r3, [pc, #228]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a06:	4a35      	ldr	r2, [pc, #212]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a0c:	e003      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a2c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	d058      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a42:	d033      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005a44:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a48:	d82c      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a4e:	d02f      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a54:	d826      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a5a:	d02b      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005a5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a60:	d820      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a66:	d012      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a6c:	d81a      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d022      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a76:	d115      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fe3b 	bl	80066fc <RCCEx_PLL2_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a8c:	e015      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a92:	3328      	adds	r3, #40	@ 0x28
 8005a94:	2102      	movs	r1, #2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fee2 	bl	8006860 <RCCEx_PLL3_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005aa2:	e00a      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005aaa:	e006      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005aac:	bf00      	nop
 8005aae:	e004      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005ab0:	bf00      	nop
 8005ab2:	e002      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005ab4:	bf00      	nop
 8005ab6:	e000      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10e      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ac2:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ad2:	4a02      	ldr	r2, [pc, #8]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ad8:	e006      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005ada:	bf00      	nop
 8005adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ae4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005af4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005af8:	2300      	movs	r3, #0
 8005afa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005afe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b02:	460b      	mov	r3, r1
 8005b04:	4313      	orrs	r3, r2
 8005b06:	d055      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b10:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b14:	d033      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005b16:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b1a:	d82c      	bhi.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b20:	d02f      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b26:	d826      	bhi.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b28:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b2c:	d02b      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005b2e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b32:	d820      	bhi.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b38:	d012      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b3e:	d81a      	bhi.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d022      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b48:	d115      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4e:	3308      	adds	r3, #8
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fdd2 	bl	80066fc <RCCEx_PLL2_Config>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b5e:	e015      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b64:	3328      	adds	r3, #40	@ 0x28
 8005b66:	2102      	movs	r1, #2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fe79 	bl	8006860 <RCCEx_PLL3_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b74:	e00a      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b7c:	e006      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b7e:	bf00      	nop
 8005b80:	e004      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b82:	bf00      	nop
 8005b84:	e002      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b86:	bf00      	nop
 8005b88:	e000      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b94:	4ba0      	ldr	r3, [pc, #640]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b98:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ba4:	4a9c      	ldr	r2, [pc, #624]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005baa:	e003      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f002 0308 	and.w	r3, r2, #8
 8005bc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	d01e      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be6:	3328      	adds	r3, #40	@ 0x28
 8005be8:	2102      	movs	r1, #2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fe38 	bl	8006860 <RCCEx_PLL3_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005bfc:	4b86      	ldr	r3, [pc, #536]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c0c:	4a82      	ldr	r2, [pc, #520]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f002 0310 	and.w	r3, r2, #16
 8005c1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c22:	2300      	movs	r3, #0
 8005c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c28:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	d01e      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c3e:	d10c      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c44:	3328      	adds	r3, #40	@ 0x28
 8005c46:	2102      	movs	r1, #2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fe09 	bl	8006860 <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c5a:	4b6f      	ldr	r3, [pc, #444]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c6a:	4a6b      	ldr	r2, [pc, #428]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c7e:	2300      	movs	r3, #0
 8005c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c82:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005c86:	460b      	mov	r3, r1
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	d03e      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c98:	d022      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005c9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c9e:	d81b      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca8:	d00b      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005caa:	e015      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fd21 	bl	80066fc <RCCEx_PLL2_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cc0:	e00f      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc6:	3328      	adds	r3, #40	@ 0x28
 8005cc8:	2102      	movs	r1, #2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fdc8 	bl	8006860 <RCCEx_PLL3_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cd6:	e004      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cde:	e000      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cea:	4b4b      	ldr	r3, [pc, #300]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cfa:	4a47      	ldr	r2, [pc, #284]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d00:	e003      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d16:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d18:	2300      	movs	r3, #0
 8005d1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d20:	460b      	mov	r3, r1
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d03b      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d32:	d01f      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005d34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d38:	d818      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d3e:	d003      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005d40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d44:	d007      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005d46:	e011      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d48:	4b33      	ldr	r3, [pc, #204]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	4a32      	ldr	r2, [pc, #200]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d54:	e00f      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	3328      	adds	r3, #40	@ 0x28
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fd7e 	bl	8006860 <RCCEx_PLL3_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d6a:	e004      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d72:	e000      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10b      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d7e:	4b26      	ldr	r3, [pc, #152]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8e:	4a22      	ldr	r2, [pc, #136]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d90:	430b      	orrs	r3, r1
 8005d92:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d94:	e003      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005daa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dac:	2300      	movs	r3, #0
 8005dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005db0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005db4:	460b      	mov	r3, r1
 8005db6:	4313      	orrs	r3, r2
 8005db8:	d034      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc8:	d007      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005dca:	e011      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dcc:	4b12      	ldr	r3, [pc, #72]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	4a11      	ldr	r2, [pc, #68]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dd8:	e00e      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dde:	3308      	adds	r3, #8
 8005de0:	2102      	movs	r1, #2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fc8a 	bl	80066fc <RCCEx_PLL2_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dee:	e003      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10d      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e00:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0e:	4a02      	ldr	r2, [pc, #8]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e10:	430b      	orrs	r3, r1
 8005e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e14:	e006      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005e16:	bf00      	nop
 8005e18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e32:	2300      	movs	r3, #0
 8005e34:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e36:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	d00c      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e44:	3328      	adds	r3, #40	@ 0x28
 8005e46:	2102      	movs	r1, #2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fd09 	bl	8006860 <RCCEx_PLL3_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e68:	2300      	movs	r3, #0
 8005e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e6c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005e70:	460b      	mov	r3, r1
 8005e72:	4313      	orrs	r3, r2
 8005e74:	d036      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e80:	d018      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e86:	d811      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e8c:	d014      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e92:	d80b      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e9c:	d106      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9e:	4bb7      	ldr	r3, [pc, #732]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	4ab6      	ldr	r2, [pc, #728]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005eaa:	e008      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005eb2:	e004      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005eb4:	bf00      	nop
 8005eb6:	e002      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005eb8:	bf00      	nop
 8005eba:	e000      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ec6:	4bad      	ldr	r3, [pc, #692]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ed4:	4aa9      	ldr	r2, [pc, #676]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005eda:	e003      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ef0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ef6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005efa:	460b      	mov	r3, r1
 8005efc:	4313      	orrs	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f00:	4b9e      	ldr	r3, [pc, #632]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0e:	4a9b      	ldr	r2, [pc, #620]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f10:	430b      	orrs	r3, r1
 8005f12:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f22:	2300      	movs	r3, #0
 8005f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f26:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f30:	4b92      	ldr	r3, [pc, #584]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f34:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f3e:	4a8f      	ldr	r2, [pc, #572]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f52:	2300      	movs	r3, #0
 8005f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	d00e      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f60:	4b86      	ldr	r3, [pc, #536]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	4a85      	ldr	r2, [pc, #532]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f6a:	6113      	str	r3, [r2, #16]
 8005f6c:	4b83      	ldr	r3, [pc, #524]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f6e:	6919      	ldr	r1, [r3, #16]
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f78:	4a80      	ldr	r2, [pc, #512]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f94:	460b      	mov	r3, r1
 8005f96:	4313      	orrs	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f9a:	4b78      	ldr	r3, [pc, #480]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa8:	4a74      	ldr	r2, [pc, #464]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005faa:	430b      	orrs	r3, r1
 8005fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005fba:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fca:	4b6c      	ldr	r3, [pc, #432]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fda:	4a68      	ldr	r2, [pc, #416]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ff2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d011      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006000:	3308      	adds	r3, #8
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fb79 	bl	80066fc <RCCEx_PLL2_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800601c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	2100      	movs	r1, #0
 800602a:	6239      	str	r1, [r7, #32]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
 8006032:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006036:	460b      	mov	r3, r1
 8006038:	4313      	orrs	r3, r2
 800603a:	d011      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	3308      	adds	r3, #8
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fb59 	bl	80066fc <RCCEx_PLL2_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800605c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	2100      	movs	r1, #0
 800606a:	61b9      	str	r1, [r7, #24]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006076:	460b      	mov	r3, r1
 8006078:	4313      	orrs	r3, r2
 800607a:	d011      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006080:	3308      	adds	r3, #8
 8006082:	2102      	movs	r1, #2
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fb39 	bl	80066fc <RCCEx_PLL2_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800609c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	2100      	movs	r1, #0
 80060aa:	6139      	str	r1, [r7, #16]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060b6:	460b      	mov	r3, r1
 80060b8:	4313      	orrs	r3, r2
 80060ba:	d011      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c0:	3328      	adds	r3, #40	@ 0x28
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fbcb 	bl	8006860 <RCCEx_PLL3_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80060d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80060e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	2100      	movs	r1, #0
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060f6:	460b      	mov	r3, r1
 80060f8:	4313      	orrs	r3, r2
 80060fa:	d011      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006100:	3328      	adds	r3, #40	@ 0x28
 8006102:	2101      	movs	r1, #1
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fbab 	bl	8006860 <RCCEx_PLL3_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006110:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800611c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	2100      	movs	r1, #0
 800612a:	6039      	str	r1, [r7, #0]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006136:	460b      	mov	r3, r1
 8006138:	4313      	orrs	r3, r2
 800613a:	d011      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	3328      	adds	r3, #40	@ 0x28
 8006142:	2102      	movs	r1, #2
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fb8b 	bl	8006860 <RCCEx_PLL3_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800615c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006160:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	e000      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
}
 800616e:	4618      	mov	r0, r3
 8006170:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006174:	46bd      	mov	sp, r7
 8006176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800617a:	bf00      	nop
 800617c:	58024400 	.word	0x58024400

08006180 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006184:	f7fe fe00 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	091b      	lsrs	r3, r3, #4
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	4904      	ldr	r1, [pc, #16]	@ (80061a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	58024400 	.word	0x58024400
 80061a8:	0800d0c0 	.word	0x0800d0c0

080061ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b089      	sub	sp, #36	@ 0x24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061b4:	4ba1      	ldr	r3, [pc, #644]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80061be:	4b9f      	ldr	r3, [pc, #636]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c2:	0b1b      	lsrs	r3, r3, #12
 80061c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061ca:	4b9c      	ldr	r3, [pc, #624]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80061d6:	4b99      	ldr	r3, [pc, #612]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061da:	08db      	lsrs	r3, r3, #3
 80061dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	fb02 f303 	mul.w	r3, r2, r3
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8111 	beq.w	800641c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	f000 8083 	beq.w	8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b02      	cmp	r3, #2
 8006206:	f200 80a1 	bhi.w	800634c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d056      	beq.n	80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006216:	e099      	b.n	800634c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006218:	4b88      	ldr	r3, [pc, #544]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d02d      	beq.n	8006280 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006224:	4b85      	ldr	r3, [pc, #532]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	08db      	lsrs	r3, r3, #3
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	4a84      	ldr	r2, [pc, #528]	@ (8006440 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
 8006234:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624e:	4b7b      	ldr	r3, [pc, #492]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006262:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800627e:	e087      	b.n	8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800628e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006292:	4b6a      	ldr	r3, [pc, #424]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062c2:	e065      	b.n	8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800644c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d6:	4b59      	ldr	r3, [pc, #356]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006306:	e043      	b.n	8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631a:	4b48      	ldr	r3, [pc, #288]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632a:	ed97 6a03 	vldr	s12, [r7, #12]
 800632e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800633e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800634a:	e021      	b.n	8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006356:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800644c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800635a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635e:	4b37      	ldr	r3, [pc, #220]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006372:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800638e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006390:	4b2a      	ldr	r3, [pc, #168]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006394:	0a5b      	lsrs	r3, r3, #9
 8006396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b6:	ee17 2a90 	vmov	r2, s15
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80063be:	4b1f      	ldr	r3, [pc, #124]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c2:	0c1b      	lsrs	r3, r3, #16
 80063c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80063dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e4:	ee17 2a90 	vmov	r2, s15
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80063ec:	4b13      	ldr	r3, [pc, #76]	@ (800643c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	0e1b      	lsrs	r3, r3, #24
 80063f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006406:	edd7 6a07 	vldr	s13, [r7, #28]
 800640a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800640e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006412:	ee17 2a90 	vmov	r2, s15
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800641a:	e008      	b.n	800642e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	609a      	str	r2, [r3, #8]
}
 800642e:	bf00      	nop
 8006430:	3724      	adds	r7, #36	@ 0x24
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	58024400 	.word	0x58024400
 8006440:	03d09000 	.word	0x03d09000
 8006444:	46000000 	.word	0x46000000
 8006448:	4c742400 	.word	0x4c742400
 800644c:	4a742400 	.word	0x4a742400
 8006450:	4bbebc20 	.word	0x4bbebc20

08006454 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006454:	b480      	push	{r7}
 8006456:	b089      	sub	sp, #36	@ 0x24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800645c:	4ba1      	ldr	r3, [pc, #644]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006466:	4b9f      	ldr	r3, [pc, #636]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	0d1b      	lsrs	r3, r3, #20
 800646c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006470:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006472:	4b9c      	ldr	r3, [pc, #624]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800647e:	4b99      	ldr	r3, [pc, #612]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006482:	08db      	lsrs	r3, r3, #3
 8006484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006496:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8111 	beq.w	80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	f000 8083 	beq.w	80065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	f200 80a1 	bhi.w	80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d056      	beq.n	800656c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80064be:	e099      	b.n	80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064c0:	4b88      	ldr	r3, [pc, #544]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d02d      	beq.n	8006528 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064cc:	4b85      	ldr	r3, [pc, #532]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	08db      	lsrs	r3, r3, #3
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	4a84      	ldr	r2, [pc, #528]	@ (80066e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
 80064dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f6:	4b7b      	ldr	r3, [pc, #492]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006506:	ed97 6a03 	vldr	s12, [r7, #12]
 800650a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80066ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800650e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800651a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006522:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006526:	e087      	b.n	8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006532:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800653a:	4b6a      	ldr	r3, [pc, #424]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800654a:	ed97 6a03 	vldr	s12, [r7, #12]
 800654e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80066ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800655a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800655e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800656a:	e065      	b.n	8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006576:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800657a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657e:	4b59      	ldr	r3, [pc, #356]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006592:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80066ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ae:	e043      	b.n	8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80066f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80065be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c2:	4b48      	ldr	r3, [pc, #288]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80066ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065f2:	e021      	b.n	8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006606:	4b37      	ldr	r3, [pc, #220]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006616:	ed97 6a03 	vldr	s12, [r7, #12]
 800661a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80066ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800661e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800662a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006636:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006638:	4b2a      	ldr	r3, [pc, #168]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	0a5b      	lsrs	r3, r3, #9
 800663e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800664e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006652:	edd7 6a07 	vldr	s13, [r7, #28]
 8006656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800665a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800665e:	ee17 2a90 	vmov	r2, s15
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006666:	4b1f      	ldr	r3, [pc, #124]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	0c1b      	lsrs	r3, r3, #16
 800666c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006670:	ee07 3a90 	vmov	s15, r3
 8006674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800667c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006680:	edd7 6a07 	vldr	s13, [r7, #28]
 8006684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800668c:	ee17 2a90 	vmov	r2, s15
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006694:	4b13      	ldr	r3, [pc, #76]	@ (80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	0e1b      	lsrs	r3, r3, #24
 800669a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80066b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ba:	ee17 2a90 	vmov	r2, s15
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066c2:	e008      	b.n	80066d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
}
 80066d6:	bf00      	nop
 80066d8:	3724      	adds	r7, #36	@ 0x24
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	58024400 	.word	0x58024400
 80066e8:	03d09000 	.word	0x03d09000
 80066ec:	46000000 	.word	0x46000000
 80066f0:	4c742400 	.word	0x4c742400
 80066f4:	4a742400 	.word	0x4a742400
 80066f8:	4bbebc20 	.word	0x4bbebc20

080066fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800670a:	4b53      	ldr	r3, [pc, #332]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 800670c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b03      	cmp	r3, #3
 8006714:	d101      	bne.n	800671a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e099      	b.n	800684e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800671a:	4b4f      	ldr	r3, [pc, #316]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a4e      	ldr	r2, [pc, #312]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006720:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006726:	f7fb fe75 	bl	8002414 <HAL_GetTick>
 800672a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800672c:	e008      	b.n	8006740 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800672e:	f7fb fe71 	bl	8002414 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e086      	b.n	800684e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006740:	4b45      	ldr	r3, [pc, #276]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f0      	bne.n	800672e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800674c:	4b42      	ldr	r3, [pc, #264]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 800674e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006750:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	031b      	lsls	r3, r3, #12
 800675a:	493f      	ldr	r1, [pc, #252]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 800675c:	4313      	orrs	r3, r2
 800675e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	3b01      	subs	r3, #1
 8006766:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	3b01      	subs	r3, #1
 8006770:	025b      	lsls	r3, r3, #9
 8006772:	b29b      	uxth	r3, r3
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	3b01      	subs	r3, #1
 800677c:	041b      	lsls	r3, r3, #16
 800677e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	3b01      	subs	r3, #1
 800678a:	061b      	lsls	r3, r3, #24
 800678c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006790:	4931      	ldr	r1, [pc, #196]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006792:	4313      	orrs	r3, r2
 8006794:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006796:	4b30      	ldr	r3, [pc, #192]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	492d      	ldr	r1, [pc, #180]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80067a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ac:	f023 0220 	bic.w	r2, r3, #32
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	4928      	ldr	r1, [pc, #160]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80067ba:	4b27      	ldr	r3, [pc, #156]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	4a26      	ldr	r2, [pc, #152]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067c0:	f023 0310 	bic.w	r3, r3, #16
 80067c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80067c6:	4b24      	ldr	r3, [pc, #144]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067ca:	4b24      	ldr	r3, [pc, #144]	@ (800685c <RCCEx_PLL2_Config+0x160>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	69d2      	ldr	r2, [r2, #28]
 80067d2:	00d2      	lsls	r2, r2, #3
 80067d4:	4920      	ldr	r1, [pc, #128]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80067da:	4b1f      	ldr	r3, [pc, #124]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067de:	4a1e      	ldr	r2, [pc, #120]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067e0:	f043 0310 	orr.w	r3, r3, #16
 80067e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80067ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f0:	4a19      	ldr	r2, [pc, #100]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 80067f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067f8:	e00f      	b.n	800681a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d106      	bne.n	800680e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006800:	4b15      	ldr	r3, [pc, #84]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	4a14      	ldr	r2, [pc, #80]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800680a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800680c:	e005      	b.n	800681a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800680e:	4b12      	ldr	r3, [pc, #72]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006812:	4a11      	ldr	r2, [pc, #68]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006814:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006818:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800681a:	4b0f      	ldr	r3, [pc, #60]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a0e      	ldr	r2, [pc, #56]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006820:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006826:	f7fb fdf5 	bl	8002414 <HAL_GetTick>
 800682a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800682c:	e008      	b.n	8006840 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800682e:	f7fb fdf1 	bl	8002414 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e006      	b.n	800684e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006840:	4b05      	ldr	r3, [pc, #20]	@ (8006858 <RCCEx_PLL2_Config+0x15c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0f0      	beq.n	800682e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	58024400 	.word	0x58024400
 800685c:	ffff0007 	.word	0xffff0007

08006860 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800686e:	4b53      	ldr	r3, [pc, #332]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b03      	cmp	r3, #3
 8006878:	d101      	bne.n	800687e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e099      	b.n	80069b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800687e:	4b4f      	ldr	r3, [pc, #316]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a4e      	ldr	r2, [pc, #312]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688a:	f7fb fdc3 	bl	8002414 <HAL_GetTick>
 800688e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006890:	e008      	b.n	80068a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006892:	f7fb fdbf 	bl	8002414 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d901      	bls.n	80068a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e086      	b.n	80069b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068a4:	4b45      	ldr	r3, [pc, #276]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1f0      	bne.n	8006892 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80068b0:	4b42      	ldr	r3, [pc, #264]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 80068b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	051b      	lsls	r3, r3, #20
 80068be:	493f      	ldr	r1, [pc, #252]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	025b      	lsls	r3, r3, #9
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	3b01      	subs	r3, #1
 80068e0:	041b      	lsls	r3, r3, #16
 80068e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	061b      	lsls	r3, r3, #24
 80068f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80068f4:	4931      	ldr	r1, [pc, #196]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80068fa:	4b30      	ldr	r3, [pc, #192]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	492d      	ldr	r1, [pc, #180]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006908:	4313      	orrs	r3, r2
 800690a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800690c:	4b2b      	ldr	r3, [pc, #172]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	4928      	ldr	r1, [pc, #160]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 800691a:	4313      	orrs	r3, r2
 800691c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800691e:	4b27      	ldr	r3, [pc, #156]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006922:	4a26      	ldr	r2, [pc, #152]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006928:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800692a:	4b24      	ldr	r3, [pc, #144]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 800692c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800692e:	4b24      	ldr	r3, [pc, #144]	@ (80069c0 <RCCEx_PLL3_Config+0x160>)
 8006930:	4013      	ands	r3, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	69d2      	ldr	r2, [r2, #28]
 8006936:	00d2      	lsls	r2, r2, #3
 8006938:	4920      	ldr	r1, [pc, #128]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 800693a:	4313      	orrs	r3, r2
 800693c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800693e:	4b1f      	ldr	r3, [pc, #124]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006942:	4a1e      	ldr	r2, [pc, #120]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006948:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006950:	4b1a      	ldr	r3, [pc, #104]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006954:	4a19      	ldr	r2, [pc, #100]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006956:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800695a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800695c:	e00f      	b.n	800697e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d106      	bne.n	8006972 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006964:	4b15      	ldr	r3, [pc, #84]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	4a14      	ldr	r2, [pc, #80]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 800696a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800696e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006970:	e005      	b.n	800697e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006972:	4b12      	ldr	r3, [pc, #72]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006976:	4a11      	ldr	r2, [pc, #68]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006978:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800697c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800697e:	4b0f      	ldr	r3, [pc, #60]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a0e      	ldr	r2, [pc, #56]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 8006984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800698a:	f7fb fd43 	bl	8002414 <HAL_GetTick>
 800698e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006990:	e008      	b.n	80069a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006992:	f7fb fd3f 	bl	8002414 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e006      	b.n	80069b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069a4:	4b05      	ldr	r3, [pc, #20]	@ (80069bc <RCCEx_PLL3_Config+0x15c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	58024400 	.word	0x58024400
 80069c0:	ffff0007 	.word	0xffff0007

080069c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e049      	b.n	8006a6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fa fea8 	bl	8001740 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4619      	mov	r1, r3
 8006a02:	4610      	mov	r0, r2
 8006a04:	f000 fa66 	bl	8006ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <HAL_TIM_PWM_Start+0x24>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	bf14      	ite	ne
 8006a90:	2301      	movne	r3, #1
 8006a92:	2300      	moveq	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	e03c      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d109      	bne.n	8006ab2 <HAL_TIM_PWM_Start+0x3e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	bf14      	ite	ne
 8006aaa:	2301      	movne	r3, #1
 8006aac:	2300      	moveq	r3, #0
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	e02f      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d109      	bne.n	8006acc <HAL_TIM_PWM_Start+0x58>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	e022      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b0c      	cmp	r3, #12
 8006ad0:	d109      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0x72>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	bf14      	ite	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	2300      	moveq	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	e015      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d109      	bne.n	8006b00 <HAL_TIM_PWM_Start+0x8c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	bf14      	ite	ne
 8006af8:	2301      	movne	r3, #1
 8006afa:	2300      	moveq	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	e008      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	bf14      	ite	ne
 8006b0c:	2301      	movne	r3, #1
 8006b0e:	2300      	moveq	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e0ab      	b.n	8006c72 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Start+0xb6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b28:	e023      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_PWM_Start+0xc6>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b38:	e01b      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_PWM_Start+0xd6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b48:	e013      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_PWM_Start+0xe6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b58:	e00b      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_PWM_Start+0xf6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b68:	e003      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2201      	movs	r2, #1
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fd2c 	bl	80075d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a3d      	ldr	r2, [pc, #244]	@ (8006c7c <HAL_TIM_PWM_Start+0x208>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <HAL_TIM_PWM_Start+0x13e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8006c80 <HAL_TIM_PWM_Start+0x20c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_TIM_PWM_Start+0x13e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a3a      	ldr	r2, [pc, #232]	@ (8006c84 <HAL_TIM_PWM_Start+0x210>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_TIM_PWM_Start+0x13e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a39      	ldr	r2, [pc, #228]	@ (8006c88 <HAL_TIM_PWM_Start+0x214>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_TIM_PWM_Start+0x13e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a37      	ldr	r2, [pc, #220]	@ (8006c8c <HAL_TIM_PWM_Start+0x218>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d101      	bne.n	8006bb6 <HAL_TIM_PWM_Start+0x142>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e000      	b.n	8006bb8 <HAL_TIM_PWM_Start+0x144>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c7c <HAL_TIM_PWM_Start+0x208>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02c      	beq.n	8006c30 <HAL_TIM_PWM_Start+0x1bc>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bde:	d027      	beq.n	8006c30 <HAL_TIM_PWM_Start+0x1bc>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a2a      	ldr	r2, [pc, #168]	@ (8006c90 <HAL_TIM_PWM_Start+0x21c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d022      	beq.n	8006c30 <HAL_TIM_PWM_Start+0x1bc>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a29      	ldr	r2, [pc, #164]	@ (8006c94 <HAL_TIM_PWM_Start+0x220>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d01d      	beq.n	8006c30 <HAL_TIM_PWM_Start+0x1bc>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a27      	ldr	r2, [pc, #156]	@ (8006c98 <HAL_TIM_PWM_Start+0x224>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d018      	beq.n	8006c30 <HAL_TIM_PWM_Start+0x1bc>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1f      	ldr	r2, [pc, #124]	@ (8006c80 <HAL_TIM_PWM_Start+0x20c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d013      	beq.n	8006c30 <HAL_TIM_PWM_Start+0x1bc>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a23      	ldr	r2, [pc, #140]	@ (8006c9c <HAL_TIM_PWM_Start+0x228>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00e      	beq.n	8006c30 <HAL_TIM_PWM_Start+0x1bc>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1b      	ldr	r2, [pc, #108]	@ (8006c84 <HAL_TIM_PWM_Start+0x210>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d009      	beq.n	8006c30 <HAL_TIM_PWM_Start+0x1bc>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1f      	ldr	r2, [pc, #124]	@ (8006ca0 <HAL_TIM_PWM_Start+0x22c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_TIM_PWM_Start+0x1bc>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca4 <HAL_TIM_PWM_Start+0x230>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d115      	bne.n	8006c5c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca8 <HAL_TIM_PWM_Start+0x234>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b06      	cmp	r3, #6
 8006c40:	d015      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x1fa>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c48:	d011      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 0201 	orr.w	r2, r2, #1
 8006c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5a:	e008      	b.n	8006c6e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	e000      	b.n	8006c70 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	40010000 	.word	0x40010000
 8006c80:	40010400 	.word	0x40010400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	40001800 	.word	0x40001800
 8006ca0:	4000e000 	.word	0x4000e000
 8006ca4:	4000e400 	.word	0x4000e400
 8006ca8:	00010007 	.word	0x00010007

08006cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d101      	bne.n	8006cca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	e0ff      	b.n	8006eca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b14      	cmp	r3, #20
 8006cd6:	f200 80f0 	bhi.w	8006eba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cda:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006d35 	.word	0x08006d35
 8006ce4:	08006ebb 	.word	0x08006ebb
 8006ce8:	08006ebb 	.word	0x08006ebb
 8006cec:	08006ebb 	.word	0x08006ebb
 8006cf0:	08006d75 	.word	0x08006d75
 8006cf4:	08006ebb 	.word	0x08006ebb
 8006cf8:	08006ebb 	.word	0x08006ebb
 8006cfc:	08006ebb 	.word	0x08006ebb
 8006d00:	08006db7 	.word	0x08006db7
 8006d04:	08006ebb 	.word	0x08006ebb
 8006d08:	08006ebb 	.word	0x08006ebb
 8006d0c:	08006ebb 	.word	0x08006ebb
 8006d10:	08006df7 	.word	0x08006df7
 8006d14:	08006ebb 	.word	0x08006ebb
 8006d18:	08006ebb 	.word	0x08006ebb
 8006d1c:	08006ebb 	.word	0x08006ebb
 8006d20:	08006e39 	.word	0x08006e39
 8006d24:	08006ebb 	.word	0x08006ebb
 8006d28:	08006ebb 	.word	0x08006ebb
 8006d2c:	08006ebb 	.word	0x08006ebb
 8006d30:	08006e79 	.word	0x08006e79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f976 	bl	800702c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0208 	orr.w	r2, r2, #8
 8006d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6999      	ldr	r1, [r3, #24]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	619a      	str	r2, [r3, #24]
      break;
 8006d72:	e0a5      	b.n	8006ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f9e6 	bl	800714c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6999      	ldr	r1, [r3, #24]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	021a      	lsls	r2, r3, #8
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	619a      	str	r2, [r3, #24]
      break;
 8006db4:	e084      	b.n	8006ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fa4f 	bl	8007260 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0208 	orr.w	r2, r2, #8
 8006dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0204 	bic.w	r2, r2, #4
 8006de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69d9      	ldr	r1, [r3, #28]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	61da      	str	r2, [r3, #28]
      break;
 8006df4:	e064      	b.n	8006ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fab7 	bl	8007370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69d9      	ldr	r1, [r3, #28]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	021a      	lsls	r2, r3, #8
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	61da      	str	r2, [r3, #28]
      break;
 8006e36:	e043      	b.n	8006ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fb00 	bl	8007444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0208 	orr.w	r2, r2, #8
 8006e52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0204 	bic.w	r2, r2, #4
 8006e62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	691a      	ldr	r2, [r3, #16]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e76:	e023      	b.n	8006ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fb44 	bl	800750c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ea2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	021a      	lsls	r2, r3, #8
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006eb8:	e002      	b.n	8006ec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop

08006ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a47      	ldr	r2, [pc, #284]	@ (8007004 <TIM_Base_SetConfig+0x130>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d013      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef2:	d00f      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a44      	ldr	r2, [pc, #272]	@ (8007008 <TIM_Base_SetConfig+0x134>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00b      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a43      	ldr	r2, [pc, #268]	@ (800700c <TIM_Base_SetConfig+0x138>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d007      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a42      	ldr	r2, [pc, #264]	@ (8007010 <TIM_Base_SetConfig+0x13c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d003      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a41      	ldr	r2, [pc, #260]	@ (8007014 <TIM_Base_SetConfig+0x140>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d108      	bne.n	8006f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a36      	ldr	r2, [pc, #216]	@ (8007004 <TIM_Base_SetConfig+0x130>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d027      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f34:	d023      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a33      	ldr	r2, [pc, #204]	@ (8007008 <TIM_Base_SetConfig+0x134>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d01f      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a32      	ldr	r2, [pc, #200]	@ (800700c <TIM_Base_SetConfig+0x138>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d01b      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a31      	ldr	r2, [pc, #196]	@ (8007010 <TIM_Base_SetConfig+0x13c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d017      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a30      	ldr	r2, [pc, #192]	@ (8007014 <TIM_Base_SetConfig+0x140>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d013      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2f      	ldr	r2, [pc, #188]	@ (8007018 <TIM_Base_SetConfig+0x144>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00f      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2e      	ldr	r2, [pc, #184]	@ (800701c <TIM_Base_SetConfig+0x148>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a2d      	ldr	r2, [pc, #180]	@ (8007020 <TIM_Base_SetConfig+0x14c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d007      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a2c      	ldr	r2, [pc, #176]	@ (8007024 <TIM_Base_SetConfig+0x150>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_Base_SetConfig+0xaa>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a2b      	ldr	r2, [pc, #172]	@ (8007028 <TIM_Base_SetConfig+0x154>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d108      	bne.n	8006f90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a14      	ldr	r2, [pc, #80]	@ (8007004 <TIM_Base_SetConfig+0x130>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00f      	beq.n	8006fd6 <TIM_Base_SetConfig+0x102>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a16      	ldr	r2, [pc, #88]	@ (8007014 <TIM_Base_SetConfig+0x140>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_Base_SetConfig+0x102>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a15      	ldr	r2, [pc, #84]	@ (8007018 <TIM_Base_SetConfig+0x144>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d007      	beq.n	8006fd6 <TIM_Base_SetConfig+0x102>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a14      	ldr	r2, [pc, #80]	@ (800701c <TIM_Base_SetConfig+0x148>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d003      	beq.n	8006fd6 <TIM_Base_SetConfig+0x102>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a13      	ldr	r2, [pc, #76]	@ (8007020 <TIM_Base_SetConfig+0x14c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d103      	bne.n	8006fde <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f043 0204 	orr.w	r2, r3, #4
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	601a      	str	r2, [r3, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40010000 	.word	0x40010000
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40000c00 	.word	0x40000c00
 8007014:	40010400 	.word	0x40010400
 8007018:	40014000 	.word	0x40014000
 800701c:	40014400 	.word	0x40014400
 8007020:	40014800 	.word	0x40014800
 8007024:	4000e000 	.word	0x4000e000
 8007028:	4000e400 	.word	0x4000e400

0800702c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	f023 0201 	bic.w	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4b37      	ldr	r3, [pc, #220]	@ (8007134 <TIM_OC1_SetConfig+0x108>)
 8007058:	4013      	ands	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f023 0302 	bic.w	r3, r3, #2
 8007074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a2d      	ldr	r2, [pc, #180]	@ (8007138 <TIM_OC1_SetConfig+0x10c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00f      	beq.n	80070a8 <TIM_OC1_SetConfig+0x7c>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a2c      	ldr	r2, [pc, #176]	@ (800713c <TIM_OC1_SetConfig+0x110>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00b      	beq.n	80070a8 <TIM_OC1_SetConfig+0x7c>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a2b      	ldr	r2, [pc, #172]	@ (8007140 <TIM_OC1_SetConfig+0x114>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d007      	beq.n	80070a8 <TIM_OC1_SetConfig+0x7c>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a2a      	ldr	r2, [pc, #168]	@ (8007144 <TIM_OC1_SetConfig+0x118>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_OC1_SetConfig+0x7c>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a29      	ldr	r2, [pc, #164]	@ (8007148 <TIM_OC1_SetConfig+0x11c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d10c      	bne.n	80070c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f023 0308 	bic.w	r3, r3, #8
 80070ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f023 0304 	bic.w	r3, r3, #4
 80070c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007138 <TIM_OC1_SetConfig+0x10c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00f      	beq.n	80070ea <TIM_OC1_SetConfig+0xbe>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a1b      	ldr	r2, [pc, #108]	@ (800713c <TIM_OC1_SetConfig+0x110>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00b      	beq.n	80070ea <TIM_OC1_SetConfig+0xbe>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007140 <TIM_OC1_SetConfig+0x114>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <TIM_OC1_SetConfig+0xbe>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a19      	ldr	r2, [pc, #100]	@ (8007144 <TIM_OC1_SetConfig+0x118>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_OC1_SetConfig+0xbe>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a18      	ldr	r2, [pc, #96]	@ (8007148 <TIM_OC1_SetConfig+0x11c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d111      	bne.n	800710e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	621a      	str	r2, [r3, #32]
}
 8007128:	bf00      	nop
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	fffeff8f 	.word	0xfffeff8f
 8007138:	40010000 	.word	0x40010000
 800713c:	40010400 	.word	0x40010400
 8007140:	40014000 	.word	0x40014000
 8007144:	40014400 	.word	0x40014400
 8007148:	40014800 	.word	0x40014800

0800714c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	f023 0210 	bic.w	r2, r3, #16
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4b34      	ldr	r3, [pc, #208]	@ (8007248 <TIM_OC2_SetConfig+0xfc>)
 8007178:	4013      	ands	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f023 0320 	bic.w	r3, r3, #32
 8007196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a29      	ldr	r2, [pc, #164]	@ (800724c <TIM_OC2_SetConfig+0x100>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_OC2_SetConfig+0x68>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a28      	ldr	r2, [pc, #160]	@ (8007250 <TIM_OC2_SetConfig+0x104>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d10d      	bne.n	80071d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a1e      	ldr	r2, [pc, #120]	@ (800724c <TIM_OC2_SetConfig+0x100>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00f      	beq.n	80071f8 <TIM_OC2_SetConfig+0xac>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a1d      	ldr	r2, [pc, #116]	@ (8007250 <TIM_OC2_SetConfig+0x104>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00b      	beq.n	80071f8 <TIM_OC2_SetConfig+0xac>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007254 <TIM_OC2_SetConfig+0x108>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_OC2_SetConfig+0xac>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007258 <TIM_OC2_SetConfig+0x10c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC2_SetConfig+0xac>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a1a      	ldr	r2, [pc, #104]	@ (800725c <TIM_OC2_SetConfig+0x110>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d113      	bne.n	8007220 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	feff8fff 	.word	0xfeff8fff
 800724c:	40010000 	.word	0x40010000
 8007250:	40010400 	.word	0x40010400
 8007254:	40014000 	.word	0x40014000
 8007258:	40014400 	.word	0x40014400
 800725c:	40014800 	.word	0x40014800

08007260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4b33      	ldr	r3, [pc, #204]	@ (8007358 <TIM_OC3_SetConfig+0xf8>)
 800728c:	4013      	ands	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a28      	ldr	r2, [pc, #160]	@ (800735c <TIM_OC3_SetConfig+0xfc>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d003      	beq.n	80072c6 <TIM_OC3_SetConfig+0x66>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a27      	ldr	r2, [pc, #156]	@ (8007360 <TIM_OC3_SetConfig+0x100>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d10d      	bne.n	80072e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <TIM_OC3_SetConfig+0xfc>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00f      	beq.n	800730a <TIM_OC3_SetConfig+0xaa>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007360 <TIM_OC3_SetConfig+0x100>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00b      	beq.n	800730a <TIM_OC3_SetConfig+0xaa>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007364 <TIM_OC3_SetConfig+0x104>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d007      	beq.n	800730a <TIM_OC3_SetConfig+0xaa>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007368 <TIM_OC3_SetConfig+0x108>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d003      	beq.n	800730a <TIM_OC3_SetConfig+0xaa>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a19      	ldr	r2, [pc, #100]	@ (800736c <TIM_OC3_SetConfig+0x10c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d113      	bne.n	8007332 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	621a      	str	r2, [r3, #32]
}
 800734c:	bf00      	nop
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	fffeff8f 	.word	0xfffeff8f
 800735c:	40010000 	.word	0x40010000
 8007360:	40010400 	.word	0x40010400
 8007364:	40014000 	.word	0x40014000
 8007368:	40014400 	.word	0x40014400
 800736c:	40014800 	.word	0x40014800

08007370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4b24      	ldr	r3, [pc, #144]	@ (800742c <TIM_OC4_SetConfig+0xbc>)
 800739c:	4013      	ands	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	031b      	lsls	r3, r3, #12
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a19      	ldr	r2, [pc, #100]	@ (8007430 <TIM_OC4_SetConfig+0xc0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00f      	beq.n	80073f0 <TIM_OC4_SetConfig+0x80>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a18      	ldr	r2, [pc, #96]	@ (8007434 <TIM_OC4_SetConfig+0xc4>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00b      	beq.n	80073f0 <TIM_OC4_SetConfig+0x80>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a17      	ldr	r2, [pc, #92]	@ (8007438 <TIM_OC4_SetConfig+0xc8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_OC4_SetConfig+0x80>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a16      	ldr	r2, [pc, #88]	@ (800743c <TIM_OC4_SetConfig+0xcc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_OC4_SetConfig+0x80>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a15      	ldr	r2, [pc, #84]	@ (8007440 <TIM_OC4_SetConfig+0xd0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d109      	bne.n	8007404 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	019b      	lsls	r3, r3, #6
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	feff8fff 	.word	0xfeff8fff
 8007430:	40010000 	.word	0x40010000
 8007434:	40010400 	.word	0x40010400
 8007438:	40014000 	.word	0x40014000
 800743c:	40014400 	.word	0x40014400
 8007440:	40014800 	.word	0x40014800

08007444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4b21      	ldr	r3, [pc, #132]	@ (80074f4 <TIM_OC5_SetConfig+0xb0>)
 8007470:	4013      	ands	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007484:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	041b      	lsls	r3, r3, #16
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	4313      	orrs	r3, r2
 8007490:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a18      	ldr	r2, [pc, #96]	@ (80074f8 <TIM_OC5_SetConfig+0xb4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00f      	beq.n	80074ba <TIM_OC5_SetConfig+0x76>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a17      	ldr	r2, [pc, #92]	@ (80074fc <TIM_OC5_SetConfig+0xb8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00b      	beq.n	80074ba <TIM_OC5_SetConfig+0x76>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a16      	ldr	r2, [pc, #88]	@ (8007500 <TIM_OC5_SetConfig+0xbc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d007      	beq.n	80074ba <TIM_OC5_SetConfig+0x76>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a15      	ldr	r2, [pc, #84]	@ (8007504 <TIM_OC5_SetConfig+0xc0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d003      	beq.n	80074ba <TIM_OC5_SetConfig+0x76>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a14      	ldr	r2, [pc, #80]	@ (8007508 <TIM_OC5_SetConfig+0xc4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d109      	bne.n	80074ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	621a      	str	r2, [r3, #32]
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	fffeff8f 	.word	0xfffeff8f
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40010400 	.word	0x40010400
 8007500:	40014000 	.word	0x40014000
 8007504:	40014400 	.word	0x40014400
 8007508:	40014800 	.word	0x40014800

0800750c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4b22      	ldr	r3, [pc, #136]	@ (80075c0 <TIM_OC6_SetConfig+0xb4>)
 8007538:	4013      	ands	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800754e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	051b      	lsls	r3, r3, #20
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a19      	ldr	r2, [pc, #100]	@ (80075c4 <TIM_OC6_SetConfig+0xb8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00f      	beq.n	8007584 <TIM_OC6_SetConfig+0x78>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a18      	ldr	r2, [pc, #96]	@ (80075c8 <TIM_OC6_SetConfig+0xbc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00b      	beq.n	8007584 <TIM_OC6_SetConfig+0x78>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a17      	ldr	r2, [pc, #92]	@ (80075cc <TIM_OC6_SetConfig+0xc0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d007      	beq.n	8007584 <TIM_OC6_SetConfig+0x78>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a16      	ldr	r2, [pc, #88]	@ (80075d0 <TIM_OC6_SetConfig+0xc4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_OC6_SetConfig+0x78>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a15      	ldr	r2, [pc, #84]	@ (80075d4 <TIM_OC6_SetConfig+0xc8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d109      	bne.n	8007598 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800758a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	029b      	lsls	r3, r3, #10
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	feff8fff 	.word	0xfeff8fff
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40010400 	.word	0x40010400
 80075cc:	40014000 	.word	0x40014000
 80075d0:	40014400 	.word	0x40014400
 80075d4:	40014800 	.word	0x40014800

080075d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	2201      	movs	r2, #1
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1a      	ldr	r2, [r3, #32]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	43db      	mvns	r3, r3
 80075fa:	401a      	ands	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	fa01 f303 	lsl.w	r3, r1, r3
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	621a      	str	r2, [r3, #32]
}
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007638:	2302      	movs	r3, #2
 800763a:	e077      	b.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a35      	ldr	r2, [pc, #212]	@ (8007738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d004      	beq.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a34      	ldr	r2, [pc, #208]	@ (800773c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d108      	bne.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007676:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007688:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a25      	ldr	r2, [pc, #148]	@ (8007738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d02c      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ae:	d027      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a22      	ldr	r2, [pc, #136]	@ (8007740 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d022      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a21      	ldr	r2, [pc, #132]	@ (8007744 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d01d      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007748 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d018      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1a      	ldr	r2, [pc, #104]	@ (800773c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1b      	ldr	r2, [pc, #108]	@ (800774c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007750 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a18      	ldr	r2, [pc, #96]	@ (8007754 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a17      	ldr	r2, [pc, #92]	@ (8007758 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10c      	bne.n	800771a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007706:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	4313      	orrs	r3, r2
 8007710:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	40010000 	.word	0x40010000
 800773c:	40010400 	.word	0x40010400
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	40000c00 	.word	0x40000c00
 800774c:	40001800 	.word	0x40001800
 8007750:	40014000 	.word	0x40014000
 8007754:	4000e000 	.word	0x4000e000
 8007758:	4000e400 	.word	0x4000e400

0800775c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007774:	2302      	movs	r3, #2
 8007776:	e073      	b.n	8007860 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	041b      	lsls	r3, r3, #16
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a19      	ldr	r2, [pc, #100]	@ (800786c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d004      	beq.n	8007814 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a18      	ldr	r2, [pc, #96]	@ (8007870 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d11c      	bne.n	800784e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781e:	051b      	lsls	r3, r3, #20
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	40010000 	.word	0x40010000
 8007870:	40010400 	.word	0x40010400

08007874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e042      	b.n	800790c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788c:	2b00      	cmp	r3, #0
 800788e:	d106      	bne.n	800789e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7f9 ffaf 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2224      	movs	r2, #36	@ 0x24
 80078a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 fb64 	bl	8008f8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fcf5 	bl	80082b4 <UART_SetConfig>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e01b      	b.n	800790c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fbe3 	bl	80090d0 <UART_CheckIdleState>
 800790a:	4603      	mov	r3, r0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08a      	sub	sp, #40	@ 0x28
 8007918:	af02      	add	r7, sp, #8
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800792a:	2b20      	cmp	r3, #32
 800792c:	d17b      	bne.n	8007a26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_UART_Transmit+0x26>
 8007934:	88fb      	ldrh	r3, [r7, #6]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e074      	b.n	8007a28 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2221      	movs	r2, #33	@ 0x21
 800794a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800794e:	f7fa fd61 	bl	8002414 <HAL_GetTick>
 8007952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	88fa      	ldrh	r2, [r7, #6]
 8007960:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800796c:	d108      	bne.n	8007980 <HAL_UART_Transmit+0x6c>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d104      	bne.n	8007980 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	61bb      	str	r3, [r7, #24]
 800797e:	e003      	b.n	8007988 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007984:	2300      	movs	r3, #0
 8007986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007988:	e030      	b.n	80079ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2200      	movs	r2, #0
 8007992:	2180      	movs	r1, #128	@ 0x80
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f001 fc45 	bl	8009224 <UART_WaitOnFlagUntilTimeout>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e03d      	b.n	8007a28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10b      	bne.n	80079ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	3302      	adds	r3, #2
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	e007      	b.n	80079da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	781a      	ldrb	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	3301      	adds	r3, #1
 80079d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1c8      	bne.n	800798a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2200      	movs	r2, #0
 8007a00:	2140      	movs	r1, #64	@ 0x40
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f001 fc0e 	bl	8009224 <UART_WaitOnFlagUntilTimeout>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e006      	b.n	8007a28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e000      	b.n	8007a28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a26:	2302      	movs	r3, #2
  }
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3720      	adds	r7, #32
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	@ 0x28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d137      	bne.n	8007ab8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_UART_Receive_IT+0x24>
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e030      	b.n	8007aba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a18      	ldr	r2, [pc, #96]	@ (8007ac4 <HAL_UART_Receive_IT+0x94>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d01f      	beq.n	8007aa8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d018      	beq.n	8007aa8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	613b      	str	r3, [r7, #16]
   return(result);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	623b      	str	r3, [r7, #32]
 8007a96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	69f9      	ldr	r1, [r7, #28]
 8007a9a:	6a3a      	ldr	r2, [r7, #32]
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e6      	bne.n	8007a76 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f001 fc26 	bl	8009300 <UART_Start_Receive_IT>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	e000      	b.n	8007aba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ab8:	2302      	movs	r3, #2
  }
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3728      	adds	r7, #40	@ 0x28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	58000c00 	.word	0x58000c00

08007ac8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b0ba      	sub	sp, #232	@ 0xe8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007aee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007af2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007af6:	4013      	ands	r3, r2
 8007af8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d11b      	bne.n	8007b3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b08:	f003 0320 	and.w	r3, r3, #32
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d015      	beq.n	8007b3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d105      	bne.n	8007b28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d009      	beq.n	8007b3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8393 	beq.w	8008258 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
      }
      return;
 8007b3a:	e38d      	b.n	8008258 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 8123 	beq.w	8007d8c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8007d80 <HAL_UART_IRQHandler+0x2b8>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b56:	4b8b      	ldr	r3, [pc, #556]	@ (8007d84 <HAL_UART_IRQHandler+0x2bc>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8116 	beq.w	8007d8c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d011      	beq.n	8007b90 <HAL_UART_IRQHandler+0xc8>
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b86:	f043 0201 	orr.w	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d011      	beq.n	8007bc0 <HAL_UART_IRQHandler+0xf8>
 8007b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2202      	movs	r2, #2
 8007bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb6:	f043 0204 	orr.w	r2, r3, #4
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d011      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x128>
 8007bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2204      	movs	r2, #4
 8007bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be6:	f043 0202 	orr.w	r2, r3, #2
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d017      	beq.n	8007c2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c00:	f003 0320 	and.w	r3, r3, #32
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d105      	bne.n	8007c14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c0c:	4b5c      	ldr	r3, [pc, #368]	@ (8007d80 <HAL_UART_IRQHandler+0x2b8>)
 8007c0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00b      	beq.n	8007c2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2208      	movs	r2, #8
 8007c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c22:	f043 0208 	orr.w	r2, r3, #8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d012      	beq.n	8007c5e <HAL_UART_IRQHandler+0x196>
 8007c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00c      	beq.n	8007c5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c54:	f043 0220 	orr.w	r2, r3, #32
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 82f9 	beq.w	800825c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d013      	beq.n	8007c9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb2:	2b40      	cmp	r3, #64	@ 0x40
 8007cb4:	d005      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d054      	beq.n	8007d6c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fc3e 	bl	8009544 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd2:	2b40      	cmp	r3, #64	@ 0x40
 8007cd4:	d146      	bne.n	8007d64 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1d9      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d017      	beq.n	8007d5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d32:	4a15      	ldr	r2, [pc, #84]	@ (8007d88 <HAL_UART_IRQHandler+0x2c0>)
 8007d34:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fb f81b 	bl	8002d78 <HAL_DMA_Abort_IT>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d019      	beq.n	8007d7c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d56:	4610      	mov	r0, r2
 8007d58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d5a:	e00f      	b.n	8007d7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa93 	bl	8008288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d62:	e00b      	b.n	8007d7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fa8f 	bl	8008288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6a:	e007      	b.n	8007d7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa8b 	bl	8008288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007d7a:	e26f      	b.n	800825c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7c:	bf00      	nop
    return;
 8007d7e:	e26d      	b.n	800825c <HAL_UART_IRQHandler+0x794>
 8007d80:	10000001 	.word	0x10000001
 8007d84:	04000120 	.word	0x04000120
 8007d88:	08009611 	.word	0x08009611

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	f040 8203 	bne.w	800819c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 81fc 	beq.w	800819c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 81f5 	beq.w	800819c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2210      	movs	r2, #16
 8007db8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc4:	2b40      	cmp	r3, #64	@ 0x40
 8007dc6:	f040 816d 	bne.w	80080a4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4aa4      	ldr	r2, [pc, #656]	@ (8008064 <HAL_UART_IRQHandler+0x59c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d068      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4aa1      	ldr	r2, [pc, #644]	@ (8008068 <HAL_UART_IRQHandler+0x5a0>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d061      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a9f      	ldr	r2, [pc, #636]	@ (800806c <HAL_UART_IRQHandler+0x5a4>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d05a      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a9c      	ldr	r2, [pc, #624]	@ (8008070 <HAL_UART_IRQHandler+0x5a8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d053      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a9a      	ldr	r2, [pc, #616]	@ (8008074 <HAL_UART_IRQHandler+0x5ac>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d04c      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a97      	ldr	r2, [pc, #604]	@ (8008078 <HAL_UART_IRQHandler+0x5b0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d045      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a95      	ldr	r2, [pc, #596]	@ (800807c <HAL_UART_IRQHandler+0x5b4>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d03e      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a92      	ldr	r2, [pc, #584]	@ (8008080 <HAL_UART_IRQHandler+0x5b8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d037      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a90      	ldr	r2, [pc, #576]	@ (8008084 <HAL_UART_IRQHandler+0x5bc>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d030      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a8d      	ldr	r2, [pc, #564]	@ (8008088 <HAL_UART_IRQHandler+0x5c0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d029      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a8b      	ldr	r2, [pc, #556]	@ (800808c <HAL_UART_IRQHandler+0x5c4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d022      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a88      	ldr	r2, [pc, #544]	@ (8008090 <HAL_UART_IRQHandler+0x5c8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d01b      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a86      	ldr	r2, [pc, #536]	@ (8008094 <HAL_UART_IRQHandler+0x5cc>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d014      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a83      	ldr	r2, [pc, #524]	@ (8008098 <HAL_UART_IRQHandler+0x5d0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00d      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a81      	ldr	r2, [pc, #516]	@ (800809c <HAL_UART_IRQHandler+0x5d4>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d006      	beq.n	8007eaa <HAL_UART_IRQHandler+0x3e2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a7e      	ldr	r2, [pc, #504]	@ (80080a0 <HAL_UART_IRQHandler+0x5d8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d106      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x3f0>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	e005      	b.n	8007ec4 <HAL_UART_IRQHandler+0x3fc>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ec8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80ad 	beq.w	800802c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ed8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007edc:	429a      	cmp	r2, r3
 8007ede:	f080 80a5 	bcs.w	800802c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef8:	f000 8087 	beq.w	800800a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1da      	bne.n	8007efc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f58:	f023 0301 	bic.w	r3, r3, #1
 8007f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3308      	adds	r3, #8
 8007f66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e1      	bne.n	8007f46 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fa6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e3      	bne.n	8007f82 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fd8:	f023 0310 	bic.w	r3, r3, #16
 8007fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ff0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e4      	bne.n	8007fc8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008004:	4618      	mov	r0, r3
 8008006:	f7fa fb99 	bl	800273c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2202      	movs	r2, #2
 800800e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800801c:	b29b      	uxth	r3, r3
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	b29b      	uxth	r3, r3
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f939 	bl	800829c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800802a:	e119      	b.n	8008260 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008036:	429a      	cmp	r2, r3
 8008038:	f040 8112 	bne.w	8008260 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008048:	f040 810a 	bne.w	8008260 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f91e 	bl	800829c <HAL_UARTEx_RxEventCallback>
      return;
 8008060:	e0fe      	b.n	8008260 <HAL_UART_IRQHandler+0x798>
 8008062:	bf00      	nop
 8008064:	40020010 	.word	0x40020010
 8008068:	40020028 	.word	0x40020028
 800806c:	40020040 	.word	0x40020040
 8008070:	40020058 	.word	0x40020058
 8008074:	40020070 	.word	0x40020070
 8008078:	40020088 	.word	0x40020088
 800807c:	400200a0 	.word	0x400200a0
 8008080:	400200b8 	.word	0x400200b8
 8008084:	40020410 	.word	0x40020410
 8008088:	40020428 	.word	0x40020428
 800808c:	40020440 	.word	0x40020440
 8008090:	40020458 	.word	0x40020458
 8008094:	40020470 	.word	0x40020470
 8008098:	40020488 	.word	0x40020488
 800809c:	400204a0 	.word	0x400204a0
 80080a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80cf 	beq.w	8008264 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80080c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80ca 	beq.w	8008264 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80080f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1e4      	bne.n	80080d0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	623b      	str	r3, [r7, #32]
   return(result);
 8008116:	6a3a      	ldr	r2, [r7, #32]
 8008118:	4b55      	ldr	r3, [pc, #340]	@ (8008270 <HAL_UART_IRQHandler+0x7a8>)
 800811a:	4013      	ands	r3, r2
 800811c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800812a:	633a      	str	r2, [r7, #48]	@ 0x30
 800812c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e3      	bne.n	8008106 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 0310 	bic.w	r3, r3, #16
 8008166:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008174:	61fb      	str	r3, [r7, #28]
 8008176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	69b9      	ldr	r1, [r7, #24]
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	617b      	str	r3, [r7, #20]
   return(result);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e4      	bne.n	8008152 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800818e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f881 	bl	800829c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800819a:	e063      	b.n	8008264 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800819c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00e      	beq.n	80081c6 <HAL_UART_IRQHandler+0x6fe>
 80081a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d008      	beq.n	80081c6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80081bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 ff84 	bl	800a0cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081c4:	e051      	b.n	800826a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d014      	beq.n	80081fc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d008      	beq.n	80081fc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d03a      	beq.n	8008268 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
    }
    return;
 80081fa:	e035      	b.n	8008268 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d009      	beq.n	800821c <HAL_UART_IRQHandler+0x754>
 8008208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800820c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fa0d 	bl	8009634 <UART_EndTransmit_IT>
    return;
 800821a:	e026      	b.n	800826a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800821c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008220:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d009      	beq.n	800823c <HAL_UART_IRQHandler+0x774>
 8008228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800822c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 ff5d 	bl	800a0f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800823a:	e016      	b.n	800826a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800823c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d010      	beq.n	800826a <HAL_UART_IRQHandler+0x7a2>
 8008248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800824c:	2b00      	cmp	r3, #0
 800824e:	da0c      	bge.n	800826a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 ff45 	bl	800a0e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008256:	e008      	b.n	800826a <HAL_UART_IRQHandler+0x7a2>
      return;
 8008258:	bf00      	nop
 800825a:	e006      	b.n	800826a <HAL_UART_IRQHandler+0x7a2>
    return;
 800825c:	bf00      	nop
 800825e:	e004      	b.n	800826a <HAL_UART_IRQHandler+0x7a2>
      return;
 8008260:	bf00      	nop
 8008262:	e002      	b.n	800826a <HAL_UART_IRQHandler+0x7a2>
      return;
 8008264:	bf00      	nop
 8008266:	e000      	b.n	800826a <HAL_UART_IRQHandler+0x7a2>
    return;
 8008268:	bf00      	nop
  }
}
 800826a:	37e8      	adds	r7, #232	@ 0xe8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	effffffe 	.word	0xeffffffe

08008274 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082b8:	b092      	sub	sp, #72	@ 0x48
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	4313      	orrs	r3, r2
 80082da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4bbe      	ldr	r3, [pc, #760]	@ (80085dc <UART_SetConfig+0x328>)
 80082e4:	4013      	ands	r3, r2
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	6812      	ldr	r2, [r2, #0]
 80082ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082ec:	430b      	orrs	r3, r1
 80082ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	68da      	ldr	r2, [r3, #12]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4ab3      	ldr	r2, [pc, #716]	@ (80085e0 <UART_SetConfig+0x32c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d004      	beq.n	8008320 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800831c:	4313      	orrs	r3, r2
 800831e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	4baf      	ldr	r3, [pc, #700]	@ (80085e4 <UART_SetConfig+0x330>)
 8008328:	4013      	ands	r3, r2
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	6812      	ldr	r2, [r2, #0]
 800832e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008330:	430b      	orrs	r3, r1
 8008332:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833a:	f023 010f 	bic.w	r1, r3, #15
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4aa6      	ldr	r2, [pc, #664]	@ (80085e8 <UART_SetConfig+0x334>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d177      	bne.n	8008444 <UART_SetConfig+0x190>
 8008354:	4ba5      	ldr	r3, [pc, #660]	@ (80085ec <UART_SetConfig+0x338>)
 8008356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008358:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800835c:	2b28      	cmp	r3, #40	@ 0x28
 800835e:	d86d      	bhi.n	800843c <UART_SetConfig+0x188>
 8008360:	a201      	add	r2, pc, #4	@ (adr r2, 8008368 <UART_SetConfig+0xb4>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	0800840d 	.word	0x0800840d
 800836c:	0800843d 	.word	0x0800843d
 8008370:	0800843d 	.word	0x0800843d
 8008374:	0800843d 	.word	0x0800843d
 8008378:	0800843d 	.word	0x0800843d
 800837c:	0800843d 	.word	0x0800843d
 8008380:	0800843d 	.word	0x0800843d
 8008384:	0800843d 	.word	0x0800843d
 8008388:	08008415 	.word	0x08008415
 800838c:	0800843d 	.word	0x0800843d
 8008390:	0800843d 	.word	0x0800843d
 8008394:	0800843d 	.word	0x0800843d
 8008398:	0800843d 	.word	0x0800843d
 800839c:	0800843d 	.word	0x0800843d
 80083a0:	0800843d 	.word	0x0800843d
 80083a4:	0800843d 	.word	0x0800843d
 80083a8:	0800841d 	.word	0x0800841d
 80083ac:	0800843d 	.word	0x0800843d
 80083b0:	0800843d 	.word	0x0800843d
 80083b4:	0800843d 	.word	0x0800843d
 80083b8:	0800843d 	.word	0x0800843d
 80083bc:	0800843d 	.word	0x0800843d
 80083c0:	0800843d 	.word	0x0800843d
 80083c4:	0800843d 	.word	0x0800843d
 80083c8:	08008425 	.word	0x08008425
 80083cc:	0800843d 	.word	0x0800843d
 80083d0:	0800843d 	.word	0x0800843d
 80083d4:	0800843d 	.word	0x0800843d
 80083d8:	0800843d 	.word	0x0800843d
 80083dc:	0800843d 	.word	0x0800843d
 80083e0:	0800843d 	.word	0x0800843d
 80083e4:	0800843d 	.word	0x0800843d
 80083e8:	0800842d 	.word	0x0800842d
 80083ec:	0800843d 	.word	0x0800843d
 80083f0:	0800843d 	.word	0x0800843d
 80083f4:	0800843d 	.word	0x0800843d
 80083f8:	0800843d 	.word	0x0800843d
 80083fc:	0800843d 	.word	0x0800843d
 8008400:	0800843d 	.word	0x0800843d
 8008404:	0800843d 	.word	0x0800843d
 8008408:	08008435 	.word	0x08008435
 800840c:	2301      	movs	r3, #1
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008412:	e326      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008414:	2304      	movs	r3, #4
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841a:	e322      	b.n	8008a62 <UART_SetConfig+0x7ae>
 800841c:	2308      	movs	r3, #8
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008422:	e31e      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008424:	2310      	movs	r3, #16
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842a:	e31a      	b.n	8008a62 <UART_SetConfig+0x7ae>
 800842c:	2320      	movs	r3, #32
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008432:	e316      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008434:	2340      	movs	r3, #64	@ 0x40
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843a:	e312      	b.n	8008a62 <UART_SetConfig+0x7ae>
 800843c:	2380      	movs	r3, #128	@ 0x80
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008442:	e30e      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a69      	ldr	r2, [pc, #420]	@ (80085f0 <UART_SetConfig+0x33c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d130      	bne.n	80084b0 <UART_SetConfig+0x1fc>
 800844e:	4b67      	ldr	r3, [pc, #412]	@ (80085ec <UART_SetConfig+0x338>)
 8008450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	2b05      	cmp	r3, #5
 8008458:	d826      	bhi.n	80084a8 <UART_SetConfig+0x1f4>
 800845a:	a201      	add	r2, pc, #4	@ (adr r2, 8008460 <UART_SetConfig+0x1ac>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008479 	.word	0x08008479
 8008464:	08008481 	.word	0x08008481
 8008468:	08008489 	.word	0x08008489
 800846c:	08008491 	.word	0x08008491
 8008470:	08008499 	.word	0x08008499
 8008474:	080084a1 	.word	0x080084a1
 8008478:	2300      	movs	r3, #0
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847e:	e2f0      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008480:	2304      	movs	r3, #4
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008486:	e2ec      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008488:	2308      	movs	r3, #8
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848e:	e2e8      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008490:	2310      	movs	r3, #16
 8008492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008496:	e2e4      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008498:	2320      	movs	r3, #32
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849e:	e2e0      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80084a0:	2340      	movs	r3, #64	@ 0x40
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a6:	e2dc      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80084a8:	2380      	movs	r3, #128	@ 0x80
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ae:	e2d8      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a4f      	ldr	r2, [pc, #316]	@ (80085f4 <UART_SetConfig+0x340>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d130      	bne.n	800851c <UART_SetConfig+0x268>
 80084ba:	4b4c      	ldr	r3, [pc, #304]	@ (80085ec <UART_SetConfig+0x338>)
 80084bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d826      	bhi.n	8008514 <UART_SetConfig+0x260>
 80084c6:	a201      	add	r2, pc, #4	@ (adr r2, 80084cc <UART_SetConfig+0x218>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080084e5 	.word	0x080084e5
 80084d0:	080084ed 	.word	0x080084ed
 80084d4:	080084f5 	.word	0x080084f5
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	08008505 	.word	0x08008505
 80084e0:	0800850d 	.word	0x0800850d
 80084e4:	2300      	movs	r3, #0
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ea:	e2ba      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80084ec:	2304      	movs	r3, #4
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f2:	e2b6      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80084f4:	2308      	movs	r3, #8
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fa:	e2b2      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80084fc:	2310      	movs	r3, #16
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008502:	e2ae      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008504:	2320      	movs	r3, #32
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850a:	e2aa      	b.n	8008a62 <UART_SetConfig+0x7ae>
 800850c:	2340      	movs	r3, #64	@ 0x40
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008512:	e2a6      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008514:	2380      	movs	r3, #128	@ 0x80
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851a:	e2a2      	b.n	8008a62 <UART_SetConfig+0x7ae>
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a35      	ldr	r2, [pc, #212]	@ (80085f8 <UART_SetConfig+0x344>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d130      	bne.n	8008588 <UART_SetConfig+0x2d4>
 8008526:	4b31      	ldr	r3, [pc, #196]	@ (80085ec <UART_SetConfig+0x338>)
 8008528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	2b05      	cmp	r3, #5
 8008530:	d826      	bhi.n	8008580 <UART_SetConfig+0x2cc>
 8008532:	a201      	add	r2, pc, #4	@ (adr r2, 8008538 <UART_SetConfig+0x284>)
 8008534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008538:	08008551 	.word	0x08008551
 800853c:	08008559 	.word	0x08008559
 8008540:	08008561 	.word	0x08008561
 8008544:	08008569 	.word	0x08008569
 8008548:	08008571 	.word	0x08008571
 800854c:	08008579 	.word	0x08008579
 8008550:	2300      	movs	r3, #0
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008556:	e284      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008558:	2304      	movs	r3, #4
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855e:	e280      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008560:	2308      	movs	r3, #8
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008566:	e27c      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008568:	2310      	movs	r3, #16
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856e:	e278      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008570:	2320      	movs	r3, #32
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008576:	e274      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008578:	2340      	movs	r3, #64	@ 0x40
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857e:	e270      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008580:	2380      	movs	r3, #128	@ 0x80
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008586:	e26c      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1b      	ldr	r2, [pc, #108]	@ (80085fc <UART_SetConfig+0x348>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d142      	bne.n	8008618 <UART_SetConfig+0x364>
 8008592:	4b16      	ldr	r3, [pc, #88]	@ (80085ec <UART_SetConfig+0x338>)
 8008594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	2b05      	cmp	r3, #5
 800859c:	d838      	bhi.n	8008610 <UART_SetConfig+0x35c>
 800859e:	a201      	add	r2, pc, #4	@ (adr r2, 80085a4 <UART_SetConfig+0x2f0>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085bd 	.word	0x080085bd
 80085a8:	080085c5 	.word	0x080085c5
 80085ac:	080085cd 	.word	0x080085cd
 80085b0:	080085d5 	.word	0x080085d5
 80085b4:	08008601 	.word	0x08008601
 80085b8:	08008609 	.word	0x08008609
 80085bc:	2300      	movs	r3, #0
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c2:	e24e      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80085c4:	2304      	movs	r3, #4
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ca:	e24a      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80085cc:	2308      	movs	r3, #8
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085d2:	e246      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80085d4:	2310      	movs	r3, #16
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085da:	e242      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80085dc:	cfff69f3 	.word	0xcfff69f3
 80085e0:	58000c00 	.word	0x58000c00
 80085e4:	11fff4ff 	.word	0x11fff4ff
 80085e8:	40011000 	.word	0x40011000
 80085ec:	58024400 	.word	0x58024400
 80085f0:	40004400 	.word	0x40004400
 80085f4:	40004800 	.word	0x40004800
 80085f8:	40004c00 	.word	0x40004c00
 80085fc:	40005000 	.word	0x40005000
 8008600:	2320      	movs	r3, #32
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008606:	e22c      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008608:	2340      	movs	r3, #64	@ 0x40
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860e:	e228      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008610:	2380      	movs	r3, #128	@ 0x80
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008616:	e224      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4ab1      	ldr	r2, [pc, #708]	@ (80088e4 <UART_SetConfig+0x630>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d176      	bne.n	8008710 <UART_SetConfig+0x45c>
 8008622:	4bb1      	ldr	r3, [pc, #708]	@ (80088e8 <UART_SetConfig+0x634>)
 8008624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800862a:	2b28      	cmp	r3, #40	@ 0x28
 800862c:	d86c      	bhi.n	8008708 <UART_SetConfig+0x454>
 800862e:	a201      	add	r2, pc, #4	@ (adr r2, 8008634 <UART_SetConfig+0x380>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	080086d9 	.word	0x080086d9
 8008638:	08008709 	.word	0x08008709
 800863c:	08008709 	.word	0x08008709
 8008640:	08008709 	.word	0x08008709
 8008644:	08008709 	.word	0x08008709
 8008648:	08008709 	.word	0x08008709
 800864c:	08008709 	.word	0x08008709
 8008650:	08008709 	.word	0x08008709
 8008654:	080086e1 	.word	0x080086e1
 8008658:	08008709 	.word	0x08008709
 800865c:	08008709 	.word	0x08008709
 8008660:	08008709 	.word	0x08008709
 8008664:	08008709 	.word	0x08008709
 8008668:	08008709 	.word	0x08008709
 800866c:	08008709 	.word	0x08008709
 8008670:	08008709 	.word	0x08008709
 8008674:	080086e9 	.word	0x080086e9
 8008678:	08008709 	.word	0x08008709
 800867c:	08008709 	.word	0x08008709
 8008680:	08008709 	.word	0x08008709
 8008684:	08008709 	.word	0x08008709
 8008688:	08008709 	.word	0x08008709
 800868c:	08008709 	.word	0x08008709
 8008690:	08008709 	.word	0x08008709
 8008694:	080086f1 	.word	0x080086f1
 8008698:	08008709 	.word	0x08008709
 800869c:	08008709 	.word	0x08008709
 80086a0:	08008709 	.word	0x08008709
 80086a4:	08008709 	.word	0x08008709
 80086a8:	08008709 	.word	0x08008709
 80086ac:	08008709 	.word	0x08008709
 80086b0:	08008709 	.word	0x08008709
 80086b4:	080086f9 	.word	0x080086f9
 80086b8:	08008709 	.word	0x08008709
 80086bc:	08008709 	.word	0x08008709
 80086c0:	08008709 	.word	0x08008709
 80086c4:	08008709 	.word	0x08008709
 80086c8:	08008709 	.word	0x08008709
 80086cc:	08008709 	.word	0x08008709
 80086d0:	08008709 	.word	0x08008709
 80086d4:	08008701 	.word	0x08008701
 80086d8:	2301      	movs	r3, #1
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086de:	e1c0      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80086e0:	2304      	movs	r3, #4
 80086e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e6:	e1bc      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80086e8:	2308      	movs	r3, #8
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ee:	e1b8      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80086f0:	2310      	movs	r3, #16
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f6:	e1b4      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80086f8:	2320      	movs	r3, #32
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fe:	e1b0      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008700:	2340      	movs	r3, #64	@ 0x40
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e1ac      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008708:	2380      	movs	r3, #128	@ 0x80
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870e:	e1a8      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a75      	ldr	r2, [pc, #468]	@ (80088ec <UART_SetConfig+0x638>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d130      	bne.n	800877c <UART_SetConfig+0x4c8>
 800871a:	4b73      	ldr	r3, [pc, #460]	@ (80088e8 <UART_SetConfig+0x634>)
 800871c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871e:	f003 0307 	and.w	r3, r3, #7
 8008722:	2b05      	cmp	r3, #5
 8008724:	d826      	bhi.n	8008774 <UART_SetConfig+0x4c0>
 8008726:	a201      	add	r2, pc, #4	@ (adr r2, 800872c <UART_SetConfig+0x478>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	08008745 	.word	0x08008745
 8008730:	0800874d 	.word	0x0800874d
 8008734:	08008755 	.word	0x08008755
 8008738:	0800875d 	.word	0x0800875d
 800873c:	08008765 	.word	0x08008765
 8008740:	0800876d 	.word	0x0800876d
 8008744:	2300      	movs	r3, #0
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874a:	e18a      	b.n	8008a62 <UART_SetConfig+0x7ae>
 800874c:	2304      	movs	r3, #4
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008752:	e186      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008754:	2308      	movs	r3, #8
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875a:	e182      	b.n	8008a62 <UART_SetConfig+0x7ae>
 800875c:	2310      	movs	r3, #16
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008762:	e17e      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008764:	2320      	movs	r3, #32
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876a:	e17a      	b.n	8008a62 <UART_SetConfig+0x7ae>
 800876c:	2340      	movs	r3, #64	@ 0x40
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008772:	e176      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008774:	2380      	movs	r3, #128	@ 0x80
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877a:	e172      	b.n	8008a62 <UART_SetConfig+0x7ae>
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a5b      	ldr	r2, [pc, #364]	@ (80088f0 <UART_SetConfig+0x63c>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d130      	bne.n	80087e8 <UART_SetConfig+0x534>
 8008786:	4b58      	ldr	r3, [pc, #352]	@ (80088e8 <UART_SetConfig+0x634>)
 8008788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800878a:	f003 0307 	and.w	r3, r3, #7
 800878e:	2b05      	cmp	r3, #5
 8008790:	d826      	bhi.n	80087e0 <UART_SetConfig+0x52c>
 8008792:	a201      	add	r2, pc, #4	@ (adr r2, 8008798 <UART_SetConfig+0x4e4>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087b1 	.word	0x080087b1
 800879c:	080087b9 	.word	0x080087b9
 80087a0:	080087c1 	.word	0x080087c1
 80087a4:	080087c9 	.word	0x080087c9
 80087a8:	080087d1 	.word	0x080087d1
 80087ac:	080087d9 	.word	0x080087d9
 80087b0:	2300      	movs	r3, #0
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b6:	e154      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80087b8:	2304      	movs	r3, #4
 80087ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087be:	e150      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80087c0:	2308      	movs	r3, #8
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c6:	e14c      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80087c8:	2310      	movs	r3, #16
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ce:	e148      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80087d0:	2320      	movs	r3, #32
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e144      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80087d8:	2340      	movs	r3, #64	@ 0x40
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e140      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80087e0:	2380      	movs	r3, #128	@ 0x80
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e13c      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a41      	ldr	r2, [pc, #260]	@ (80088f4 <UART_SetConfig+0x640>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	f040 8082 	bne.w	80088f8 <UART_SetConfig+0x644>
 80087f4:	4b3c      	ldr	r3, [pc, #240]	@ (80088e8 <UART_SetConfig+0x634>)
 80087f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087fc:	2b28      	cmp	r3, #40	@ 0x28
 80087fe:	d86d      	bhi.n	80088dc <UART_SetConfig+0x628>
 8008800:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <UART_SetConfig+0x554>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	080088ad 	.word	0x080088ad
 800880c:	080088dd 	.word	0x080088dd
 8008810:	080088dd 	.word	0x080088dd
 8008814:	080088dd 	.word	0x080088dd
 8008818:	080088dd 	.word	0x080088dd
 800881c:	080088dd 	.word	0x080088dd
 8008820:	080088dd 	.word	0x080088dd
 8008824:	080088dd 	.word	0x080088dd
 8008828:	080088b5 	.word	0x080088b5
 800882c:	080088dd 	.word	0x080088dd
 8008830:	080088dd 	.word	0x080088dd
 8008834:	080088dd 	.word	0x080088dd
 8008838:	080088dd 	.word	0x080088dd
 800883c:	080088dd 	.word	0x080088dd
 8008840:	080088dd 	.word	0x080088dd
 8008844:	080088dd 	.word	0x080088dd
 8008848:	080088bd 	.word	0x080088bd
 800884c:	080088dd 	.word	0x080088dd
 8008850:	080088dd 	.word	0x080088dd
 8008854:	080088dd 	.word	0x080088dd
 8008858:	080088dd 	.word	0x080088dd
 800885c:	080088dd 	.word	0x080088dd
 8008860:	080088dd 	.word	0x080088dd
 8008864:	080088dd 	.word	0x080088dd
 8008868:	080088c5 	.word	0x080088c5
 800886c:	080088dd 	.word	0x080088dd
 8008870:	080088dd 	.word	0x080088dd
 8008874:	080088dd 	.word	0x080088dd
 8008878:	080088dd 	.word	0x080088dd
 800887c:	080088dd 	.word	0x080088dd
 8008880:	080088dd 	.word	0x080088dd
 8008884:	080088dd 	.word	0x080088dd
 8008888:	080088cd 	.word	0x080088cd
 800888c:	080088dd 	.word	0x080088dd
 8008890:	080088dd 	.word	0x080088dd
 8008894:	080088dd 	.word	0x080088dd
 8008898:	080088dd 	.word	0x080088dd
 800889c:	080088dd 	.word	0x080088dd
 80088a0:	080088dd 	.word	0x080088dd
 80088a4:	080088dd 	.word	0x080088dd
 80088a8:	080088d5 	.word	0x080088d5
 80088ac:	2301      	movs	r3, #1
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b2:	e0d6      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80088b4:	2304      	movs	r3, #4
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ba:	e0d2      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80088bc:	2308      	movs	r3, #8
 80088be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c2:	e0ce      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80088c4:	2310      	movs	r3, #16
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ca:	e0ca      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80088cc:	2320      	movs	r3, #32
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d2:	e0c6      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80088d4:	2340      	movs	r3, #64	@ 0x40
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088da:	e0c2      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80088dc:	2380      	movs	r3, #128	@ 0x80
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e0be      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80088e4:	40011400 	.word	0x40011400
 80088e8:	58024400 	.word	0x58024400
 80088ec:	40007800 	.word	0x40007800
 80088f0:	40007c00 	.word	0x40007c00
 80088f4:	40011800 	.word	0x40011800
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4aad      	ldr	r2, [pc, #692]	@ (8008bb4 <UART_SetConfig+0x900>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d176      	bne.n	80089f0 <UART_SetConfig+0x73c>
 8008902:	4bad      	ldr	r3, [pc, #692]	@ (8008bb8 <UART_SetConfig+0x904>)
 8008904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800890a:	2b28      	cmp	r3, #40	@ 0x28
 800890c:	d86c      	bhi.n	80089e8 <UART_SetConfig+0x734>
 800890e:	a201      	add	r2, pc, #4	@ (adr r2, 8008914 <UART_SetConfig+0x660>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	080089b9 	.word	0x080089b9
 8008918:	080089e9 	.word	0x080089e9
 800891c:	080089e9 	.word	0x080089e9
 8008920:	080089e9 	.word	0x080089e9
 8008924:	080089e9 	.word	0x080089e9
 8008928:	080089e9 	.word	0x080089e9
 800892c:	080089e9 	.word	0x080089e9
 8008930:	080089e9 	.word	0x080089e9
 8008934:	080089c1 	.word	0x080089c1
 8008938:	080089e9 	.word	0x080089e9
 800893c:	080089e9 	.word	0x080089e9
 8008940:	080089e9 	.word	0x080089e9
 8008944:	080089e9 	.word	0x080089e9
 8008948:	080089e9 	.word	0x080089e9
 800894c:	080089e9 	.word	0x080089e9
 8008950:	080089e9 	.word	0x080089e9
 8008954:	080089c9 	.word	0x080089c9
 8008958:	080089e9 	.word	0x080089e9
 800895c:	080089e9 	.word	0x080089e9
 8008960:	080089e9 	.word	0x080089e9
 8008964:	080089e9 	.word	0x080089e9
 8008968:	080089e9 	.word	0x080089e9
 800896c:	080089e9 	.word	0x080089e9
 8008970:	080089e9 	.word	0x080089e9
 8008974:	080089d1 	.word	0x080089d1
 8008978:	080089e9 	.word	0x080089e9
 800897c:	080089e9 	.word	0x080089e9
 8008980:	080089e9 	.word	0x080089e9
 8008984:	080089e9 	.word	0x080089e9
 8008988:	080089e9 	.word	0x080089e9
 800898c:	080089e9 	.word	0x080089e9
 8008990:	080089e9 	.word	0x080089e9
 8008994:	080089d9 	.word	0x080089d9
 8008998:	080089e9 	.word	0x080089e9
 800899c:	080089e9 	.word	0x080089e9
 80089a0:	080089e9 	.word	0x080089e9
 80089a4:	080089e9 	.word	0x080089e9
 80089a8:	080089e9 	.word	0x080089e9
 80089ac:	080089e9 	.word	0x080089e9
 80089b0:	080089e9 	.word	0x080089e9
 80089b4:	080089e1 	.word	0x080089e1
 80089b8:	2301      	movs	r3, #1
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089be:	e050      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80089c0:	2304      	movs	r3, #4
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e04c      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80089c8:	2308      	movs	r3, #8
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ce:	e048      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80089d0:	2310      	movs	r3, #16
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d6:	e044      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80089d8:	2320      	movs	r3, #32
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089de:	e040      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80089e0:	2340      	movs	r3, #64	@ 0x40
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e6:	e03c      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80089e8:	2380      	movs	r3, #128	@ 0x80
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ee:	e038      	b.n	8008a62 <UART_SetConfig+0x7ae>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a71      	ldr	r2, [pc, #452]	@ (8008bbc <UART_SetConfig+0x908>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d130      	bne.n	8008a5c <UART_SetConfig+0x7a8>
 80089fa:	4b6f      	ldr	r3, [pc, #444]	@ (8008bb8 <UART_SetConfig+0x904>)
 80089fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089fe:	f003 0307 	and.w	r3, r3, #7
 8008a02:	2b05      	cmp	r3, #5
 8008a04:	d826      	bhi.n	8008a54 <UART_SetConfig+0x7a0>
 8008a06:	a201      	add	r2, pc, #4	@ (adr r2, 8008a0c <UART_SetConfig+0x758>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a25 	.word	0x08008a25
 8008a10:	08008a2d 	.word	0x08008a2d
 8008a14:	08008a35 	.word	0x08008a35
 8008a18:	08008a3d 	.word	0x08008a3d
 8008a1c:	08008a45 	.word	0x08008a45
 8008a20:	08008a4d 	.word	0x08008a4d
 8008a24:	2302      	movs	r3, #2
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2a:	e01a      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008a2c:	2304      	movs	r3, #4
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a32:	e016      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008a34:	2308      	movs	r3, #8
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3a:	e012      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008a3c:	2310      	movs	r3, #16
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a42:	e00e      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008a44:	2320      	movs	r3, #32
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4a:	e00a      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008a4c:	2340      	movs	r3, #64	@ 0x40
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a52:	e006      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008a54:	2380      	movs	r3, #128	@ 0x80
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5a:	e002      	b.n	8008a62 <UART_SetConfig+0x7ae>
 8008a5c:	2380      	movs	r3, #128	@ 0x80
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a55      	ldr	r2, [pc, #340]	@ (8008bbc <UART_SetConfig+0x908>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	f040 80f8 	bne.w	8008c5e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	dc46      	bgt.n	8008b04 <UART_SetConfig+0x850>
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	db75      	blt.n	8008b66 <UART_SetConfig+0x8b2>
 8008a7a:	3b02      	subs	r3, #2
 8008a7c:	2b1e      	cmp	r3, #30
 8008a7e:	d872      	bhi.n	8008b66 <UART_SetConfig+0x8b2>
 8008a80:	a201      	add	r2, pc, #4	@ (adr r2, 8008a88 <UART_SetConfig+0x7d4>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008b0b 	.word	0x08008b0b
 8008a8c:	08008b67 	.word	0x08008b67
 8008a90:	08008b13 	.word	0x08008b13
 8008a94:	08008b67 	.word	0x08008b67
 8008a98:	08008b67 	.word	0x08008b67
 8008a9c:	08008b67 	.word	0x08008b67
 8008aa0:	08008b23 	.word	0x08008b23
 8008aa4:	08008b67 	.word	0x08008b67
 8008aa8:	08008b67 	.word	0x08008b67
 8008aac:	08008b67 	.word	0x08008b67
 8008ab0:	08008b67 	.word	0x08008b67
 8008ab4:	08008b67 	.word	0x08008b67
 8008ab8:	08008b67 	.word	0x08008b67
 8008abc:	08008b67 	.word	0x08008b67
 8008ac0:	08008b33 	.word	0x08008b33
 8008ac4:	08008b67 	.word	0x08008b67
 8008ac8:	08008b67 	.word	0x08008b67
 8008acc:	08008b67 	.word	0x08008b67
 8008ad0:	08008b67 	.word	0x08008b67
 8008ad4:	08008b67 	.word	0x08008b67
 8008ad8:	08008b67 	.word	0x08008b67
 8008adc:	08008b67 	.word	0x08008b67
 8008ae0:	08008b67 	.word	0x08008b67
 8008ae4:	08008b67 	.word	0x08008b67
 8008ae8:	08008b67 	.word	0x08008b67
 8008aec:	08008b67 	.word	0x08008b67
 8008af0:	08008b67 	.word	0x08008b67
 8008af4:	08008b67 	.word	0x08008b67
 8008af8:	08008b67 	.word	0x08008b67
 8008afc:	08008b67 	.word	0x08008b67
 8008b00:	08008b59 	.word	0x08008b59
 8008b04:	2b40      	cmp	r3, #64	@ 0x40
 8008b06:	d02a      	beq.n	8008b5e <UART_SetConfig+0x8aa>
 8008b08:	e02d      	b.n	8008b66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b0a:	f7fd fb39 	bl	8006180 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b10:	e02f      	b.n	8008b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fd fb48 	bl	80061ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b20:	e027      	b.n	8008b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b22:	f107 0318 	add.w	r3, r7, #24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fd fc94 	bl	8006454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b30:	e01f      	b.n	8008b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b32:	4b21      	ldr	r3, [pc, #132]	@ (8008bb8 <UART_SetConfig+0x904>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d009      	beq.n	8008b52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008bb8 <UART_SetConfig+0x904>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	08db      	lsrs	r3, r3, #3
 8008b44:	f003 0303 	and.w	r3, r3, #3
 8008b48:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc0 <UART_SetConfig+0x90c>)
 8008b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b50:	e00f      	b.n	8008b72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008b52:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc0 <UART_SetConfig+0x90c>)
 8008b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b56:	e00c      	b.n	8008b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b58:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc4 <UART_SetConfig+0x910>)
 8008b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5c:	e009      	b.n	8008b72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b64:	e005      	b.n	8008b72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 81ee 	beq.w	8008f56 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7e:	4a12      	ldr	r2, [pc, #72]	@ (8008bc8 <UART_SetConfig+0x914>)
 8008b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b84:	461a      	mov	r2, r3
 8008b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b8c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	4613      	mov	r3, r2
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	4413      	add	r3, r2
 8008b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d305      	bcc.n	8008baa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d910      	bls.n	8008bcc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bb0:	e1d1      	b.n	8008f56 <UART_SetConfig+0xca2>
 8008bb2:	bf00      	nop
 8008bb4:	40011c00 	.word	0x40011c00
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	58000c00 	.word	0x58000c00
 8008bc0:	03d09000 	.word	0x03d09000
 8008bc4:	003d0900 	.word	0x003d0900
 8008bc8:	0800d2d0 	.word	0x0800d2d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bce:	2200      	movs	r2, #0
 8008bd0:	60bb      	str	r3, [r7, #8]
 8008bd2:	60fa      	str	r2, [r7, #12]
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd8:	4ac0      	ldr	r2, [pc, #768]	@ (8008edc <UART_SetConfig+0xc28>)
 8008bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2200      	movs	r2, #0
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	607a      	str	r2, [r7, #4]
 8008be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bee:	f7f7 fbf7 	bl	80003e0 <__aeabi_uldivmod>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	f04f 0300 	mov.w	r3, #0
 8008c02:	020b      	lsls	r3, r1, #8
 8008c04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c08:	0202      	lsls	r2, r0, #8
 8008c0a:	6979      	ldr	r1, [r7, #20]
 8008c0c:	6849      	ldr	r1, [r1, #4]
 8008c0e:	0849      	lsrs	r1, r1, #1
 8008c10:	2000      	movs	r0, #0
 8008c12:	460c      	mov	r4, r1
 8008c14:	4605      	mov	r5, r0
 8008c16:	eb12 0804 	adds.w	r8, r2, r4
 8008c1a:	eb43 0905 	adc.w	r9, r3, r5
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	469a      	mov	sl, r3
 8008c26:	4693      	mov	fp, r2
 8008c28:	4652      	mov	r2, sl
 8008c2a:	465b      	mov	r3, fp
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	4649      	mov	r1, r9
 8008c30:	f7f7 fbd6 	bl	80003e0 <__aeabi_uldivmod>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4613      	mov	r3, r2
 8008c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c42:	d308      	bcc.n	8008c56 <UART_SetConfig+0x9a2>
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c4a:	d204      	bcs.n	8008c56 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c52:	60da      	str	r2, [r3, #12]
 8008c54:	e17f      	b.n	8008f56 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c5c:	e17b      	b.n	8008f56 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c66:	f040 80bd 	bne.w	8008de4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008c6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	2b20      	cmp	r3, #32
 8008c70:	dc48      	bgt.n	8008d04 <UART_SetConfig+0xa50>
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	db7b      	blt.n	8008d6e <UART_SetConfig+0xaba>
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d879      	bhi.n	8008d6e <UART_SetConfig+0xaba>
 8008c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <UART_SetConfig+0x9cc>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008d0b 	.word	0x08008d0b
 8008c84:	08008d13 	.word	0x08008d13
 8008c88:	08008d6f 	.word	0x08008d6f
 8008c8c:	08008d6f 	.word	0x08008d6f
 8008c90:	08008d1b 	.word	0x08008d1b
 8008c94:	08008d6f 	.word	0x08008d6f
 8008c98:	08008d6f 	.word	0x08008d6f
 8008c9c:	08008d6f 	.word	0x08008d6f
 8008ca0:	08008d2b 	.word	0x08008d2b
 8008ca4:	08008d6f 	.word	0x08008d6f
 8008ca8:	08008d6f 	.word	0x08008d6f
 8008cac:	08008d6f 	.word	0x08008d6f
 8008cb0:	08008d6f 	.word	0x08008d6f
 8008cb4:	08008d6f 	.word	0x08008d6f
 8008cb8:	08008d6f 	.word	0x08008d6f
 8008cbc:	08008d6f 	.word	0x08008d6f
 8008cc0:	08008d3b 	.word	0x08008d3b
 8008cc4:	08008d6f 	.word	0x08008d6f
 8008cc8:	08008d6f 	.word	0x08008d6f
 8008ccc:	08008d6f 	.word	0x08008d6f
 8008cd0:	08008d6f 	.word	0x08008d6f
 8008cd4:	08008d6f 	.word	0x08008d6f
 8008cd8:	08008d6f 	.word	0x08008d6f
 8008cdc:	08008d6f 	.word	0x08008d6f
 8008ce0:	08008d6f 	.word	0x08008d6f
 8008ce4:	08008d6f 	.word	0x08008d6f
 8008ce8:	08008d6f 	.word	0x08008d6f
 8008cec:	08008d6f 	.word	0x08008d6f
 8008cf0:	08008d6f 	.word	0x08008d6f
 8008cf4:	08008d6f 	.word	0x08008d6f
 8008cf8:	08008d6f 	.word	0x08008d6f
 8008cfc:	08008d6f 	.word	0x08008d6f
 8008d00:	08008d61 	.word	0x08008d61
 8008d04:	2b40      	cmp	r3, #64	@ 0x40
 8008d06:	d02e      	beq.n	8008d66 <UART_SetConfig+0xab2>
 8008d08:	e031      	b.n	8008d6e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d0a:	f7fc f86d 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 8008d0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d10:	e033      	b.n	8008d7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d12:	f7fc f87f 	bl	8004e14 <HAL_RCC_GetPCLK2Freq>
 8008d16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d18:	e02f      	b.n	8008d7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fd fa44 	bl	80061ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d28:	e027      	b.n	8008d7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d2a:	f107 0318 	add.w	r3, r7, #24
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fd fb90 	bl	8006454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d38:	e01f      	b.n	8008d7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d3a:	4b69      	ldr	r3, [pc, #420]	@ (8008ee0 <UART_SetConfig+0xc2c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d46:	4b66      	ldr	r3, [pc, #408]	@ (8008ee0 <UART_SetConfig+0xc2c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	08db      	lsrs	r3, r3, #3
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	4a64      	ldr	r2, [pc, #400]	@ (8008ee4 <UART_SetConfig+0xc30>)
 8008d52:	fa22 f303 	lsr.w	r3, r2, r3
 8008d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d58:	e00f      	b.n	8008d7a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008d5a:	4b62      	ldr	r3, [pc, #392]	@ (8008ee4 <UART_SetConfig+0xc30>)
 8008d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d5e:	e00c      	b.n	8008d7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d60:	4b61      	ldr	r3, [pc, #388]	@ (8008ee8 <UART_SetConfig+0xc34>)
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d64:	e009      	b.n	8008d7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d6c:	e005      	b.n	8008d7a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80ea 	beq.w	8008f56 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d86:	4a55      	ldr	r2, [pc, #340]	@ (8008edc <UART_SetConfig+0xc28>)
 8008d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d94:	005a      	lsls	r2, r3, #1
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	441a      	add	r2, r3
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	2b0f      	cmp	r3, #15
 8008dac:	d916      	bls.n	8008ddc <UART_SetConfig+0xb28>
 8008dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008db4:	d212      	bcs.n	8008ddc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f023 030f 	bic.w	r3, r3, #15
 8008dbe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008dd8:	60da      	str	r2, [r3, #12]
 8008dda:	e0bc      	b.n	8008f56 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008de2:	e0b8      	b.n	8008f56 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008de4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	dc4b      	bgt.n	8008e84 <UART_SetConfig+0xbd0>
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f2c0 8087 	blt.w	8008f00 <UART_SetConfig+0xc4c>
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	f200 8084 	bhi.w	8008f00 <UART_SetConfig+0xc4c>
 8008df8:	a201      	add	r2, pc, #4	@ (adr r2, 8008e00 <UART_SetConfig+0xb4c>)
 8008dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfe:	bf00      	nop
 8008e00:	08008e8b 	.word	0x08008e8b
 8008e04:	08008e93 	.word	0x08008e93
 8008e08:	08008f01 	.word	0x08008f01
 8008e0c:	08008f01 	.word	0x08008f01
 8008e10:	08008e9b 	.word	0x08008e9b
 8008e14:	08008f01 	.word	0x08008f01
 8008e18:	08008f01 	.word	0x08008f01
 8008e1c:	08008f01 	.word	0x08008f01
 8008e20:	08008eab 	.word	0x08008eab
 8008e24:	08008f01 	.word	0x08008f01
 8008e28:	08008f01 	.word	0x08008f01
 8008e2c:	08008f01 	.word	0x08008f01
 8008e30:	08008f01 	.word	0x08008f01
 8008e34:	08008f01 	.word	0x08008f01
 8008e38:	08008f01 	.word	0x08008f01
 8008e3c:	08008f01 	.word	0x08008f01
 8008e40:	08008ebb 	.word	0x08008ebb
 8008e44:	08008f01 	.word	0x08008f01
 8008e48:	08008f01 	.word	0x08008f01
 8008e4c:	08008f01 	.word	0x08008f01
 8008e50:	08008f01 	.word	0x08008f01
 8008e54:	08008f01 	.word	0x08008f01
 8008e58:	08008f01 	.word	0x08008f01
 8008e5c:	08008f01 	.word	0x08008f01
 8008e60:	08008f01 	.word	0x08008f01
 8008e64:	08008f01 	.word	0x08008f01
 8008e68:	08008f01 	.word	0x08008f01
 8008e6c:	08008f01 	.word	0x08008f01
 8008e70:	08008f01 	.word	0x08008f01
 8008e74:	08008f01 	.word	0x08008f01
 8008e78:	08008f01 	.word	0x08008f01
 8008e7c:	08008f01 	.word	0x08008f01
 8008e80:	08008ef3 	.word	0x08008ef3
 8008e84:	2b40      	cmp	r3, #64	@ 0x40
 8008e86:	d037      	beq.n	8008ef8 <UART_SetConfig+0xc44>
 8008e88:	e03a      	b.n	8008f00 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e8a:	f7fb ffad 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 8008e8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e90:	e03c      	b.n	8008f0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e92:	f7fb ffbf 	bl	8004e14 <HAL_RCC_GetPCLK2Freq>
 8008e96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e98:	e038      	b.n	8008f0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fd f984 	bl	80061ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea8:	e030      	b.n	8008f0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eaa:	f107 0318 	add.w	r3, r7, #24
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fd fad0 	bl	8006454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb8:	e028      	b.n	8008f0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eba:	4b09      	ldr	r3, [pc, #36]	@ (8008ee0 <UART_SetConfig+0xc2c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0320 	and.w	r3, r3, #32
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d012      	beq.n	8008eec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ec6:	4b06      	ldr	r3, [pc, #24]	@ (8008ee0 <UART_SetConfig+0xc2c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	08db      	lsrs	r3, r3, #3
 8008ecc:	f003 0303 	and.w	r3, r3, #3
 8008ed0:	4a04      	ldr	r2, [pc, #16]	@ (8008ee4 <UART_SetConfig+0xc30>)
 8008ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ed8:	e018      	b.n	8008f0c <UART_SetConfig+0xc58>
 8008eda:	bf00      	nop
 8008edc:	0800d2d0 	.word	0x0800d2d0
 8008ee0:	58024400 	.word	0x58024400
 8008ee4:	03d09000 	.word	0x03d09000
 8008ee8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008eec:	4b24      	ldr	r3, [pc, #144]	@ (8008f80 <UART_SetConfig+0xccc>)
 8008eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef0:	e00c      	b.n	8008f0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ef2:	4b24      	ldr	r3, [pc, #144]	@ (8008f84 <UART_SetConfig+0xcd0>)
 8008ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef6:	e009      	b.n	8008f0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ef8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008efe:	e005      	b.n	8008f0c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f0a:	bf00      	nop
    }

    if (pclk != 0U)
 8008f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d021      	beq.n	8008f56 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f16:	4a1c      	ldr	r2, [pc, #112]	@ (8008f88 <UART_SetConfig+0xcd4>)
 8008f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f20:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	085b      	lsrs	r3, r3, #1
 8008f2a:	441a      	add	r2, r3
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f34:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f38:	2b0f      	cmp	r3, #15
 8008f3a:	d909      	bls.n	8008f50 <UART_SetConfig+0xc9c>
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f42:	d205      	bcs.n	8008f50 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60da      	str	r2, [r3, #12]
 8008f4e:	e002      	b.n	8008f56 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f72:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3748      	adds	r7, #72	@ 0x48
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f80:	03d09000 	.word	0x03d09000
 8008f84:	003d0900 	.word	0x003d0900
 8008f88:	0800d2d0 	.word	0x0800d2d0

08008f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffe:	f003 0304 	and.w	r3, r3, #4
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01a      	beq.n	80090a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800908a:	d10a      	bne.n	80090a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00a      	beq.n	80090c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	605a      	str	r2, [r3, #4]
  }
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b098      	sub	sp, #96	@ 0x60
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090e0:	f7f9 f998 	bl	8002414 <HAL_GetTick>
 80090e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0308 	and.w	r3, r3, #8
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d12f      	bne.n	8009154 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090fc:	2200      	movs	r2, #0
 80090fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f88e 	bl	8009224 <UART_WaitOnFlagUntilTimeout>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d022      	beq.n	8009154 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009116:	e853 3f00 	ldrex	r3, [r3]
 800911a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800911c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800911e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009122:	653b      	str	r3, [r7, #80]	@ 0x50
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	461a      	mov	r2, r3
 800912a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800912c:	647b      	str	r3, [r7, #68]	@ 0x44
 800912e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800913a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e6      	bne.n	800910e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e063      	b.n	800921c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b04      	cmp	r3, #4
 8009160:	d149      	bne.n	80091f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009162:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800916a:	2200      	movs	r2, #0
 800916c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f857 	bl	8009224 <UART_WaitOnFlagUntilTimeout>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d03c      	beq.n	80091f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	623b      	str	r3, [r7, #32]
   return(result);
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800919a:	633b      	str	r3, [r7, #48]	@ 0x30
 800919c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e6      	bne.n	800917c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3308      	adds	r3, #8
 80091b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f023 0301 	bic.w	r3, r3, #1
 80091c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3308      	adds	r3, #8
 80091cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091ce:	61fa      	str	r2, [r7, #28]
 80091d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	69b9      	ldr	r1, [r7, #24]
 80091d4:	69fa      	ldr	r2, [r7, #28]
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	617b      	str	r3, [r7, #20]
   return(result);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1e5      	bne.n	80091ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e012      	b.n	800921c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3758      	adds	r7, #88	@ 0x58
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	4613      	mov	r3, r2
 8009232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009234:	e04f      	b.n	80092d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923c:	d04b      	beq.n	80092d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800923e:	f7f9 f8e9 	bl	8002414 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	429a      	cmp	r2, r3
 800924c:	d302      	bcc.n	8009254 <UART_WaitOnFlagUntilTimeout+0x30>
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e04e      	b.n	80092f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0304 	and.w	r3, r3, #4
 8009262:	2b00      	cmp	r3, #0
 8009264:	d037      	beq.n	80092d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b80      	cmp	r3, #128	@ 0x80
 800926a:	d034      	beq.n	80092d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2b40      	cmp	r3, #64	@ 0x40
 8009270:	d031      	beq.n	80092d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	f003 0308 	and.w	r3, r3, #8
 800927c:	2b08      	cmp	r3, #8
 800927e:	d110      	bne.n	80092a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2208      	movs	r2, #8
 8009286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 f95b 	bl	8009544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2208      	movs	r2, #8
 8009292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e029      	b.n	80092f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092b0:	d111      	bne.n	80092d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f941 	bl	8009544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e00f      	b.n	80092f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4013      	ands	r3, r2
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	bf0c      	ite	eq
 80092e6:	2301      	moveq	r3, #1
 80092e8:	2300      	movne	r3, #0
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	461a      	mov	r2, r3
 80092ee:	79fb      	ldrb	r3, [r7, #7]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d0a0      	beq.n	8009236 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009300:	b480      	push	{r7}
 8009302:	b0a3      	sub	sp, #140	@ 0x8c
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4613      	mov	r3, r2
 800930c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	88fa      	ldrh	r2, [r7, #6]
 8009318:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	88fa      	ldrh	r2, [r7, #6]
 8009320:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009332:	d10e      	bne.n	8009352 <UART_Start_Receive_IT+0x52>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d105      	bne.n	8009348 <UART_Start_Receive_IT+0x48>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009342:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009346:	e02d      	b.n	80093a4 <UART_Start_Receive_IT+0xa4>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	22ff      	movs	r2, #255	@ 0xff
 800934c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009350:	e028      	b.n	80093a4 <UART_Start_Receive_IT+0xa4>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10d      	bne.n	8009376 <UART_Start_Receive_IT+0x76>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d104      	bne.n	800936c <UART_Start_Receive_IT+0x6c>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	22ff      	movs	r2, #255	@ 0xff
 8009366:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800936a:	e01b      	b.n	80093a4 <UART_Start_Receive_IT+0xa4>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	227f      	movs	r2, #127	@ 0x7f
 8009370:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009374:	e016      	b.n	80093a4 <UART_Start_Receive_IT+0xa4>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800937e:	d10d      	bne.n	800939c <UART_Start_Receive_IT+0x9c>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d104      	bne.n	8009392 <UART_Start_Receive_IT+0x92>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	227f      	movs	r2, #127	@ 0x7f
 800938c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009390:	e008      	b.n	80093a4 <UART_Start_Receive_IT+0xa4>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	223f      	movs	r2, #63	@ 0x3f
 8009396:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800939a:	e003      	b.n	80093a4 <UART_Start_Receive_IT+0xa4>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2222      	movs	r2, #34	@ 0x22
 80093b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3308      	adds	r3, #8
 80093ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80093c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093c6:	f043 0301 	orr.w	r3, r3, #1
 80093ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80093d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80093da:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80093de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80093e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e3      	bne.n	80093b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093f4:	d14f      	bne.n	8009496 <UART_Start_Receive_IT+0x196>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093fc:	88fa      	ldrh	r2, [r7, #6]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d349      	bcc.n	8009496 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800940a:	d107      	bne.n	800941c <UART_Start_Receive_IT+0x11c>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4a47      	ldr	r2, [pc, #284]	@ (8009534 <UART_Start_Receive_IT+0x234>)
 8009418:	675a      	str	r2, [r3, #116]	@ 0x74
 800941a:	e002      	b.n	8009422 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a46      	ldr	r2, [pc, #280]	@ (8009538 <UART_Start_Receive_IT+0x238>)
 8009420:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d01a      	beq.n	8009460 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800943a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800943e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800944c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800944e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009452:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800945a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e4      	bne.n	800942a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3308      	adds	r3, #8
 8009466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009476:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3308      	adds	r3, #8
 800947e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009480:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009482:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800948e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e5      	bne.n	8009460 <UART_Start_Receive_IT+0x160>
 8009494:	e046      	b.n	8009524 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800949e:	d107      	bne.n	80094b0 <UART_Start_Receive_IT+0x1b0>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d103      	bne.n	80094b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	4a24      	ldr	r2, [pc, #144]	@ (800953c <UART_Start_Receive_IT+0x23c>)
 80094ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80094ae:	e002      	b.n	80094b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a23      	ldr	r2, [pc, #140]	@ (8009540 <UART_Start_Receive_IT+0x240>)
 80094b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d019      	beq.n	80094f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c6:	e853 3f00 	ldrex	r3, [r3]
 80094ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80094d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	461a      	mov	r2, r3
 80094da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094de:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80094ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e6      	bne.n	80094be <UART_Start_Receive_IT+0x1be>
 80094f0:	e018      	b.n	8009524 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f043 0320 	orr.w	r3, r3, #32
 8009506:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009510:	623b      	str	r3, [r7, #32]
 8009512:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	69f9      	ldr	r1, [r7, #28]
 8009516:	6a3a      	ldr	r2, [r7, #32]
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	61bb      	str	r3, [r7, #24]
   return(result);
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e6      	bne.n	80094f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	378c      	adds	r7, #140	@ 0x8c
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	08009d61 	.word	0x08009d61
 8009538:	080099fd 	.word	0x080099fd
 800953c:	08009845 	.word	0x08009845
 8009540:	0800968d 	.word	0x0800968d

08009544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b095      	sub	sp, #84	@ 0x54
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009560:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800956a:	643b      	str	r3, [r7, #64]	@ 0x40
 800956c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009570:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e6      	bne.n	800954c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3308      	adds	r3, #8
 8009584:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	e853 3f00 	ldrex	r3, [r3]
 800958c:	61fb      	str	r3, [r7, #28]
   return(result);
 800958e:	69fa      	ldr	r2, [r7, #28]
 8009590:	4b1e      	ldr	r3, [pc, #120]	@ (800960c <UART_EndRxTransfer+0xc8>)
 8009592:	4013      	ands	r3, r2
 8009594:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3308      	adds	r3, #8
 800959c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800959e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e5      	bne.n	800957e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d118      	bne.n	80095ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f023 0310 	bic.w	r3, r3, #16
 80095ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095d8:	61bb      	str	r3, [r7, #24]
 80095da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	6979      	ldr	r1, [r7, #20]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	613b      	str	r3, [r7, #16]
   return(result);
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e6      	bne.n	80095ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009600:	bf00      	nop
 8009602:	3754      	adds	r7, #84	@ 0x54
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	effffffe 	.word	0xeffffffe

08009610 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f7fe fe2e 	bl	8008288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800962c:	bf00      	nop
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	60bb      	str	r3, [r7, #8]
   return(result);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	61bb      	str	r3, [r7, #24]
 800965c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6979      	ldr	r1, [r7, #20]
 8009660:	69ba      	ldr	r2, [r7, #24]
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	613b      	str	r3, [r7, #16]
   return(result);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e6      	bne.n	800963c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2220      	movs	r2, #32
 8009672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7fe fdf9 	bl	8008274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009682:	bf00      	nop
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b09c      	sub	sp, #112	@ 0x70
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800969a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096a4:	2b22      	cmp	r3, #34	@ 0x22
 80096a6:	f040 80be 	bne.w	8009826 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80096b8:	b2d9      	uxtb	r1, r3
 80096ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c4:	400a      	ands	r2, r1
 80096c6:	b2d2      	uxtb	r2, r2
 80096c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096da:	b29b      	uxth	r3, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29a      	uxth	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f040 80a1 	bne.w	8009836 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009712:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009714:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009718:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e6      	bne.n	80096f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3308      	adds	r3, #8
 800972c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009738:	f023 0301 	bic.w	r3, r3, #1
 800973c:	667b      	str	r3, [r7, #100]	@ 0x64
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3308      	adds	r3, #8
 8009744:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009746:	647a      	str	r2, [r7, #68]	@ 0x44
 8009748:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800974c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e5      	bne.n	8009726 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2220      	movs	r2, #32
 800975e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a33      	ldr	r2, [pc, #204]	@ (8009840 <UART_RxISR_8BIT+0x1b4>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d01f      	beq.n	80097b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d018      	beq.n	80097b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978e:	e853 3f00 	ldrex	r3, [r3]
 8009792:	623b      	str	r3, [r7, #32]
   return(result);
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800979a:	663b      	str	r3, [r7, #96]	@ 0x60
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80097a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097ac:	e841 2300 	strex	r3, r2, [r1]
 80097b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1e6      	bne.n	8009786 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d12e      	bne.n	800981e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0310 	bic.w	r3, r3, #16
 80097da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097e4:	61fb      	str	r3, [r7, #28]
 80097e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	69b9      	ldr	r1, [r7, #24]
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	617b      	str	r3, [r7, #20]
   return(result);
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e6      	bne.n	80097c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	f003 0310 	and.w	r3, r3, #16
 8009802:	2b10      	cmp	r3, #16
 8009804:	d103      	bne.n	800980e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2210      	movs	r2, #16
 800980c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7fe fd40 	bl	800829c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800981c:	e00b      	b.n	8009836 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7f7 f800 	bl	8000824 <HAL_UART_RxCpltCallback>
}
 8009824:	e007      	b.n	8009836 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	699a      	ldr	r2, [r3, #24]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f042 0208 	orr.w	r2, r2, #8
 8009834:	619a      	str	r2, [r3, #24]
}
 8009836:	bf00      	nop
 8009838:	3770      	adds	r7, #112	@ 0x70
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	58000c00 	.word	0x58000c00

08009844 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b09c      	sub	sp, #112	@ 0x70
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009852:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800985c:	2b22      	cmp	r3, #34	@ 0x22
 800985e:	f040 80be 	bne.w	80099de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009868:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009870:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009872:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009876:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800987a:	4013      	ands	r3, r2
 800987c:	b29a      	uxth	r2, r3
 800987e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009880:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009886:	1c9a      	adds	r2, r3, #2
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009892:	b29b      	uxth	r3, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f040 80a1 	bne.w	80099ee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80098cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098d2:	e841 2300 	strex	r3, r2, [r1]
 80098d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80098d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1e6      	bne.n	80098ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3308      	adds	r3, #8
 80098e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f0:	f023 0301 	bic.w	r3, r3, #1
 80098f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3308      	adds	r3, #8
 80098fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8009900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009906:	e841 2300 	strex	r3, r2, [r1]
 800990a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1e5      	bne.n	80098de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a33      	ldr	r2, [pc, #204]	@ (80099f8 <UART_RxISR_16BIT+0x1b4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d01f      	beq.n	8009970 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d018      	beq.n	8009970 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	e853 3f00 	ldrex	r3, [r3]
 800994a:	61fb      	str	r3, [r7, #28]
   return(result);
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009952:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800995c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800995e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009964:	e841 2300 	strex	r3, r2, [r1]
 8009968:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1e6      	bne.n	800993e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009974:	2b01      	cmp	r3, #1
 8009976:	d12e      	bne.n	80099d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	60bb      	str	r3, [r7, #8]
   return(result);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f023 0310 	bic.w	r3, r3, #16
 8009992:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800999c:	61bb      	str	r3, [r7, #24]
 800999e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a0:	6979      	ldr	r1, [r7, #20]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	e841 2300 	strex	r3, r2, [r1]
 80099a8:	613b      	str	r3, [r7, #16]
   return(result);
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e6      	bne.n	800997e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	f003 0310 	and.w	r3, r3, #16
 80099ba:	2b10      	cmp	r3, #16
 80099bc:	d103      	bne.n	80099c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2210      	movs	r2, #16
 80099c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7fe fc64 	bl	800829c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099d4:	e00b      	b.n	80099ee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7f6 ff24 	bl	8000824 <HAL_UART_RxCpltCallback>
}
 80099dc:	e007      	b.n	80099ee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	699a      	ldr	r2, [r3, #24]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0208 	orr.w	r2, r2, #8
 80099ec:	619a      	str	r2, [r3, #24]
}
 80099ee:	bf00      	nop
 80099f0:	3770      	adds	r7, #112	@ 0x70
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	58000c00 	.word	0x58000c00

080099fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b0ac      	sub	sp, #176	@ 0xb0
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	69db      	ldr	r3, [r3, #28]
 8009a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a32:	2b22      	cmp	r3, #34	@ 0x22
 8009a34:	f040 8181 	bne.w	8009d3a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a3e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a42:	e124      	b.n	8009c8e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a4e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009a52:	b2d9      	uxtb	r1, r3
 8009a54:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a5e:	400a      	ands	r2, r1
 8009a60:	b2d2      	uxtb	r2, r2
 8009a62:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	3b01      	subs	r3, #1
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d053      	beq.n	8009b3e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d011      	beq.n	8009ac6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00b      	beq.n	8009ac6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009abc:	f043 0201 	orr.w	r2, r3, #1
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aca:	f003 0302 	and.w	r3, r3, #2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d011      	beq.n	8009af6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00b      	beq.n	8009af6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aec:	f043 0204 	orr.w	r2, r3, #4
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009afa:	f003 0304 	and.w	r3, r3, #4
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d011      	beq.n	8009b26 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00b      	beq.n	8009b26 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2204      	movs	r2, #4
 8009b14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b1c:	f043 0202 	orr.w	r2, r3, #2
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d006      	beq.n	8009b3e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7fe fba9 	bl	8008288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f040 80a1 	bne.w	8009c8e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b70:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009b74:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009b7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e4      	bne.n	8009b4c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3308      	adds	r3, #8
 8009b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009b92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b94:	4b6f      	ldr	r3, [pc, #444]	@ (8009d54 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009b96:	4013      	ands	r3, r2
 8009b98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ba6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009ba8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009bac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009bb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e3      	bne.n	8009b82 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a61      	ldr	r2, [pc, #388]	@ (8009d58 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d021      	beq.n	8009c1c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d01a      	beq.n	8009c1c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bee:	e853 3f00 	ldrex	r3, [r3]
 8009bf2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009bfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c08:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c0a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c10:	e841 2300 	strex	r3, r2, [r1]
 8009c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e4      	bne.n	8009be6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d130      	bne.n	8009c86 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3a:	f023 0310 	bic.w	r3, r3, #16
 8009c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c54:	e841 2300 	strex	r3, r2, [r1]
 8009c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e4      	bne.n	8009c2a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	f003 0310 	and.w	r3, r3, #16
 8009c6a:	2b10      	cmp	r3, #16
 8009c6c:	d103      	bne.n	8009c76 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2210      	movs	r2, #16
 8009c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7fe fb0c 	bl	800829c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009c84:	e00e      	b.n	8009ca4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7f6 fdcc 	bl	8000824 <HAL_UART_RxCpltCallback>
        break;
 8009c8c:	e00a      	b.n	8009ca4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c8e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d006      	beq.n	8009ca4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8009c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c9a:	f003 0320 	and.w	r3, r3, #32
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f47f aed0 	bne.w	8009a44 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009caa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009cae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d049      	beq.n	8009d4a <UART_RxISR_8BIT_FIFOEN+0x34e>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cbc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d242      	bcs.n	8009d4a <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	e853 3f00 	ldrex	r3, [r3]
 8009cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf0:	e841 2300 	strex	r3, r2, [r1]
 8009cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1e3      	bne.n	8009cc4 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a17      	ldr	r2, [pc, #92]	@ (8009d5c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009d00:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f043 0320 	orr.w	r3, r3, #32
 8009d16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d24:	61bb      	str	r3, [r7, #24]
 8009d26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d28:	6979      	ldr	r1, [r7, #20]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	e841 2300 	strex	r3, r2, [r1]
 8009d30:	613b      	str	r3, [r7, #16]
   return(result);
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1e4      	bne.n	8009d02 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d38:	e007      	b.n	8009d4a <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	699a      	ldr	r2, [r3, #24]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f042 0208 	orr.w	r2, r2, #8
 8009d48:	619a      	str	r2, [r3, #24]
}
 8009d4a:	bf00      	nop
 8009d4c:	37b0      	adds	r7, #176	@ 0xb0
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	effffffe 	.word	0xeffffffe
 8009d58:	58000c00 	.word	0x58000c00
 8009d5c:	0800968d 	.word	0x0800968d

08009d60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b0ae      	sub	sp, #184	@ 0xb8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d6e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d96:	2b22      	cmp	r3, #34	@ 0x22
 8009d98:	f040 8185 	bne.w	800a0a6 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009da2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009da6:	e128      	b.n	8009ffa <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dae:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009dba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009dbe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd0:	1c9a      	adds	r2, r3, #2
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d053      	beq.n	8009ea6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d011      	beq.n	8009e2e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e24:	f043 0201 	orr.w	r2, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d011      	beq.n	8009e5e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e54:	f043 0204 	orr.w	r2, r3, #4
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e62:	f003 0304 	and.w	r3, r3, #4
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d011      	beq.n	8009e8e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00b      	beq.n	8009e8e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e84:	f043 0202 	orr.w	r2, r3, #2
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d006      	beq.n	8009ea6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7fe f9f5 	bl	8008288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f040 80a3 	bne.w	8009ffa <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ed6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009eda:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ee2:	e841 2300 	strex	r3, r2, [r1]
 8009ee6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1e2      	bne.n	8009eb4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ef8:	e853 3f00 	ldrex	r3, [r3]
 8009efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009efe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009f00:	4b6f      	ldr	r3, [pc, #444]	@ (800a0c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009f02:	4013      	ands	r3, r2
 8009f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009f12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e3      	bne.n	8009eee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a61      	ldr	r2, [pc, #388]	@ (800a0c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d021      	beq.n	8009f88 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d01a      	beq.n	8009f88 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f5a:	e853 3f00 	ldrex	r3, [r3]
 8009f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009f74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f76:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e4      	bne.n	8009f52 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d130      	bne.n	8009ff2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9e:	e853 3f00 	ldrex	r3, [r3]
 8009fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa6:	f023 0310 	bic.w	r3, r3, #16
 8009faa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e4      	bne.n	8009f96 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	f003 0310 	and.w	r3, r3, #16
 8009fd6:	2b10      	cmp	r3, #16
 8009fd8:	d103      	bne.n	8009fe2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2210      	movs	r2, #16
 8009fe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7fe f956 	bl	800829c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009ff0:	e00e      	b.n	800a010 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7f6 fc16 	bl	8000824 <HAL_UART_RxCpltCallback>
        break;
 8009ff8:	e00a      	b.n	800a010 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ffa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d006      	beq.n	800a010 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800a002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f47f aecc 	bne.w	8009da8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a016:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a01a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d049      	beq.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0x356>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a028:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d242      	bcs.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3308      	adds	r3, #8
 800a036:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	e853 3f00 	ldrex	r3, [r3]
 800a03e:	623b      	str	r3, [r7, #32]
   return(result);
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a046:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3308      	adds	r3, #8
 800a050:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a054:	633a      	str	r2, [r7, #48]	@ 0x30
 800a056:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a058:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a05a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a05c:	e841 2300 	strex	r3, r2, [r1]
 800a060:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1e3      	bne.n	800a030 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a17      	ldr	r2, [pc, #92]	@ (800a0c8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a06c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	e853 3f00 	ldrex	r3, [r3]
 800a07a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f043 0320 	orr.w	r3, r3, #32
 800a082:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a090:	61fb      	str	r3, [r7, #28]
 800a092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	69b9      	ldr	r1, [r7, #24]
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	617b      	str	r3, [r7, #20]
   return(result);
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e4      	bne.n	800a06e <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0a4:	e007      	b.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	699a      	ldr	r2, [r3, #24]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f042 0208 	orr.w	r2, r2, #8
 800a0b4:	619a      	str	r2, [r3, #24]
}
 800a0b6:	bf00      	nop
 800a0b8:	37b8      	adds	r7, #184	@ 0xb8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	effffffe 	.word	0xeffffffe
 800a0c4:	58000c00 	.word	0x58000c00
 800a0c8:	08009845 	.word	0x08009845

0800a0cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a116:	2b01      	cmp	r3, #1
 800a118:	d101      	bne.n	800a11e <HAL_UARTEx_DisableFifoMode+0x16>
 800a11a:	2302      	movs	r3, #2
 800a11c:	e027      	b.n	800a16e <HAL_UARTEx_DisableFifoMode+0x66>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2224      	movs	r2, #36	@ 0x24
 800a12a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 0201 	bic.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a14c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2220      	movs	r2, #32
 800a160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d101      	bne.n	800a192 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a18e:	2302      	movs	r3, #2
 800a190:	e02d      	b.n	800a1ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2224      	movs	r2, #36	@ 0x24
 800a19e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 0201 	bic.w	r2, r2, #1
 800a1b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f850 	bl	800a274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a206:	2b01      	cmp	r3, #1
 800a208:	d101      	bne.n	800a20e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a20a:	2302      	movs	r3, #2
 800a20c:	e02d      	b.n	800a26a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2224      	movs	r2, #36	@ 0x24
 800a21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 0201 	bic.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f812 	bl	800a274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2220      	movs	r2, #32
 800a25c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a280:	2b00      	cmp	r3, #0
 800a282:	d108      	bne.n	800a296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a294:	e031      	b.n	800a2fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a296:	2310      	movs	r3, #16
 800a298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a29a:	2310      	movs	r3, #16
 800a29c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	0e5b      	lsrs	r3, r3, #25
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	f003 0307 	and.w	r3, r3, #7
 800a2ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	0f5b      	lsrs	r3, r3, #29
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	7b3a      	ldrb	r2, [r7, #12]
 800a2c2:	4911      	ldr	r1, [pc, #68]	@ (800a308 <UARTEx_SetNbDataToProcess+0x94>)
 800a2c4:	5c8a      	ldrb	r2, [r1, r2]
 800a2c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2ca:	7b3a      	ldrb	r2, [r7, #12]
 800a2cc:	490f      	ldr	r1, [pc, #60]	@ (800a30c <UARTEx_SetNbDataToProcess+0x98>)
 800a2ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	7b7a      	ldrb	r2, [r7, #13]
 800a2e0:	4909      	ldr	r1, [pc, #36]	@ (800a308 <UARTEx_SetNbDataToProcess+0x94>)
 800a2e2:	5c8a      	ldrb	r2, [r1, r2]
 800a2e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2e8:	7b7a      	ldrb	r2, [r7, #13]
 800a2ea:	4908      	ldr	r1, [pc, #32]	@ (800a30c <UARTEx_SetNbDataToProcess+0x98>)
 800a2ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2fa:	bf00      	nop
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	0800d2e8 	.word	0x0800d2e8
 800a30c:	0800d2f0 	.word	0x0800d2f0

0800a310 <__cvt>:
 800a310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a312:	ed2d 8b02 	vpush	{d8}
 800a316:	eeb0 8b40 	vmov.f64	d8, d0
 800a31a:	b085      	sub	sp, #20
 800a31c:	4617      	mov	r7, r2
 800a31e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a320:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a322:	ee18 2a90 	vmov	r2, s17
 800a326:	f025 0520 	bic.w	r5, r5, #32
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	bfb6      	itet	lt
 800a32e:	222d      	movlt	r2, #45	@ 0x2d
 800a330:	2200      	movge	r2, #0
 800a332:	eeb1 8b40 	vneglt.f64	d8, d0
 800a336:	2d46      	cmp	r5, #70	@ 0x46
 800a338:	460c      	mov	r4, r1
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	d004      	beq.n	800a348 <__cvt+0x38>
 800a33e:	2d45      	cmp	r5, #69	@ 0x45
 800a340:	d100      	bne.n	800a344 <__cvt+0x34>
 800a342:	3401      	adds	r4, #1
 800a344:	2102      	movs	r1, #2
 800a346:	e000      	b.n	800a34a <__cvt+0x3a>
 800a348:	2103      	movs	r1, #3
 800a34a:	ab03      	add	r3, sp, #12
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	ab02      	add	r3, sp, #8
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	4622      	mov	r2, r4
 800a354:	4633      	mov	r3, r6
 800a356:	eeb0 0b48 	vmov.f64	d0, d8
 800a35a:	f000 ff39 	bl	800b1d0 <_dtoa_r>
 800a35e:	2d47      	cmp	r5, #71	@ 0x47
 800a360:	d114      	bne.n	800a38c <__cvt+0x7c>
 800a362:	07fb      	lsls	r3, r7, #31
 800a364:	d50a      	bpl.n	800a37c <__cvt+0x6c>
 800a366:	1902      	adds	r2, r0, r4
 800a368:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a370:	bf08      	it	eq
 800a372:	9203      	streq	r2, [sp, #12]
 800a374:	2130      	movs	r1, #48	@ 0x30
 800a376:	9b03      	ldr	r3, [sp, #12]
 800a378:	4293      	cmp	r3, r2
 800a37a:	d319      	bcc.n	800a3b0 <__cvt+0xa0>
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a380:	1a1b      	subs	r3, r3, r0
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	b005      	add	sp, #20
 800a386:	ecbd 8b02 	vpop	{d8}
 800a38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a38c:	2d46      	cmp	r5, #70	@ 0x46
 800a38e:	eb00 0204 	add.w	r2, r0, r4
 800a392:	d1e9      	bne.n	800a368 <__cvt+0x58>
 800a394:	7803      	ldrb	r3, [r0, #0]
 800a396:	2b30      	cmp	r3, #48	@ 0x30
 800a398:	d107      	bne.n	800a3aa <__cvt+0x9a>
 800a39a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a2:	bf1c      	itt	ne
 800a3a4:	f1c4 0401 	rsbne	r4, r4, #1
 800a3a8:	6034      	strne	r4, [r6, #0]
 800a3aa:	6833      	ldr	r3, [r6, #0]
 800a3ac:	441a      	add	r2, r3
 800a3ae:	e7db      	b.n	800a368 <__cvt+0x58>
 800a3b0:	1c5c      	adds	r4, r3, #1
 800a3b2:	9403      	str	r4, [sp, #12]
 800a3b4:	7019      	strb	r1, [r3, #0]
 800a3b6:	e7de      	b.n	800a376 <__cvt+0x66>

0800a3b8 <__exponent>:
 800a3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ba:	2900      	cmp	r1, #0
 800a3bc:	bfba      	itte	lt
 800a3be:	4249      	neglt	r1, r1
 800a3c0:	232d      	movlt	r3, #45	@ 0x2d
 800a3c2:	232b      	movge	r3, #43	@ 0x2b
 800a3c4:	2909      	cmp	r1, #9
 800a3c6:	7002      	strb	r2, [r0, #0]
 800a3c8:	7043      	strb	r3, [r0, #1]
 800a3ca:	dd29      	ble.n	800a420 <__exponent+0x68>
 800a3cc:	f10d 0307 	add.w	r3, sp, #7
 800a3d0:	461d      	mov	r5, r3
 800a3d2:	270a      	movs	r7, #10
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	fbb1 f6f7 	udiv	r6, r1, r7
 800a3da:	fb07 1416 	mls	r4, r7, r6, r1
 800a3de:	3430      	adds	r4, #48	@ 0x30
 800a3e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	2c63      	cmp	r4, #99	@ 0x63
 800a3e8:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3ec:	4631      	mov	r1, r6
 800a3ee:	dcf1      	bgt.n	800a3d4 <__exponent+0x1c>
 800a3f0:	3130      	adds	r1, #48	@ 0x30
 800a3f2:	1e94      	subs	r4, r2, #2
 800a3f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a3f8:	1c41      	adds	r1, r0, #1
 800a3fa:	4623      	mov	r3, r4
 800a3fc:	42ab      	cmp	r3, r5
 800a3fe:	d30a      	bcc.n	800a416 <__exponent+0x5e>
 800a400:	f10d 0309 	add.w	r3, sp, #9
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	42ac      	cmp	r4, r5
 800a408:	bf88      	it	hi
 800a40a:	2300      	movhi	r3, #0
 800a40c:	3302      	adds	r3, #2
 800a40e:	4403      	add	r3, r0
 800a410:	1a18      	subs	r0, r3, r0
 800a412:	b003      	add	sp, #12
 800a414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a416:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a41a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a41e:	e7ed      	b.n	800a3fc <__exponent+0x44>
 800a420:	2330      	movs	r3, #48	@ 0x30
 800a422:	3130      	adds	r1, #48	@ 0x30
 800a424:	7083      	strb	r3, [r0, #2]
 800a426:	70c1      	strb	r1, [r0, #3]
 800a428:	1d03      	adds	r3, r0, #4
 800a42a:	e7f1      	b.n	800a410 <__exponent+0x58>
 800a42c:	0000      	movs	r0, r0
	...

0800a430 <_printf_float>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	b08d      	sub	sp, #52	@ 0x34
 800a436:	460c      	mov	r4, r1
 800a438:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a43c:	4616      	mov	r6, r2
 800a43e:	461f      	mov	r7, r3
 800a440:	4605      	mov	r5, r0
 800a442:	f000 fdb5 	bl	800afb0 <_localeconv_r>
 800a446:	f8d0 b000 	ldr.w	fp, [r0]
 800a44a:	4658      	mov	r0, fp
 800a44c:	f7f5 ffc0 	bl	80003d0 <strlen>
 800a450:	2300      	movs	r3, #0
 800a452:	930a      	str	r3, [sp, #40]	@ 0x28
 800a454:	f8d8 3000 	ldr.w	r3, [r8]
 800a458:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a45c:	6822      	ldr	r2, [r4, #0]
 800a45e:	9005      	str	r0, [sp, #20]
 800a460:	3307      	adds	r3, #7
 800a462:	f023 0307 	bic.w	r3, r3, #7
 800a466:	f103 0108 	add.w	r1, r3, #8
 800a46a:	f8c8 1000 	str.w	r1, [r8]
 800a46e:	ed93 0b00 	vldr	d0, [r3]
 800a472:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a6d0 <_printf_float+0x2a0>
 800a476:	eeb0 7bc0 	vabs.f64	d7, d0
 800a47a:	eeb4 7b46 	vcmp.f64	d7, d6
 800a47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a482:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a486:	dd24      	ble.n	800a4d2 <_printf_float+0xa2>
 800a488:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a490:	d502      	bpl.n	800a498 <_printf_float+0x68>
 800a492:	232d      	movs	r3, #45	@ 0x2d
 800a494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a498:	498f      	ldr	r1, [pc, #572]	@ (800a6d8 <_printf_float+0x2a8>)
 800a49a:	4b90      	ldr	r3, [pc, #576]	@ (800a6dc <_printf_float+0x2ac>)
 800a49c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a4a0:	bf8c      	ite	hi
 800a4a2:	4688      	movhi	r8, r1
 800a4a4:	4698      	movls	r8, r3
 800a4a6:	f022 0204 	bic.w	r2, r2, #4
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	6123      	str	r3, [r4, #16]
 800a4ae:	6022      	str	r2, [r4, #0]
 800a4b0:	f04f 0a00 	mov.w	sl, #0
 800a4b4:	9700      	str	r7, [sp, #0]
 800a4b6:	4633      	mov	r3, r6
 800a4b8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f000 f9d1 	bl	800a864 <_printf_common>
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	f040 8089 	bne.w	800a5da <_printf_float+0x1aa>
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4cc:	b00d      	add	sp, #52	@ 0x34
 800a4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d2:	eeb4 0b40 	vcmp.f64	d0, d0
 800a4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4da:	d709      	bvc.n	800a4f0 <_printf_float+0xc0>
 800a4dc:	ee10 3a90 	vmov	r3, s1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bfbc      	itt	lt
 800a4e4:	232d      	movlt	r3, #45	@ 0x2d
 800a4e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a4ea:	497d      	ldr	r1, [pc, #500]	@ (800a6e0 <_printf_float+0x2b0>)
 800a4ec:	4b7d      	ldr	r3, [pc, #500]	@ (800a6e4 <_printf_float+0x2b4>)
 800a4ee:	e7d5      	b.n	800a49c <_printf_float+0x6c>
 800a4f0:	6863      	ldr	r3, [r4, #4]
 800a4f2:	1c59      	adds	r1, r3, #1
 800a4f4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a4f8:	d139      	bne.n	800a56e <_printf_float+0x13e>
 800a4fa:	2306      	movs	r3, #6
 800a4fc:	6063      	str	r3, [r4, #4]
 800a4fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a502:	2300      	movs	r3, #0
 800a504:	6022      	str	r2, [r4, #0]
 800a506:	9303      	str	r3, [sp, #12]
 800a508:	ab0a      	add	r3, sp, #40	@ 0x28
 800a50a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a50e:	ab09      	add	r3, sp, #36	@ 0x24
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	6861      	ldr	r1, [r4, #4]
 800a514:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a518:	4628      	mov	r0, r5
 800a51a:	f7ff fef9 	bl	800a310 <__cvt>
 800a51e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a522:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a524:	4680      	mov	r8, r0
 800a526:	d129      	bne.n	800a57c <_printf_float+0x14c>
 800a528:	1cc8      	adds	r0, r1, #3
 800a52a:	db02      	blt.n	800a532 <_printf_float+0x102>
 800a52c:	6863      	ldr	r3, [r4, #4]
 800a52e:	4299      	cmp	r1, r3
 800a530:	dd41      	ble.n	800a5b6 <_printf_float+0x186>
 800a532:	f1a9 0902 	sub.w	r9, r9, #2
 800a536:	fa5f f989 	uxtb.w	r9, r9
 800a53a:	3901      	subs	r1, #1
 800a53c:	464a      	mov	r2, r9
 800a53e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a542:	9109      	str	r1, [sp, #36]	@ 0x24
 800a544:	f7ff ff38 	bl	800a3b8 <__exponent>
 800a548:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a54a:	1813      	adds	r3, r2, r0
 800a54c:	2a01      	cmp	r2, #1
 800a54e:	4682      	mov	sl, r0
 800a550:	6123      	str	r3, [r4, #16]
 800a552:	dc02      	bgt.n	800a55a <_printf_float+0x12a>
 800a554:	6822      	ldr	r2, [r4, #0]
 800a556:	07d2      	lsls	r2, r2, #31
 800a558:	d501      	bpl.n	800a55e <_printf_float+0x12e>
 800a55a:	3301      	adds	r3, #1
 800a55c:	6123      	str	r3, [r4, #16]
 800a55e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0a6      	beq.n	800a4b4 <_printf_float+0x84>
 800a566:	232d      	movs	r3, #45	@ 0x2d
 800a568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a56c:	e7a2      	b.n	800a4b4 <_printf_float+0x84>
 800a56e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a572:	d1c4      	bne.n	800a4fe <_printf_float+0xce>
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1c2      	bne.n	800a4fe <_printf_float+0xce>
 800a578:	2301      	movs	r3, #1
 800a57a:	e7bf      	b.n	800a4fc <_printf_float+0xcc>
 800a57c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a580:	d9db      	bls.n	800a53a <_printf_float+0x10a>
 800a582:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a586:	d118      	bne.n	800a5ba <_printf_float+0x18a>
 800a588:	2900      	cmp	r1, #0
 800a58a:	6863      	ldr	r3, [r4, #4]
 800a58c:	dd0b      	ble.n	800a5a6 <_printf_float+0x176>
 800a58e:	6121      	str	r1, [r4, #16]
 800a590:	b913      	cbnz	r3, 800a598 <_printf_float+0x168>
 800a592:	6822      	ldr	r2, [r4, #0]
 800a594:	07d0      	lsls	r0, r2, #31
 800a596:	d502      	bpl.n	800a59e <_printf_float+0x16e>
 800a598:	3301      	adds	r3, #1
 800a59a:	440b      	add	r3, r1
 800a59c:	6123      	str	r3, [r4, #16]
 800a59e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a5a0:	f04f 0a00 	mov.w	sl, #0
 800a5a4:	e7db      	b.n	800a55e <_printf_float+0x12e>
 800a5a6:	b913      	cbnz	r3, 800a5ae <_printf_float+0x17e>
 800a5a8:	6822      	ldr	r2, [r4, #0]
 800a5aa:	07d2      	lsls	r2, r2, #31
 800a5ac:	d501      	bpl.n	800a5b2 <_printf_float+0x182>
 800a5ae:	3302      	adds	r3, #2
 800a5b0:	e7f4      	b.n	800a59c <_printf_float+0x16c>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e7f2      	b.n	800a59c <_printf_float+0x16c>
 800a5b6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a5ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5bc:	4299      	cmp	r1, r3
 800a5be:	db05      	blt.n	800a5cc <_printf_float+0x19c>
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	6121      	str	r1, [r4, #16]
 800a5c4:	07d8      	lsls	r0, r3, #31
 800a5c6:	d5ea      	bpl.n	800a59e <_printf_float+0x16e>
 800a5c8:	1c4b      	adds	r3, r1, #1
 800a5ca:	e7e7      	b.n	800a59c <_printf_float+0x16c>
 800a5cc:	2900      	cmp	r1, #0
 800a5ce:	bfd4      	ite	le
 800a5d0:	f1c1 0202 	rsble	r2, r1, #2
 800a5d4:	2201      	movgt	r2, #1
 800a5d6:	4413      	add	r3, r2
 800a5d8:	e7e0      	b.n	800a59c <_printf_float+0x16c>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	055a      	lsls	r2, r3, #21
 800a5de:	d407      	bmi.n	800a5f0 <_printf_float+0x1c0>
 800a5e0:	6923      	ldr	r3, [r4, #16]
 800a5e2:	4642      	mov	r2, r8
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	47b8      	blx	r7
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	d12a      	bne.n	800a644 <_printf_float+0x214>
 800a5ee:	e76b      	b.n	800a4c8 <_printf_float+0x98>
 800a5f0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a5f4:	f240 80e0 	bls.w	800a7b8 <_printf_float+0x388>
 800a5f8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a5fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a604:	d133      	bne.n	800a66e <_printf_float+0x23e>
 800a606:	4a38      	ldr	r2, [pc, #224]	@ (800a6e8 <_printf_float+0x2b8>)
 800a608:	2301      	movs	r3, #1
 800a60a:	4631      	mov	r1, r6
 800a60c:	4628      	mov	r0, r5
 800a60e:	47b8      	blx	r7
 800a610:	3001      	adds	r0, #1
 800a612:	f43f af59 	beq.w	800a4c8 <_printf_float+0x98>
 800a616:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a61a:	4543      	cmp	r3, r8
 800a61c:	db02      	blt.n	800a624 <_printf_float+0x1f4>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	07d8      	lsls	r0, r3, #31
 800a622:	d50f      	bpl.n	800a644 <_printf_float+0x214>
 800a624:	9b05      	ldr	r3, [sp, #20]
 800a626:	465a      	mov	r2, fp
 800a628:	4631      	mov	r1, r6
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b8      	blx	r7
 800a62e:	3001      	adds	r0, #1
 800a630:	f43f af4a 	beq.w	800a4c8 <_printf_float+0x98>
 800a634:	f04f 0900 	mov.w	r9, #0
 800a638:	f108 38ff 	add.w	r8, r8, #4294967295
 800a63c:	f104 0a1a 	add.w	sl, r4, #26
 800a640:	45c8      	cmp	r8, r9
 800a642:	dc09      	bgt.n	800a658 <_printf_float+0x228>
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	079b      	lsls	r3, r3, #30
 800a648:	f100 8107 	bmi.w	800a85a <_printf_float+0x42a>
 800a64c:	68e0      	ldr	r0, [r4, #12]
 800a64e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a650:	4298      	cmp	r0, r3
 800a652:	bfb8      	it	lt
 800a654:	4618      	movlt	r0, r3
 800a656:	e739      	b.n	800a4cc <_printf_float+0x9c>
 800a658:	2301      	movs	r3, #1
 800a65a:	4652      	mov	r2, sl
 800a65c:	4631      	mov	r1, r6
 800a65e:	4628      	mov	r0, r5
 800a660:	47b8      	blx	r7
 800a662:	3001      	adds	r0, #1
 800a664:	f43f af30 	beq.w	800a4c8 <_printf_float+0x98>
 800a668:	f109 0901 	add.w	r9, r9, #1
 800a66c:	e7e8      	b.n	800a640 <_printf_float+0x210>
 800a66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a670:	2b00      	cmp	r3, #0
 800a672:	dc3b      	bgt.n	800a6ec <_printf_float+0x2bc>
 800a674:	4a1c      	ldr	r2, [pc, #112]	@ (800a6e8 <_printf_float+0x2b8>)
 800a676:	2301      	movs	r3, #1
 800a678:	4631      	mov	r1, r6
 800a67a:	4628      	mov	r0, r5
 800a67c:	47b8      	blx	r7
 800a67e:	3001      	adds	r0, #1
 800a680:	f43f af22 	beq.w	800a4c8 <_printf_float+0x98>
 800a684:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a688:	ea59 0303 	orrs.w	r3, r9, r3
 800a68c:	d102      	bne.n	800a694 <_printf_float+0x264>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	07d9      	lsls	r1, r3, #31
 800a692:	d5d7      	bpl.n	800a644 <_printf_float+0x214>
 800a694:	9b05      	ldr	r3, [sp, #20]
 800a696:	465a      	mov	r2, fp
 800a698:	4631      	mov	r1, r6
 800a69a:	4628      	mov	r0, r5
 800a69c:	47b8      	blx	r7
 800a69e:	3001      	adds	r0, #1
 800a6a0:	f43f af12 	beq.w	800a4c8 <_printf_float+0x98>
 800a6a4:	f04f 0a00 	mov.w	sl, #0
 800a6a8:	f104 0b1a 	add.w	fp, r4, #26
 800a6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ae:	425b      	negs	r3, r3
 800a6b0:	4553      	cmp	r3, sl
 800a6b2:	dc01      	bgt.n	800a6b8 <_printf_float+0x288>
 800a6b4:	464b      	mov	r3, r9
 800a6b6:	e794      	b.n	800a5e2 <_printf_float+0x1b2>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	465a      	mov	r2, fp
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4628      	mov	r0, r5
 800a6c0:	47b8      	blx	r7
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	f43f af00 	beq.w	800a4c8 <_printf_float+0x98>
 800a6c8:	f10a 0a01 	add.w	sl, sl, #1
 800a6cc:	e7ee      	b.n	800a6ac <_printf_float+0x27c>
 800a6ce:	bf00      	nop
 800a6d0:	ffffffff 	.word	0xffffffff
 800a6d4:	7fefffff 	.word	0x7fefffff
 800a6d8:	0800d2fc 	.word	0x0800d2fc
 800a6dc:	0800d2f8 	.word	0x0800d2f8
 800a6e0:	0800d304 	.word	0x0800d304
 800a6e4:	0800d300 	.word	0x0800d300
 800a6e8:	0800d308 	.word	0x0800d308
 800a6ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a6f2:	4553      	cmp	r3, sl
 800a6f4:	bfa8      	it	ge
 800a6f6:	4653      	movge	r3, sl
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	4699      	mov	r9, r3
 800a6fc:	dc37      	bgt.n	800a76e <_printf_float+0x33e>
 800a6fe:	2300      	movs	r3, #0
 800a700:	9307      	str	r3, [sp, #28]
 800a702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a706:	f104 021a 	add.w	r2, r4, #26
 800a70a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a70c:	9907      	ldr	r1, [sp, #28]
 800a70e:	9306      	str	r3, [sp, #24]
 800a710:	eba3 0309 	sub.w	r3, r3, r9
 800a714:	428b      	cmp	r3, r1
 800a716:	dc31      	bgt.n	800a77c <_printf_float+0x34c>
 800a718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a71a:	459a      	cmp	sl, r3
 800a71c:	dc3b      	bgt.n	800a796 <_printf_float+0x366>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	07da      	lsls	r2, r3, #31
 800a722:	d438      	bmi.n	800a796 <_printf_float+0x366>
 800a724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a726:	ebaa 0903 	sub.w	r9, sl, r3
 800a72a:	9b06      	ldr	r3, [sp, #24]
 800a72c:	ebaa 0303 	sub.w	r3, sl, r3
 800a730:	4599      	cmp	r9, r3
 800a732:	bfa8      	it	ge
 800a734:	4699      	movge	r9, r3
 800a736:	f1b9 0f00 	cmp.w	r9, #0
 800a73a:	dc34      	bgt.n	800a7a6 <_printf_float+0x376>
 800a73c:	f04f 0800 	mov.w	r8, #0
 800a740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a744:	f104 0b1a 	add.w	fp, r4, #26
 800a748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a74a:	ebaa 0303 	sub.w	r3, sl, r3
 800a74e:	eba3 0309 	sub.w	r3, r3, r9
 800a752:	4543      	cmp	r3, r8
 800a754:	f77f af76 	ble.w	800a644 <_printf_float+0x214>
 800a758:	2301      	movs	r3, #1
 800a75a:	465a      	mov	r2, fp
 800a75c:	4631      	mov	r1, r6
 800a75e:	4628      	mov	r0, r5
 800a760:	47b8      	blx	r7
 800a762:	3001      	adds	r0, #1
 800a764:	f43f aeb0 	beq.w	800a4c8 <_printf_float+0x98>
 800a768:	f108 0801 	add.w	r8, r8, #1
 800a76c:	e7ec      	b.n	800a748 <_printf_float+0x318>
 800a76e:	4642      	mov	r2, r8
 800a770:	4631      	mov	r1, r6
 800a772:	4628      	mov	r0, r5
 800a774:	47b8      	blx	r7
 800a776:	3001      	adds	r0, #1
 800a778:	d1c1      	bne.n	800a6fe <_printf_float+0x2ce>
 800a77a:	e6a5      	b.n	800a4c8 <_printf_float+0x98>
 800a77c:	2301      	movs	r3, #1
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	9206      	str	r2, [sp, #24]
 800a784:	47b8      	blx	r7
 800a786:	3001      	adds	r0, #1
 800a788:	f43f ae9e 	beq.w	800a4c8 <_printf_float+0x98>
 800a78c:	9b07      	ldr	r3, [sp, #28]
 800a78e:	9a06      	ldr	r2, [sp, #24]
 800a790:	3301      	adds	r3, #1
 800a792:	9307      	str	r3, [sp, #28]
 800a794:	e7b9      	b.n	800a70a <_printf_float+0x2da>
 800a796:	9b05      	ldr	r3, [sp, #20]
 800a798:	465a      	mov	r2, fp
 800a79a:	4631      	mov	r1, r6
 800a79c:	4628      	mov	r0, r5
 800a79e:	47b8      	blx	r7
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d1bf      	bne.n	800a724 <_printf_float+0x2f4>
 800a7a4:	e690      	b.n	800a4c8 <_printf_float+0x98>
 800a7a6:	9a06      	ldr	r2, [sp, #24]
 800a7a8:	464b      	mov	r3, r9
 800a7aa:	4442      	add	r2, r8
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	47b8      	blx	r7
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	d1c2      	bne.n	800a73c <_printf_float+0x30c>
 800a7b6:	e687      	b.n	800a4c8 <_printf_float+0x98>
 800a7b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a7bc:	f1b9 0f01 	cmp.w	r9, #1
 800a7c0:	dc01      	bgt.n	800a7c6 <_printf_float+0x396>
 800a7c2:	07db      	lsls	r3, r3, #31
 800a7c4:	d536      	bpl.n	800a834 <_printf_float+0x404>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	4631      	mov	r1, r6
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	47b8      	blx	r7
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	f43f ae79 	beq.w	800a4c8 <_printf_float+0x98>
 800a7d6:	9b05      	ldr	r3, [sp, #20]
 800a7d8:	465a      	mov	r2, fp
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4628      	mov	r0, r5
 800a7de:	47b8      	blx	r7
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	f43f ae71 	beq.w	800a4c8 <_printf_float+0x98>
 800a7e6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a7ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a7f6:	d018      	beq.n	800a82a <_printf_float+0x3fa>
 800a7f8:	464b      	mov	r3, r9
 800a7fa:	f108 0201 	add.w	r2, r8, #1
 800a7fe:	4631      	mov	r1, r6
 800a800:	4628      	mov	r0, r5
 800a802:	47b8      	blx	r7
 800a804:	3001      	adds	r0, #1
 800a806:	d10c      	bne.n	800a822 <_printf_float+0x3f2>
 800a808:	e65e      	b.n	800a4c8 <_printf_float+0x98>
 800a80a:	2301      	movs	r3, #1
 800a80c:	465a      	mov	r2, fp
 800a80e:	4631      	mov	r1, r6
 800a810:	4628      	mov	r0, r5
 800a812:	47b8      	blx	r7
 800a814:	3001      	adds	r0, #1
 800a816:	f43f ae57 	beq.w	800a4c8 <_printf_float+0x98>
 800a81a:	f108 0801 	add.w	r8, r8, #1
 800a81e:	45c8      	cmp	r8, r9
 800a820:	dbf3      	blt.n	800a80a <_printf_float+0x3da>
 800a822:	4653      	mov	r3, sl
 800a824:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a828:	e6dc      	b.n	800a5e4 <_printf_float+0x1b4>
 800a82a:	f04f 0800 	mov.w	r8, #0
 800a82e:	f104 0b1a 	add.w	fp, r4, #26
 800a832:	e7f4      	b.n	800a81e <_printf_float+0x3ee>
 800a834:	2301      	movs	r3, #1
 800a836:	4642      	mov	r2, r8
 800a838:	e7e1      	b.n	800a7fe <_printf_float+0x3ce>
 800a83a:	2301      	movs	r3, #1
 800a83c:	464a      	mov	r2, r9
 800a83e:	4631      	mov	r1, r6
 800a840:	4628      	mov	r0, r5
 800a842:	47b8      	blx	r7
 800a844:	3001      	adds	r0, #1
 800a846:	f43f ae3f 	beq.w	800a4c8 <_printf_float+0x98>
 800a84a:	f108 0801 	add.w	r8, r8, #1
 800a84e:	68e3      	ldr	r3, [r4, #12]
 800a850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a852:	1a5b      	subs	r3, r3, r1
 800a854:	4543      	cmp	r3, r8
 800a856:	dcf0      	bgt.n	800a83a <_printf_float+0x40a>
 800a858:	e6f8      	b.n	800a64c <_printf_float+0x21c>
 800a85a:	f04f 0800 	mov.w	r8, #0
 800a85e:	f104 0919 	add.w	r9, r4, #25
 800a862:	e7f4      	b.n	800a84e <_printf_float+0x41e>

0800a864 <_printf_common>:
 800a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	4616      	mov	r6, r2
 800a86a:	4698      	mov	r8, r3
 800a86c:	688a      	ldr	r2, [r1, #8]
 800a86e:	690b      	ldr	r3, [r1, #16]
 800a870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a874:	4293      	cmp	r3, r2
 800a876:	bfb8      	it	lt
 800a878:	4613      	movlt	r3, r2
 800a87a:	6033      	str	r3, [r6, #0]
 800a87c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a880:	4607      	mov	r7, r0
 800a882:	460c      	mov	r4, r1
 800a884:	b10a      	cbz	r2, 800a88a <_printf_common+0x26>
 800a886:	3301      	adds	r3, #1
 800a888:	6033      	str	r3, [r6, #0]
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	0699      	lsls	r1, r3, #26
 800a88e:	bf42      	ittt	mi
 800a890:	6833      	ldrmi	r3, [r6, #0]
 800a892:	3302      	addmi	r3, #2
 800a894:	6033      	strmi	r3, [r6, #0]
 800a896:	6825      	ldr	r5, [r4, #0]
 800a898:	f015 0506 	ands.w	r5, r5, #6
 800a89c:	d106      	bne.n	800a8ac <_printf_common+0x48>
 800a89e:	f104 0a19 	add.w	sl, r4, #25
 800a8a2:	68e3      	ldr	r3, [r4, #12]
 800a8a4:	6832      	ldr	r2, [r6, #0]
 800a8a6:	1a9b      	subs	r3, r3, r2
 800a8a8:	42ab      	cmp	r3, r5
 800a8aa:	dc26      	bgt.n	800a8fa <_printf_common+0x96>
 800a8ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8b0:	6822      	ldr	r2, [r4, #0]
 800a8b2:	3b00      	subs	r3, #0
 800a8b4:	bf18      	it	ne
 800a8b6:	2301      	movne	r3, #1
 800a8b8:	0692      	lsls	r2, r2, #26
 800a8ba:	d42b      	bmi.n	800a914 <_printf_common+0xb0>
 800a8bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	47c8      	blx	r9
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d01e      	beq.n	800a908 <_printf_common+0xa4>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	6922      	ldr	r2, [r4, #16]
 800a8ce:	f003 0306 	and.w	r3, r3, #6
 800a8d2:	2b04      	cmp	r3, #4
 800a8d4:	bf02      	ittt	eq
 800a8d6:	68e5      	ldreq	r5, [r4, #12]
 800a8d8:	6833      	ldreq	r3, [r6, #0]
 800a8da:	1aed      	subeq	r5, r5, r3
 800a8dc:	68a3      	ldr	r3, [r4, #8]
 800a8de:	bf0c      	ite	eq
 800a8e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8e4:	2500      	movne	r5, #0
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	bfc4      	itt	gt
 800a8ea:	1a9b      	subgt	r3, r3, r2
 800a8ec:	18ed      	addgt	r5, r5, r3
 800a8ee:	2600      	movs	r6, #0
 800a8f0:	341a      	adds	r4, #26
 800a8f2:	42b5      	cmp	r5, r6
 800a8f4:	d11a      	bne.n	800a92c <_printf_common+0xc8>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	e008      	b.n	800a90c <_printf_common+0xa8>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	4652      	mov	r2, sl
 800a8fe:	4641      	mov	r1, r8
 800a900:	4638      	mov	r0, r7
 800a902:	47c8      	blx	r9
 800a904:	3001      	adds	r0, #1
 800a906:	d103      	bne.n	800a910 <_printf_common+0xac>
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a910:	3501      	adds	r5, #1
 800a912:	e7c6      	b.n	800a8a2 <_printf_common+0x3e>
 800a914:	18e1      	adds	r1, r4, r3
 800a916:	1c5a      	adds	r2, r3, #1
 800a918:	2030      	movs	r0, #48	@ 0x30
 800a91a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a91e:	4422      	add	r2, r4
 800a920:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a924:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a928:	3302      	adds	r3, #2
 800a92a:	e7c7      	b.n	800a8bc <_printf_common+0x58>
 800a92c:	2301      	movs	r3, #1
 800a92e:	4622      	mov	r2, r4
 800a930:	4641      	mov	r1, r8
 800a932:	4638      	mov	r0, r7
 800a934:	47c8      	blx	r9
 800a936:	3001      	adds	r0, #1
 800a938:	d0e6      	beq.n	800a908 <_printf_common+0xa4>
 800a93a:	3601      	adds	r6, #1
 800a93c:	e7d9      	b.n	800a8f2 <_printf_common+0x8e>
	...

0800a940 <_printf_i>:
 800a940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a944:	7e0f      	ldrb	r7, [r1, #24]
 800a946:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a948:	2f78      	cmp	r7, #120	@ 0x78
 800a94a:	4691      	mov	r9, r2
 800a94c:	4680      	mov	r8, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	469a      	mov	sl, r3
 800a952:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a956:	d807      	bhi.n	800a968 <_printf_i+0x28>
 800a958:	2f62      	cmp	r7, #98	@ 0x62
 800a95a:	d80a      	bhi.n	800a972 <_printf_i+0x32>
 800a95c:	2f00      	cmp	r7, #0
 800a95e:	f000 80d1 	beq.w	800ab04 <_printf_i+0x1c4>
 800a962:	2f58      	cmp	r7, #88	@ 0x58
 800a964:	f000 80b8 	beq.w	800aad8 <_printf_i+0x198>
 800a968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a96c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a970:	e03a      	b.n	800a9e8 <_printf_i+0xa8>
 800a972:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a976:	2b15      	cmp	r3, #21
 800a978:	d8f6      	bhi.n	800a968 <_printf_i+0x28>
 800a97a:	a101      	add	r1, pc, #4	@ (adr r1, 800a980 <_printf_i+0x40>)
 800a97c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a980:	0800a9d9 	.word	0x0800a9d9
 800a984:	0800a9ed 	.word	0x0800a9ed
 800a988:	0800a969 	.word	0x0800a969
 800a98c:	0800a969 	.word	0x0800a969
 800a990:	0800a969 	.word	0x0800a969
 800a994:	0800a969 	.word	0x0800a969
 800a998:	0800a9ed 	.word	0x0800a9ed
 800a99c:	0800a969 	.word	0x0800a969
 800a9a0:	0800a969 	.word	0x0800a969
 800a9a4:	0800a969 	.word	0x0800a969
 800a9a8:	0800a969 	.word	0x0800a969
 800a9ac:	0800aaeb 	.word	0x0800aaeb
 800a9b0:	0800aa17 	.word	0x0800aa17
 800a9b4:	0800aaa5 	.word	0x0800aaa5
 800a9b8:	0800a969 	.word	0x0800a969
 800a9bc:	0800a969 	.word	0x0800a969
 800a9c0:	0800ab0d 	.word	0x0800ab0d
 800a9c4:	0800a969 	.word	0x0800a969
 800a9c8:	0800aa17 	.word	0x0800aa17
 800a9cc:	0800a969 	.word	0x0800a969
 800a9d0:	0800a969 	.word	0x0800a969
 800a9d4:	0800aaad 	.word	0x0800aaad
 800a9d8:	6833      	ldr	r3, [r6, #0]
 800a9da:	1d1a      	adds	r2, r3, #4
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6032      	str	r2, [r6, #0]
 800a9e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e09c      	b.n	800ab26 <_printf_i+0x1e6>
 800a9ec:	6833      	ldr	r3, [r6, #0]
 800a9ee:	6820      	ldr	r0, [r4, #0]
 800a9f0:	1d19      	adds	r1, r3, #4
 800a9f2:	6031      	str	r1, [r6, #0]
 800a9f4:	0606      	lsls	r6, r0, #24
 800a9f6:	d501      	bpl.n	800a9fc <_printf_i+0xbc>
 800a9f8:	681d      	ldr	r5, [r3, #0]
 800a9fa:	e003      	b.n	800aa04 <_printf_i+0xc4>
 800a9fc:	0645      	lsls	r5, r0, #25
 800a9fe:	d5fb      	bpl.n	800a9f8 <_printf_i+0xb8>
 800aa00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa04:	2d00      	cmp	r5, #0
 800aa06:	da03      	bge.n	800aa10 <_printf_i+0xd0>
 800aa08:	232d      	movs	r3, #45	@ 0x2d
 800aa0a:	426d      	negs	r5, r5
 800aa0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa10:	4858      	ldr	r0, [pc, #352]	@ (800ab74 <_printf_i+0x234>)
 800aa12:	230a      	movs	r3, #10
 800aa14:	e011      	b.n	800aa3a <_printf_i+0xfa>
 800aa16:	6821      	ldr	r1, [r4, #0]
 800aa18:	6833      	ldr	r3, [r6, #0]
 800aa1a:	0608      	lsls	r0, r1, #24
 800aa1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa20:	d402      	bmi.n	800aa28 <_printf_i+0xe8>
 800aa22:	0649      	lsls	r1, r1, #25
 800aa24:	bf48      	it	mi
 800aa26:	b2ad      	uxthmi	r5, r5
 800aa28:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa2a:	4852      	ldr	r0, [pc, #328]	@ (800ab74 <_printf_i+0x234>)
 800aa2c:	6033      	str	r3, [r6, #0]
 800aa2e:	bf14      	ite	ne
 800aa30:	230a      	movne	r3, #10
 800aa32:	2308      	moveq	r3, #8
 800aa34:	2100      	movs	r1, #0
 800aa36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa3a:	6866      	ldr	r6, [r4, #4]
 800aa3c:	60a6      	str	r6, [r4, #8]
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	db05      	blt.n	800aa4e <_printf_i+0x10e>
 800aa42:	6821      	ldr	r1, [r4, #0]
 800aa44:	432e      	orrs	r6, r5
 800aa46:	f021 0104 	bic.w	r1, r1, #4
 800aa4a:	6021      	str	r1, [r4, #0]
 800aa4c:	d04b      	beq.n	800aae6 <_printf_i+0x1a6>
 800aa4e:	4616      	mov	r6, r2
 800aa50:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa54:	fb03 5711 	mls	r7, r3, r1, r5
 800aa58:	5dc7      	ldrb	r7, [r0, r7]
 800aa5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa5e:	462f      	mov	r7, r5
 800aa60:	42bb      	cmp	r3, r7
 800aa62:	460d      	mov	r5, r1
 800aa64:	d9f4      	bls.n	800aa50 <_printf_i+0x110>
 800aa66:	2b08      	cmp	r3, #8
 800aa68:	d10b      	bne.n	800aa82 <_printf_i+0x142>
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	07df      	lsls	r7, r3, #31
 800aa6e:	d508      	bpl.n	800aa82 <_printf_i+0x142>
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	6861      	ldr	r1, [r4, #4]
 800aa74:	4299      	cmp	r1, r3
 800aa76:	bfde      	ittt	le
 800aa78:	2330      	movle	r3, #48	@ 0x30
 800aa7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa82:	1b92      	subs	r2, r2, r6
 800aa84:	6122      	str	r2, [r4, #16]
 800aa86:	f8cd a000 	str.w	sl, [sp]
 800aa8a:	464b      	mov	r3, r9
 800aa8c:	aa03      	add	r2, sp, #12
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4640      	mov	r0, r8
 800aa92:	f7ff fee7 	bl	800a864 <_printf_common>
 800aa96:	3001      	adds	r0, #1
 800aa98:	d14a      	bne.n	800ab30 <_printf_i+0x1f0>
 800aa9a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9e:	b004      	add	sp, #16
 800aaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	f043 0320 	orr.w	r3, r3, #32
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	4832      	ldr	r0, [pc, #200]	@ (800ab78 <_printf_i+0x238>)
 800aaae:	2778      	movs	r7, #120	@ 0x78
 800aab0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	6831      	ldr	r1, [r6, #0]
 800aab8:	061f      	lsls	r7, r3, #24
 800aaba:	f851 5b04 	ldr.w	r5, [r1], #4
 800aabe:	d402      	bmi.n	800aac6 <_printf_i+0x186>
 800aac0:	065f      	lsls	r7, r3, #25
 800aac2:	bf48      	it	mi
 800aac4:	b2ad      	uxthmi	r5, r5
 800aac6:	6031      	str	r1, [r6, #0]
 800aac8:	07d9      	lsls	r1, r3, #31
 800aaca:	bf44      	itt	mi
 800aacc:	f043 0320 	orrmi.w	r3, r3, #32
 800aad0:	6023      	strmi	r3, [r4, #0]
 800aad2:	b11d      	cbz	r5, 800aadc <_printf_i+0x19c>
 800aad4:	2310      	movs	r3, #16
 800aad6:	e7ad      	b.n	800aa34 <_printf_i+0xf4>
 800aad8:	4826      	ldr	r0, [pc, #152]	@ (800ab74 <_printf_i+0x234>)
 800aada:	e7e9      	b.n	800aab0 <_printf_i+0x170>
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	f023 0320 	bic.w	r3, r3, #32
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	e7f6      	b.n	800aad4 <_printf_i+0x194>
 800aae6:	4616      	mov	r6, r2
 800aae8:	e7bd      	b.n	800aa66 <_printf_i+0x126>
 800aaea:	6833      	ldr	r3, [r6, #0]
 800aaec:	6825      	ldr	r5, [r4, #0]
 800aaee:	6961      	ldr	r1, [r4, #20]
 800aaf0:	1d18      	adds	r0, r3, #4
 800aaf2:	6030      	str	r0, [r6, #0]
 800aaf4:	062e      	lsls	r6, r5, #24
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	d501      	bpl.n	800aafe <_printf_i+0x1be>
 800aafa:	6019      	str	r1, [r3, #0]
 800aafc:	e002      	b.n	800ab04 <_printf_i+0x1c4>
 800aafe:	0668      	lsls	r0, r5, #25
 800ab00:	d5fb      	bpl.n	800aafa <_printf_i+0x1ba>
 800ab02:	8019      	strh	r1, [r3, #0]
 800ab04:	2300      	movs	r3, #0
 800ab06:	6123      	str	r3, [r4, #16]
 800ab08:	4616      	mov	r6, r2
 800ab0a:	e7bc      	b.n	800aa86 <_printf_i+0x146>
 800ab0c:	6833      	ldr	r3, [r6, #0]
 800ab0e:	1d1a      	adds	r2, r3, #4
 800ab10:	6032      	str	r2, [r6, #0]
 800ab12:	681e      	ldr	r6, [r3, #0]
 800ab14:	6862      	ldr	r2, [r4, #4]
 800ab16:	2100      	movs	r1, #0
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f7f5 fc09 	bl	8000330 <memchr>
 800ab1e:	b108      	cbz	r0, 800ab24 <_printf_i+0x1e4>
 800ab20:	1b80      	subs	r0, r0, r6
 800ab22:	6060      	str	r0, [r4, #4]
 800ab24:	6863      	ldr	r3, [r4, #4]
 800ab26:	6123      	str	r3, [r4, #16]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab2e:	e7aa      	b.n	800aa86 <_printf_i+0x146>
 800ab30:	6923      	ldr	r3, [r4, #16]
 800ab32:	4632      	mov	r2, r6
 800ab34:	4649      	mov	r1, r9
 800ab36:	4640      	mov	r0, r8
 800ab38:	47d0      	blx	sl
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	d0ad      	beq.n	800aa9a <_printf_i+0x15a>
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	079b      	lsls	r3, r3, #30
 800ab42:	d413      	bmi.n	800ab6c <_printf_i+0x22c>
 800ab44:	68e0      	ldr	r0, [r4, #12]
 800ab46:	9b03      	ldr	r3, [sp, #12]
 800ab48:	4298      	cmp	r0, r3
 800ab4a:	bfb8      	it	lt
 800ab4c:	4618      	movlt	r0, r3
 800ab4e:	e7a6      	b.n	800aa9e <_printf_i+0x15e>
 800ab50:	2301      	movs	r3, #1
 800ab52:	4632      	mov	r2, r6
 800ab54:	4649      	mov	r1, r9
 800ab56:	4640      	mov	r0, r8
 800ab58:	47d0      	blx	sl
 800ab5a:	3001      	adds	r0, #1
 800ab5c:	d09d      	beq.n	800aa9a <_printf_i+0x15a>
 800ab5e:	3501      	adds	r5, #1
 800ab60:	68e3      	ldr	r3, [r4, #12]
 800ab62:	9903      	ldr	r1, [sp, #12]
 800ab64:	1a5b      	subs	r3, r3, r1
 800ab66:	42ab      	cmp	r3, r5
 800ab68:	dcf2      	bgt.n	800ab50 <_printf_i+0x210>
 800ab6a:	e7eb      	b.n	800ab44 <_printf_i+0x204>
 800ab6c:	2500      	movs	r5, #0
 800ab6e:	f104 0619 	add.w	r6, r4, #25
 800ab72:	e7f5      	b.n	800ab60 <_printf_i+0x220>
 800ab74:	0800d30a 	.word	0x0800d30a
 800ab78:	0800d31b 	.word	0x0800d31b

0800ab7c <std>:
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	b510      	push	{r4, lr}
 800ab80:	4604      	mov	r4, r0
 800ab82:	e9c0 3300 	strd	r3, r3, [r0]
 800ab86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab8a:	6083      	str	r3, [r0, #8]
 800ab8c:	8181      	strh	r1, [r0, #12]
 800ab8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab90:	81c2      	strh	r2, [r0, #14]
 800ab92:	6183      	str	r3, [r0, #24]
 800ab94:	4619      	mov	r1, r3
 800ab96:	2208      	movs	r2, #8
 800ab98:	305c      	adds	r0, #92	@ 0x5c
 800ab9a:	f000 fa01 	bl	800afa0 <memset>
 800ab9e:	4b0d      	ldr	r3, [pc, #52]	@ (800abd4 <std+0x58>)
 800aba0:	6263      	str	r3, [r4, #36]	@ 0x24
 800aba2:	4b0d      	ldr	r3, [pc, #52]	@ (800abd8 <std+0x5c>)
 800aba4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aba6:	4b0d      	ldr	r3, [pc, #52]	@ (800abdc <std+0x60>)
 800aba8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abaa:	4b0d      	ldr	r3, [pc, #52]	@ (800abe0 <std+0x64>)
 800abac:	6323      	str	r3, [r4, #48]	@ 0x30
 800abae:	4b0d      	ldr	r3, [pc, #52]	@ (800abe4 <std+0x68>)
 800abb0:	6224      	str	r4, [r4, #32]
 800abb2:	429c      	cmp	r4, r3
 800abb4:	d006      	beq.n	800abc4 <std+0x48>
 800abb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abba:	4294      	cmp	r4, r2
 800abbc:	d002      	beq.n	800abc4 <std+0x48>
 800abbe:	33d0      	adds	r3, #208	@ 0xd0
 800abc0:	429c      	cmp	r4, r3
 800abc2:	d105      	bne.n	800abd0 <std+0x54>
 800abc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abcc:	f000 ba64 	b.w	800b098 <__retarget_lock_init_recursive>
 800abd0:	bd10      	pop	{r4, pc}
 800abd2:	bf00      	nop
 800abd4:	0800adf1 	.word	0x0800adf1
 800abd8:	0800ae13 	.word	0x0800ae13
 800abdc:	0800ae4b 	.word	0x0800ae4b
 800abe0:	0800ae6f 	.word	0x0800ae6f
 800abe4:	240007e0 	.word	0x240007e0

0800abe8 <stdio_exit_handler>:
 800abe8:	4a02      	ldr	r2, [pc, #8]	@ (800abf4 <stdio_exit_handler+0xc>)
 800abea:	4903      	ldr	r1, [pc, #12]	@ (800abf8 <stdio_exit_handler+0x10>)
 800abec:	4803      	ldr	r0, [pc, #12]	@ (800abfc <stdio_exit_handler+0x14>)
 800abee:	f000 b869 	b.w	800acc4 <_fwalk_sglue>
 800abf2:	bf00      	nop
 800abf4:	24000018 	.word	0x24000018
 800abf8:	0800c90d 	.word	0x0800c90d
 800abfc:	24000028 	.word	0x24000028

0800ac00 <cleanup_stdio>:
 800ac00:	6841      	ldr	r1, [r0, #4]
 800ac02:	4b0c      	ldr	r3, [pc, #48]	@ (800ac34 <cleanup_stdio+0x34>)
 800ac04:	4299      	cmp	r1, r3
 800ac06:	b510      	push	{r4, lr}
 800ac08:	4604      	mov	r4, r0
 800ac0a:	d001      	beq.n	800ac10 <cleanup_stdio+0x10>
 800ac0c:	f001 fe7e 	bl	800c90c <_fflush_r>
 800ac10:	68a1      	ldr	r1, [r4, #8]
 800ac12:	4b09      	ldr	r3, [pc, #36]	@ (800ac38 <cleanup_stdio+0x38>)
 800ac14:	4299      	cmp	r1, r3
 800ac16:	d002      	beq.n	800ac1e <cleanup_stdio+0x1e>
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f001 fe77 	bl	800c90c <_fflush_r>
 800ac1e:	68e1      	ldr	r1, [r4, #12]
 800ac20:	4b06      	ldr	r3, [pc, #24]	@ (800ac3c <cleanup_stdio+0x3c>)
 800ac22:	4299      	cmp	r1, r3
 800ac24:	d004      	beq.n	800ac30 <cleanup_stdio+0x30>
 800ac26:	4620      	mov	r0, r4
 800ac28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac2c:	f001 be6e 	b.w	800c90c <_fflush_r>
 800ac30:	bd10      	pop	{r4, pc}
 800ac32:	bf00      	nop
 800ac34:	240007e0 	.word	0x240007e0
 800ac38:	24000848 	.word	0x24000848
 800ac3c:	240008b0 	.word	0x240008b0

0800ac40 <global_stdio_init.part.0>:
 800ac40:	b510      	push	{r4, lr}
 800ac42:	4b0b      	ldr	r3, [pc, #44]	@ (800ac70 <global_stdio_init.part.0+0x30>)
 800ac44:	4c0b      	ldr	r4, [pc, #44]	@ (800ac74 <global_stdio_init.part.0+0x34>)
 800ac46:	4a0c      	ldr	r2, [pc, #48]	@ (800ac78 <global_stdio_init.part.0+0x38>)
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2104      	movs	r1, #4
 800ac50:	f7ff ff94 	bl	800ab7c <std>
 800ac54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac58:	2201      	movs	r2, #1
 800ac5a:	2109      	movs	r1, #9
 800ac5c:	f7ff ff8e 	bl	800ab7c <std>
 800ac60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac64:	2202      	movs	r2, #2
 800ac66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac6a:	2112      	movs	r1, #18
 800ac6c:	f7ff bf86 	b.w	800ab7c <std>
 800ac70:	24000918 	.word	0x24000918
 800ac74:	240007e0 	.word	0x240007e0
 800ac78:	0800abe9 	.word	0x0800abe9

0800ac7c <__sfp_lock_acquire>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	@ (800ac84 <__sfp_lock_acquire+0x8>)
 800ac7e:	f000 ba0c 	b.w	800b09a <__retarget_lock_acquire_recursive>
 800ac82:	bf00      	nop
 800ac84:	24000921 	.word	0x24000921

0800ac88 <__sfp_lock_release>:
 800ac88:	4801      	ldr	r0, [pc, #4]	@ (800ac90 <__sfp_lock_release+0x8>)
 800ac8a:	f000 ba07 	b.w	800b09c <__retarget_lock_release_recursive>
 800ac8e:	bf00      	nop
 800ac90:	24000921 	.word	0x24000921

0800ac94 <__sinit>:
 800ac94:	b510      	push	{r4, lr}
 800ac96:	4604      	mov	r4, r0
 800ac98:	f7ff fff0 	bl	800ac7c <__sfp_lock_acquire>
 800ac9c:	6a23      	ldr	r3, [r4, #32]
 800ac9e:	b11b      	cbz	r3, 800aca8 <__sinit+0x14>
 800aca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca4:	f7ff bff0 	b.w	800ac88 <__sfp_lock_release>
 800aca8:	4b04      	ldr	r3, [pc, #16]	@ (800acbc <__sinit+0x28>)
 800acaa:	6223      	str	r3, [r4, #32]
 800acac:	4b04      	ldr	r3, [pc, #16]	@ (800acc0 <__sinit+0x2c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1f5      	bne.n	800aca0 <__sinit+0xc>
 800acb4:	f7ff ffc4 	bl	800ac40 <global_stdio_init.part.0>
 800acb8:	e7f2      	b.n	800aca0 <__sinit+0xc>
 800acba:	bf00      	nop
 800acbc:	0800ac01 	.word	0x0800ac01
 800acc0:	24000918 	.word	0x24000918

0800acc4 <_fwalk_sglue>:
 800acc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc8:	4607      	mov	r7, r0
 800acca:	4688      	mov	r8, r1
 800accc:	4614      	mov	r4, r2
 800acce:	2600      	movs	r6, #0
 800acd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acd4:	f1b9 0901 	subs.w	r9, r9, #1
 800acd8:	d505      	bpl.n	800ace6 <_fwalk_sglue+0x22>
 800acda:	6824      	ldr	r4, [r4, #0]
 800acdc:	2c00      	cmp	r4, #0
 800acde:	d1f7      	bne.n	800acd0 <_fwalk_sglue+0xc>
 800ace0:	4630      	mov	r0, r6
 800ace2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace6:	89ab      	ldrh	r3, [r5, #12]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d907      	bls.n	800acfc <_fwalk_sglue+0x38>
 800acec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acf0:	3301      	adds	r3, #1
 800acf2:	d003      	beq.n	800acfc <_fwalk_sglue+0x38>
 800acf4:	4629      	mov	r1, r5
 800acf6:	4638      	mov	r0, r7
 800acf8:	47c0      	blx	r8
 800acfa:	4306      	orrs	r6, r0
 800acfc:	3568      	adds	r5, #104	@ 0x68
 800acfe:	e7e9      	b.n	800acd4 <_fwalk_sglue+0x10>

0800ad00 <iprintf>:
 800ad00:	b40f      	push	{r0, r1, r2, r3}
 800ad02:	b507      	push	{r0, r1, r2, lr}
 800ad04:	4906      	ldr	r1, [pc, #24]	@ (800ad20 <iprintf+0x20>)
 800ad06:	ab04      	add	r3, sp, #16
 800ad08:	6808      	ldr	r0, [r1, #0]
 800ad0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0e:	6881      	ldr	r1, [r0, #8]
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	f001 fc5f 	bl	800c5d4 <_vfiprintf_r>
 800ad16:	b003      	add	sp, #12
 800ad18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad1c:	b004      	add	sp, #16
 800ad1e:	4770      	bx	lr
 800ad20:	24000024 	.word	0x24000024

0800ad24 <putchar>:
 800ad24:	4b02      	ldr	r3, [pc, #8]	@ (800ad30 <putchar+0xc>)
 800ad26:	4601      	mov	r1, r0
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	6882      	ldr	r2, [r0, #8]
 800ad2c:	f001 be78 	b.w	800ca20 <_putc_r>
 800ad30:	24000024 	.word	0x24000024

0800ad34 <_puts_r>:
 800ad34:	6a03      	ldr	r3, [r0, #32]
 800ad36:	b570      	push	{r4, r5, r6, lr}
 800ad38:	6884      	ldr	r4, [r0, #8]
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	460e      	mov	r6, r1
 800ad3e:	b90b      	cbnz	r3, 800ad44 <_puts_r+0x10>
 800ad40:	f7ff ffa8 	bl	800ac94 <__sinit>
 800ad44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad46:	07db      	lsls	r3, r3, #31
 800ad48:	d405      	bmi.n	800ad56 <_puts_r+0x22>
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	0598      	lsls	r0, r3, #22
 800ad4e:	d402      	bmi.n	800ad56 <_puts_r+0x22>
 800ad50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad52:	f000 f9a2 	bl	800b09a <__retarget_lock_acquire_recursive>
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	0719      	lsls	r1, r3, #28
 800ad5a:	d502      	bpl.n	800ad62 <_puts_r+0x2e>
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d135      	bne.n	800adce <_puts_r+0x9a>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4628      	mov	r0, r5
 800ad66:	f000 f8c5 	bl	800aef4 <__swsetup_r>
 800ad6a:	b380      	cbz	r0, 800adce <_puts_r+0x9a>
 800ad6c:	f04f 35ff 	mov.w	r5, #4294967295
 800ad70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad72:	07da      	lsls	r2, r3, #31
 800ad74:	d405      	bmi.n	800ad82 <_puts_r+0x4e>
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	059b      	lsls	r3, r3, #22
 800ad7a:	d402      	bmi.n	800ad82 <_puts_r+0x4e>
 800ad7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad7e:	f000 f98d 	bl	800b09c <__retarget_lock_release_recursive>
 800ad82:	4628      	mov	r0, r5
 800ad84:	bd70      	pop	{r4, r5, r6, pc}
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	da04      	bge.n	800ad94 <_puts_r+0x60>
 800ad8a:	69a2      	ldr	r2, [r4, #24]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	dc17      	bgt.n	800adc0 <_puts_r+0x8c>
 800ad90:	290a      	cmp	r1, #10
 800ad92:	d015      	beq.n	800adc0 <_puts_r+0x8c>
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	1c5a      	adds	r2, r3, #1
 800ad98:	6022      	str	r2, [r4, #0]
 800ad9a:	7019      	strb	r1, [r3, #0]
 800ad9c:	68a3      	ldr	r3, [r4, #8]
 800ad9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ada2:	3b01      	subs	r3, #1
 800ada4:	60a3      	str	r3, [r4, #8]
 800ada6:	2900      	cmp	r1, #0
 800ada8:	d1ed      	bne.n	800ad86 <_puts_r+0x52>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	da11      	bge.n	800add2 <_puts_r+0x9e>
 800adae:	4622      	mov	r2, r4
 800adb0:	210a      	movs	r1, #10
 800adb2:	4628      	mov	r0, r5
 800adb4:	f000 f85f 	bl	800ae76 <__swbuf_r>
 800adb8:	3001      	adds	r0, #1
 800adba:	d0d7      	beq.n	800ad6c <_puts_r+0x38>
 800adbc:	250a      	movs	r5, #10
 800adbe:	e7d7      	b.n	800ad70 <_puts_r+0x3c>
 800adc0:	4622      	mov	r2, r4
 800adc2:	4628      	mov	r0, r5
 800adc4:	f000 f857 	bl	800ae76 <__swbuf_r>
 800adc8:	3001      	adds	r0, #1
 800adca:	d1e7      	bne.n	800ad9c <_puts_r+0x68>
 800adcc:	e7ce      	b.n	800ad6c <_puts_r+0x38>
 800adce:	3e01      	subs	r6, #1
 800add0:	e7e4      	b.n	800ad9c <_puts_r+0x68>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	6022      	str	r2, [r4, #0]
 800add8:	220a      	movs	r2, #10
 800adda:	701a      	strb	r2, [r3, #0]
 800addc:	e7ee      	b.n	800adbc <_puts_r+0x88>
	...

0800ade0 <puts>:
 800ade0:	4b02      	ldr	r3, [pc, #8]	@ (800adec <puts+0xc>)
 800ade2:	4601      	mov	r1, r0
 800ade4:	6818      	ldr	r0, [r3, #0]
 800ade6:	f7ff bfa5 	b.w	800ad34 <_puts_r>
 800adea:	bf00      	nop
 800adec:	24000024 	.word	0x24000024

0800adf0 <__sread>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	460c      	mov	r4, r1
 800adf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf8:	f000 f900 	bl	800affc <_read_r>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	bfab      	itete	ge
 800ae00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae02:	89a3      	ldrhlt	r3, [r4, #12]
 800ae04:	181b      	addge	r3, r3, r0
 800ae06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae0a:	bfac      	ite	ge
 800ae0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae0e:	81a3      	strhlt	r3, [r4, #12]
 800ae10:	bd10      	pop	{r4, pc}

0800ae12 <__swrite>:
 800ae12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae16:	461f      	mov	r7, r3
 800ae18:	898b      	ldrh	r3, [r1, #12]
 800ae1a:	05db      	lsls	r3, r3, #23
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	460c      	mov	r4, r1
 800ae20:	4616      	mov	r6, r2
 800ae22:	d505      	bpl.n	800ae30 <__swrite+0x1e>
 800ae24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae28:	2302      	movs	r3, #2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f000 f8d4 	bl	800afd8 <_lseek_r>
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	4632      	mov	r2, r6
 800ae3e:	463b      	mov	r3, r7
 800ae40:	4628      	mov	r0, r5
 800ae42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae46:	f000 b8eb 	b.w	800b020 <_write_r>

0800ae4a <__sseek>:
 800ae4a:	b510      	push	{r4, lr}
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae52:	f000 f8c1 	bl	800afd8 <_lseek_r>
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	bf15      	itete	ne
 800ae5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae66:	81a3      	strheq	r3, [r4, #12]
 800ae68:	bf18      	it	ne
 800ae6a:	81a3      	strhne	r3, [r4, #12]
 800ae6c:	bd10      	pop	{r4, pc}

0800ae6e <__sclose>:
 800ae6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae72:	f000 b8a1 	b.w	800afb8 <_close_r>

0800ae76 <__swbuf_r>:
 800ae76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae78:	460e      	mov	r6, r1
 800ae7a:	4614      	mov	r4, r2
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	b118      	cbz	r0, 800ae88 <__swbuf_r+0x12>
 800ae80:	6a03      	ldr	r3, [r0, #32]
 800ae82:	b90b      	cbnz	r3, 800ae88 <__swbuf_r+0x12>
 800ae84:	f7ff ff06 	bl	800ac94 <__sinit>
 800ae88:	69a3      	ldr	r3, [r4, #24]
 800ae8a:	60a3      	str	r3, [r4, #8]
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	071a      	lsls	r2, r3, #28
 800ae90:	d501      	bpl.n	800ae96 <__swbuf_r+0x20>
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	b943      	cbnz	r3, 800aea8 <__swbuf_r+0x32>
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 f82b 	bl	800aef4 <__swsetup_r>
 800ae9e:	b118      	cbz	r0, 800aea8 <__swbuf_r+0x32>
 800aea0:	f04f 37ff 	mov.w	r7, #4294967295
 800aea4:	4638      	mov	r0, r7
 800aea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea8:	6823      	ldr	r3, [r4, #0]
 800aeaa:	6922      	ldr	r2, [r4, #16]
 800aeac:	1a98      	subs	r0, r3, r2
 800aeae:	6963      	ldr	r3, [r4, #20]
 800aeb0:	b2f6      	uxtb	r6, r6
 800aeb2:	4283      	cmp	r3, r0
 800aeb4:	4637      	mov	r7, r6
 800aeb6:	dc05      	bgt.n	800aec4 <__swbuf_r+0x4e>
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4628      	mov	r0, r5
 800aebc:	f001 fd26 	bl	800c90c <_fflush_r>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d1ed      	bne.n	800aea0 <__swbuf_r+0x2a>
 800aec4:	68a3      	ldr	r3, [r4, #8]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	60a3      	str	r3, [r4, #8]
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	6022      	str	r2, [r4, #0]
 800aed0:	701e      	strb	r6, [r3, #0]
 800aed2:	6962      	ldr	r2, [r4, #20]
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d004      	beq.n	800aee4 <__swbuf_r+0x6e>
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	07db      	lsls	r3, r3, #31
 800aede:	d5e1      	bpl.n	800aea4 <__swbuf_r+0x2e>
 800aee0:	2e0a      	cmp	r6, #10
 800aee2:	d1df      	bne.n	800aea4 <__swbuf_r+0x2e>
 800aee4:	4621      	mov	r1, r4
 800aee6:	4628      	mov	r0, r5
 800aee8:	f001 fd10 	bl	800c90c <_fflush_r>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d0d9      	beq.n	800aea4 <__swbuf_r+0x2e>
 800aef0:	e7d6      	b.n	800aea0 <__swbuf_r+0x2a>
	...

0800aef4 <__swsetup_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4b29      	ldr	r3, [pc, #164]	@ (800af9c <__swsetup_r+0xa8>)
 800aef8:	4605      	mov	r5, r0
 800aefa:	6818      	ldr	r0, [r3, #0]
 800aefc:	460c      	mov	r4, r1
 800aefe:	b118      	cbz	r0, 800af08 <__swsetup_r+0x14>
 800af00:	6a03      	ldr	r3, [r0, #32]
 800af02:	b90b      	cbnz	r3, 800af08 <__swsetup_r+0x14>
 800af04:	f7ff fec6 	bl	800ac94 <__sinit>
 800af08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af0c:	0719      	lsls	r1, r3, #28
 800af0e:	d422      	bmi.n	800af56 <__swsetup_r+0x62>
 800af10:	06da      	lsls	r2, r3, #27
 800af12:	d407      	bmi.n	800af24 <__swsetup_r+0x30>
 800af14:	2209      	movs	r2, #9
 800af16:	602a      	str	r2, [r5, #0]
 800af18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	f04f 30ff 	mov.w	r0, #4294967295
 800af22:	e033      	b.n	800af8c <__swsetup_r+0x98>
 800af24:	0758      	lsls	r0, r3, #29
 800af26:	d512      	bpl.n	800af4e <__swsetup_r+0x5a>
 800af28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af2a:	b141      	cbz	r1, 800af3e <__swsetup_r+0x4a>
 800af2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af30:	4299      	cmp	r1, r3
 800af32:	d002      	beq.n	800af3a <__swsetup_r+0x46>
 800af34:	4628      	mov	r0, r5
 800af36:	f000 fea9 	bl	800bc8c <_free_r>
 800af3a:	2300      	movs	r3, #0
 800af3c:	6363      	str	r3, [r4, #52]	@ 0x34
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	2300      	movs	r3, #0
 800af48:	6063      	str	r3, [r4, #4]
 800af4a:	6923      	ldr	r3, [r4, #16]
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	f043 0308 	orr.w	r3, r3, #8
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	6923      	ldr	r3, [r4, #16]
 800af58:	b94b      	cbnz	r3, 800af6e <__swsetup_r+0x7a>
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af64:	d003      	beq.n	800af6e <__swsetup_r+0x7a>
 800af66:	4621      	mov	r1, r4
 800af68:	4628      	mov	r0, r5
 800af6a:	f001 fd1d 	bl	800c9a8 <__smakebuf_r>
 800af6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af72:	f013 0201 	ands.w	r2, r3, #1
 800af76:	d00a      	beq.n	800af8e <__swsetup_r+0x9a>
 800af78:	2200      	movs	r2, #0
 800af7a:	60a2      	str	r2, [r4, #8]
 800af7c:	6962      	ldr	r2, [r4, #20]
 800af7e:	4252      	negs	r2, r2
 800af80:	61a2      	str	r2, [r4, #24]
 800af82:	6922      	ldr	r2, [r4, #16]
 800af84:	b942      	cbnz	r2, 800af98 <__swsetup_r+0xa4>
 800af86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af8a:	d1c5      	bne.n	800af18 <__swsetup_r+0x24>
 800af8c:	bd38      	pop	{r3, r4, r5, pc}
 800af8e:	0799      	lsls	r1, r3, #30
 800af90:	bf58      	it	pl
 800af92:	6962      	ldrpl	r2, [r4, #20]
 800af94:	60a2      	str	r2, [r4, #8]
 800af96:	e7f4      	b.n	800af82 <__swsetup_r+0x8e>
 800af98:	2000      	movs	r0, #0
 800af9a:	e7f7      	b.n	800af8c <__swsetup_r+0x98>
 800af9c:	24000024 	.word	0x24000024

0800afa0 <memset>:
 800afa0:	4402      	add	r2, r0
 800afa2:	4603      	mov	r3, r0
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d100      	bne.n	800afaa <memset+0xa>
 800afa8:	4770      	bx	lr
 800afaa:	f803 1b01 	strb.w	r1, [r3], #1
 800afae:	e7f9      	b.n	800afa4 <memset+0x4>

0800afb0 <_localeconv_r>:
 800afb0:	4800      	ldr	r0, [pc, #0]	@ (800afb4 <_localeconv_r+0x4>)
 800afb2:	4770      	bx	lr
 800afb4:	24000164 	.word	0x24000164

0800afb8 <_close_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d06      	ldr	r5, [pc, #24]	@ (800afd4 <_close_r+0x1c>)
 800afbc:	2300      	movs	r3, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	602b      	str	r3, [r5, #0]
 800afc4:	f7f6 fde4 	bl	8001b90 <_close>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_close_r+0x1a>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_close_r+0x1a>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	2400091c 	.word	0x2400091c

0800afd8 <_lseek_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	@ (800aff8 <_lseek_r+0x20>)
 800afdc:	4604      	mov	r4, r0
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	602a      	str	r2, [r5, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f7f6 fdf9 	bl	8001bde <_lseek>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_lseek_r+0x1e>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_lseek_r+0x1e>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	2400091c 	.word	0x2400091c

0800affc <_read_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d07      	ldr	r5, [pc, #28]	@ (800b01c <_read_r+0x20>)
 800b000:	4604      	mov	r4, r0
 800b002:	4608      	mov	r0, r1
 800b004:	4611      	mov	r1, r2
 800b006:	2200      	movs	r2, #0
 800b008:	602a      	str	r2, [r5, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f7f6 fd87 	bl	8001b1e <_read>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_read_r+0x1e>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_read_r+0x1e>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	2400091c 	.word	0x2400091c

0800b020 <_write_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4d07      	ldr	r5, [pc, #28]	@ (800b040 <_write_r+0x20>)
 800b024:	4604      	mov	r4, r0
 800b026:	4608      	mov	r0, r1
 800b028:	4611      	mov	r1, r2
 800b02a:	2200      	movs	r2, #0
 800b02c:	602a      	str	r2, [r5, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	f7f6 fd92 	bl	8001b58 <_write>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d102      	bne.n	800b03e <_write_r+0x1e>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	b103      	cbz	r3, 800b03e <_write_r+0x1e>
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	2400091c 	.word	0x2400091c

0800b044 <__errno>:
 800b044:	4b01      	ldr	r3, [pc, #4]	@ (800b04c <__errno+0x8>)
 800b046:	6818      	ldr	r0, [r3, #0]
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	24000024 	.word	0x24000024

0800b050 <__libc_init_array>:
 800b050:	b570      	push	{r4, r5, r6, lr}
 800b052:	4d0d      	ldr	r5, [pc, #52]	@ (800b088 <__libc_init_array+0x38>)
 800b054:	4c0d      	ldr	r4, [pc, #52]	@ (800b08c <__libc_init_array+0x3c>)
 800b056:	1b64      	subs	r4, r4, r5
 800b058:	10a4      	asrs	r4, r4, #2
 800b05a:	2600      	movs	r6, #0
 800b05c:	42a6      	cmp	r6, r4
 800b05e:	d109      	bne.n	800b074 <__libc_init_array+0x24>
 800b060:	4d0b      	ldr	r5, [pc, #44]	@ (800b090 <__libc_init_array+0x40>)
 800b062:	4c0c      	ldr	r4, [pc, #48]	@ (800b094 <__libc_init_array+0x44>)
 800b064:	f001 ff22 	bl	800ceac <_init>
 800b068:	1b64      	subs	r4, r4, r5
 800b06a:	10a4      	asrs	r4, r4, #2
 800b06c:	2600      	movs	r6, #0
 800b06e:	42a6      	cmp	r6, r4
 800b070:	d105      	bne.n	800b07e <__libc_init_array+0x2e>
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	f855 3b04 	ldr.w	r3, [r5], #4
 800b078:	4798      	blx	r3
 800b07a:	3601      	adds	r6, #1
 800b07c:	e7ee      	b.n	800b05c <__libc_init_array+0xc>
 800b07e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b082:	4798      	blx	r3
 800b084:	3601      	adds	r6, #1
 800b086:	e7f2      	b.n	800b06e <__libc_init_array+0x1e>
 800b088:	0800d688 	.word	0x0800d688
 800b08c:	0800d688 	.word	0x0800d688
 800b090:	0800d688 	.word	0x0800d688
 800b094:	0800d68c 	.word	0x0800d68c

0800b098 <__retarget_lock_init_recursive>:
 800b098:	4770      	bx	lr

0800b09a <__retarget_lock_acquire_recursive>:
 800b09a:	4770      	bx	lr

0800b09c <__retarget_lock_release_recursive>:
 800b09c:	4770      	bx	lr

0800b09e <memcpy>:
 800b09e:	440a      	add	r2, r1
 800b0a0:	4291      	cmp	r1, r2
 800b0a2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0a6:	d100      	bne.n	800b0aa <memcpy+0xc>
 800b0a8:	4770      	bx	lr
 800b0aa:	b510      	push	{r4, lr}
 800b0ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0b4:	4291      	cmp	r1, r2
 800b0b6:	d1f9      	bne.n	800b0ac <memcpy+0xe>
 800b0b8:	bd10      	pop	{r4, pc}

0800b0ba <quorem>:
 800b0ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0be:	6903      	ldr	r3, [r0, #16]
 800b0c0:	690c      	ldr	r4, [r1, #16]
 800b0c2:	42a3      	cmp	r3, r4
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	db7e      	blt.n	800b1c6 <quorem+0x10c>
 800b0c8:	3c01      	subs	r4, #1
 800b0ca:	f101 0814 	add.w	r8, r1, #20
 800b0ce:	00a3      	lsls	r3, r4, #2
 800b0d0:	f100 0514 	add.w	r5, r0, #20
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0f0:	d32e      	bcc.n	800b150 <quorem+0x96>
 800b0f2:	f04f 0a00 	mov.w	sl, #0
 800b0f6:	46c4      	mov	ip, r8
 800b0f8:	46ae      	mov	lr, r5
 800b0fa:	46d3      	mov	fp, sl
 800b0fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b100:	b298      	uxth	r0, r3
 800b102:	fb06 a000 	mla	r0, r6, r0, sl
 800b106:	0c02      	lsrs	r2, r0, #16
 800b108:	0c1b      	lsrs	r3, r3, #16
 800b10a:	fb06 2303 	mla	r3, r6, r3, r2
 800b10e:	f8de 2000 	ldr.w	r2, [lr]
 800b112:	b280      	uxth	r0, r0
 800b114:	b292      	uxth	r2, r2
 800b116:	1a12      	subs	r2, r2, r0
 800b118:	445a      	add	r2, fp
 800b11a:	f8de 0000 	ldr.w	r0, [lr]
 800b11e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b122:	b29b      	uxth	r3, r3
 800b124:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b128:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b12c:	b292      	uxth	r2, r2
 800b12e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b132:	45e1      	cmp	r9, ip
 800b134:	f84e 2b04 	str.w	r2, [lr], #4
 800b138:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b13c:	d2de      	bcs.n	800b0fc <quorem+0x42>
 800b13e:	9b00      	ldr	r3, [sp, #0]
 800b140:	58eb      	ldr	r3, [r5, r3]
 800b142:	b92b      	cbnz	r3, 800b150 <quorem+0x96>
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	3b04      	subs	r3, #4
 800b148:	429d      	cmp	r5, r3
 800b14a:	461a      	mov	r2, r3
 800b14c:	d32f      	bcc.n	800b1ae <quorem+0xf4>
 800b14e:	613c      	str	r4, [r7, #16]
 800b150:	4638      	mov	r0, r7
 800b152:	f001 f90d 	bl	800c370 <__mcmp>
 800b156:	2800      	cmp	r0, #0
 800b158:	db25      	blt.n	800b1a6 <quorem+0xec>
 800b15a:	4629      	mov	r1, r5
 800b15c:	2000      	movs	r0, #0
 800b15e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b162:	f8d1 c000 	ldr.w	ip, [r1]
 800b166:	fa1f fe82 	uxth.w	lr, r2
 800b16a:	fa1f f38c 	uxth.w	r3, ip
 800b16e:	eba3 030e 	sub.w	r3, r3, lr
 800b172:	4403      	add	r3, r0
 800b174:	0c12      	lsrs	r2, r2, #16
 800b176:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b17a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b17e:	b29b      	uxth	r3, r3
 800b180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b184:	45c1      	cmp	r9, r8
 800b186:	f841 3b04 	str.w	r3, [r1], #4
 800b18a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b18e:	d2e6      	bcs.n	800b15e <quorem+0xa4>
 800b190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b198:	b922      	cbnz	r2, 800b1a4 <quorem+0xea>
 800b19a:	3b04      	subs	r3, #4
 800b19c:	429d      	cmp	r5, r3
 800b19e:	461a      	mov	r2, r3
 800b1a0:	d30b      	bcc.n	800b1ba <quorem+0x100>
 800b1a2:	613c      	str	r4, [r7, #16]
 800b1a4:	3601      	adds	r6, #1
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	b003      	add	sp, #12
 800b1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ae:	6812      	ldr	r2, [r2, #0]
 800b1b0:	3b04      	subs	r3, #4
 800b1b2:	2a00      	cmp	r2, #0
 800b1b4:	d1cb      	bne.n	800b14e <quorem+0x94>
 800b1b6:	3c01      	subs	r4, #1
 800b1b8:	e7c6      	b.n	800b148 <quorem+0x8e>
 800b1ba:	6812      	ldr	r2, [r2, #0]
 800b1bc:	3b04      	subs	r3, #4
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	d1ef      	bne.n	800b1a2 <quorem+0xe8>
 800b1c2:	3c01      	subs	r4, #1
 800b1c4:	e7ea      	b.n	800b19c <quorem+0xe2>
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	e7ee      	b.n	800b1a8 <quorem+0xee>
 800b1ca:	0000      	movs	r0, r0
 800b1cc:	0000      	movs	r0, r0
	...

0800b1d0 <_dtoa_r>:
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	ed2d 8b02 	vpush	{d8}
 800b1d8:	69c7      	ldr	r7, [r0, #28]
 800b1da:	b091      	sub	sp, #68	@ 0x44
 800b1dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1e0:	ec55 4b10 	vmov	r4, r5, d0
 800b1e4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b1e6:	9107      	str	r1, [sp, #28]
 800b1e8:	4681      	mov	r9, r0
 800b1ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1ec:	930d      	str	r3, [sp, #52]	@ 0x34
 800b1ee:	b97f      	cbnz	r7, 800b210 <_dtoa_r+0x40>
 800b1f0:	2010      	movs	r0, #16
 800b1f2:	f000 fd95 	bl	800bd20 <malloc>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	f8c9 001c 	str.w	r0, [r9, #28]
 800b1fc:	b920      	cbnz	r0, 800b208 <_dtoa_r+0x38>
 800b1fe:	4ba0      	ldr	r3, [pc, #640]	@ (800b480 <_dtoa_r+0x2b0>)
 800b200:	21ef      	movs	r1, #239	@ 0xef
 800b202:	48a0      	ldr	r0, [pc, #640]	@ (800b484 <_dtoa_r+0x2b4>)
 800b204:	f001 fc72 	bl	800caec <__assert_func>
 800b208:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b20c:	6007      	str	r7, [r0, #0]
 800b20e:	60c7      	str	r7, [r0, #12]
 800b210:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b214:	6819      	ldr	r1, [r3, #0]
 800b216:	b159      	cbz	r1, 800b230 <_dtoa_r+0x60>
 800b218:	685a      	ldr	r2, [r3, #4]
 800b21a:	604a      	str	r2, [r1, #4]
 800b21c:	2301      	movs	r3, #1
 800b21e:	4093      	lsls	r3, r2
 800b220:	608b      	str	r3, [r1, #8]
 800b222:	4648      	mov	r0, r9
 800b224:	f000 fe72 	bl	800bf0c <_Bfree>
 800b228:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
 800b230:	1e2b      	subs	r3, r5, #0
 800b232:	bfbb      	ittet	lt
 800b234:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b238:	9303      	strlt	r3, [sp, #12]
 800b23a:	2300      	movge	r3, #0
 800b23c:	2201      	movlt	r2, #1
 800b23e:	bfac      	ite	ge
 800b240:	6033      	strge	r3, [r6, #0]
 800b242:	6032      	strlt	r2, [r6, #0]
 800b244:	4b90      	ldr	r3, [pc, #576]	@ (800b488 <_dtoa_r+0x2b8>)
 800b246:	9e03      	ldr	r6, [sp, #12]
 800b248:	43b3      	bics	r3, r6
 800b24a:	d110      	bne.n	800b26e <_dtoa_r+0x9e>
 800b24c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b24e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b252:	6013      	str	r3, [r2, #0]
 800b254:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b258:	4323      	orrs	r3, r4
 800b25a:	f000 84e6 	beq.w	800bc2a <_dtoa_r+0xa5a>
 800b25e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b260:	4f8a      	ldr	r7, [pc, #552]	@ (800b48c <_dtoa_r+0x2bc>)
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 84e8 	beq.w	800bc38 <_dtoa_r+0xa68>
 800b268:	1cfb      	adds	r3, r7, #3
 800b26a:	f000 bce3 	b.w	800bc34 <_dtoa_r+0xa64>
 800b26e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b272:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27a:	d10a      	bne.n	800b292 <_dtoa_r+0xc2>
 800b27c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b27e:	2301      	movs	r3, #1
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b284:	b113      	cbz	r3, 800b28c <_dtoa_r+0xbc>
 800b286:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b288:	4b81      	ldr	r3, [pc, #516]	@ (800b490 <_dtoa_r+0x2c0>)
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	4f81      	ldr	r7, [pc, #516]	@ (800b494 <_dtoa_r+0x2c4>)
 800b28e:	f000 bcd3 	b.w	800bc38 <_dtoa_r+0xa68>
 800b292:	aa0e      	add	r2, sp, #56	@ 0x38
 800b294:	a90f      	add	r1, sp, #60	@ 0x3c
 800b296:	4648      	mov	r0, r9
 800b298:	eeb0 0b48 	vmov.f64	d0, d8
 800b29c:	f001 f918 	bl	800c4d0 <__d2b>
 800b2a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b2a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2a6:	9001      	str	r0, [sp, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d045      	beq.n	800b338 <_dtoa_r+0x168>
 800b2ac:	eeb0 7b48 	vmov.f64	d7, d8
 800b2b0:	ee18 1a90 	vmov	r1, s17
 800b2b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b2b8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b2bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b2c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b2c4:	2500      	movs	r5, #0
 800b2c6:	ee07 1a90 	vmov	s15, r1
 800b2ca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b2ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b468 <_dtoa_r+0x298>
 800b2d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b2d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b470 <_dtoa_r+0x2a0>
 800b2da:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b2de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b478 <_dtoa_r+0x2a8>
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b2ea:	eeb0 7b46 	vmov.f64	d7, d6
 800b2ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b2f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b2f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fe:	ee16 8a90 	vmov	r8, s13
 800b302:	d508      	bpl.n	800b316 <_dtoa_r+0x146>
 800b304:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b308:	eeb4 6b47 	vcmp.f64	d6, d7
 800b30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b310:	bf18      	it	ne
 800b312:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b316:	f1b8 0f16 	cmp.w	r8, #22
 800b31a:	d82b      	bhi.n	800b374 <_dtoa_r+0x1a4>
 800b31c:	495e      	ldr	r1, [pc, #376]	@ (800b498 <_dtoa_r+0x2c8>)
 800b31e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b322:	ed91 7b00 	vldr	d7, [r1]
 800b326:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32e:	d501      	bpl.n	800b334 <_dtoa_r+0x164>
 800b330:	f108 38ff 	add.w	r8, r8, #4294967295
 800b334:	2100      	movs	r1, #0
 800b336:	e01e      	b.n	800b376 <_dtoa_r+0x1a6>
 800b338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b33a:	4413      	add	r3, r2
 800b33c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b340:	2920      	cmp	r1, #32
 800b342:	bfc1      	itttt	gt
 800b344:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b348:	408e      	lslgt	r6, r1
 800b34a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b34e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b352:	bfd6      	itet	le
 800b354:	f1c1 0120 	rsble	r1, r1, #32
 800b358:	4331      	orrgt	r1, r6
 800b35a:	fa04 f101 	lslle.w	r1, r4, r1
 800b35e:	ee07 1a90 	vmov	s15, r1
 800b362:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b366:	3b01      	subs	r3, #1
 800b368:	ee17 1a90 	vmov	r1, s15
 800b36c:	2501      	movs	r5, #1
 800b36e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b372:	e7a8      	b.n	800b2c6 <_dtoa_r+0xf6>
 800b374:	2101      	movs	r1, #1
 800b376:	1ad2      	subs	r2, r2, r3
 800b378:	1e53      	subs	r3, r2, #1
 800b37a:	9306      	str	r3, [sp, #24]
 800b37c:	bf45      	ittet	mi
 800b37e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b382:	9304      	strmi	r3, [sp, #16]
 800b384:	2300      	movpl	r3, #0
 800b386:	2300      	movmi	r3, #0
 800b388:	bf4c      	ite	mi
 800b38a:	9306      	strmi	r3, [sp, #24]
 800b38c:	9304      	strpl	r3, [sp, #16]
 800b38e:	f1b8 0f00 	cmp.w	r8, #0
 800b392:	910c      	str	r1, [sp, #48]	@ 0x30
 800b394:	db18      	blt.n	800b3c8 <_dtoa_r+0x1f8>
 800b396:	9b06      	ldr	r3, [sp, #24]
 800b398:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b39c:	4443      	add	r3, r8
 800b39e:	9306      	str	r3, [sp, #24]
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	9a07      	ldr	r2, [sp, #28]
 800b3a4:	2a09      	cmp	r2, #9
 800b3a6:	d845      	bhi.n	800b434 <_dtoa_r+0x264>
 800b3a8:	2a05      	cmp	r2, #5
 800b3aa:	bfc4      	itt	gt
 800b3ac:	3a04      	subgt	r2, #4
 800b3ae:	9207      	strgt	r2, [sp, #28]
 800b3b0:	9a07      	ldr	r2, [sp, #28]
 800b3b2:	f1a2 0202 	sub.w	r2, r2, #2
 800b3b6:	bfcc      	ite	gt
 800b3b8:	2400      	movgt	r4, #0
 800b3ba:	2401      	movle	r4, #1
 800b3bc:	2a03      	cmp	r2, #3
 800b3be:	d844      	bhi.n	800b44a <_dtoa_r+0x27a>
 800b3c0:	e8df f002 	tbb	[pc, r2]
 800b3c4:	0b173634 	.word	0x0b173634
 800b3c8:	9b04      	ldr	r3, [sp, #16]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	eba3 0308 	sub.w	r3, r3, r8
 800b3d0:	9304      	str	r3, [sp, #16]
 800b3d2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3d4:	f1c8 0300 	rsb	r3, r8, #0
 800b3d8:	e7e3      	b.n	800b3a2 <_dtoa_r+0x1d2>
 800b3da:	2201      	movs	r2, #1
 800b3dc:	9208      	str	r2, [sp, #32]
 800b3de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3e0:	eb08 0b02 	add.w	fp, r8, r2
 800b3e4:	f10b 0a01 	add.w	sl, fp, #1
 800b3e8:	4652      	mov	r2, sl
 800b3ea:	2a01      	cmp	r2, #1
 800b3ec:	bfb8      	it	lt
 800b3ee:	2201      	movlt	r2, #1
 800b3f0:	e006      	b.n	800b400 <_dtoa_r+0x230>
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	9208      	str	r2, [sp, #32]
 800b3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3f8:	2a00      	cmp	r2, #0
 800b3fa:	dd29      	ble.n	800b450 <_dtoa_r+0x280>
 800b3fc:	4693      	mov	fp, r2
 800b3fe:	4692      	mov	sl, r2
 800b400:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b404:	2100      	movs	r1, #0
 800b406:	2004      	movs	r0, #4
 800b408:	f100 0614 	add.w	r6, r0, #20
 800b40c:	4296      	cmp	r6, r2
 800b40e:	d926      	bls.n	800b45e <_dtoa_r+0x28e>
 800b410:	6079      	str	r1, [r7, #4]
 800b412:	4648      	mov	r0, r9
 800b414:	9305      	str	r3, [sp, #20]
 800b416:	f000 fd39 	bl	800be8c <_Balloc>
 800b41a:	9b05      	ldr	r3, [sp, #20]
 800b41c:	4607      	mov	r7, r0
 800b41e:	2800      	cmp	r0, #0
 800b420:	d13e      	bne.n	800b4a0 <_dtoa_r+0x2d0>
 800b422:	4b1e      	ldr	r3, [pc, #120]	@ (800b49c <_dtoa_r+0x2cc>)
 800b424:	4602      	mov	r2, r0
 800b426:	f240 11af 	movw	r1, #431	@ 0x1af
 800b42a:	e6ea      	b.n	800b202 <_dtoa_r+0x32>
 800b42c:	2200      	movs	r2, #0
 800b42e:	e7e1      	b.n	800b3f4 <_dtoa_r+0x224>
 800b430:	2200      	movs	r2, #0
 800b432:	e7d3      	b.n	800b3dc <_dtoa_r+0x20c>
 800b434:	2401      	movs	r4, #1
 800b436:	2200      	movs	r2, #0
 800b438:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b43c:	f04f 3bff 	mov.w	fp, #4294967295
 800b440:	2100      	movs	r1, #0
 800b442:	46da      	mov	sl, fp
 800b444:	2212      	movs	r2, #18
 800b446:	9109      	str	r1, [sp, #36]	@ 0x24
 800b448:	e7da      	b.n	800b400 <_dtoa_r+0x230>
 800b44a:	2201      	movs	r2, #1
 800b44c:	9208      	str	r2, [sp, #32]
 800b44e:	e7f5      	b.n	800b43c <_dtoa_r+0x26c>
 800b450:	f04f 0b01 	mov.w	fp, #1
 800b454:	46da      	mov	sl, fp
 800b456:	465a      	mov	r2, fp
 800b458:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b45c:	e7d0      	b.n	800b400 <_dtoa_r+0x230>
 800b45e:	3101      	adds	r1, #1
 800b460:	0040      	lsls	r0, r0, #1
 800b462:	e7d1      	b.n	800b408 <_dtoa_r+0x238>
 800b464:	f3af 8000 	nop.w
 800b468:	636f4361 	.word	0x636f4361
 800b46c:	3fd287a7 	.word	0x3fd287a7
 800b470:	8b60c8b3 	.word	0x8b60c8b3
 800b474:	3fc68a28 	.word	0x3fc68a28
 800b478:	509f79fb 	.word	0x509f79fb
 800b47c:	3fd34413 	.word	0x3fd34413
 800b480:	0800d339 	.word	0x0800d339
 800b484:	0800d350 	.word	0x0800d350
 800b488:	7ff00000 	.word	0x7ff00000
 800b48c:	0800d335 	.word	0x0800d335
 800b490:	0800d309 	.word	0x0800d309
 800b494:	0800d308 	.word	0x0800d308
 800b498:	0800d4a0 	.word	0x0800d4a0
 800b49c:	0800d3a8 	.word	0x0800d3a8
 800b4a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b4a4:	f1ba 0f0e 	cmp.w	sl, #14
 800b4a8:	6010      	str	r0, [r2, #0]
 800b4aa:	d86e      	bhi.n	800b58a <_dtoa_r+0x3ba>
 800b4ac:	2c00      	cmp	r4, #0
 800b4ae:	d06c      	beq.n	800b58a <_dtoa_r+0x3ba>
 800b4b0:	f1b8 0f00 	cmp.w	r8, #0
 800b4b4:	f340 80b4 	ble.w	800b620 <_dtoa_r+0x450>
 800b4b8:	4ac8      	ldr	r2, [pc, #800]	@ (800b7dc <_dtoa_r+0x60c>)
 800b4ba:	f008 010f 	and.w	r1, r8, #15
 800b4be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b4c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b4c6:	ed92 7b00 	vldr	d7, [r2]
 800b4ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b4ce:	f000 809b 	beq.w	800b608 <_dtoa_r+0x438>
 800b4d2:	4ac3      	ldr	r2, [pc, #780]	@ (800b7e0 <_dtoa_r+0x610>)
 800b4d4:	ed92 6b08 	vldr	d6, [r2, #32]
 800b4d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b4dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b4e0:	f001 010f 	and.w	r1, r1, #15
 800b4e4:	2203      	movs	r2, #3
 800b4e6:	48be      	ldr	r0, [pc, #760]	@ (800b7e0 <_dtoa_r+0x610>)
 800b4e8:	2900      	cmp	r1, #0
 800b4ea:	f040 808f 	bne.w	800b60c <_dtoa_r+0x43c>
 800b4ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b4f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b4f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b4fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b500:	2900      	cmp	r1, #0
 800b502:	f000 80b3 	beq.w	800b66c <_dtoa_r+0x49c>
 800b506:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b50a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b512:	f140 80ab 	bpl.w	800b66c <_dtoa_r+0x49c>
 800b516:	f1ba 0f00 	cmp.w	sl, #0
 800b51a:	f000 80a7 	beq.w	800b66c <_dtoa_r+0x49c>
 800b51e:	f1bb 0f00 	cmp.w	fp, #0
 800b522:	dd30      	ble.n	800b586 <_dtoa_r+0x3b6>
 800b524:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b528:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b52c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b530:	f108 31ff 	add.w	r1, r8, #4294967295
 800b534:	9105      	str	r1, [sp, #20]
 800b536:	3201      	adds	r2, #1
 800b538:	465c      	mov	r4, fp
 800b53a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b53e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b542:	ee07 2a90 	vmov	s15, r2
 800b546:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b54a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b54e:	ee15 2a90 	vmov	r2, s11
 800b552:	ec51 0b15 	vmov	r0, r1, d5
 800b556:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b55a:	2c00      	cmp	r4, #0
 800b55c:	f040 808a 	bne.w	800b674 <_dtoa_r+0x4a4>
 800b560:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b564:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b568:	ec41 0b17 	vmov	d7, r0, r1
 800b56c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b574:	f300 826a 	bgt.w	800ba4c <_dtoa_r+0x87c>
 800b578:	eeb1 7b47 	vneg.f64	d7, d7
 800b57c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b584:	d423      	bmi.n	800b5ce <_dtoa_r+0x3fe>
 800b586:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b58a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	f2c0 8129 	blt.w	800b7e4 <_dtoa_r+0x614>
 800b592:	f1b8 0f0e 	cmp.w	r8, #14
 800b596:	f300 8125 	bgt.w	800b7e4 <_dtoa_r+0x614>
 800b59a:	4b90      	ldr	r3, [pc, #576]	@ (800b7dc <_dtoa_r+0x60c>)
 800b59c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b5a0:	ed93 6b00 	vldr	d6, [r3]
 800b5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f280 80c8 	bge.w	800b73c <_dtoa_r+0x56c>
 800b5ac:	f1ba 0f00 	cmp.w	sl, #0
 800b5b0:	f300 80c4 	bgt.w	800b73c <_dtoa_r+0x56c>
 800b5b4:	d10b      	bne.n	800b5ce <_dtoa_r+0x3fe>
 800b5b6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b5ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b5be:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ca:	f2c0 823c 	blt.w	800ba46 <_dtoa_r+0x876>
 800b5ce:	2400      	movs	r4, #0
 800b5d0:	4625      	mov	r5, r4
 800b5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5d4:	43db      	mvns	r3, r3
 800b5d6:	9305      	str	r3, [sp, #20]
 800b5d8:	463e      	mov	r6, r7
 800b5da:	f04f 0800 	mov.w	r8, #0
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4648      	mov	r0, r9
 800b5e2:	f000 fc93 	bl	800bf0c <_Bfree>
 800b5e6:	2d00      	cmp	r5, #0
 800b5e8:	f000 80a2 	beq.w	800b730 <_dtoa_r+0x560>
 800b5ec:	f1b8 0f00 	cmp.w	r8, #0
 800b5f0:	d005      	beq.n	800b5fe <_dtoa_r+0x42e>
 800b5f2:	45a8      	cmp	r8, r5
 800b5f4:	d003      	beq.n	800b5fe <_dtoa_r+0x42e>
 800b5f6:	4641      	mov	r1, r8
 800b5f8:	4648      	mov	r0, r9
 800b5fa:	f000 fc87 	bl	800bf0c <_Bfree>
 800b5fe:	4629      	mov	r1, r5
 800b600:	4648      	mov	r0, r9
 800b602:	f000 fc83 	bl	800bf0c <_Bfree>
 800b606:	e093      	b.n	800b730 <_dtoa_r+0x560>
 800b608:	2202      	movs	r2, #2
 800b60a:	e76c      	b.n	800b4e6 <_dtoa_r+0x316>
 800b60c:	07cc      	lsls	r4, r1, #31
 800b60e:	d504      	bpl.n	800b61a <_dtoa_r+0x44a>
 800b610:	ed90 6b00 	vldr	d6, [r0]
 800b614:	3201      	adds	r2, #1
 800b616:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b61a:	1049      	asrs	r1, r1, #1
 800b61c:	3008      	adds	r0, #8
 800b61e:	e763      	b.n	800b4e8 <_dtoa_r+0x318>
 800b620:	d022      	beq.n	800b668 <_dtoa_r+0x498>
 800b622:	f1c8 0100 	rsb	r1, r8, #0
 800b626:	4a6d      	ldr	r2, [pc, #436]	@ (800b7dc <_dtoa_r+0x60c>)
 800b628:	f001 000f 	and.w	r0, r1, #15
 800b62c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b630:	ed92 7b00 	vldr	d7, [r2]
 800b634:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b638:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b63c:	4868      	ldr	r0, [pc, #416]	@ (800b7e0 <_dtoa_r+0x610>)
 800b63e:	1109      	asrs	r1, r1, #4
 800b640:	2400      	movs	r4, #0
 800b642:	2202      	movs	r2, #2
 800b644:	b929      	cbnz	r1, 800b652 <_dtoa_r+0x482>
 800b646:	2c00      	cmp	r4, #0
 800b648:	f43f af57 	beq.w	800b4fa <_dtoa_r+0x32a>
 800b64c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b650:	e753      	b.n	800b4fa <_dtoa_r+0x32a>
 800b652:	07ce      	lsls	r6, r1, #31
 800b654:	d505      	bpl.n	800b662 <_dtoa_r+0x492>
 800b656:	ed90 6b00 	vldr	d6, [r0]
 800b65a:	3201      	adds	r2, #1
 800b65c:	2401      	movs	r4, #1
 800b65e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b662:	1049      	asrs	r1, r1, #1
 800b664:	3008      	adds	r0, #8
 800b666:	e7ed      	b.n	800b644 <_dtoa_r+0x474>
 800b668:	2202      	movs	r2, #2
 800b66a:	e746      	b.n	800b4fa <_dtoa_r+0x32a>
 800b66c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b670:	4654      	mov	r4, sl
 800b672:	e762      	b.n	800b53a <_dtoa_r+0x36a>
 800b674:	4a59      	ldr	r2, [pc, #356]	@ (800b7dc <_dtoa_r+0x60c>)
 800b676:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b67a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b67e:	9a08      	ldr	r2, [sp, #32]
 800b680:	ec41 0b17 	vmov	d7, r0, r1
 800b684:	443c      	add	r4, r7
 800b686:	b34a      	cbz	r2, 800b6dc <_dtoa_r+0x50c>
 800b688:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b68c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b690:	463e      	mov	r6, r7
 800b692:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b696:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b69a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b69e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b6a2:	ee14 2a90 	vmov	r2, s9
 800b6a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b6aa:	3230      	adds	r2, #48	@ 0x30
 800b6ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b6b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b8:	f806 2b01 	strb.w	r2, [r6], #1
 800b6bc:	d438      	bmi.n	800b730 <_dtoa_r+0x560>
 800b6be:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b6c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ca:	d46e      	bmi.n	800b7aa <_dtoa_r+0x5da>
 800b6cc:	42a6      	cmp	r6, r4
 800b6ce:	f43f af5a 	beq.w	800b586 <_dtoa_r+0x3b6>
 800b6d2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b6d6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b6da:	e7e0      	b.n	800b69e <_dtoa_r+0x4ce>
 800b6dc:	4621      	mov	r1, r4
 800b6de:	463e      	mov	r6, r7
 800b6e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b6e4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b6e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b6ec:	ee14 2a90 	vmov	r2, s9
 800b6f0:	3230      	adds	r2, #48	@ 0x30
 800b6f2:	f806 2b01 	strb.w	r2, [r6], #1
 800b6f6:	42a6      	cmp	r6, r4
 800b6f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b6fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b700:	d119      	bne.n	800b736 <_dtoa_r+0x566>
 800b702:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b706:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b70a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b712:	dc4a      	bgt.n	800b7aa <_dtoa_r+0x5da>
 800b714:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b718:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b720:	f57f af31 	bpl.w	800b586 <_dtoa_r+0x3b6>
 800b724:	460e      	mov	r6, r1
 800b726:	3901      	subs	r1, #1
 800b728:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b72c:	2b30      	cmp	r3, #48	@ 0x30
 800b72e:	d0f9      	beq.n	800b724 <_dtoa_r+0x554>
 800b730:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b734:	e027      	b.n	800b786 <_dtoa_r+0x5b6>
 800b736:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b73a:	e7d5      	b.n	800b6e8 <_dtoa_r+0x518>
 800b73c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b740:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b744:	463e      	mov	r6, r7
 800b746:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b74a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b74e:	ee15 3a10 	vmov	r3, s10
 800b752:	3330      	adds	r3, #48	@ 0x30
 800b754:	f806 3b01 	strb.w	r3, [r6], #1
 800b758:	1bf3      	subs	r3, r6, r7
 800b75a:	459a      	cmp	sl, r3
 800b75c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b760:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b764:	d132      	bne.n	800b7cc <_dtoa_r+0x5fc>
 800b766:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b76a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b772:	dc18      	bgt.n	800b7a6 <_dtoa_r+0x5d6>
 800b774:	eeb4 7b46 	vcmp.f64	d7, d6
 800b778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77c:	d103      	bne.n	800b786 <_dtoa_r+0x5b6>
 800b77e:	ee15 3a10 	vmov	r3, s10
 800b782:	07db      	lsls	r3, r3, #31
 800b784:	d40f      	bmi.n	800b7a6 <_dtoa_r+0x5d6>
 800b786:	9901      	ldr	r1, [sp, #4]
 800b788:	4648      	mov	r0, r9
 800b78a:	f000 fbbf 	bl	800bf0c <_Bfree>
 800b78e:	2300      	movs	r3, #0
 800b790:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b792:	7033      	strb	r3, [r6, #0]
 800b794:	f108 0301 	add.w	r3, r8, #1
 800b798:	6013      	str	r3, [r2, #0]
 800b79a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 824b 	beq.w	800bc38 <_dtoa_r+0xa68>
 800b7a2:	601e      	str	r6, [r3, #0]
 800b7a4:	e248      	b.n	800bc38 <_dtoa_r+0xa68>
 800b7a6:	f8cd 8014 	str.w	r8, [sp, #20]
 800b7aa:	4633      	mov	r3, r6
 800b7ac:	461e      	mov	r6, r3
 800b7ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7b2:	2a39      	cmp	r2, #57	@ 0x39
 800b7b4:	d106      	bne.n	800b7c4 <_dtoa_r+0x5f4>
 800b7b6:	429f      	cmp	r7, r3
 800b7b8:	d1f8      	bne.n	800b7ac <_dtoa_r+0x5dc>
 800b7ba:	9a05      	ldr	r2, [sp, #20]
 800b7bc:	3201      	adds	r2, #1
 800b7be:	9205      	str	r2, [sp, #20]
 800b7c0:	2230      	movs	r2, #48	@ 0x30
 800b7c2:	703a      	strb	r2, [r7, #0]
 800b7c4:	781a      	ldrb	r2, [r3, #0]
 800b7c6:	3201      	adds	r2, #1
 800b7c8:	701a      	strb	r2, [r3, #0]
 800b7ca:	e7b1      	b.n	800b730 <_dtoa_r+0x560>
 800b7cc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b7d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d8:	d1b5      	bne.n	800b746 <_dtoa_r+0x576>
 800b7da:	e7d4      	b.n	800b786 <_dtoa_r+0x5b6>
 800b7dc:	0800d4a0 	.word	0x0800d4a0
 800b7e0:	0800d478 	.word	0x0800d478
 800b7e4:	9908      	ldr	r1, [sp, #32]
 800b7e6:	2900      	cmp	r1, #0
 800b7e8:	f000 80e9 	beq.w	800b9be <_dtoa_r+0x7ee>
 800b7ec:	9907      	ldr	r1, [sp, #28]
 800b7ee:	2901      	cmp	r1, #1
 800b7f0:	f300 80cb 	bgt.w	800b98a <_dtoa_r+0x7ba>
 800b7f4:	2d00      	cmp	r5, #0
 800b7f6:	f000 80c4 	beq.w	800b982 <_dtoa_r+0x7b2>
 800b7fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b7fe:	9e04      	ldr	r6, [sp, #16]
 800b800:	461c      	mov	r4, r3
 800b802:	9305      	str	r3, [sp, #20]
 800b804:	9b04      	ldr	r3, [sp, #16]
 800b806:	4413      	add	r3, r2
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	9b06      	ldr	r3, [sp, #24]
 800b80c:	2101      	movs	r1, #1
 800b80e:	4413      	add	r3, r2
 800b810:	4648      	mov	r0, r9
 800b812:	9306      	str	r3, [sp, #24]
 800b814:	f000 fc2e 	bl	800c074 <__i2b>
 800b818:	9b05      	ldr	r3, [sp, #20]
 800b81a:	4605      	mov	r5, r0
 800b81c:	b166      	cbz	r6, 800b838 <_dtoa_r+0x668>
 800b81e:	9a06      	ldr	r2, [sp, #24]
 800b820:	2a00      	cmp	r2, #0
 800b822:	dd09      	ble.n	800b838 <_dtoa_r+0x668>
 800b824:	42b2      	cmp	r2, r6
 800b826:	9904      	ldr	r1, [sp, #16]
 800b828:	bfa8      	it	ge
 800b82a:	4632      	movge	r2, r6
 800b82c:	1a89      	subs	r1, r1, r2
 800b82e:	9104      	str	r1, [sp, #16]
 800b830:	9906      	ldr	r1, [sp, #24]
 800b832:	1ab6      	subs	r6, r6, r2
 800b834:	1a8a      	subs	r2, r1, r2
 800b836:	9206      	str	r2, [sp, #24]
 800b838:	b30b      	cbz	r3, 800b87e <_dtoa_r+0x6ae>
 800b83a:	9a08      	ldr	r2, [sp, #32]
 800b83c:	2a00      	cmp	r2, #0
 800b83e:	f000 80c5 	beq.w	800b9cc <_dtoa_r+0x7fc>
 800b842:	2c00      	cmp	r4, #0
 800b844:	f000 80bf 	beq.w	800b9c6 <_dtoa_r+0x7f6>
 800b848:	4629      	mov	r1, r5
 800b84a:	4622      	mov	r2, r4
 800b84c:	4648      	mov	r0, r9
 800b84e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b850:	f000 fcc8 	bl	800c1e4 <__pow5mult>
 800b854:	9a01      	ldr	r2, [sp, #4]
 800b856:	4601      	mov	r1, r0
 800b858:	4605      	mov	r5, r0
 800b85a:	4648      	mov	r0, r9
 800b85c:	f000 fc20 	bl	800c0a0 <__multiply>
 800b860:	9901      	ldr	r1, [sp, #4]
 800b862:	9005      	str	r0, [sp, #20]
 800b864:	4648      	mov	r0, r9
 800b866:	f000 fb51 	bl	800bf0c <_Bfree>
 800b86a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b86c:	1b1b      	subs	r3, r3, r4
 800b86e:	f000 80b0 	beq.w	800b9d2 <_dtoa_r+0x802>
 800b872:	9905      	ldr	r1, [sp, #20]
 800b874:	461a      	mov	r2, r3
 800b876:	4648      	mov	r0, r9
 800b878:	f000 fcb4 	bl	800c1e4 <__pow5mult>
 800b87c:	9001      	str	r0, [sp, #4]
 800b87e:	2101      	movs	r1, #1
 800b880:	4648      	mov	r0, r9
 800b882:	f000 fbf7 	bl	800c074 <__i2b>
 800b886:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b888:	4604      	mov	r4, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 81da 	beq.w	800bc44 <_dtoa_r+0xa74>
 800b890:	461a      	mov	r2, r3
 800b892:	4601      	mov	r1, r0
 800b894:	4648      	mov	r0, r9
 800b896:	f000 fca5 	bl	800c1e4 <__pow5mult>
 800b89a:	9b07      	ldr	r3, [sp, #28]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	4604      	mov	r4, r0
 800b8a0:	f300 80a0 	bgt.w	800b9e4 <_dtoa_r+0x814>
 800b8a4:	9b02      	ldr	r3, [sp, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f040 8096 	bne.w	800b9d8 <_dtoa_r+0x808>
 800b8ac:	9b03      	ldr	r3, [sp, #12]
 800b8ae:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b8b2:	2a00      	cmp	r2, #0
 800b8b4:	f040 8092 	bne.w	800b9dc <_dtoa_r+0x80c>
 800b8b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b8bc:	0d12      	lsrs	r2, r2, #20
 800b8be:	0512      	lsls	r2, r2, #20
 800b8c0:	2a00      	cmp	r2, #0
 800b8c2:	f000 808d 	beq.w	800b9e0 <_dtoa_r+0x810>
 800b8c6:	9b04      	ldr	r3, [sp, #16]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	9304      	str	r3, [sp, #16]
 800b8cc:	9b06      	ldr	r3, [sp, #24]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	9306      	str	r3, [sp, #24]
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 81b9 	beq.w	800bc50 <_dtoa_r+0xa80>
 800b8de:	6922      	ldr	r2, [r4, #16]
 800b8e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b8e4:	6910      	ldr	r0, [r2, #16]
 800b8e6:	f000 fb79 	bl	800bfdc <__hi0bits>
 800b8ea:	f1c0 0020 	rsb	r0, r0, #32
 800b8ee:	9b06      	ldr	r3, [sp, #24]
 800b8f0:	4418      	add	r0, r3
 800b8f2:	f010 001f 	ands.w	r0, r0, #31
 800b8f6:	f000 8081 	beq.w	800b9fc <_dtoa_r+0x82c>
 800b8fa:	f1c0 0220 	rsb	r2, r0, #32
 800b8fe:	2a04      	cmp	r2, #4
 800b900:	dd73      	ble.n	800b9ea <_dtoa_r+0x81a>
 800b902:	9b04      	ldr	r3, [sp, #16]
 800b904:	f1c0 001c 	rsb	r0, r0, #28
 800b908:	4403      	add	r3, r0
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	9b06      	ldr	r3, [sp, #24]
 800b90e:	4406      	add	r6, r0
 800b910:	4403      	add	r3, r0
 800b912:	9306      	str	r3, [sp, #24]
 800b914:	9b04      	ldr	r3, [sp, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	dd05      	ble.n	800b926 <_dtoa_r+0x756>
 800b91a:	9901      	ldr	r1, [sp, #4]
 800b91c:	461a      	mov	r2, r3
 800b91e:	4648      	mov	r0, r9
 800b920:	f000 fcba 	bl	800c298 <__lshift>
 800b924:	9001      	str	r0, [sp, #4]
 800b926:	9b06      	ldr	r3, [sp, #24]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dd05      	ble.n	800b938 <_dtoa_r+0x768>
 800b92c:	4621      	mov	r1, r4
 800b92e:	461a      	mov	r2, r3
 800b930:	4648      	mov	r0, r9
 800b932:	f000 fcb1 	bl	800c298 <__lshift>
 800b936:	4604      	mov	r4, r0
 800b938:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d060      	beq.n	800ba00 <_dtoa_r+0x830>
 800b93e:	9801      	ldr	r0, [sp, #4]
 800b940:	4621      	mov	r1, r4
 800b942:	f000 fd15 	bl	800c370 <__mcmp>
 800b946:	2800      	cmp	r0, #0
 800b948:	da5a      	bge.n	800ba00 <_dtoa_r+0x830>
 800b94a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b94e:	9305      	str	r3, [sp, #20]
 800b950:	9901      	ldr	r1, [sp, #4]
 800b952:	2300      	movs	r3, #0
 800b954:	220a      	movs	r2, #10
 800b956:	4648      	mov	r0, r9
 800b958:	f000 fafa 	bl	800bf50 <__multadd>
 800b95c:	9b08      	ldr	r3, [sp, #32]
 800b95e:	9001      	str	r0, [sp, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	f000 8177 	beq.w	800bc54 <_dtoa_r+0xa84>
 800b966:	4629      	mov	r1, r5
 800b968:	2300      	movs	r3, #0
 800b96a:	220a      	movs	r2, #10
 800b96c:	4648      	mov	r0, r9
 800b96e:	f000 faef 	bl	800bf50 <__multadd>
 800b972:	f1bb 0f00 	cmp.w	fp, #0
 800b976:	4605      	mov	r5, r0
 800b978:	dc6e      	bgt.n	800ba58 <_dtoa_r+0x888>
 800b97a:	9b07      	ldr	r3, [sp, #28]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	dc48      	bgt.n	800ba12 <_dtoa_r+0x842>
 800b980:	e06a      	b.n	800ba58 <_dtoa_r+0x888>
 800b982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b984:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b988:	e739      	b.n	800b7fe <_dtoa_r+0x62e>
 800b98a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b98e:	42a3      	cmp	r3, r4
 800b990:	db07      	blt.n	800b9a2 <_dtoa_r+0x7d2>
 800b992:	f1ba 0f00 	cmp.w	sl, #0
 800b996:	eba3 0404 	sub.w	r4, r3, r4
 800b99a:	db0b      	blt.n	800b9b4 <_dtoa_r+0x7e4>
 800b99c:	9e04      	ldr	r6, [sp, #16]
 800b99e:	4652      	mov	r2, sl
 800b9a0:	e72f      	b.n	800b802 <_dtoa_r+0x632>
 800b9a2:	1ae2      	subs	r2, r4, r3
 800b9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9a6:	9e04      	ldr	r6, [sp, #16]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9ac:	4652      	mov	r2, sl
 800b9ae:	4623      	mov	r3, r4
 800b9b0:	2400      	movs	r4, #0
 800b9b2:	e726      	b.n	800b802 <_dtoa_r+0x632>
 800b9b4:	9a04      	ldr	r2, [sp, #16]
 800b9b6:	eba2 060a 	sub.w	r6, r2, sl
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	e721      	b.n	800b802 <_dtoa_r+0x632>
 800b9be:	9e04      	ldr	r6, [sp, #16]
 800b9c0:	9d08      	ldr	r5, [sp, #32]
 800b9c2:	461c      	mov	r4, r3
 800b9c4:	e72a      	b.n	800b81c <_dtoa_r+0x64c>
 800b9c6:	9a01      	ldr	r2, [sp, #4]
 800b9c8:	9205      	str	r2, [sp, #20]
 800b9ca:	e752      	b.n	800b872 <_dtoa_r+0x6a2>
 800b9cc:	9901      	ldr	r1, [sp, #4]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	e751      	b.n	800b876 <_dtoa_r+0x6a6>
 800b9d2:	9b05      	ldr	r3, [sp, #20]
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	e752      	b.n	800b87e <_dtoa_r+0x6ae>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e77b      	b.n	800b8d4 <_dtoa_r+0x704>
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	e779      	b.n	800b8d4 <_dtoa_r+0x704>
 800b9e0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b9e2:	e778      	b.n	800b8d6 <_dtoa_r+0x706>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9e8:	e779      	b.n	800b8de <_dtoa_r+0x70e>
 800b9ea:	d093      	beq.n	800b914 <_dtoa_r+0x744>
 800b9ec:	9b04      	ldr	r3, [sp, #16]
 800b9ee:	321c      	adds	r2, #28
 800b9f0:	4413      	add	r3, r2
 800b9f2:	9304      	str	r3, [sp, #16]
 800b9f4:	9b06      	ldr	r3, [sp, #24]
 800b9f6:	4416      	add	r6, r2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	e78a      	b.n	800b912 <_dtoa_r+0x742>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	e7f5      	b.n	800b9ec <_dtoa_r+0x81c>
 800ba00:	f1ba 0f00 	cmp.w	sl, #0
 800ba04:	f8cd 8014 	str.w	r8, [sp, #20]
 800ba08:	46d3      	mov	fp, sl
 800ba0a:	dc21      	bgt.n	800ba50 <_dtoa_r+0x880>
 800ba0c:	9b07      	ldr	r3, [sp, #28]
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	dd1e      	ble.n	800ba50 <_dtoa_r+0x880>
 800ba12:	f1bb 0f00 	cmp.w	fp, #0
 800ba16:	f47f addc 	bne.w	800b5d2 <_dtoa_r+0x402>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	465b      	mov	r3, fp
 800ba1e:	2205      	movs	r2, #5
 800ba20:	4648      	mov	r0, r9
 800ba22:	f000 fa95 	bl	800bf50 <__multadd>
 800ba26:	4601      	mov	r1, r0
 800ba28:	4604      	mov	r4, r0
 800ba2a:	9801      	ldr	r0, [sp, #4]
 800ba2c:	f000 fca0 	bl	800c370 <__mcmp>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	f77f adce 	ble.w	800b5d2 <_dtoa_r+0x402>
 800ba36:	463e      	mov	r6, r7
 800ba38:	2331      	movs	r3, #49	@ 0x31
 800ba3a:	f806 3b01 	strb.w	r3, [r6], #1
 800ba3e:	9b05      	ldr	r3, [sp, #20]
 800ba40:	3301      	adds	r3, #1
 800ba42:	9305      	str	r3, [sp, #20]
 800ba44:	e5c9      	b.n	800b5da <_dtoa_r+0x40a>
 800ba46:	f8cd 8014 	str.w	r8, [sp, #20]
 800ba4a:	4654      	mov	r4, sl
 800ba4c:	4625      	mov	r5, r4
 800ba4e:	e7f2      	b.n	800ba36 <_dtoa_r+0x866>
 800ba50:	9b08      	ldr	r3, [sp, #32]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 8102 	beq.w	800bc5c <_dtoa_r+0xa8c>
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	dd05      	ble.n	800ba68 <_dtoa_r+0x898>
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	4632      	mov	r2, r6
 800ba60:	4648      	mov	r0, r9
 800ba62:	f000 fc19 	bl	800c298 <__lshift>
 800ba66:	4605      	mov	r5, r0
 800ba68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d058      	beq.n	800bb20 <_dtoa_r+0x950>
 800ba6e:	6869      	ldr	r1, [r5, #4]
 800ba70:	4648      	mov	r0, r9
 800ba72:	f000 fa0b 	bl	800be8c <_Balloc>
 800ba76:	4606      	mov	r6, r0
 800ba78:	b928      	cbnz	r0, 800ba86 <_dtoa_r+0x8b6>
 800ba7a:	4b82      	ldr	r3, [pc, #520]	@ (800bc84 <_dtoa_r+0xab4>)
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba82:	f7ff bbbe 	b.w	800b202 <_dtoa_r+0x32>
 800ba86:	692a      	ldr	r2, [r5, #16]
 800ba88:	3202      	adds	r2, #2
 800ba8a:	0092      	lsls	r2, r2, #2
 800ba8c:	f105 010c 	add.w	r1, r5, #12
 800ba90:	300c      	adds	r0, #12
 800ba92:	f7ff fb04 	bl	800b09e <memcpy>
 800ba96:	2201      	movs	r2, #1
 800ba98:	4631      	mov	r1, r6
 800ba9a:	4648      	mov	r0, r9
 800ba9c:	f000 fbfc 	bl	800c298 <__lshift>
 800baa0:	1c7b      	adds	r3, r7, #1
 800baa2:	9304      	str	r3, [sp, #16]
 800baa4:	eb07 030b 	add.w	r3, r7, fp
 800baa8:	9309      	str	r3, [sp, #36]	@ 0x24
 800baaa:	9b02      	ldr	r3, [sp, #8]
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	46a8      	mov	r8, r5
 800bab2:	9308      	str	r3, [sp, #32]
 800bab4:	4605      	mov	r5, r0
 800bab6:	9b04      	ldr	r3, [sp, #16]
 800bab8:	9801      	ldr	r0, [sp, #4]
 800baba:	4621      	mov	r1, r4
 800babc:	f103 3bff 	add.w	fp, r3, #4294967295
 800bac0:	f7ff fafb 	bl	800b0ba <quorem>
 800bac4:	4641      	mov	r1, r8
 800bac6:	9002      	str	r0, [sp, #8]
 800bac8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bacc:	9801      	ldr	r0, [sp, #4]
 800bace:	f000 fc4f 	bl	800c370 <__mcmp>
 800bad2:	462a      	mov	r2, r5
 800bad4:	9006      	str	r0, [sp, #24]
 800bad6:	4621      	mov	r1, r4
 800bad8:	4648      	mov	r0, r9
 800bada:	f000 fc65 	bl	800c3a8 <__mdiff>
 800bade:	68c2      	ldr	r2, [r0, #12]
 800bae0:	4606      	mov	r6, r0
 800bae2:	b9fa      	cbnz	r2, 800bb24 <_dtoa_r+0x954>
 800bae4:	4601      	mov	r1, r0
 800bae6:	9801      	ldr	r0, [sp, #4]
 800bae8:	f000 fc42 	bl	800c370 <__mcmp>
 800baec:	4602      	mov	r2, r0
 800baee:	4631      	mov	r1, r6
 800baf0:	4648      	mov	r0, r9
 800baf2:	920a      	str	r2, [sp, #40]	@ 0x28
 800baf4:	f000 fa0a 	bl	800bf0c <_Bfree>
 800baf8:	9b07      	ldr	r3, [sp, #28]
 800bafa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bafc:	9e04      	ldr	r6, [sp, #16]
 800bafe:	ea42 0103 	orr.w	r1, r2, r3
 800bb02:	9b08      	ldr	r3, [sp, #32]
 800bb04:	4319      	orrs	r1, r3
 800bb06:	d10f      	bne.n	800bb28 <_dtoa_r+0x958>
 800bb08:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bb0c:	d028      	beq.n	800bb60 <_dtoa_r+0x990>
 800bb0e:	9b06      	ldr	r3, [sp, #24]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	dd02      	ble.n	800bb1a <_dtoa_r+0x94a>
 800bb14:	9b02      	ldr	r3, [sp, #8]
 800bb16:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bb1a:	f88b a000 	strb.w	sl, [fp]
 800bb1e:	e55e      	b.n	800b5de <_dtoa_r+0x40e>
 800bb20:	4628      	mov	r0, r5
 800bb22:	e7bd      	b.n	800baa0 <_dtoa_r+0x8d0>
 800bb24:	2201      	movs	r2, #1
 800bb26:	e7e2      	b.n	800baee <_dtoa_r+0x91e>
 800bb28:	9b06      	ldr	r3, [sp, #24]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	db04      	blt.n	800bb38 <_dtoa_r+0x968>
 800bb2e:	9907      	ldr	r1, [sp, #28]
 800bb30:	430b      	orrs	r3, r1
 800bb32:	9908      	ldr	r1, [sp, #32]
 800bb34:	430b      	orrs	r3, r1
 800bb36:	d120      	bne.n	800bb7a <_dtoa_r+0x9aa>
 800bb38:	2a00      	cmp	r2, #0
 800bb3a:	ddee      	ble.n	800bb1a <_dtoa_r+0x94a>
 800bb3c:	9901      	ldr	r1, [sp, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	4648      	mov	r0, r9
 800bb42:	f000 fba9 	bl	800c298 <__lshift>
 800bb46:	4621      	mov	r1, r4
 800bb48:	9001      	str	r0, [sp, #4]
 800bb4a:	f000 fc11 	bl	800c370 <__mcmp>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	dc03      	bgt.n	800bb5a <_dtoa_r+0x98a>
 800bb52:	d1e2      	bne.n	800bb1a <_dtoa_r+0x94a>
 800bb54:	f01a 0f01 	tst.w	sl, #1
 800bb58:	d0df      	beq.n	800bb1a <_dtoa_r+0x94a>
 800bb5a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bb5e:	d1d9      	bne.n	800bb14 <_dtoa_r+0x944>
 800bb60:	2339      	movs	r3, #57	@ 0x39
 800bb62:	f88b 3000 	strb.w	r3, [fp]
 800bb66:	4633      	mov	r3, r6
 800bb68:	461e      	mov	r6, r3
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb70:	2a39      	cmp	r2, #57	@ 0x39
 800bb72:	d052      	beq.n	800bc1a <_dtoa_r+0xa4a>
 800bb74:	3201      	adds	r2, #1
 800bb76:	701a      	strb	r2, [r3, #0]
 800bb78:	e531      	b.n	800b5de <_dtoa_r+0x40e>
 800bb7a:	2a00      	cmp	r2, #0
 800bb7c:	dd07      	ble.n	800bb8e <_dtoa_r+0x9be>
 800bb7e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bb82:	d0ed      	beq.n	800bb60 <_dtoa_r+0x990>
 800bb84:	f10a 0301 	add.w	r3, sl, #1
 800bb88:	f88b 3000 	strb.w	r3, [fp]
 800bb8c:	e527      	b.n	800b5de <_dtoa_r+0x40e>
 800bb8e:	9b04      	ldr	r3, [sp, #16]
 800bb90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb92:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d029      	beq.n	800bbee <_dtoa_r+0xa1e>
 800bb9a:	9901      	ldr	r1, [sp, #4]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	220a      	movs	r2, #10
 800bba0:	4648      	mov	r0, r9
 800bba2:	f000 f9d5 	bl	800bf50 <__multadd>
 800bba6:	45a8      	cmp	r8, r5
 800bba8:	9001      	str	r0, [sp, #4]
 800bbaa:	f04f 0300 	mov.w	r3, #0
 800bbae:	f04f 020a 	mov.w	r2, #10
 800bbb2:	4641      	mov	r1, r8
 800bbb4:	4648      	mov	r0, r9
 800bbb6:	d107      	bne.n	800bbc8 <_dtoa_r+0x9f8>
 800bbb8:	f000 f9ca 	bl	800bf50 <__multadd>
 800bbbc:	4680      	mov	r8, r0
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	9304      	str	r3, [sp, #16]
 800bbc6:	e776      	b.n	800bab6 <_dtoa_r+0x8e6>
 800bbc8:	f000 f9c2 	bl	800bf50 <__multadd>
 800bbcc:	4629      	mov	r1, r5
 800bbce:	4680      	mov	r8, r0
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	220a      	movs	r2, #10
 800bbd4:	4648      	mov	r0, r9
 800bbd6:	f000 f9bb 	bl	800bf50 <__multadd>
 800bbda:	4605      	mov	r5, r0
 800bbdc:	e7f0      	b.n	800bbc0 <_dtoa_r+0x9f0>
 800bbde:	f1bb 0f00 	cmp.w	fp, #0
 800bbe2:	bfcc      	ite	gt
 800bbe4:	465e      	movgt	r6, fp
 800bbe6:	2601      	movle	r6, #1
 800bbe8:	443e      	add	r6, r7
 800bbea:	f04f 0800 	mov.w	r8, #0
 800bbee:	9901      	ldr	r1, [sp, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	4648      	mov	r0, r9
 800bbf4:	f000 fb50 	bl	800c298 <__lshift>
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	9001      	str	r0, [sp, #4]
 800bbfc:	f000 fbb8 	bl	800c370 <__mcmp>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	dcb0      	bgt.n	800bb66 <_dtoa_r+0x996>
 800bc04:	d102      	bne.n	800bc0c <_dtoa_r+0xa3c>
 800bc06:	f01a 0f01 	tst.w	sl, #1
 800bc0a:	d1ac      	bne.n	800bb66 <_dtoa_r+0x996>
 800bc0c:	4633      	mov	r3, r6
 800bc0e:	461e      	mov	r6, r3
 800bc10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc14:	2a30      	cmp	r2, #48	@ 0x30
 800bc16:	d0fa      	beq.n	800bc0e <_dtoa_r+0xa3e>
 800bc18:	e4e1      	b.n	800b5de <_dtoa_r+0x40e>
 800bc1a:	429f      	cmp	r7, r3
 800bc1c:	d1a4      	bne.n	800bb68 <_dtoa_r+0x998>
 800bc1e:	9b05      	ldr	r3, [sp, #20]
 800bc20:	3301      	adds	r3, #1
 800bc22:	9305      	str	r3, [sp, #20]
 800bc24:	2331      	movs	r3, #49	@ 0x31
 800bc26:	703b      	strb	r3, [r7, #0]
 800bc28:	e4d9      	b.n	800b5de <_dtoa_r+0x40e>
 800bc2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc2c:	4f16      	ldr	r7, [pc, #88]	@ (800bc88 <_dtoa_r+0xab8>)
 800bc2e:	b11b      	cbz	r3, 800bc38 <_dtoa_r+0xa68>
 800bc30:	f107 0308 	add.w	r3, r7, #8
 800bc34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	4638      	mov	r0, r7
 800bc3a:	b011      	add	sp, #68	@ 0x44
 800bc3c:	ecbd 8b02 	vpop	{d8}
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc44:	9b07      	ldr	r3, [sp, #28]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	f77f ae2c 	ble.w	800b8a4 <_dtoa_r+0x6d4>
 800bc4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc50:	2001      	movs	r0, #1
 800bc52:	e64c      	b.n	800b8ee <_dtoa_r+0x71e>
 800bc54:	f1bb 0f00 	cmp.w	fp, #0
 800bc58:	f77f aed8 	ble.w	800ba0c <_dtoa_r+0x83c>
 800bc5c:	463e      	mov	r6, r7
 800bc5e:	9801      	ldr	r0, [sp, #4]
 800bc60:	4621      	mov	r1, r4
 800bc62:	f7ff fa2a 	bl	800b0ba <quorem>
 800bc66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bc6a:	f806 ab01 	strb.w	sl, [r6], #1
 800bc6e:	1bf2      	subs	r2, r6, r7
 800bc70:	4593      	cmp	fp, r2
 800bc72:	ddb4      	ble.n	800bbde <_dtoa_r+0xa0e>
 800bc74:	9901      	ldr	r1, [sp, #4]
 800bc76:	2300      	movs	r3, #0
 800bc78:	220a      	movs	r2, #10
 800bc7a:	4648      	mov	r0, r9
 800bc7c:	f000 f968 	bl	800bf50 <__multadd>
 800bc80:	9001      	str	r0, [sp, #4]
 800bc82:	e7ec      	b.n	800bc5e <_dtoa_r+0xa8e>
 800bc84:	0800d3a8 	.word	0x0800d3a8
 800bc88:	0800d32c 	.word	0x0800d32c

0800bc8c <_free_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4605      	mov	r5, r0
 800bc90:	2900      	cmp	r1, #0
 800bc92:	d041      	beq.n	800bd18 <_free_r+0x8c>
 800bc94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc98:	1f0c      	subs	r4, r1, #4
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	bfb8      	it	lt
 800bc9e:	18e4      	addlt	r4, r4, r3
 800bca0:	f000 f8e8 	bl	800be74 <__malloc_lock>
 800bca4:	4a1d      	ldr	r2, [pc, #116]	@ (800bd1c <_free_r+0x90>)
 800bca6:	6813      	ldr	r3, [r2, #0]
 800bca8:	b933      	cbnz	r3, 800bcb8 <_free_r+0x2c>
 800bcaa:	6063      	str	r3, [r4, #4]
 800bcac:	6014      	str	r4, [r2, #0]
 800bcae:	4628      	mov	r0, r5
 800bcb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcb4:	f000 b8e4 	b.w	800be80 <__malloc_unlock>
 800bcb8:	42a3      	cmp	r3, r4
 800bcba:	d908      	bls.n	800bcce <_free_r+0x42>
 800bcbc:	6820      	ldr	r0, [r4, #0]
 800bcbe:	1821      	adds	r1, r4, r0
 800bcc0:	428b      	cmp	r3, r1
 800bcc2:	bf01      	itttt	eq
 800bcc4:	6819      	ldreq	r1, [r3, #0]
 800bcc6:	685b      	ldreq	r3, [r3, #4]
 800bcc8:	1809      	addeq	r1, r1, r0
 800bcca:	6021      	streq	r1, [r4, #0]
 800bccc:	e7ed      	b.n	800bcaa <_free_r+0x1e>
 800bcce:	461a      	mov	r2, r3
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	b10b      	cbz	r3, 800bcd8 <_free_r+0x4c>
 800bcd4:	42a3      	cmp	r3, r4
 800bcd6:	d9fa      	bls.n	800bcce <_free_r+0x42>
 800bcd8:	6811      	ldr	r1, [r2, #0]
 800bcda:	1850      	adds	r0, r2, r1
 800bcdc:	42a0      	cmp	r0, r4
 800bcde:	d10b      	bne.n	800bcf8 <_free_r+0x6c>
 800bce0:	6820      	ldr	r0, [r4, #0]
 800bce2:	4401      	add	r1, r0
 800bce4:	1850      	adds	r0, r2, r1
 800bce6:	4283      	cmp	r3, r0
 800bce8:	6011      	str	r1, [r2, #0]
 800bcea:	d1e0      	bne.n	800bcae <_free_r+0x22>
 800bcec:	6818      	ldr	r0, [r3, #0]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	6053      	str	r3, [r2, #4]
 800bcf2:	4408      	add	r0, r1
 800bcf4:	6010      	str	r0, [r2, #0]
 800bcf6:	e7da      	b.n	800bcae <_free_r+0x22>
 800bcf8:	d902      	bls.n	800bd00 <_free_r+0x74>
 800bcfa:	230c      	movs	r3, #12
 800bcfc:	602b      	str	r3, [r5, #0]
 800bcfe:	e7d6      	b.n	800bcae <_free_r+0x22>
 800bd00:	6820      	ldr	r0, [r4, #0]
 800bd02:	1821      	adds	r1, r4, r0
 800bd04:	428b      	cmp	r3, r1
 800bd06:	bf04      	itt	eq
 800bd08:	6819      	ldreq	r1, [r3, #0]
 800bd0a:	685b      	ldreq	r3, [r3, #4]
 800bd0c:	6063      	str	r3, [r4, #4]
 800bd0e:	bf04      	itt	eq
 800bd10:	1809      	addeq	r1, r1, r0
 800bd12:	6021      	streq	r1, [r4, #0]
 800bd14:	6054      	str	r4, [r2, #4]
 800bd16:	e7ca      	b.n	800bcae <_free_r+0x22>
 800bd18:	bd38      	pop	{r3, r4, r5, pc}
 800bd1a:	bf00      	nop
 800bd1c:	24000928 	.word	0x24000928

0800bd20 <malloc>:
 800bd20:	4b02      	ldr	r3, [pc, #8]	@ (800bd2c <malloc+0xc>)
 800bd22:	4601      	mov	r1, r0
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	f000 b825 	b.w	800bd74 <_malloc_r>
 800bd2a:	bf00      	nop
 800bd2c:	24000024 	.word	0x24000024

0800bd30 <sbrk_aligned>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	4e0f      	ldr	r6, [pc, #60]	@ (800bd70 <sbrk_aligned+0x40>)
 800bd34:	460c      	mov	r4, r1
 800bd36:	6831      	ldr	r1, [r6, #0]
 800bd38:	4605      	mov	r5, r0
 800bd3a:	b911      	cbnz	r1, 800bd42 <sbrk_aligned+0x12>
 800bd3c:	f000 fec6 	bl	800cacc <_sbrk_r>
 800bd40:	6030      	str	r0, [r6, #0]
 800bd42:	4621      	mov	r1, r4
 800bd44:	4628      	mov	r0, r5
 800bd46:	f000 fec1 	bl	800cacc <_sbrk_r>
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	d103      	bne.n	800bd56 <sbrk_aligned+0x26>
 800bd4e:	f04f 34ff 	mov.w	r4, #4294967295
 800bd52:	4620      	mov	r0, r4
 800bd54:	bd70      	pop	{r4, r5, r6, pc}
 800bd56:	1cc4      	adds	r4, r0, #3
 800bd58:	f024 0403 	bic.w	r4, r4, #3
 800bd5c:	42a0      	cmp	r0, r4
 800bd5e:	d0f8      	beq.n	800bd52 <sbrk_aligned+0x22>
 800bd60:	1a21      	subs	r1, r4, r0
 800bd62:	4628      	mov	r0, r5
 800bd64:	f000 feb2 	bl	800cacc <_sbrk_r>
 800bd68:	3001      	adds	r0, #1
 800bd6a:	d1f2      	bne.n	800bd52 <sbrk_aligned+0x22>
 800bd6c:	e7ef      	b.n	800bd4e <sbrk_aligned+0x1e>
 800bd6e:	bf00      	nop
 800bd70:	24000924 	.word	0x24000924

0800bd74 <_malloc_r>:
 800bd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd78:	1ccd      	adds	r5, r1, #3
 800bd7a:	f025 0503 	bic.w	r5, r5, #3
 800bd7e:	3508      	adds	r5, #8
 800bd80:	2d0c      	cmp	r5, #12
 800bd82:	bf38      	it	cc
 800bd84:	250c      	movcc	r5, #12
 800bd86:	2d00      	cmp	r5, #0
 800bd88:	4606      	mov	r6, r0
 800bd8a:	db01      	blt.n	800bd90 <_malloc_r+0x1c>
 800bd8c:	42a9      	cmp	r1, r5
 800bd8e:	d904      	bls.n	800bd9a <_malloc_r+0x26>
 800bd90:	230c      	movs	r3, #12
 800bd92:	6033      	str	r3, [r6, #0]
 800bd94:	2000      	movs	r0, #0
 800bd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be70 <_malloc_r+0xfc>
 800bd9e:	f000 f869 	bl	800be74 <__malloc_lock>
 800bda2:	f8d8 3000 	ldr.w	r3, [r8]
 800bda6:	461c      	mov	r4, r3
 800bda8:	bb44      	cbnz	r4, 800bdfc <_malloc_r+0x88>
 800bdaa:	4629      	mov	r1, r5
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff ffbf 	bl	800bd30 <sbrk_aligned>
 800bdb2:	1c43      	adds	r3, r0, #1
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	d158      	bne.n	800be6a <_malloc_r+0xf6>
 800bdb8:	f8d8 4000 	ldr.w	r4, [r8]
 800bdbc:	4627      	mov	r7, r4
 800bdbe:	2f00      	cmp	r7, #0
 800bdc0:	d143      	bne.n	800be4a <_malloc_r+0xd6>
 800bdc2:	2c00      	cmp	r4, #0
 800bdc4:	d04b      	beq.n	800be5e <_malloc_r+0xea>
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	4639      	mov	r1, r7
 800bdca:	4630      	mov	r0, r6
 800bdcc:	eb04 0903 	add.w	r9, r4, r3
 800bdd0:	f000 fe7c 	bl	800cacc <_sbrk_r>
 800bdd4:	4581      	cmp	r9, r0
 800bdd6:	d142      	bne.n	800be5e <_malloc_r+0xea>
 800bdd8:	6821      	ldr	r1, [r4, #0]
 800bdda:	1a6d      	subs	r5, r5, r1
 800bddc:	4629      	mov	r1, r5
 800bdde:	4630      	mov	r0, r6
 800bde0:	f7ff ffa6 	bl	800bd30 <sbrk_aligned>
 800bde4:	3001      	adds	r0, #1
 800bde6:	d03a      	beq.n	800be5e <_malloc_r+0xea>
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	442b      	add	r3, r5
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	bb62      	cbnz	r2, 800be50 <_malloc_r+0xdc>
 800bdf6:	f8c8 7000 	str.w	r7, [r8]
 800bdfa:	e00f      	b.n	800be1c <_malloc_r+0xa8>
 800bdfc:	6822      	ldr	r2, [r4, #0]
 800bdfe:	1b52      	subs	r2, r2, r5
 800be00:	d420      	bmi.n	800be44 <_malloc_r+0xd0>
 800be02:	2a0b      	cmp	r2, #11
 800be04:	d917      	bls.n	800be36 <_malloc_r+0xc2>
 800be06:	1961      	adds	r1, r4, r5
 800be08:	42a3      	cmp	r3, r4
 800be0a:	6025      	str	r5, [r4, #0]
 800be0c:	bf18      	it	ne
 800be0e:	6059      	strne	r1, [r3, #4]
 800be10:	6863      	ldr	r3, [r4, #4]
 800be12:	bf08      	it	eq
 800be14:	f8c8 1000 	streq.w	r1, [r8]
 800be18:	5162      	str	r2, [r4, r5]
 800be1a:	604b      	str	r3, [r1, #4]
 800be1c:	4630      	mov	r0, r6
 800be1e:	f000 f82f 	bl	800be80 <__malloc_unlock>
 800be22:	f104 000b 	add.w	r0, r4, #11
 800be26:	1d23      	adds	r3, r4, #4
 800be28:	f020 0007 	bic.w	r0, r0, #7
 800be2c:	1ac2      	subs	r2, r0, r3
 800be2e:	bf1c      	itt	ne
 800be30:	1a1b      	subne	r3, r3, r0
 800be32:	50a3      	strne	r3, [r4, r2]
 800be34:	e7af      	b.n	800bd96 <_malloc_r+0x22>
 800be36:	6862      	ldr	r2, [r4, #4]
 800be38:	42a3      	cmp	r3, r4
 800be3a:	bf0c      	ite	eq
 800be3c:	f8c8 2000 	streq.w	r2, [r8]
 800be40:	605a      	strne	r2, [r3, #4]
 800be42:	e7eb      	b.n	800be1c <_malloc_r+0xa8>
 800be44:	4623      	mov	r3, r4
 800be46:	6864      	ldr	r4, [r4, #4]
 800be48:	e7ae      	b.n	800bda8 <_malloc_r+0x34>
 800be4a:	463c      	mov	r4, r7
 800be4c:	687f      	ldr	r7, [r7, #4]
 800be4e:	e7b6      	b.n	800bdbe <_malloc_r+0x4a>
 800be50:	461a      	mov	r2, r3
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	42a3      	cmp	r3, r4
 800be56:	d1fb      	bne.n	800be50 <_malloc_r+0xdc>
 800be58:	2300      	movs	r3, #0
 800be5a:	6053      	str	r3, [r2, #4]
 800be5c:	e7de      	b.n	800be1c <_malloc_r+0xa8>
 800be5e:	230c      	movs	r3, #12
 800be60:	6033      	str	r3, [r6, #0]
 800be62:	4630      	mov	r0, r6
 800be64:	f000 f80c 	bl	800be80 <__malloc_unlock>
 800be68:	e794      	b.n	800bd94 <_malloc_r+0x20>
 800be6a:	6005      	str	r5, [r0, #0]
 800be6c:	e7d6      	b.n	800be1c <_malloc_r+0xa8>
 800be6e:	bf00      	nop
 800be70:	24000928 	.word	0x24000928

0800be74 <__malloc_lock>:
 800be74:	4801      	ldr	r0, [pc, #4]	@ (800be7c <__malloc_lock+0x8>)
 800be76:	f7ff b910 	b.w	800b09a <__retarget_lock_acquire_recursive>
 800be7a:	bf00      	nop
 800be7c:	24000920 	.word	0x24000920

0800be80 <__malloc_unlock>:
 800be80:	4801      	ldr	r0, [pc, #4]	@ (800be88 <__malloc_unlock+0x8>)
 800be82:	f7ff b90b 	b.w	800b09c <__retarget_lock_release_recursive>
 800be86:	bf00      	nop
 800be88:	24000920 	.word	0x24000920

0800be8c <_Balloc>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	69c6      	ldr	r6, [r0, #28]
 800be90:	4604      	mov	r4, r0
 800be92:	460d      	mov	r5, r1
 800be94:	b976      	cbnz	r6, 800beb4 <_Balloc+0x28>
 800be96:	2010      	movs	r0, #16
 800be98:	f7ff ff42 	bl	800bd20 <malloc>
 800be9c:	4602      	mov	r2, r0
 800be9e:	61e0      	str	r0, [r4, #28]
 800bea0:	b920      	cbnz	r0, 800beac <_Balloc+0x20>
 800bea2:	4b18      	ldr	r3, [pc, #96]	@ (800bf04 <_Balloc+0x78>)
 800bea4:	4818      	ldr	r0, [pc, #96]	@ (800bf08 <_Balloc+0x7c>)
 800bea6:	216b      	movs	r1, #107	@ 0x6b
 800bea8:	f000 fe20 	bl	800caec <__assert_func>
 800beac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800beb0:	6006      	str	r6, [r0, #0]
 800beb2:	60c6      	str	r6, [r0, #12]
 800beb4:	69e6      	ldr	r6, [r4, #28]
 800beb6:	68f3      	ldr	r3, [r6, #12]
 800beb8:	b183      	cbz	r3, 800bedc <_Balloc+0x50>
 800beba:	69e3      	ldr	r3, [r4, #28]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bec2:	b9b8      	cbnz	r0, 800bef4 <_Balloc+0x68>
 800bec4:	2101      	movs	r1, #1
 800bec6:	fa01 f605 	lsl.w	r6, r1, r5
 800beca:	1d72      	adds	r2, r6, #5
 800becc:	0092      	lsls	r2, r2, #2
 800bece:	4620      	mov	r0, r4
 800bed0:	f000 fe2a 	bl	800cb28 <_calloc_r>
 800bed4:	b160      	cbz	r0, 800bef0 <_Balloc+0x64>
 800bed6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800beda:	e00e      	b.n	800befa <_Balloc+0x6e>
 800bedc:	2221      	movs	r2, #33	@ 0x21
 800bede:	2104      	movs	r1, #4
 800bee0:	4620      	mov	r0, r4
 800bee2:	f000 fe21 	bl	800cb28 <_calloc_r>
 800bee6:	69e3      	ldr	r3, [r4, #28]
 800bee8:	60f0      	str	r0, [r6, #12]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1e4      	bne.n	800beba <_Balloc+0x2e>
 800bef0:	2000      	movs	r0, #0
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	6802      	ldr	r2, [r0, #0]
 800bef6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800befa:	2300      	movs	r3, #0
 800befc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf00:	e7f7      	b.n	800bef2 <_Balloc+0x66>
 800bf02:	bf00      	nop
 800bf04:	0800d339 	.word	0x0800d339
 800bf08:	0800d3b9 	.word	0x0800d3b9

0800bf0c <_Bfree>:
 800bf0c:	b570      	push	{r4, r5, r6, lr}
 800bf0e:	69c6      	ldr	r6, [r0, #28]
 800bf10:	4605      	mov	r5, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	b976      	cbnz	r6, 800bf34 <_Bfree+0x28>
 800bf16:	2010      	movs	r0, #16
 800bf18:	f7ff ff02 	bl	800bd20 <malloc>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	61e8      	str	r0, [r5, #28]
 800bf20:	b920      	cbnz	r0, 800bf2c <_Bfree+0x20>
 800bf22:	4b09      	ldr	r3, [pc, #36]	@ (800bf48 <_Bfree+0x3c>)
 800bf24:	4809      	ldr	r0, [pc, #36]	@ (800bf4c <_Bfree+0x40>)
 800bf26:	218f      	movs	r1, #143	@ 0x8f
 800bf28:	f000 fde0 	bl	800caec <__assert_func>
 800bf2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf30:	6006      	str	r6, [r0, #0]
 800bf32:	60c6      	str	r6, [r0, #12]
 800bf34:	b13c      	cbz	r4, 800bf46 <_Bfree+0x3a>
 800bf36:	69eb      	ldr	r3, [r5, #28]
 800bf38:	6862      	ldr	r2, [r4, #4]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf40:	6021      	str	r1, [r4, #0]
 800bf42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	0800d339 	.word	0x0800d339
 800bf4c:	0800d3b9 	.word	0x0800d3b9

0800bf50 <__multadd>:
 800bf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf54:	690d      	ldr	r5, [r1, #16]
 800bf56:	4607      	mov	r7, r0
 800bf58:	460c      	mov	r4, r1
 800bf5a:	461e      	mov	r6, r3
 800bf5c:	f101 0c14 	add.w	ip, r1, #20
 800bf60:	2000      	movs	r0, #0
 800bf62:	f8dc 3000 	ldr.w	r3, [ip]
 800bf66:	b299      	uxth	r1, r3
 800bf68:	fb02 6101 	mla	r1, r2, r1, r6
 800bf6c:	0c1e      	lsrs	r6, r3, #16
 800bf6e:	0c0b      	lsrs	r3, r1, #16
 800bf70:	fb02 3306 	mla	r3, r2, r6, r3
 800bf74:	b289      	uxth	r1, r1
 800bf76:	3001      	adds	r0, #1
 800bf78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf7c:	4285      	cmp	r5, r0
 800bf7e:	f84c 1b04 	str.w	r1, [ip], #4
 800bf82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf86:	dcec      	bgt.n	800bf62 <__multadd+0x12>
 800bf88:	b30e      	cbz	r6, 800bfce <__multadd+0x7e>
 800bf8a:	68a3      	ldr	r3, [r4, #8]
 800bf8c:	42ab      	cmp	r3, r5
 800bf8e:	dc19      	bgt.n	800bfc4 <__multadd+0x74>
 800bf90:	6861      	ldr	r1, [r4, #4]
 800bf92:	4638      	mov	r0, r7
 800bf94:	3101      	adds	r1, #1
 800bf96:	f7ff ff79 	bl	800be8c <_Balloc>
 800bf9a:	4680      	mov	r8, r0
 800bf9c:	b928      	cbnz	r0, 800bfaa <__multadd+0x5a>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd4 <__multadd+0x84>)
 800bfa2:	480d      	ldr	r0, [pc, #52]	@ (800bfd8 <__multadd+0x88>)
 800bfa4:	21ba      	movs	r1, #186	@ 0xba
 800bfa6:	f000 fda1 	bl	800caec <__assert_func>
 800bfaa:	6922      	ldr	r2, [r4, #16]
 800bfac:	3202      	adds	r2, #2
 800bfae:	f104 010c 	add.w	r1, r4, #12
 800bfb2:	0092      	lsls	r2, r2, #2
 800bfb4:	300c      	adds	r0, #12
 800bfb6:	f7ff f872 	bl	800b09e <memcpy>
 800bfba:	4621      	mov	r1, r4
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	f7ff ffa5 	bl	800bf0c <_Bfree>
 800bfc2:	4644      	mov	r4, r8
 800bfc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfc8:	3501      	adds	r5, #1
 800bfca:	615e      	str	r6, [r3, #20]
 800bfcc:	6125      	str	r5, [r4, #16]
 800bfce:	4620      	mov	r0, r4
 800bfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfd4:	0800d3a8 	.word	0x0800d3a8
 800bfd8:	0800d3b9 	.word	0x0800d3b9

0800bfdc <__hi0bits>:
 800bfdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	bf36      	itet	cc
 800bfe4:	0403      	lslcc	r3, r0, #16
 800bfe6:	2000      	movcs	r0, #0
 800bfe8:	2010      	movcc	r0, #16
 800bfea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bfee:	bf3c      	itt	cc
 800bff0:	021b      	lslcc	r3, r3, #8
 800bff2:	3008      	addcc	r0, #8
 800bff4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bff8:	bf3c      	itt	cc
 800bffa:	011b      	lslcc	r3, r3, #4
 800bffc:	3004      	addcc	r0, #4
 800bffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c002:	bf3c      	itt	cc
 800c004:	009b      	lslcc	r3, r3, #2
 800c006:	3002      	addcc	r0, #2
 800c008:	2b00      	cmp	r3, #0
 800c00a:	db05      	blt.n	800c018 <__hi0bits+0x3c>
 800c00c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c010:	f100 0001 	add.w	r0, r0, #1
 800c014:	bf08      	it	eq
 800c016:	2020      	moveq	r0, #32
 800c018:	4770      	bx	lr

0800c01a <__lo0bits>:
 800c01a:	6803      	ldr	r3, [r0, #0]
 800c01c:	4602      	mov	r2, r0
 800c01e:	f013 0007 	ands.w	r0, r3, #7
 800c022:	d00b      	beq.n	800c03c <__lo0bits+0x22>
 800c024:	07d9      	lsls	r1, r3, #31
 800c026:	d421      	bmi.n	800c06c <__lo0bits+0x52>
 800c028:	0798      	lsls	r0, r3, #30
 800c02a:	bf49      	itett	mi
 800c02c:	085b      	lsrmi	r3, r3, #1
 800c02e:	089b      	lsrpl	r3, r3, #2
 800c030:	2001      	movmi	r0, #1
 800c032:	6013      	strmi	r3, [r2, #0]
 800c034:	bf5c      	itt	pl
 800c036:	6013      	strpl	r3, [r2, #0]
 800c038:	2002      	movpl	r0, #2
 800c03a:	4770      	bx	lr
 800c03c:	b299      	uxth	r1, r3
 800c03e:	b909      	cbnz	r1, 800c044 <__lo0bits+0x2a>
 800c040:	0c1b      	lsrs	r3, r3, #16
 800c042:	2010      	movs	r0, #16
 800c044:	b2d9      	uxtb	r1, r3
 800c046:	b909      	cbnz	r1, 800c04c <__lo0bits+0x32>
 800c048:	3008      	adds	r0, #8
 800c04a:	0a1b      	lsrs	r3, r3, #8
 800c04c:	0719      	lsls	r1, r3, #28
 800c04e:	bf04      	itt	eq
 800c050:	091b      	lsreq	r3, r3, #4
 800c052:	3004      	addeq	r0, #4
 800c054:	0799      	lsls	r1, r3, #30
 800c056:	bf04      	itt	eq
 800c058:	089b      	lsreq	r3, r3, #2
 800c05a:	3002      	addeq	r0, #2
 800c05c:	07d9      	lsls	r1, r3, #31
 800c05e:	d403      	bmi.n	800c068 <__lo0bits+0x4e>
 800c060:	085b      	lsrs	r3, r3, #1
 800c062:	f100 0001 	add.w	r0, r0, #1
 800c066:	d003      	beq.n	800c070 <__lo0bits+0x56>
 800c068:	6013      	str	r3, [r2, #0]
 800c06a:	4770      	bx	lr
 800c06c:	2000      	movs	r0, #0
 800c06e:	4770      	bx	lr
 800c070:	2020      	movs	r0, #32
 800c072:	4770      	bx	lr

0800c074 <__i2b>:
 800c074:	b510      	push	{r4, lr}
 800c076:	460c      	mov	r4, r1
 800c078:	2101      	movs	r1, #1
 800c07a:	f7ff ff07 	bl	800be8c <_Balloc>
 800c07e:	4602      	mov	r2, r0
 800c080:	b928      	cbnz	r0, 800c08e <__i2b+0x1a>
 800c082:	4b05      	ldr	r3, [pc, #20]	@ (800c098 <__i2b+0x24>)
 800c084:	4805      	ldr	r0, [pc, #20]	@ (800c09c <__i2b+0x28>)
 800c086:	f240 1145 	movw	r1, #325	@ 0x145
 800c08a:	f000 fd2f 	bl	800caec <__assert_func>
 800c08e:	2301      	movs	r3, #1
 800c090:	6144      	str	r4, [r0, #20]
 800c092:	6103      	str	r3, [r0, #16]
 800c094:	bd10      	pop	{r4, pc}
 800c096:	bf00      	nop
 800c098:	0800d3a8 	.word	0x0800d3a8
 800c09c:	0800d3b9 	.word	0x0800d3b9

0800c0a0 <__multiply>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	4617      	mov	r7, r2
 800c0a6:	690a      	ldr	r2, [r1, #16]
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	bfa8      	it	ge
 800c0ae:	463b      	movge	r3, r7
 800c0b0:	4689      	mov	r9, r1
 800c0b2:	bfa4      	itt	ge
 800c0b4:	460f      	movge	r7, r1
 800c0b6:	4699      	movge	r9, r3
 800c0b8:	693d      	ldr	r5, [r7, #16]
 800c0ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	6879      	ldr	r1, [r7, #4]
 800c0c2:	eb05 060a 	add.w	r6, r5, sl
 800c0c6:	42b3      	cmp	r3, r6
 800c0c8:	b085      	sub	sp, #20
 800c0ca:	bfb8      	it	lt
 800c0cc:	3101      	addlt	r1, #1
 800c0ce:	f7ff fedd 	bl	800be8c <_Balloc>
 800c0d2:	b930      	cbnz	r0, 800c0e2 <__multiply+0x42>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	4b41      	ldr	r3, [pc, #260]	@ (800c1dc <__multiply+0x13c>)
 800c0d8:	4841      	ldr	r0, [pc, #260]	@ (800c1e0 <__multiply+0x140>)
 800c0da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c0de:	f000 fd05 	bl	800caec <__assert_func>
 800c0e2:	f100 0414 	add.w	r4, r0, #20
 800c0e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c0ea:	4623      	mov	r3, r4
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	4573      	cmp	r3, lr
 800c0f0:	d320      	bcc.n	800c134 <__multiply+0x94>
 800c0f2:	f107 0814 	add.w	r8, r7, #20
 800c0f6:	f109 0114 	add.w	r1, r9, #20
 800c0fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c0fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c102:	9302      	str	r3, [sp, #8]
 800c104:	1beb      	subs	r3, r5, r7
 800c106:	3b15      	subs	r3, #21
 800c108:	f023 0303 	bic.w	r3, r3, #3
 800c10c:	3304      	adds	r3, #4
 800c10e:	3715      	adds	r7, #21
 800c110:	42bd      	cmp	r5, r7
 800c112:	bf38      	it	cc
 800c114:	2304      	movcc	r3, #4
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	9b02      	ldr	r3, [sp, #8]
 800c11a:	9103      	str	r1, [sp, #12]
 800c11c:	428b      	cmp	r3, r1
 800c11e:	d80c      	bhi.n	800c13a <__multiply+0x9a>
 800c120:	2e00      	cmp	r6, #0
 800c122:	dd03      	ble.n	800c12c <__multiply+0x8c>
 800c124:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d055      	beq.n	800c1d8 <__multiply+0x138>
 800c12c:	6106      	str	r6, [r0, #16]
 800c12e:	b005      	add	sp, #20
 800c130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c134:	f843 2b04 	str.w	r2, [r3], #4
 800c138:	e7d9      	b.n	800c0ee <__multiply+0x4e>
 800c13a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c13e:	f1ba 0f00 	cmp.w	sl, #0
 800c142:	d01f      	beq.n	800c184 <__multiply+0xe4>
 800c144:	46c4      	mov	ip, r8
 800c146:	46a1      	mov	r9, r4
 800c148:	2700      	movs	r7, #0
 800c14a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c14e:	f8d9 3000 	ldr.w	r3, [r9]
 800c152:	fa1f fb82 	uxth.w	fp, r2
 800c156:	b29b      	uxth	r3, r3
 800c158:	fb0a 330b 	mla	r3, sl, fp, r3
 800c15c:	443b      	add	r3, r7
 800c15e:	f8d9 7000 	ldr.w	r7, [r9]
 800c162:	0c12      	lsrs	r2, r2, #16
 800c164:	0c3f      	lsrs	r7, r7, #16
 800c166:	fb0a 7202 	mla	r2, sl, r2, r7
 800c16a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c16e:	b29b      	uxth	r3, r3
 800c170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c174:	4565      	cmp	r5, ip
 800c176:	f849 3b04 	str.w	r3, [r9], #4
 800c17a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c17e:	d8e4      	bhi.n	800c14a <__multiply+0xaa>
 800c180:	9b01      	ldr	r3, [sp, #4]
 800c182:	50e7      	str	r7, [r4, r3]
 800c184:	9b03      	ldr	r3, [sp, #12]
 800c186:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c18a:	3104      	adds	r1, #4
 800c18c:	f1b9 0f00 	cmp.w	r9, #0
 800c190:	d020      	beq.n	800c1d4 <__multiply+0x134>
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	4647      	mov	r7, r8
 800c196:	46a4      	mov	ip, r4
 800c198:	f04f 0a00 	mov.w	sl, #0
 800c19c:	f8b7 b000 	ldrh.w	fp, [r7]
 800c1a0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c1a4:	fb09 220b 	mla	r2, r9, fp, r2
 800c1a8:	4452      	add	r2, sl
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1b0:	f84c 3b04 	str.w	r3, [ip], #4
 800c1b4:	f857 3b04 	ldr.w	r3, [r7], #4
 800c1b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1bc:	f8bc 3000 	ldrh.w	r3, [ip]
 800c1c0:	fb09 330a 	mla	r3, r9, sl, r3
 800c1c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c1c8:	42bd      	cmp	r5, r7
 800c1ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1ce:	d8e5      	bhi.n	800c19c <__multiply+0xfc>
 800c1d0:	9a01      	ldr	r2, [sp, #4]
 800c1d2:	50a3      	str	r3, [r4, r2]
 800c1d4:	3404      	adds	r4, #4
 800c1d6:	e79f      	b.n	800c118 <__multiply+0x78>
 800c1d8:	3e01      	subs	r6, #1
 800c1da:	e7a1      	b.n	800c120 <__multiply+0x80>
 800c1dc:	0800d3a8 	.word	0x0800d3a8
 800c1e0:	0800d3b9 	.word	0x0800d3b9

0800c1e4 <__pow5mult>:
 800c1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e8:	4615      	mov	r5, r2
 800c1ea:	f012 0203 	ands.w	r2, r2, #3
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	460e      	mov	r6, r1
 800c1f2:	d007      	beq.n	800c204 <__pow5mult+0x20>
 800c1f4:	4c25      	ldr	r4, [pc, #148]	@ (800c28c <__pow5mult+0xa8>)
 800c1f6:	3a01      	subs	r2, #1
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1fe:	f7ff fea7 	bl	800bf50 <__multadd>
 800c202:	4606      	mov	r6, r0
 800c204:	10ad      	asrs	r5, r5, #2
 800c206:	d03d      	beq.n	800c284 <__pow5mult+0xa0>
 800c208:	69fc      	ldr	r4, [r7, #28]
 800c20a:	b97c      	cbnz	r4, 800c22c <__pow5mult+0x48>
 800c20c:	2010      	movs	r0, #16
 800c20e:	f7ff fd87 	bl	800bd20 <malloc>
 800c212:	4602      	mov	r2, r0
 800c214:	61f8      	str	r0, [r7, #28]
 800c216:	b928      	cbnz	r0, 800c224 <__pow5mult+0x40>
 800c218:	4b1d      	ldr	r3, [pc, #116]	@ (800c290 <__pow5mult+0xac>)
 800c21a:	481e      	ldr	r0, [pc, #120]	@ (800c294 <__pow5mult+0xb0>)
 800c21c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c220:	f000 fc64 	bl	800caec <__assert_func>
 800c224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c228:	6004      	str	r4, [r0, #0]
 800c22a:	60c4      	str	r4, [r0, #12]
 800c22c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c234:	b94c      	cbnz	r4, 800c24a <__pow5mult+0x66>
 800c236:	f240 2171 	movw	r1, #625	@ 0x271
 800c23a:	4638      	mov	r0, r7
 800c23c:	f7ff ff1a 	bl	800c074 <__i2b>
 800c240:	2300      	movs	r3, #0
 800c242:	f8c8 0008 	str.w	r0, [r8, #8]
 800c246:	4604      	mov	r4, r0
 800c248:	6003      	str	r3, [r0, #0]
 800c24a:	f04f 0900 	mov.w	r9, #0
 800c24e:	07eb      	lsls	r3, r5, #31
 800c250:	d50a      	bpl.n	800c268 <__pow5mult+0x84>
 800c252:	4631      	mov	r1, r6
 800c254:	4622      	mov	r2, r4
 800c256:	4638      	mov	r0, r7
 800c258:	f7ff ff22 	bl	800c0a0 <__multiply>
 800c25c:	4631      	mov	r1, r6
 800c25e:	4680      	mov	r8, r0
 800c260:	4638      	mov	r0, r7
 800c262:	f7ff fe53 	bl	800bf0c <_Bfree>
 800c266:	4646      	mov	r6, r8
 800c268:	106d      	asrs	r5, r5, #1
 800c26a:	d00b      	beq.n	800c284 <__pow5mult+0xa0>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	b938      	cbnz	r0, 800c280 <__pow5mult+0x9c>
 800c270:	4622      	mov	r2, r4
 800c272:	4621      	mov	r1, r4
 800c274:	4638      	mov	r0, r7
 800c276:	f7ff ff13 	bl	800c0a0 <__multiply>
 800c27a:	6020      	str	r0, [r4, #0]
 800c27c:	f8c0 9000 	str.w	r9, [r0]
 800c280:	4604      	mov	r4, r0
 800c282:	e7e4      	b.n	800c24e <__pow5mult+0x6a>
 800c284:	4630      	mov	r0, r6
 800c286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c28a:	bf00      	nop
 800c28c:	0800d46c 	.word	0x0800d46c
 800c290:	0800d339 	.word	0x0800d339
 800c294:	0800d3b9 	.word	0x0800d3b9

0800c298 <__lshift>:
 800c298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c29c:	460c      	mov	r4, r1
 800c29e:	6849      	ldr	r1, [r1, #4]
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2a6:	68a3      	ldr	r3, [r4, #8]
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	4691      	mov	r9, r2
 800c2ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2b0:	f108 0601 	add.w	r6, r8, #1
 800c2b4:	42b3      	cmp	r3, r6
 800c2b6:	db0b      	blt.n	800c2d0 <__lshift+0x38>
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7ff fde7 	bl	800be8c <_Balloc>
 800c2be:	4605      	mov	r5, r0
 800c2c0:	b948      	cbnz	r0, 800c2d6 <__lshift+0x3e>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	4b28      	ldr	r3, [pc, #160]	@ (800c368 <__lshift+0xd0>)
 800c2c6:	4829      	ldr	r0, [pc, #164]	@ (800c36c <__lshift+0xd4>)
 800c2c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c2cc:	f000 fc0e 	bl	800caec <__assert_func>
 800c2d0:	3101      	adds	r1, #1
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	e7ee      	b.n	800c2b4 <__lshift+0x1c>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	f100 0114 	add.w	r1, r0, #20
 800c2dc:	f100 0210 	add.w	r2, r0, #16
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	4553      	cmp	r3, sl
 800c2e4:	db33      	blt.n	800c34e <__lshift+0xb6>
 800c2e6:	6920      	ldr	r0, [r4, #16]
 800c2e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2ec:	f104 0314 	add.w	r3, r4, #20
 800c2f0:	f019 091f 	ands.w	r9, r9, #31
 800c2f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2fc:	d02b      	beq.n	800c356 <__lshift+0xbe>
 800c2fe:	f1c9 0e20 	rsb	lr, r9, #32
 800c302:	468a      	mov	sl, r1
 800c304:	2200      	movs	r2, #0
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	fa00 f009 	lsl.w	r0, r0, r9
 800c30c:	4310      	orrs	r0, r2
 800c30e:	f84a 0b04 	str.w	r0, [sl], #4
 800c312:	f853 2b04 	ldr.w	r2, [r3], #4
 800c316:	459c      	cmp	ip, r3
 800c318:	fa22 f20e 	lsr.w	r2, r2, lr
 800c31c:	d8f3      	bhi.n	800c306 <__lshift+0x6e>
 800c31e:	ebac 0304 	sub.w	r3, ip, r4
 800c322:	3b15      	subs	r3, #21
 800c324:	f023 0303 	bic.w	r3, r3, #3
 800c328:	3304      	adds	r3, #4
 800c32a:	f104 0015 	add.w	r0, r4, #21
 800c32e:	4560      	cmp	r0, ip
 800c330:	bf88      	it	hi
 800c332:	2304      	movhi	r3, #4
 800c334:	50ca      	str	r2, [r1, r3]
 800c336:	b10a      	cbz	r2, 800c33c <__lshift+0xa4>
 800c338:	f108 0602 	add.w	r6, r8, #2
 800c33c:	3e01      	subs	r6, #1
 800c33e:	4638      	mov	r0, r7
 800c340:	612e      	str	r6, [r5, #16]
 800c342:	4621      	mov	r1, r4
 800c344:	f7ff fde2 	bl	800bf0c <_Bfree>
 800c348:	4628      	mov	r0, r5
 800c34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c34e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c352:	3301      	adds	r3, #1
 800c354:	e7c5      	b.n	800c2e2 <__lshift+0x4a>
 800c356:	3904      	subs	r1, #4
 800c358:	f853 2b04 	ldr.w	r2, [r3], #4
 800c35c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c360:	459c      	cmp	ip, r3
 800c362:	d8f9      	bhi.n	800c358 <__lshift+0xc0>
 800c364:	e7ea      	b.n	800c33c <__lshift+0xa4>
 800c366:	bf00      	nop
 800c368:	0800d3a8 	.word	0x0800d3a8
 800c36c:	0800d3b9 	.word	0x0800d3b9

0800c370 <__mcmp>:
 800c370:	690a      	ldr	r2, [r1, #16]
 800c372:	4603      	mov	r3, r0
 800c374:	6900      	ldr	r0, [r0, #16]
 800c376:	1a80      	subs	r0, r0, r2
 800c378:	b530      	push	{r4, r5, lr}
 800c37a:	d10e      	bne.n	800c39a <__mcmp+0x2a>
 800c37c:	3314      	adds	r3, #20
 800c37e:	3114      	adds	r1, #20
 800c380:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c384:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c388:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c38c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c390:	4295      	cmp	r5, r2
 800c392:	d003      	beq.n	800c39c <__mcmp+0x2c>
 800c394:	d205      	bcs.n	800c3a2 <__mcmp+0x32>
 800c396:	f04f 30ff 	mov.w	r0, #4294967295
 800c39a:	bd30      	pop	{r4, r5, pc}
 800c39c:	42a3      	cmp	r3, r4
 800c39e:	d3f3      	bcc.n	800c388 <__mcmp+0x18>
 800c3a0:	e7fb      	b.n	800c39a <__mcmp+0x2a>
 800c3a2:	2001      	movs	r0, #1
 800c3a4:	e7f9      	b.n	800c39a <__mcmp+0x2a>
	...

0800c3a8 <__mdiff>:
 800c3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	4689      	mov	r9, r1
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	4648      	mov	r0, r9
 800c3b4:	4614      	mov	r4, r2
 800c3b6:	f7ff ffdb 	bl	800c370 <__mcmp>
 800c3ba:	1e05      	subs	r5, r0, #0
 800c3bc:	d112      	bne.n	800c3e4 <__mdiff+0x3c>
 800c3be:	4629      	mov	r1, r5
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7ff fd63 	bl	800be8c <_Balloc>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	b928      	cbnz	r0, 800c3d6 <__mdiff+0x2e>
 800c3ca:	4b3f      	ldr	r3, [pc, #252]	@ (800c4c8 <__mdiff+0x120>)
 800c3cc:	f240 2137 	movw	r1, #567	@ 0x237
 800c3d0:	483e      	ldr	r0, [pc, #248]	@ (800c4cc <__mdiff+0x124>)
 800c3d2:	f000 fb8b 	bl	800caec <__assert_func>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3dc:	4610      	mov	r0, r2
 800c3de:	b003      	add	sp, #12
 800c3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e4:	bfbc      	itt	lt
 800c3e6:	464b      	movlt	r3, r9
 800c3e8:	46a1      	movlt	r9, r4
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c3f0:	bfba      	itte	lt
 800c3f2:	461c      	movlt	r4, r3
 800c3f4:	2501      	movlt	r5, #1
 800c3f6:	2500      	movge	r5, #0
 800c3f8:	f7ff fd48 	bl	800be8c <_Balloc>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	b918      	cbnz	r0, 800c408 <__mdiff+0x60>
 800c400:	4b31      	ldr	r3, [pc, #196]	@ (800c4c8 <__mdiff+0x120>)
 800c402:	f240 2145 	movw	r1, #581	@ 0x245
 800c406:	e7e3      	b.n	800c3d0 <__mdiff+0x28>
 800c408:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c40c:	6926      	ldr	r6, [r4, #16]
 800c40e:	60c5      	str	r5, [r0, #12]
 800c410:	f109 0310 	add.w	r3, r9, #16
 800c414:	f109 0514 	add.w	r5, r9, #20
 800c418:	f104 0e14 	add.w	lr, r4, #20
 800c41c:	f100 0b14 	add.w	fp, r0, #20
 800c420:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c424:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	46d9      	mov	r9, fp
 800c42c:	f04f 0c00 	mov.w	ip, #0
 800c430:	9b01      	ldr	r3, [sp, #4]
 800c432:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c436:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c43a:	9301      	str	r3, [sp, #4]
 800c43c:	fa1f f38a 	uxth.w	r3, sl
 800c440:	4619      	mov	r1, r3
 800c442:	b283      	uxth	r3, r0
 800c444:	1acb      	subs	r3, r1, r3
 800c446:	0c00      	lsrs	r0, r0, #16
 800c448:	4463      	add	r3, ip
 800c44a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c44e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c452:	b29b      	uxth	r3, r3
 800c454:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c458:	4576      	cmp	r6, lr
 800c45a:	f849 3b04 	str.w	r3, [r9], #4
 800c45e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c462:	d8e5      	bhi.n	800c430 <__mdiff+0x88>
 800c464:	1b33      	subs	r3, r6, r4
 800c466:	3b15      	subs	r3, #21
 800c468:	f023 0303 	bic.w	r3, r3, #3
 800c46c:	3415      	adds	r4, #21
 800c46e:	3304      	adds	r3, #4
 800c470:	42a6      	cmp	r6, r4
 800c472:	bf38      	it	cc
 800c474:	2304      	movcc	r3, #4
 800c476:	441d      	add	r5, r3
 800c478:	445b      	add	r3, fp
 800c47a:	461e      	mov	r6, r3
 800c47c:	462c      	mov	r4, r5
 800c47e:	4544      	cmp	r4, r8
 800c480:	d30e      	bcc.n	800c4a0 <__mdiff+0xf8>
 800c482:	f108 0103 	add.w	r1, r8, #3
 800c486:	1b49      	subs	r1, r1, r5
 800c488:	f021 0103 	bic.w	r1, r1, #3
 800c48c:	3d03      	subs	r5, #3
 800c48e:	45a8      	cmp	r8, r5
 800c490:	bf38      	it	cc
 800c492:	2100      	movcc	r1, #0
 800c494:	440b      	add	r3, r1
 800c496:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c49a:	b191      	cbz	r1, 800c4c2 <__mdiff+0x11a>
 800c49c:	6117      	str	r7, [r2, #16]
 800c49e:	e79d      	b.n	800c3dc <__mdiff+0x34>
 800c4a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4a4:	46e6      	mov	lr, ip
 800c4a6:	0c08      	lsrs	r0, r1, #16
 800c4a8:	fa1c fc81 	uxtah	ip, ip, r1
 800c4ac:	4471      	add	r1, lr
 800c4ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c4b2:	b289      	uxth	r1, r1
 800c4b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c4b8:	f846 1b04 	str.w	r1, [r6], #4
 800c4bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4c0:	e7dd      	b.n	800c47e <__mdiff+0xd6>
 800c4c2:	3f01      	subs	r7, #1
 800c4c4:	e7e7      	b.n	800c496 <__mdiff+0xee>
 800c4c6:	bf00      	nop
 800c4c8:	0800d3a8 	.word	0x0800d3a8
 800c4cc:	0800d3b9 	.word	0x0800d3b9

0800c4d0 <__d2b>:
 800c4d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4d4:	460f      	mov	r7, r1
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	ec59 8b10 	vmov	r8, r9, d0
 800c4dc:	4616      	mov	r6, r2
 800c4de:	f7ff fcd5 	bl	800be8c <_Balloc>
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	b930      	cbnz	r0, 800c4f4 <__d2b+0x24>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	4b23      	ldr	r3, [pc, #140]	@ (800c578 <__d2b+0xa8>)
 800c4ea:	4824      	ldr	r0, [pc, #144]	@ (800c57c <__d2b+0xac>)
 800c4ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800c4f0:	f000 fafc 	bl	800caec <__assert_func>
 800c4f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c4f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4fc:	b10d      	cbz	r5, 800c502 <__d2b+0x32>
 800c4fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	f1b8 0300 	subs.w	r3, r8, #0
 800c508:	d023      	beq.n	800c552 <__d2b+0x82>
 800c50a:	4668      	mov	r0, sp
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	f7ff fd84 	bl	800c01a <__lo0bits>
 800c512:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c516:	b1d0      	cbz	r0, 800c54e <__d2b+0x7e>
 800c518:	f1c0 0320 	rsb	r3, r0, #32
 800c51c:	fa02 f303 	lsl.w	r3, r2, r3
 800c520:	430b      	orrs	r3, r1
 800c522:	40c2      	lsrs	r2, r0
 800c524:	6163      	str	r3, [r4, #20]
 800c526:	9201      	str	r2, [sp, #4]
 800c528:	9b01      	ldr	r3, [sp, #4]
 800c52a:	61a3      	str	r3, [r4, #24]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	bf0c      	ite	eq
 800c530:	2201      	moveq	r2, #1
 800c532:	2202      	movne	r2, #2
 800c534:	6122      	str	r2, [r4, #16]
 800c536:	b1a5      	cbz	r5, 800c562 <__d2b+0x92>
 800c538:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c53c:	4405      	add	r5, r0
 800c53e:	603d      	str	r5, [r7, #0]
 800c540:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c544:	6030      	str	r0, [r6, #0]
 800c546:	4620      	mov	r0, r4
 800c548:	b003      	add	sp, #12
 800c54a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c54e:	6161      	str	r1, [r4, #20]
 800c550:	e7ea      	b.n	800c528 <__d2b+0x58>
 800c552:	a801      	add	r0, sp, #4
 800c554:	f7ff fd61 	bl	800c01a <__lo0bits>
 800c558:	9b01      	ldr	r3, [sp, #4]
 800c55a:	6163      	str	r3, [r4, #20]
 800c55c:	3020      	adds	r0, #32
 800c55e:	2201      	movs	r2, #1
 800c560:	e7e8      	b.n	800c534 <__d2b+0x64>
 800c562:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c566:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c56a:	6038      	str	r0, [r7, #0]
 800c56c:	6918      	ldr	r0, [r3, #16]
 800c56e:	f7ff fd35 	bl	800bfdc <__hi0bits>
 800c572:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c576:	e7e5      	b.n	800c544 <__d2b+0x74>
 800c578:	0800d3a8 	.word	0x0800d3a8
 800c57c:	0800d3b9 	.word	0x0800d3b9

0800c580 <__sfputc_r>:
 800c580:	6893      	ldr	r3, [r2, #8]
 800c582:	3b01      	subs	r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	b410      	push	{r4}
 800c588:	6093      	str	r3, [r2, #8]
 800c58a:	da08      	bge.n	800c59e <__sfputc_r+0x1e>
 800c58c:	6994      	ldr	r4, [r2, #24]
 800c58e:	42a3      	cmp	r3, r4
 800c590:	db01      	blt.n	800c596 <__sfputc_r+0x16>
 800c592:	290a      	cmp	r1, #10
 800c594:	d103      	bne.n	800c59e <__sfputc_r+0x1e>
 800c596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c59a:	f7fe bc6c 	b.w	800ae76 <__swbuf_r>
 800c59e:	6813      	ldr	r3, [r2, #0]
 800c5a0:	1c58      	adds	r0, r3, #1
 800c5a2:	6010      	str	r0, [r2, #0]
 800c5a4:	7019      	strb	r1, [r3, #0]
 800c5a6:	4608      	mov	r0, r1
 800c5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ac:	4770      	bx	lr

0800c5ae <__sfputs_r>:
 800c5ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b0:	4606      	mov	r6, r0
 800c5b2:	460f      	mov	r7, r1
 800c5b4:	4614      	mov	r4, r2
 800c5b6:	18d5      	adds	r5, r2, r3
 800c5b8:	42ac      	cmp	r4, r5
 800c5ba:	d101      	bne.n	800c5c0 <__sfputs_r+0x12>
 800c5bc:	2000      	movs	r0, #0
 800c5be:	e007      	b.n	800c5d0 <__sfputs_r+0x22>
 800c5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c4:	463a      	mov	r2, r7
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f7ff ffda 	bl	800c580 <__sfputc_r>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d1f3      	bne.n	800c5b8 <__sfputs_r+0xa>
 800c5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5d4 <_vfiprintf_r>:
 800c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	460d      	mov	r5, r1
 800c5da:	b09d      	sub	sp, #116	@ 0x74
 800c5dc:	4614      	mov	r4, r2
 800c5de:	4698      	mov	r8, r3
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	b118      	cbz	r0, 800c5ec <_vfiprintf_r+0x18>
 800c5e4:	6a03      	ldr	r3, [r0, #32]
 800c5e6:	b90b      	cbnz	r3, 800c5ec <_vfiprintf_r+0x18>
 800c5e8:	f7fe fb54 	bl	800ac94 <__sinit>
 800c5ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5ee:	07d9      	lsls	r1, r3, #31
 800c5f0:	d405      	bmi.n	800c5fe <_vfiprintf_r+0x2a>
 800c5f2:	89ab      	ldrh	r3, [r5, #12]
 800c5f4:	059a      	lsls	r2, r3, #22
 800c5f6:	d402      	bmi.n	800c5fe <_vfiprintf_r+0x2a>
 800c5f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5fa:	f7fe fd4e 	bl	800b09a <__retarget_lock_acquire_recursive>
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	071b      	lsls	r3, r3, #28
 800c602:	d501      	bpl.n	800c608 <_vfiprintf_r+0x34>
 800c604:	692b      	ldr	r3, [r5, #16]
 800c606:	b99b      	cbnz	r3, 800c630 <_vfiprintf_r+0x5c>
 800c608:	4629      	mov	r1, r5
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7fe fc72 	bl	800aef4 <__swsetup_r>
 800c610:	b170      	cbz	r0, 800c630 <_vfiprintf_r+0x5c>
 800c612:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c614:	07dc      	lsls	r4, r3, #31
 800c616:	d504      	bpl.n	800c622 <_vfiprintf_r+0x4e>
 800c618:	f04f 30ff 	mov.w	r0, #4294967295
 800c61c:	b01d      	add	sp, #116	@ 0x74
 800c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c622:	89ab      	ldrh	r3, [r5, #12]
 800c624:	0598      	lsls	r0, r3, #22
 800c626:	d4f7      	bmi.n	800c618 <_vfiprintf_r+0x44>
 800c628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c62a:	f7fe fd37 	bl	800b09c <__retarget_lock_release_recursive>
 800c62e:	e7f3      	b.n	800c618 <_vfiprintf_r+0x44>
 800c630:	2300      	movs	r3, #0
 800c632:	9309      	str	r3, [sp, #36]	@ 0x24
 800c634:	2320      	movs	r3, #32
 800c636:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c63a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c63e:	2330      	movs	r3, #48	@ 0x30
 800c640:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7f0 <_vfiprintf_r+0x21c>
 800c644:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c648:	f04f 0901 	mov.w	r9, #1
 800c64c:	4623      	mov	r3, r4
 800c64e:	469a      	mov	sl, r3
 800c650:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c654:	b10a      	cbz	r2, 800c65a <_vfiprintf_r+0x86>
 800c656:	2a25      	cmp	r2, #37	@ 0x25
 800c658:	d1f9      	bne.n	800c64e <_vfiprintf_r+0x7a>
 800c65a:	ebba 0b04 	subs.w	fp, sl, r4
 800c65e:	d00b      	beq.n	800c678 <_vfiprintf_r+0xa4>
 800c660:	465b      	mov	r3, fp
 800c662:	4622      	mov	r2, r4
 800c664:	4629      	mov	r1, r5
 800c666:	4630      	mov	r0, r6
 800c668:	f7ff ffa1 	bl	800c5ae <__sfputs_r>
 800c66c:	3001      	adds	r0, #1
 800c66e:	f000 80a7 	beq.w	800c7c0 <_vfiprintf_r+0x1ec>
 800c672:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c674:	445a      	add	r2, fp
 800c676:	9209      	str	r2, [sp, #36]	@ 0x24
 800c678:	f89a 3000 	ldrb.w	r3, [sl]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f000 809f 	beq.w	800c7c0 <_vfiprintf_r+0x1ec>
 800c682:	2300      	movs	r3, #0
 800c684:	f04f 32ff 	mov.w	r2, #4294967295
 800c688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c68c:	f10a 0a01 	add.w	sl, sl, #1
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	9307      	str	r3, [sp, #28]
 800c694:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c698:	931a      	str	r3, [sp, #104]	@ 0x68
 800c69a:	4654      	mov	r4, sl
 800c69c:	2205      	movs	r2, #5
 800c69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a2:	4853      	ldr	r0, [pc, #332]	@ (800c7f0 <_vfiprintf_r+0x21c>)
 800c6a4:	f7f3 fe44 	bl	8000330 <memchr>
 800c6a8:	9a04      	ldr	r2, [sp, #16]
 800c6aa:	b9d8      	cbnz	r0, 800c6e4 <_vfiprintf_r+0x110>
 800c6ac:	06d1      	lsls	r1, r2, #27
 800c6ae:	bf44      	itt	mi
 800c6b0:	2320      	movmi	r3, #32
 800c6b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6b6:	0713      	lsls	r3, r2, #28
 800c6b8:	bf44      	itt	mi
 800c6ba:	232b      	movmi	r3, #43	@ 0x2b
 800c6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6c6:	d015      	beq.n	800c6f4 <_vfiprintf_r+0x120>
 800c6c8:	9a07      	ldr	r2, [sp, #28]
 800c6ca:	4654      	mov	r4, sl
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	f04f 0c0a 	mov.w	ip, #10
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6d8:	3b30      	subs	r3, #48	@ 0x30
 800c6da:	2b09      	cmp	r3, #9
 800c6dc:	d94b      	bls.n	800c776 <_vfiprintf_r+0x1a2>
 800c6de:	b1b0      	cbz	r0, 800c70e <_vfiprintf_r+0x13a>
 800c6e0:	9207      	str	r2, [sp, #28]
 800c6e2:	e014      	b.n	800c70e <_vfiprintf_r+0x13a>
 800c6e4:	eba0 0308 	sub.w	r3, r0, r8
 800c6e8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	9304      	str	r3, [sp, #16]
 800c6f0:	46a2      	mov	sl, r4
 800c6f2:	e7d2      	b.n	800c69a <_vfiprintf_r+0xc6>
 800c6f4:	9b03      	ldr	r3, [sp, #12]
 800c6f6:	1d19      	adds	r1, r3, #4
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	9103      	str	r1, [sp, #12]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	bfbb      	ittet	lt
 800c700:	425b      	neglt	r3, r3
 800c702:	f042 0202 	orrlt.w	r2, r2, #2
 800c706:	9307      	strge	r3, [sp, #28]
 800c708:	9307      	strlt	r3, [sp, #28]
 800c70a:	bfb8      	it	lt
 800c70c:	9204      	strlt	r2, [sp, #16]
 800c70e:	7823      	ldrb	r3, [r4, #0]
 800c710:	2b2e      	cmp	r3, #46	@ 0x2e
 800c712:	d10a      	bne.n	800c72a <_vfiprintf_r+0x156>
 800c714:	7863      	ldrb	r3, [r4, #1]
 800c716:	2b2a      	cmp	r3, #42	@ 0x2a
 800c718:	d132      	bne.n	800c780 <_vfiprintf_r+0x1ac>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	1d1a      	adds	r2, r3, #4
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	9203      	str	r2, [sp, #12]
 800c722:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c726:	3402      	adds	r4, #2
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c800 <_vfiprintf_r+0x22c>
 800c72e:	7821      	ldrb	r1, [r4, #0]
 800c730:	2203      	movs	r2, #3
 800c732:	4650      	mov	r0, sl
 800c734:	f7f3 fdfc 	bl	8000330 <memchr>
 800c738:	b138      	cbz	r0, 800c74a <_vfiprintf_r+0x176>
 800c73a:	9b04      	ldr	r3, [sp, #16]
 800c73c:	eba0 000a 	sub.w	r0, r0, sl
 800c740:	2240      	movs	r2, #64	@ 0x40
 800c742:	4082      	lsls	r2, r0
 800c744:	4313      	orrs	r3, r2
 800c746:	3401      	adds	r4, #1
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74e:	4829      	ldr	r0, [pc, #164]	@ (800c7f4 <_vfiprintf_r+0x220>)
 800c750:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c754:	2206      	movs	r2, #6
 800c756:	f7f3 fdeb 	bl	8000330 <memchr>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d03f      	beq.n	800c7de <_vfiprintf_r+0x20a>
 800c75e:	4b26      	ldr	r3, [pc, #152]	@ (800c7f8 <_vfiprintf_r+0x224>)
 800c760:	bb1b      	cbnz	r3, 800c7aa <_vfiprintf_r+0x1d6>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	3307      	adds	r3, #7
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	3308      	adds	r3, #8
 800c76c:	9303      	str	r3, [sp, #12]
 800c76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c770:	443b      	add	r3, r7
 800c772:	9309      	str	r3, [sp, #36]	@ 0x24
 800c774:	e76a      	b.n	800c64c <_vfiprintf_r+0x78>
 800c776:	fb0c 3202 	mla	r2, ip, r2, r3
 800c77a:	460c      	mov	r4, r1
 800c77c:	2001      	movs	r0, #1
 800c77e:	e7a8      	b.n	800c6d2 <_vfiprintf_r+0xfe>
 800c780:	2300      	movs	r3, #0
 800c782:	3401      	adds	r4, #1
 800c784:	9305      	str	r3, [sp, #20]
 800c786:	4619      	mov	r1, r3
 800c788:	f04f 0c0a 	mov.w	ip, #10
 800c78c:	4620      	mov	r0, r4
 800c78e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c792:	3a30      	subs	r2, #48	@ 0x30
 800c794:	2a09      	cmp	r2, #9
 800c796:	d903      	bls.n	800c7a0 <_vfiprintf_r+0x1cc>
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d0c6      	beq.n	800c72a <_vfiprintf_r+0x156>
 800c79c:	9105      	str	r1, [sp, #20]
 800c79e:	e7c4      	b.n	800c72a <_vfiprintf_r+0x156>
 800c7a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e7f0      	b.n	800c78c <_vfiprintf_r+0x1b8>
 800c7aa:	ab03      	add	r3, sp, #12
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	462a      	mov	r2, r5
 800c7b0:	4b12      	ldr	r3, [pc, #72]	@ (800c7fc <_vfiprintf_r+0x228>)
 800c7b2:	a904      	add	r1, sp, #16
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f7fd fe3b 	bl	800a430 <_printf_float>
 800c7ba:	4607      	mov	r7, r0
 800c7bc:	1c78      	adds	r0, r7, #1
 800c7be:	d1d6      	bne.n	800c76e <_vfiprintf_r+0x19a>
 800c7c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7c2:	07d9      	lsls	r1, r3, #31
 800c7c4:	d405      	bmi.n	800c7d2 <_vfiprintf_r+0x1fe>
 800c7c6:	89ab      	ldrh	r3, [r5, #12]
 800c7c8:	059a      	lsls	r2, r3, #22
 800c7ca:	d402      	bmi.n	800c7d2 <_vfiprintf_r+0x1fe>
 800c7cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7ce:	f7fe fc65 	bl	800b09c <__retarget_lock_release_recursive>
 800c7d2:	89ab      	ldrh	r3, [r5, #12]
 800c7d4:	065b      	lsls	r3, r3, #25
 800c7d6:	f53f af1f 	bmi.w	800c618 <_vfiprintf_r+0x44>
 800c7da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7dc:	e71e      	b.n	800c61c <_vfiprintf_r+0x48>
 800c7de:	ab03      	add	r3, sp, #12
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	462a      	mov	r2, r5
 800c7e4:	4b05      	ldr	r3, [pc, #20]	@ (800c7fc <_vfiprintf_r+0x228>)
 800c7e6:	a904      	add	r1, sp, #16
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f7fe f8a9 	bl	800a940 <_printf_i>
 800c7ee:	e7e4      	b.n	800c7ba <_vfiprintf_r+0x1e6>
 800c7f0:	0800d412 	.word	0x0800d412
 800c7f4:	0800d41c 	.word	0x0800d41c
 800c7f8:	0800a431 	.word	0x0800a431
 800c7fc:	0800c5af 	.word	0x0800c5af
 800c800:	0800d418 	.word	0x0800d418

0800c804 <__sflush_r>:
 800c804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80c:	0716      	lsls	r6, r2, #28
 800c80e:	4605      	mov	r5, r0
 800c810:	460c      	mov	r4, r1
 800c812:	d454      	bmi.n	800c8be <__sflush_r+0xba>
 800c814:	684b      	ldr	r3, [r1, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	dc02      	bgt.n	800c820 <__sflush_r+0x1c>
 800c81a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	dd48      	ble.n	800c8b2 <__sflush_r+0xae>
 800c820:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c822:	2e00      	cmp	r6, #0
 800c824:	d045      	beq.n	800c8b2 <__sflush_r+0xae>
 800c826:	2300      	movs	r3, #0
 800c828:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c82c:	682f      	ldr	r7, [r5, #0]
 800c82e:	6a21      	ldr	r1, [r4, #32]
 800c830:	602b      	str	r3, [r5, #0]
 800c832:	d030      	beq.n	800c896 <__sflush_r+0x92>
 800c834:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	0759      	lsls	r1, r3, #29
 800c83a:	d505      	bpl.n	800c848 <__sflush_r+0x44>
 800c83c:	6863      	ldr	r3, [r4, #4]
 800c83e:	1ad2      	subs	r2, r2, r3
 800c840:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c842:	b10b      	cbz	r3, 800c848 <__sflush_r+0x44>
 800c844:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c846:	1ad2      	subs	r2, r2, r3
 800c848:	2300      	movs	r3, #0
 800c84a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c84c:	6a21      	ldr	r1, [r4, #32]
 800c84e:	4628      	mov	r0, r5
 800c850:	47b0      	blx	r6
 800c852:	1c43      	adds	r3, r0, #1
 800c854:	89a3      	ldrh	r3, [r4, #12]
 800c856:	d106      	bne.n	800c866 <__sflush_r+0x62>
 800c858:	6829      	ldr	r1, [r5, #0]
 800c85a:	291d      	cmp	r1, #29
 800c85c:	d82b      	bhi.n	800c8b6 <__sflush_r+0xb2>
 800c85e:	4a2a      	ldr	r2, [pc, #168]	@ (800c908 <__sflush_r+0x104>)
 800c860:	40ca      	lsrs	r2, r1
 800c862:	07d6      	lsls	r6, r2, #31
 800c864:	d527      	bpl.n	800c8b6 <__sflush_r+0xb2>
 800c866:	2200      	movs	r2, #0
 800c868:	6062      	str	r2, [r4, #4]
 800c86a:	04d9      	lsls	r1, r3, #19
 800c86c:	6922      	ldr	r2, [r4, #16]
 800c86e:	6022      	str	r2, [r4, #0]
 800c870:	d504      	bpl.n	800c87c <__sflush_r+0x78>
 800c872:	1c42      	adds	r2, r0, #1
 800c874:	d101      	bne.n	800c87a <__sflush_r+0x76>
 800c876:	682b      	ldr	r3, [r5, #0]
 800c878:	b903      	cbnz	r3, 800c87c <__sflush_r+0x78>
 800c87a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c87c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c87e:	602f      	str	r7, [r5, #0]
 800c880:	b1b9      	cbz	r1, 800c8b2 <__sflush_r+0xae>
 800c882:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c886:	4299      	cmp	r1, r3
 800c888:	d002      	beq.n	800c890 <__sflush_r+0x8c>
 800c88a:	4628      	mov	r0, r5
 800c88c:	f7ff f9fe 	bl	800bc8c <_free_r>
 800c890:	2300      	movs	r3, #0
 800c892:	6363      	str	r3, [r4, #52]	@ 0x34
 800c894:	e00d      	b.n	800c8b2 <__sflush_r+0xae>
 800c896:	2301      	movs	r3, #1
 800c898:	4628      	mov	r0, r5
 800c89a:	47b0      	blx	r6
 800c89c:	4602      	mov	r2, r0
 800c89e:	1c50      	adds	r0, r2, #1
 800c8a0:	d1c9      	bne.n	800c836 <__sflush_r+0x32>
 800c8a2:	682b      	ldr	r3, [r5, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d0c6      	beq.n	800c836 <__sflush_r+0x32>
 800c8a8:	2b1d      	cmp	r3, #29
 800c8aa:	d001      	beq.n	800c8b0 <__sflush_r+0xac>
 800c8ac:	2b16      	cmp	r3, #22
 800c8ae:	d11e      	bne.n	800c8ee <__sflush_r+0xea>
 800c8b0:	602f      	str	r7, [r5, #0]
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	e022      	b.n	800c8fc <__sflush_r+0xf8>
 800c8b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ba:	b21b      	sxth	r3, r3
 800c8bc:	e01b      	b.n	800c8f6 <__sflush_r+0xf2>
 800c8be:	690f      	ldr	r7, [r1, #16]
 800c8c0:	2f00      	cmp	r7, #0
 800c8c2:	d0f6      	beq.n	800c8b2 <__sflush_r+0xae>
 800c8c4:	0793      	lsls	r3, r2, #30
 800c8c6:	680e      	ldr	r6, [r1, #0]
 800c8c8:	bf08      	it	eq
 800c8ca:	694b      	ldreq	r3, [r1, #20]
 800c8cc:	600f      	str	r7, [r1, #0]
 800c8ce:	bf18      	it	ne
 800c8d0:	2300      	movne	r3, #0
 800c8d2:	eba6 0807 	sub.w	r8, r6, r7
 800c8d6:	608b      	str	r3, [r1, #8]
 800c8d8:	f1b8 0f00 	cmp.w	r8, #0
 800c8dc:	dde9      	ble.n	800c8b2 <__sflush_r+0xae>
 800c8de:	6a21      	ldr	r1, [r4, #32]
 800c8e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c8e2:	4643      	mov	r3, r8
 800c8e4:	463a      	mov	r2, r7
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	47b0      	blx	r6
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	dc08      	bgt.n	800c900 <__sflush_r+0xfc>
 800c8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8f6:	81a3      	strh	r3, [r4, #12]
 800c8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c900:	4407      	add	r7, r0
 800c902:	eba8 0800 	sub.w	r8, r8, r0
 800c906:	e7e7      	b.n	800c8d8 <__sflush_r+0xd4>
 800c908:	20400001 	.word	0x20400001

0800c90c <_fflush_r>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	690b      	ldr	r3, [r1, #16]
 800c910:	4605      	mov	r5, r0
 800c912:	460c      	mov	r4, r1
 800c914:	b913      	cbnz	r3, 800c91c <_fflush_r+0x10>
 800c916:	2500      	movs	r5, #0
 800c918:	4628      	mov	r0, r5
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	b118      	cbz	r0, 800c926 <_fflush_r+0x1a>
 800c91e:	6a03      	ldr	r3, [r0, #32]
 800c920:	b90b      	cbnz	r3, 800c926 <_fflush_r+0x1a>
 800c922:	f7fe f9b7 	bl	800ac94 <__sinit>
 800c926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0f3      	beq.n	800c916 <_fflush_r+0xa>
 800c92e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c930:	07d0      	lsls	r0, r2, #31
 800c932:	d404      	bmi.n	800c93e <_fflush_r+0x32>
 800c934:	0599      	lsls	r1, r3, #22
 800c936:	d402      	bmi.n	800c93e <_fflush_r+0x32>
 800c938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c93a:	f7fe fbae 	bl	800b09a <__retarget_lock_acquire_recursive>
 800c93e:	4628      	mov	r0, r5
 800c940:	4621      	mov	r1, r4
 800c942:	f7ff ff5f 	bl	800c804 <__sflush_r>
 800c946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c948:	07da      	lsls	r2, r3, #31
 800c94a:	4605      	mov	r5, r0
 800c94c:	d4e4      	bmi.n	800c918 <_fflush_r+0xc>
 800c94e:	89a3      	ldrh	r3, [r4, #12]
 800c950:	059b      	lsls	r3, r3, #22
 800c952:	d4e1      	bmi.n	800c918 <_fflush_r+0xc>
 800c954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c956:	f7fe fba1 	bl	800b09c <__retarget_lock_release_recursive>
 800c95a:	e7dd      	b.n	800c918 <_fflush_r+0xc>

0800c95c <__swhatbuf_r>:
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	460c      	mov	r4, r1
 800c960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c964:	2900      	cmp	r1, #0
 800c966:	b096      	sub	sp, #88	@ 0x58
 800c968:	4615      	mov	r5, r2
 800c96a:	461e      	mov	r6, r3
 800c96c:	da0d      	bge.n	800c98a <__swhatbuf_r+0x2e>
 800c96e:	89a3      	ldrh	r3, [r4, #12]
 800c970:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c974:	f04f 0100 	mov.w	r1, #0
 800c978:	bf14      	ite	ne
 800c97a:	2340      	movne	r3, #64	@ 0x40
 800c97c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c980:	2000      	movs	r0, #0
 800c982:	6031      	str	r1, [r6, #0]
 800c984:	602b      	str	r3, [r5, #0]
 800c986:	b016      	add	sp, #88	@ 0x58
 800c988:	bd70      	pop	{r4, r5, r6, pc}
 800c98a:	466a      	mov	r2, sp
 800c98c:	f000 f87c 	bl	800ca88 <_fstat_r>
 800c990:	2800      	cmp	r0, #0
 800c992:	dbec      	blt.n	800c96e <__swhatbuf_r+0x12>
 800c994:	9901      	ldr	r1, [sp, #4]
 800c996:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c99a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c99e:	4259      	negs	r1, r3
 800c9a0:	4159      	adcs	r1, r3
 800c9a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9a6:	e7eb      	b.n	800c980 <__swhatbuf_r+0x24>

0800c9a8 <__smakebuf_r>:
 800c9a8:	898b      	ldrh	r3, [r1, #12]
 800c9aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ac:	079d      	lsls	r5, r3, #30
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	d507      	bpl.n	800c9c4 <__smakebuf_r+0x1c>
 800c9b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9b8:	6023      	str	r3, [r4, #0]
 800c9ba:	6123      	str	r3, [r4, #16]
 800c9bc:	2301      	movs	r3, #1
 800c9be:	6163      	str	r3, [r4, #20]
 800c9c0:	b003      	add	sp, #12
 800c9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9c4:	ab01      	add	r3, sp, #4
 800c9c6:	466a      	mov	r2, sp
 800c9c8:	f7ff ffc8 	bl	800c95c <__swhatbuf_r>
 800c9cc:	9f00      	ldr	r7, [sp, #0]
 800c9ce:	4605      	mov	r5, r0
 800c9d0:	4639      	mov	r1, r7
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f7ff f9ce 	bl	800bd74 <_malloc_r>
 800c9d8:	b948      	cbnz	r0, 800c9ee <__smakebuf_r+0x46>
 800c9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9de:	059a      	lsls	r2, r3, #22
 800c9e0:	d4ee      	bmi.n	800c9c0 <__smakebuf_r+0x18>
 800c9e2:	f023 0303 	bic.w	r3, r3, #3
 800c9e6:	f043 0302 	orr.w	r3, r3, #2
 800c9ea:	81a3      	strh	r3, [r4, #12]
 800c9ec:	e7e2      	b.n	800c9b4 <__smakebuf_r+0xc>
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	6020      	str	r0, [r4, #0]
 800c9f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9f6:	81a3      	strh	r3, [r4, #12]
 800c9f8:	9b01      	ldr	r3, [sp, #4]
 800c9fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9fe:	b15b      	cbz	r3, 800ca18 <__smakebuf_r+0x70>
 800ca00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca04:	4630      	mov	r0, r6
 800ca06:	f000 f851 	bl	800caac <_isatty_r>
 800ca0a:	b128      	cbz	r0, 800ca18 <__smakebuf_r+0x70>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f023 0303 	bic.w	r3, r3, #3
 800ca12:	f043 0301 	orr.w	r3, r3, #1
 800ca16:	81a3      	strh	r3, [r4, #12]
 800ca18:	89a3      	ldrh	r3, [r4, #12]
 800ca1a:	431d      	orrs	r5, r3
 800ca1c:	81a5      	strh	r5, [r4, #12]
 800ca1e:	e7cf      	b.n	800c9c0 <__smakebuf_r+0x18>

0800ca20 <_putc_r>:
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	460d      	mov	r5, r1
 800ca24:	4614      	mov	r4, r2
 800ca26:	4606      	mov	r6, r0
 800ca28:	b118      	cbz	r0, 800ca32 <_putc_r+0x12>
 800ca2a:	6a03      	ldr	r3, [r0, #32]
 800ca2c:	b90b      	cbnz	r3, 800ca32 <_putc_r+0x12>
 800ca2e:	f7fe f931 	bl	800ac94 <__sinit>
 800ca32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca34:	07d8      	lsls	r0, r3, #31
 800ca36:	d405      	bmi.n	800ca44 <_putc_r+0x24>
 800ca38:	89a3      	ldrh	r3, [r4, #12]
 800ca3a:	0599      	lsls	r1, r3, #22
 800ca3c:	d402      	bmi.n	800ca44 <_putc_r+0x24>
 800ca3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca40:	f7fe fb2b 	bl	800b09a <__retarget_lock_acquire_recursive>
 800ca44:	68a3      	ldr	r3, [r4, #8]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	60a3      	str	r3, [r4, #8]
 800ca4c:	da05      	bge.n	800ca5a <_putc_r+0x3a>
 800ca4e:	69a2      	ldr	r2, [r4, #24]
 800ca50:	4293      	cmp	r3, r2
 800ca52:	db12      	blt.n	800ca7a <_putc_r+0x5a>
 800ca54:	b2eb      	uxtb	r3, r5
 800ca56:	2b0a      	cmp	r3, #10
 800ca58:	d00f      	beq.n	800ca7a <_putc_r+0x5a>
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	1c5a      	adds	r2, r3, #1
 800ca5e:	6022      	str	r2, [r4, #0]
 800ca60:	701d      	strb	r5, [r3, #0]
 800ca62:	b2ed      	uxtb	r5, r5
 800ca64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca66:	07da      	lsls	r2, r3, #31
 800ca68:	d405      	bmi.n	800ca76 <_putc_r+0x56>
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	059b      	lsls	r3, r3, #22
 800ca6e:	d402      	bmi.n	800ca76 <_putc_r+0x56>
 800ca70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca72:	f7fe fb13 	bl	800b09c <__retarget_lock_release_recursive>
 800ca76:	4628      	mov	r0, r5
 800ca78:	bd70      	pop	{r4, r5, r6, pc}
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f7fe f9f9 	bl	800ae76 <__swbuf_r>
 800ca84:	4605      	mov	r5, r0
 800ca86:	e7ed      	b.n	800ca64 <_putc_r+0x44>

0800ca88 <_fstat_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	4d07      	ldr	r5, [pc, #28]	@ (800caa8 <_fstat_r+0x20>)
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	4604      	mov	r4, r0
 800ca90:	4608      	mov	r0, r1
 800ca92:	4611      	mov	r1, r2
 800ca94:	602b      	str	r3, [r5, #0]
 800ca96:	f7f5 f887 	bl	8001ba8 <_fstat>
 800ca9a:	1c43      	adds	r3, r0, #1
 800ca9c:	d102      	bne.n	800caa4 <_fstat_r+0x1c>
 800ca9e:	682b      	ldr	r3, [r5, #0]
 800caa0:	b103      	cbz	r3, 800caa4 <_fstat_r+0x1c>
 800caa2:	6023      	str	r3, [r4, #0]
 800caa4:	bd38      	pop	{r3, r4, r5, pc}
 800caa6:	bf00      	nop
 800caa8:	2400091c 	.word	0x2400091c

0800caac <_isatty_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4d06      	ldr	r5, [pc, #24]	@ (800cac8 <_isatty_r+0x1c>)
 800cab0:	2300      	movs	r3, #0
 800cab2:	4604      	mov	r4, r0
 800cab4:	4608      	mov	r0, r1
 800cab6:	602b      	str	r3, [r5, #0]
 800cab8:	f7f5 f886 	bl	8001bc8 <_isatty>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <_isatty_r+0x1a>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	b103      	cbz	r3, 800cac6 <_isatty_r+0x1a>
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	2400091c 	.word	0x2400091c

0800cacc <_sbrk_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4d06      	ldr	r5, [pc, #24]	@ (800cae8 <_sbrk_r+0x1c>)
 800cad0:	2300      	movs	r3, #0
 800cad2:	4604      	mov	r4, r0
 800cad4:	4608      	mov	r0, r1
 800cad6:	602b      	str	r3, [r5, #0]
 800cad8:	f7f5 f88e 	bl	8001bf8 <_sbrk>
 800cadc:	1c43      	adds	r3, r0, #1
 800cade:	d102      	bne.n	800cae6 <_sbrk_r+0x1a>
 800cae0:	682b      	ldr	r3, [r5, #0]
 800cae2:	b103      	cbz	r3, 800cae6 <_sbrk_r+0x1a>
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	bd38      	pop	{r3, r4, r5, pc}
 800cae8:	2400091c 	.word	0x2400091c

0800caec <__assert_func>:
 800caec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caee:	4614      	mov	r4, r2
 800caf0:	461a      	mov	r2, r3
 800caf2:	4b09      	ldr	r3, [pc, #36]	@ (800cb18 <__assert_func+0x2c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4605      	mov	r5, r0
 800caf8:	68d8      	ldr	r0, [r3, #12]
 800cafa:	b14c      	cbz	r4, 800cb10 <__assert_func+0x24>
 800cafc:	4b07      	ldr	r3, [pc, #28]	@ (800cb1c <__assert_func+0x30>)
 800cafe:	9100      	str	r1, [sp, #0]
 800cb00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb04:	4906      	ldr	r1, [pc, #24]	@ (800cb20 <__assert_func+0x34>)
 800cb06:	462b      	mov	r3, r5
 800cb08:	f000 f842 	bl	800cb90 <fiprintf>
 800cb0c:	f000 f852 	bl	800cbb4 <abort>
 800cb10:	4b04      	ldr	r3, [pc, #16]	@ (800cb24 <__assert_func+0x38>)
 800cb12:	461c      	mov	r4, r3
 800cb14:	e7f3      	b.n	800cafe <__assert_func+0x12>
 800cb16:	bf00      	nop
 800cb18:	24000024 	.word	0x24000024
 800cb1c:	0800d42d 	.word	0x0800d42d
 800cb20:	0800d43a 	.word	0x0800d43a
 800cb24:	0800d468 	.word	0x0800d468

0800cb28 <_calloc_r>:
 800cb28:	b570      	push	{r4, r5, r6, lr}
 800cb2a:	fba1 5402 	umull	r5, r4, r1, r2
 800cb2e:	b934      	cbnz	r4, 800cb3e <_calloc_r+0x16>
 800cb30:	4629      	mov	r1, r5
 800cb32:	f7ff f91f 	bl	800bd74 <_malloc_r>
 800cb36:	4606      	mov	r6, r0
 800cb38:	b928      	cbnz	r0, 800cb46 <_calloc_r+0x1e>
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	bd70      	pop	{r4, r5, r6, pc}
 800cb3e:	220c      	movs	r2, #12
 800cb40:	6002      	str	r2, [r0, #0]
 800cb42:	2600      	movs	r6, #0
 800cb44:	e7f9      	b.n	800cb3a <_calloc_r+0x12>
 800cb46:	462a      	mov	r2, r5
 800cb48:	4621      	mov	r1, r4
 800cb4a:	f7fe fa29 	bl	800afa0 <memset>
 800cb4e:	e7f4      	b.n	800cb3a <_calloc_r+0x12>

0800cb50 <__ascii_mbtowc>:
 800cb50:	b082      	sub	sp, #8
 800cb52:	b901      	cbnz	r1, 800cb56 <__ascii_mbtowc+0x6>
 800cb54:	a901      	add	r1, sp, #4
 800cb56:	b142      	cbz	r2, 800cb6a <__ascii_mbtowc+0x1a>
 800cb58:	b14b      	cbz	r3, 800cb6e <__ascii_mbtowc+0x1e>
 800cb5a:	7813      	ldrb	r3, [r2, #0]
 800cb5c:	600b      	str	r3, [r1, #0]
 800cb5e:	7812      	ldrb	r2, [r2, #0]
 800cb60:	1e10      	subs	r0, r2, #0
 800cb62:	bf18      	it	ne
 800cb64:	2001      	movne	r0, #1
 800cb66:	b002      	add	sp, #8
 800cb68:	4770      	bx	lr
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	e7fb      	b.n	800cb66 <__ascii_mbtowc+0x16>
 800cb6e:	f06f 0001 	mvn.w	r0, #1
 800cb72:	e7f8      	b.n	800cb66 <__ascii_mbtowc+0x16>

0800cb74 <__ascii_wctomb>:
 800cb74:	4603      	mov	r3, r0
 800cb76:	4608      	mov	r0, r1
 800cb78:	b141      	cbz	r1, 800cb8c <__ascii_wctomb+0x18>
 800cb7a:	2aff      	cmp	r2, #255	@ 0xff
 800cb7c:	d904      	bls.n	800cb88 <__ascii_wctomb+0x14>
 800cb7e:	228a      	movs	r2, #138	@ 0x8a
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	f04f 30ff 	mov.w	r0, #4294967295
 800cb86:	4770      	bx	lr
 800cb88:	700a      	strb	r2, [r1, #0]
 800cb8a:	2001      	movs	r0, #1
 800cb8c:	4770      	bx	lr
	...

0800cb90 <fiprintf>:
 800cb90:	b40e      	push	{r1, r2, r3}
 800cb92:	b503      	push	{r0, r1, lr}
 800cb94:	4601      	mov	r1, r0
 800cb96:	ab03      	add	r3, sp, #12
 800cb98:	4805      	ldr	r0, [pc, #20]	@ (800cbb0 <fiprintf+0x20>)
 800cb9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb9e:	6800      	ldr	r0, [r0, #0]
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	f7ff fd17 	bl	800c5d4 <_vfiprintf_r>
 800cba6:	b002      	add	sp, #8
 800cba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbac:	b003      	add	sp, #12
 800cbae:	4770      	bx	lr
 800cbb0:	24000024 	.word	0x24000024

0800cbb4 <abort>:
 800cbb4:	b508      	push	{r3, lr}
 800cbb6:	2006      	movs	r0, #6
 800cbb8:	f000 f82c 	bl	800cc14 <raise>
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	f7f4 ffa3 	bl	8001b08 <_exit>

0800cbc2 <_raise_r>:
 800cbc2:	291f      	cmp	r1, #31
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	460c      	mov	r4, r1
 800cbca:	d904      	bls.n	800cbd6 <_raise_r+0x14>
 800cbcc:	2316      	movs	r3, #22
 800cbce:	6003      	str	r3, [r0, #0]
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd4:	bd38      	pop	{r3, r4, r5, pc}
 800cbd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cbd8:	b112      	cbz	r2, 800cbe0 <_raise_r+0x1e>
 800cbda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbde:	b94b      	cbnz	r3, 800cbf4 <_raise_r+0x32>
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	f000 f831 	bl	800cc48 <_getpid_r>
 800cbe6:	4622      	mov	r2, r4
 800cbe8:	4601      	mov	r1, r0
 800cbea:	4628      	mov	r0, r5
 800cbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbf0:	f000 b818 	b.w	800cc24 <_kill_r>
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d00a      	beq.n	800cc0e <_raise_r+0x4c>
 800cbf8:	1c59      	adds	r1, r3, #1
 800cbfa:	d103      	bne.n	800cc04 <_raise_r+0x42>
 800cbfc:	2316      	movs	r3, #22
 800cbfe:	6003      	str	r3, [r0, #0]
 800cc00:	2001      	movs	r0, #1
 800cc02:	e7e7      	b.n	800cbd4 <_raise_r+0x12>
 800cc04:	2100      	movs	r1, #0
 800cc06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	4798      	blx	r3
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e7e0      	b.n	800cbd4 <_raise_r+0x12>
	...

0800cc14 <raise>:
 800cc14:	4b02      	ldr	r3, [pc, #8]	@ (800cc20 <raise+0xc>)
 800cc16:	4601      	mov	r1, r0
 800cc18:	6818      	ldr	r0, [r3, #0]
 800cc1a:	f7ff bfd2 	b.w	800cbc2 <_raise_r>
 800cc1e:	bf00      	nop
 800cc20:	24000024 	.word	0x24000024

0800cc24 <_kill_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4d07      	ldr	r5, [pc, #28]	@ (800cc44 <_kill_r+0x20>)
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	4608      	mov	r0, r1
 800cc2e:	4611      	mov	r1, r2
 800cc30:	602b      	str	r3, [r5, #0]
 800cc32:	f7f4 ff59 	bl	8001ae8 <_kill>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d102      	bne.n	800cc40 <_kill_r+0x1c>
 800cc3a:	682b      	ldr	r3, [r5, #0]
 800cc3c:	b103      	cbz	r3, 800cc40 <_kill_r+0x1c>
 800cc3e:	6023      	str	r3, [r4, #0]
 800cc40:	bd38      	pop	{r3, r4, r5, pc}
 800cc42:	bf00      	nop
 800cc44:	2400091c 	.word	0x2400091c

0800cc48 <_getpid_r>:
 800cc48:	f7f4 bf46 	b.w	8001ad8 <_getpid>
 800cc4c:	0000      	movs	r0, r0
	...

0800cc50 <fmod>:
 800cc50:	b508      	push	{r3, lr}
 800cc52:	ed2d 8b04 	vpush	{d8-d9}
 800cc56:	eeb0 9b40 	vmov.f64	d9, d0
 800cc5a:	eeb0 8b41 	vmov.f64	d8, d1
 800cc5e:	f000 f81b 	bl	800cc98 <__ieee754_fmod>
 800cc62:	eeb4 9b48 	vcmp.f64	d9, d8
 800cc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6a:	d60c      	bvs.n	800cc86 <fmod+0x36>
 800cc6c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800cc90 <fmod+0x40>
 800cc70:	eeb4 8b49 	vcmp.f64	d8, d9
 800cc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc78:	d105      	bne.n	800cc86 <fmod+0x36>
 800cc7a:	f7fe f9e3 	bl	800b044 <__errno>
 800cc7e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800cc82:	2321      	movs	r3, #33	@ 0x21
 800cc84:	6003      	str	r3, [r0, #0]
 800cc86:	ecbd 8b04 	vpop	{d8-d9}
 800cc8a:	bd08      	pop	{r3, pc}
 800cc8c:	f3af 8000 	nop.w
	...

0800cc98 <__ieee754_fmod>:
 800cc98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	ed8d 1b00 	vstr	d1, [sp]
 800cca0:	e9dd 0600 	ldrd	r0, r6, [sp]
 800cca4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800cca8:	ea50 0305 	orrs.w	r3, r0, r5
 800ccac:	4686      	mov	lr, r0
 800ccae:	d00d      	beq.n	800cccc <__ieee754_fmod+0x34>
 800ccb0:	ee10 ca90 	vmov	ip, s1
 800ccb4:	4b77      	ldr	r3, [pc, #476]	@ (800ce94 <__ieee754_fmod+0x1fc>)
 800ccb6:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800ccba:	4598      	cmp	r8, r3
 800ccbc:	d806      	bhi.n	800cccc <__ieee754_fmod+0x34>
 800ccbe:	4243      	negs	r3, r0
 800ccc0:	4a75      	ldr	r2, [pc, #468]	@ (800ce98 <__ieee754_fmod+0x200>)
 800ccc2:	4303      	orrs	r3, r0
 800ccc4:	ea45 73d3 	orr.w	r3, r5, r3, lsr #31
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d908      	bls.n	800ccde <__ieee754_fmod+0x46>
 800cccc:	ed9d 7b00 	vldr	d7, [sp]
 800ccd0:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ccd4:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800ccd8:	b003      	add	sp, #12
 800ccda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccde:	ee10 9a10 	vmov	r9, s0
 800cce2:	45a8      	cmp	r8, r5
 800cce4:	464f      	mov	r7, r9
 800cce6:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800ccea:	dc09      	bgt.n	800cd00 <__ieee754_fmod+0x68>
 800ccec:	dbf4      	blt.n	800ccd8 <__ieee754_fmod+0x40>
 800ccee:	4548      	cmp	r0, r9
 800ccf0:	d8f2      	bhi.n	800ccd8 <__ieee754_fmod+0x40>
 800ccf2:	d105      	bne.n	800cd00 <__ieee754_fmod+0x68>
 800ccf4:	4b69      	ldr	r3, [pc, #420]	@ (800ce9c <__ieee754_fmod+0x204>)
 800ccf6:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800ccfa:	ed93 0b00 	vldr	d0, [r3]
 800ccfe:	e7eb      	b.n	800ccd8 <__ieee754_fmod+0x40>
 800cd00:	4965      	ldr	r1, [pc, #404]	@ (800ce98 <__ieee754_fmod+0x200>)
 800cd02:	ea1c 0f01 	tst.w	ip, r1
 800cd06:	d14a      	bne.n	800cd9e <__ieee754_fmod+0x106>
 800cd08:	f1b8 0f00 	cmp.w	r8, #0
 800cd0c:	d13f      	bne.n	800cd8e <__ieee754_fmod+0xf6>
 800cd0e:	4a64      	ldr	r2, [pc, #400]	@ (800cea0 <__ieee754_fmod+0x208>)
 800cd10:	464b      	mov	r3, r9
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	dc38      	bgt.n	800cd88 <__ieee754_fmod+0xf0>
 800cd16:	420e      	tst	r6, r1
 800cd18:	d150      	bne.n	800cdbc <__ieee754_fmod+0x124>
 800cd1a:	2d00      	cmp	r5, #0
 800cd1c:	d147      	bne.n	800cdae <__ieee754_fmod+0x116>
 800cd1e:	4b60      	ldr	r3, [pc, #384]	@ (800cea0 <__ieee754_fmod+0x208>)
 800cd20:	4601      	mov	r1, r0
 800cd22:	2900      	cmp	r1, #0
 800cd24:	dc40      	bgt.n	800cda8 <__ieee754_fmod+0x110>
 800cd26:	495f      	ldr	r1, [pc, #380]	@ (800cea4 <__ieee754_fmod+0x20c>)
 800cd28:	428a      	cmp	r2, r1
 800cd2a:	db4b      	blt.n	800cdc4 <__ieee754_fmod+0x12c>
 800cd2c:	f3cc 0113 	ubfx	r1, ip, #0, #20
 800cd30:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800cd34:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 800cea4 <__ieee754_fmod+0x20c>
 800cd38:	4563      	cmp	r3, ip
 800cd3a:	db58      	blt.n	800cdee <__ieee754_fmod+0x156>
 800cd3c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cd40:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800cd44:	1ad0      	subs	r0, r2, r3
 800cd46:	1b8a      	subs	r2, r1, r6
 800cd48:	eba7 050e 	sub.w	r5, r7, lr
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d164      	bne.n	800ce1a <__ieee754_fmod+0x182>
 800cd50:	4577      	cmp	r7, lr
 800cd52:	bf38      	it	cc
 800cd54:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800cd58:	2a00      	cmp	r2, #0
 800cd5a:	bfbc      	itt	lt
 800cd5c:	463d      	movlt	r5, r7
 800cd5e:	460a      	movlt	r2, r1
 800cd60:	ea52 0105 	orrs.w	r1, r2, r5
 800cd64:	d0c6      	beq.n	800ccf4 <__ieee754_fmod+0x5c>
 800cd66:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800cd6a:	db6b      	blt.n	800ce44 <__ieee754_fmod+0x1ac>
 800cd6c:	494d      	ldr	r1, [pc, #308]	@ (800cea4 <__ieee754_fmod+0x20c>)
 800cd6e:	428b      	cmp	r3, r1
 800cd70:	db6e      	blt.n	800ce50 <__ieee754_fmod+0x1b8>
 800cd72:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800cd76:	4322      	orrs	r2, r4
 800cd78:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800cd7c:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800cd80:	4628      	mov	r0, r5
 800cd82:	ec41 0b10 	vmov	d0, r0, r1
 800cd86:	e7a7      	b.n	800ccd8 <__ieee754_fmod+0x40>
 800cd88:	3a01      	subs	r2, #1
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	e7c1      	b.n	800cd12 <__ieee754_fmod+0x7a>
 800cd8e:	4a45      	ldr	r2, [pc, #276]	@ (800cea4 <__ieee754_fmod+0x20c>)
 800cd90:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	ddbe      	ble.n	800cd16 <__ieee754_fmod+0x7e>
 800cd98:	3a01      	subs	r2, #1
 800cd9a:	005b      	lsls	r3, r3, #1
 800cd9c:	e7fa      	b.n	800cd94 <__ieee754_fmod+0xfc>
 800cd9e:	ea4f 5228 	mov.w	r2, r8, asr #20
 800cda2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cda6:	e7b6      	b.n	800cd16 <__ieee754_fmod+0x7e>
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	0049      	lsls	r1, r1, #1
 800cdac:	e7b9      	b.n	800cd22 <__ieee754_fmod+0x8a>
 800cdae:	4b3d      	ldr	r3, [pc, #244]	@ (800cea4 <__ieee754_fmod+0x20c>)
 800cdb0:	02e9      	lsls	r1, r5, #11
 800cdb2:	2900      	cmp	r1, #0
 800cdb4:	ddb7      	ble.n	800cd26 <__ieee754_fmod+0x8e>
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	0049      	lsls	r1, r1, #1
 800cdba:	e7fa      	b.n	800cdb2 <__ieee754_fmod+0x11a>
 800cdbc:	152b      	asrs	r3, r5, #20
 800cdbe:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cdc2:	e7b0      	b.n	800cd26 <__ieee754_fmod+0x8e>
 800cdc4:	eba1 0c02 	sub.w	ip, r1, r2
 800cdc8:	f1bc 0f1f 	cmp.w	ip, #31
 800cdcc:	dc09      	bgt.n	800cde2 <__ieee754_fmod+0x14a>
 800cdce:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800cdd2:	fa08 f70c 	lsl.w	r7, r8, ip
 800cdd6:	fa29 f101 	lsr.w	r1, r9, r1
 800cdda:	4339      	orrs	r1, r7
 800cddc:	fa09 f70c 	lsl.w	r7, r9, ip
 800cde0:	e7a8      	b.n	800cd34 <__ieee754_fmod+0x9c>
 800cde2:	4931      	ldr	r1, [pc, #196]	@ (800cea8 <__ieee754_fmod+0x210>)
 800cde4:	1a89      	subs	r1, r1, r2
 800cde6:	fa09 f101 	lsl.w	r1, r9, r1
 800cdea:	2700      	movs	r7, #0
 800cdec:	e7a2      	b.n	800cd34 <__ieee754_fmod+0x9c>
 800cdee:	ebac 0c03 	sub.w	ip, ip, r3
 800cdf2:	f1bc 0f1f 	cmp.w	ip, #31
 800cdf6:	dc09      	bgt.n	800ce0c <__ieee754_fmod+0x174>
 800cdf8:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800cdfc:	fa05 f50c 	lsl.w	r5, r5, ip
 800ce00:	fa20 f606 	lsr.w	r6, r0, r6
 800ce04:	432e      	orrs	r6, r5
 800ce06:	fa00 fe0c 	lsl.w	lr, r0, ip
 800ce0a:	e79b      	b.n	800cd44 <__ieee754_fmod+0xac>
 800ce0c:	4e26      	ldr	r6, [pc, #152]	@ (800cea8 <__ieee754_fmod+0x210>)
 800ce0e:	1af6      	subs	r6, r6, r3
 800ce10:	fa00 f606 	lsl.w	r6, r0, r6
 800ce14:	f04f 0e00 	mov.w	lr, #0
 800ce18:	e794      	b.n	800cd44 <__ieee754_fmod+0xac>
 800ce1a:	4577      	cmp	r7, lr
 800ce1c:	bf38      	it	cc
 800ce1e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ce22:	2a00      	cmp	r2, #0
 800ce24:	da05      	bge.n	800ce32 <__ieee754_fmod+0x19a>
 800ce26:	0ffa      	lsrs	r2, r7, #31
 800ce28:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ce2c:	007f      	lsls	r7, r7, #1
 800ce2e:	3801      	subs	r0, #1
 800ce30:	e789      	b.n	800cd46 <__ieee754_fmod+0xae>
 800ce32:	ea52 0105 	orrs.w	r1, r2, r5
 800ce36:	f43f af5d 	beq.w	800ccf4 <__ieee754_fmod+0x5c>
 800ce3a:	0fe9      	lsrs	r1, r5, #31
 800ce3c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800ce40:	006f      	lsls	r7, r5, #1
 800ce42:	e7f4      	b.n	800ce2e <__ieee754_fmod+0x196>
 800ce44:	0fe9      	lsrs	r1, r5, #31
 800ce46:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ce4a:	006d      	lsls	r5, r5, #1
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	e78a      	b.n	800cd66 <__ieee754_fmod+0xce>
 800ce50:	1ac9      	subs	r1, r1, r3
 800ce52:	2914      	cmp	r1, #20
 800ce54:	dc0a      	bgt.n	800ce6c <__ieee754_fmod+0x1d4>
 800ce56:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800ce5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce5e:	40cd      	lsrs	r5, r1
 800ce60:	432b      	orrs	r3, r5
 800ce62:	410a      	asrs	r2, r1
 800ce64:	ea42 0104 	orr.w	r1, r2, r4
 800ce68:	4618      	mov	r0, r3
 800ce6a:	e78a      	b.n	800cd82 <__ieee754_fmod+0xea>
 800ce6c:	291f      	cmp	r1, #31
 800ce6e:	dc07      	bgt.n	800ce80 <__ieee754_fmod+0x1e8>
 800ce70:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800ce74:	40cd      	lsrs	r5, r1
 800ce76:	fa02 f303 	lsl.w	r3, r2, r3
 800ce7a:	432b      	orrs	r3, r5
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	e7f1      	b.n	800ce64 <__ieee754_fmod+0x1cc>
 800ce80:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800ce84:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800ce88:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800ce8c:	33e2      	adds	r3, #226	@ 0xe2
 800ce8e:	fa42 f303 	asr.w	r3, r2, r3
 800ce92:	e7f3      	b.n	800ce7c <__ieee754_fmod+0x1e4>
 800ce94:	7fefffff 	.word	0x7fefffff
 800ce98:	7ff00000 	.word	0x7ff00000
 800ce9c:	0800d670 	.word	0x0800d670
 800cea0:	fffffbed 	.word	0xfffffbed
 800cea4:	fffffc02 	.word	0xfffffc02
 800cea8:	fffffbe2 	.word	0xfffffbe2

0800ceac <_init>:
 800ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceae:	bf00      	nop
 800ceb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb2:	bc08      	pop	{r3}
 800ceb4:	469e      	mov	lr, r3
 800ceb6:	4770      	bx	lr

0800ceb8 <_fini>:
 800ceb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceba:	bf00      	nop
 800cebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cebe:	bc08      	pop	{r3}
 800cec0:	469e      	mov	lr, r3
 800cec2:	4770      	bx	lr
